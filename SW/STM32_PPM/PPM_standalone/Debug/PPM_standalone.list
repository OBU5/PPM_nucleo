
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000921c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800941c  0800941c  0001941c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009484  08009484  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009484  08009484  00019484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800948c  0800948c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800948c  0800948c  0001948c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009490  08009490  00019490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00033560  20000074  08009508  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200335d4  08009508  000235d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015597  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002867  00000000  00000000  00035639  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d8  00000000  00000000  00037ea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001390  00000000  00000000  00039378  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000297be  00000000  00000000  0003a708  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f76d  00000000  00000000  00063ec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001036bd  00000000  00000000  00073633  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176cf0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b74  00000000  00000000  00176d6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08009404 	.word	0x08009404

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08009404 	.word	0x08009404

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f002 f93c 	bl	8002872 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f845 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fe8f 	bl	8001320 <MX_GPIO_Init>
  MX_DMA_Init();
 8000602:	f000 fe53 	bl	80012ac <MX_DMA_Init>
  MX_ADC1_Init();
 8000606:	f000 f8e1 	bl	80007cc <MX_ADC1_Init>
  MX_SPI1_Init();
 800060a:	f000 f9b1 	bl	8000970 <MX_SPI1_Init>
  MX_TIM1_Init();
 800060e:	f000 fa27 	bl	8000a60 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000612:	f000 fae5 	bl	8000be0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000616:	f000 fb37 	bl	8000c88 <MX_TIM3_Init>
  MX_TIM4_Init();
 800061a:	f000 fbad 	bl	8000d78 <MX_TIM4_Init>
  MX_TIM8_Init();
 800061e:	f000 fc89 	bl	8000f34 <MX_TIM8_Init>
  MX_UART5_Init();
 8000622:	f000 fd53 	bl	80010cc <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000626:	f000 fdb1 	bl	800118c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800062a:	f000 fddf 	bl	80011ec <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800062e:	f000 fe0d 	bl	800124c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000632:	f000 f91d 	bl	8000870 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000636:	f000 f95b 	bl	80008f0 <MX_I2C3_Init>
  MX_SPI4_Init();
 800063a:	f000 f9d3 	bl	80009e4 <MX_SPI4_Init>
  MX_TIM5_Init();
 800063e:	f000 fbf5 	bl	8000e2c <MX_TIM5_Init>
  MX_UART7_Init();
 8000642:	f000 fd73 	bl	800112c <MX_UART7_Init>
  MX_TIM6_Init();
 8000646:	f000 fc3f 	bl	8000ec8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 800064a:	2203      	movs	r2, #3
 800064c:	490a      	ldr	r1, [pc, #40]	; (8000678 <main+0x88>)
 800064e:	480b      	ldr	r0, [pc, #44]	; (800067c <main+0x8c>)
 8000650:	f007 fb98 	bl	8007d84 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <main+0x90>)
 8000656:	f005 fbfd 	bl	8005e54 <HAL_TIM_Base_Start_IT>
	char msg_buffers[25];
	uint16_t index = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	83fb      	strh	r3, [r7, #30]
	switchingCircuitIdle();
 800065e:	f001 f825 	bl	80016ac <switchingCircuitIdle>
	HAL_Delay(1000);
 8000662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000666:	f002 f961 	bl	800292c <HAL_Delay>
		 sprintf(msg_buffers, "Idle phase - %hu\n", index);
		 switchingCircuitIdle();
		 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
		 HAL_Delay(5000);
		 index++;*/
		if (state.preparedToRunPolarizationPhase) {
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <main+0x94>)
 800066c:	79db      	ldrb	r3, [r3, #7]
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0fb      	beq.n	800066a <main+0x7a>
			chooseActionByState();
 8000672:	f000 fee7 	bl	8001444 <chooseActionByState>
		if (state.preparedToRunPolarizationPhase) {
 8000676:	e7f8      	b.n	800066a <main+0x7a>
 8000678:	2000801c 	.word	0x2000801c
 800067c:	20007f50 	.word	0x20007f50
 8000680:	2001d8a8 	.word	0x2001d8a8
 8000684:	2001d928 	.word	0x2001d928

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b0b8      	sub	sp, #224	; 0xe0
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000692:	2234      	movs	r2, #52	; 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f008 faa6 	bl	8008be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2290      	movs	r2, #144	; 0x90
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f008 fa97 	bl	8008be8 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80006ba:	f003 fcfb 	bl	80040b4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006be:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <SystemClock_Config+0x138>)
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	4a3f      	ldr	r2, [pc, #252]	; (80007c0 <SystemClock_Config+0x138>)
 80006c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c8:	6413      	str	r3, [r2, #64]	; 0x40
 80006ca:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <SystemClock_Config+0x138>)
 80006cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d6:	4b3b      	ldr	r3, [pc, #236]	; (80007c4 <SystemClock_Config+0x13c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a3a      	ldr	r2, [pc, #232]	; (80007c4 <SystemClock_Config+0x13c>)
 80006dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	4b38      	ldr	r3, [pc, #224]	; (80007c4 <SystemClock_Config+0x13c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006ea:	603b      	str	r3, [r7, #0]
 80006ec:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006ee:	2301      	movs	r3, #1
 80006f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000702:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 5;
 800070a:	2305      	movs	r3, #5
 800070c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000710:	23d8      	movs	r3, #216	; 0xd8
 8000712:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fd24 	bl	8004174 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000732:	f001 fabf 	bl	8001cb4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000736:	f003 fccd 	bl	80040d4 <HAL_PWREx_EnableOverDrive>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000740:	f001 fab8 	bl	8001cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074a:	2302      	movs	r3, #2
 800074c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000756:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800075a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800075e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000762:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000766:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800076a:	2107      	movs	r1, #7
 800076c:	4618      	mov	r0, r3
 800076e:	f003 ffaf 	bl	80046d0 <HAL_RCC_ClockConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000778:	f001 fa9c 	bl	8001cb4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART1
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <SystemClock_Config+0x140>)
 800077e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000780:	2300      	movs	r3, #0
 8000782:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000784:	2300      	movs	r3, #0
 8000786:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000788:	2300      	movs	r3, #0
 800078a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800078c:	2300      	movs	r3, #0
 800078e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000790:	2300      	movs	r3, #0
 8000792:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000794:	2300      	movs	r3, #0
 8000796:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000798:	2300      	movs	r3, #0
 800079a:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800079c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007a0:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a2:	f107 0308 	add.w	r3, r7, #8
 80007a6:	4618      	mov	r0, r3
 80007a8:	f004 f964 	bl	8004a74 <HAL_RCCEx_PeriphCLKConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80007b2:	f001 fa7f 	bl	8001cb4 <Error_Handler>
  }
}
 80007b6:	bf00      	nop
 80007b8:	37e0      	adds	r7, #224	; 0xe0
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000
 80007c8:	000155d0 	.word	0x000155d0

080007cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007d2:	463b      	mov	r3, r7
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80007de:	4b22      	ldr	r3, [pc, #136]	; (8000868 <MX_ADC1_Init+0x9c>)
 80007e0:	4a22      	ldr	r2, [pc, #136]	; (800086c <MX_ADC1_Init+0xa0>)
 80007e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e4:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_ADC1_Init+0x9c>)
 80007e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_ADC1_Init+0x9c>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_ADC1_Init+0x9c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_ADC1_Init+0x9c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000800:	2200      	movs	r2, #0
 8000802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000808:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000810:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_ADC1_Init+0x9c>)
 800081e:	2201      	movs	r2, #1
 8000820:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_ADC1_Init+0x9c>)
 800082c:	2201      	movs	r2, #1
 800082e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000830:	480d      	ldr	r0, [pc, #52]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000832:	f002 f89d 	bl	8002970 <HAL_ADC_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800083c:	f001 fa3a 	bl	8001cb4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000840:	2300      	movs	r3, #0
 8000842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000844:	2301      	movs	r3, #1
 8000846:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000848:	2301      	movs	r3, #1
 800084a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	463b      	mov	r3, r7
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_ADC1_Init+0x9c>)
 8000852:	f002 f9d3 	bl	8002bfc <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800085c:	f001 fa2a 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2001d9b4 	.word	0x2001d9b4
 800086c:	40012000 	.word	0x40012000

08000870 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_I2C1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_I2C1_Init+0x74>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <MX_I2C1_Init+0x7c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000888:	2201      	movs	r2, #1
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008ac:	f003 fada 	bl	8003e64 <HAL_I2C_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b6:	f001 f9fd 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008be:	f003 fb61 	bl	8003f84 <HAL_I2CEx_ConfigAnalogFilter>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c8:	f001 f9f4 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008d0:	f003 fba3 	bl	800401a <HAL_I2CEx_ConfigDigitalFilter>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008da:	f001 f9eb 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	20007fd0 	.word	0x20007fd0
 80008e8:	40005400 	.word	0x40005400
 80008ec:	20404768 	.word	0x20404768

080008f0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_I2C3_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <MX_I2C3_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_I2C3_Init+0x74>)
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <MX_I2C3_Init+0x7c>)
 80008fe:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000900:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_I2C3_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000906:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_I2C3_Init+0x74>)
 8000908:	2201      	movs	r2, #1
 800090a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <MX_I2C3_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_I2C3_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2C3_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_I2C3_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_I2C3_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800092a:	480e      	ldr	r0, [pc, #56]	; (8000964 <MX_I2C3_Init+0x74>)
 800092c:	f003 fa9a 	bl	8003e64 <HAL_I2C_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000936:	f001 f9bd 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4809      	ldr	r0, [pc, #36]	; (8000964 <MX_I2C3_Init+0x74>)
 800093e:	f003 fb21 	bl	8003f84 <HAL_I2CEx_ConfigAnalogFilter>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000948:	f001 f9b4 	bl	8001cb4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800094c:	2100      	movs	r1, #0
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_I2C3_Init+0x74>)
 8000950:	f003 fb63 	bl	800401a <HAL_I2CEx_ConfigDigitalFilter>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800095a:	f001 f9ab 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20007da4 	.word	0x20007da4
 8000968:	40005c00 	.word	0x40005c00
 800096c:	20404768 	.word	0x20404768

08000970 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_SPI1_Init+0x6c>)
 8000976:	4a1a      	ldr	r2, [pc, #104]	; (80009e0 <MX_SPI1_Init+0x70>)
 8000978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_SPI1_Init+0x6c>)
 800097c:	2200      	movs	r2, #0
 800097e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_SPI1_Init+0x6c>)
 8000982:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000988:	4b14      	ldr	r3, [pc, #80]	; (80009dc <MX_SPI1_Init+0x6c>)
 800098a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800098e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_SPI1_Init+0x6c>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <MX_SPI1_Init+0x6c>)
 8000998:	2200      	movs	r2, #0
 800099a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <MX_SPI1_Init+0x6c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009b6:	2207      	movs	r2, #7
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_SPI1_Init+0x6c>)
 80009c8:	f004 fc7a 	bl	80052c0 <HAL_SPI_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80009d2:	f001 f96f 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20033448 	.word	0x20033448
 80009e0:	40013000 	.word	0x40013000

080009e4 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <MX_SPI4_Init+0x74>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MX_SPI4_Init+0x78>)
 80009ec:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80009ee:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_SPI4_Init+0x74>)
 80009f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009f4:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80009f6:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <MX_SPI4_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80009fc:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <MX_SPI4_Init+0x74>)
 80009fe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a02:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a10:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a12:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a16:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a32:	2207      	movs	r2, #7
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a3e:	2208      	movs	r2, #8
 8000a40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_SPI4_Init+0x74>)
 8000a44:	f004 fc3c 	bl	80052c0 <HAL_SPI_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000a4e:	f001 f931 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20033304 	.word	0x20033304
 8000a5c:	40013400 	.word	0x40013400

08000a60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b09a      	sub	sp, #104	; 0x68
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a66:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
 8000a90:	615a      	str	r2, [r3, #20]
 8000a92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	222c      	movs	r2, #44	; 0x2c
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f008 f8a4 	bl	8008be8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000aa0:	4b4d      	ldr	r3, [pc, #308]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000aa2:	4a4e      	ldr	r2, [pc, #312]	; (8000bdc <MX_TIM1_Init+0x17c>)
 8000aa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000aa6:	4b4c      	ldr	r3, [pc, #304]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b4a      	ldr	r3, [pc, #296]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4898-1;
 8000ab2:	4b49      	ldr	r3, [pc, #292]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000ab4:	f241 3221 	movw	r2, #4897	; 0x1321
 8000ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b47      	ldr	r3, [pc, #284]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ac0:	4b45      	ldr	r3, [pc, #276]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac6:	4b44      	ldr	r3, [pc, #272]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000acc:	4842      	ldr	r0, [pc, #264]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000ace:	f005 f996 	bl	8005dfe <HAL_TIM_Base_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ad8:	f001 f8ec 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ae2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	483b      	ldr	r0, [pc, #236]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000aea:	f006 f821 	bl	8006b30 <HAL_TIM_ConfigClockSource>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000af4:	f001 f8de 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af8:	4837      	ldr	r0, [pc, #220]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000afa:	f005 fa00 	bl	8005efe <HAL_TIM_PWM_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b04:	f001 f8d6 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b08:	2320      	movs	r3, #32
 8000b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b10:	2380      	movs	r3, #128	; 0x80
 8000b12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b18:	4619      	mov	r1, r3
 8000b1a:	482f      	ldr	r0, [pc, #188]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000b1c:	f006 ff28 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b26:	f001 f8c5 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b2a:	2370      	movs	r3, #112	; 0x70
 8000b2c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 864+10;
 8000b2e:	f240 336a 	movw	r3, #874	; 0x36a
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b34:	2302      	movs	r3, #2
 8000b36:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b4e:	2200      	movs	r2, #0
 8000b50:	4619      	mov	r1, r3
 8000b52:	4821      	ldr	r0, [pc, #132]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000b54:	f005 fed4 	bl	8006900 <HAL_TIM_PWM_ConfigChannel>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000b5e:	f001 f8a9 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b62:	2360      	movs	r3, #96	; 0x60
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 8000b66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b6a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b70:	2204      	movs	r2, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4818      	ldr	r0, [pc, #96]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000b76:	f005 fec3 	bl	8006900 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000b80:	f001 f898 	bl	8001cb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ba6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bb4:	1d3b      	adds	r3, r7, #4
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4807      	ldr	r0, [pc, #28]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000bba:	f006 ff67 	bl	8007a8c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000bc4:	f001 f876 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <MX_TIM1_Init+0x178>)
 8000bca:	f001 fb8b 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 8000bce:	bf00      	nop
 8000bd0:	3768      	adds	r7, #104	; 0x68
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20033408 	.word	0x20033408
 8000bdc:	40010000 	.word	0x40010000

08000be0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b088      	sub	sp, #32
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c28:	f005 fab8 	bl	800619c <HAL_TIM_IC_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c32:	f001 f83f 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	480f      	ldr	r0, [pc, #60]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c46:	f006 fe93 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c50:	f001 f830 	bl	8001cb4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c54:	2300      	movs	r3, #0
 8000c56:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_TIM2_Init+0xa4>)
 8000c6c:	f005 fdab 	bl	80067c6 <HAL_TIM_IC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c76:	f001 f81d 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200334ac 	.word	0x200334ac

08000c88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	60da      	str	r2, [r3, #12]
 8000cb6:	611a      	str	r2, [r3, #16]
 8000cb8:	615a      	str	r2, [r3, #20]
 8000cba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cbc:	4b2c      	ldr	r3, [pc, #176]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cbe:	4a2d      	ldr	r2, [pc, #180]	; (8000d74 <MX_TIM3_Init+0xec>)
 8000cc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cc2:	4b2b      	ldr	r3, [pc, #172]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc8:	4b29      	ldr	r3, [pc, #164]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000cce:	4b28      	ldr	r3, [pc, #160]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cd4:	4b26      	ldr	r3, [pc, #152]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ce0:	4823      	ldr	r0, [pc, #140]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000ce2:	f005 f88c 	bl	8005dfe <HAL_TIM_Base_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000cec:	f000 ffe2 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cf0:	481f      	ldr	r0, [pc, #124]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000cf2:	f005 f904 	bl	8005efe <HAL_TIM_PWM_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000cfc:	f000 ffda 	bl	8001cb4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4818      	ldr	r0, [pc, #96]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000d10:	f005 ffc8 	bl	8006ca4 <HAL_TIM_SlaveConfigSynchro>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d1a:	f000 ffcb 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4810      	ldr	r0, [pc, #64]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000d2e:	f006 fe1f 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d38:	f000 ffbc 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d3c:	2360      	movs	r3, #96	; 0x60
 8000d3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	4619      	mov	r1, r3
 8000d52:	4807      	ldr	r0, [pc, #28]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000d54:	f005 fdd4 	bl	8006900 <HAL_TIM_PWM_ConfigChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d5e:	f000 ffa9 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d62:	4803      	ldr	r0, [pc, #12]	; (8000d70 <MX_TIM3_Init+0xe8>)
 8000d64:	f001 fabe 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 8000d68:	bf00      	nop
 8000d6a:	3740      	adds	r7, #64	; 0x40
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	2001d8e8 	.word	0x2001d8e8
 8000d74:	40000400 	.word	0x40000400

08000d78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	615a      	str	r2, [r3, #20]
 8000d9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000d9e:	4a22      	ldr	r2, [pc, #136]	; (8000e28 <MX_TIM4_Init+0xb0>)
 8000da0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000da2:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000dae:	4b1d      	ldr	r3, [pc, #116]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dba:	4b1a      	ldr	r3, [pc, #104]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000dbc:	2280      	movs	r2, #128	; 0x80
 8000dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dc0:	4818      	ldr	r0, [pc, #96]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000dc2:	f005 f89c 	bl	8005efe <HAL_TIM_PWM_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000dcc:	f000 ff72 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4811      	ldr	r0, [pc, #68]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000de0:	f006 fdc6 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000dea:	f000 ff63 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dee:	2360      	movs	r3, #96	; 0x60
 8000df0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	4807      	ldr	r0, [pc, #28]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000e06:	f005 fd7b 	bl	8006900 <HAL_TIM_PWM_ConfigChannel>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000e10:	f000 ff50 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MX_TIM4_Init+0xac>)
 8000e16:	f001 fa65 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	; 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	20007f10 	.word	0x20007f10
 8000e28:	40000800 	.word	0x40000800

08000e2c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <MX_TIM5_Init+0x98>)
 8000e4e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2160-1;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e5e:	f640 026f 	movw	r2, #2159	; 0x86f
 8000e62:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e70:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e72:	f004 ffc4 	bl	8005dfe <HAL_TIM_Base_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e7c:	f000 ff1a 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000e8e:	f005 fe4f 	bl	8006b30 <HAL_TIM_ConfigClockSource>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e98:	f000 ff0c 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_TIM5_Init+0x94>)
 8000eaa:	f006 fd61 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000eb4:	f000 fefe 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2001d8a8 	.word	0x2001d8a8
 8000ec4:	40000c00 	.word	0x40000c00

08000ec8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ece:	1d3b      	adds	r3, r7, #4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000eda:	4a15      	ldr	r2, [pc, #84]	; (8000f30 <MX_TIM6_Init+0x68>)
 8000edc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000ede:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4898-1;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000eec:	f241 3221 	movw	r2, #4897	; 0x1321
 8000ef0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000efa:	f004 ff80 	bl	8005dfe <HAL_TIM_Base_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f04:	f000 fed6 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f08:	2320      	movs	r3, #32
 8000f0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_TIM6_Init+0x64>)
 8000f16:	f006 fd2b 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f20:	f000 fec8 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200333c8 	.word	0x200333c8
 8000f30:	40001000 	.word	0x40001000

08000f34 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b09e      	sub	sp, #120	; 0x78
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f3a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000f48:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f78:	463b      	mov	r3, r7
 8000f7a:	222c      	movs	r2, #44	; 0x2c
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f007 fe32 	bl	8008be8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f84:	4b4f      	ldr	r3, [pc, #316]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000f86:	4a50      	ldr	r2, [pc, #320]	; (80010c8 <MX_TIM8_Init+0x194>)
 8000f88:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f8a:	4b4e      	ldr	r3, [pc, #312]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b4c      	ldr	r3, [pc, #304]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 108-1;
 8000f96:	4b4b      	ldr	r3, [pc, #300]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000f98:	226b      	movs	r2, #107	; 0x6b
 8000f9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9c:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 24;
 8000fa2:	4b48      	ldr	r3, [pc, #288]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000fa4:	2218      	movs	r2, #24
 8000fa6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa8:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fae:	4845      	ldr	r0, [pc, #276]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000fb0:	f004 ff25 	bl	8005dfe <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000fba:	f000 fe7b 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000fc4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fc8:	4619      	mov	r1, r3
 8000fca:	483e      	ldr	r0, [pc, #248]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000fcc:	f005 fdb0 	bl	8006b30 <HAL_TIM_ConfigClockSource>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000fd6:	f000 fe6d 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000fda:	483a      	ldr	r0, [pc, #232]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000fdc:	f004 ff8f 	bl	8005efe <HAL_TIM_PWM_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000fe6:	f000 fe65 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000fea:	2108      	movs	r1, #8
 8000fec:	4835      	ldr	r0, [pc, #212]	; (80010c4 <MX_TIM8_Init+0x190>)
 8000fee:	f005 fa85 	bl	80064fc <HAL_TIM_OnePulse_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000ff8:	f000 fe5c 	bl	8001cb4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001000:	2300      	movs	r3, #0
 8001002:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001004:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001008:	4619      	mov	r1, r3
 800100a:	482e      	ldr	r0, [pc, #184]	; (80010c4 <MX_TIM8_Init+0x190>)
 800100c:	f005 fe4a 	bl	8006ca4 <HAL_TIM_SlaveConfigSynchro>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8001016:	f000 fe4d 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800101e:	2300      	movs	r3, #0
 8001020:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001022:	2300      	movs	r3, #0
 8001024:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001026:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800102a:	4619      	mov	r1, r3
 800102c:	4825      	ldr	r0, [pc, #148]	; (80010c4 <MX_TIM8_Init+0x190>)
 800102e:	f006 fc9f 	bl	8007970 <HAL_TIMEx_MasterConfigSynchronization>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001038:	f000 fe3c 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800103c:	2370      	movs	r3, #112	; 0x70
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 54;
 8001040:	2336      	movs	r3, #54	; 0x36
 8001042:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001048:	2300      	movs	r3, #0
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001058:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	4818      	ldr	r0, [pc, #96]	; (80010c4 <MX_TIM8_Init+0x190>)
 8001062:	f005 fc4d 	bl	8006900 <HAL_TIM_PWM_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 800106c:	f000 fe22 	bl	8001cb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001074:	2300      	movs	r3, #0
 8001076:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001088:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001096:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	4807      	ldr	r0, [pc, #28]	; (80010c4 <MX_TIM8_Init+0x190>)
 80010a6:	f006 fcf1 	bl	8007a8c <HAL_TIMEx_ConfigBreakDeadTime>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 80010b0:	f000 fe00 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <MX_TIM8_Init+0x190>)
 80010b6:	f001 f915 	bl	80022e4 <HAL_TIM_MspPostInit>

}
 80010ba:	bf00      	nop
 80010bc:	3778      	adds	r7, #120	; 0x78
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20007ed0 	.word	0x20007ed0
 80010c8:	40010400 	.word	0x40010400

080010cc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_UART5_Init+0x58>)
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <MX_UART5_Init+0x5c>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_UART5_Init+0x58>)
 80010d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010dc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_UART5_Init+0x58>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_UART5_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_UART5_Init+0x58>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_UART5_Init+0x58>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_UART5_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_UART5_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_UART5_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_UART5_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_UART5_Init+0x58>)
 8001110:	f006 fd58 	bl	8007bc4 <HAL_UART_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800111a:	f000 fdcb 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2001d934 	.word	0x2001d934
 8001128:	40005000 	.word	0x40005000

0800112c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_UART7_Init+0x58>)
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <MX_UART7_Init+0x5c>)
 8001134:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_UART7_Init+0x58>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_UART7_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_UART7_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_UART7_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_UART7_Init+0x58>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_UART7_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_UART7_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_UART7_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_UART7_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_UART7_Init+0x58>)
 8001170:	f006 fd28 	bl	8007bc4 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800117a:	f000 fd9b 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20007e50 	.word	0x20007e50
 8001188:	40007800 	.word	0x40007800

0800118c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <MX_USART1_UART_Init+0x5c>)
 8001194:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_USART1_UART_Init+0x58>)
 80011d0:	f006 fcf8 	bl	8007bc4 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011da:	f000 fd6b 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2001d9fc 	.word	0x2001d9fc
 80011e8:	40011000 	.word	0x40011000

080011ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_USART2_UART_Init+0x58>)
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <MX_USART2_UART_Init+0x5c>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_USART2_UART_Init+0x58>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART2_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART2_UART_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART2_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART2_UART_Init+0x58>)
 8001230:	f006 fcc8 	bl	8007bc4 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800123a:	f000 fd3b 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200334ec 	.word	0x200334ec
 8001248:	40004400 	.word	0x40004400

0800124c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001252:	4a14      	ldr	r2, [pc, #80]	; (80012a4 <MX_USART3_UART_Init+0x58>)
 8001254:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 8001256:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001258:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <MX_USART3_UART_Init+0x5c>)
 800125a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001270:	220c      	movs	r2, #12
 8001272:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001274:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800127c:	2200      	movs	r2, #0
 800127e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_USART3_UART_Init+0x54>)
 800128e:	f006 fc99 	bl	8007bc4 <HAL_UART_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8001298:	f000 fd0c 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20007f50 	.word	0x20007f50
 80012a4:	40004800 	.word	0x40004800
 80012a8:	001e8480 	.word	0x001e8480

080012ac <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012b2:	4b1a      	ldr	r3, [pc, #104]	; (800131c <MX_DMA_Init+0x70>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	4a19      	ldr	r2, [pc, #100]	; (800131c <MX_DMA_Init+0x70>)
 80012b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012bc:	6313      	str	r3, [r2, #48]	; 0x30
 80012be:	4b17      	ldr	r3, [pc, #92]	; (800131c <MX_DMA_Init+0x70>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c6:	607b      	str	r3, [r7, #4]
 80012c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ca:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_DMA_Init+0x70>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <MX_DMA_Init+0x70>)
 80012d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_DMA_Init+0x70>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012de:	603b      	str	r3, [r7, #0]
 80012e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2010      	movs	r0, #16
 80012e8:	f002 f829 	bl	800333e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012ec:	2010      	movs	r0, #16
 80012ee:	f002 f842 	bl	8003376 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2100      	movs	r1, #0
 80012f6:	2038      	movs	r0, #56	; 0x38
 80012f8:	f002 f821 	bl	800333e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012fc:	2038      	movs	r0, #56	; 0x38
 80012fe:	f002 f83a 	bl	8003376 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	203c      	movs	r0, #60	; 0x3c
 8001308:	f002 f819 	bl	800333e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800130c:	203c      	movs	r0, #60	; 0x3c
 800130e:	f002 f832 	bl	8003376 <HAL_NVIC_EnableIRQ>

}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08c      	sub	sp, #48	; 0x30
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 031c 	add.w	r3, r7, #28
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001336:	4b40      	ldr	r3, [pc, #256]	; (8001438 <MX_GPIO_Init+0x118>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a3f      	ldr	r2, [pc, #252]	; (8001438 <MX_GPIO_Init+0x118>)
 800133c:	f043 0310 	orr.w	r3, r3, #16
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b3d      	ldr	r3, [pc, #244]	; (8001438 <MX_GPIO_Init+0x118>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	61bb      	str	r3, [r7, #24]
 800134c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <MX_GPIO_Init+0x118>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a39      	ldr	r2, [pc, #228]	; (8001438 <MX_GPIO_Init+0x118>)
 8001354:	f043 0304 	orr.w	r3, r3, #4
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b37      	ldr	r3, [pc, #220]	; (8001438 <MX_GPIO_Init+0x118>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0304 	and.w	r3, r3, #4
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	4b34      	ldr	r3, [pc, #208]	; (8001438 <MX_GPIO_Init+0x118>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a33      	ldr	r2, [pc, #204]	; (8001438 <MX_GPIO_Init+0x118>)
 800136c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b31      	ldr	r3, [pc, #196]	; (8001438 <MX_GPIO_Init+0x118>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	4b2e      	ldr	r3, [pc, #184]	; (8001438 <MX_GPIO_Init+0x118>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a2d      	ldr	r2, [pc, #180]	; (8001438 <MX_GPIO_Init+0x118>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <MX_GPIO_Init+0x118>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001396:	4b28      	ldr	r3, [pc, #160]	; (8001438 <MX_GPIO_Init+0x118>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a27      	ldr	r2, [pc, #156]	; (8001438 <MX_GPIO_Init+0x118>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <MX_GPIO_Init+0x118>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_GPIO_Init+0x118>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <MX_GPIO_Init+0x118>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b1f      	ldr	r3, [pc, #124]	; (8001438 <MX_GPIO_Init+0x118>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2108      	movs	r1, #8
 80013ca:	481c      	ldr	r0, [pc, #112]	; (800143c <MX_GPIO_Init+0x11c>)
 80013cc:	f002 fd30 	bl	8003e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 80013d0:	2200      	movs	r2, #0
 80013d2:	f64e 717f 	movw	r1, #61311	; 0xef7f
 80013d6:	481a      	ldr	r0, [pc, #104]	; (8001440 <MX_GPIO_Init+0x120>)
 80013d8:	f002 fd2a 	bl	8003e30 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SN6505_EN_Pin */
  GPIO_InitStruct.Pin = SN6505_EN_Pin;
 80013dc:	2308      	movs	r3, #8
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2301      	movs	r3, #1
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	4619      	mov	r1, r3
 80013f2:	4812      	ldr	r0, [pc, #72]	; (800143c <MX_GPIO_Init+0x11c>)
 80013f4:	f002 fb72 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin 
                           LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin 
                           S1_Pin S2_Pin S3_Pin S4_Pin 
                           S5_Pin S6_Pin */
  GPIO_InitStruct.Pin = LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 80013f8:	f64e 737f 	movw	r3, #61311	; 0xef7f
 80013fc:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	480b      	ldr	r0, [pc, #44]	; (8001440 <MX_GPIO_Init+0x120>)
 8001412:	f002 fb63 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8001416:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_GPIO_Init+0x11c>)
 800142c:	f002 fb56 	bl	8003adc <HAL_GPIO_Init>

}
 8001430:	bf00      	nop
 8001432:	3730      	adds	r7, #48	; 0x30
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00

08001444 <chooseActionByState>:

/* USER CODE BEGIN 4 */

void chooseActionByState() {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	// if new measurement technique was set, update remaining measurements as well
	if (state.measureTechniqueUpdated) {
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <chooseActionByState+0x74>)
 800144a:	799b      	ldrb	r3, [r3, #6]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d00b      	beq.n	8001468 <chooseActionByState+0x24>
		state.remainingMeasurements = state.setMeasurements;
 8001450:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <chooseActionByState+0x74>)
 8001452:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8001456:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <chooseActionByState+0x74>)
 8001458:	805a      	strh	r2, [r3, #2]
		state.activeMeasureTechnique = state.setMeasureTechnique;
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <chooseActionByState+0x74>)
 800145c:	781a      	ldrb	r2, [r3, #0]
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <chooseActionByState+0x74>)
 8001460:	705a      	strb	r2, [r3, #1]
		state.measureTechniqueUpdated = 0;
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <chooseActionByState+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	719a      	strb	r2, [r3, #6]

	}
	switch (state.activeMeasureTechnique) {
 8001468:	4b13      	ldr	r3, [pc, #76]	; (80014b8 <chooseActionByState+0x74>)
 800146a:	785b      	ldrb	r3, [r3, #1]
 800146c:	2b03      	cmp	r3, #3
 800146e:	d820      	bhi.n	80014b2 <chooseActionByState+0x6e>
 8001470:	a201      	add	r2, pc, #4	; (adr r2, 8001478 <chooseActionByState+0x34>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	08001489 	.word	0x08001489
 800147c:	08001495 	.word	0x08001495
 8001480:	0800149f 	.word	0x0800149f
 8001484:	080014a9 	.word	0x080014a9

	case 0:
		// Idle state
		set_LED1(0, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	2100      	movs	r1, #0
 800148c:	2000      	movs	r0, #0
 800148e:	f000 f8e9 	bl	8001664 <set_LED1>
		break;
 8001492:	e00e      	b.n	80014b2 <chooseActionByState+0x6e>
	case 1:
		// measure with external ADC
		runPolarizationSequence();
 8001494:	f000 f812 	bl	80014bc <runPolarizationSequence>
		measureWithExternalADC();
 8001498:	f000 f966 	bl	8001768 <measureWithExternalADC>
		break;
 800149c:	e009      	b.n	80014b2 <chooseActionByState+0x6e>
	case 2:
		// measure with internal ADC
		runPolarizationSequence();
 800149e:	f000 f80d 	bl	80014bc <runPolarizationSequence>
		measureWithInternalADC();
 80014a2:	f000 f989 	bl	80017b8 <measureWithInternalADC>
		break;
 80014a6:	e004      	b.n	80014b2 <chooseActionByState+0x6e>
	case 3:
		// measure with comparator
		runPolarizationSequence();
 80014a8:	f000 f808 	bl	80014bc <runPolarizationSequence>
		measureWithComparator();
 80014ac:	f000 f9a0 	bl	80017f0 <measureWithComparator>
		break;
 80014b0:	bf00      	nop

	}
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	2001d928 	.word	0x2001d928

080014bc <runPolarizationSequence>:
void runPolarizationSequence() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 80014c0:	4b66      	ldr	r3, [pc, #408]	; (800165c <runPolarizationSequence+0x1a0>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	71da      	strb	r2, [r3, #7]
	// visualise
	set_LED1(1, 1, 1);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2101      	movs	r1, #1
 80014ca:	2001      	movs	r0, #1
 80014cc:	f000 f8ca 	bl	8001664 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2102      	movs	r1, #2
 80014d4:	4862      	ldr	r0, [pc, #392]	; (8001660 <runPolarizationSequence+0x1a4>)
 80014d6:	f002 fcab 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2104      	movs	r1, #4
 80014de:	4860      	ldr	r0, [pc, #384]	; (8001660 <runPolarizationSequence+0x1a4>)
 80014e0:	f002 fca6 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80014e4:	2201      	movs	r2, #1
 80014e6:	2108      	movs	r1, #8
 80014e8:	485d      	ldr	r0, [pc, #372]	; (8001660 <runPolarizationSequence+0x1a4>)
 80014ea:	f002 fca1 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2110      	movs	r1, #16
 80014f2:	485b      	ldr	r0, [pc, #364]	; (8001660 <runPolarizationSequence+0x1a4>)
 80014f4:	f002 fc9c 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2120      	movs	r1, #32
 80014fc:	4858      	ldr	r0, [pc, #352]	; (8001660 <runPolarizationSequence+0x1a4>)
 80014fe:	f002 fc97 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001502:	2201      	movs	r2, #1
 8001504:	2140      	movs	r1, #64	; 0x40
 8001506:	4856      	ldr	r0, [pc, #344]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001508:	f002 fc92 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800150c:	2005      	movs	r0, #5
 800150e:	f001 fa0d 	bl	800292c <HAL_Delay>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001512:	2201      	movs	r2, #1
 8001514:	2102      	movs	r1, #2
 8001516:	4852      	ldr	r0, [pc, #328]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001518:	f002 fc8a 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800151c:	2200      	movs	r2, #0
 800151e:	2104      	movs	r1, #4
 8001520:	484f      	ldr	r0, [pc, #316]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001522:	f002 fc85 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001526:	2201      	movs	r2, #1
 8001528:	2108      	movs	r1, #8
 800152a:	484d      	ldr	r0, [pc, #308]	; (8001660 <runPolarizationSequence+0x1a4>)
 800152c:	f002 fc80 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 8001530:	2201      	movs	r2, #1
 8001532:	2110      	movs	r1, #16
 8001534:	484a      	ldr	r0, [pc, #296]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001536:	f002 fc7b 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2120      	movs	r1, #32
 800153e:	4848      	ldr	r0, [pc, #288]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001540:	f002 fc76 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	4845      	ldr	r0, [pc, #276]	; (8001660 <runPolarizationSequence+0x1a4>)
 800154a:	f002 fc71 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 800154e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001552:	f001 f9eb 	bl	800292c <HAL_Delay>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2102      	movs	r1, #2
 800155a:	4841      	ldr	r0, [pc, #260]	; (8001660 <runPolarizationSequence+0x1a4>)
 800155c:	f002 fc68 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2104      	movs	r1, #4
 8001564:	483e      	ldr	r0, [pc, #248]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001566:	f002 fc63 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800156a:	2201      	movs	r2, #1
 800156c:	2108      	movs	r1, #8
 800156e:	483c      	ldr	r0, [pc, #240]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001570:	f002 fc5e 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	2110      	movs	r1, #16
 8001578:	4839      	ldr	r0, [pc, #228]	; (8001660 <runPolarizationSequence+0x1a4>)
 800157a:	f002 fc59 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2120      	movs	r1, #32
 8001582:	4837      	ldr	r0, [pc, #220]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001584:	f002 fc54 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	4834      	ldr	r0, [pc, #208]	; (8001660 <runPolarizationSequence+0x1a4>)
 800158e:	f002 fc4f 	bl	8003e30 <HAL_GPIO_WritePin>
	delay_us(200);
 8001592:	20c8      	movs	r0, #200	; 0xc8
 8001594:	f000 f8d4 	bl	8001740 <delay_us>

	//run sequnece T5 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001598:	2200      	movs	r2, #0
 800159a:	2102      	movs	r1, #2
 800159c:	4830      	ldr	r0, [pc, #192]	; (8001660 <runPolarizationSequence+0x1a4>)
 800159e:	f002 fc47 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2104      	movs	r1, #4
 80015a6:	482e      	ldr	r0, [pc, #184]	; (8001660 <runPolarizationSequence+0x1a4>)
 80015a8:	f002 fc42 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80015ac:	2201      	movs	r2, #1
 80015ae:	2108      	movs	r1, #8
 80015b0:	482b      	ldr	r0, [pc, #172]	; (8001660 <runPolarizationSequence+0x1a4>)
 80015b2:	f002 fc3d 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2110      	movs	r1, #16
 80015ba:	4829      	ldr	r0, [pc, #164]	; (8001660 <runPolarizationSequence+0x1a4>)
 80015bc:	f002 fc38 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80015c0:	2201      	movs	r2, #1
 80015c2:	2120      	movs	r1, #32
 80015c4:	4826      	ldr	r0, [pc, #152]	; (8001660 <runPolarizationSequence+0x1a4>)
 80015c6:	f002 fc33 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80015ca:	2201      	movs	r2, #1
 80015cc:	2140      	movs	r1, #64	; 0x40
 80015ce:	4824      	ldr	r0, [pc, #144]	; (8001660 <runPolarizationSequence+0x1a4>)
 80015d0:	f002 fc2e 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80015d4:	200a      	movs	r0, #10
 80015d6:	f001 f9a9 	bl	800292c <HAL_Delay>

	//run sequnece T6 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2102      	movs	r1, #2
 80015de:	4820      	ldr	r0, [pc, #128]	; (8001660 <runPolarizationSequence+0x1a4>)
 80015e0:	f002 fc26 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2104      	movs	r1, #4
 80015e8:	481d      	ldr	r0, [pc, #116]	; (8001660 <runPolarizationSequence+0x1a4>)
 80015ea:	f002 fc21 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80015ee:	2201      	movs	r2, #1
 80015f0:	2108      	movs	r1, #8
 80015f2:	481b      	ldr	r0, [pc, #108]	; (8001660 <runPolarizationSequence+0x1a4>)
 80015f4:	f002 fc1c 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2110      	movs	r1, #16
 80015fc:	4818      	ldr	r0, [pc, #96]	; (8001660 <runPolarizationSequence+0x1a4>)
 80015fe:	f002 fc17 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001602:	2201      	movs	r2, #1
 8001604:	2120      	movs	r1, #32
 8001606:	4816      	ldr	r0, [pc, #88]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001608:	f002 fc12 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2140      	movs	r1, #64	; 0x40
 8001610:	4813      	ldr	r0, [pc, #76]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001612:	f002 fc0d 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001616:	2005      	movs	r0, #5
 8001618:	f001 f988 	bl	800292c <HAL_Delay>
	//run sequnece T7 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800161c:	2200      	movs	r2, #0
 800161e:	2102      	movs	r1, #2
 8001620:	480f      	ldr	r0, [pc, #60]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001622:	f002 fc05 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 8001626:	2201      	movs	r2, #1
 8001628:	2104      	movs	r1, #4
 800162a:	480d      	ldr	r0, [pc, #52]	; (8001660 <runPolarizationSequence+0x1a4>)
 800162c:	f002 fc00 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2108      	movs	r1, #8
 8001634:	480a      	ldr	r0, [pc, #40]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001636:	f002 fbfb 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2110      	movs	r1, #16
 800163e:	4808      	ldr	r0, [pc, #32]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001640:	f002 fbf6 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001644:	2201      	movs	r2, #1
 8001646:	2120      	movs	r1, #32
 8001648:	4805      	ldr	r0, [pc, #20]	; (8001660 <runPolarizationSequence+0x1a4>)
 800164a:	f002 fbf1 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2140      	movs	r1, #64	; 0x40
 8001652:	4803      	ldr	r0, [pc, #12]	; (8001660 <runPolarizationSequence+0x1a4>)
 8001654:	f002 fbec 	bl	8003e30 <HAL_GPIO_WritePin>

}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2001d928 	.word	0x2001d928
 8001660:	40020c00 	.word	0x40020c00

08001664 <set_LED1>:

void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
 800166e:	460b      	mov	r3, r1
 8001670:	71bb      	strb	r3, [r7, #6]
 8001672:	4613      	mov	r3, r2
 8001674:	717b      	strb	r3, [r7, #5]

	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, R);
 8001676:	79fb      	ldrb	r3, [r7, #7]
 8001678:	461a      	mov	r2, r3
 800167a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800167e:	480a      	ldr	r0, [pc, #40]	; (80016a8 <set_LED1+0x44>)
 8001680:	f002 fbd6 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, G);
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	461a      	mov	r2, r3
 8001688:	f44f 7100 	mov.w	r1, #512	; 0x200
 800168c:	4806      	ldr	r0, [pc, #24]	; (80016a8 <set_LED1+0x44>)
 800168e:	f002 fbcf 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, B);
 8001692:	797b      	ldrb	r3, [r7, #5]
 8001694:	461a      	mov	r2, r3
 8001696:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800169a:	4803      	ldr	r0, [pc, #12]	; (80016a8 <set_LED1+0x44>)
 800169c:	f002 fbc8 	bl	8003e30 <HAL_GPIO_WritePin>
}
 80016a0:	bf00      	nop
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40020c00 	.word	0x40020c00

080016ac <switchingCircuitIdle>:

void switchingCircuitIdle() {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2100      	movs	r1, #0
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff ffd5 	bl	8001664 <set_LED1>
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 80016ba:	2200      	movs	r2, #0
 80016bc:	2101      	movs	r1, #1
 80016be:	4811      	ldr	r0, [pc, #68]	; (8001704 <switchingCircuitIdle+0x58>)
 80016c0:	f002 fbb6 	bl	8003e30 <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80016c4:	2200      	movs	r2, #0
 80016c6:	2102      	movs	r1, #2
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <switchingCircuitIdle+0x58>)
 80016ca:	f002 fbb1 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2104      	movs	r1, #4
 80016d2:	480c      	ldr	r0, [pc, #48]	; (8001704 <switchingCircuitIdle+0x58>)
 80016d4:	f002 fbac 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80016d8:	2201      	movs	r2, #1
 80016da:	2108      	movs	r1, #8
 80016dc:	4809      	ldr	r0, [pc, #36]	; (8001704 <switchingCircuitIdle+0x58>)
 80016de:	f002 fba7 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2110      	movs	r1, #16
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <switchingCircuitIdle+0x58>)
 80016e8:	f002 fba2 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2120      	movs	r1, #32
 80016f0:	4804      	ldr	r0, [pc, #16]	; (8001704 <switchingCircuitIdle+0x58>)
 80016f2:	f002 fb9d 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2140      	movs	r1, #64	; 0x40
 80016fa:	4802      	ldr	r0, [pc, #8]	; (8001704 <switchingCircuitIdle+0x58>)
 80016fc:	f002 fb98 	bl	8003e30 <HAL_GPIO_WritePin>
}
 8001700:	bf00      	nop
 8001702:	bd80      	pop	{r7, pc}
 8001704:	40020c00 	.word	0x40020c00

08001708 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d108      	bne.n	800172c <HAL_TIM_PeriodElapsedCallback+0x24>
		//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		if (timeIndex > 0) {
 800171a:	4b08      	ldr	r3, [pc, #32]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d004      	beq.n	800172c <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -= 10;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	3b0a      	subs	r3, #10
 8001728:	4a04      	ldr	r2, [pc, #16]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800172a:	6013      	str	r3, [r2, #0]

	if (htim->Instance == TIM6) {
		//HAL_GPIO_TogglePin(LED1_R_GPIO_Port, LED1_R_Pin);
	}

}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	40000c00 	.word	0x40000c00
 800173c:	20000094 	.word	0x20000094

08001740 <delay_us>:

void delay_us(uint32_t delay_us) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 8001748:	4a06      	ldr	r2, [pc, #24]	; (8001764 <delay_us+0x24>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 800174e:	bf00      	nop
 8001750:	4b04      	ldr	r3, [pc, #16]	; (8001764 <delay_us+0x24>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1fb      	bne.n	8001750 <delay_us+0x10>
		;
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	20000094 	.word	0x20000094

08001768 <measureWithExternalADC>:

void measureWithExternalADC() {
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(1, 0, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	2100      	movs	r1, #0
 8001770:	2001      	movs	r0, #1
 8001772:	f7ff ff77 	bl	8001664 <set_LED1>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_rx1.uint8, samplesPerPeriod);
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <measureWithExternalADC+0x3c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	490a      	ldr	r1, [pc, #40]	; (80017a8 <measureWithExternalADC+0x40>)
 8001780:	480a      	ldr	r0, [pc, #40]	; (80017ac <measureWithExternalADC+0x44>)
 8001782:	f003 fe2f 	bl	80053e4 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 8001786:	2100      	movs	r1, #0
 8001788:	4809      	ldr	r0, [pc, #36]	; (80017b0 <measureWithExternalADC+0x48>)
 800178a:	f004 fbe3 	bl	8005f54 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 800178e:	2104      	movs	r1, #4
 8001790:	4807      	ldr	r0, [pc, #28]	; (80017b0 <measureWithExternalADC+0x48>)
 8001792:	f004 fbdf 	bl	8005f54 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 8001796:	2100      	movs	r1, #0
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <measureWithExternalADC+0x4c>)
 800179a:	f004 fbdb 	bl	8005f54 <HAL_TIM_PWM_Start_IT>
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000000 	.word	0x20000000
 80017a8:	2001da7c 	.word	0x2001da7c
 80017ac:	20033448 	.word	0x20033448
 80017b0:	20033408 	.word	0x20033408
 80017b4:	20007ed0 	.word	0x20007ed0

080017b8 <measureWithInternalADC>:

void measureWithInternalADC() {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 1, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2101      	movs	r1, #1
 80017c0:	2000      	movs	r0, #0
 80017c2:	f7ff ff4f 	bl	8001664 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16, samplesPerPeriod);
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <measureWithInternalADC+0x28>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	4905      	ldr	r1, [pc, #20]	; (80017e4 <measureWithInternalADC+0x2c>)
 80017ce:	4806      	ldr	r0, [pc, #24]	; (80017e8 <measureWithInternalADC+0x30>)
 80017d0:	f001 f912 	bl	80029f8 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 80017d4:	4805      	ldr	r0, [pc, #20]	; (80017ec <measureWithInternalADC+0x34>)
 80017d6:	f004 fb3d 	bl	8005e54 <HAL_TIM_Base_Start_IT>
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000000 	.word	0x20000000
 80017e4:	2001da7c 	.word	0x2001da7c
 80017e8:	2001d9b4 	.word	0x2001d9b4
 80017ec:	200333c8 	.word	0x200333c8

080017f0 <measureWithComparator>:

void measureWithComparator() {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 0, 1);
 80017f4:	2201      	movs	r2, #1
 80017f6:	2100      	movs	r1, #0
 80017f8:	2000      	movs	r0, #0
 80017fa:	f7ff ff33 	bl	8001664 <set_LED1>
	// run the timer
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, buffer_comp, 8000);
 80017fe:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001802:	4a03      	ldr	r2, [pc, #12]	; (8001810 <measureWithComparator+0x20>)
 8001804:	2100      	movs	r1, #0
 8001806:	4803      	ldr	r0, [pc, #12]	; (8001814 <measureWithComparator+0x24>)
 8001808:	f004 fcf4 	bl	80061f4 <HAL_TIM_IC_Start_DMA>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200000a4 	.word	0x200000a4
 8001814:	200334ac 	.word	0x200334ac

08001818 <measureFrequencyWithTimer>:

//mode = 1 ... run only once, mode = 0 ... run infinity times
void measureFrequencyWithTimer(TIM_HandleTypeDef *htim) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
			state.activeMeasureTechnique = 0;
		} else {
			//state.preparedToRunPolarizationPhase = 1;
		}
	}*/
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001820:	2100      	movs	r1, #0
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <measureFrequencyWithTimer+0x48>)
 8001824:	f004 fde2 	bl	80063ec <HAL_TIM_IC_Stop_DMA>
	sendDataOverUART();
 8001828:	f000 f82e 	bl	8001888 <sendDataOverUART>
	state.remainingMeasurements--;
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <measureFrequencyWithTimer+0x4c>)
 800182e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001832:	b29b      	uxth	r3, r3
 8001834:	3b01      	subs	r3, #1
 8001836:	b29b      	uxth	r3, r3
 8001838:	b21a      	sxth	r2, r3
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <measureFrequencyWithTimer+0x4c>)
 800183c:	805a      	strh	r2, [r3, #2]
	//if freq should be measured only once, after the measurement, go to idle state
	if (state.remainingMeasurements == 0) {
 800183e:	4b09      	ldr	r3, [pc, #36]	; (8001864 <measureFrequencyWithTimer+0x4c>)
 8001840:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d103      	bne.n	8001850 <measureFrequencyWithTimer+0x38>
		state.activeMeasureTechnique = 0;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <measureFrequencyWithTimer+0x4c>)
 800184a:	2200      	movs	r2, #0
 800184c:	705a      	strb	r2, [r3, #1]
		state.preparedToRunPolarizationPhase = 1;
	}



}
 800184e:	e002      	b.n	8001856 <measureFrequencyWithTimer+0x3e>
		state.preparedToRunPolarizationPhase = 1;
 8001850:	4b04      	ldr	r3, [pc, #16]	; (8001864 <measureFrequencyWithTimer+0x4c>)
 8001852:	2201      	movs	r2, #1
 8001854:	71da      	strb	r2, [r3, #7]
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200334ac 	.word	0x200334ac
 8001864:	2001d928 	.word	0x2001d928

08001868 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001878:	d102      	bne.n	8001880 <HAL_TIM_IC_CaptureCallback+0x18>
		measureFrequencyWithTimer(htim);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffcc 	bl	8001818 <measureFrequencyWithTimer>

	}
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <sendDataOverUART>:
	state.remainingMeasurements = 0;
	state.preparedToRunPolarizationPhase = 0;
	state.index = 0;
}

void sendDataOverUART() {
 8001888:	b580      	push	{r7, lr}
 800188a:	b08c      	sub	sp, #48	; 0x30
 800188c:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	857b      	strh	r3, [r7, #42]	; 0x2a
	int i = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (state.activeMeasureTechnique == 1
 8001896:	4b54      	ldr	r3, [pc, #336]	; (80019e8 <sendDataOverUART+0x160>)
 8001898:	785b      	ldrb	r3, [r3, #1]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d003      	beq.n	80018a6 <sendDataOverUART+0x1e>
			|| state.activeMeasureTechnique == 2) {
 800189e:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <sendDataOverUART+0x160>)
 80018a0:	785b      	ldrb	r3, [r3, #1]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d16e      	bne.n	8001984 <sendDataOverUART+0xfc>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018aa:	e025      	b.n	80018f8 <sendDataOverUART+0x70>
			adc = (uint16_t) (buffer_rx1.uint8[i])
 80018ac:	4a4f      	ldr	r2, [pc, #316]	; (80019ec <sendDataOverUART+0x164>)
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	4413      	add	r3, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx1.uint8[i + 1]);
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	3301      	adds	r3, #1
 80018ba:	494c      	ldr	r1, [pc, #304]	; (80019ec <sendDataOverUART+0x164>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	021b      	lsls	r3, r3, #8
 80018c2:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx1.uint8[i])
 80018c4:	4413      	add	r3, r2
 80018c6:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 80018c8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4948      	ldr	r1, [pc, #288]	; (80019f0 <sendDataOverUART+0x168>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f007 f992 	bl	8008bf8 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe fcb2 	bl	8000240 <strlen>
 80018dc:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 80018de:	b29a      	uxth	r2, r3
 80018e0:	1d39      	adds	r1, r7, #4
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	4843      	ldr	r0, [pc, #268]	; (80019f4 <sendDataOverUART+0x16c>)
 80018e8:	f006 f9ba 	bl	8007c60 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 80018ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ee:	3301      	adds	r3, #1
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (i = 0; i < samplesPerPeriod; i++) {
 80018f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f4:	3301      	adds	r3, #1
 80018f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018fa:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <sendDataOverUART+0x170>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d3d4      	bcc.n	80018ac <sendDataOverUART+0x24>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001906:	e025      	b.n	8001954 <sendDataOverUART+0xcc>
			adc = (uint16_t) (buffer_rx2.uint8[i])
 8001908:	4a3c      	ldr	r2, [pc, #240]	; (80019fc <sendDataOverUART+0x174>)
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx2.uint8[i + 1]);
 8001912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001914:	3301      	adds	r3, #1
 8001916:	4939      	ldr	r1, [pc, #228]	; (80019fc <sendDataOverUART+0x174>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	b29b      	uxth	r3, r3
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx2.uint8[i])
 8001920:	4413      	add	r3, r2
 8001922:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 8001924:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	4931      	ldr	r1, [pc, #196]	; (80019f0 <sendDataOverUART+0x168>)
 800192a:	4618      	mov	r0, r3
 800192c:	f007 f964 	bl	8008bf8 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fc84 	bl	8000240 <strlen>
 8001938:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 800193a:	b29a      	uxth	r2, r3
 800193c:	1d39      	adds	r1, r7, #4
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	482c      	ldr	r0, [pc, #176]	; (80019f4 <sendDataOverUART+0x16c>)
 8001944:	f006 f98c 	bl	8007c60 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 8001948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194a:	3301      	adds	r3, #1
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (i = 0; i < samplesPerPeriod; i++) {
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	3301      	adds	r3, #1
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <sendDataOverUART+0x170>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d3d4      	bcc.n	8001908 <sendDataOverUART+0x80>
		}
		sprintf(msg_buffers, ";%hu\n", 50);
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2232      	movs	r2, #50	; 0x32
 8001962:	4927      	ldr	r1, [pc, #156]	; (8001a00 <sendDataOverUART+0x178>)
 8001964:	4618      	mov	r0, r3
 8001966:	f007 f947 	bl	8008bf8 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fc67 	bl	8000240 <strlen>
 8001972:	4603      	mov	r3, r0
 8001974:	b29a      	uxth	r2, r3
 8001976:	1d39      	adds	r1, r7, #4
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
 800197c:	481d      	ldr	r0, [pc, #116]	; (80019f4 <sendDataOverUART+0x16c>)
 800197e:	f006 f96f 	bl	8007c60 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
		HAL_MAX_DELAY);
		}
	}

}
 8001982:	e02d      	b.n	80019e0 <sendDataOverUART+0x158>
	} else if (state.activeMeasureTechnique == 3) {
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <sendDataOverUART+0x160>)
 8001986:	785b      	ldrb	r3, [r3, #1]
 8001988:	2b03      	cmp	r3, #3
 800198a:	d129      	bne.n	80019e0 <sendDataOverUART+0x158>
		for (i = 0; i < 4000; i+=2) {
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001990:	e022      	b.n	80019d8 <sendDataOverUART+0x150>
		uint32_t freq= buffer_comp[i+1] - buffer_comp[i];
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001994:	3301      	adds	r3, #1
 8001996:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <sendDataOverUART+0x17c>)
 8001998:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800199c:	4919      	ldr	r1, [pc, #100]	; (8001a04 <sendDataOverUART+0x17c>)
 800199e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(msg_freq, "%d\n", freq);
 80019a8:	f107 0314 	add.w	r3, r7, #20
 80019ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ae:	4916      	ldr	r1, [pc, #88]	; (8001a08 <sendDataOverUART+0x180>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f007 f921 	bl	8008bf8 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
 80019b6:	f107 0314 	add.w	r3, r7, #20
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fc40 	bl	8000240 <strlen>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	f107 0114 	add.w	r1, r7, #20
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <sendDataOverUART+0x16c>)
 80019ce:	f006 f947 	bl	8007c60 <HAL_UART_Transmit>
		for (i = 0; i < 4000; i+=2) {
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	3302      	adds	r3, #2
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80019de:	dbd8      	blt.n	8001992 <sendDataOverUART+0x10a>
}
 80019e0:	bf00      	nop
 80019e2:	3730      	adds	r7, #48	; 0x30
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	2001d928 	.word	0x2001d928
 80019ec:	2001da7c 	.word	0x2001da7c
 80019f0:	0800941c 	.word	0x0800941c
 80019f4:	20007f50 	.word	0x20007f50
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20008020 	.word	0x20008020
 8001a00:	08009424 	.word	0x08009424
 8001a04:	200000a4 	.word	0x200000a4
 8001a08:	0800942c 	.word	0x0800942c

08001a0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b082      	sub	sp, #8
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	//stop the ADC when in interrupt
	ADC1->CR2 &= ~ADC_CR2_DMA;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	; (8001a94 <HAL_ADC_ConvCpltCallback+0x88>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <HAL_ADC_ConvCpltCallback+0x88>)
 8001a1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a1e:	6093      	str	r3, [r2, #8]
	// if function HAL_ADC_Stop_DMA(&hadc1) would be called, it wouldn't be possible to Start DMA again.

	filledBuffers++;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001a2a:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffers == 1) {
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d107      	bne.n	8001a44 <HAL_ADC_ConvCpltCallback+0x38>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx2.uint16,
 8001a34:	4b19      	ldr	r3, [pc, #100]	; (8001a9c <HAL_ADC_ConvCpltCallback+0x90>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4919      	ldr	r1, [pc, #100]	; (8001aa0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001a3c:	4819      	ldr	r0, [pc, #100]	; (8001aa4 <HAL_ADC_ConvCpltCallback+0x98>)
 8001a3e:	f000 ffdb 	bl	80029f8 <HAL_ADC_Start_DMA>
			state.activeMeasureTechnique = 0;
		} else {
			state.preparedToRunPolarizationPhase = 1;
		}
	}
}
 8001a42:	e022      	b.n	8001a8a <HAL_ADC_ConvCpltCallback+0x7e>
	else if (filledBuffers == 2) {
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d11e      	bne.n	8001a8a <HAL_ADC_ConvCpltCallback+0x7e>
		switchingCircuitIdle();
 8001a4c:	f7ff fe2e 	bl	80016ac <switchingCircuitIdle>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001a50:	4815      	ldr	r0, [pc, #84]	; (8001aa8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001a52:	f004 fa29 	bl	8005ea8 <HAL_TIM_Base_Stop_IT>
		filledBuffers = 0;
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001a5c:	f7ff ff14 	bl	8001888 <sendDataOverUART>
		state.remainingMeasurements--;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_ADC_ConvCpltCallback+0xa0>)
 8001a62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	b21a      	sxth	r2, r3
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_ADC_ConvCpltCallback+0xa0>)
 8001a70:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <HAL_ADC_ConvCpltCallback+0xa0>)
 8001a74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d103      	bne.n	8001a84 <HAL_ADC_ConvCpltCallback+0x78>
			state.activeMeasureTechnique = 0;
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_ADC_ConvCpltCallback+0xa0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	705a      	strb	r2, [r3, #1]
}
 8001a82:	e002      	b.n	8001a8a <HAL_ADC_ConvCpltCallback+0x7e>
			state.preparedToRunPolarizationPhase = 1;
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_ADC_ConvCpltCallback+0xa0>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	71da      	strb	r2, [r3, #7]
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40012000 	.word	0x40012000
 8001a98:	20000090 	.word	0x20000090
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	20008020 	.word	0x20008020
 8001aa4:	2001d9b4 	.word	0x2001d9b4
 8001aa8:	200333c8 	.word	0x200333c8
 8001aac:	2001d928 	.word	0x2001d928

08001ab0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b088      	sub	sp, #32
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <HAL_UART_RxCpltCallback+0x4c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d117      	bne.n	8001af2 <HAL_UART_RxCpltCallback+0x42>
		state.measureTechniqueUpdated = 1;
 8001ac2:	4b0f      	ldr	r3, [pc, #60]	; (8001b00 <HAL_UART_RxCpltCallback+0x50>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	719a      	strb	r2, [r3, #6]
		prepareForNextMeasurements(buffer_uart_rx);
 8001ac8:	480e      	ldr	r0, [pc, #56]	; (8001b04 <HAL_UART_RxCpltCallback+0x54>)
 8001aca:	f000 f81f 	bl	8001b0c <prepareForNextMeasurements>
		char msg_buffer[18];
		//sprintf(msg_buffer, "Mode %u selected\n\r", state.setMeasureTechnique);
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffer, strlen(msg_buffer),
 8001ace:	f107 030c 	add.w	r3, r7, #12
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fbb4 	bl	8000240 <strlen>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	f107 010c 	add.w	r1, r7, #12
 8001ae0:	230a      	movs	r3, #10
 8001ae2:	4809      	ldr	r0, [pc, #36]	; (8001b08 <HAL_UART_RxCpltCallback+0x58>)
 8001ae4:	f006 f8bc 	bl	8007c60 <HAL_UART_Transmit>
				10);
		//wait for next incomming data
		HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 8001ae8:	2203      	movs	r2, #3
 8001aea:	4906      	ldr	r1, [pc, #24]	; (8001b04 <HAL_UART_RxCpltCallback+0x54>)
 8001aec:	4806      	ldr	r0, [pc, #24]	; (8001b08 <HAL_UART_RxCpltCallback+0x58>)
 8001aee:	f006 f949 	bl	8007d84 <HAL_UART_Receive_IT>
	}
}
 8001af2:	bf00      	nop
 8001af4:	3720      	adds	r7, #32
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40004800 	.word	0x40004800
 8001b00:	2001d928 	.word	0x2001d928
 8001b04:	2000801c 	.word	0x2000801c
 8001b08:	20007f50 	.word	0x20007f50

08001b0c <prepareForNextMeasurements>:

void prepareForNextMeasurements(char *receivedData) {
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

	//set measurement method
	switch (receivedData[0]) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	3b30      	subs	r3, #48	; 0x30
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d81a      	bhi.n	8001b54 <prepareForNextMeasurements+0x48>
 8001b1e:	a201      	add	r2, pc, #4	; (adr r2, 8001b24 <prepareForNextMeasurements+0x18>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b35 	.word	0x08001b35
 8001b28:	08001b3d 	.word	0x08001b3d
 8001b2c:	08001b45 	.word	0x08001b45
 8001b30:	08001b4d 	.word	0x08001b4d
	case '0':
		state.setMeasureTechnique = 0;
 8001b34:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
		break;
 8001b3a:	e00f      	b.n	8001b5c <prepareForNextMeasurements+0x50>
	case '1':
		state.setMeasureTechnique = 1;
 8001b3c:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001b3e:	2201      	movs	r2, #1
 8001b40:	701a      	strb	r2, [r3, #0]
		break;
 8001b42:	e00b      	b.n	8001b5c <prepareForNextMeasurements+0x50>
	case '2':
		state.setMeasureTechnique = 2;
 8001b44:	4b2f      	ldr	r3, [pc, #188]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001b46:	2202      	movs	r2, #2
 8001b48:	701a      	strb	r2, [r3, #0]
		break;
 8001b4a:	e007      	b.n	8001b5c <prepareForNextMeasurements+0x50>
	case '3':
		state.setMeasureTechnique = 3;
 8001b4c:	4b2d      	ldr	r3, [pc, #180]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001b4e:	2203      	movs	r2, #3
 8001b50:	701a      	strb	r2, [r3, #0]
		break;
 8001b52:	e003      	b.n	8001b5c <prepareForNextMeasurements+0x50>
	default:
		state.setMeasureTechnique = 0;
 8001b54:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	701a      	strb	r2, [r3, #0]
		break;
 8001b5a:	bf00      	nop
	}

	//set number of measurements
	switch (receivedData[1]) {
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	3b30      	subs	r3, #48	; 0x30
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d840      	bhi.n	8001bea <prepareForNextMeasurements+0xde>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <prepareForNextMeasurements+0x64>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001b99 	.word	0x08001b99
 8001b74:	08001ba3 	.word	0x08001ba3
 8001b78:	08001bab 	.word	0x08001bab
 8001b7c:	08001bb3 	.word	0x08001bb3
 8001b80:	08001bbb 	.word	0x08001bbb
 8001b84:	08001bc3 	.word	0x08001bc3
 8001b88:	08001bcb 	.word	0x08001bcb
 8001b8c:	08001bd3 	.word	0x08001bd3
 8001b90:	08001bdb 	.word	0x08001bdb
 8001b94:	08001be3 	.word	0x08001be3
	case '0':
		state.setMeasurements = -1;
 8001b98:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001b9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b9e:	809a      	strh	r2, [r3, #4]
		break;
 8001ba0:	e027      	b.n	8001bf2 <prepareForNextMeasurements+0xe6>
	case '1':
		state.setMeasurements = 1;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	809a      	strh	r2, [r3, #4]
		break;
 8001ba8:	e023      	b.n	8001bf2 <prepareForNextMeasurements+0xe6>
	case '2':
		state.setMeasurements = 2;
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001bac:	2202      	movs	r2, #2
 8001bae:	809a      	strh	r2, [r3, #4]
		break;
 8001bb0:	e01f      	b.n	8001bf2 <prepareForNextMeasurements+0xe6>
	case '3':
		state.setMeasurements = 3;
 8001bb2:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	809a      	strh	r2, [r3, #4]
		break;
 8001bb8:	e01b      	b.n	8001bf2 <prepareForNextMeasurements+0xe6>
	case '4':
		state.setMeasurements = 4;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	809a      	strh	r2, [r3, #4]
		break;
 8001bc0:	e017      	b.n	8001bf2 <prepareForNextMeasurements+0xe6>
	case '5':
		state.setMeasurements = 5;
 8001bc2:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001bc4:	2205      	movs	r2, #5
 8001bc6:	809a      	strh	r2, [r3, #4]
		break;
 8001bc8:	e013      	b.n	8001bf2 <prepareForNextMeasurements+0xe6>
	case '6':
		state.setMeasurements = 6;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001bcc:	2206      	movs	r2, #6
 8001bce:	809a      	strh	r2, [r3, #4]
		break;
 8001bd0:	e00f      	b.n	8001bf2 <prepareForNextMeasurements+0xe6>
	case '7':
		state.setMeasurements = 7;
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	809a      	strh	r2, [r3, #4]
		break;
 8001bd8:	e00b      	b.n	8001bf2 <prepareForNextMeasurements+0xe6>
	case '8':
		state.setMeasurements = 8;
 8001bda:	4b0a      	ldr	r3, [pc, #40]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001bdc:	2208      	movs	r2, #8
 8001bde:	809a      	strh	r2, [r3, #4]
		break;
 8001be0:	e007      	b.n	8001bf2 <prepareForNextMeasurements+0xe6>
	case '9':
		state.setMeasurements = 9;
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001be4:	2209      	movs	r2, #9
 8001be6:	809a      	strh	r2, [r3, #4]
		break;
 8001be8:	e003      	b.n	8001bf2 <prepareForNextMeasurements+0xe6>
	default:
		state.setMeasurements = 1;
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	809a      	strh	r2, [r3, #4]
		break;
 8001bf0:	bf00      	nop
	}
	state.preparedToRunPolarizationPhase = 1;
 8001bf2:	4b04      	ldr	r3, [pc, #16]	; (8001c04 <prepareForNextMeasurements+0xf8>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	71da      	strb	r2, [r3, #7]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	2001d928 	.word	0x2001d928

08001c08 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	filledBuffers++;
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_SPI_RxCpltCallback+0x90>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	3301      	adds	r3, #1
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_SPI_RxCpltCallback+0x90>)
 8001c1a:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffers == 1) {
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_SPI_RxCpltCallback+0x90>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d108      	bne.n	8001c36 <HAL_SPI_RxCpltCallback+0x2e>
		HAL_SPI_Receive_DMA(&hspi1, buffer_rx2.uint8, samplesPerPeriod);
 8001c24:	4b1d      	ldr	r3, [pc, #116]	; (8001c9c <HAL_SPI_RxCpltCallback+0x94>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	491c      	ldr	r1, [pc, #112]	; (8001ca0 <HAL_SPI_RxCpltCallback+0x98>)
 8001c2e:	481d      	ldr	r0, [pc, #116]	; (8001ca4 <HAL_SPI_RxCpltCallback+0x9c>)
 8001c30:	f003 fbd8 	bl	80053e4 <HAL_SPI_Receive_DMA>
		} else {
			state.preparedToRunPolarizationPhase = 1;
		}

	}
}
 8001c34:	e02b      	b.n	8001c8e <HAL_SPI_RxCpltCallback+0x86>
	else if (filledBuffers == 2) {
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <HAL_SPI_RxCpltCallback+0x90>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d127      	bne.n	8001c8e <HAL_SPI_RxCpltCallback+0x86>
		switchingCircuitIdle();
 8001c3e:	f7ff fd35 	bl	80016ac <switchingCircuitIdle>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001c42:	2100      	movs	r1, #0
 8001c44:	4818      	ldr	r0, [pc, #96]	; (8001ca8 <HAL_SPI_RxCpltCallback+0xa0>)
 8001c46:	f004 fa0f 	bl	8006068 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001c4a:	2104      	movs	r1, #4
 8001c4c:	4816      	ldr	r0, [pc, #88]	; (8001ca8 <HAL_SPI_RxCpltCallback+0xa0>)
 8001c4e:	f004 fa0b 	bl	8006068 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8001c52:	2100      	movs	r1, #0
 8001c54:	4815      	ldr	r0, [pc, #84]	; (8001cac <HAL_SPI_RxCpltCallback+0xa4>)
 8001c56:	f004 fa07 	bl	8006068 <HAL_TIM_PWM_Stop_IT>
		filledBuffers = 0;
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_SPI_RxCpltCallback+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001c60:	f7ff fe12 	bl	8001888 <sendDataOverUART>
		state.remainingMeasurements--;
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_SPI_RxCpltCallback+0xa8>)
 8001c66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <HAL_SPI_RxCpltCallback+0xa8>)
 8001c74:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_SPI_RxCpltCallback+0xa8>)
 8001c78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d103      	bne.n	8001c88 <HAL_SPI_RxCpltCallback+0x80>
			state.activeMeasureTechnique = 0;
 8001c80:	4b0b      	ldr	r3, [pc, #44]	; (8001cb0 <HAL_SPI_RxCpltCallback+0xa8>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	705a      	strb	r2, [r3, #1]
}
 8001c86:	e002      	b.n	8001c8e <HAL_SPI_RxCpltCallback+0x86>
			state.preparedToRunPolarizationPhase = 1;
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_SPI_RxCpltCallback+0xa8>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	71da      	strb	r2, [r3, #7]
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000090 	.word	0x20000090
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	20008020 	.word	0x20008020
 8001ca4:	20033448 	.word	0x20033448
 8001ca8:	20033408 	.word	0x20033408
 8001cac:	20007ed0 	.word	0x20007ed0
 8001cb0:	2001d928 	.word	0x2001d928

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_MspInit+0x44>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a0e      	ldr	r2, [pc, #56]	; (8001d08 <HAL_MspInit+0x44>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_MspInit+0x44>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cde:	607b      	str	r3, [r7, #4]
 8001ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_MspInit+0x44>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4a08      	ldr	r2, [pc, #32]	; (8001d08 <HAL_MspInit+0x44>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cec:	6453      	str	r3, [r2, #68]	; 0x44
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_MspInit+0x44>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800

08001d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	; 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a2c      	ldr	r2, [pc, #176]	; (8001ddc <HAL_ADC_MspInit+0xd0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d152      	bne.n	8001dd4 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_ADC_MspInit+0xd4>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <HAL_ADC_MspInit+0xd4>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3a:	4b29      	ldr	r3, [pc, #164]	; (8001de0 <HAL_ADC_MspInit+0xd4>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d42:	613b      	str	r3, [r7, #16]
 8001d44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_ADC_MspInit+0xd4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <HAL_ADC_MspInit+0xd4>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <HAL_ADC_MspInit+0xd4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d62:	2303      	movs	r3, #3
 8001d64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 0314 	add.w	r3, r7, #20
 8001d6e:	4619      	mov	r1, r3
 8001d70:	481c      	ldr	r0, [pc, #112]	; (8001de4 <HAL_ADC_MspInit+0xd8>)
 8001d72:	f001 feb3 	bl	8003adc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d78:	4a1c      	ldr	r2, [pc, #112]	; (8001dec <HAL_ADC_MspInit+0xe0>)
 8001d7a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d8e:	4b16      	ldr	r3, [pc, #88]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d94:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d96:	4b14      	ldr	r3, [pc, #80]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d9c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d9e:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001da0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001dac:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001db2:	4b0d      	ldr	r3, [pc, #52]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001db8:	480b      	ldr	r0, [pc, #44]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001dba:	f001 faf7 	bl	80033ac <HAL_DMA_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8001dc4:	f7ff ff76 	bl	8001cb4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8001dce:	4a06      	ldr	r2, [pc, #24]	; (8001de8 <HAL_ADC_MspInit+0xdc>)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3728      	adds	r7, #40	; 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40012000 	.word	0x40012000
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	20033368 	.word	0x20033368
 8001dec:	40026470 	.word	0x40026470

08001df0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08c      	sub	sp, #48	; 0x30
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3d      	ldr	r2, [pc, #244]	; (8001f04 <HAL_I2C_MspInit+0x114>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d128      	bne.n	8001e64 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e12:	4b3d      	ldr	r3, [pc, #244]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a3c      	ldr	r2, [pc, #240]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e18:	f043 0302 	orr.w	r3, r3, #2
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b3a      	ldr	r3, [pc, #232]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	61bb      	str	r3, [r7, #24]
 8001e28:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e2a:	23c0      	movs	r3, #192	; 0xc0
 8001e2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e2e:	2312      	movs	r3, #18
 8001e30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e3a:	2304      	movs	r3, #4
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e3e:	f107 031c 	add.w	r3, r7, #28
 8001e42:	4619      	mov	r1, r3
 8001e44:	4831      	ldr	r0, [pc, #196]	; (8001f0c <HAL_I2C_MspInit+0x11c>)
 8001e46:	f001 fe49 	bl	8003adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e4a:	4b2f      	ldr	r3, [pc, #188]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a2e      	ldr	r2, [pc, #184]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b2c      	ldr	r3, [pc, #176]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5e:	617b      	str	r3, [r7, #20]
 8001e60:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001e62:	e04a      	b.n	8001efa <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a29      	ldr	r2, [pc, #164]	; (8001f10 <HAL_I2C_MspInit+0x120>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d145      	bne.n	8001efa <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a25      	ldr	r2, [pc, #148]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e86:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a1f      	ldr	r2, [pc, #124]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ea4:	2312      	movs	r3, #18
 8001ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4816      	ldr	r0, [pc, #88]	; (8001f14 <HAL_I2C_MspInit+0x124>)
 8001ebc:	f001 fe0e 	bl	8003adc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ec6:	2312      	movs	r3, #18
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 031c 	add.w	r3, r7, #28
 8001eda:	4619      	mov	r1, r3
 8001edc:	480e      	ldr	r0, [pc, #56]	; (8001f18 <HAL_I2C_MspInit+0x128>)
 8001ede:	f001 fdfd 	bl	8003adc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ee2:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001ee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_I2C_MspInit+0x118>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
}
 8001efa:	bf00      	nop
 8001efc:	3730      	adds	r7, #48	; 0x30
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40005400 	.word	0x40005400
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40005c00 	.word	0x40005c00
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020000 	.word	0x40020000

08001f1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a46      	ldr	r2, [pc, #280]	; (8002054 <HAL_SPI_MspInit+0x138>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d158      	bne.n	8001ff0 <HAL_SPI_MspInit+0xd4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f3e:	4b46      	ldr	r3, [pc, #280]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	4a45      	ldr	r2, [pc, #276]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8001f44:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f48:	6453      	str	r3, [r2, #68]	; 0x44
 8001f4a:	4b43      	ldr	r3, [pc, #268]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f52:	61bb      	str	r3, [r7, #24]
 8001f54:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f56:	4b40      	ldr	r3, [pc, #256]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5a:	4a3f      	ldr	r2, [pc, #252]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	6313      	str	r3, [r2, #48]	; 0x30
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8001f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 8001f6e:	23b0      	movs	r3, #176	; 0xb0
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f7e:	2305      	movs	r3, #5
 8001f80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	4619      	mov	r1, r3
 8001f88:	4834      	ldr	r0, [pc, #208]	; (800205c <HAL_SPI_MspInit+0x140>)
 8001f8a:	f001 fda7 	bl	8003adc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001f8e:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001f90:	4a34      	ldr	r2, [pc, #208]	; (8002064 <HAL_SPI_MspInit+0x148>)
 8001f92:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f94:	4b32      	ldr	r3, [pc, #200]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001f96:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f9a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001faa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fae:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001fb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fb6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001fb8:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fbe:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001fd2:	4823      	ldr	r0, [pc, #140]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001fd4:	f001 f9ea 	bl	80033ac <HAL_DMA_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8001fde:	f7ff fe69 	bl	8001cb4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a1e      	ldr	r2, [pc, #120]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001fe6:	659a      	str	r2, [r3, #88]	; 0x58
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <HAL_SPI_MspInit+0x144>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001fee:	e02c      	b.n	800204a <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI4)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <HAL_SPI_MspInit+0x14c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d127      	bne.n	800204a <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001ffa:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a16      	ldr	r2, [pc, #88]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8002000:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b14      	ldr	r3, [pc, #80]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8002018:	f043 0310 	orr.w	r3, r3, #16
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_SPI_MspInit+0x13c>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800202a:	2374      	movs	r3, #116	; 0x74
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202e:	2302      	movs	r3, #2
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002032:	2300      	movs	r3, #0
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002036:	2303      	movs	r3, #3
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800203a:	2305      	movs	r3, #5
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800203e:	f107 031c 	add.w	r3, r7, #28
 8002042:	4619      	mov	r1, r3
 8002044:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_SPI_MspInit+0x150>)
 8002046:	f001 fd49 	bl	8003adc <HAL_GPIO_Init>
}
 800204a:	bf00      	nop
 800204c:	3730      	adds	r7, #48	; 0x30
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40013000 	.word	0x40013000
 8002058:	40023800 	.word	0x40023800
 800205c:	40020000 	.word	0x40020000
 8002060:	2003356c 	.word	0x2003356c
 8002064:	40026410 	.word	0x40026410
 8002068:	40013400 	.word	0x40013400
 800206c:	40021000 	.word	0x40021000

08002070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a41      	ldr	r2, [pc, #260]	; (8002184 <HAL_TIM_Base_MspInit+0x114>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d114      	bne.n	80020ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002082:	4b41      	ldr	r3, [pc, #260]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	4a40      	ldr	r2, [pc, #256]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	4b3e      	ldr	r3, [pc, #248]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 8002090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2101      	movs	r1, #1
 800209e:	201b      	movs	r0, #27
 80020a0:	f001 f94d 	bl	800333e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80020a4:	201b      	movs	r0, #27
 80020a6:	f001 f966 	bl	8003376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020aa:	e066      	b.n	800217a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM3)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a36      	ldr	r2, [pc, #216]	; (800218c <HAL_TIM_Base_MspInit+0x11c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d114      	bne.n	80020e0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b6:	4b34      	ldr	r3, [pc, #208]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	4a33      	ldr	r2, [pc, #204]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	6413      	str	r3, [r2, #64]	; 0x40
 80020c2:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2101      	movs	r1, #1
 80020d2:	201d      	movs	r0, #29
 80020d4:	f001 f933 	bl	800333e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020d8:	201d      	movs	r0, #29
 80020da:	f001 f94c 	bl	8003376 <HAL_NVIC_EnableIRQ>
}
 80020de:	e04c      	b.n	800217a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM5)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a2a      	ldr	r2, [pc, #168]	; (8002190 <HAL_TIM_Base_MspInit+0x120>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d114      	bne.n	8002114 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020ea:	4b27      	ldr	r3, [pc, #156]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a26      	ldr	r2, [pc, #152]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b24      	ldr	r3, [pc, #144]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2101      	movs	r1, #1
 8002106:	2032      	movs	r0, #50	; 0x32
 8002108:	f001 f919 	bl	800333e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800210c:	2032      	movs	r0, #50	; 0x32
 800210e:	f001 f932 	bl	8003376 <HAL_NVIC_EnableIRQ>
}
 8002112:	e032      	b.n	800217a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM6)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a1e      	ldr	r2, [pc, #120]	; (8002194 <HAL_TIM_Base_MspInit+0x124>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d114      	bne.n	8002148 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 8002124:	f043 0310 	orr.w	r3, r3, #16
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f003 0310 	and.w	r3, r3, #16
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	2036      	movs	r0, #54	; 0x36
 800213c:	f001 f8ff 	bl	800333e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002140:	2036      	movs	r0, #54	; 0x36
 8002142:	f001 f918 	bl	8003376 <HAL_NVIC_EnableIRQ>
}
 8002146:	e018      	b.n	800217a <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM8)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a12      	ldr	r2, [pc, #72]	; (8002198 <HAL_TIM_Base_MspInit+0x128>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d113      	bne.n	800217a <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 8002158:	f043 0302 	orr.w	r3, r3, #2
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_TIM_Base_MspInit+0x118>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2101      	movs	r1, #1
 800216e:	202e      	movs	r0, #46	; 0x2e
 8002170:	f001 f8e5 	bl	800333e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002174:	202e      	movs	r0, #46	; 0x2e
 8002176:	f001 f8fe 	bl	8003376 <HAL_NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40010000 	.word	0x40010000
 8002188:	40023800 	.word	0x40023800
 800218c:	40000400 	.word	0x40000400
 8002190:	40000c00 	.word	0x40000c00
 8002194:	40001000 	.word	0x40001000
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
 80021b2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021bc:	d160      	bne.n	8002280 <HAL_TIM_IC_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021be:	4b32      	ldr	r3, [pc, #200]	; (8002288 <HAL_TIM_IC_MspInit+0xec>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	4a31      	ldr	r2, [pc, #196]	; (8002288 <HAL_TIM_IC_MspInit+0xec>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ca:	4b2f      	ldr	r3, [pc, #188]	; (8002288 <HAL_TIM_IC_MspInit+0xec>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <HAL_TIM_IC_MspInit+0xec>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a2b      	ldr	r2, [pc, #172]	; (8002288 <HAL_TIM_IC_MspInit+0xec>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b29      	ldr	r3, [pc, #164]	; (8002288 <HAL_TIM_IC_MspInit+0xec>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 80021ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002200:	2301      	movs	r3, #1
 8002202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	4619      	mov	r1, r3
 800220a:	4820      	ldr	r0, [pc, #128]	; (800228c <HAL_TIM_IC_MspInit+0xf0>)
 800220c:	f001 fc66 	bl	8003adc <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002210:	4b1f      	ldr	r3, [pc, #124]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 8002212:	4a20      	ldr	r2, [pc, #128]	; (8002294 <HAL_TIM_IC_MspInit+0xf8>)
 8002214:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002216:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 8002218:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800221c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800221e:	4b1c      	ldr	r3, [pc, #112]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002224:	4b1a      	ldr	r3, [pc, #104]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800222a:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 800222c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002230:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 8002234:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002238:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800223a:	4b15      	ldr	r3, [pc, #84]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 800223c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002240:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002242:	4b13      	ldr	r3, [pc, #76]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 8002244:	2200      	movs	r2, #0
 8002246:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 800224a:	2200      	movs	r2, #0
 800224c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800224e:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 8002250:	2200      	movs	r2, #0
 8002252:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002254:	480e      	ldr	r0, [pc, #56]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 8002256:	f001 f8a9 	bl	80033ac <HAL_DMA_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_TIM_IC_MspInit+0xc8>
    {
      Error_Handler();
 8002260:	f7ff fd28 	bl	8001cb4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 8002268:	625a      	str	r2, [r3, #36]	; 0x24
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_TIM_IC_MspInit+0xf4>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002270:	2200      	movs	r2, #0
 8002272:	2101      	movs	r1, #1
 8002274:	201c      	movs	r0, #28
 8002276:	f001 f862 	bl	800333e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800227a:	201c      	movs	r0, #28
 800227c:	f001 f87b 	bl	8003376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	40020000 	.word	0x40020000
 8002290:	20007df0 	.word	0x20007df0
 8002294:	40026088 	.word	0x40026088

08002298 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0d      	ldr	r2, [pc, #52]	; (80022dc <HAL_TIM_PWM_MspInit+0x44>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d113      	bne.n	80022d2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022aa:	4b0d      	ldr	r3, [pc, #52]	; (80022e0 <HAL_TIM_PWM_MspInit+0x48>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	4a0c      	ldr	r2, [pc, #48]	; (80022e0 <HAL_TIM_PWM_MspInit+0x48>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6413      	str	r3, [r2, #64]	; 0x40
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_TIM_PWM_MspInit+0x48>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80022c2:	2200      	movs	r2, #0
 80022c4:	2101      	movs	r1, #1
 80022c6:	201e      	movs	r0, #30
 80022c8:	f001 f839 	bl	800333e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80022cc:	201e      	movs	r0, #30
 80022ce:	f001 f852 	bl	8003376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40000800 	.word	0x40000800
 80022e0:	40023800 	.word	0x40023800

080022e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b08c      	sub	sp, #48	; 0x30
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a45      	ldr	r2, [pc, #276]	; (8002418 <HAL_TIM_MspPostInit+0x134>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d11d      	bne.n	8002342 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002306:	4b45      	ldr	r3, [pc, #276]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a44      	ldr	r2, [pc, #272]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 800230c:	f043 0310 	orr.w	r3, r3, #16
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b42      	ldr	r3, [pc, #264]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 800231e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002324:	2302      	movs	r3, #2
 8002326:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800232c:	2300      	movs	r3, #0
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002330:	2301      	movs	r3, #1
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002334:	f107 031c 	add.w	r3, r7, #28
 8002338:	4619      	mov	r1, r3
 800233a:	4839      	ldr	r0, [pc, #228]	; (8002420 <HAL_TIM_MspPostInit+0x13c>)
 800233c:	f001 fbce 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002340:	e065      	b.n	800240e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a37      	ldr	r2, [pc, #220]	; (8002424 <HAL_TIM_MspPostInit+0x140>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d11c      	bne.n	8002386 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002350:	4a32      	ldr	r2, [pc, #200]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6313      	str	r3, [r2, #48]	; 0x30
 8002358:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 8002364:	2340      	movs	r3, #64	; 0x40
 8002366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236c:	2300      	movs	r3, #0
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002370:	2300      	movs	r3, #0
 8002372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002374:	2302      	movs	r3, #2
 8002376:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	4619      	mov	r1, r3
 800237e:	482a      	ldr	r0, [pc, #168]	; (8002428 <HAL_TIM_MspPostInit+0x144>)
 8002380:	f001 fbac 	bl	8003adc <HAL_GPIO_Init>
}
 8002384:	e043      	b.n	800240e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a28      	ldr	r2, [pc, #160]	; (800242c <HAL_TIM_MspPostInit+0x148>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d11d      	bne.n	80023cc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002394:	4a21      	ldr	r2, [pc, #132]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	6313      	str	r3, [r2, #48]	; 0x30
 800239c:	4b1f      	ldr	r3, [pc, #124]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 80023a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023ba:	2302      	movs	r3, #2
 80023bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 80023be:	f107 031c 	add.w	r3, r7, #28
 80023c2:	4619      	mov	r1, r3
 80023c4:	481a      	ldr	r0, [pc, #104]	; (8002430 <HAL_TIM_MspPostInit+0x14c>)
 80023c6:	f001 fb89 	bl	8003adc <HAL_GPIO_Init>
}
 80023ca:	e020      	b.n	800240e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_TIM_MspPostInit+0x150>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d11b      	bne.n	800240e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 80023dc:	f043 0304 	orr.w	r3, r3, #4
 80023e0:	6313      	str	r3, [r2, #48]	; 0x30
 80023e2:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_TIM_MspPostInit+0x138>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 80023ee:	2340      	movs	r3, #64	; 0x40
 80023f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f6:	2300      	movs	r3, #0
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80023fe:	2303      	movs	r3, #3
 8002400:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 8002402:	f107 031c 	add.w	r3, r7, #28
 8002406:	4619      	mov	r1, r3
 8002408:	480b      	ldr	r0, [pc, #44]	; (8002438 <HAL_TIM_MspPostInit+0x154>)
 800240a:	f001 fb67 	bl	8003adc <HAL_GPIO_Init>
}
 800240e:	bf00      	nop
 8002410:	3730      	adds	r7, #48	; 0x30
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40010000 	.word	0x40010000
 800241c:	40023800 	.word	0x40023800
 8002420:	40021000 	.word	0x40021000
 8002424:	40000400 	.word	0x40000400
 8002428:	40020000 	.word	0x40020000
 800242c:	40000800 	.word	0x40000800
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40010400 	.word	0x40010400
 8002438:	40020800 	.word	0x40020800

0800243c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b092      	sub	sp, #72	; 0x48
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002444:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002448:	2200      	movs	r2, #0
 800244a:	601a      	str	r2, [r3, #0]
 800244c:	605a      	str	r2, [r3, #4]
 800244e:	609a      	str	r2, [r3, #8]
 8002450:	60da      	str	r2, [r3, #12]
 8002452:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a79      	ldr	r2, [pc, #484]	; (8002640 <HAL_UART_MspInit+0x204>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d129      	bne.n	80024b2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800245e:	4b79      	ldr	r3, [pc, #484]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	4a78      	ldr	r2, [pc, #480]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002468:	6413      	str	r3, [r2, #64]	; 0x40
 800246a:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_UART_MspInit+0x208>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002476:	4b73      	ldr	r3, [pc, #460]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a72      	ldr	r2, [pc, #456]	; (8002644 <HAL_UART_MspInit+0x208>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b70      	ldr	r3, [pc, #448]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = UART5_RX_Pin|UART5_TX_Pin;
 800248e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002498:	2300      	movs	r3, #0
 800249a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80024a0:	2308      	movs	r3, #8
 80024a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024a8:	4619      	mov	r1, r3
 80024aa:	4867      	ldr	r0, [pc, #412]	; (8002648 <HAL_UART_MspInit+0x20c>)
 80024ac:	f001 fb16 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024b0:	e0c1      	b.n	8002636 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==UART7)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a65      	ldr	r2, [pc, #404]	; (800264c <HAL_UART_MspInit+0x210>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d129      	bne.n	8002510 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART7_CLK_ENABLE();
 80024bc:	4b61      	ldr	r3, [pc, #388]	; (8002644 <HAL_UART_MspInit+0x208>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	4a60      	ldr	r2, [pc, #384]	; (8002644 <HAL_UART_MspInit+0x208>)
 80024c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024c6:	6413      	str	r3, [r2, #64]	; 0x40
 80024c8:	4b5e      	ldr	r3, [pc, #376]	; (8002644 <HAL_UART_MspInit+0x208>)
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024d4:	4b5b      	ldr	r3, [pc, #364]	; (8002644 <HAL_UART_MspInit+0x208>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	4a5a      	ldr	r2, [pc, #360]	; (8002644 <HAL_UART_MspInit+0x208>)
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	6313      	str	r3, [r2, #48]	; 0x30
 80024e0:	4b58      	ldr	r3, [pc, #352]	; (8002644 <HAL_UART_MspInit+0x208>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80024ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fa:	2303      	movs	r3, #3
 80024fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80024fe:	2308      	movs	r3, #8
 8002500:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002502:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002506:	4619      	mov	r1, r3
 8002508:	4851      	ldr	r0, [pc, #324]	; (8002650 <HAL_UART_MspInit+0x214>)
 800250a:	f001 fae7 	bl	8003adc <HAL_GPIO_Init>
}
 800250e:	e092      	b.n	8002636 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a4f      	ldr	r2, [pc, #316]	; (8002654 <HAL_UART_MspInit+0x218>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d129      	bne.n	800256e <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 800251a:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <HAL_UART_MspInit+0x208>)
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	4a49      	ldr	r2, [pc, #292]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002520:	f043 0310 	orr.w	r3, r3, #16
 8002524:	6453      	str	r3, [r2, #68]	; 0x44
 8002526:	4b47      	ldr	r3, [pc, #284]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800252a:	f003 0310 	and.w	r3, r3, #16
 800252e:	623b      	str	r3, [r7, #32]
 8002530:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002532:	4b44      	ldr	r3, [pc, #272]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a43      	ldr	r2, [pc, #268]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b41      	ldr	r3, [pc, #260]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	61fb      	str	r3, [r7, #28]
 8002548:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 800254a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800254e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002550:	2302      	movs	r3, #2
 8002552:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	2300      	movs	r3, #0
 8002556:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002558:	2303      	movs	r3, #3
 800255a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800255c:	2304      	movs	r3, #4
 800255e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002560:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002564:	4619      	mov	r1, r3
 8002566:	4838      	ldr	r0, [pc, #224]	; (8002648 <HAL_UART_MspInit+0x20c>)
 8002568:	f001 fab8 	bl	8003adc <HAL_GPIO_Init>
}
 800256c:	e063      	b.n	8002636 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART2)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a39      	ldr	r2, [pc, #228]	; (8002658 <HAL_UART_MspInit+0x21c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d128      	bne.n	80025ca <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002578:	4b32      	ldr	r3, [pc, #200]	; (8002644 <HAL_UART_MspInit+0x208>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	4a31      	ldr	r2, [pc, #196]	; (8002644 <HAL_UART_MspInit+0x208>)
 800257e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002582:	6413      	str	r3, [r2, #64]	; 0x40
 8002584:	4b2f      	ldr	r3, [pc, #188]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002590:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	4a2b      	ldr	r2, [pc, #172]	; (8002644 <HAL_UART_MspInit+0x208>)
 8002596:	f043 0301 	orr.w	r3, r3, #1
 800259a:	6313      	str	r3, [r2, #48]	; 0x30
 800259c:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_UART_MspInit+0x208>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	617b      	str	r3, [r7, #20]
 80025a6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 80025a8:	230c      	movs	r3, #12
 80025aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025b8:	2307      	movs	r3, #7
 80025ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025c0:	4619      	mov	r1, r3
 80025c2:	4826      	ldr	r0, [pc, #152]	; (800265c <HAL_UART_MspInit+0x220>)
 80025c4:	f001 fa8a 	bl	8003adc <HAL_GPIO_Init>
}
 80025c8:	e035      	b.n	8002636 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a24      	ldr	r2, [pc, #144]	; (8002660 <HAL_UART_MspInit+0x224>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d130      	bne.n	8002636 <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025d4:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_UART_MspInit+0x208>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d8:	4a1a      	ldr	r2, [pc, #104]	; (8002644 <HAL_UART_MspInit+0x208>)
 80025da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025de:	6413      	str	r3, [r2, #64]	; 0x40
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_UART_MspInit+0x208>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e8:	613b      	str	r3, [r7, #16]
 80025ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_UART_MspInit+0x208>)
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <HAL_UART_MspInit+0x208>)
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	6313      	str	r3, [r2, #48]	; 0x30
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_UART_MspInit+0x208>)
 80025fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 8002604:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800260a:	2302      	movs	r3, #2
 800260c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260e:	2300      	movs	r3, #0
 8002610:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002616:	2307      	movs	r3, #7
 8002618:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800261e:	4619      	mov	r1, r3
 8002620:	4809      	ldr	r0, [pc, #36]	; (8002648 <HAL_UART_MspInit+0x20c>)
 8002622:	f001 fa5b 	bl	8003adc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	2027      	movs	r0, #39	; 0x27
 800262c:	f000 fe87 	bl	800333e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002630:	2027      	movs	r0, #39	; 0x27
 8002632:	f000 fea0 	bl	8003376 <HAL_NVIC_EnableIRQ>
}
 8002636:	bf00      	nop
 8002638:	3748      	adds	r7, #72	; 0x48
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40005000 	.word	0x40005000
 8002644:	40023800 	.word	0x40023800
 8002648:	40020400 	.word	0x40020400
 800264c:	40007800 	.word	0x40007800
 8002650:	40021000 	.word	0x40021000
 8002654:	40011000 	.word	0x40011000
 8002658:	40004400 	.word	0x40004400
 800265c:	40020000 	.word	0x40020000
 8002660:	40004800 	.word	0x40004800

08002664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002676:	e7fe      	b.n	8002676 <HardFault_Handler+0x4>

08002678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800267c:	e7fe      	b.n	800267c <MemManage_Handler+0x4>

0800267e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <BusFault_Handler+0x4>

08002684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <UsageFault_Handler+0x4>

0800268a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b8:	f000 f918 	bl	80028ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <DMA1_Stream5_IRQHandler+0x10>)
 80026c6:	f000 ffa1 	bl	800360c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20007df0 	.word	0x20007df0

080026d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <TIM1_CC_IRQHandler+0x10>)
 80026da:	f003 ff55 	bl	8006588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20033408 	.word	0x20033408

080026e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <TIM2_IRQHandler+0x10>)
 80026ee:	f003 ff4b 	bl	8006588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200334ac 	.word	0x200334ac

080026fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <TIM3_IRQHandler+0x10>)
 8002702:	f003 ff41 	bl	8006588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2001d8e8 	.word	0x2001d8e8

08002710 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002714:	4802      	ldr	r0, [pc, #8]	; (8002720 <TIM4_IRQHandler+0x10>)
 8002716:	f003 ff37 	bl	8006588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20007f10 	.word	0x20007f10

08002724 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <USART3_IRQHandler+0x10>)
 800272a:	f005 fbcd 	bl	8007ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20007f50 	.word	0x20007f50

08002738 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800273c:	4802      	ldr	r0, [pc, #8]	; (8002748 <TIM8_CC_IRQHandler+0x10>)
 800273e:	f003 ff23 	bl	8006588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20007ed0 	.word	0x20007ed0

0800274c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <TIM5_IRQHandler+0x10>)
 8002752:	f003 ff19 	bl	8006588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	2001d8a8 	.word	0x2001d8a8

08002760 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <TIM6_DAC_IRQHandler+0x10>)
 8002766:	f003 ff0f 	bl	8006588 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200333c8 	.word	0x200333c8

08002774 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <DMA2_Stream0_IRQHandler+0x10>)
 800277a:	f000 ff47 	bl	800360c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	2003356c 	.word	0x2003356c

08002788 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <DMA2_Stream4_IRQHandler+0x10>)
 800278e:	f000 ff3d 	bl	800360c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20033368 	.word	0x20033368

0800279c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <_sbrk+0x50>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <_sbrk+0x16>
		heap_end = &end;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <_sbrk+0x50>)
 80027ae:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <_sbrk+0x54>)
 80027b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <_sbrk+0x50>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <_sbrk+0x50>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	466a      	mov	r2, sp
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d907      	bls.n	80027d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80027c6:	f006 f9e5 	bl	8008b94 <__errno>
 80027ca:	4602      	mov	r2, r0
 80027cc:	230c      	movs	r3, #12
 80027ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295
 80027d4:	e006      	b.n	80027e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <_sbrk+0x50>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	4a03      	ldr	r2, [pc, #12]	; (80027ec <_sbrk+0x50>)
 80027e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80027e2:	68fb      	ldr	r3, [r7, #12]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000098 	.word	0x20000098
 80027f0:	200335d8 	.word	0x200335d8

080027f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027f8:	4b08      	ldr	r3, [pc, #32]	; (800281c <SystemInit+0x28>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	4a07      	ldr	r2, [pc, #28]	; (800281c <SystemInit+0x28>)
 8002800:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002804:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <SystemInit+0x28>)
 800280a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800280e:	609a      	str	r2, [r3, #8]
#endif
}
 8002810:	bf00      	nop
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	e000ed00 	.word	0xe000ed00

08002820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002858 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002824:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002826:	e003      	b.n	8002830 <LoopCopyDataInit>

08002828 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800282a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800282c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800282e:	3104      	adds	r1, #4

08002830 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002830:	480b      	ldr	r0, [pc, #44]	; (8002860 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002832:	4b0c      	ldr	r3, [pc, #48]	; (8002864 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002834:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002836:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002838:	d3f6      	bcc.n	8002828 <CopyDataInit>
  ldr  r2, =_sbss
 800283a:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800283c:	e002      	b.n	8002844 <LoopFillZerobss>

0800283e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800283e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002840:	f842 3b04 	str.w	r3, [r2], #4

08002844 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002846:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002848:	d3f9      	bcc.n	800283e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800284a:	f7ff ffd3 	bl	80027f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800284e:	f006 f9a7 	bl	8008ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002852:	f7fd fecd 	bl	80005f0 <main>
  bx  lr    
 8002856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002858:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800285c:	08009494 	.word	0x08009494
  ldr  r0, =_sdata
 8002860:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002864:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002868:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800286c:	200335d4 	.word	0x200335d4

08002870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002870:	e7fe      	b.n	8002870 <ADC_IRQHandler>

08002872 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002876:	2003      	movs	r0, #3
 8002878:	f000 fd56 	bl	8003328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800287c:	2000      	movs	r0, #0
 800287e:	f000 f805 	bl	800288c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002882:	f7ff fa1f 	bl	8001cc4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002894:	4b12      	ldr	r3, [pc, #72]	; (80028e0 <HAL_InitTick+0x54>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_InitTick+0x58>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4619      	mov	r1, r3
 800289e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 fd71 	bl	8003392 <HAL_SYSTICK_Config>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00e      	b.n	80028d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b0f      	cmp	r3, #15
 80028be:	d80a      	bhi.n	80028d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028c0:	2200      	movs	r2, #0
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	f04f 30ff 	mov.w	r0, #4294967295
 80028c8:	f000 fd39 	bl	800333e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028cc:	4a06      	ldr	r2, [pc, #24]	; (80028e8 <HAL_InitTick+0x5c>)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	e000      	b.n	80028d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000004 	.word	0x20000004
 80028e4:	2000000c 	.word	0x2000000c
 80028e8:	20000008 	.word	0x20000008

080028ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_IncTick+0x20>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_IncTick+0x24>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4413      	add	r3, r2
 80028fc:	4a04      	ldr	r2, [pc, #16]	; (8002910 <HAL_IncTick+0x24>)
 80028fe:	6013      	str	r3, [r2, #0]
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	2000000c 	.word	0x2000000c
 8002910:	200335cc 	.word	0x200335cc

08002914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return uwTick;
 8002918:	4b03      	ldr	r3, [pc, #12]	; (8002928 <HAL_GetTick+0x14>)
 800291a:	681b      	ldr	r3, [r3, #0]
}
 800291c:	4618      	mov	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	200335cc 	.word	0x200335cc

0800292c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff ffee 	bl	8002914 <HAL_GetTick>
 8002938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002944:	d005      	beq.n	8002952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HAL_Delay+0x40>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	461a      	mov	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4413      	add	r3, r2
 8002950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002952:	bf00      	nop
 8002954:	f7ff ffde 	bl	8002914 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	429a      	cmp	r2, r3
 8002962:	d8f7      	bhi.n	8002954 <HAL_Delay+0x28>
  {
  }
}
 8002964:	bf00      	nop
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	2000000c 	.word	0x2000000c

08002970 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e031      	b.n	80029ea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff f9bc 	bl	8001d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d116      	bne.n	80029dc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <HAL_ADC_Init+0x84>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	f043 0202 	orr.w	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fa66 	bl	8002e90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f023 0303 	bic.w	r3, r3, #3
 80029d2:	f043 0201 	orr.w	r2, r3, #1
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
 80029da:	e001      	b.n	80029e0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	ffffeefd 	.word	0xffffeefd

080029f8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_Start_DMA+0x1e>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0c7      	b.n	8002ba6 <HAL_ADC_Start_DMA+0x1ae>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d018      	beq.n	8002a5e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002a3c:	4b5c      	ldr	r3, [pc, #368]	; (8002bb0 <HAL_ADC_Start_DMA+0x1b8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a5c      	ldr	r2, [pc, #368]	; (8002bb4 <HAL_ADC_Start_DMA+0x1bc>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	0c9a      	lsrs	r2, r3, #18
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002a50:	e002      	b.n	8002a58 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f9      	bne.n	8002a52 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	f040 809b 	bne.w	8002ba4 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a72:	4b51      	ldr	r3, [pc, #324]	; (8002bb8 <HAL_ADC_Start_DMA+0x1c0>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d007      	beq.n	8002a9c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa8:	d106      	bne.n	8002ab8 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	f023 0206 	bic.w	r2, r3, #6
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	645a      	str	r2, [r3, #68]	; 0x44
 8002ab6:	e002      	b.n	8002abe <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aca:	4a3c      	ldr	r2, [pc, #240]	; (8002bbc <HAL_ADC_Start_DMA+0x1c4>)
 8002acc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	4a3b      	ldr	r2, [pc, #236]	; (8002bc0 <HAL_ADC_Start_DMA+0x1c8>)
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	4a3a      	ldr	r2, [pc, #232]	; (8002bc4 <HAL_ADC_Start_DMA+0x1cc>)
 8002adc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ae6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	685a      	ldr	r2, [r3, #4]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002af6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b06:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	334c      	adds	r3, #76	; 0x4c
 8002b12:	4619      	mov	r1, r3
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f000 fcf6 	bl	8003508 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002b1c:	4b2a      	ldr	r3, [pc, #168]	; (8002bc8 <HAL_ADC_Start_DMA+0x1d0>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 031f 	and.w	r3, r3, #31
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10f      	bne.n	8002b48 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d136      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689a      	ldr	r2, [r3, #8]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b44:	609a      	str	r2, [r3, #8]
 8002b46:	e02d      	b.n	8002ba4 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_ADC_Start_DMA+0x1d4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d10e      	bne.n	8002b70 <HAL_ADC_Start_DMA+0x178>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d107      	bne.n	8002b70 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b6e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002b70:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_ADC_Start_DMA+0x1d0>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d113      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a13      	ldr	r2, [pc, #76]	; (8002bd0 <HAL_ADC_Start_DMA+0x1d8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10e      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x1ac>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d107      	bne.n	8002ba4 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ba2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000004 	.word	0x20000004
 8002bb4:	431bde83 	.word	0x431bde83
 8002bb8:	fffff8fe 	.word	0xfffff8fe
 8002bbc:	08003085 	.word	0x08003085
 8002bc0:	0800313f 	.word	0x0800313f
 8002bc4:	0800315b 	.word	0x0800315b
 8002bc8:	40012300 	.word	0x40012300
 8002bcc:	40012000 	.word	0x40012000
 8002bd0:	40012200 	.word	0x40012200

08002bd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d101      	bne.n	8002c18 <HAL_ADC_ConfigChannel+0x1c>
 8002c14:	2302      	movs	r3, #2
 8002c16:	e12a      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x272>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2b09      	cmp	r3, #9
 8002c26:	d93a      	bls.n	8002c9e <HAL_ADC_ConfigChannel+0xa2>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c30:	d035      	beq.n	8002c9e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68d9      	ldr	r1, [r3, #12]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4613      	mov	r3, r2
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	4413      	add	r3, r2
 8002c46:	3b1e      	subs	r3, #30
 8002c48:	2207      	movs	r2, #7
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	43da      	mvns	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	400a      	ands	r2, r1
 8002c56:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a87      	ldr	r2, [pc, #540]	; (8002e7c <HAL_ADC_ConfigChannel+0x280>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d10a      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68d9      	ldr	r1, [r3, #12]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	061a      	lsls	r2, r3, #24
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c76:	e035      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68d9      	ldr	r1, [r3, #12]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	4618      	mov	r0, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	4403      	add	r3, r0
 8002c90:	3b1e      	subs	r3, #30
 8002c92:	409a      	lsls	r2, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c9c:	e022      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6919      	ldr	r1, [r3, #16]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	461a      	mov	r2, r3
 8002cac:	4613      	mov	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	2207      	movs	r2, #7
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43da      	mvns	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	400a      	ands	r2, r1
 8002cc0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6919      	ldr	r1, [r3, #16]
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4403      	add	r3, r0
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2b06      	cmp	r3, #6
 8002cea:	d824      	bhi.n	8002d36 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3b05      	subs	r3, #5
 8002cfe:	221f      	movs	r2, #31
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43da      	mvns	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	400a      	ands	r2, r1
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	3b05      	subs	r3, #5
 8002d28:	fa00 f203 	lsl.w	r2, r0, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	635a      	str	r2, [r3, #52]	; 0x34
 8002d34:	e04c      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b0c      	cmp	r3, #12
 8002d3c:	d824      	bhi.n	8002d88 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b23      	subs	r3, #35	; 0x23
 8002d50:	221f      	movs	r2, #31
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	3b23      	subs	r3, #35	; 0x23
 8002d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	430a      	orrs	r2, r1
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
 8002d86:	e023      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	4413      	add	r3, r2
 8002d98:	3b41      	subs	r3, #65	; 0x41
 8002d9a:	221f      	movs	r2, #31
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43da      	mvns	r2, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	400a      	ands	r2, r1
 8002da8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	4618      	mov	r0, r3
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	3b41      	subs	r3, #65	; 0x41
 8002dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2a      	ldr	r2, [pc, #168]	; (8002e80 <HAL_ADC_ConfigChannel+0x284>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d10a      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x1f4>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002de2:	d105      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <HAL_ADC_ConfigChannel+0x288>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4a26      	ldr	r2, [pc, #152]	; (8002e84 <HAL_ADC_ConfigChannel+0x288>)
 8002dea:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002dee:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <HAL_ADC_ConfigChannel+0x284>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d109      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x212>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b12      	cmp	r3, #18
 8002e00:	d105      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002e02:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_ADC_ConfigChannel+0x288>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	4a1f      	ldr	r2, [pc, #124]	; (8002e84 <HAL_ADC_ConfigChannel+0x288>)
 8002e08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e0c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <HAL_ADC_ConfigChannel+0x284>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d125      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x268>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_ADC_ConfigChannel+0x280>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d003      	beq.n	8002e2a <HAL_ADC_ConfigChannel+0x22e>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b11      	cmp	r3, #17
 8002e28:	d11c      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002e2a:	4b16      	ldr	r3, [pc, #88]	; (8002e84 <HAL_ADC_ConfigChannel+0x288>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a15      	ldr	r2, [pc, #84]	; (8002e84 <HAL_ADC_ConfigChannel+0x288>)
 8002e30:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e34:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a10      	ldr	r2, [pc, #64]	; (8002e7c <HAL_ADC_ConfigChannel+0x280>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d111      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <HAL_ADC_ConfigChannel+0x28c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a11      	ldr	r2, [pc, #68]	; (8002e8c <HAL_ADC_ConfigChannel+0x290>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0c9a      	lsrs	r2, r3, #18
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e56:	e002      	b.n	8002e5e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f9      	bne.n	8002e58 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	10000012 	.word	0x10000012
 8002e80:	40012000 	.word	0x40012000
 8002e84:	40012300 	.word	0x40012300
 8002e88:	20000004 	.word	0x20000004
 8002e8c:	431bde83 	.word	0x431bde83

08002e90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002e98:	4b78      	ldr	r3, [pc, #480]	; (800307c <ADC_Init+0x1ec>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	4a77      	ldr	r2, [pc, #476]	; (800307c <ADC_Init+0x1ec>)
 8002e9e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ea2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ea4:	4b75      	ldr	r3, [pc, #468]	; (800307c <ADC_Init+0x1ec>)
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	4973      	ldr	r1, [pc, #460]	; (800307c <ADC_Init+0x1ec>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	021a      	lsls	r2, r3, #8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6899      	ldr	r1, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	4a58      	ldr	r2, [pc, #352]	; (8003080 <ADC_Init+0x1f0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d022      	beq.n	8002f6a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6899      	ldr	r1, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6899      	ldr	r1, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	e00f      	b.n	8002f8a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0202 	bic.w	r2, r2, #2
 8002f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	005a      	lsls	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01b      	beq.n	8002ff0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fc6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002fd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6859      	ldr	r1, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	035a      	lsls	r2, r3, #13
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	e007      	b.n	8003000 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ffe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800300e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	3b01      	subs	r3, #1
 800301c:	051a      	lsls	r2, r3, #20
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6899      	ldr	r1, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003042:	025a      	lsls	r2, r3, #9
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6899      	ldr	r1, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	029a      	lsls	r2, r3, #10
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40012300 	.word	0x40012300
 8003080:	0f000001 	.word	0x0f000001

08003084 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800309a:	2b00      	cmp	r3, #0
 800309c:	d13c      	bne.n	8003118 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d12b      	bne.n	8003110 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d127      	bne.n	8003110 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d119      	bne.n	8003110 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f022 0220 	bic.w	r2, r2, #32
 80030ea:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f043 0201 	orr.w	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f7fe fc7b 	bl	8001a0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003116:	e00e      	b.n	8003136 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311c:	f003 0310 	and.w	r3, r3, #16
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7ff fd5f 	bl	8002be8 <HAL_ADC_ErrorCallback>
}
 800312a:	e004      	b.n	8003136 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	4798      	blx	r3
}
 8003136:	bf00      	nop
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b084      	sub	sp, #16
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f7ff fd41 	bl	8002bd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b084      	sub	sp, #16
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003166:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2240      	movs	r2, #64	; 0x40
 800316c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f043 0204 	orr.w	r2, r3, #4
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff fd34 	bl	8002be8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <__NVIC_SetPriorityGrouping+0x40>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a4:	4013      	ands	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <__NVIC_SetPriorityGrouping+0x44>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <__NVIC_SetPriorityGrouping+0x40>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00
 80031cc:	05fa0000 	.word	0x05fa0000

080031d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <__NVIC_GetPriorityGrouping+0x18>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	f003 0307 	and.w	r3, r3, #7
}
 80031de:	4618      	mov	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	db0b      	blt.n	8003216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	f003 021f 	and.w	r2, r3, #31
 8003204:	4907      	ldr	r1, [pc, #28]	; (8003224 <__NVIC_EnableIRQ+0x38>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2001      	movs	r0, #1
 800320e:	fa00 f202 	lsl.w	r2, r0, r2
 8003212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000e100 	.word	0xe000e100

08003228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	2b00      	cmp	r3, #0
 800323a:	db0a      	blt.n	8003252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	490c      	ldr	r1, [pc, #48]	; (8003274 <__NVIC_SetPriority+0x4c>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	0112      	lsls	r2, r2, #4
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	440b      	add	r3, r1
 800324c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003250:	e00a      	b.n	8003268 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4908      	ldr	r1, [pc, #32]	; (8003278 <__NVIC_SetPriority+0x50>)
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	3b04      	subs	r3, #4
 8003260:	0112      	lsls	r2, r2, #4
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	440b      	add	r3, r1
 8003266:	761a      	strb	r2, [r3, #24]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000e100 	.word	0xe000e100
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	; 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f1c3 0307 	rsb	r3, r3, #7
 8003296:	2b04      	cmp	r3, #4
 8003298:	bf28      	it	cs
 800329a:	2304      	movcs	r3, #4
 800329c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d902      	bls.n	80032ac <NVIC_EncodePriority+0x30>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3b03      	subs	r3, #3
 80032aa:	e000      	b.n	80032ae <NVIC_EncodePriority+0x32>
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	401a      	ands	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c4:	f04f 31ff 	mov.w	r1, #4294967295
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	43d9      	mvns	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	4313      	orrs	r3, r2
         );
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3724      	adds	r7, #36	; 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f4:	d301      	bcc.n	80032fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032f6:	2301      	movs	r3, #1
 80032f8:	e00f      	b.n	800331a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fa:	4a0a      	ldr	r2, [pc, #40]	; (8003324 <SysTick_Config+0x40>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003302:	210f      	movs	r1, #15
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	f7ff ff8e 	bl	8003228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800330c:	4b05      	ldr	r3, [pc, #20]	; (8003324 <SysTick_Config+0x40>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003312:	4b04      	ldr	r3, [pc, #16]	; (8003324 <SysTick_Config+0x40>)
 8003314:	2207      	movs	r2, #7
 8003316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	e000e010 	.word	0xe000e010

08003328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff ff29 	bl	8003188 <__NVIC_SetPriorityGrouping>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af00      	add	r7, sp, #0
 8003344:	4603      	mov	r3, r0
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003350:	f7ff ff3e 	bl	80031d0 <__NVIC_GetPriorityGrouping>
 8003354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	6978      	ldr	r0, [r7, #20]
 800335c:	f7ff ff8e 	bl	800327c <NVIC_EncodePriority>
 8003360:	4602      	mov	r2, r0
 8003362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff5d 	bl	8003228 <__NVIC_SetPriority>
}
 800336e:	bf00      	nop
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	4603      	mov	r3, r0
 800337e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff31 	bl	80031ec <__NVIC_EnableIRQ>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ffa2 	bl	80032e4 <SysTick_Config>
 80033a0:	4603      	mov	r3, r0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
	...

080033ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff faac 	bl	8002914 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e099      	b.n	80034fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033e8:	e00f      	b.n	800340a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033ea:	f7ff fa93 	bl	8002914 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	d908      	bls.n	800340a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2203      	movs	r2, #3
 8003402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e078      	b.n	80034fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e8      	bne.n	80033ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4b38      	ldr	r3, [pc, #224]	; (8003504 <HAL_DMA_Init+0x158>)
 8003424:	4013      	ands	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003436:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003442:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800344e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	2b04      	cmp	r3, #4
 8003462:	d107      	bne.n	8003474 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	4313      	orrs	r3, r2
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	697a      	ldr	r2, [r7, #20]
 800347a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0307 	bic.w	r3, r3, #7
 800348a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b04      	cmp	r3, #4
 800349c:	d117      	bne.n	80034ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00e      	beq.n	80034ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fa99 	bl	80039e8 <DMA_CheckFifoParam>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d008      	beq.n	80034ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2240      	movs	r2, #64	; 0x40
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034ca:	2301      	movs	r3, #1
 80034cc:	e016      	b.n	80034fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 fa50 	bl	800397c <DMA_CalcBaseAndBitshift>
 80034dc:	4603      	mov	r3, r0
 80034de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e4:	223f      	movs	r2, #63	; 0x3f
 80034e6:	409a      	lsls	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3718      	adds	r7, #24
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	e010803f 	.word	0xe010803f

08003508 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
 8003514:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_DMA_Start_IT+0x26>
 800352a:	2302      	movs	r3, #2
 800352c:	e048      	b.n	80035c0 <HAL_DMA_Start_IT+0xb8>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b01      	cmp	r3, #1
 8003540:	d137      	bne.n	80035b2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f9e2 	bl	8003920 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	223f      	movs	r2, #63	; 0x3f
 8003562:	409a      	lsls	r2, r3
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f042 0216 	orr.w	r2, r2, #22
 8003576:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003586:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0208 	orr.w	r2, r2, #8
 800359e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e005      	b.n	80035be <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035ba:	2302      	movs	r3, #2
 80035bc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035be:	7dfb      	ldrb	r3, [r7, #23]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d004      	beq.n	80035e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2280      	movs	r2, #128	; 0x80
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e00c      	b.n	8003600 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2205      	movs	r2, #5
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003614:	2300      	movs	r3, #0
 8003616:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003618:	4b92      	ldr	r3, [pc, #584]	; (8003864 <HAL_DMA_IRQHandler+0x258>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a92      	ldr	r2, [pc, #584]	; (8003868 <HAL_DMA_IRQHandler+0x25c>)
 800361e:	fba2 2303 	umull	r2, r3, r2, r3
 8003622:	0a9b      	lsrs	r3, r3, #10
 8003624:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003636:	2208      	movs	r2, #8
 8003638:	409a      	lsls	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	4013      	ands	r3, r2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01a      	beq.n	8003678 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d013      	beq.n	8003678 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0204 	bic.w	r2, r2, #4
 800365e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	2208      	movs	r2, #8
 8003666:	409a      	lsls	r2, r3
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003670:	f043 0201 	orr.w	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	2201      	movs	r2, #1
 800367e:	409a      	lsls	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d012      	beq.n	80036ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00b      	beq.n	80036ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369a:	2201      	movs	r2, #1
 800369c:	409a      	lsls	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a6:	f043 0202 	orr.w	r2, r3, #2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	2204      	movs	r2, #4
 80036b4:	409a      	lsls	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d012      	beq.n	80036e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00b      	beq.n	80036e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036d0:	2204      	movs	r2, #4
 80036d2:	409a      	lsls	r2, r3
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	f043 0204 	orr.w	r2, r3, #4
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	2210      	movs	r2, #16
 80036ea:	409a      	lsls	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4013      	ands	r3, r2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d043      	beq.n	800377c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d03c      	beq.n	800377c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003706:	2210      	movs	r2, #16
 8003708:	409a      	lsls	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d018      	beq.n	800374e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d108      	bne.n	800373c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	2b00      	cmp	r3, #0
 8003730:	d024      	beq.n	800377c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
 800373a:	e01f      	b.n	800377c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003740:	2b00      	cmp	r3, #0
 8003742:	d01b      	beq.n	800377c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
 800374c:	e016      	b.n	800377c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003758:	2b00      	cmp	r3, #0
 800375a:	d107      	bne.n	800376c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0208 	bic.w	r2, r2, #8
 800376a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003780:	2220      	movs	r2, #32
 8003782:	409a      	lsls	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4013      	ands	r3, r2
 8003788:	2b00      	cmp	r3, #0
 800378a:	f000 808e 	beq.w	80038aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8086 	beq.w	80038aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	2220      	movs	r2, #32
 80037a4:	409a      	lsls	r2, r3
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b05      	cmp	r3, #5
 80037b4:	d136      	bne.n	8003824 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0216 	bic.w	r2, r2, #22
 80037c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	695a      	ldr	r2, [r3, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d103      	bne.n	80037e6 <HAL_DMA_IRQHandler+0x1da>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0208 	bic.w	r2, r2, #8
 80037f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fa:	223f      	movs	r2, #63	; 0x3f
 80037fc:	409a      	lsls	r2, r3
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003816:	2b00      	cmp	r3, #0
 8003818:	d07d      	beq.n	8003916 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4798      	blx	r3
        }
        return;
 8003822:	e078      	b.n	8003916 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d01c      	beq.n	800386c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d108      	bne.n	8003852 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	2b00      	cmp	r3, #0
 8003846:	d030      	beq.n	80038aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
 8003850:	e02b      	b.n	80038aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d027      	beq.n	80038aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
 8003862:	e022      	b.n	80038aa <HAL_DMA_IRQHandler+0x29e>
 8003864:	20000004 	.word	0x20000004
 8003868:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d10f      	bne.n	800389a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0210 	bic.w	r2, r2, #16
 8003888:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d032      	beq.n	8003918 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d022      	beq.n	8003904 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2205      	movs	r2, #5
 80038c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	3301      	adds	r3, #1
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d307      	bcc.n	80038f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f2      	bne.n	80038d6 <HAL_DMA_IRQHandler+0x2ca>
 80038f0:	e000      	b.n	80038f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
 8003914:	e000      	b.n	8003918 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003916:	bf00      	nop
    }
  }
}
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop

08003920 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800393c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	683a      	ldr	r2, [r7, #0]
 8003944:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d108      	bne.n	8003960 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800395e:	e007      	b.n	8003970 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	60da      	str	r2, [r3, #12]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	3b10      	subs	r3, #16
 800398c:	4a13      	ldr	r2, [pc, #76]	; (80039dc <DMA_CalcBaseAndBitshift+0x60>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	091b      	lsrs	r3, r3, #4
 8003994:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003996:	4a12      	ldr	r2, [pc, #72]	; (80039e0 <DMA_CalcBaseAndBitshift+0x64>)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	4413      	add	r3, r2
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	d908      	bls.n	80039bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <DMA_CalcBaseAndBitshift+0x68>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	1d1a      	adds	r2, r3, #4
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	659a      	str	r2, [r3, #88]	; 0x58
 80039ba:	e006      	b.n	80039ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	461a      	mov	r2, r3
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <DMA_CalcBaseAndBitshift+0x68>)
 80039c4:	4013      	ands	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	aaaaaaab 	.word	0xaaaaaaab
 80039e0:	08009448 	.word	0x08009448
 80039e4:	fffffc00 	.word	0xfffffc00

080039e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039f0:	2300      	movs	r3, #0
 80039f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d11f      	bne.n	8003a42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b03      	cmp	r3, #3
 8003a06:	d855      	bhi.n	8003ab4 <DMA_CheckFifoParam+0xcc>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <DMA_CheckFifoParam+0x28>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a33 	.word	0x08003a33
 8003a18:	08003a21 	.word	0x08003a21
 8003a1c:	08003ab5 	.word	0x08003ab5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d045      	beq.n	8003ab8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a30:	e042      	b.n	8003ab8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a3a:	d13f      	bne.n	8003abc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a40:	e03c      	b.n	8003abc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a4a:	d121      	bne.n	8003a90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d836      	bhi.n	8003ac0 <DMA_CheckFifoParam+0xd8>
 8003a52:	a201      	add	r2, pc, #4	; (adr r2, 8003a58 <DMA_CheckFifoParam+0x70>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a69 	.word	0x08003a69
 8003a5c:	08003a6f 	.word	0x08003a6f
 8003a60:	08003a69 	.word	0x08003a69
 8003a64:	08003a81 	.word	0x08003a81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6c:	e02f      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d024      	beq.n	8003ac4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a7e:	e021      	b.n	8003ac4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a88:	d11e      	bne.n	8003ac8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a8e:	e01b      	b.n	8003ac8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d902      	bls.n	8003a9c <DMA_CheckFifoParam+0xb4>
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d003      	beq.n	8003aa2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a9a:	e018      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa0:	e015      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00e      	beq.n	8003acc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab2:	e00b      	b.n	8003acc <DMA_CheckFifoParam+0xe4>
      break;
 8003ab4:	bf00      	nop
 8003ab6:	e00a      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;
 8003ab8:	bf00      	nop
 8003aba:	e008      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;
 8003abc:	bf00      	nop
 8003abe:	e006      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;
 8003ac0:	bf00      	nop
 8003ac2:	e004      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;
 8003ac4:	bf00      	nop
 8003ac6:	e002      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;   
 8003ac8:	bf00      	nop
 8003aca:	e000      	b.n	8003ace <DMA_CheckFifoParam+0xe6>
      break;
 8003acc:	bf00      	nop
    }
  } 
  
  return status; 
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3714      	adds	r7, #20
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	; 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003aea:	2300      	movs	r3, #0
 8003aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e175      	b.n	8003de8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003afc:	2201      	movs	r2, #1
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	f040 8164 	bne.w	8003de2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d00b      	beq.n	8003b3a <HAL_GPIO_Init+0x5e>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d007      	beq.n	8003b3a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b2e:	2b11      	cmp	r3, #17
 8003b30:	d003      	beq.n	8003b3a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	2b12      	cmp	r3, #18
 8003b38:	d130      	bne.n	8003b9c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	2203      	movs	r2, #3
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b70:	2201      	movs	r2, #1
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	091b      	lsrs	r3, r3, #4
 8003b86:	f003 0201 	and.w	r2, r3, #1
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d003      	beq.n	8003bdc <HAL_GPIO_Init+0x100>
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b12      	cmp	r3, #18
 8003bda:	d123      	bne.n	8003c24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	08da      	lsrs	r2, r3, #3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	3208      	adds	r2, #8
 8003be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	220f      	movs	r2, #15
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	08da      	lsrs	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3208      	adds	r2, #8
 8003c1e:	69b9      	ldr	r1, [r7, #24]
 8003c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	2203      	movs	r2, #3
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43db      	mvns	r3, r3
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 0203 	and.w	r2, r3, #3
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	005b      	lsls	r3, r3, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	69ba      	ldr	r2, [r7, #24]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80be 	beq.w	8003de2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c66:	4b65      	ldr	r3, [pc, #404]	; (8003dfc <HAL_GPIO_Init+0x320>)
 8003c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6a:	4a64      	ldr	r2, [pc, #400]	; (8003dfc <HAL_GPIO_Init+0x320>)
 8003c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c70:	6453      	str	r3, [r2, #68]	; 0x44
 8003c72:	4b62      	ldr	r3, [pc, #392]	; (8003dfc <HAL_GPIO_Init+0x320>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c7e:	4a60      	ldr	r2, [pc, #384]	; (8003e00 <HAL_GPIO_Init+0x324>)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	089b      	lsrs	r3, r3, #2
 8003c84:	3302      	adds	r3, #2
 8003c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	220f      	movs	r2, #15
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a57      	ldr	r2, [pc, #348]	; (8003e04 <HAL_GPIO_Init+0x328>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d037      	beq.n	8003d1a <HAL_GPIO_Init+0x23e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a56      	ldr	r2, [pc, #344]	; (8003e08 <HAL_GPIO_Init+0x32c>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d031      	beq.n	8003d16 <HAL_GPIO_Init+0x23a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a55      	ldr	r2, [pc, #340]	; (8003e0c <HAL_GPIO_Init+0x330>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d02b      	beq.n	8003d12 <HAL_GPIO_Init+0x236>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a54      	ldr	r2, [pc, #336]	; (8003e10 <HAL_GPIO_Init+0x334>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d025      	beq.n	8003d0e <HAL_GPIO_Init+0x232>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a53      	ldr	r2, [pc, #332]	; (8003e14 <HAL_GPIO_Init+0x338>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01f      	beq.n	8003d0a <HAL_GPIO_Init+0x22e>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a52      	ldr	r2, [pc, #328]	; (8003e18 <HAL_GPIO_Init+0x33c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d019      	beq.n	8003d06 <HAL_GPIO_Init+0x22a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a51      	ldr	r2, [pc, #324]	; (8003e1c <HAL_GPIO_Init+0x340>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <HAL_GPIO_Init+0x226>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a50      	ldr	r2, [pc, #320]	; (8003e20 <HAL_GPIO_Init+0x344>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00d      	beq.n	8003cfe <HAL_GPIO_Init+0x222>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4f      	ldr	r2, [pc, #316]	; (8003e24 <HAL_GPIO_Init+0x348>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <HAL_GPIO_Init+0x21e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4e      	ldr	r2, [pc, #312]	; (8003e28 <HAL_GPIO_Init+0x34c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d101      	bne.n	8003cf6 <HAL_GPIO_Init+0x21a>
 8003cf2:	2309      	movs	r3, #9
 8003cf4:	e012      	b.n	8003d1c <HAL_GPIO_Init+0x240>
 8003cf6:	230a      	movs	r3, #10
 8003cf8:	e010      	b.n	8003d1c <HAL_GPIO_Init+0x240>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	e00e      	b.n	8003d1c <HAL_GPIO_Init+0x240>
 8003cfe:	2307      	movs	r3, #7
 8003d00:	e00c      	b.n	8003d1c <HAL_GPIO_Init+0x240>
 8003d02:	2306      	movs	r3, #6
 8003d04:	e00a      	b.n	8003d1c <HAL_GPIO_Init+0x240>
 8003d06:	2305      	movs	r3, #5
 8003d08:	e008      	b.n	8003d1c <HAL_GPIO_Init+0x240>
 8003d0a:	2304      	movs	r3, #4
 8003d0c:	e006      	b.n	8003d1c <HAL_GPIO_Init+0x240>
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e004      	b.n	8003d1c <HAL_GPIO_Init+0x240>
 8003d12:	2302      	movs	r3, #2
 8003d14:	e002      	b.n	8003d1c <HAL_GPIO_Init+0x240>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <HAL_GPIO_Init+0x240>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	f002 0203 	and.w	r2, r2, #3
 8003d22:	0092      	lsls	r2, r2, #2
 8003d24:	4093      	lsls	r3, r2
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d2c:	4934      	ldr	r1, [pc, #208]	; (8003e00 <HAL_GPIO_Init+0x324>)
 8003d2e:	69fb      	ldr	r3, [r7, #28]
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	3302      	adds	r3, #2
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d3a:	4b3c      	ldr	r3, [pc, #240]	; (8003e2c <HAL_GPIO_Init+0x350>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	43db      	mvns	r3, r3
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	4013      	ands	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d5e:	4a33      	ldr	r2, [pc, #204]	; (8003e2c <HAL_GPIO_Init+0x350>)
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d64:	4b31      	ldr	r3, [pc, #196]	; (8003e2c <HAL_GPIO_Init+0x350>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4013      	ands	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d88:	4a28      	ldr	r2, [pc, #160]	; (8003e2c <HAL_GPIO_Init+0x350>)
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d8e:	4b27      	ldr	r3, [pc, #156]	; (8003e2c <HAL_GPIO_Init+0x350>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	43db      	mvns	r3, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003db2:	4a1e      	ldr	r2, [pc, #120]	; (8003e2c <HAL_GPIO_Init+0x350>)
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003db8:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <HAL_GPIO_Init+0x350>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <HAL_GPIO_Init+0x350>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3301      	adds	r3, #1
 8003de6:	61fb      	str	r3, [r7, #28]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	2b0f      	cmp	r3, #15
 8003dec:	f67f ae86 	bls.w	8003afc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003df0:	bf00      	nop
 8003df2:	3724      	adds	r7, #36	; 0x24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	40013800 	.word	0x40013800
 8003e04:	40020000 	.word	0x40020000
 8003e08:	40020400 	.word	0x40020400
 8003e0c:	40020800 	.word	0x40020800
 8003e10:	40020c00 	.word	0x40020c00
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40021400 	.word	0x40021400
 8003e1c:	40021800 	.word	0x40021800
 8003e20:	40021c00 	.word	0x40021c00
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40022400 	.word	0x40022400
 8003e2c:	40013c00 	.word	0x40013c00

08003e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e40:	787b      	ldrb	r3, [r7, #1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e4c:	e003      	b.n	8003e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e4e:	887b      	ldrh	r3, [r7, #2]
 8003e50:	041a      	lsls	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	619a      	str	r2, [r3, #24]
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e07f      	b.n	8003f76 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7fd ffb0 	bl	8001df0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2224      	movs	r2, #36	; 0x24
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0201 	bic.w	r2, r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eb4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ec4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d107      	bne.n	8003ede <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	e006      	b.n	8003eec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003eea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d104      	bne.n	8003efe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003efc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6859      	ldr	r1, [r3, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <HAL_I2C_Init+0x11c>)
 8003f0a:	430b      	orrs	r3, r1
 8003f0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691a      	ldr	r2, [r3, #16]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	ea42 0103 	orr.w	r1, r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	021a      	lsls	r2, r3, #8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69d9      	ldr	r1, [r3, #28]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a1a      	ldr	r2, [r3, #32]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2220      	movs	r2, #32
 8003f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	02008000 	.word	0x02008000

08003f84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d138      	bne.n	800400c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e032      	b.n	800400e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2224      	movs	r2, #36	; 0x24
 8003fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0201 	bic.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6819      	ldr	r1, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f042 0201 	orr.w	r2, r2, #1
 8003ff6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004008:	2300      	movs	r3, #0
 800400a:	e000      	b.n	800400e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800400c:	2302      	movs	r3, #2
  }
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
 8004022:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b20      	cmp	r3, #32
 800402e:	d139      	bne.n	80040a4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004036:	2b01      	cmp	r3, #1
 8004038:	d101      	bne.n	800403e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800403a:	2302      	movs	r3, #2
 800403c:	e033      	b.n	80040a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2224      	movs	r2, #36	; 0x24
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800406c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	021b      	lsls	r3, r3, #8
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	4313      	orrs	r3, r2
 8004076:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040a4:	2302      	movs	r3, #2
  }
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3714      	adds	r7, #20
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80040be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c2:	6013      	str	r3, [r2, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40007000 	.word	0x40007000

080040d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80040de:	4b23      	ldr	r3, [pc, #140]	; (800416c <HAL_PWREx_EnableOverDrive+0x98>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	4a22      	ldr	r2, [pc, #136]	; (800416c <HAL_PWREx_EnableOverDrive+0x98>)
 80040e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040e8:	6413      	str	r3, [r2, #64]	; 0x40
 80040ea:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_PWREx_EnableOverDrive+0x98>)
 80040ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80040f6:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1d      	ldr	r2, [pc, #116]	; (8004170 <HAL_PWREx_EnableOverDrive+0x9c>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004100:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004102:	f7fe fc07 	bl	8002914 <HAL_GetTick>
 8004106:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004108:	e009      	b.n	800411e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800410a:	f7fe fc03 	bl	8002914 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004118:	d901      	bls.n	800411e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e022      	b.n	8004164 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800411e:	4b14      	ldr	r3, [pc, #80]	; (8004170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412a:	d1ee      	bne.n	800410a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800412c:	4b10      	ldr	r3, [pc, #64]	; (8004170 <HAL_PWREx_EnableOverDrive+0x9c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0f      	ldr	r2, [pc, #60]	; (8004170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004136:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004138:	f7fe fbec 	bl	8002914 <HAL_GetTick>
 800413c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800413e:	e009      	b.n	8004154 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004140:	f7fe fbe8 	bl	8002914 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800414e:	d901      	bls.n	8004154 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e007      	b.n	8004164 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004160:	d1ee      	bne.n	8004140 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	40007000 	.word	0x40007000

08004174 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800417c:	2300      	movs	r3, #0
 800417e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e29b      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 8087 	beq.w	80042a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004198:	4b96      	ldr	r3, [pc, #600]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d00c      	beq.n	80041be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041a4:	4b93      	ldr	r3, [pc, #588]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 030c 	and.w	r3, r3, #12
 80041ac:	2b08      	cmp	r3, #8
 80041ae:	d112      	bne.n	80041d6 <HAL_RCC_OscConfig+0x62>
 80041b0:	4b90      	ldr	r3, [pc, #576]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041bc:	d10b      	bne.n	80041d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041be:	4b8d      	ldr	r3, [pc, #564]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d06c      	beq.n	80042a4 <HAL_RCC_OscConfig+0x130>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d168      	bne.n	80042a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	e275      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041de:	d106      	bne.n	80041ee <HAL_RCC_OscConfig+0x7a>
 80041e0:	4b84      	ldr	r3, [pc, #528]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a83      	ldr	r2, [pc, #524]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80041e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	e02e      	b.n	800424c <HAL_RCC_OscConfig+0xd8>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0x9c>
 80041f6:	4b7f      	ldr	r3, [pc, #508]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7e      	ldr	r2, [pc, #504]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80041fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b7c      	ldr	r3, [pc, #496]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a7b      	ldr	r2, [pc, #492]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004208:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e01d      	b.n	800424c <HAL_RCC_OscConfig+0xd8>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0xc0>
 800421a:	4b76      	ldr	r3, [pc, #472]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a75      	ldr	r2, [pc, #468]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b73      	ldr	r3, [pc, #460]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a72      	ldr	r2, [pc, #456]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e00b      	b.n	800424c <HAL_RCC_OscConfig+0xd8>
 8004234:	4b6f      	ldr	r3, [pc, #444]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6e      	ldr	r2, [pc, #440]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 800423a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	4b6c      	ldr	r3, [pc, #432]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a6b      	ldr	r2, [pc, #428]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800424a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004254:	f7fe fb5e 	bl	8002914 <HAL_GetTick>
 8004258:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	e008      	b.n	800426e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800425c:	f7fe fb5a 	bl	8002914 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	2b64      	cmp	r3, #100	; 0x64
 8004268:	d901      	bls.n	800426e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800426a:	2303      	movs	r3, #3
 800426c:	e229      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426e:	4b61      	ldr	r3, [pc, #388]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0f0      	beq.n	800425c <HAL_RCC_OscConfig+0xe8>
 800427a:	e014      	b.n	80042a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427c:	f7fe fb4a 	bl	8002914 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	e008      	b.n	8004296 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004284:	f7fe fb46 	bl	8002914 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b64      	cmp	r3, #100	; 0x64
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e215      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004296:	4b57      	ldr	r3, [pc, #348]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1f0      	bne.n	8004284 <HAL_RCC_OscConfig+0x110>
 80042a2:	e000      	b.n	80042a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0302 	and.w	r3, r3, #2
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d069      	beq.n	8004386 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042b2:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00b      	beq.n	80042d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042be:	4b4d      	ldr	r3, [pc, #308]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 030c 	and.w	r3, r3, #12
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d11c      	bne.n	8004304 <HAL_RCC_OscConfig+0x190>
 80042ca:	4b4a      	ldr	r3, [pc, #296]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d116      	bne.n	8004304 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042d6:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_RCC_OscConfig+0x17a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e1e9      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ee:	4b41      	ldr	r3, [pc, #260]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	493d      	ldr	r1, [pc, #244]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004302:	e040      	b.n	8004386 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d023      	beq.n	8004354 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800430c:	4b39      	ldr	r3, [pc, #228]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a38      	ldr	r2, [pc, #224]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004312:	f043 0301 	orr.w	r3, r3, #1
 8004316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004318:	f7fe fafc 	bl	8002914 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004320:	f7fe faf8 	bl	8002914 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e1c7      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004332:	4b30      	ldr	r3, [pc, #192]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433e:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4929      	ldr	r1, [pc, #164]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]
 8004352:	e018      	b.n	8004386 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004354:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a26      	ldr	r2, [pc, #152]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7fe fad8 	bl	8002914 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004368:	f7fe fad4 	bl	8002914 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e1a3      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d038      	beq.n	8004404 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d019      	beq.n	80043ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439a:	4b16      	ldr	r3, [pc, #88]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 800439c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800439e:	4a15      	ldr	r2, [pc, #84]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a6:	f7fe fab5 	bl	8002914 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ae:	f7fe fab1 	bl	8002914 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e180      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80043c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x23a>
 80043cc:	e01a      	b.n	8004404 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ce:	4b09      	ldr	r3, [pc, #36]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80043d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d2:	4a08      	ldr	r2, [pc, #32]	; (80043f4 <HAL_RCC_OscConfig+0x280>)
 80043d4:	f023 0301 	bic.w	r3, r3, #1
 80043d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043da:	f7fe fa9b 	bl	8002914 <HAL_GetTick>
 80043de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e2:	f7fe fa97 	bl	8002914 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	d903      	bls.n	80043f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e166      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
 80043f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f8:	4b92      	ldr	r3, [pc, #584]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80043fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1ee      	bne.n	80043e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80a4 	beq.w	800455a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004412:	4b8c      	ldr	r3, [pc, #560]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	4b89      	ldr	r3, [pc, #548]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	4a88      	ldr	r2, [pc, #544]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004428:	6413      	str	r3, [r2, #64]	; 0x40
 800442a:	4b86      	ldr	r3, [pc, #536]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004436:	2301      	movs	r3, #1
 8004438:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800443a:	4b83      	ldr	r3, [pc, #524]	; (8004648 <HAL_RCC_OscConfig+0x4d4>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004442:	2b00      	cmp	r3, #0
 8004444:	d118      	bne.n	8004478 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004446:	4b80      	ldr	r3, [pc, #512]	; (8004648 <HAL_RCC_OscConfig+0x4d4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a7f      	ldr	r2, [pc, #508]	; (8004648 <HAL_RCC_OscConfig+0x4d4>)
 800444c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004450:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004452:	f7fe fa5f 	bl	8002914 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445a:	f7fe fa5b 	bl	8002914 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b64      	cmp	r3, #100	; 0x64
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e12a      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800446c:	4b76      	ldr	r3, [pc, #472]	; (8004648 <HAL_RCC_OscConfig+0x4d4>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d0f0      	beq.n	800445a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d106      	bne.n	800448e <HAL_RCC_OscConfig+0x31a>
 8004480:	4b70      	ldr	r3, [pc, #448]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004484:	4a6f      	ldr	r2, [pc, #444]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004486:	f043 0301 	orr.w	r3, r3, #1
 800448a:	6713      	str	r3, [r2, #112]	; 0x70
 800448c:	e02d      	b.n	80044ea <HAL_RCC_OscConfig+0x376>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x33c>
 8004496:	4b6b      	ldr	r3, [pc, #428]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449a:	4a6a      	ldr	r2, [pc, #424]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	6713      	str	r3, [r2, #112]	; 0x70
 80044a2:	4b68      	ldr	r3, [pc, #416]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	4a67      	ldr	r2, [pc, #412]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	6713      	str	r3, [r2, #112]	; 0x70
 80044ae:	e01c      	b.n	80044ea <HAL_RCC_OscConfig+0x376>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	2b05      	cmp	r3, #5
 80044b6:	d10c      	bne.n	80044d2 <HAL_RCC_OscConfig+0x35e>
 80044b8:	4b62      	ldr	r3, [pc, #392]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	4a61      	ldr	r2, [pc, #388]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80044be:	f043 0304 	orr.w	r3, r3, #4
 80044c2:	6713      	str	r3, [r2, #112]	; 0x70
 80044c4:	4b5f      	ldr	r3, [pc, #380]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80044c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c8:	4a5e      	ldr	r2, [pc, #376]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80044ca:	f043 0301 	orr.w	r3, r3, #1
 80044ce:	6713      	str	r3, [r2, #112]	; 0x70
 80044d0:	e00b      	b.n	80044ea <HAL_RCC_OscConfig+0x376>
 80044d2:	4b5c      	ldr	r3, [pc, #368]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	4a5b      	ldr	r2, [pc, #364]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	6713      	str	r3, [r2, #112]	; 0x70
 80044de:	4b59      	ldr	r3, [pc, #356]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a58      	ldr	r2, [pc, #352]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80044e4:	f023 0304 	bic.w	r3, r3, #4
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d015      	beq.n	800451e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f2:	f7fe fa0f 	bl	8002914 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f8:	e00a      	b.n	8004510 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044fa:	f7fe fa0b 	bl	8002914 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	f241 3288 	movw	r2, #5000	; 0x1388
 8004508:	4293      	cmp	r3, r2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e0d8      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004510:	4b4c      	ldr	r3, [pc, #304]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0ee      	beq.n	80044fa <HAL_RCC_OscConfig+0x386>
 800451c:	e014      	b.n	8004548 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451e:	f7fe f9f9 	bl	8002914 <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004524:	e00a      	b.n	800453c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004526:	f7fe f9f5 	bl	8002914 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	f241 3288 	movw	r2, #5000	; 0x1388
 8004534:	4293      	cmp	r3, r2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e0c2      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800453c:	4b41      	ldr	r3, [pc, #260]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1ee      	bne.n	8004526 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004548:	7dfb      	ldrb	r3, [r7, #23]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d105      	bne.n	800455a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800454e:	4b3d      	ldr	r3, [pc, #244]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	4a3c      	ldr	r2, [pc, #240]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004558:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80ae 	beq.w	80046c0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004564:	4b37      	ldr	r3, [pc, #220]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 030c 	and.w	r3, r3, #12
 800456c:	2b08      	cmp	r3, #8
 800456e:	d06d      	beq.n	800464c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d14b      	bne.n	8004610 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004578:	4b32      	ldr	r3, [pc, #200]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a31      	ldr	r2, [pc, #196]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 800457e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004584:	f7fe f9c6 	bl	8002914 <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800458c:	f7fe f9c2 	bl	8002914 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e091      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	4b29      	ldr	r3, [pc, #164]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	431a      	orrs	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	071b      	lsls	r3, r3, #28
 80045d6:	491b      	ldr	r1, [pc, #108]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a18      	ldr	r2, [pc, #96]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 80045e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e8:	f7fe f994 	bl	8002914 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f0:	f7fe f990 	bl	8002914 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e05f      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d0f0      	beq.n	80045f0 <HAL_RCC_OscConfig+0x47c>
 800460e:	e057      	b.n	80046c0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004610:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a0b      	ldr	r2, [pc, #44]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800461a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461c:	f7fe f97a 	bl	8002914 <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004624:	f7fe f976 	bl	8002914 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e045      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004636:	4b03      	ldr	r3, [pc, #12]	; (8004644 <HAL_RCC_OscConfig+0x4d0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d1f0      	bne.n	8004624 <HAL_RCC_OscConfig+0x4b0>
 8004642:	e03d      	b.n	80046c0 <HAL_RCC_OscConfig+0x54c>
 8004644:	40023800 	.word	0x40023800
 8004648:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800464c:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <HAL_RCC_OscConfig+0x558>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d030      	beq.n	80046bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d129      	bne.n	80046bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	429a      	cmp	r2, r3
 8004674:	d122      	bne.n	80046bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800467c:	4013      	ands	r3, r2
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004682:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004684:	4293      	cmp	r3, r2
 8004686:	d119      	bne.n	80046bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	3b01      	subs	r3, #1
 8004696:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d10f      	bne.n	80046bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d107      	bne.n	80046bc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d001      	beq.n	80046c0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	40023800 	.word	0x40023800

080046d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	e0d0      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e8:	4b6a      	ldr	r3, [pc, #424]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 030f 	and.w	r3, r3, #15
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d910      	bls.n	8004718 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b67      	ldr	r3, [pc, #412]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 020f 	bic.w	r2, r3, #15
 80046fe:	4965      	ldr	r1, [pc, #404]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b63      	ldr	r3, [pc, #396]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 030f 	and.w	r3, r3, #15
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0b8      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004730:	4b59      	ldr	r3, [pc, #356]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4a58      	ldr	r2, [pc, #352]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800473a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004748:	4b53      	ldr	r3, [pc, #332]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4a52      	ldr	r2, [pc, #328]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800474e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004752:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004754:	4b50      	ldr	r3, [pc, #320]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	494d      	ldr	r1, [pc, #308]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d040      	beq.n	80047f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d115      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e07f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d107      	bne.n	80047a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004792:	4b41      	ldr	r3, [pc, #260]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d109      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e073      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047a2:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e06b      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047b2:	4b39      	ldr	r3, [pc, #228]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f023 0203 	bic.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4936      	ldr	r1, [pc, #216]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c4:	f7fe f8a6 	bl	8002914 <HAL_GetTick>
 80047c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047cc:	f7fe f8a2 	bl	8002914 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047da:	4293      	cmp	r3, r2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e053      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047e2:	4b2d      	ldr	r3, [pc, #180]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f003 020c 	and.w	r2, r3, #12
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d1eb      	bne.n	80047cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f4:	4b27      	ldr	r3, [pc, #156]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 030f 	and.w	r3, r3, #15
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d210      	bcs.n	8004824 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004802:	4b24      	ldr	r3, [pc, #144]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f023 020f 	bic.w	r2, r3, #15
 800480a:	4922      	ldr	r1, [pc, #136]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	4313      	orrs	r3, r2
 8004810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004812:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e032      	b.n	800488a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4916      	ldr	r1, [pc, #88]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	490e      	ldr	r1, [pc, #56]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004862:	f000 f821 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8004866:	4601      	mov	r1, r0
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	4a0a      	ldr	r2, [pc, #40]	; (800489c <HAL_RCC_ClockConfig+0x1cc>)
 8004874:	5cd3      	ldrb	r3, [r2, r3]
 8004876:	fa21 f303 	lsr.w	r3, r1, r3
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <HAL_RCC_ClockConfig+0x1d0>)
 800487c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCC_ClockConfig+0x1d4>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fe f802 	bl	800288c <HAL_InitTick>

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023c00 	.word	0x40023c00
 8004898:	40023800 	.word	0x40023800
 800489c:	08009430 	.word	0x08009430
 80048a0:	20000004 	.word	0x20000004
 80048a4:	20000008 	.word	0x20000008

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80048ae:	2300      	movs	r3, #0
 80048b0:	607b      	str	r3, [r7, #4]
 80048b2:	2300      	movs	r3, #0
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	2300      	movs	r3, #0
 80048b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048be:	4b50      	ldr	r3, [pc, #320]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x158>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d007      	beq.n	80048da <HAL_RCC_GetSysClockFreq+0x32>
 80048ca:	2b08      	cmp	r3, #8
 80048cc:	d008      	beq.n	80048e0 <HAL_RCC_GetSysClockFreq+0x38>
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f040 808d 	bne.w	80049ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048d4:	4b4b      	ldr	r3, [pc, #300]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x15c>)
 80048d6:	60bb      	str	r3, [r7, #8]
      break;
 80048d8:	e08c      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048da:	4b4b      	ldr	r3, [pc, #300]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x160>)
 80048dc:	60bb      	str	r3, [r7, #8]
      break;
 80048de:	e089      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e0:	4b47      	ldr	r3, [pc, #284]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x158>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048e8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80048ea:	4b45      	ldr	r3, [pc, #276]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x158>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d023      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048f6:	4b42      	ldr	r3, [pc, #264]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x158>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	099b      	lsrs	r3, r3, #6
 80048fc:	f04f 0400 	mov.w	r4, #0
 8004900:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004904:	f04f 0200 	mov.w	r2, #0
 8004908:	ea03 0501 	and.w	r5, r3, r1
 800490c:	ea04 0602 	and.w	r6, r4, r2
 8004910:	4a3d      	ldr	r2, [pc, #244]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004912:	fb02 f106 	mul.w	r1, r2, r6
 8004916:	2200      	movs	r2, #0
 8004918:	fb02 f205 	mul.w	r2, r2, r5
 800491c:	440a      	add	r2, r1
 800491e:	493a      	ldr	r1, [pc, #232]	; (8004a08 <HAL_RCC_GetSysClockFreq+0x160>)
 8004920:	fba5 0101 	umull	r0, r1, r5, r1
 8004924:	1853      	adds	r3, r2, r1
 8004926:	4619      	mov	r1, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f04f 0400 	mov.w	r4, #0
 800492e:	461a      	mov	r2, r3
 8004930:	4623      	mov	r3, r4
 8004932:	f7fb fcdd 	bl	80002f0 <__aeabi_uldivmod>
 8004936:	4603      	mov	r3, r0
 8004938:	460c      	mov	r4, r1
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	e049      	b.n	80049d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800493e:	4b30      	ldr	r3, [pc, #192]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x158>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	099b      	lsrs	r3, r3, #6
 8004944:	f04f 0400 	mov.w	r4, #0
 8004948:	f240 11ff 	movw	r1, #511	; 0x1ff
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	ea03 0501 	and.w	r5, r3, r1
 8004954:	ea04 0602 	and.w	r6, r4, r2
 8004958:	4629      	mov	r1, r5
 800495a:	4632      	mov	r2, r6
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	f04f 0400 	mov.w	r4, #0
 8004964:	0154      	lsls	r4, r2, #5
 8004966:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800496a:	014b      	lsls	r3, r1, #5
 800496c:	4619      	mov	r1, r3
 800496e:	4622      	mov	r2, r4
 8004970:	1b49      	subs	r1, r1, r5
 8004972:	eb62 0206 	sbc.w	r2, r2, r6
 8004976:	f04f 0300 	mov.w	r3, #0
 800497a:	f04f 0400 	mov.w	r4, #0
 800497e:	0194      	lsls	r4, r2, #6
 8004980:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004984:	018b      	lsls	r3, r1, #6
 8004986:	1a5b      	subs	r3, r3, r1
 8004988:	eb64 0402 	sbc.w	r4, r4, r2
 800498c:	f04f 0100 	mov.w	r1, #0
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	00e2      	lsls	r2, r4, #3
 8004996:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800499a:	00d9      	lsls	r1, r3, #3
 800499c:	460b      	mov	r3, r1
 800499e:	4614      	mov	r4, r2
 80049a0:	195b      	adds	r3, r3, r5
 80049a2:	eb44 0406 	adc.w	r4, r4, r6
 80049a6:	f04f 0100 	mov.w	r1, #0
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	02a2      	lsls	r2, r4, #10
 80049b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80049b4:	0299      	lsls	r1, r3, #10
 80049b6:	460b      	mov	r3, r1
 80049b8:	4614      	mov	r4, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	4621      	mov	r1, r4
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f04f 0400 	mov.w	r4, #0
 80049c4:	461a      	mov	r2, r3
 80049c6:	4623      	mov	r3, r4
 80049c8:	f7fb fc92 	bl	80002f0 <__aeabi_uldivmod>
 80049cc:	4603      	mov	r3, r0
 80049ce:	460c      	mov	r4, r1
 80049d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049d2:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <HAL_RCC_GetSysClockFreq+0x158>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	0c1b      	lsrs	r3, r3, #16
 80049d8:	f003 0303 	and.w	r3, r3, #3
 80049dc:	3301      	adds	r3, #1
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ea:	60bb      	str	r3, [r7, #8]
      break;
 80049ec:	e002      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80049ee:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <HAL_RCC_GetSysClockFreq+0x15c>)
 80049f0:	60bb      	str	r3, [r7, #8]
      break;
 80049f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049f4:	68bb      	ldr	r3, [r7, #8]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40023800 	.word	0x40023800
 8004a04:	00f42400 	.word	0x00f42400
 8004a08:	00989680 	.word	0x00989680

08004a0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a10:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a12:	681b      	ldr	r3, [r3, #0]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	20000004 	.word	0x20000004

08004a24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a28:	f7ff fff0 	bl	8004a0c <HAL_RCC_GetHCLKFreq>
 8004a2c:	4601      	mov	r1, r0
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	0a9b      	lsrs	r3, r3, #10
 8004a34:	f003 0307 	and.w	r3, r3, #7
 8004a38:	4a03      	ldr	r2, [pc, #12]	; (8004a48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a3a:	5cd3      	ldrb	r3, [r2, r3]
 8004a3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40023800 	.word	0x40023800
 8004a48:	08009440 	.word	0x08009440

08004a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a50:	f7ff ffdc 	bl	8004a0c <HAL_RCC_GetHCLKFreq>
 8004a54:	4601      	mov	r1, r0
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	0b5b      	lsrs	r3, r3, #13
 8004a5c:	f003 0307 	and.w	r3, r3, #7
 8004a60:	4a03      	ldr	r2, [pc, #12]	; (8004a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a62:	5cd3      	ldrb	r3, [r2, r3]
 8004a64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	40023800 	.word	0x40023800
 8004a70:	08009440 	.word	0x08009440

08004a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b088      	sub	sp, #32
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d012      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a9c:	4b69      	ldr	r3, [pc, #420]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	4a68      	ldr	r2, [pc, #416]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aa2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004aa6:	6093      	str	r3, [r2, #8]
 8004aa8:	4b66      	ldr	r3, [pc, #408]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab0:	4964      	ldr	r1, [pc, #400]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d017      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ace:	4b5d      	ldr	r3, [pc, #372]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ad4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004adc:	4959      	ldr	r1, [pc, #356]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aec:	d101      	bne.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004afa:	2301      	movs	r3, #1
 8004afc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d017      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b0a:	4b4e      	ldr	r3, [pc, #312]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b18:	494a      	ldr	r1, [pc, #296]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b28:	d101      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004b36:	2301      	movs	r3, #1
 8004b38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004b46:	2301      	movs	r3, #1
 8004b48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f000 808b 	beq.w	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b58:	4b3a      	ldr	r3, [pc, #232]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	4a39      	ldr	r2, [pc, #228]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b62:	6413      	str	r3, [r2, #64]	; 0x40
 8004b64:	4b37      	ldr	r3, [pc, #220]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	60bb      	str	r3, [r7, #8]
 8004b6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b70:	4b35      	ldr	r3, [pc, #212]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a34      	ldr	r2, [pc, #208]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b7c:	f7fd feca 	bl	8002914 <HAL_GetTick>
 8004b80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b84:	f7fd fec6 	bl	8002914 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e38d      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004b96:	4b2c      	ldr	r3, [pc, #176]	; (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ba2:	4b28      	ldr	r3, [pc, #160]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004baa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d035      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d02e      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bc0:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bc8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bca:	4b1e      	ldr	r3, [pc, #120]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a1d      	ldr	r2, [pc, #116]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bd6:	4b1b      	ldr	r3, [pc, #108]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004be2:	4a18      	ldr	r2, [pc, #96]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004be8:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d114      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf4:	f7fd fe8e 	bl	8002914 <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7fd fe8a 	bl	8002914 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e34f      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c12:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ee      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c2a:	d111      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004c2c:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c38:	4b04      	ldr	r3, [pc, #16]	; (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004c3a:	400b      	ands	r3, r1
 8004c3c:	4901      	ldr	r1, [pc, #4]	; (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	608b      	str	r3, [r1, #8]
 8004c42:	e00b      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004c44:	40023800 	.word	0x40023800
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	0ffffcff 	.word	0x0ffffcff
 8004c50:	4bb3      	ldr	r3, [pc, #716]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	4ab2      	ldr	r2, [pc, #712]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c5a:	6093      	str	r3, [r2, #8]
 8004c5c:	4bb0      	ldr	r3, [pc, #704]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c68:	49ad      	ldr	r1, [pc, #692]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0310 	and.w	r3, r3, #16
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d010      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c7a:	4ba9      	ldr	r3, [pc, #676]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c80:	4aa7      	ldr	r2, [pc, #668]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004c8a:	4ba5      	ldr	r3, [pc, #660]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	49a2      	ldr	r1, [pc, #648]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ca8:	4b9d      	ldr	r3, [pc, #628]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cb6:	499a      	ldr	r1, [pc, #616]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cca:	4b95      	ldr	r3, [pc, #596]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004cd8:	4991      	ldr	r1, [pc, #580]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cec:	4b8c      	ldr	r3, [pc, #560]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cfa:	4989      	ldr	r1, [pc, #548]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d0e:	4b84      	ldr	r3, [pc, #528]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	4980      	ldr	r1, [pc, #512]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d30:	4b7b      	ldr	r3, [pc, #492]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f023 0203 	bic.w	r2, r3, #3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3e:	4978      	ldr	r1, [pc, #480]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d52:	4b73      	ldr	r3, [pc, #460]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	f023 020c 	bic.w	r2, r3, #12
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d60:	496f      	ldr	r1, [pc, #444]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d74:	4b6a      	ldr	r3, [pc, #424]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d82:	4967      	ldr	r1, [pc, #412]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00a      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d96:	4b62      	ldr	r3, [pc, #392]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da4:	495e      	ldr	r1, [pc, #376]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004db8:	4b59      	ldr	r3, [pc, #356]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc6:	4956      	ldr	r1, [pc, #344]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004dda:	4b51      	ldr	r3, [pc, #324]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de8:	494d      	ldr	r1, [pc, #308]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004dfc:	4b48      	ldr	r3, [pc, #288]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0a:	4945      	ldr	r1, [pc, #276]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004e1e:	4b40      	ldr	r3, [pc, #256]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e2c:	493c      	ldr	r1, [pc, #240]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e40:	4b37      	ldr	r3, [pc, #220]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e4e:	4934      	ldr	r1, [pc, #208]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d011      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004e62:	4b2f      	ldr	r3, [pc, #188]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e70:	492b      	ldr	r1, [pc, #172]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e80:	d101      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004e82:	2301      	movs	r3, #1
 8004e84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004e92:	2301      	movs	r3, #1
 8004e94:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ea2:	4b1f      	ldr	r3, [pc, #124]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb0:	491b      	ldr	r1, [pc, #108]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00b      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ec4:	4b16      	ldr	r3, [pc, #88]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed4:	4912      	ldr	r1, [pc, #72]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00b      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eee:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ef8:	4909      	ldr	r1, [pc, #36]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00f      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	e002      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004f1e:	bf00      	nop
 8004f20:	40023800 	.word	0x40023800
 8004f24:	4985      	ldr	r1, [pc, #532]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00b      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004f38:	4b80      	ldr	r3, [pc, #512]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f48:	497c      	ldr	r1, [pc, #496]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d005      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f5e:	f040 80d6 	bne.w	800510e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004f62:	4b76      	ldr	r3, [pc, #472]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a75      	ldr	r2, [pc, #468]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6e:	f7fd fcd1 	bl	8002914 <HAL_GetTick>
 8004f72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f76:	f7fd fccd 	bl	8002914 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b64      	cmp	r3, #100	; 0x64
 8004f82:	d901      	bls.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e194      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004f88:	4b6c      	ldr	r3, [pc, #432]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f0      	bne.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d021      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d11d      	bne.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004fa8:	4b64      	ldr	r3, [pc, #400]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fae:	0c1b      	lsrs	r3, r3, #16
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004fb6:	4b61      	ldr	r3, [pc, #388]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fbc:	0e1b      	lsrs	r3, r3, #24
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	019a      	lsls	r2, r3, #6
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	041b      	lsls	r3, r3, #16
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	061b      	lsls	r3, r3, #24
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	071b      	lsls	r3, r3, #28
 8004fdc:	4957      	ldr	r1, [pc, #348]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d004      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ff4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ff8:	d00a      	beq.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02e      	beq.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800500e:	d129      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005010:	4b4a      	ldr	r3, [pc, #296]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005016:	0c1b      	lsrs	r3, r3, #16
 8005018:	f003 0303 	and.w	r3, r3, #3
 800501c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800501e:	4b47      	ldr	r3, [pc, #284]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005024:	0f1b      	lsrs	r3, r3, #28
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	019a      	lsls	r2, r3, #6
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	041b      	lsls	r3, r3, #16
 8005036:	431a      	orrs	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	061b      	lsls	r3, r3, #24
 800503e:	431a      	orrs	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	071b      	lsls	r3, r3, #28
 8005044:	493d      	ldr	r1, [pc, #244]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005046:	4313      	orrs	r3, r2
 8005048:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800504c:	4b3b      	ldr	r3, [pc, #236]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800504e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005052:	f023 021f 	bic.w	r2, r3, #31
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505a:	3b01      	subs	r3, #1
 800505c:	4937      	ldr	r1, [pc, #220]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800505e:	4313      	orrs	r3, r2
 8005060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01d      	beq.n	80050ac <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005070:	4b32      	ldr	r3, [pc, #200]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005076:	0e1b      	lsrs	r3, r3, #24
 8005078:	f003 030f 	and.w	r3, r3, #15
 800507c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800507e:	4b2f      	ldr	r3, [pc, #188]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005080:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005084:	0f1b      	lsrs	r3, r3, #28
 8005086:	f003 0307 	and.w	r3, r3, #7
 800508a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	019a      	lsls	r2, r3, #6
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	041b      	lsls	r3, r3, #16
 8005098:	431a      	orrs	r2, r3
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	061b      	lsls	r3, r3, #24
 800509e:	431a      	orrs	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	071b      	lsls	r3, r3, #28
 80050a4:	4925      	ldr	r1, [pc, #148]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d011      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	019a      	lsls	r2, r3, #6
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	041b      	lsls	r3, r3, #16
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	061b      	lsls	r3, r3, #24
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	071b      	lsls	r3, r3, #28
 80050d4:	4919      	ldr	r1, [pc, #100]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050dc:	4b17      	ldr	r3, [pc, #92]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a16      	ldr	r2, [pc, #88]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80050e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e8:	f7fd fc14 	bl	8002914 <HAL_GetTick>
 80050ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050ee:	e008      	b.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050f0:	f7fd fc10 	bl	8002914 <HAL_GetTick>
 80050f4:	4602      	mov	r2, r0
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b64      	cmp	r3, #100	; 0x64
 80050fc:	d901      	bls.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e0d7      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005102:	4b0e      	ldr	r3, [pc, #56]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d0f0      	beq.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b01      	cmp	r3, #1
 8005112:	f040 80cd 	bne.w	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005116:	4b09      	ldr	r3, [pc, #36]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a08      	ldr	r2, [pc, #32]	; (800513c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800511c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005120:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005122:	f7fd fbf7 	bl	8002914 <HAL_GetTick>
 8005126:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005128:	e00a      	b.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800512a:	f7fd fbf3 	bl	8002914 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b64      	cmp	r3, #100	; 0x64
 8005136:	d903      	bls.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e0ba      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800513c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005140:	4b5e      	ldr	r3, [pc, #376]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800514c:	d0ed      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515e:	2b00      	cmp	r3, #0
 8005160:	d009      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800516a:	2b00      	cmp	r3, #0
 800516c:	d02e      	beq.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	2b00      	cmp	r3, #0
 8005174:	d12a      	bne.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005176:	4b51      	ldr	r3, [pc, #324]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	0c1b      	lsrs	r3, r3, #16
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005184:	4b4d      	ldr	r3, [pc, #308]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518a:	0f1b      	lsrs	r3, r3, #28
 800518c:	f003 0307 	and.w	r3, r3, #7
 8005190:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	019a      	lsls	r2, r3, #6
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	041b      	lsls	r3, r3, #16
 800519c:	431a      	orrs	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	061b      	lsls	r3, r3, #24
 80051a4:	431a      	orrs	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	071b      	lsls	r3, r3, #28
 80051aa:	4944      	ldr	r1, [pc, #272]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80051b2:	4b42      	ldr	r3, [pc, #264]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	3b01      	subs	r3, #1
 80051c2:	021b      	lsls	r3, r3, #8
 80051c4:	493d      	ldr	r1, [pc, #244]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d022      	beq.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051e0:	d11d      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80051e2:	4b36      	ldr	r3, [pc, #216]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e8:	0e1b      	lsrs	r3, r3, #24
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80051f0:	4b32      	ldr	r3, [pc, #200]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80051f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051f6:	0f1b      	lsrs	r3, r3, #28
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	019a      	lsls	r2, r3, #6
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a1b      	ldr	r3, [r3, #32]
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	431a      	orrs	r2, r3
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	061b      	lsls	r3, r3, #24
 8005210:	431a      	orrs	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	071b      	lsls	r3, r3, #28
 8005216:	4929      	ldr	r1, [pc, #164]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005218:	4313      	orrs	r3, r2
 800521a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0308 	and.w	r3, r3, #8
 8005226:	2b00      	cmp	r3, #0
 8005228:	d028      	beq.n	800527c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800522a:	4b24      	ldr	r3, [pc, #144]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800522c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005230:	0e1b      	lsrs	r3, r3, #24
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005238:	4b20      	ldr	r3, [pc, #128]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800523e:	0c1b      	lsrs	r3, r3, #16
 8005240:	f003 0303 	and.w	r3, r3, #3
 8005244:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	695b      	ldr	r3, [r3, #20]
 800524a:	019a      	lsls	r2, r3, #6
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	041b      	lsls	r3, r3, #16
 8005250:	431a      	orrs	r2, r3
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	061b      	lsls	r3, r3, #24
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	071b      	lsls	r3, r3, #28
 800525e:	4917      	ldr	r1, [pc, #92]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005266:	4b15      	ldr	r3, [pc, #84]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800526c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005274:	4911      	ldr	r1, [pc, #68]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800527c:	4b0f      	ldr	r3, [pc, #60]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a0e      	ldr	r2, [pc, #56]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005286:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005288:	f7fd fb44 	bl	8002914 <HAL_GetTick>
 800528c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800528e:	e008      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005290:	f7fd fb40 	bl	8002914 <HAL_GetTick>
 8005294:	4602      	mov	r2, r0
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	2b64      	cmp	r3, #100	; 0x64
 800529c:	d901      	bls.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e007      	b.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80052a2:	4b06      	ldr	r3, [pc, #24]	; (80052bc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ae:	d1ef      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3720      	adds	r7, #32
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	40023800 	.word	0x40023800

080052c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e084      	b.n	80053dc <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d106      	bne.n	80052f2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7fc fe15 	bl	8001f1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005308:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005312:	d902      	bls.n	800531a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005314:	2300      	movs	r3, #0
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e002      	b.n	8005320 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800531a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800531e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005328:	d007      	beq.n	800533a <HAL_SPI_Init+0x7a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005332:	d002      	beq.n	800533a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800534a:	d903      	bls.n	8005354 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	631a      	str	r2, [r3, #48]	; 0x30
 8005352:	e002      	b.n	800535a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	431a      	orrs	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	431a      	orrs	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	ea42 0103 	orr.w	r1, r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	0c1b      	lsrs	r3, r3, #16
 800539a:	f003 0204 	and.w	r2, r3, #4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	431a      	orrs	r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a8:	431a      	orrs	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	ea42 0103 	orr.w	r1, r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80053f2:	2300      	movs	r3, #0
 80053f4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d110      	bne.n	8005420 <HAL_SPI_Receive_DMA+0x3c>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005406:	d10b      	bne.n	8005420 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2204      	movs	r2, #4
 800540c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 f900 	bl	800561c <HAL_SPI_TransmitReceive_DMA>
 800541c:	4603      	mov	r3, r0
 800541e:	e0f3      	b.n	8005608 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_SPI_Receive_DMA+0x4a>
 800542a:	2302      	movs	r3, #2
 800542c:	e0ec      	b.n	8005608 <HAL_SPI_Receive_DMA+0x224>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b01      	cmp	r3, #1
 8005440:	d002      	beq.n	8005448 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005442:	2302      	movs	r3, #2
 8005444:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005446:	e0da      	b.n	80055fe <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d002      	beq.n	8005454 <HAL_SPI_Receive_DMA+0x70>
 800544e:	88fb      	ldrh	r3, [r7, #6]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d102      	bne.n	800545a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005458:	e0d1      	b.n	80055fe <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2204      	movs	r2, #4
 800545e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	88fa      	ldrh	r2, [r7, #6]
 8005472:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	88fa      	ldrh	r2, [r7, #6]
 800547a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549e:	d107      	bne.n	80054b0 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80054ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054be:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054c8:	d908      	bls.n	80054dc <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054d8:	605a      	str	r2, [r3, #4]
 80054da:	e042      	b.n	8005562 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054ea:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054f6:	d134      	bne.n	8005562 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005506:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800550e:	b29b      	uxth	r3, r3
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b00      	cmp	r3, #0
 8005516:	d111      	bne.n	800553c <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005526:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800552e:	b29b      	uxth	r3, r3
 8005530:	085b      	lsrs	r3, r3, #1
 8005532:	b29a      	uxth	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800553a:	e012      	b.n	8005562 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800554a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005552:	b29b      	uxth	r3, r3
 8005554:	085b      	lsrs	r3, r3, #1
 8005556:	b29b      	uxth	r3, r3
 8005558:	3301      	adds	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005566:	4a2a      	ldr	r2, [pc, #168]	; (8005610 <HAL_SPI_Receive_DMA+0x22c>)
 8005568:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556e:	4a29      	ldr	r2, [pc, #164]	; (8005614 <HAL_SPI_Receive_DMA+0x230>)
 8005570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005576:	4a28      	ldr	r2, [pc, #160]	; (8005618 <HAL_SPI_Receive_DMA+0x234>)
 8005578:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800557e:	2200      	movs	r2, #0
 8005580:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	4619      	mov	r1, r3
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	461a      	mov	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800559a:	b29b      	uxth	r3, r3
 800559c:	f7fd ffb4 	bl	8003508 <HAL_DMA_Start_IT>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00c      	beq.n	80055c0 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055aa:	f043 0210 	orr.w	r2, r3, #16
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80055be:	e01e      	b.n	80055fe <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ca:	2b40      	cmp	r3, #64	; 0x40
 80055cc:	d007      	beq.n	80055de <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055dc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f042 0220 	orr.w	r2, r2, #32
 80055ec:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0201 	orr.w	r2, r2, #1
 80055fc:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005606:	7dfb      	ldrb	r3, [r7, #23]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3718      	adds	r7, #24
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	08005a9d 	.word	0x08005a9d
 8005614:	08005985 	.word	0x08005985
 8005618:	08005ad5 	.word	0x08005ad5

0800561c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b086      	sub	sp, #24
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_SPI_TransmitReceive_DMA+0x20>
 8005638:	2302      	movs	r3, #2
 800563a:	e16c      	b.n	8005916 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800564a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005652:	7dbb      	ldrb	r3, [r7, #22]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d00d      	beq.n	8005674 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800565e:	d106      	bne.n	800566e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d102      	bne.n	800566e <HAL_SPI_TransmitReceive_DMA+0x52>
 8005668:	7dbb      	ldrb	r3, [r7, #22]
 800566a:	2b04      	cmp	r3, #4
 800566c:	d002      	beq.n	8005674 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800566e:	2302      	movs	r3, #2
 8005670:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005672:	e14b      	b.n	800590c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005680:	887b      	ldrh	r3, [r7, #2]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d102      	bne.n	800568c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
    goto error;
 800568a:	e13f      	b.n	800590c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b04      	cmp	r3, #4
 8005696:	d003      	beq.n	80056a0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2205      	movs	r2, #5
 800569c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2200      	movs	r2, #0
 80056a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	68ba      	ldr	r2, [r7, #8]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	887a      	ldrh	r2, [r7, #2]
 80056b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	887a      	ldrh	r2, [r7, #2]
 80056b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	887a      	ldrh	r2, [r7, #2]
 80056c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	887a      	ldrh	r2, [r7, #2]
 80056ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80056e8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056f2:	d908      	bls.n	8005706 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685a      	ldr	r2, [r3, #4]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005702:	605a      	str	r2, [r3, #4]
 8005704:	e06f      	b.n	80057e6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005714:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005720:	d126      	bne.n	8005770 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10f      	bne.n	800574e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800573c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005742:	b29b      	uxth	r3, r3
 8005744:	085b      	lsrs	r3, r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800574c:	e010      	b.n	8005770 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800575c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005762:	b29b      	uxth	r3, r3
 8005764:	085b      	lsrs	r3, r3, #1
 8005766:	b29b      	uxth	r3, r3
 8005768:	3301      	adds	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005774:	699b      	ldr	r3, [r3, #24]
 8005776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577a:	d134      	bne.n	80057e6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800578a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005792:	b29b      	uxth	r3, r3
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d111      	bne.n	80057c0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057aa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	085b      	lsrs	r3, r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057be:	e012      	b.n	80057e6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057ce:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	085b      	lsrs	r3, r3, #1
 80057da:	b29b      	uxth	r3, r3
 80057dc:	3301      	adds	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b04      	cmp	r3, #4
 80057f0:	d108      	bne.n	8005804 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f6:	4a4a      	ldr	r2, [pc, #296]	; (8005920 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	4a49      	ldr	r2, [pc, #292]	; (8005924 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8005800:	63da      	str	r2, [r3, #60]	; 0x3c
 8005802:	e007      	b.n	8005814 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005808:	4a47      	ldr	r2, [pc, #284]	; (8005928 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800580a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005810:	4a46      	ldr	r2, [pc, #280]	; (800592c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8005812:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005818:	4a45      	ldr	r2, [pc, #276]	; (8005930 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800581a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005820:	2200      	movs	r2, #0
 8005822:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	330c      	adds	r3, #12
 800582e:	4619      	mov	r1, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	461a      	mov	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800583c:	b29b      	uxth	r3, r3
 800583e:	f7fd fe63 	bl	8003508 <HAL_DMA_Start_IT>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00c      	beq.n	8005862 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800584c:	f043 0210 	orr.w	r2, r3, #16
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005860:	e054      	b.n	800590c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f042 0201 	orr.w	r2, r2, #1
 8005870:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005876:	2200      	movs	r2, #0
 8005878:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587e:	2200      	movs	r2, #0
 8005880:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005886:	2200      	movs	r2, #0
 8005888:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	2200      	movs	r2, #0
 8005890:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	4619      	mov	r1, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	330c      	adds	r3, #12
 80058a2:	461a      	mov	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	f7fd fe2d 	bl	8003508 <HAL_DMA_Start_IT>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00c      	beq.n	80058ce <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058b8:	f043 0210 	orr.w	r2, r3, #16
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80058cc:	e01e      	b.n	800590c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d8:	2b40      	cmp	r3, #64	; 0x40
 80058da:	d007      	beq.n	80058ec <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058ea:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0220 	orr.w	r2, r2, #32
 80058fa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f042 0202 	orr.w	r2, r2, #2
 800590a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005914:	7dfb      	ldrb	r3, [r7, #23]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3718      	adds	r7, #24
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	08005a9d 	.word	0x08005a9d
 8005924:	08005985 	.word	0x08005985
 8005928:	08005ab9 	.word	0x08005ab9
 800592c:	08005a0b 	.word	0x08005a0b
 8005930:	08005ad5 	.word	0x08005ad5

08005934 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005992:	f7fc ffbf 	bl	8002914 <HAL_GetTick>
 8005996:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a6:	d02a      	beq.n	80059fe <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	685a      	ldr	r2, [r3, #4]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 0220 	bic.w	r2, r2, #32
 80059b6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f022 0203 	bic.w	r2, r2, #3
 80059c6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80059c8:	68ba      	ldr	r2, [r7, #8]
 80059ca:	2164      	movs	r1, #100	; 0x64
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f978 	bl	8005cc2 <SPI_EndRxTransaction>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80059f6:	68f8      	ldr	r0, [r7, #12]
 80059f8:	f7ff ffba 	bl	8005970 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80059fc:	e002      	b.n	8005a04 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7fc f902 	bl	8001c08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a18:	f7fc ff7c 	bl	8002914 <HAL_GetTick>
 8005a1c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a2c:	d030      	beq.n	8005a90 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0220 	bic.w	r2, r2, #32
 8005a3c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	2164      	movs	r1, #100	; 0x64
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 f995 	bl	8005d72 <SPI_EndRxTxTransaction>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0203 	bic.w	r2, r2, #3
 8005a68:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d003      	beq.n	8005a90 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f7ff ff71 	bl	8005970 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005a8e:	e002      	b.n	8005a96 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f7ff ff4f 	bl	8005934 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f7ff ff4c 	bl	8005948 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7ff ff48 	bl	800595c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005acc:	bf00      	nop
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685a      	ldr	r2, [r3, #4]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0203 	bic.w	r2, r2, #3
 8005af0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005af6:	f043 0210 	orr.w	r2, r3, #16
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff ff32 	bl	8005970 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005b0c:	bf00      	nop
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	4613      	mov	r3, r2
 8005b22:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b24:	e04c      	b.n	8005bc0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d048      	beq.n	8005bc0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005b2e:	f7fc fef1 	bl	8002914 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d902      	bls.n	8005b44 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d13d      	bne.n	8005bc0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b52:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b5c:	d111      	bne.n	8005b82 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b66:	d004      	beq.n	8005b72 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b70:	d107      	bne.n	8005b82 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b80:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8a:	d10f      	bne.n	8005bac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005baa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005bbc:	2303      	movs	r3, #3
 8005bbe:	e00f      	b.n	8005be0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	4013      	ands	r3, r2
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	bf0c      	ite	eq
 8005bd0:	2301      	moveq	r3, #1
 8005bd2:	2300      	movne	r3, #0
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	79fb      	ldrb	r3, [r7, #7]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d1a3      	bne.n	8005b26 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005bde:	2300      	movs	r3, #0
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	607a      	str	r2, [r7, #4]
 8005bf4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005bf6:	e057      	b.n	8005ca8 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005bfe:	d106      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0x26>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d103      	bne.n	8005c0e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c14:	d048      	beq.n	8005ca8 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005c16:	f7fc fe7d 	bl	8002914 <HAL_GetTick>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d902      	bls.n	8005c2c <SPI_WaitFifoStateUntilTimeout+0x44>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d13d      	bne.n	8005ca8 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c3a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c44:	d111      	bne.n	8005c6a <SPI_WaitFifoStateUntilTimeout+0x82>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c4e:	d004      	beq.n	8005c5a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c58:	d107      	bne.n	8005c6a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c72:	d10f      	bne.n	8005c94 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c92:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e008      	b.n	8005cba <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	689a      	ldr	r2, [r3, #8]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d19f      	bne.n	8005bf8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b086      	sub	sp, #24
 8005cc6:	af02      	add	r7, sp, #8
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd6:	d111      	bne.n	8005cfc <SPI_EndRxTransaction+0x3a>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce0:	d004      	beq.n	8005cec <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cea:	d107      	bne.n	8005cfc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfa:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2200      	movs	r2, #0
 8005d04:	2180      	movs	r1, #128	; 0x80
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7ff ff04 	bl	8005b14 <SPI_WaitFlagStateUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d16:	f043 0220 	orr.w	r2, r3, #32
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e023      	b.n	8005d6a <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d2a:	d11d      	bne.n	8005d68 <SPI_EndRxTransaction+0xa6>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d34:	d004      	beq.n	8005d40 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d3e:	d113      	bne.n	8005d68 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff ff4b 	bl	8005be8 <SPI_WaitFifoStateUntilTimeout>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5c:	f043 0220 	orr.w	r2, r3, #32
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e000      	b.n	8005d6a <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b086      	sub	sp, #24
 8005d76:	af02      	add	r7, sp, #8
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f7ff ff2c 	bl	8005be8 <SPI_WaitFifoStateUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d007      	beq.n	8005da6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d9a:	f043 0220 	orr.w	r2, r3, #32
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005da2:	2303      	movs	r3, #3
 8005da4:	e027      	b.n	8005df6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2200      	movs	r2, #0
 8005dae:	2180      	movs	r1, #128	; 0x80
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f7ff feaf 	bl	8005b14 <SPI_WaitFlagStateUntilTimeout>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d007      	beq.n	8005dcc <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc0:	f043 0220 	orr.w	r2, r3, #32
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	e014      	b.n	8005df6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7ff ff05 	bl	8005be8 <SPI_WaitFifoStateUntilTimeout>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d007      	beq.n	8005df4 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de8:	f043 0220 	orr.w	r2, r3, #32
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e000      	b.n	8005df6 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e01d      	b.n	8005e4c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d106      	bne.n	8005e2a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7fc f923 	bl	8002070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f001 f827 	bl	8006e90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3708      	adds	r7, #8
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	689a      	ldr	r2, [r3, #8]
 8005e72:	4b0c      	ldr	r3, [pc, #48]	; (8005ea4 <HAL_TIM_Base_Start_IT+0x50>)
 8005e74:	4013      	ands	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b06      	cmp	r3, #6
 8005e7c:	d00b      	beq.n	8005e96 <HAL_TIM_Base_Start_IT+0x42>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e84:	d007      	beq.n	8005e96 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0201 	orr.w	r2, r2, #1
 8005e94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	00010007 	.word	0x00010007

08005ea8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68da      	ldr	r2, [r3, #12]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6a1a      	ldr	r2, [r3, #32]
 8005ec6:	f241 1311 	movw	r3, #4369	; 0x1111
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10f      	bne.n	8005ef0 <HAL_TIM_Base_Stop_IT+0x48>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	6a1a      	ldr	r2, [r3, #32]
 8005ed6:	f240 4344 	movw	r3, #1092	; 0x444
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d107      	bne.n	8005ef0 <HAL_TIM_Base_Stop_IT+0x48>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0201 	bic.w	r2, r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e01d      	b.n	8005f4c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fc f9b7 	bl	8002298 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	f000 ffa7 	bl	8006e90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3708      	adds	r7, #8
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	2b0c      	cmp	r3, #12
 8005f62:	d841      	bhi.n	8005fe8 <HAL_TIM_PWM_Start_IT+0x94>
 8005f64:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <HAL_TIM_PWM_Start_IT+0x18>)
 8005f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6a:	bf00      	nop
 8005f6c:	08005fa1 	.word	0x08005fa1
 8005f70:	08005fe9 	.word	0x08005fe9
 8005f74:	08005fe9 	.word	0x08005fe9
 8005f78:	08005fe9 	.word	0x08005fe9
 8005f7c:	08005fb3 	.word	0x08005fb3
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005fe9 	.word	0x08005fe9
 8005f88:	08005fe9 	.word	0x08005fe9
 8005f8c:	08005fc5 	.word	0x08005fc5
 8005f90:	08005fe9 	.word	0x08005fe9
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005fe9 	.word	0x08005fe9
 8005f9c:	08005fd7 	.word	0x08005fd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0202 	orr.w	r2, r2, #2
 8005fae:	60da      	str	r2, [r3, #12]
      break;
 8005fb0:	e01b      	b.n	8005fea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68da      	ldr	r2, [r3, #12]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0204 	orr.w	r2, r2, #4
 8005fc0:	60da      	str	r2, [r3, #12]
      break;
 8005fc2:	e012      	b.n	8005fea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0208 	orr.w	r2, r2, #8
 8005fd2:	60da      	str	r2, [r3, #12]
      break;
 8005fd4:	e009      	b.n	8005fea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0210 	orr.w	r2, r2, #16
 8005fe4:	60da      	str	r2, [r3, #12]
      break;
 8005fe6:	e000      	b.n	8005fea <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8005fe8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	6839      	ldr	r1, [r7, #0]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 fc96 	bl	8007924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a17      	ldr	r2, [pc, #92]	; (800605c <HAL_TIM_PWM_Start_IT+0x108>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d004      	beq.n	800600c <HAL_TIM_PWM_Start_IT+0xb8>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a16      	ldr	r2, [pc, #88]	; (8006060 <HAL_TIM_PWM_Start_IT+0x10c>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d101      	bne.n	8006010 <HAL_TIM_PWM_Start_IT+0xbc>
 800600c:	2301      	movs	r3, #1
 800600e:	e000      	b.n	8006012 <HAL_TIM_PWM_Start_IT+0xbe>
 8006010:	2300      	movs	r3, #0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006024:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <HAL_TIM_PWM_Start_IT+0x110>)
 800602e:	4013      	ands	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b06      	cmp	r3, #6
 8006036:	d00b      	beq.n	8006050 <HAL_TIM_PWM_Start_IT+0xfc>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603e:	d007      	beq.n	8006050 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f042 0201 	orr.w	r2, r2, #1
 800604e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40010000 	.word	0x40010000
 8006060:	40010400 	.word	0x40010400
 8006064:	00010007 	.word	0x00010007

08006068 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b0c      	cmp	r3, #12
 8006076:	d841      	bhi.n	80060fc <HAL_TIM_PWM_Stop_IT+0x94>
 8006078:	a201      	add	r2, pc, #4	; (adr r2, 8006080 <HAL_TIM_PWM_Stop_IT+0x18>)
 800607a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607e:	bf00      	nop
 8006080:	080060b5 	.word	0x080060b5
 8006084:	080060fd 	.word	0x080060fd
 8006088:	080060fd 	.word	0x080060fd
 800608c:	080060fd 	.word	0x080060fd
 8006090:	080060c7 	.word	0x080060c7
 8006094:	080060fd 	.word	0x080060fd
 8006098:	080060fd 	.word	0x080060fd
 800609c:	080060fd 	.word	0x080060fd
 80060a0:	080060d9 	.word	0x080060d9
 80060a4:	080060fd 	.word	0x080060fd
 80060a8:	080060fd 	.word	0x080060fd
 80060ac:	080060fd 	.word	0x080060fd
 80060b0:	080060eb 	.word	0x080060eb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68da      	ldr	r2, [r3, #12]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f022 0202 	bic.w	r2, r2, #2
 80060c2:	60da      	str	r2, [r3, #12]
      break;
 80060c4:	e01b      	b.n	80060fe <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0204 	bic.w	r2, r2, #4
 80060d4:	60da      	str	r2, [r3, #12]
      break;
 80060d6:	e012      	b.n	80060fe <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0208 	bic.w	r2, r2, #8
 80060e6:	60da      	str	r2, [r3, #12]
      break;
 80060e8:	e009      	b.n	80060fe <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0210 	bic.w	r2, r2, #16
 80060f8:	60da      	str	r2, [r3, #12]
      break;
 80060fa:	e000      	b.n	80060fe <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 80060fc:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2200      	movs	r2, #0
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	4618      	mov	r0, r3
 8006108:	f001 fc0c 	bl	8007924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a20      	ldr	r2, [pc, #128]	; (8006194 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_TIM_PWM_Stop_IT+0xb8>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1f      	ldr	r2, [pc, #124]	; (8006198 <HAL_TIM_PWM_Stop_IT+0x130>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d101      	bne.n	8006124 <HAL_TIM_PWM_Stop_IT+0xbc>
 8006120:	2301      	movs	r3, #1
 8006122:	e000      	b.n	8006126 <HAL_TIM_PWM_Stop_IT+0xbe>
 8006124:	2300      	movs	r3, #0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d017      	beq.n	800615a <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6a1a      	ldr	r2, [r3, #32]
 8006130:	f241 1311 	movw	r3, #4369	; 0x1111
 8006134:	4013      	ands	r3, r2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10f      	bne.n	800615a <HAL_TIM_PWM_Stop_IT+0xf2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	6a1a      	ldr	r2, [r3, #32]
 8006140:	f240 4344 	movw	r3, #1092	; 0x444
 8006144:	4013      	ands	r3, r2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d107      	bne.n	800615a <HAL_TIM_PWM_Stop_IT+0xf2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006158:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	6a1a      	ldr	r2, [r3, #32]
 8006160:	f241 1311 	movw	r3, #4369	; 0x1111
 8006164:	4013      	ands	r3, r2
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <HAL_TIM_PWM_Stop_IT+0x122>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	f240 4344 	movw	r3, #1092	; 0x444
 8006174:	4013      	ands	r3, r2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d107      	bne.n	800618a <HAL_TIM_PWM_Stop_IT+0x122>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 0201 	bic.w	r2, r2, #1
 8006188:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40010000 	.word	0x40010000
 8006198:	40010400 	.word	0x40010400

0800619c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b082      	sub	sp, #8
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e01d      	b.n	80061ea <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d106      	bne.n	80061c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f7fb ffea 	bl	800219c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4619      	mov	r1, r3
 80061da:	4610      	mov	r0, r2
 80061dc:	f000 fe58 	bl	8006e90 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
 8006200:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d101      	bne.n	8006212 <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800620e:	2302      	movs	r3, #2
 8006210:	e0e0      	b.n	80063d4 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b01      	cmp	r3, #1
 800621c:	d10b      	bne.n	8006236 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d104      	bne.n	800622e <HAL_TIM_IC_Start_DMA+0x3a>
 8006224:	887b      	ldrh	r3, [r7, #2]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e0d2      	b.n	80063d4 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2202      	movs	r2, #2
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b0c      	cmp	r3, #12
 800623a:	f200 80ad 	bhi.w	8006398 <HAL_TIM_IC_Start_DMA+0x1a4>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <HAL_TIM_IC_Start_DMA+0x50>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	08006279 	.word	0x08006279
 8006248:	08006399 	.word	0x08006399
 800624c:	08006399 	.word	0x08006399
 8006250:	08006399 	.word	0x08006399
 8006254:	080062c1 	.word	0x080062c1
 8006258:	08006399 	.word	0x08006399
 800625c:	08006399 	.word	0x08006399
 8006260:	08006399 	.word	0x08006399
 8006264:	08006309 	.word	0x08006309
 8006268:	08006399 	.word	0x08006399
 800626c:	08006399 	.word	0x08006399
 8006270:	08006399 	.word	0x08006399
 8006274:	08006351 	.word	0x08006351
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	4a57      	ldr	r2, [pc, #348]	; (80063dc <HAL_TIM_IC_Start_DMA+0x1e8>)
 800627e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	4a56      	ldr	r2, [pc, #344]	; (80063e0 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006286:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	4a55      	ldr	r2, [pc, #340]	; (80063e4 <HAL_TIM_IC_Start_DMA+0x1f0>)
 800628e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3334      	adds	r3, #52	; 0x34
 800629a:	4619      	mov	r1, r3
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	887b      	ldrh	r3, [r7, #2]
 80062a0:	f7fd f932 	bl	8003508 <HAL_DMA_Start_IT>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e092      	b.n	80063d4 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68da      	ldr	r2, [r3, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062bc:	60da      	str	r2, [r3, #12]
      break;
 80062be:	e06c      	b.n	800639a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c4:	4a45      	ldr	r2, [pc, #276]	; (80063dc <HAL_TIM_IC_Start_DMA+0x1e8>)
 80062c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062cc:	4a44      	ldr	r2, [pc, #272]	; (80063e0 <HAL_TIM_IC_Start_DMA+0x1ec>)
 80062ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d4:	4a43      	ldr	r2, [pc, #268]	; (80063e4 <HAL_TIM_IC_Start_DMA+0x1f0>)
 80062d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3338      	adds	r3, #56	; 0x38
 80062e2:	4619      	mov	r1, r3
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	887b      	ldrh	r3, [r7, #2]
 80062e8:	f7fd f90e 	bl	8003508 <HAL_DMA_Start_IT>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e06e      	b.n	80063d4 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68da      	ldr	r2, [r3, #12]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006304:	60da      	str	r2, [r3, #12]
      break;
 8006306:	e048      	b.n	800639a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	4a33      	ldr	r2, [pc, #204]	; (80063dc <HAL_TIM_IC_Start_DMA+0x1e8>)
 800630e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006314:	4a32      	ldr	r2, [pc, #200]	; (80063e0 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006316:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	4a31      	ldr	r2, [pc, #196]	; (80063e4 <HAL_TIM_IC_Start_DMA+0x1f0>)
 800631e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	333c      	adds	r3, #60	; 0x3c
 800632a:	4619      	mov	r1, r3
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	887b      	ldrh	r3, [r7, #2]
 8006330:	f7fd f8ea 	bl	8003508 <HAL_DMA_Start_IT>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e04a      	b.n	80063d4 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68da      	ldr	r2, [r3, #12]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800634c:	60da      	str	r2, [r3, #12]
      break;
 800634e:	e024      	b.n	800639a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006354:	4a21      	ldr	r2, [pc, #132]	; (80063dc <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006356:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635c:	4a20      	ldr	r2, [pc, #128]	; (80063e0 <HAL_TIM_IC_Start_DMA+0x1ec>)
 800635e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006364:	4a1f      	ldr	r2, [pc, #124]	; (80063e4 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006366:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3340      	adds	r3, #64	; 0x40
 8006372:	4619      	mov	r1, r3
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	887b      	ldrh	r3, [r7, #2]
 8006378:	f7fd f8c6 	bl	8003508 <HAL_DMA_Start_IT>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e026      	b.n	80063d4 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006394:	60da      	str	r2, [r3, #12]
      break;
 8006396:	e000      	b.n	800639a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8006398:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2201      	movs	r2, #1
 80063a0:	68b9      	ldr	r1, [r7, #8]
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 fabe 	bl	8007924 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	4b0e      	ldr	r3, [pc, #56]	; (80063e8 <HAL_TIM_IC_Start_DMA+0x1f4>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b06      	cmp	r3, #6
 80063b8:	d00b      	beq.n	80063d2 <HAL_TIM_IC_Start_DMA+0x1de>
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c0:	d007      	beq.n	80063d2 <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0201 	orr.w	r2, r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3718      	adds	r7, #24
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	08006db1 	.word	0x08006db1
 80063e0:	08006e21 	.word	0x08006e21
 80063e4:	08006d8d 	.word	0x08006d8d
 80063e8:	00010007 	.word	0x00010007

080063ec <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b0c      	cmp	r3, #12
 80063fa:	d855      	bhi.n	80064a8 <HAL_TIM_IC_Stop_DMA+0xbc>
 80063fc:	a201      	add	r2, pc, #4	; (adr r2, 8006404 <HAL_TIM_IC_Stop_DMA+0x18>)
 80063fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006402:	bf00      	nop
 8006404:	08006439 	.word	0x08006439
 8006408:	080064a9 	.word	0x080064a9
 800640c:	080064a9 	.word	0x080064a9
 8006410:	080064a9 	.word	0x080064a9
 8006414:	08006455 	.word	0x08006455
 8006418:	080064a9 	.word	0x080064a9
 800641c:	080064a9 	.word	0x080064a9
 8006420:	080064a9 	.word	0x080064a9
 8006424:	08006471 	.word	0x08006471
 8006428:	080064a9 	.word	0x080064a9
 800642c:	080064a9 	.word	0x080064a9
 8006430:	080064a9 	.word	0x080064a9
 8006434:	0800648d 	.word	0x0800648d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006446:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644c:	4618      	mov	r0, r3
 800644e:	f7fd f8bb 	bl	80035c8 <HAL_DMA_Abort_IT>
      break;
 8006452:	e02a      	b.n	80064aa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006462:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	4618      	mov	r0, r3
 800646a:	f7fd f8ad 	bl	80035c8 <HAL_DMA_Abort_IT>
      break;
 800646e:	e01c      	b.n	80064aa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800647e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006484:	4618      	mov	r0, r3
 8006486:	f7fd f89f 	bl	80035c8 <HAL_DMA_Abort_IT>
      break;
 800648a:	e00e      	b.n	80064aa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800649a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7fd f891 	bl	80035c8 <HAL_DMA_Abort_IT>
      break;
 80064a6:	e000      	b.n	80064aa <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 80064a8:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2200      	movs	r2, #0
 80064b0:	6839      	ldr	r1, [r7, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 fa36 	bl	8007924 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6a1a      	ldr	r2, [r3, #32]
 80064be:	f241 1311 	movw	r3, #4369	; 0x1111
 80064c2:	4013      	ands	r3, r2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10f      	bne.n	80064e8 <HAL_TIM_IC_Stop_DMA+0xfc>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	f240 4344 	movw	r3, #1092	; 0x444
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d107      	bne.n	80064e8 <HAL_TIM_IC_Stop_DMA+0xfc>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f022 0201 	bic.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop

080064fc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e02d      	b.n	800656c <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f825 	bl	8006574 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	3304      	adds	r3, #4
 800653a:	4619      	mov	r1, r3
 800653c:	4610      	mov	r0, r2
 800653e:	f000 fca7 	bl	8006e90 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f022 0208 	bic.w	r2, r2, #8
 8006550:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	6819      	ldr	r1, [r3, #0]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	430a      	orrs	r2, r1
 8006560:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b02      	cmp	r3, #2
 800659c:	d122      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0302 	and.w	r3, r3, #2
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d11b      	bne.n	80065e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0202 	mvn.w	r2, #2
 80065b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2201      	movs	r2, #1
 80065ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	f003 0303 	and.w	r3, r3, #3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f7fb f94c 	bl	8001868 <HAL_TIM_IC_CaptureCallback>
 80065d0:	e005      	b.n	80065de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fba8 	bl	8006d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fbb9 	bl	8006d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	2b04      	cmp	r3, #4
 80065f0:	d122      	bne.n	8006638 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f003 0304 	and.w	r3, r3, #4
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	d11b      	bne.n	8006638 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0204 	mvn.w	r2, #4
 8006608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2202      	movs	r2, #2
 800660e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fb f922 	bl	8001868 <HAL_TIM_IC_CaptureCallback>
 8006624:	e005      	b.n	8006632 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fb7e 	bl	8006d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fb8f 	bl	8006d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b08      	cmp	r3, #8
 8006644:	d122      	bne.n	800668c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b08      	cmp	r3, #8
 8006652:	d11b      	bne.n	800668c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0208 	mvn.w	r2, #8
 800665c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2204      	movs	r2, #4
 8006662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fb f8f8 	bl	8001868 <HAL_TIM_IC_CaptureCallback>
 8006678:	e005      	b.n	8006686 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fb54 	bl	8006d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fb65 	bl	8006d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b10      	cmp	r3, #16
 8006698:	d122      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b10      	cmp	r3, #16
 80066a6:	d11b      	bne.n	80066e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0210 	mvn.w	r2, #16
 80066b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2208      	movs	r2, #8
 80066b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	69db      	ldr	r3, [r3, #28]
 80066be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f7fb f8ce 	bl	8001868 <HAL_TIM_IC_CaptureCallback>
 80066cc:	e005      	b.n	80066da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 fb2a 	bl	8006d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fb3b 	bl	8006d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d10e      	bne.n	800670c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d107      	bne.n	800670c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0201 	mvn.w	r2, #1
 8006704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fa fffe 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006716:	2b80      	cmp	r3, #128	; 0x80
 8006718:	d10e      	bne.n	8006738 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006724:	2b80      	cmp	r3, #128	; 0x80
 8006726:	d107      	bne.n	8006738 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f001 fa32 	bl	8007b9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006746:	d10e      	bne.n	8006766 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006752:	2b80      	cmp	r3, #128	; 0x80
 8006754:	d107      	bne.n	8006766 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800675e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f001 fa25 	bl	8007bb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d10e      	bne.n	8006792 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800677e:	2b40      	cmp	r3, #64	; 0x40
 8006780:	d107      	bne.n	8006792 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800678a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fae9 	bl	8006d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	691b      	ldr	r3, [r3, #16]
 8006798:	f003 0320 	and.w	r3, r3, #32
 800679c:	2b20      	cmp	r3, #32
 800679e:	d10e      	bne.n	80067be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f003 0320 	and.w	r3, r3, #32
 80067aa:	2b20      	cmp	r3, #32
 80067ac:	d107      	bne.n	80067be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f06f 0220 	mvn.w	r2, #32
 80067b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f001 f9e5 	bl	8007b88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b084      	sub	sp, #16
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	60f8      	str	r0, [r7, #12]
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d101      	bne.n	80067e0 <HAL_TIM_IC_ConfigChannel+0x1a>
 80067dc:	2302      	movs	r3, #2
 80067de:	e08a      	b.n	80068f6 <HAL_TIM_IC_ConfigChannel+0x130>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2202      	movs	r2, #2
 80067ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d11b      	bne.n	800682e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	6819      	ldr	r1, [r3, #0]
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f000 fec9 	bl	800759c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699a      	ldr	r2, [r3, #24]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 020c 	bic.w	r2, r2, #12
 8006818:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6999      	ldr	r1, [r3, #24]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	689a      	ldr	r2, [r3, #8]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	619a      	str	r2, [r3, #24]
 800682c:	e05a      	b.n	80068e4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b04      	cmp	r3, #4
 8006832:	d11c      	bne.n	800686e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6818      	ldr	r0, [r3, #0]
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	6819      	ldr	r1, [r3, #0]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f000 ff4d 	bl	80076e2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006856:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	6999      	ldr	r1, [r3, #24]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	021a      	lsls	r2, r3, #8
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	619a      	str	r2, [r3, #24]
 800686c:	e03a      	b.n	80068e4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b08      	cmp	r3, #8
 8006872:	d11b      	bne.n	80068ac <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6818      	ldr	r0, [r3, #0]
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	6819      	ldr	r1, [r3, #0]
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f000 ff9a 	bl	80077bc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 020c 	bic.w	r2, r2, #12
 8006896:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	69d9      	ldr	r1, [r3, #28]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	689a      	ldr	r2, [r3, #8]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	61da      	str	r2, [r3, #28]
 80068aa:	e01b      	b.n	80068e4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	6819      	ldr	r1, [r3, #0]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	68db      	ldr	r3, [r3, #12]
 80068bc:	f000 ffba 	bl	8007834 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	69da      	ldr	r2, [r3, #28]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80068ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69d9      	ldr	r1, [r3, #28]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	021a      	lsls	r2, r3, #8
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006916:	2302      	movs	r3, #2
 8006918:	e105      	b.n	8006b26 <HAL_TIM_PWM_ConfigChannel+0x226>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2202      	movs	r2, #2
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b14      	cmp	r3, #20
 800692e:	f200 80f0 	bhi.w	8006b12 <HAL_TIM_PWM_ConfigChannel+0x212>
 8006932:	a201      	add	r2, pc, #4	; (adr r2, 8006938 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006938:	0800698d 	.word	0x0800698d
 800693c:	08006b13 	.word	0x08006b13
 8006940:	08006b13 	.word	0x08006b13
 8006944:	08006b13 	.word	0x08006b13
 8006948:	080069cd 	.word	0x080069cd
 800694c:	08006b13 	.word	0x08006b13
 8006950:	08006b13 	.word	0x08006b13
 8006954:	08006b13 	.word	0x08006b13
 8006958:	08006a0f 	.word	0x08006a0f
 800695c:	08006b13 	.word	0x08006b13
 8006960:	08006b13 	.word	0x08006b13
 8006964:	08006b13 	.word	0x08006b13
 8006968:	08006a4f 	.word	0x08006a4f
 800696c:	08006b13 	.word	0x08006b13
 8006970:	08006b13 	.word	0x08006b13
 8006974:	08006b13 	.word	0x08006b13
 8006978:	08006a91 	.word	0x08006a91
 800697c:	08006b13 	.word	0x08006b13
 8006980:	08006b13 	.word	0x08006b13
 8006984:	08006b13 	.word	0x08006b13
 8006988:	08006ad1 	.word	0x08006ad1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fb1c 	bl	8006fd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699a      	ldr	r2, [r3, #24]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0208 	orr.w	r2, r2, #8
 80069a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0204 	bic.w	r2, r2, #4
 80069b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6999      	ldr	r1, [r3, #24]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	691a      	ldr	r2, [r3, #16]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	619a      	str	r2, [r3, #24]
      break;
 80069ca:	e0a3      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fb6e 	bl	80070b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	699a      	ldr	r2, [r3, #24]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699a      	ldr	r2, [r3, #24]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6999      	ldr	r1, [r3, #24]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	021a      	lsls	r2, r3, #8
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	430a      	orrs	r2, r1
 8006a0a:	619a      	str	r2, [r3, #24]
      break;
 8006a0c:	e082      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fbc5 	bl	80071a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69da      	ldr	r2, [r3, #28]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f042 0208 	orr.w	r2, r2, #8
 8006a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0204 	bic.w	r2, r2, #4
 8006a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69d9      	ldr	r1, [r3, #28]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	61da      	str	r2, [r3, #28]
      break;
 8006a4c:	e062      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68b9      	ldr	r1, [r7, #8]
 8006a54:	4618      	mov	r0, r3
 8006a56:	f000 fc1b 	bl	8007290 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	69da      	ldr	r2, [r3, #28]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	69da      	ldr	r2, [r3, #28]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	69d9      	ldr	r1, [r3, #28]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	021a      	lsls	r2, r3, #8
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	61da      	str	r2, [r3, #28]
      break;
 8006a8e:	e041      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68b9      	ldr	r1, [r7, #8]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fc52 	bl	8007340 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0208 	orr.w	r2, r2, #8
 8006aaa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f022 0204 	bic.w	r2, r2, #4
 8006aba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691a      	ldr	r2, [r3, #16]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ace:	e021      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fc84 	bl	80073e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006afa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	021a      	lsls	r2, r3, #8
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b10:	e000      	b.n	8006b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006b12:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop

08006b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d101      	bne.n	8006b48 <HAL_TIM_ConfigClockSource+0x18>
 8006b44:	2302      	movs	r3, #2
 8006b46:	e0a6      	b.n	8006c96 <HAL_TIM_ConfigClockSource+0x166>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	4b4f      	ldr	r3, [pc, #316]	; (8006ca0 <HAL_TIM_ConfigClockSource+0x170>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d067      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x120>
 8006b80:	2b40      	cmp	r3, #64	; 0x40
 8006b82:	d80b      	bhi.n	8006b9c <HAL_TIM_ConfigClockSource+0x6c>
 8006b84:	2b10      	cmp	r3, #16
 8006b86:	d073      	beq.n	8006c70 <HAL_TIM_ConfigClockSource+0x140>
 8006b88:	2b10      	cmp	r3, #16
 8006b8a:	d802      	bhi.n	8006b92 <HAL_TIM_ConfigClockSource+0x62>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d06f      	beq.n	8006c70 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006b90:	e078      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b92:	2b20      	cmp	r3, #32
 8006b94:	d06c      	beq.n	8006c70 <HAL_TIM_ConfigClockSource+0x140>
 8006b96:	2b30      	cmp	r3, #48	; 0x30
 8006b98:	d06a      	beq.n	8006c70 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006b9a:	e073      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006b9c:	2b70      	cmp	r3, #112	; 0x70
 8006b9e:	d00d      	beq.n	8006bbc <HAL_TIM_ConfigClockSource+0x8c>
 8006ba0:	2b70      	cmp	r3, #112	; 0x70
 8006ba2:	d804      	bhi.n	8006bae <HAL_TIM_ConfigClockSource+0x7e>
 8006ba4:	2b50      	cmp	r3, #80	; 0x50
 8006ba6:	d033      	beq.n	8006c10 <HAL_TIM_ConfigClockSource+0xe0>
 8006ba8:	2b60      	cmp	r3, #96	; 0x60
 8006baa:	d041      	beq.n	8006c30 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006bac:	e06a      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb2:	d066      	beq.n	8006c82 <HAL_TIM_ConfigClockSource+0x152>
 8006bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb8:	d017      	beq.n	8006bea <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006bba:	e063      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	6899      	ldr	r1, [r3, #8]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	f000 fe8a 	bl	80078e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bde:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	609a      	str	r2, [r3, #8]
      break;
 8006be8:	e04c      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6818      	ldr	r0, [r3, #0]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	6899      	ldr	r1, [r3, #8]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f000 fe73 	bl	80078e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689a      	ldr	r2, [r3, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c0c:	609a      	str	r2, [r3, #8]
      break;
 8006c0e:	e039      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6818      	ldr	r0, [r3, #0]
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	6859      	ldr	r1, [r3, #4]
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f000 fd31 	bl	8007684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2150      	movs	r1, #80	; 0x50
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 fe40 	bl	80078ae <TIM_ITRx_SetConfig>
      break;
 8006c2e:	e029      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	6859      	ldr	r1, [r3, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f000 fd8d 	bl	800775c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2160      	movs	r1, #96	; 0x60
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fe30 	bl	80078ae <TIM_ITRx_SetConfig>
      break;
 8006c4e:	e019      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	6859      	ldr	r1, [r3, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f000 fd11 	bl	8007684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2140      	movs	r1, #64	; 0x40
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 fe20 	bl	80078ae <TIM_ITRx_SetConfig>
      break;
 8006c6e:	e009      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	f000 fe17 	bl	80078ae <TIM_ITRx_SetConfig>
      break;
 8006c80:	e000      	b.n	8006c84 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
 8006c9e:	bf00      	nop
 8006ca0:	fffeff88 	.word	0xfffeff88

08006ca4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d101      	bne.n	8006cbc <HAL_TIM_SlaveConfigSynchro+0x18>
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e031      	b.n	8006d20 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006ccc:	6839      	ldr	r1, [r7, #0]
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f000 fbdc 	bl	800748c <TIM_SlaveTimer_SetConfig>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	e018      	b.n	8006d20 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68da      	ldr	r2, [r3, #12]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cfc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68da      	ldr	r2, [r3, #12]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d0c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006d44:	bf00      	nop
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b083      	sub	sp, #12
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d58:	bf00      	nop
 8006d5a:	370c      	adds	r7, #12
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006d80:	bf00      	nop
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d98:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f7ff ffe8 	bl	8006d78 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8006da8:	bf00      	nop
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbc:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d103      	bne.n	8006dd8 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	771a      	strb	r2, [r3, #28]
 8006dd6:	e019      	b.n	8006e0c <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d103      	bne.n	8006dea <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2202      	movs	r2, #2
 8006de6:	771a      	strb	r2, [r3, #28]
 8006de8:	e010      	b.n	8006e0c <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d103      	bne.n	8006dfc <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2204      	movs	r2, #4
 8006df8:	771a      	strb	r2, [r3, #28]
 8006dfa:	e007      	b.n	8006e0c <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d102      	bne.n	8006e0c <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2208      	movs	r2, #8
 8006e0a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006e0c:	68f8      	ldr	r0, [r7, #12]
 8006e0e:	f7fa fd2b 	bl	8001868 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]
}
 8006e18:	bf00      	nop
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d103      	bne.n	8006e48 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2201      	movs	r2, #1
 8006e44:	771a      	strb	r2, [r3, #28]
 8006e46:	e019      	b.n	8006e7c <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d103      	bne.n	8006e5a <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2202      	movs	r2, #2
 8006e56:	771a      	strb	r2, [r3, #28]
 8006e58:	e010      	b.n	8006e7c <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d103      	bne.n	8006e6c <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2204      	movs	r2, #4
 8006e68:	771a      	strb	r2, [r3, #28]
 8006e6a:	e007      	b.n	8006e7c <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d102      	bne.n	8006e7c <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2208      	movs	r2, #8
 8006e7a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f7ff ff5d 	bl	8006d3c <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	771a      	strb	r2, [r3, #28]
}
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a40      	ldr	r2, [pc, #256]	; (8006fa4 <TIM_Base_SetConfig+0x114>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d013      	beq.n	8006ed0 <TIM_Base_SetConfig+0x40>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eae:	d00f      	beq.n	8006ed0 <TIM_Base_SetConfig+0x40>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a3d      	ldr	r2, [pc, #244]	; (8006fa8 <TIM_Base_SetConfig+0x118>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d00b      	beq.n	8006ed0 <TIM_Base_SetConfig+0x40>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	4a3c      	ldr	r2, [pc, #240]	; (8006fac <TIM_Base_SetConfig+0x11c>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d007      	beq.n	8006ed0 <TIM_Base_SetConfig+0x40>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a3b      	ldr	r2, [pc, #236]	; (8006fb0 <TIM_Base_SetConfig+0x120>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d003      	beq.n	8006ed0 <TIM_Base_SetConfig+0x40>
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a3a      	ldr	r2, [pc, #232]	; (8006fb4 <TIM_Base_SetConfig+0x124>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d108      	bne.n	8006ee2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a2f      	ldr	r2, [pc, #188]	; (8006fa4 <TIM_Base_SetConfig+0x114>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d02b      	beq.n	8006f42 <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef0:	d027      	beq.n	8006f42 <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a2c      	ldr	r2, [pc, #176]	; (8006fa8 <TIM_Base_SetConfig+0x118>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d023      	beq.n	8006f42 <TIM_Base_SetConfig+0xb2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a2b      	ldr	r2, [pc, #172]	; (8006fac <TIM_Base_SetConfig+0x11c>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d01f      	beq.n	8006f42 <TIM_Base_SetConfig+0xb2>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a2a      	ldr	r2, [pc, #168]	; (8006fb0 <TIM_Base_SetConfig+0x120>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d01b      	beq.n	8006f42 <TIM_Base_SetConfig+0xb2>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a29      	ldr	r2, [pc, #164]	; (8006fb4 <TIM_Base_SetConfig+0x124>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d017      	beq.n	8006f42 <TIM_Base_SetConfig+0xb2>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a28      	ldr	r2, [pc, #160]	; (8006fb8 <TIM_Base_SetConfig+0x128>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d013      	beq.n	8006f42 <TIM_Base_SetConfig+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a27      	ldr	r2, [pc, #156]	; (8006fbc <TIM_Base_SetConfig+0x12c>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d00f      	beq.n	8006f42 <TIM_Base_SetConfig+0xb2>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4a26      	ldr	r2, [pc, #152]	; (8006fc0 <TIM_Base_SetConfig+0x130>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d00b      	beq.n	8006f42 <TIM_Base_SetConfig+0xb2>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4a25      	ldr	r2, [pc, #148]	; (8006fc4 <TIM_Base_SetConfig+0x134>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d007      	beq.n	8006f42 <TIM_Base_SetConfig+0xb2>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a24      	ldr	r2, [pc, #144]	; (8006fc8 <TIM_Base_SetConfig+0x138>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d003      	beq.n	8006f42 <TIM_Base_SetConfig+0xb2>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	4a23      	ldr	r2, [pc, #140]	; (8006fcc <TIM_Base_SetConfig+0x13c>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d108      	bne.n	8006f54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	68fa      	ldr	r2, [r7, #12]
 8006f66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	689a      	ldr	r2, [r3, #8]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a0a      	ldr	r2, [pc, #40]	; (8006fa4 <TIM_Base_SetConfig+0x114>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <TIM_Base_SetConfig+0xf8>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a0c      	ldr	r2, [pc, #48]	; (8006fb4 <TIM_Base_SetConfig+0x124>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d103      	bne.n	8006f90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	691a      	ldr	r2, [r3, #16]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	615a      	str	r2, [r3, #20]
}
 8006f96:	bf00      	nop
 8006f98:	3714      	adds	r7, #20
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	40010000 	.word	0x40010000
 8006fa8:	40000400 	.word	0x40000400
 8006fac:	40000800 	.word	0x40000800
 8006fb0:	40000c00 	.word	0x40000c00
 8006fb4:	40010400 	.word	0x40010400
 8006fb8:	40014000 	.word	0x40014000
 8006fbc:	40014400 	.word	0x40014400
 8006fc0:	40014800 	.word	0x40014800
 8006fc4:	40001800 	.word	0x40001800
 8006fc8:	40001c00 	.word	0x40001c00
 8006fcc:	40002000 	.word	0x40002000

08006fd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b087      	sub	sp, #28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	f023 0201 	bic.w	r2, r3, #1
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a1b      	ldr	r3, [r3, #32]
 8006fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006ff8:	68fa      	ldr	r2, [r7, #12]
 8006ffa:	4b2b      	ldr	r3, [pc, #172]	; (80070a8 <TIM_OC1_SetConfig+0xd8>)
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f023 0302 	bic.w	r3, r3, #2
 8007018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a21      	ldr	r2, [pc, #132]	; (80070ac <TIM_OC1_SetConfig+0xdc>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d003      	beq.n	8007034 <TIM_OC1_SetConfig+0x64>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4a20      	ldr	r2, [pc, #128]	; (80070b0 <TIM_OC1_SetConfig+0xe0>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d10c      	bne.n	800704e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	f023 0308 	bic.w	r3, r3, #8
 800703a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	f023 0304 	bic.w	r3, r3, #4
 800704c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a16      	ldr	r2, [pc, #88]	; (80070ac <TIM_OC1_SetConfig+0xdc>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d003      	beq.n	800705e <TIM_OC1_SetConfig+0x8e>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <TIM_OC1_SetConfig+0xe0>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d111      	bne.n	8007082 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007064:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800706c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	693a      	ldr	r2, [r7, #16]
 800707e:	4313      	orrs	r3, r2
 8007080:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	693a      	ldr	r2, [r7, #16]
 8007086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	621a      	str	r2, [r3, #32]
}
 800709c:	bf00      	nop
 800709e:	371c      	adds	r7, #28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	fffeff8f 	.word	0xfffeff8f
 80070ac:	40010000 	.word	0x40010000
 80070b0:	40010400 	.word	0x40010400

080070b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b087      	sub	sp, #28
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a1b      	ldr	r3, [r3, #32]
 80070c2:	f023 0210 	bic.w	r2, r3, #16
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6a1b      	ldr	r3, [r3, #32]
 80070ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4b2e      	ldr	r3, [pc, #184]	; (8007198 <TIM_OC2_SetConfig+0xe4>)
 80070e0:	4013      	ands	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	021b      	lsls	r3, r3, #8
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	f023 0320 	bic.w	r3, r3, #32
 80070fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a23      	ldr	r2, [pc, #140]	; (800719c <TIM_OC2_SetConfig+0xe8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d003      	beq.n	800711c <TIM_OC2_SetConfig+0x68>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a22      	ldr	r2, [pc, #136]	; (80071a0 <TIM_OC2_SetConfig+0xec>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d10d      	bne.n	8007138 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	011b      	lsls	r3, r3, #4
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	4313      	orrs	r3, r2
 800712e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007130:	697b      	ldr	r3, [r7, #20]
 8007132:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007136:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a18      	ldr	r2, [pc, #96]	; (800719c <TIM_OC2_SetConfig+0xe8>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d003      	beq.n	8007148 <TIM_OC2_SetConfig+0x94>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a17      	ldr	r2, [pc, #92]	; (80071a0 <TIM_OC2_SetConfig+0xec>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d113      	bne.n	8007170 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800714e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007156:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4313      	orrs	r3, r2
 800716e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	621a      	str	r2, [r3, #32]
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	feff8fff 	.word	0xfeff8fff
 800719c:	40010000 	.word	0x40010000
 80071a0:	40010400 	.word	0x40010400

080071a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4b2d      	ldr	r3, [pc, #180]	; (8007284 <TIM_OC3_SetConfig+0xe0>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0303 	bic.w	r3, r3, #3
 80071da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	021b      	lsls	r3, r3, #8
 80071f4:	697a      	ldr	r2, [r7, #20]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a22      	ldr	r2, [pc, #136]	; (8007288 <TIM_OC3_SetConfig+0xe4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d003      	beq.n	800720a <TIM_OC3_SetConfig+0x66>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a21      	ldr	r2, [pc, #132]	; (800728c <TIM_OC3_SetConfig+0xe8>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d10d      	bne.n	8007226 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007210:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	021b      	lsls	r3, r3, #8
 8007218:	697a      	ldr	r2, [r7, #20]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a17      	ldr	r2, [pc, #92]	; (8007288 <TIM_OC3_SetConfig+0xe4>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d003      	beq.n	8007236 <TIM_OC3_SetConfig+0x92>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a16      	ldr	r2, [pc, #88]	; (800728c <TIM_OC3_SetConfig+0xe8>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d113      	bne.n	800725e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800723c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007244:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	695b      	ldr	r3, [r3, #20]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	011b      	lsls	r3, r3, #4
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	621a      	str	r2, [r3, #32]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	fffeff8f 	.word	0xfffeff8f
 8007288:	40010000 	.word	0x40010000
 800728c:	40010400 	.word	0x40010400

08007290 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	4b1e      	ldr	r3, [pc, #120]	; (8007334 <TIM_OC4_SetConfig+0xa4>)
 80072bc:	4013      	ands	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	68fa      	ldr	r2, [r7, #12]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	031b      	lsls	r3, r3, #12
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a13      	ldr	r2, [pc, #76]	; (8007338 <TIM_OC4_SetConfig+0xa8>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d003      	beq.n	80072f8 <TIM_OC4_SetConfig+0x68>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a12      	ldr	r2, [pc, #72]	; (800733c <TIM_OC4_SetConfig+0xac>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d109      	bne.n	800730c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	695b      	ldr	r3, [r3, #20]
 8007304:	019b      	lsls	r3, r3, #6
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	621a      	str	r2, [r3, #32]
}
 8007326:	bf00      	nop
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	feff8fff 	.word	0xfeff8fff
 8007338:	40010000 	.word	0x40010000
 800733c:	40010400 	.word	0x40010400

08007340 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007340:	b480      	push	{r7}
 8007342:	b087      	sub	sp, #28
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007368:	68fa      	ldr	r2, [r7, #12]
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <TIM_OC5_SetConfig+0x98>)
 800736c:	4013      	ands	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007380:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	041b      	lsls	r3, r3, #16
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a12      	ldr	r2, [pc, #72]	; (80073dc <TIM_OC5_SetConfig+0x9c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d003      	beq.n	800739e <TIM_OC5_SetConfig+0x5e>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a11      	ldr	r2, [pc, #68]	; (80073e0 <TIM_OC5_SetConfig+0xa0>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d109      	bne.n	80073b2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	685a      	ldr	r2, [r3, #4]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	621a      	str	r2, [r3, #32]
}
 80073cc:	bf00      	nop
 80073ce:	371c      	adds	r7, #28
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	fffeff8f 	.word	0xfffeff8f
 80073dc:	40010000 	.word	0x40010000
 80073e0:	40010400 	.word	0x40010400

080073e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b087      	sub	sp, #28
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a1b      	ldr	r3, [r3, #32]
 80073fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800740a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	4b1c      	ldr	r3, [pc, #112]	; (8007480 <TIM_OC6_SetConfig+0x9c>)
 8007410:	4013      	ands	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4313      	orrs	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	051b      	lsls	r3, r3, #20
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	4313      	orrs	r3, r2
 8007432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a13      	ldr	r2, [pc, #76]	; (8007484 <TIM_OC6_SetConfig+0xa0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <TIM_OC6_SetConfig+0x60>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a12      	ldr	r2, [pc, #72]	; (8007488 <TIM_OC6_SetConfig+0xa4>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d109      	bne.n	8007458 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800744a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	695b      	ldr	r3, [r3, #20]
 8007450:	029b      	lsls	r3, r3, #10
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	685a      	ldr	r2, [r3, #4]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	621a      	str	r2, [r3, #32]
}
 8007472:	bf00      	nop
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	feff8fff 	.word	0xfeff8fff
 8007484:	40010000 	.word	0x40010000
 8007488:	40010400 	.word	0x40010400

0800748c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b086      	sub	sp, #24
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4b39      	ldr	r3, [pc, #228]	; (8007598 <TIM_SlaveTimer_SetConfig+0x10c>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	697a      	ldr	r2, [r7, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b30      	cmp	r3, #48	; 0x30
 80074d0:	d05c      	beq.n	800758c <TIM_SlaveTimer_SetConfig+0x100>
 80074d2:	2b30      	cmp	r3, #48	; 0x30
 80074d4:	d806      	bhi.n	80074e4 <TIM_SlaveTimer_SetConfig+0x58>
 80074d6:	2b10      	cmp	r3, #16
 80074d8:	d058      	beq.n	800758c <TIM_SlaveTimer_SetConfig+0x100>
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d056      	beq.n	800758c <TIM_SlaveTimer_SetConfig+0x100>
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d054      	beq.n	800758c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80074e2:	e054      	b.n	800758e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80074e4:	2b50      	cmp	r3, #80	; 0x50
 80074e6:	d03d      	beq.n	8007564 <TIM_SlaveTimer_SetConfig+0xd8>
 80074e8:	2b50      	cmp	r3, #80	; 0x50
 80074ea:	d802      	bhi.n	80074f2 <TIM_SlaveTimer_SetConfig+0x66>
 80074ec:	2b40      	cmp	r3, #64	; 0x40
 80074ee:	d010      	beq.n	8007512 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80074f0:	e04d      	b.n	800758e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80074f2:	2b60      	cmp	r3, #96	; 0x60
 80074f4:	d040      	beq.n	8007578 <TIM_SlaveTimer_SetConfig+0xec>
 80074f6:	2b70      	cmp	r3, #112	; 0x70
 80074f8:	d000      	beq.n	80074fc <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80074fa:	e048      	b.n	800758e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	68d9      	ldr	r1, [r3, #12]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	f000 f9ea 	bl	80078e4 <TIM_ETR_SetConfig>
      break;
 8007510:	e03d      	b.n	800758e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b05      	cmp	r3, #5
 8007518:	d101      	bne.n	800751e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e038      	b.n	8007590 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6a1b      	ldr	r3, [r3, #32]
 8007524:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6a1a      	ldr	r2, [r3, #32]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0201 	bic.w	r2, r2, #1
 8007534:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	699b      	ldr	r3, [r3, #24]
 800753c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007544:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4313      	orrs	r3, r2
 8007550:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	621a      	str	r2, [r3, #32]
      break;
 8007562:	e014      	b.n	800758e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6818      	ldr	r0, [r3, #0]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	6899      	ldr	r1, [r3, #8]
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	461a      	mov	r2, r3
 8007572:	f000 f887 	bl	8007684 <TIM_TI1_ConfigInputStage>
      break;
 8007576:	e00a      	b.n	800758e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	6899      	ldr	r1, [r3, #8]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	461a      	mov	r2, r3
 8007586:	f000 f8e9 	bl	800775c <TIM_TI2_ConfigInputStage>
      break;
 800758a:	e000      	b.n	800758e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800758c:	bf00      	nop
  }
  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3718      	adds	r7, #24
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	fffefff8 	.word	0xfffefff8

0800759c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6a1b      	ldr	r3, [r3, #32]
 80075ae:	f023 0201 	bic.w	r2, r3, #1
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6a1b      	ldr	r3, [r3, #32]
 80075c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4a28      	ldr	r2, [pc, #160]	; (8007668 <TIM_TI1_SetConfig+0xcc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d01b      	beq.n	8007602 <TIM_TI1_SetConfig+0x66>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075d0:	d017      	beq.n	8007602 <TIM_TI1_SetConfig+0x66>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4a25      	ldr	r2, [pc, #148]	; (800766c <TIM_TI1_SetConfig+0xd0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <TIM_TI1_SetConfig+0x66>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4a24      	ldr	r2, [pc, #144]	; (8007670 <TIM_TI1_SetConfig+0xd4>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00f      	beq.n	8007602 <TIM_TI1_SetConfig+0x66>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	4a23      	ldr	r2, [pc, #140]	; (8007674 <TIM_TI1_SetConfig+0xd8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d00b      	beq.n	8007602 <TIM_TI1_SetConfig+0x66>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4a22      	ldr	r2, [pc, #136]	; (8007678 <TIM_TI1_SetConfig+0xdc>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d007      	beq.n	8007602 <TIM_TI1_SetConfig+0x66>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4a21      	ldr	r2, [pc, #132]	; (800767c <TIM_TI1_SetConfig+0xe0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d003      	beq.n	8007602 <TIM_TI1_SetConfig+0x66>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4a20      	ldr	r2, [pc, #128]	; (8007680 <TIM_TI1_SetConfig+0xe4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d101      	bne.n	8007606 <TIM_TI1_SetConfig+0x6a>
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <TIM_TI1_SetConfig+0x6c>
 8007606:	2300      	movs	r3, #0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d008      	beq.n	800761e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	f023 0303 	bic.w	r3, r3, #3
 8007612:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
 800761c:	e003      	b.n	8007626 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f043 0301 	orr.w	r3, r3, #1
 8007624:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800762c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	b2db      	uxtb	r3, r3
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	4313      	orrs	r3, r2
 8007638:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f023 030a 	bic.w	r3, r3, #10
 8007640:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	f003 030a 	and.w	r3, r3, #10
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	621a      	str	r2, [r3, #32]
}
 800765a:	bf00      	nop
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	40010000 	.word	0x40010000
 800766c:	40000400 	.word	0x40000400
 8007670:	40000800 	.word	0x40000800
 8007674:	40000c00 	.word	0x40000c00
 8007678:	40010400 	.word	0x40010400
 800767c:	40014000 	.word	0x40014000
 8007680:	40001800 	.word	0x40001800

08007684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	f023 0201 	bic.w	r2, r3, #1
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f023 030a 	bic.w	r3, r3, #10
 80076c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	693a      	ldr	r2, [r7, #16]
 80076ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	621a      	str	r2, [r3, #32]
}
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr

080076e2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80076e2:	b480      	push	{r7}
 80076e4:	b087      	sub	sp, #28
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
 80076ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	f023 0210 	bic.w	r2, r3, #16
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800770e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	021b      	lsls	r3, r3, #8
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	4313      	orrs	r3, r2
 8007718:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	031b      	lsls	r3, r3, #12
 8007726:	b29b      	uxth	r3, r3
 8007728:	697a      	ldr	r2, [r7, #20]
 800772a:	4313      	orrs	r3, r2
 800772c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007734:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	011b      	lsls	r3, r3, #4
 800773a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	693a      	ldr	r2, [r7, #16]
 800774e:	621a      	str	r2, [r3, #32]
}
 8007750:	bf00      	nop
 8007752:	371c      	adds	r7, #28
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800775c:	b480      	push	{r7}
 800775e:	b087      	sub	sp, #28
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	f023 0210 	bic.w	r2, r3, #16
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	699b      	ldr	r3, [r3, #24]
 8007778:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007786:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	031b      	lsls	r3, r3, #12
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4313      	orrs	r3, r2
 8007790:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007798:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	697a      	ldr	r2, [r7, #20]
 80077a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	621a      	str	r2, [r3, #32]
}
 80077b0:	bf00      	nop
 80077b2:	371c      	adds	r7, #28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	69db      	ldr	r3, [r3, #28]
 80077da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6a1b      	ldr	r3, [r3, #32]
 80077e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	f023 0303 	bic.w	r3, r3, #3
 80077e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	011b      	lsls	r3, r3, #4
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	4313      	orrs	r3, r2
 8007804:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800780c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	021b      	lsls	r3, r3, #8
 8007812:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	4313      	orrs	r3, r2
 800781a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	621a      	str	r2, [r3, #32]
}
 8007828:	bf00      	nop
 800782a:	371c      	adds	r7, #28
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6a1b      	ldr	r3, [r3, #32]
 8007846:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007860:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	4313      	orrs	r3, r2
 800786a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007872:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	031b      	lsls	r3, r3, #12
 8007878:	b29b      	uxth	r3, r3
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	4313      	orrs	r3, r2
 800787e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007886:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	031b      	lsls	r3, r3, #12
 800788c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	4313      	orrs	r3, r2
 8007894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	621a      	str	r2, [r3, #32]
}
 80078a2:	bf00      	nop
 80078a4:	371c      	adds	r7, #28
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr

080078ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b085      	sub	sp, #20
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	f043 0307 	orr.w	r3, r3, #7
 80078d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	609a      	str	r2, [r3, #8]
}
 80078d8:	bf00      	nop
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
 80078f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	021a      	lsls	r2, r3, #8
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	431a      	orrs	r2, r3
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	4313      	orrs	r3, r2
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	4313      	orrs	r3, r2
 8007910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	609a      	str	r2, [r3, #8]
}
 8007918:	bf00      	nop
 800791a:	371c      	adds	r7, #28
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	60f8      	str	r0, [r7, #12]
 800792c:	60b9      	str	r1, [r7, #8]
 800792e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f003 031f 	and.w	r3, r3, #31
 8007936:	2201      	movs	r2, #1
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	6a1a      	ldr	r2, [r3, #32]
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	43db      	mvns	r3, r3
 8007946:	401a      	ands	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6a1a      	ldr	r2, [r3, #32]
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f003 031f 	and.w	r3, r3, #31
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	fa01 f303 	lsl.w	r3, r1, r3
 800795c:	431a      	orrs	r2, r3
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	621a      	str	r2, [r3, #32]
}
 8007962:	bf00      	nop
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
	...

08007970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007970:	b480      	push	{r7}
 8007972:	b085      	sub	sp, #20
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007984:	2302      	movs	r3, #2
 8007986:	e06d      	b.n	8007a64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a30      	ldr	r2, [pc, #192]	; (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d004      	beq.n	80079bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a2f      	ldr	r2, [pc, #188]	; (8007a74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d108      	bne.n	80079ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80079c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a20      	ldr	r2, [pc, #128]	; (8007a70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d022      	beq.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079fa:	d01d      	beq.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a1d      	ldr	r2, [pc, #116]	; (8007a78 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d018      	beq.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a1c      	ldr	r2, [pc, #112]	; (8007a7c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d013      	beq.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a1a      	ldr	r2, [pc, #104]	; (8007a80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d00e      	beq.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a15      	ldr	r2, [pc, #84]	; (8007a74 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d009      	beq.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a16      	ldr	r2, [pc, #88]	; (8007a84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d004      	beq.n	8007a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a15      	ldr	r2, [pc, #84]	; (8007a88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d10c      	bne.n	8007a52 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68ba      	ldr	r2, [r7, #8]
 8007a50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3714      	adds	r7, #20
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6e:	4770      	bx	lr
 8007a70:	40010000 	.word	0x40010000
 8007a74:	40010400 	.word	0x40010400
 8007a78:	40000400 	.word	0x40000400
 8007a7c:	40000800 	.word	0x40000800
 8007a80:	40000c00 	.word	0x40000c00
 8007a84:	40014000 	.word	0x40014000
 8007a88:	40001800 	.word	0x40001800

08007a8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d101      	bne.n	8007aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007aa4:	2302      	movs	r3, #2
 8007aa6:	e065      	b.n	8007b74 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	4313      	orrs	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	695b      	ldr	r3, [r3, #20]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	041b      	lsls	r3, r3, #16
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a16      	ldr	r2, [pc, #88]	; (8007b80 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d004      	beq.n	8007b36 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a14      	ldr	r2, [pc, #80]	; (8007b84 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d115      	bne.n	8007b62 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	051b      	lsls	r3, r3, #20
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	69db      	ldr	r3, [r3, #28]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr
 8007b80:	40010000 	.word	0x40010000
 8007b84:	40010400 	.word	0x40010400

08007b88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b083      	sub	sp, #12
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ba4:	bf00      	nop
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e040      	b.n	8007c58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d106      	bne.n	8007bec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fa fc28 	bl	800243c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2224      	movs	r2, #36	; 0x24
 8007bf0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0201 	bic.w	r2, r2, #1
 8007c00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 fac4 	bl	8008190 <UART_SetConfig>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d101      	bne.n	8007c12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e022      	b.n	8007c58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d002      	beq.n	8007c20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fd62 	bl	80086e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689a      	ldr	r2, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f042 0201 	orr.w	r2, r2, #1
 8007c4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fde9 	bl	8008828 <UART_CheckIdleState>
 8007c56:	4603      	mov	r3, r0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	; 0x28
 8007c64:	af02      	add	r7, sp, #8
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	d17f      	bne.n	8007d78 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d002      	beq.n	8007c84 <HAL_UART_Transmit+0x24>
 8007c7e:	88fb      	ldrh	r3, [r7, #6]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e078      	b.n	8007d7a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d101      	bne.n	8007c96 <HAL_UART_Transmit+0x36>
 8007c92:	2302      	movs	r3, #2
 8007c94:	e071      	b.n	8007d7a <HAL_UART_Transmit+0x11a>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2221      	movs	r2, #33	; 0x21
 8007ca8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007caa:	f7fa fe33 	bl	8002914 <HAL_GetTick>
 8007cae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	88fa      	ldrh	r2, [r7, #6]
 8007cb4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	88fa      	ldrh	r2, [r7, #6]
 8007cbc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc8:	d108      	bne.n	8007cdc <HAL_UART_Transmit+0x7c>
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d104      	bne.n	8007cdc <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	61bb      	str	r3, [r7, #24]
 8007cda:	e003      	b.n	8007ce4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007cec:	e02c      	b.n	8007d48 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2180      	movs	r1, #128	; 0x80
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 fdda 	bl	80088b2 <UART_WaitOnFlagUntilTimeout>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e038      	b.n	8007d7a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10b      	bne.n	8007d26 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	881b      	ldrh	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	3302      	adds	r3, #2
 8007d22:	61bb      	str	r3, [r7, #24]
 8007d24:	e007      	b.n	8007d36 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	781a      	ldrb	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	3301      	adds	r3, #1
 8007d34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	3b01      	subs	r3, #1
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1cc      	bne.n	8007cee <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2140      	movs	r1, #64	; 0x40
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	f000 fda7 	bl	80088b2 <UART_WaitOnFlagUntilTimeout>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e005      	b.n	8007d7a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2220      	movs	r2, #32
 8007d72:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e000      	b.n	8007d7a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8007d78:	2302      	movs	r3, #2
  }
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3720      	adds	r7, #32
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	4613      	mov	r3, r2
 8007d90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	f040 808a 	bne.w	8007eb0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <HAL_UART_Receive_IT+0x24>
 8007da2:	88fb      	ldrh	r3, [r7, #6]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d101      	bne.n	8007dac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	e082      	b.n	8007eb2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d101      	bne.n	8007dba <HAL_UART_Receive_IT+0x36>
 8007db6:	2302      	movs	r3, #2
 8007db8:	e07b      	b.n	8007eb2 <HAL_UART_Receive_IT+0x12e>
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	88fa      	ldrh	r2, [r7, #6]
 8007dcc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	88fa      	ldrh	r2, [r7, #6]
 8007dd4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	689b      	ldr	r3, [r3, #8]
 8007de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007de6:	d10e      	bne.n	8007e06 <HAL_UART_Receive_IT+0x82>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	691b      	ldr	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d105      	bne.n	8007dfc <HAL_UART_Receive_IT+0x78>
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007df6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007dfa:	e02d      	b.n	8007e58 <HAL_UART_Receive_IT+0xd4>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	22ff      	movs	r2, #255	; 0xff
 8007e00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e04:	e028      	b.n	8007e58 <HAL_UART_Receive_IT+0xd4>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10d      	bne.n	8007e2a <HAL_UART_Receive_IT+0xa6>
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d104      	bne.n	8007e20 <HAL_UART_Receive_IT+0x9c>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	22ff      	movs	r2, #255	; 0xff
 8007e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e1e:	e01b      	b.n	8007e58 <HAL_UART_Receive_IT+0xd4>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	227f      	movs	r2, #127	; 0x7f
 8007e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e28:	e016      	b.n	8007e58 <HAL_UART_Receive_IT+0xd4>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	689b      	ldr	r3, [r3, #8]
 8007e2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e32:	d10d      	bne.n	8007e50 <HAL_UART_Receive_IT+0xcc>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d104      	bne.n	8007e46 <HAL_UART_Receive_IT+0xc2>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	227f      	movs	r2, #127	; 0x7f
 8007e40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e44:	e008      	b.n	8007e58 <HAL_UART_Receive_IT+0xd4>
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	223f      	movs	r2, #63	; 0x3f
 8007e4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007e4e:	e003      	b.n	8007e58 <HAL_UART_Receive_IT+0xd4>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2222      	movs	r2, #34	; 0x22
 8007e62:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	689a      	ldr	r2, [r3, #8]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0201 	orr.w	r2, r2, #1
 8007e72:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e7c:	d107      	bne.n	8007e8e <HAL_UART_Receive_IT+0x10a>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d103      	bne.n	8007e8e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4a0d      	ldr	r2, [pc, #52]	; (8007ec0 <HAL_UART_Receive_IT+0x13c>)
 8007e8a:	661a      	str	r2, [r3, #96]	; 0x60
 8007e8c:	e002      	b.n	8007e94 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4a0c      	ldr	r2, [pc, #48]	; (8007ec4 <HAL_UART_Receive_IT+0x140>)
 8007e92:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8007eaa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007eac:	2300      	movs	r3, #0
 8007eae:	e000      	b.n	8007eb2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007eb0:	2302      	movs	r3, #2
  }
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	08008aed 	.word	0x08008aed
 8007ec4:	08008a47 	.word	0x08008a47

08007ec8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b088      	sub	sp, #32
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007ee8:	69fa      	ldr	r2, [r7, #28]
 8007eea:	f640 030f 	movw	r3, #2063	; 0x80f
 8007eee:	4013      	ands	r3, r2
 8007ef0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d113      	bne.n	8007f20 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f003 0320 	and.w	r3, r3, #32
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00e      	beq.n	8007f20 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	f003 0320 	and.w	r3, r3, #32
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d009      	beq.n	8007f20 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f000 8114 	beq.w	800813e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	4798      	blx	r3
      }
      return;
 8007f1e:	e10e      	b.n	800813e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	f000 80d6 	beq.w	80080d4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f003 0301 	and.w	r3, r3, #1
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d105      	bne.n	8007f3e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 80cb 	beq.w	80080d4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00e      	beq.n	8007f66 <HAL_UART_IRQHandler+0x9e>
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d009      	beq.n	8007f66 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2201      	movs	r2, #1
 8007f58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f5e:	f043 0201 	orr.w	r2, r3, #1
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	f003 0302 	and.w	r3, r3, #2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00e      	beq.n	8007f8e <HAL_UART_IRQHandler+0xc6>
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f003 0301 	and.w	r3, r3, #1
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d009      	beq.n	8007f8e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f86:	f043 0204 	orr.w	r2, r3, #4
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f8e:	69fb      	ldr	r3, [r7, #28]
 8007f90:	f003 0304 	and.w	r3, r3, #4
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00e      	beq.n	8007fb6 <HAL_UART_IRQHandler+0xee>
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f003 0301 	and.w	r3, r3, #1
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2204      	movs	r2, #4
 8007fa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fae:	f043 0202 	orr.w	r2, r3, #2
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007fb6:	69fb      	ldr	r3, [r7, #28]
 8007fb8:	f003 0308 	and.w	r3, r3, #8
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d013      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d104      	bne.n	8007fd4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d009      	beq.n	8007fe8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2208      	movs	r2, #8
 8007fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fe0:	f043 0208 	orr.w	r2, r3, #8
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00f      	beq.n	8008012 <HAL_UART_IRQHandler+0x14a>
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00a      	beq.n	8008012 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800800a:	f043 0220 	orr.w	r2, r3, #32
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 8093 	beq.w	8008142 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00c      	beq.n	8008040 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d007      	beq.n	8008040 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008044:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008050:	2b40      	cmp	r3, #64	; 0x40
 8008052:	d004      	beq.n	800805e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800805a:	2b00      	cmp	r3, #0
 800805c:	d031      	beq.n	80080c2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fca2 	bl	80089a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800806e:	2b40      	cmp	r3, #64	; 0x40
 8008070:	d123      	bne.n	80080ba <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	689a      	ldr	r2, [r3, #8]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008080:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d013      	beq.n	80080b2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800808e:	4a30      	ldr	r2, [pc, #192]	; (8008150 <HAL_UART_IRQHandler+0x288>)
 8008090:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008096:	4618      	mov	r0, r3
 8008098:	f7fb fa96 	bl	80035c8 <HAL_DMA_Abort_IT>
 800809c:	4603      	mov	r3, r0
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d016      	beq.n	80080d0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80080ac:	4610      	mov	r0, r2
 80080ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b0:	e00e      	b.n	80080d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 f858 	bl	8008168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080b8:	e00a      	b.n	80080d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f854 	bl	8008168 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080c0:	e006      	b.n	80080d0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f000 f850 	bl	8008168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80080ce:	e038      	b.n	8008142 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80080d0:	bf00      	nop
    return;
 80080d2:	e036      	b.n	8008142 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80080d4:	69fb      	ldr	r3, [r7, #28]
 80080d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00d      	beq.n	80080fa <HAL_UART_IRQHandler+0x232>
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d008      	beq.n	80080fa <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80080f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f842 	bl	800817c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80080f8:	e026      	b.n	8008148 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80080fa:	69fb      	ldr	r3, [r7, #28]
 80080fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00d      	beq.n	8008120 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800810a:	2b00      	cmp	r3, #0
 800810c:	d008      	beq.n	8008120 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008112:	2b00      	cmp	r3, #0
 8008114:	d017      	beq.n	8008146 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
    }
    return;
 800811e:	e012      	b.n	8008146 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00e      	beq.n	8008148 <HAL_UART_IRQHandler+0x280>
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008130:	2b00      	cmp	r3, #0
 8008132:	d009      	beq.n	8008148 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f000 fc6d 	bl	8008a14 <UART_EndTransmit_IT>
    return;
 800813a:	bf00      	nop
 800813c:	e004      	b.n	8008148 <HAL_UART_IRQHandler+0x280>
      return;
 800813e:	bf00      	nop
 8008140:	e002      	b.n	8008148 <HAL_UART_IRQHandler+0x280>
    return;
 8008142:	bf00      	nop
 8008144:	e000      	b.n	8008148 <HAL_UART_IRQHandler+0x280>
    return;
 8008146:	bf00      	nop
  }

}
 8008148:	3720      	adds	r7, #32
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	080089e9 	.word	0x080089e9

08008154 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b088      	sub	sp, #32
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008198:	2300      	movs	r3, #0
 800819a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800819c:	2300      	movs	r3, #0
 800819e:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	689a      	ldr	r2, [r3, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	69db      	ldr	r3, [r3, #28]
 80081b4:	4313      	orrs	r3, r2
 80081b6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	4bb1      	ldr	r3, [pc, #708]	; (8008484 <UART_SetConfig+0x2f4>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	6812      	ldr	r2, [r2, #0]
 80081c6:	6939      	ldr	r1, [r7, #16]
 80081c8:	430b      	orrs	r3, r1
 80081ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	68da      	ldr	r2, [r3, #12]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6a1b      	ldr	r3, [r3, #32]
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	430a      	orrs	r2, r1
 8008204:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a9f      	ldr	r2, [pc, #636]	; (8008488 <UART_SetConfig+0x2f8>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d121      	bne.n	8008254 <UART_SetConfig+0xc4>
 8008210:	4b9e      	ldr	r3, [pc, #632]	; (800848c <UART_SetConfig+0x2fc>)
 8008212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	2b03      	cmp	r3, #3
 800821c:	d816      	bhi.n	800824c <UART_SetConfig+0xbc>
 800821e:	a201      	add	r2, pc, #4	; (adr r2, 8008224 <UART_SetConfig+0x94>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	08008235 	.word	0x08008235
 8008228:	08008241 	.word	0x08008241
 800822c:	0800823b 	.word	0x0800823b
 8008230:	08008247 	.word	0x08008247
 8008234:	2301      	movs	r3, #1
 8008236:	77fb      	strb	r3, [r7, #31]
 8008238:	e151      	b.n	80084de <UART_SetConfig+0x34e>
 800823a:	2302      	movs	r3, #2
 800823c:	77fb      	strb	r3, [r7, #31]
 800823e:	e14e      	b.n	80084de <UART_SetConfig+0x34e>
 8008240:	2304      	movs	r3, #4
 8008242:	77fb      	strb	r3, [r7, #31]
 8008244:	e14b      	b.n	80084de <UART_SetConfig+0x34e>
 8008246:	2308      	movs	r3, #8
 8008248:	77fb      	strb	r3, [r7, #31]
 800824a:	e148      	b.n	80084de <UART_SetConfig+0x34e>
 800824c:	2310      	movs	r3, #16
 800824e:	77fb      	strb	r3, [r7, #31]
 8008250:	bf00      	nop
 8008252:	e144      	b.n	80084de <UART_SetConfig+0x34e>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a8d      	ldr	r2, [pc, #564]	; (8008490 <UART_SetConfig+0x300>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d134      	bne.n	80082c8 <UART_SetConfig+0x138>
 800825e:	4b8b      	ldr	r3, [pc, #556]	; (800848c <UART_SetConfig+0x2fc>)
 8008260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008264:	f003 030c 	and.w	r3, r3, #12
 8008268:	2b0c      	cmp	r3, #12
 800826a:	d829      	bhi.n	80082c0 <UART_SetConfig+0x130>
 800826c:	a201      	add	r2, pc, #4	; (adr r2, 8008274 <UART_SetConfig+0xe4>)
 800826e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008272:	bf00      	nop
 8008274:	080082a9 	.word	0x080082a9
 8008278:	080082c1 	.word	0x080082c1
 800827c:	080082c1 	.word	0x080082c1
 8008280:	080082c1 	.word	0x080082c1
 8008284:	080082b5 	.word	0x080082b5
 8008288:	080082c1 	.word	0x080082c1
 800828c:	080082c1 	.word	0x080082c1
 8008290:	080082c1 	.word	0x080082c1
 8008294:	080082af 	.word	0x080082af
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c1 	.word	0x080082c1
 80082a0:	080082c1 	.word	0x080082c1
 80082a4:	080082bb 	.word	0x080082bb
 80082a8:	2300      	movs	r3, #0
 80082aa:	77fb      	strb	r3, [r7, #31]
 80082ac:	e117      	b.n	80084de <UART_SetConfig+0x34e>
 80082ae:	2302      	movs	r3, #2
 80082b0:	77fb      	strb	r3, [r7, #31]
 80082b2:	e114      	b.n	80084de <UART_SetConfig+0x34e>
 80082b4:	2304      	movs	r3, #4
 80082b6:	77fb      	strb	r3, [r7, #31]
 80082b8:	e111      	b.n	80084de <UART_SetConfig+0x34e>
 80082ba:	2308      	movs	r3, #8
 80082bc:	77fb      	strb	r3, [r7, #31]
 80082be:	e10e      	b.n	80084de <UART_SetConfig+0x34e>
 80082c0:	2310      	movs	r3, #16
 80082c2:	77fb      	strb	r3, [r7, #31]
 80082c4:	bf00      	nop
 80082c6:	e10a      	b.n	80084de <UART_SetConfig+0x34e>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a71      	ldr	r2, [pc, #452]	; (8008494 <UART_SetConfig+0x304>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d120      	bne.n	8008314 <UART_SetConfig+0x184>
 80082d2:	4b6e      	ldr	r3, [pc, #440]	; (800848c <UART_SetConfig+0x2fc>)
 80082d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082dc:	2b10      	cmp	r3, #16
 80082de:	d00f      	beq.n	8008300 <UART_SetConfig+0x170>
 80082e0:	2b10      	cmp	r3, #16
 80082e2:	d802      	bhi.n	80082ea <UART_SetConfig+0x15a>
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d005      	beq.n	80082f4 <UART_SetConfig+0x164>
 80082e8:	e010      	b.n	800830c <UART_SetConfig+0x17c>
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	d005      	beq.n	80082fa <UART_SetConfig+0x16a>
 80082ee:	2b30      	cmp	r3, #48	; 0x30
 80082f0:	d009      	beq.n	8008306 <UART_SetConfig+0x176>
 80082f2:	e00b      	b.n	800830c <UART_SetConfig+0x17c>
 80082f4:	2300      	movs	r3, #0
 80082f6:	77fb      	strb	r3, [r7, #31]
 80082f8:	e0f1      	b.n	80084de <UART_SetConfig+0x34e>
 80082fa:	2302      	movs	r3, #2
 80082fc:	77fb      	strb	r3, [r7, #31]
 80082fe:	e0ee      	b.n	80084de <UART_SetConfig+0x34e>
 8008300:	2304      	movs	r3, #4
 8008302:	77fb      	strb	r3, [r7, #31]
 8008304:	e0eb      	b.n	80084de <UART_SetConfig+0x34e>
 8008306:	2308      	movs	r3, #8
 8008308:	77fb      	strb	r3, [r7, #31]
 800830a:	e0e8      	b.n	80084de <UART_SetConfig+0x34e>
 800830c:	2310      	movs	r3, #16
 800830e:	77fb      	strb	r3, [r7, #31]
 8008310:	bf00      	nop
 8008312:	e0e4      	b.n	80084de <UART_SetConfig+0x34e>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a5f      	ldr	r2, [pc, #380]	; (8008498 <UART_SetConfig+0x308>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d120      	bne.n	8008360 <UART_SetConfig+0x1d0>
 800831e:	4b5b      	ldr	r3, [pc, #364]	; (800848c <UART_SetConfig+0x2fc>)
 8008320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008324:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008328:	2b40      	cmp	r3, #64	; 0x40
 800832a:	d00f      	beq.n	800834c <UART_SetConfig+0x1bc>
 800832c:	2b40      	cmp	r3, #64	; 0x40
 800832e:	d802      	bhi.n	8008336 <UART_SetConfig+0x1a6>
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <UART_SetConfig+0x1b0>
 8008334:	e010      	b.n	8008358 <UART_SetConfig+0x1c8>
 8008336:	2b80      	cmp	r3, #128	; 0x80
 8008338:	d005      	beq.n	8008346 <UART_SetConfig+0x1b6>
 800833a:	2bc0      	cmp	r3, #192	; 0xc0
 800833c:	d009      	beq.n	8008352 <UART_SetConfig+0x1c2>
 800833e:	e00b      	b.n	8008358 <UART_SetConfig+0x1c8>
 8008340:	2300      	movs	r3, #0
 8008342:	77fb      	strb	r3, [r7, #31]
 8008344:	e0cb      	b.n	80084de <UART_SetConfig+0x34e>
 8008346:	2302      	movs	r3, #2
 8008348:	77fb      	strb	r3, [r7, #31]
 800834a:	e0c8      	b.n	80084de <UART_SetConfig+0x34e>
 800834c:	2304      	movs	r3, #4
 800834e:	77fb      	strb	r3, [r7, #31]
 8008350:	e0c5      	b.n	80084de <UART_SetConfig+0x34e>
 8008352:	2308      	movs	r3, #8
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	e0c2      	b.n	80084de <UART_SetConfig+0x34e>
 8008358:	2310      	movs	r3, #16
 800835a:	77fb      	strb	r3, [r7, #31]
 800835c:	bf00      	nop
 800835e:	e0be      	b.n	80084de <UART_SetConfig+0x34e>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a4d      	ldr	r2, [pc, #308]	; (800849c <UART_SetConfig+0x30c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d124      	bne.n	80083b4 <UART_SetConfig+0x224>
 800836a:	4b48      	ldr	r3, [pc, #288]	; (800848c <UART_SetConfig+0x2fc>)
 800836c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008378:	d012      	beq.n	80083a0 <UART_SetConfig+0x210>
 800837a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800837e:	d802      	bhi.n	8008386 <UART_SetConfig+0x1f6>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d007      	beq.n	8008394 <UART_SetConfig+0x204>
 8008384:	e012      	b.n	80083ac <UART_SetConfig+0x21c>
 8008386:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800838a:	d006      	beq.n	800839a <UART_SetConfig+0x20a>
 800838c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008390:	d009      	beq.n	80083a6 <UART_SetConfig+0x216>
 8008392:	e00b      	b.n	80083ac <UART_SetConfig+0x21c>
 8008394:	2300      	movs	r3, #0
 8008396:	77fb      	strb	r3, [r7, #31]
 8008398:	e0a1      	b.n	80084de <UART_SetConfig+0x34e>
 800839a:	2302      	movs	r3, #2
 800839c:	77fb      	strb	r3, [r7, #31]
 800839e:	e09e      	b.n	80084de <UART_SetConfig+0x34e>
 80083a0:	2304      	movs	r3, #4
 80083a2:	77fb      	strb	r3, [r7, #31]
 80083a4:	e09b      	b.n	80084de <UART_SetConfig+0x34e>
 80083a6:	2308      	movs	r3, #8
 80083a8:	77fb      	strb	r3, [r7, #31]
 80083aa:	e098      	b.n	80084de <UART_SetConfig+0x34e>
 80083ac:	2310      	movs	r3, #16
 80083ae:	77fb      	strb	r3, [r7, #31]
 80083b0:	bf00      	nop
 80083b2:	e094      	b.n	80084de <UART_SetConfig+0x34e>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a39      	ldr	r2, [pc, #228]	; (80084a0 <UART_SetConfig+0x310>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d124      	bne.n	8008408 <UART_SetConfig+0x278>
 80083be:	4b33      	ldr	r3, [pc, #204]	; (800848c <UART_SetConfig+0x2fc>)
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083cc:	d012      	beq.n	80083f4 <UART_SetConfig+0x264>
 80083ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d2:	d802      	bhi.n	80083da <UART_SetConfig+0x24a>
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d007      	beq.n	80083e8 <UART_SetConfig+0x258>
 80083d8:	e012      	b.n	8008400 <UART_SetConfig+0x270>
 80083da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083de:	d006      	beq.n	80083ee <UART_SetConfig+0x25e>
 80083e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083e4:	d009      	beq.n	80083fa <UART_SetConfig+0x26a>
 80083e6:	e00b      	b.n	8008400 <UART_SetConfig+0x270>
 80083e8:	2301      	movs	r3, #1
 80083ea:	77fb      	strb	r3, [r7, #31]
 80083ec:	e077      	b.n	80084de <UART_SetConfig+0x34e>
 80083ee:	2302      	movs	r3, #2
 80083f0:	77fb      	strb	r3, [r7, #31]
 80083f2:	e074      	b.n	80084de <UART_SetConfig+0x34e>
 80083f4:	2304      	movs	r3, #4
 80083f6:	77fb      	strb	r3, [r7, #31]
 80083f8:	e071      	b.n	80084de <UART_SetConfig+0x34e>
 80083fa:	2308      	movs	r3, #8
 80083fc:	77fb      	strb	r3, [r7, #31]
 80083fe:	e06e      	b.n	80084de <UART_SetConfig+0x34e>
 8008400:	2310      	movs	r3, #16
 8008402:	77fb      	strb	r3, [r7, #31]
 8008404:	bf00      	nop
 8008406:	e06a      	b.n	80084de <UART_SetConfig+0x34e>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a25      	ldr	r2, [pc, #148]	; (80084a4 <UART_SetConfig+0x314>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d124      	bne.n	800845c <UART_SetConfig+0x2cc>
 8008412:	4b1e      	ldr	r3, [pc, #120]	; (800848c <UART_SetConfig+0x2fc>)
 8008414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008418:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800841c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008420:	d012      	beq.n	8008448 <UART_SetConfig+0x2b8>
 8008422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008426:	d802      	bhi.n	800842e <UART_SetConfig+0x29e>
 8008428:	2b00      	cmp	r3, #0
 800842a:	d007      	beq.n	800843c <UART_SetConfig+0x2ac>
 800842c:	e012      	b.n	8008454 <UART_SetConfig+0x2c4>
 800842e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008432:	d006      	beq.n	8008442 <UART_SetConfig+0x2b2>
 8008434:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008438:	d009      	beq.n	800844e <UART_SetConfig+0x2be>
 800843a:	e00b      	b.n	8008454 <UART_SetConfig+0x2c4>
 800843c:	2300      	movs	r3, #0
 800843e:	77fb      	strb	r3, [r7, #31]
 8008440:	e04d      	b.n	80084de <UART_SetConfig+0x34e>
 8008442:	2302      	movs	r3, #2
 8008444:	77fb      	strb	r3, [r7, #31]
 8008446:	e04a      	b.n	80084de <UART_SetConfig+0x34e>
 8008448:	2304      	movs	r3, #4
 800844a:	77fb      	strb	r3, [r7, #31]
 800844c:	e047      	b.n	80084de <UART_SetConfig+0x34e>
 800844e:	2308      	movs	r3, #8
 8008450:	77fb      	strb	r3, [r7, #31]
 8008452:	e044      	b.n	80084de <UART_SetConfig+0x34e>
 8008454:	2310      	movs	r3, #16
 8008456:	77fb      	strb	r3, [r7, #31]
 8008458:	bf00      	nop
 800845a:	e040      	b.n	80084de <UART_SetConfig+0x34e>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a11      	ldr	r2, [pc, #68]	; (80084a8 <UART_SetConfig+0x318>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d139      	bne.n	80084da <UART_SetConfig+0x34a>
 8008466:	4b09      	ldr	r3, [pc, #36]	; (800848c <UART_SetConfig+0x2fc>)
 8008468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800846c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008470:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008474:	d027      	beq.n	80084c6 <UART_SetConfig+0x336>
 8008476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800847a:	d817      	bhi.n	80084ac <UART_SetConfig+0x31c>
 800847c:	2b00      	cmp	r3, #0
 800847e:	d01c      	beq.n	80084ba <UART_SetConfig+0x32a>
 8008480:	e027      	b.n	80084d2 <UART_SetConfig+0x342>
 8008482:	bf00      	nop
 8008484:	efff69f3 	.word	0xefff69f3
 8008488:	40011000 	.word	0x40011000
 800848c:	40023800 	.word	0x40023800
 8008490:	40004400 	.word	0x40004400
 8008494:	40004800 	.word	0x40004800
 8008498:	40004c00 	.word	0x40004c00
 800849c:	40005000 	.word	0x40005000
 80084a0:	40011400 	.word	0x40011400
 80084a4:	40007800 	.word	0x40007800
 80084a8:	40007c00 	.word	0x40007c00
 80084ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084b0:	d006      	beq.n	80084c0 <UART_SetConfig+0x330>
 80084b2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80084b6:	d009      	beq.n	80084cc <UART_SetConfig+0x33c>
 80084b8:	e00b      	b.n	80084d2 <UART_SetConfig+0x342>
 80084ba:	2300      	movs	r3, #0
 80084bc:	77fb      	strb	r3, [r7, #31]
 80084be:	e00e      	b.n	80084de <UART_SetConfig+0x34e>
 80084c0:	2302      	movs	r3, #2
 80084c2:	77fb      	strb	r3, [r7, #31]
 80084c4:	e00b      	b.n	80084de <UART_SetConfig+0x34e>
 80084c6:	2304      	movs	r3, #4
 80084c8:	77fb      	strb	r3, [r7, #31]
 80084ca:	e008      	b.n	80084de <UART_SetConfig+0x34e>
 80084cc:	2308      	movs	r3, #8
 80084ce:	77fb      	strb	r3, [r7, #31]
 80084d0:	e005      	b.n	80084de <UART_SetConfig+0x34e>
 80084d2:	2310      	movs	r3, #16
 80084d4:	77fb      	strb	r3, [r7, #31]
 80084d6:	bf00      	nop
 80084d8:	e001      	b.n	80084de <UART_SetConfig+0x34e>
 80084da:	2310      	movs	r3, #16
 80084dc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	69db      	ldr	r3, [r3, #28]
 80084e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084e6:	d17f      	bne.n	80085e8 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80084e8:	7ffb      	ldrb	r3, [r7, #31]
 80084ea:	2b08      	cmp	r3, #8
 80084ec:	d85c      	bhi.n	80085a8 <UART_SetConfig+0x418>
 80084ee:	a201      	add	r2, pc, #4	; (adr r2, 80084f4 <UART_SetConfig+0x364>)
 80084f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f4:	08008519 	.word	0x08008519
 80084f8:	08008539 	.word	0x08008539
 80084fc:	08008559 	.word	0x08008559
 8008500:	080085a9 	.word	0x080085a9
 8008504:	08008571 	.word	0x08008571
 8008508:	080085a9 	.word	0x080085a9
 800850c:	080085a9 	.word	0x080085a9
 8008510:	080085a9 	.word	0x080085a9
 8008514:	08008591 	.word	0x08008591
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008518:	f7fc fa84 	bl	8004a24 <HAL_RCC_GetPCLK1Freq>
 800851c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	005a      	lsls	r2, r3, #1
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	085b      	lsrs	r3, r3, #1
 8008528:	441a      	add	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008532:	b29b      	uxth	r3, r3
 8008534:	61bb      	str	r3, [r7, #24]
        break;
 8008536:	e03a      	b.n	80085ae <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008538:	f7fc fa88 	bl	8004a4c <HAL_RCC_GetPCLK2Freq>
 800853c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	005a      	lsls	r2, r3, #1
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	085b      	lsrs	r3, r3, #1
 8008548:	441a      	add	r2, r3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008552:	b29b      	uxth	r3, r3
 8008554:	61bb      	str	r3, [r7, #24]
        break;
 8008556:	e02a      	b.n	80085ae <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	085a      	lsrs	r2, r3, #1
 800855e:	4b5f      	ldr	r3, [pc, #380]	; (80086dc <UART_SetConfig+0x54c>)
 8008560:	4413      	add	r3, r2
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	6852      	ldr	r2, [r2, #4]
 8008566:	fbb3 f3f2 	udiv	r3, r3, r2
 800856a:	b29b      	uxth	r3, r3
 800856c:	61bb      	str	r3, [r7, #24]
        break;
 800856e:	e01e      	b.n	80085ae <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008570:	f7fc f99a 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8008574:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	005a      	lsls	r2, r3, #1
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	085b      	lsrs	r3, r3, #1
 8008580:	441a      	add	r2, r3
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	fbb2 f3f3 	udiv	r3, r2, r3
 800858a:	b29b      	uxth	r3, r3
 800858c:	61bb      	str	r3, [r7, #24]
        break;
 800858e:	e00e      	b.n	80085ae <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	085b      	lsrs	r3, r3, #1
 8008596:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	61bb      	str	r3, [r7, #24]
        break;
 80085a6:	e002      	b.n	80085ae <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	75fb      	strb	r3, [r7, #23]
        break;
 80085ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	2b0f      	cmp	r3, #15
 80085b2:	d916      	bls.n	80085e2 <UART_SetConfig+0x452>
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085ba:	d212      	bcs.n	80085e2 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	f023 030f 	bic.w	r3, r3, #15
 80085c4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	085b      	lsrs	r3, r3, #1
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	897b      	ldrh	r3, [r7, #10]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	897a      	ldrh	r2, [r7, #10]
 80085de:	60da      	str	r2, [r3, #12]
 80085e0:	e070      	b.n	80086c4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80085e2:	2301      	movs	r3, #1
 80085e4:	75fb      	strb	r3, [r7, #23]
 80085e6:	e06d      	b.n	80086c4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80085e8:	7ffb      	ldrb	r3, [r7, #31]
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d859      	bhi.n	80086a2 <UART_SetConfig+0x512>
 80085ee:	a201      	add	r2, pc, #4	; (adr r2, 80085f4 <UART_SetConfig+0x464>)
 80085f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f4:	08008619 	.word	0x08008619
 80085f8:	08008637 	.word	0x08008637
 80085fc:	08008655 	.word	0x08008655
 8008600:	080086a3 	.word	0x080086a3
 8008604:	0800866d 	.word	0x0800866d
 8008608:	080086a3 	.word	0x080086a3
 800860c:	080086a3 	.word	0x080086a3
 8008610:	080086a3 	.word	0x080086a3
 8008614:	0800868b 	.word	0x0800868b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008618:	f7fc fa04 	bl	8004a24 <HAL_RCC_GetPCLK1Freq>
 800861c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	085a      	lsrs	r2, r3, #1
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	441a      	add	r2, r3
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008630:	b29b      	uxth	r3, r3
 8008632:	61bb      	str	r3, [r7, #24]
        break;
 8008634:	e038      	b.n	80086a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008636:	f7fc fa09 	bl	8004a4c <HAL_RCC_GetPCLK2Freq>
 800863a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	085a      	lsrs	r2, r3, #1
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	441a      	add	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	fbb2 f3f3 	udiv	r3, r2, r3
 800864e:	b29b      	uxth	r3, r3
 8008650:	61bb      	str	r3, [r7, #24]
        break;
 8008652:	e029      	b.n	80086a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	085a      	lsrs	r2, r3, #1
 800865a:	4b21      	ldr	r3, [pc, #132]	; (80086e0 <UART_SetConfig+0x550>)
 800865c:	4413      	add	r3, r2
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	6852      	ldr	r2, [r2, #4]
 8008662:	fbb3 f3f2 	udiv	r3, r3, r2
 8008666:	b29b      	uxth	r3, r3
 8008668:	61bb      	str	r3, [r7, #24]
        break;
 800866a:	e01d      	b.n	80086a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800866c:	f7fc f91c 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8008670:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	085a      	lsrs	r2, r3, #1
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	441a      	add	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	fbb2 f3f3 	udiv	r3, r2, r3
 8008684:	b29b      	uxth	r3, r3
 8008686:	61bb      	str	r3, [r7, #24]
        break;
 8008688:	e00e      	b.n	80086a8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	085b      	lsrs	r3, r3, #1
 8008690:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	fbb2 f3f3 	udiv	r3, r2, r3
 800869c:	b29b      	uxth	r3, r3
 800869e:	61bb      	str	r3, [r7, #24]
        break;
 80086a0:	e002      	b.n	80086a8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80086a2:	2301      	movs	r3, #1
 80086a4:	75fb      	strb	r3, [r7, #23]
        break;
 80086a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b0f      	cmp	r3, #15
 80086ac:	d908      	bls.n	80086c0 <UART_SetConfig+0x530>
 80086ae:	69bb      	ldr	r3, [r7, #24]
 80086b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b4:	d204      	bcs.n	80086c0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	69ba      	ldr	r2, [r7, #24]
 80086bc:	60da      	str	r2, [r3, #12]
 80086be:	e001      	b.n	80086c4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2200      	movs	r2, #0
 80086ce:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3720      	adds	r7, #32
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bd80      	pop	{r7, pc}
 80086da:	bf00      	nop
 80086dc:	01e84800 	.word	0x01e84800
 80086e0:	00f42400 	.word	0x00f42400

080086e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f0:	f003 0301 	and.w	r3, r3, #1
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00a      	beq.n	800870e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	430a      	orrs	r2, r1
 800870c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008712:	f003 0302 	and.w	r3, r3, #2
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	430a      	orrs	r2, r1
 8008750:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008756:	f003 0308 	and.w	r3, r3, #8
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	430a      	orrs	r2, r1
 8008772:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008778:	f003 0310 	and.w	r3, r3, #16
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00a      	beq.n	8008796 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	430a      	orrs	r2, r1
 8008794:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	f003 0320 	and.w	r3, r3, #32
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00a      	beq.n	80087b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	430a      	orrs	r2, r1
 80087b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d01a      	beq.n	80087fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	430a      	orrs	r2, r1
 80087d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087e2:	d10a      	bne.n	80087fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	430a      	orrs	r2, r1
 800881a:	605a      	str	r2, [r3, #4]
  }
}
 800881c:	bf00      	nop
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af02      	add	r7, sp, #8
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2200      	movs	r2, #0
 8008834:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008836:	f7fa f86d 	bl	8002914 <HAL_GetTick>
 800883a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0308 	and.w	r3, r3, #8
 8008846:	2b08      	cmp	r3, #8
 8008848:	d10e      	bne.n	8008868 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800884a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f82a 	bl	80088b2 <UART_WaitOnFlagUntilTimeout>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e020      	b.n	80088aa <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b04      	cmp	r3, #4
 8008874:	d10e      	bne.n	8008894 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008876:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f814 	bl	80088b2 <UART_WaitOnFlagUntilTimeout>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e00a      	b.n	80088aa <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2220      	movs	r2, #32
 8008898:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2220      	movs	r2, #32
 800889e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b084      	sub	sp, #16
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	603b      	str	r3, [r7, #0]
 80088be:	4613      	mov	r3, r2
 80088c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088c2:	e05d      	b.n	8008980 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ca:	d059      	beq.n	8008980 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088cc:	f7fa f822 	bl	8002914 <HAL_GetTick>
 80088d0:	4602      	mov	r2, r0
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	1ad3      	subs	r3, r2, r3
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	429a      	cmp	r2, r3
 80088da:	d302      	bcc.n	80088e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80088dc:	69bb      	ldr	r3, [r7, #24]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d11b      	bne.n	800891a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80088f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	689a      	ldr	r2, [r3, #8]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f022 0201 	bic.w	r2, r2, #1
 8008900:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2220      	movs	r2, #32
 8008906:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2220      	movs	r2, #32
 800890c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008916:	2303      	movs	r3, #3
 8008918:	e042      	b.n	80089a0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b00      	cmp	r3, #0
 8008926:	d02b      	beq.n	8008980 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	69db      	ldr	r3, [r3, #28]
 800892e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008936:	d123      	bne.n	8008980 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008940:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681a      	ldr	r2, [r3, #0]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008950:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	689a      	ldr	r2, [r3, #8]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f022 0201 	bic.w	r2, r2, #1
 8008960:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	2220      	movs	r2, #32
 8008966:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2220      	movs	r2, #32
 800896c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2220      	movs	r2, #32
 8008972:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e00f      	b.n	80089a0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	69da      	ldr	r2, [r3, #28]
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	4013      	ands	r3, r2
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	429a      	cmp	r2, r3
 800898e:	bf0c      	ite	eq
 8008990:	2301      	moveq	r3, #1
 8008992:	2300      	movne	r3, #0
 8008994:	b2db      	uxtb	r3, r3
 8008996:	461a      	mov	r2, r3
 8008998:	79fb      	ldrb	r3, [r7, #7]
 800899a:	429a      	cmp	r2, r3
 800899c:	d092      	beq.n	80088c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800899e:	2300      	movs	r3, #0
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80089be:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0201 	bic.w	r2, r2, #1
 80089ce:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	661a      	str	r2, [r3, #96]	; 0x60
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2200      	movs	r2, #0
 8008a02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f7ff fbae 	bl	8008168 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a0c:	bf00      	nop
 8008a0e:	3710      	adds	r7, #16
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a2a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff fb8b 	bl	8008154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a3e:	bf00      	nop
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a54:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a5a:	2b22      	cmp	r3, #34	; 0x22
 8008a5c:	d13a      	bne.n	8008ad4 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008a66:	89bb      	ldrh	r3, [r7, #12]
 8008a68:	b2d9      	uxtb	r1, r3
 8008a6a:	89fb      	ldrh	r3, [r7, #14]
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a72:	400a      	ands	r2, r1
 8008a74:	b2d2      	uxtb	r2, r2
 8008a76:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7c:	1c5a      	adds	r2, r3, #1
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d121      	bne.n	8008ae4 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681a      	ldr	r2, [r3, #0]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008aae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	689a      	ldr	r2, [r3, #8]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0201 	bic.w	r2, r2, #1
 8008abe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2220      	movs	r2, #32
 8008ac4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f7f8 ffef 	bl	8001ab0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008ad2:	e007      	b.n	8008ae4 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	699a      	ldr	r2, [r3, #24]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f042 0208 	orr.w	r2, r2, #8
 8008ae2:	619a      	str	r2, [r3, #24]
}
 8008ae4:	bf00      	nop
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008afa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b00:	2b22      	cmp	r3, #34	; 0x22
 8008b02:	d13a      	bne.n	8008b7a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b10:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b12:	89ba      	ldrh	r2, [r7, #12]
 8008b14:	89fb      	ldrh	r3, [r7, #14]
 8008b16:	4013      	ands	r3, r2
 8008b18:	b29a      	uxth	r2, r3
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b22:	1c9a      	adds	r2, r3, #2
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	3b01      	subs	r3, #1
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d121      	bne.n	8008b8a <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b54:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f022 0201 	bic.w	r2, r2, #1
 8008b64:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2220      	movs	r2, #32
 8008b6a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f7f8 ff9c 	bl	8001ab0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b78:	e007      	b.n	8008b8a <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	699a      	ldr	r2, [r3, #24]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f042 0208 	orr.w	r2, r2, #8
 8008b88:	619a      	str	r2, [r3, #24]
}
 8008b8a:	bf00      	nop
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}
	...

08008b94 <__errno>:
 8008b94:	4b01      	ldr	r3, [pc, #4]	; (8008b9c <__errno+0x8>)
 8008b96:	6818      	ldr	r0, [r3, #0]
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	20000010 	.word	0x20000010

08008ba0 <__libc_init_array>:
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	4e0d      	ldr	r6, [pc, #52]	; (8008bd8 <__libc_init_array+0x38>)
 8008ba4:	4c0d      	ldr	r4, [pc, #52]	; (8008bdc <__libc_init_array+0x3c>)
 8008ba6:	1ba4      	subs	r4, r4, r6
 8008ba8:	10a4      	asrs	r4, r4, #2
 8008baa:	2500      	movs	r5, #0
 8008bac:	42a5      	cmp	r5, r4
 8008bae:	d109      	bne.n	8008bc4 <__libc_init_array+0x24>
 8008bb0:	4e0b      	ldr	r6, [pc, #44]	; (8008be0 <__libc_init_array+0x40>)
 8008bb2:	4c0c      	ldr	r4, [pc, #48]	; (8008be4 <__libc_init_array+0x44>)
 8008bb4:	f000 fc26 	bl	8009404 <_init>
 8008bb8:	1ba4      	subs	r4, r4, r6
 8008bba:	10a4      	asrs	r4, r4, #2
 8008bbc:	2500      	movs	r5, #0
 8008bbe:	42a5      	cmp	r5, r4
 8008bc0:	d105      	bne.n	8008bce <__libc_init_array+0x2e>
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bc8:	4798      	blx	r3
 8008bca:	3501      	adds	r5, #1
 8008bcc:	e7ee      	b.n	8008bac <__libc_init_array+0xc>
 8008bce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bd2:	4798      	blx	r3
 8008bd4:	3501      	adds	r5, #1
 8008bd6:	e7f2      	b.n	8008bbe <__libc_init_array+0x1e>
 8008bd8:	0800948c 	.word	0x0800948c
 8008bdc:	0800948c 	.word	0x0800948c
 8008be0:	0800948c 	.word	0x0800948c
 8008be4:	08009490 	.word	0x08009490

08008be8 <memset>:
 8008be8:	4402      	add	r2, r0
 8008bea:	4603      	mov	r3, r0
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d100      	bne.n	8008bf2 <memset+0xa>
 8008bf0:	4770      	bx	lr
 8008bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8008bf6:	e7f9      	b.n	8008bec <memset+0x4>

08008bf8 <siprintf>:
 8008bf8:	b40e      	push	{r1, r2, r3}
 8008bfa:	b500      	push	{lr}
 8008bfc:	b09c      	sub	sp, #112	; 0x70
 8008bfe:	ab1d      	add	r3, sp, #116	; 0x74
 8008c00:	9002      	str	r0, [sp, #8]
 8008c02:	9006      	str	r0, [sp, #24]
 8008c04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c08:	4809      	ldr	r0, [pc, #36]	; (8008c30 <siprintf+0x38>)
 8008c0a:	9107      	str	r1, [sp, #28]
 8008c0c:	9104      	str	r1, [sp, #16]
 8008c0e:	4909      	ldr	r1, [pc, #36]	; (8008c34 <siprintf+0x3c>)
 8008c10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c14:	9105      	str	r1, [sp, #20]
 8008c16:	6800      	ldr	r0, [r0, #0]
 8008c18:	9301      	str	r3, [sp, #4]
 8008c1a:	a902      	add	r1, sp, #8
 8008c1c:	f000 f866 	bl	8008cec <_svfiprintf_r>
 8008c20:	9b02      	ldr	r3, [sp, #8]
 8008c22:	2200      	movs	r2, #0
 8008c24:	701a      	strb	r2, [r3, #0]
 8008c26:	b01c      	add	sp, #112	; 0x70
 8008c28:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c2c:	b003      	add	sp, #12
 8008c2e:	4770      	bx	lr
 8008c30:	20000010 	.word	0x20000010
 8008c34:	ffff0208 	.word	0xffff0208

08008c38 <__ssputs_r>:
 8008c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c3c:	688e      	ldr	r6, [r1, #8]
 8008c3e:	429e      	cmp	r6, r3
 8008c40:	4682      	mov	sl, r0
 8008c42:	460c      	mov	r4, r1
 8008c44:	4690      	mov	r8, r2
 8008c46:	4699      	mov	r9, r3
 8008c48:	d837      	bhi.n	8008cba <__ssputs_r+0x82>
 8008c4a:	898a      	ldrh	r2, [r1, #12]
 8008c4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c50:	d031      	beq.n	8008cb6 <__ssputs_r+0x7e>
 8008c52:	6825      	ldr	r5, [r4, #0]
 8008c54:	6909      	ldr	r1, [r1, #16]
 8008c56:	1a6f      	subs	r7, r5, r1
 8008c58:	6965      	ldr	r5, [r4, #20]
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c60:	fb95 f5f3 	sdiv	r5, r5, r3
 8008c64:	f109 0301 	add.w	r3, r9, #1
 8008c68:	443b      	add	r3, r7
 8008c6a:	429d      	cmp	r5, r3
 8008c6c:	bf38      	it	cc
 8008c6e:	461d      	movcc	r5, r3
 8008c70:	0553      	lsls	r3, r2, #21
 8008c72:	d530      	bpl.n	8008cd6 <__ssputs_r+0x9e>
 8008c74:	4629      	mov	r1, r5
 8008c76:	f000 fb2b 	bl	80092d0 <_malloc_r>
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	b950      	cbnz	r0, 8008c94 <__ssputs_r+0x5c>
 8008c7e:	230c      	movs	r3, #12
 8008c80:	f8ca 3000 	str.w	r3, [sl]
 8008c84:	89a3      	ldrh	r3, [r4, #12]
 8008c86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c8a:	81a3      	strh	r3, [r4, #12]
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c94:	463a      	mov	r2, r7
 8008c96:	6921      	ldr	r1, [r4, #16]
 8008c98:	f000 faa8 	bl	80091ec <memcpy>
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca6:	81a3      	strh	r3, [r4, #12]
 8008ca8:	6126      	str	r6, [r4, #16]
 8008caa:	6165      	str	r5, [r4, #20]
 8008cac:	443e      	add	r6, r7
 8008cae:	1bed      	subs	r5, r5, r7
 8008cb0:	6026      	str	r6, [r4, #0]
 8008cb2:	60a5      	str	r5, [r4, #8]
 8008cb4:	464e      	mov	r6, r9
 8008cb6:	454e      	cmp	r6, r9
 8008cb8:	d900      	bls.n	8008cbc <__ssputs_r+0x84>
 8008cba:	464e      	mov	r6, r9
 8008cbc:	4632      	mov	r2, r6
 8008cbe:	4641      	mov	r1, r8
 8008cc0:	6820      	ldr	r0, [r4, #0]
 8008cc2:	f000 fa9e 	bl	8009202 <memmove>
 8008cc6:	68a3      	ldr	r3, [r4, #8]
 8008cc8:	1b9b      	subs	r3, r3, r6
 8008cca:	60a3      	str	r3, [r4, #8]
 8008ccc:	6823      	ldr	r3, [r4, #0]
 8008cce:	441e      	add	r6, r3
 8008cd0:	6026      	str	r6, [r4, #0]
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	e7dc      	b.n	8008c90 <__ssputs_r+0x58>
 8008cd6:	462a      	mov	r2, r5
 8008cd8:	f000 fb54 	bl	8009384 <_realloc_r>
 8008cdc:	4606      	mov	r6, r0
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d1e2      	bne.n	8008ca8 <__ssputs_r+0x70>
 8008ce2:	6921      	ldr	r1, [r4, #16]
 8008ce4:	4650      	mov	r0, sl
 8008ce6:	f000 faa5 	bl	8009234 <_free_r>
 8008cea:	e7c8      	b.n	8008c7e <__ssputs_r+0x46>

08008cec <_svfiprintf_r>:
 8008cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cf0:	461d      	mov	r5, r3
 8008cf2:	898b      	ldrh	r3, [r1, #12]
 8008cf4:	061f      	lsls	r7, r3, #24
 8008cf6:	b09d      	sub	sp, #116	; 0x74
 8008cf8:	4680      	mov	r8, r0
 8008cfa:	460c      	mov	r4, r1
 8008cfc:	4616      	mov	r6, r2
 8008cfe:	d50f      	bpl.n	8008d20 <_svfiprintf_r+0x34>
 8008d00:	690b      	ldr	r3, [r1, #16]
 8008d02:	b96b      	cbnz	r3, 8008d20 <_svfiprintf_r+0x34>
 8008d04:	2140      	movs	r1, #64	; 0x40
 8008d06:	f000 fae3 	bl	80092d0 <_malloc_r>
 8008d0a:	6020      	str	r0, [r4, #0]
 8008d0c:	6120      	str	r0, [r4, #16]
 8008d0e:	b928      	cbnz	r0, 8008d1c <_svfiprintf_r+0x30>
 8008d10:	230c      	movs	r3, #12
 8008d12:	f8c8 3000 	str.w	r3, [r8]
 8008d16:	f04f 30ff 	mov.w	r0, #4294967295
 8008d1a:	e0c8      	b.n	8008eae <_svfiprintf_r+0x1c2>
 8008d1c:	2340      	movs	r3, #64	; 0x40
 8008d1e:	6163      	str	r3, [r4, #20]
 8008d20:	2300      	movs	r3, #0
 8008d22:	9309      	str	r3, [sp, #36]	; 0x24
 8008d24:	2320      	movs	r3, #32
 8008d26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d2a:	2330      	movs	r3, #48	; 0x30
 8008d2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d30:	9503      	str	r5, [sp, #12]
 8008d32:	f04f 0b01 	mov.w	fp, #1
 8008d36:	4637      	mov	r7, r6
 8008d38:	463d      	mov	r5, r7
 8008d3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008d3e:	b10b      	cbz	r3, 8008d44 <_svfiprintf_r+0x58>
 8008d40:	2b25      	cmp	r3, #37	; 0x25
 8008d42:	d13e      	bne.n	8008dc2 <_svfiprintf_r+0xd6>
 8008d44:	ebb7 0a06 	subs.w	sl, r7, r6
 8008d48:	d00b      	beq.n	8008d62 <_svfiprintf_r+0x76>
 8008d4a:	4653      	mov	r3, sl
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	4621      	mov	r1, r4
 8008d50:	4640      	mov	r0, r8
 8008d52:	f7ff ff71 	bl	8008c38 <__ssputs_r>
 8008d56:	3001      	adds	r0, #1
 8008d58:	f000 80a4 	beq.w	8008ea4 <_svfiprintf_r+0x1b8>
 8008d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5e:	4453      	add	r3, sl
 8008d60:	9309      	str	r3, [sp, #36]	; 0x24
 8008d62:	783b      	ldrb	r3, [r7, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 809d 	beq.w	8008ea4 <_svfiprintf_r+0x1b8>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d74:	9304      	str	r3, [sp, #16]
 8008d76:	9307      	str	r3, [sp, #28]
 8008d78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d7c:	931a      	str	r3, [sp, #104]	; 0x68
 8008d7e:	462f      	mov	r7, r5
 8008d80:	2205      	movs	r2, #5
 8008d82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008d86:	4850      	ldr	r0, [pc, #320]	; (8008ec8 <_svfiprintf_r+0x1dc>)
 8008d88:	f7f7 fa62 	bl	8000250 <memchr>
 8008d8c:	9b04      	ldr	r3, [sp, #16]
 8008d8e:	b9d0      	cbnz	r0, 8008dc6 <_svfiprintf_r+0xda>
 8008d90:	06d9      	lsls	r1, r3, #27
 8008d92:	bf44      	itt	mi
 8008d94:	2220      	movmi	r2, #32
 8008d96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008d9a:	071a      	lsls	r2, r3, #28
 8008d9c:	bf44      	itt	mi
 8008d9e:	222b      	movmi	r2, #43	; 0x2b
 8008da0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008da4:	782a      	ldrb	r2, [r5, #0]
 8008da6:	2a2a      	cmp	r2, #42	; 0x2a
 8008da8:	d015      	beq.n	8008dd6 <_svfiprintf_r+0xea>
 8008daa:	9a07      	ldr	r2, [sp, #28]
 8008dac:	462f      	mov	r7, r5
 8008dae:	2000      	movs	r0, #0
 8008db0:	250a      	movs	r5, #10
 8008db2:	4639      	mov	r1, r7
 8008db4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008db8:	3b30      	subs	r3, #48	; 0x30
 8008dba:	2b09      	cmp	r3, #9
 8008dbc:	d94d      	bls.n	8008e5a <_svfiprintf_r+0x16e>
 8008dbe:	b1b8      	cbz	r0, 8008df0 <_svfiprintf_r+0x104>
 8008dc0:	e00f      	b.n	8008de2 <_svfiprintf_r+0xf6>
 8008dc2:	462f      	mov	r7, r5
 8008dc4:	e7b8      	b.n	8008d38 <_svfiprintf_r+0x4c>
 8008dc6:	4a40      	ldr	r2, [pc, #256]	; (8008ec8 <_svfiprintf_r+0x1dc>)
 8008dc8:	1a80      	subs	r0, r0, r2
 8008dca:	fa0b f000 	lsl.w	r0, fp, r0
 8008dce:	4318      	orrs	r0, r3
 8008dd0:	9004      	str	r0, [sp, #16]
 8008dd2:	463d      	mov	r5, r7
 8008dd4:	e7d3      	b.n	8008d7e <_svfiprintf_r+0x92>
 8008dd6:	9a03      	ldr	r2, [sp, #12]
 8008dd8:	1d11      	adds	r1, r2, #4
 8008dda:	6812      	ldr	r2, [r2, #0]
 8008ddc:	9103      	str	r1, [sp, #12]
 8008dde:	2a00      	cmp	r2, #0
 8008de0:	db01      	blt.n	8008de6 <_svfiprintf_r+0xfa>
 8008de2:	9207      	str	r2, [sp, #28]
 8008de4:	e004      	b.n	8008df0 <_svfiprintf_r+0x104>
 8008de6:	4252      	negs	r2, r2
 8008de8:	f043 0302 	orr.w	r3, r3, #2
 8008dec:	9207      	str	r2, [sp, #28]
 8008dee:	9304      	str	r3, [sp, #16]
 8008df0:	783b      	ldrb	r3, [r7, #0]
 8008df2:	2b2e      	cmp	r3, #46	; 0x2e
 8008df4:	d10c      	bne.n	8008e10 <_svfiprintf_r+0x124>
 8008df6:	787b      	ldrb	r3, [r7, #1]
 8008df8:	2b2a      	cmp	r3, #42	; 0x2a
 8008dfa:	d133      	bne.n	8008e64 <_svfiprintf_r+0x178>
 8008dfc:	9b03      	ldr	r3, [sp, #12]
 8008dfe:	1d1a      	adds	r2, r3, #4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	9203      	str	r2, [sp, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	bfb8      	it	lt
 8008e08:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e0c:	3702      	adds	r7, #2
 8008e0e:	9305      	str	r3, [sp, #20]
 8008e10:	4d2e      	ldr	r5, [pc, #184]	; (8008ecc <_svfiprintf_r+0x1e0>)
 8008e12:	7839      	ldrb	r1, [r7, #0]
 8008e14:	2203      	movs	r2, #3
 8008e16:	4628      	mov	r0, r5
 8008e18:	f7f7 fa1a 	bl	8000250 <memchr>
 8008e1c:	b138      	cbz	r0, 8008e2e <_svfiprintf_r+0x142>
 8008e1e:	2340      	movs	r3, #64	; 0x40
 8008e20:	1b40      	subs	r0, r0, r5
 8008e22:	fa03 f000 	lsl.w	r0, r3, r0
 8008e26:	9b04      	ldr	r3, [sp, #16]
 8008e28:	4303      	orrs	r3, r0
 8008e2a:	3701      	adds	r7, #1
 8008e2c:	9304      	str	r3, [sp, #16]
 8008e2e:	7839      	ldrb	r1, [r7, #0]
 8008e30:	4827      	ldr	r0, [pc, #156]	; (8008ed0 <_svfiprintf_r+0x1e4>)
 8008e32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e36:	2206      	movs	r2, #6
 8008e38:	1c7e      	adds	r6, r7, #1
 8008e3a:	f7f7 fa09 	bl	8000250 <memchr>
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	d038      	beq.n	8008eb4 <_svfiprintf_r+0x1c8>
 8008e42:	4b24      	ldr	r3, [pc, #144]	; (8008ed4 <_svfiprintf_r+0x1e8>)
 8008e44:	bb13      	cbnz	r3, 8008e8c <_svfiprintf_r+0x1a0>
 8008e46:	9b03      	ldr	r3, [sp, #12]
 8008e48:	3307      	adds	r3, #7
 8008e4a:	f023 0307 	bic.w	r3, r3, #7
 8008e4e:	3308      	adds	r3, #8
 8008e50:	9303      	str	r3, [sp, #12]
 8008e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e54:	444b      	add	r3, r9
 8008e56:	9309      	str	r3, [sp, #36]	; 0x24
 8008e58:	e76d      	b.n	8008d36 <_svfiprintf_r+0x4a>
 8008e5a:	fb05 3202 	mla	r2, r5, r2, r3
 8008e5e:	2001      	movs	r0, #1
 8008e60:	460f      	mov	r7, r1
 8008e62:	e7a6      	b.n	8008db2 <_svfiprintf_r+0xc6>
 8008e64:	2300      	movs	r3, #0
 8008e66:	3701      	adds	r7, #1
 8008e68:	9305      	str	r3, [sp, #20]
 8008e6a:	4619      	mov	r1, r3
 8008e6c:	250a      	movs	r5, #10
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e74:	3a30      	subs	r2, #48	; 0x30
 8008e76:	2a09      	cmp	r2, #9
 8008e78:	d903      	bls.n	8008e82 <_svfiprintf_r+0x196>
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d0c8      	beq.n	8008e10 <_svfiprintf_r+0x124>
 8008e7e:	9105      	str	r1, [sp, #20]
 8008e80:	e7c6      	b.n	8008e10 <_svfiprintf_r+0x124>
 8008e82:	fb05 2101 	mla	r1, r5, r1, r2
 8008e86:	2301      	movs	r3, #1
 8008e88:	4607      	mov	r7, r0
 8008e8a:	e7f0      	b.n	8008e6e <_svfiprintf_r+0x182>
 8008e8c:	ab03      	add	r3, sp, #12
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	4622      	mov	r2, r4
 8008e92:	4b11      	ldr	r3, [pc, #68]	; (8008ed8 <_svfiprintf_r+0x1ec>)
 8008e94:	a904      	add	r1, sp, #16
 8008e96:	4640      	mov	r0, r8
 8008e98:	f3af 8000 	nop.w
 8008e9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008ea0:	4681      	mov	r9, r0
 8008ea2:	d1d6      	bne.n	8008e52 <_svfiprintf_r+0x166>
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	065b      	lsls	r3, r3, #25
 8008ea8:	f53f af35 	bmi.w	8008d16 <_svfiprintf_r+0x2a>
 8008eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eae:	b01d      	add	sp, #116	; 0x74
 8008eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb4:	ab03      	add	r3, sp, #12
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	4622      	mov	r2, r4
 8008eba:	4b07      	ldr	r3, [pc, #28]	; (8008ed8 <_svfiprintf_r+0x1ec>)
 8008ebc:	a904      	add	r1, sp, #16
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	f000 f882 	bl	8008fc8 <_printf_i>
 8008ec4:	e7ea      	b.n	8008e9c <_svfiprintf_r+0x1b0>
 8008ec6:	bf00      	nop
 8008ec8:	08009450 	.word	0x08009450
 8008ecc:	08009456 	.word	0x08009456
 8008ed0:	0800945a 	.word	0x0800945a
 8008ed4:	00000000 	.word	0x00000000
 8008ed8:	08008c39 	.word	0x08008c39

08008edc <_printf_common>:
 8008edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ee0:	4691      	mov	r9, r2
 8008ee2:	461f      	mov	r7, r3
 8008ee4:	688a      	ldr	r2, [r1, #8]
 8008ee6:	690b      	ldr	r3, [r1, #16]
 8008ee8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008eec:	4293      	cmp	r3, r2
 8008eee:	bfb8      	it	lt
 8008ef0:	4613      	movlt	r3, r2
 8008ef2:	f8c9 3000 	str.w	r3, [r9]
 8008ef6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008efa:	4606      	mov	r6, r0
 8008efc:	460c      	mov	r4, r1
 8008efe:	b112      	cbz	r2, 8008f06 <_printf_common+0x2a>
 8008f00:	3301      	adds	r3, #1
 8008f02:	f8c9 3000 	str.w	r3, [r9]
 8008f06:	6823      	ldr	r3, [r4, #0]
 8008f08:	0699      	lsls	r1, r3, #26
 8008f0a:	bf42      	ittt	mi
 8008f0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008f10:	3302      	addmi	r3, #2
 8008f12:	f8c9 3000 	strmi.w	r3, [r9]
 8008f16:	6825      	ldr	r5, [r4, #0]
 8008f18:	f015 0506 	ands.w	r5, r5, #6
 8008f1c:	d107      	bne.n	8008f2e <_printf_common+0x52>
 8008f1e:	f104 0a19 	add.w	sl, r4, #25
 8008f22:	68e3      	ldr	r3, [r4, #12]
 8008f24:	f8d9 2000 	ldr.w	r2, [r9]
 8008f28:	1a9b      	subs	r3, r3, r2
 8008f2a:	42ab      	cmp	r3, r5
 8008f2c:	dc28      	bgt.n	8008f80 <_printf_common+0xa4>
 8008f2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008f32:	6822      	ldr	r2, [r4, #0]
 8008f34:	3300      	adds	r3, #0
 8008f36:	bf18      	it	ne
 8008f38:	2301      	movne	r3, #1
 8008f3a:	0692      	lsls	r2, r2, #26
 8008f3c:	d42d      	bmi.n	8008f9a <_printf_common+0xbe>
 8008f3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f42:	4639      	mov	r1, r7
 8008f44:	4630      	mov	r0, r6
 8008f46:	47c0      	blx	r8
 8008f48:	3001      	adds	r0, #1
 8008f4a:	d020      	beq.n	8008f8e <_printf_common+0xb2>
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	68e5      	ldr	r5, [r4, #12]
 8008f50:	f8d9 2000 	ldr.w	r2, [r9]
 8008f54:	f003 0306 	and.w	r3, r3, #6
 8008f58:	2b04      	cmp	r3, #4
 8008f5a:	bf08      	it	eq
 8008f5c:	1aad      	subeq	r5, r5, r2
 8008f5e:	68a3      	ldr	r3, [r4, #8]
 8008f60:	6922      	ldr	r2, [r4, #16]
 8008f62:	bf0c      	ite	eq
 8008f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f68:	2500      	movne	r5, #0
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	bfc4      	itt	gt
 8008f6e:	1a9b      	subgt	r3, r3, r2
 8008f70:	18ed      	addgt	r5, r5, r3
 8008f72:	f04f 0900 	mov.w	r9, #0
 8008f76:	341a      	adds	r4, #26
 8008f78:	454d      	cmp	r5, r9
 8008f7a:	d11a      	bne.n	8008fb2 <_printf_common+0xd6>
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	e008      	b.n	8008f92 <_printf_common+0xb6>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4652      	mov	r2, sl
 8008f84:	4639      	mov	r1, r7
 8008f86:	4630      	mov	r0, r6
 8008f88:	47c0      	blx	r8
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d103      	bne.n	8008f96 <_printf_common+0xba>
 8008f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f96:	3501      	adds	r5, #1
 8008f98:	e7c3      	b.n	8008f22 <_printf_common+0x46>
 8008f9a:	18e1      	adds	r1, r4, r3
 8008f9c:	1c5a      	adds	r2, r3, #1
 8008f9e:	2030      	movs	r0, #48	; 0x30
 8008fa0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fa4:	4422      	add	r2, r4
 8008fa6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008faa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008fae:	3302      	adds	r3, #2
 8008fb0:	e7c5      	b.n	8008f3e <_printf_common+0x62>
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4622      	mov	r2, r4
 8008fb6:	4639      	mov	r1, r7
 8008fb8:	4630      	mov	r0, r6
 8008fba:	47c0      	blx	r8
 8008fbc:	3001      	adds	r0, #1
 8008fbe:	d0e6      	beq.n	8008f8e <_printf_common+0xb2>
 8008fc0:	f109 0901 	add.w	r9, r9, #1
 8008fc4:	e7d8      	b.n	8008f78 <_printf_common+0x9c>
	...

08008fc8 <_printf_i>:
 8008fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008fcc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008fd0:	460c      	mov	r4, r1
 8008fd2:	7e09      	ldrb	r1, [r1, #24]
 8008fd4:	b085      	sub	sp, #20
 8008fd6:	296e      	cmp	r1, #110	; 0x6e
 8008fd8:	4617      	mov	r7, r2
 8008fda:	4606      	mov	r6, r0
 8008fdc:	4698      	mov	r8, r3
 8008fde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008fe0:	f000 80b3 	beq.w	800914a <_printf_i+0x182>
 8008fe4:	d822      	bhi.n	800902c <_printf_i+0x64>
 8008fe6:	2963      	cmp	r1, #99	; 0x63
 8008fe8:	d036      	beq.n	8009058 <_printf_i+0x90>
 8008fea:	d80a      	bhi.n	8009002 <_printf_i+0x3a>
 8008fec:	2900      	cmp	r1, #0
 8008fee:	f000 80b9 	beq.w	8009164 <_printf_i+0x19c>
 8008ff2:	2958      	cmp	r1, #88	; 0x58
 8008ff4:	f000 8083 	beq.w	80090fe <_printf_i+0x136>
 8008ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ffc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009000:	e032      	b.n	8009068 <_printf_i+0xa0>
 8009002:	2964      	cmp	r1, #100	; 0x64
 8009004:	d001      	beq.n	800900a <_printf_i+0x42>
 8009006:	2969      	cmp	r1, #105	; 0x69
 8009008:	d1f6      	bne.n	8008ff8 <_printf_i+0x30>
 800900a:	6820      	ldr	r0, [r4, #0]
 800900c:	6813      	ldr	r3, [r2, #0]
 800900e:	0605      	lsls	r5, r0, #24
 8009010:	f103 0104 	add.w	r1, r3, #4
 8009014:	d52a      	bpl.n	800906c <_printf_i+0xa4>
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6011      	str	r1, [r2, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	da03      	bge.n	8009026 <_printf_i+0x5e>
 800901e:	222d      	movs	r2, #45	; 0x2d
 8009020:	425b      	negs	r3, r3
 8009022:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009026:	486f      	ldr	r0, [pc, #444]	; (80091e4 <_printf_i+0x21c>)
 8009028:	220a      	movs	r2, #10
 800902a:	e039      	b.n	80090a0 <_printf_i+0xd8>
 800902c:	2973      	cmp	r1, #115	; 0x73
 800902e:	f000 809d 	beq.w	800916c <_printf_i+0x1a4>
 8009032:	d808      	bhi.n	8009046 <_printf_i+0x7e>
 8009034:	296f      	cmp	r1, #111	; 0x6f
 8009036:	d020      	beq.n	800907a <_printf_i+0xb2>
 8009038:	2970      	cmp	r1, #112	; 0x70
 800903a:	d1dd      	bne.n	8008ff8 <_printf_i+0x30>
 800903c:	6823      	ldr	r3, [r4, #0]
 800903e:	f043 0320 	orr.w	r3, r3, #32
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	e003      	b.n	800904e <_printf_i+0x86>
 8009046:	2975      	cmp	r1, #117	; 0x75
 8009048:	d017      	beq.n	800907a <_printf_i+0xb2>
 800904a:	2978      	cmp	r1, #120	; 0x78
 800904c:	d1d4      	bne.n	8008ff8 <_printf_i+0x30>
 800904e:	2378      	movs	r3, #120	; 0x78
 8009050:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009054:	4864      	ldr	r0, [pc, #400]	; (80091e8 <_printf_i+0x220>)
 8009056:	e055      	b.n	8009104 <_printf_i+0x13c>
 8009058:	6813      	ldr	r3, [r2, #0]
 800905a:	1d19      	adds	r1, r3, #4
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	6011      	str	r1, [r2, #0]
 8009060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009064:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009068:	2301      	movs	r3, #1
 800906a:	e08c      	b.n	8009186 <_printf_i+0x1be>
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	6011      	str	r1, [r2, #0]
 8009070:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009074:	bf18      	it	ne
 8009076:	b21b      	sxthne	r3, r3
 8009078:	e7cf      	b.n	800901a <_printf_i+0x52>
 800907a:	6813      	ldr	r3, [r2, #0]
 800907c:	6825      	ldr	r5, [r4, #0]
 800907e:	1d18      	adds	r0, r3, #4
 8009080:	6010      	str	r0, [r2, #0]
 8009082:	0628      	lsls	r0, r5, #24
 8009084:	d501      	bpl.n	800908a <_printf_i+0xc2>
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	e002      	b.n	8009090 <_printf_i+0xc8>
 800908a:	0668      	lsls	r0, r5, #25
 800908c:	d5fb      	bpl.n	8009086 <_printf_i+0xbe>
 800908e:	881b      	ldrh	r3, [r3, #0]
 8009090:	4854      	ldr	r0, [pc, #336]	; (80091e4 <_printf_i+0x21c>)
 8009092:	296f      	cmp	r1, #111	; 0x6f
 8009094:	bf14      	ite	ne
 8009096:	220a      	movne	r2, #10
 8009098:	2208      	moveq	r2, #8
 800909a:	2100      	movs	r1, #0
 800909c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80090a0:	6865      	ldr	r5, [r4, #4]
 80090a2:	60a5      	str	r5, [r4, #8]
 80090a4:	2d00      	cmp	r5, #0
 80090a6:	f2c0 8095 	blt.w	80091d4 <_printf_i+0x20c>
 80090aa:	6821      	ldr	r1, [r4, #0]
 80090ac:	f021 0104 	bic.w	r1, r1, #4
 80090b0:	6021      	str	r1, [r4, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d13d      	bne.n	8009132 <_printf_i+0x16a>
 80090b6:	2d00      	cmp	r5, #0
 80090b8:	f040 808e 	bne.w	80091d8 <_printf_i+0x210>
 80090bc:	4665      	mov	r5, ip
 80090be:	2a08      	cmp	r2, #8
 80090c0:	d10b      	bne.n	80090da <_printf_i+0x112>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	07db      	lsls	r3, r3, #31
 80090c6:	d508      	bpl.n	80090da <_printf_i+0x112>
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	6862      	ldr	r2, [r4, #4]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	bfde      	ittt	le
 80090d0:	2330      	movle	r3, #48	; 0x30
 80090d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80090d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80090da:	ebac 0305 	sub.w	r3, ip, r5
 80090de:	6123      	str	r3, [r4, #16]
 80090e0:	f8cd 8000 	str.w	r8, [sp]
 80090e4:	463b      	mov	r3, r7
 80090e6:	aa03      	add	r2, sp, #12
 80090e8:	4621      	mov	r1, r4
 80090ea:	4630      	mov	r0, r6
 80090ec:	f7ff fef6 	bl	8008edc <_printf_common>
 80090f0:	3001      	adds	r0, #1
 80090f2:	d14d      	bne.n	8009190 <_printf_i+0x1c8>
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295
 80090f8:	b005      	add	sp, #20
 80090fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090fe:	4839      	ldr	r0, [pc, #228]	; (80091e4 <_printf_i+0x21c>)
 8009100:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009104:	6813      	ldr	r3, [r2, #0]
 8009106:	6821      	ldr	r1, [r4, #0]
 8009108:	1d1d      	adds	r5, r3, #4
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6015      	str	r5, [r2, #0]
 800910e:	060a      	lsls	r2, r1, #24
 8009110:	d50b      	bpl.n	800912a <_printf_i+0x162>
 8009112:	07ca      	lsls	r2, r1, #31
 8009114:	bf44      	itt	mi
 8009116:	f041 0120 	orrmi.w	r1, r1, #32
 800911a:	6021      	strmi	r1, [r4, #0]
 800911c:	b91b      	cbnz	r3, 8009126 <_printf_i+0x15e>
 800911e:	6822      	ldr	r2, [r4, #0]
 8009120:	f022 0220 	bic.w	r2, r2, #32
 8009124:	6022      	str	r2, [r4, #0]
 8009126:	2210      	movs	r2, #16
 8009128:	e7b7      	b.n	800909a <_printf_i+0xd2>
 800912a:	064d      	lsls	r5, r1, #25
 800912c:	bf48      	it	mi
 800912e:	b29b      	uxthmi	r3, r3
 8009130:	e7ef      	b.n	8009112 <_printf_i+0x14a>
 8009132:	4665      	mov	r5, ip
 8009134:	fbb3 f1f2 	udiv	r1, r3, r2
 8009138:	fb02 3311 	mls	r3, r2, r1, r3
 800913c:	5cc3      	ldrb	r3, [r0, r3]
 800913e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009142:	460b      	mov	r3, r1
 8009144:	2900      	cmp	r1, #0
 8009146:	d1f5      	bne.n	8009134 <_printf_i+0x16c>
 8009148:	e7b9      	b.n	80090be <_printf_i+0xf6>
 800914a:	6813      	ldr	r3, [r2, #0]
 800914c:	6825      	ldr	r5, [r4, #0]
 800914e:	6961      	ldr	r1, [r4, #20]
 8009150:	1d18      	adds	r0, r3, #4
 8009152:	6010      	str	r0, [r2, #0]
 8009154:	0628      	lsls	r0, r5, #24
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	d501      	bpl.n	800915e <_printf_i+0x196>
 800915a:	6019      	str	r1, [r3, #0]
 800915c:	e002      	b.n	8009164 <_printf_i+0x19c>
 800915e:	066a      	lsls	r2, r5, #25
 8009160:	d5fb      	bpl.n	800915a <_printf_i+0x192>
 8009162:	8019      	strh	r1, [r3, #0]
 8009164:	2300      	movs	r3, #0
 8009166:	6123      	str	r3, [r4, #16]
 8009168:	4665      	mov	r5, ip
 800916a:	e7b9      	b.n	80090e0 <_printf_i+0x118>
 800916c:	6813      	ldr	r3, [r2, #0]
 800916e:	1d19      	adds	r1, r3, #4
 8009170:	6011      	str	r1, [r2, #0]
 8009172:	681d      	ldr	r5, [r3, #0]
 8009174:	6862      	ldr	r2, [r4, #4]
 8009176:	2100      	movs	r1, #0
 8009178:	4628      	mov	r0, r5
 800917a:	f7f7 f869 	bl	8000250 <memchr>
 800917e:	b108      	cbz	r0, 8009184 <_printf_i+0x1bc>
 8009180:	1b40      	subs	r0, r0, r5
 8009182:	6060      	str	r0, [r4, #4]
 8009184:	6863      	ldr	r3, [r4, #4]
 8009186:	6123      	str	r3, [r4, #16]
 8009188:	2300      	movs	r3, #0
 800918a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800918e:	e7a7      	b.n	80090e0 <_printf_i+0x118>
 8009190:	6923      	ldr	r3, [r4, #16]
 8009192:	462a      	mov	r2, r5
 8009194:	4639      	mov	r1, r7
 8009196:	4630      	mov	r0, r6
 8009198:	47c0      	blx	r8
 800919a:	3001      	adds	r0, #1
 800919c:	d0aa      	beq.n	80090f4 <_printf_i+0x12c>
 800919e:	6823      	ldr	r3, [r4, #0]
 80091a0:	079b      	lsls	r3, r3, #30
 80091a2:	d413      	bmi.n	80091cc <_printf_i+0x204>
 80091a4:	68e0      	ldr	r0, [r4, #12]
 80091a6:	9b03      	ldr	r3, [sp, #12]
 80091a8:	4298      	cmp	r0, r3
 80091aa:	bfb8      	it	lt
 80091ac:	4618      	movlt	r0, r3
 80091ae:	e7a3      	b.n	80090f8 <_printf_i+0x130>
 80091b0:	2301      	movs	r3, #1
 80091b2:	464a      	mov	r2, r9
 80091b4:	4639      	mov	r1, r7
 80091b6:	4630      	mov	r0, r6
 80091b8:	47c0      	blx	r8
 80091ba:	3001      	adds	r0, #1
 80091bc:	d09a      	beq.n	80090f4 <_printf_i+0x12c>
 80091be:	3501      	adds	r5, #1
 80091c0:	68e3      	ldr	r3, [r4, #12]
 80091c2:	9a03      	ldr	r2, [sp, #12]
 80091c4:	1a9b      	subs	r3, r3, r2
 80091c6:	42ab      	cmp	r3, r5
 80091c8:	dcf2      	bgt.n	80091b0 <_printf_i+0x1e8>
 80091ca:	e7eb      	b.n	80091a4 <_printf_i+0x1dc>
 80091cc:	2500      	movs	r5, #0
 80091ce:	f104 0919 	add.w	r9, r4, #25
 80091d2:	e7f5      	b.n	80091c0 <_printf_i+0x1f8>
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1ac      	bne.n	8009132 <_printf_i+0x16a>
 80091d8:	7803      	ldrb	r3, [r0, #0]
 80091da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091e2:	e76c      	b.n	80090be <_printf_i+0xf6>
 80091e4:	08009461 	.word	0x08009461
 80091e8:	08009472 	.word	0x08009472

080091ec <memcpy>:
 80091ec:	b510      	push	{r4, lr}
 80091ee:	1e43      	subs	r3, r0, #1
 80091f0:	440a      	add	r2, r1
 80091f2:	4291      	cmp	r1, r2
 80091f4:	d100      	bne.n	80091f8 <memcpy+0xc>
 80091f6:	bd10      	pop	{r4, pc}
 80091f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009200:	e7f7      	b.n	80091f2 <memcpy+0x6>

08009202 <memmove>:
 8009202:	4288      	cmp	r0, r1
 8009204:	b510      	push	{r4, lr}
 8009206:	eb01 0302 	add.w	r3, r1, r2
 800920a:	d807      	bhi.n	800921c <memmove+0x1a>
 800920c:	1e42      	subs	r2, r0, #1
 800920e:	4299      	cmp	r1, r3
 8009210:	d00a      	beq.n	8009228 <memmove+0x26>
 8009212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009216:	f802 4f01 	strb.w	r4, [r2, #1]!
 800921a:	e7f8      	b.n	800920e <memmove+0xc>
 800921c:	4283      	cmp	r3, r0
 800921e:	d9f5      	bls.n	800920c <memmove+0xa>
 8009220:	1881      	adds	r1, r0, r2
 8009222:	1ad2      	subs	r2, r2, r3
 8009224:	42d3      	cmn	r3, r2
 8009226:	d100      	bne.n	800922a <memmove+0x28>
 8009228:	bd10      	pop	{r4, pc}
 800922a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800922e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009232:	e7f7      	b.n	8009224 <memmove+0x22>

08009234 <_free_r>:
 8009234:	b538      	push	{r3, r4, r5, lr}
 8009236:	4605      	mov	r5, r0
 8009238:	2900      	cmp	r1, #0
 800923a:	d045      	beq.n	80092c8 <_free_r+0x94>
 800923c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009240:	1f0c      	subs	r4, r1, #4
 8009242:	2b00      	cmp	r3, #0
 8009244:	bfb8      	it	lt
 8009246:	18e4      	addlt	r4, r4, r3
 8009248:	f000 f8d2 	bl	80093f0 <__malloc_lock>
 800924c:	4a1f      	ldr	r2, [pc, #124]	; (80092cc <_free_r+0x98>)
 800924e:	6813      	ldr	r3, [r2, #0]
 8009250:	4610      	mov	r0, r2
 8009252:	b933      	cbnz	r3, 8009262 <_free_r+0x2e>
 8009254:	6063      	str	r3, [r4, #4]
 8009256:	6014      	str	r4, [r2, #0]
 8009258:	4628      	mov	r0, r5
 800925a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800925e:	f000 b8c8 	b.w	80093f2 <__malloc_unlock>
 8009262:	42a3      	cmp	r3, r4
 8009264:	d90c      	bls.n	8009280 <_free_r+0x4c>
 8009266:	6821      	ldr	r1, [r4, #0]
 8009268:	1862      	adds	r2, r4, r1
 800926a:	4293      	cmp	r3, r2
 800926c:	bf04      	itt	eq
 800926e:	681a      	ldreq	r2, [r3, #0]
 8009270:	685b      	ldreq	r3, [r3, #4]
 8009272:	6063      	str	r3, [r4, #4]
 8009274:	bf04      	itt	eq
 8009276:	1852      	addeq	r2, r2, r1
 8009278:	6022      	streq	r2, [r4, #0]
 800927a:	6004      	str	r4, [r0, #0]
 800927c:	e7ec      	b.n	8009258 <_free_r+0x24>
 800927e:	4613      	mov	r3, r2
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	b10a      	cbz	r2, 8009288 <_free_r+0x54>
 8009284:	42a2      	cmp	r2, r4
 8009286:	d9fa      	bls.n	800927e <_free_r+0x4a>
 8009288:	6819      	ldr	r1, [r3, #0]
 800928a:	1858      	adds	r0, r3, r1
 800928c:	42a0      	cmp	r0, r4
 800928e:	d10b      	bne.n	80092a8 <_free_r+0x74>
 8009290:	6820      	ldr	r0, [r4, #0]
 8009292:	4401      	add	r1, r0
 8009294:	1858      	adds	r0, r3, r1
 8009296:	4282      	cmp	r2, r0
 8009298:	6019      	str	r1, [r3, #0]
 800929a:	d1dd      	bne.n	8009258 <_free_r+0x24>
 800929c:	6810      	ldr	r0, [r2, #0]
 800929e:	6852      	ldr	r2, [r2, #4]
 80092a0:	605a      	str	r2, [r3, #4]
 80092a2:	4401      	add	r1, r0
 80092a4:	6019      	str	r1, [r3, #0]
 80092a6:	e7d7      	b.n	8009258 <_free_r+0x24>
 80092a8:	d902      	bls.n	80092b0 <_free_r+0x7c>
 80092aa:	230c      	movs	r3, #12
 80092ac:	602b      	str	r3, [r5, #0]
 80092ae:	e7d3      	b.n	8009258 <_free_r+0x24>
 80092b0:	6820      	ldr	r0, [r4, #0]
 80092b2:	1821      	adds	r1, r4, r0
 80092b4:	428a      	cmp	r2, r1
 80092b6:	bf04      	itt	eq
 80092b8:	6811      	ldreq	r1, [r2, #0]
 80092ba:	6852      	ldreq	r2, [r2, #4]
 80092bc:	6062      	str	r2, [r4, #4]
 80092be:	bf04      	itt	eq
 80092c0:	1809      	addeq	r1, r1, r0
 80092c2:	6021      	streq	r1, [r4, #0]
 80092c4:	605c      	str	r4, [r3, #4]
 80092c6:	e7c7      	b.n	8009258 <_free_r+0x24>
 80092c8:	bd38      	pop	{r3, r4, r5, pc}
 80092ca:	bf00      	nop
 80092cc:	2000009c 	.word	0x2000009c

080092d0 <_malloc_r>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	1ccd      	adds	r5, r1, #3
 80092d4:	f025 0503 	bic.w	r5, r5, #3
 80092d8:	3508      	adds	r5, #8
 80092da:	2d0c      	cmp	r5, #12
 80092dc:	bf38      	it	cc
 80092de:	250c      	movcc	r5, #12
 80092e0:	2d00      	cmp	r5, #0
 80092e2:	4606      	mov	r6, r0
 80092e4:	db01      	blt.n	80092ea <_malloc_r+0x1a>
 80092e6:	42a9      	cmp	r1, r5
 80092e8:	d903      	bls.n	80092f2 <_malloc_r+0x22>
 80092ea:	230c      	movs	r3, #12
 80092ec:	6033      	str	r3, [r6, #0]
 80092ee:	2000      	movs	r0, #0
 80092f0:	bd70      	pop	{r4, r5, r6, pc}
 80092f2:	f000 f87d 	bl	80093f0 <__malloc_lock>
 80092f6:	4a21      	ldr	r2, [pc, #132]	; (800937c <_malloc_r+0xac>)
 80092f8:	6814      	ldr	r4, [r2, #0]
 80092fa:	4621      	mov	r1, r4
 80092fc:	b991      	cbnz	r1, 8009324 <_malloc_r+0x54>
 80092fe:	4c20      	ldr	r4, [pc, #128]	; (8009380 <_malloc_r+0xb0>)
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	b91b      	cbnz	r3, 800930c <_malloc_r+0x3c>
 8009304:	4630      	mov	r0, r6
 8009306:	f000 f863 	bl	80093d0 <_sbrk_r>
 800930a:	6020      	str	r0, [r4, #0]
 800930c:	4629      	mov	r1, r5
 800930e:	4630      	mov	r0, r6
 8009310:	f000 f85e 	bl	80093d0 <_sbrk_r>
 8009314:	1c43      	adds	r3, r0, #1
 8009316:	d124      	bne.n	8009362 <_malloc_r+0x92>
 8009318:	230c      	movs	r3, #12
 800931a:	6033      	str	r3, [r6, #0]
 800931c:	4630      	mov	r0, r6
 800931e:	f000 f868 	bl	80093f2 <__malloc_unlock>
 8009322:	e7e4      	b.n	80092ee <_malloc_r+0x1e>
 8009324:	680b      	ldr	r3, [r1, #0]
 8009326:	1b5b      	subs	r3, r3, r5
 8009328:	d418      	bmi.n	800935c <_malloc_r+0x8c>
 800932a:	2b0b      	cmp	r3, #11
 800932c:	d90f      	bls.n	800934e <_malloc_r+0x7e>
 800932e:	600b      	str	r3, [r1, #0]
 8009330:	50cd      	str	r5, [r1, r3]
 8009332:	18cc      	adds	r4, r1, r3
 8009334:	4630      	mov	r0, r6
 8009336:	f000 f85c 	bl	80093f2 <__malloc_unlock>
 800933a:	f104 000b 	add.w	r0, r4, #11
 800933e:	1d23      	adds	r3, r4, #4
 8009340:	f020 0007 	bic.w	r0, r0, #7
 8009344:	1ac3      	subs	r3, r0, r3
 8009346:	d0d3      	beq.n	80092f0 <_malloc_r+0x20>
 8009348:	425a      	negs	r2, r3
 800934a:	50e2      	str	r2, [r4, r3]
 800934c:	e7d0      	b.n	80092f0 <_malloc_r+0x20>
 800934e:	428c      	cmp	r4, r1
 8009350:	684b      	ldr	r3, [r1, #4]
 8009352:	bf16      	itet	ne
 8009354:	6063      	strne	r3, [r4, #4]
 8009356:	6013      	streq	r3, [r2, #0]
 8009358:	460c      	movne	r4, r1
 800935a:	e7eb      	b.n	8009334 <_malloc_r+0x64>
 800935c:	460c      	mov	r4, r1
 800935e:	6849      	ldr	r1, [r1, #4]
 8009360:	e7cc      	b.n	80092fc <_malloc_r+0x2c>
 8009362:	1cc4      	adds	r4, r0, #3
 8009364:	f024 0403 	bic.w	r4, r4, #3
 8009368:	42a0      	cmp	r0, r4
 800936a:	d005      	beq.n	8009378 <_malloc_r+0xa8>
 800936c:	1a21      	subs	r1, r4, r0
 800936e:	4630      	mov	r0, r6
 8009370:	f000 f82e 	bl	80093d0 <_sbrk_r>
 8009374:	3001      	adds	r0, #1
 8009376:	d0cf      	beq.n	8009318 <_malloc_r+0x48>
 8009378:	6025      	str	r5, [r4, #0]
 800937a:	e7db      	b.n	8009334 <_malloc_r+0x64>
 800937c:	2000009c 	.word	0x2000009c
 8009380:	200000a0 	.word	0x200000a0

08009384 <_realloc_r>:
 8009384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009386:	4607      	mov	r7, r0
 8009388:	4614      	mov	r4, r2
 800938a:	460e      	mov	r6, r1
 800938c:	b921      	cbnz	r1, 8009398 <_realloc_r+0x14>
 800938e:	4611      	mov	r1, r2
 8009390:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009394:	f7ff bf9c 	b.w	80092d0 <_malloc_r>
 8009398:	b922      	cbnz	r2, 80093a4 <_realloc_r+0x20>
 800939a:	f7ff ff4b 	bl	8009234 <_free_r>
 800939e:	4625      	mov	r5, r4
 80093a0:	4628      	mov	r0, r5
 80093a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a4:	f000 f826 	bl	80093f4 <_malloc_usable_size_r>
 80093a8:	42a0      	cmp	r0, r4
 80093aa:	d20f      	bcs.n	80093cc <_realloc_r+0x48>
 80093ac:	4621      	mov	r1, r4
 80093ae:	4638      	mov	r0, r7
 80093b0:	f7ff ff8e 	bl	80092d0 <_malloc_r>
 80093b4:	4605      	mov	r5, r0
 80093b6:	2800      	cmp	r0, #0
 80093b8:	d0f2      	beq.n	80093a0 <_realloc_r+0x1c>
 80093ba:	4631      	mov	r1, r6
 80093bc:	4622      	mov	r2, r4
 80093be:	f7ff ff15 	bl	80091ec <memcpy>
 80093c2:	4631      	mov	r1, r6
 80093c4:	4638      	mov	r0, r7
 80093c6:	f7ff ff35 	bl	8009234 <_free_r>
 80093ca:	e7e9      	b.n	80093a0 <_realloc_r+0x1c>
 80093cc:	4635      	mov	r5, r6
 80093ce:	e7e7      	b.n	80093a0 <_realloc_r+0x1c>

080093d0 <_sbrk_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4c06      	ldr	r4, [pc, #24]	; (80093ec <_sbrk_r+0x1c>)
 80093d4:	2300      	movs	r3, #0
 80093d6:	4605      	mov	r5, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	6023      	str	r3, [r4, #0]
 80093dc:	f7f9 f9de 	bl	800279c <_sbrk>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_sbrk_r+0x1a>
 80093e4:	6823      	ldr	r3, [r4, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_sbrk_r+0x1a>
 80093e8:	602b      	str	r3, [r5, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	200335d0 	.word	0x200335d0

080093f0 <__malloc_lock>:
 80093f0:	4770      	bx	lr

080093f2 <__malloc_unlock>:
 80093f2:	4770      	bx	lr

080093f4 <_malloc_usable_size_r>:
 80093f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093f8:	1f18      	subs	r0, r3, #4
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	bfbc      	itt	lt
 80093fe:	580b      	ldrlt	r3, [r1, r0]
 8009400:	18c0      	addlt	r0, r0, r3
 8009402:	4770      	bx	lr

08009404 <_init>:
 8009404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009406:	bf00      	nop
 8009408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800940a:	bc08      	pop	{r3}
 800940c:	469e      	mov	lr, r3
 800940e:	4770      	bx	lr

08009410 <_fini>:
 8009410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009412:	bf00      	nop
 8009414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009416:	bc08      	pop	{r3}
 8009418:	469e      	mov	lr, r3
 800941a:	4770      	bx	lr
