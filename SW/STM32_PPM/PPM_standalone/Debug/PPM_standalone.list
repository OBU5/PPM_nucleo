
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087c0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080089c0  080089c0  000189c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a20  08008a20  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008a20  08008a20  00018a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a28  08008a28  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a28  08008a28  00018a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a2c  08008a2c  00018a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002b714  20000074  08008aa4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2002b788  08008aa4  0002b788  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150a8  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002883  00000000  00000000  0003514a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001480  00000000  00000000  000379d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001350  00000000  00000000  00038e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000297be  00000000  00000000  0003a1a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f640  00000000  00000000  0006395e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001035bb  00000000  00000000  00072f9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176559  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a38  00000000  00000000  001765d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	080089a8 	.word	0x080089a8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	080089a8 	.word	0x080089a8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b088      	sub	sp, #32
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f001 ffa4 	bl	8002542 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f841 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 fe1b 	bl	8001238 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000602:	f000 f8df 	bl	80007c4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000606:	f000 f9af 	bl	8000968 <MX_SPI1_Init>
  MX_TIM1_Init();
 800060a:	f000 fa25 	bl	8000a58 <MX_TIM1_Init>
  MX_TIM2_Init();
 800060e:	f000 fae3 	bl	8000bd8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000612:	f000 fb35 	bl	8000c80 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000616:	f000 fbab 	bl	8000d70 <MX_TIM4_Init>
  MX_TIM8_Init();
 800061a:	f000 fc51 	bl	8000ec0 <MX_TIM8_Init>
  MX_UART5_Init();
 800061e:	f000 fd1b 	bl	8001058 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000622:	f000 fd79 	bl	8001118 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000626:	f000 fda7 	bl	8001178 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800062a:	f000 fdd5 	bl	80011d8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800062e:	f000 f91b 	bl	8000868 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000632:	f000 f959 	bl	80008e8 <MX_I2C3_Init>
  MX_SPI4_Init();
 8000636:	f000 f9d1 	bl	80009dc <MX_SPI4_Init>
  MX_TIM5_Init();
 800063a:	f000 fbf3 	bl	8000e24 <MX_TIM5_Init>
  MX_UART7_Init();
 800063e:	f000 fd3b 	bl	80010b8 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 8000642:	2203      	movs	r2, #3
 8000644:	490a      	ldr	r1, [pc, #40]	; (8000670 <main+0x80>)
 8000646:	480b      	ldr	r0, [pc, #44]	; (8000674 <main+0x84>)
 8000648:	f006 fe6e 	bl	8007328 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <main+0x88>)
 800064e:	f005 f83b 	bl	80056c8 <HAL_TIM_Base_Start_IT>
	char msg_buffers[25];
	uint16_t index = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	83fb      	strh	r3, [r7, #30]
	switchingCircuitIdle();
 8000656:	f000 ffb1 	bl	80015bc <switchingCircuitIdle>
	HAL_Delay(1000);
 800065a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065e:	f001 ffcd 	bl	80025fc <HAL_Delay>
		sprintf(msg_buffers, "Idle phase - %hu\n", index);
		switchingCircuitIdle();
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
		HAL_Delay(5000);
		index++;*/
		if (state.preparedToRunPolarizationPhase) {
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <main+0x8c>)
 8000664:	79db      	ldrb	r3, [r3, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0fb      	beq.n	8000662 <main+0x72>
			chooseActionByState();
 800066a:	f000 fe77 	bl	800135c <chooseActionByState>
		if (state.preparedToRunPolarizationPhase) {
 800066e:	e7f8      	b.n	8000662 <main+0x72>
 8000670:	200002d0 	.word	0x200002d0
 8000674:	20000204 	.word	0x20000204
 8000678:	20015b5c 	.word	0x20015b5c
 800067c:	20015bdc 	.word	0x20015bdc

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b0b8      	sub	sp, #224	; 0xe0
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800068a:	2234      	movs	r2, #52	; 0x34
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f007 fd7c 	bl	800818c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	2290      	movs	r2, #144	; 0x90
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f007 fd6d 	bl	800818c <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80006b2:	f003 f939 	bl	8003928 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b40      	ldr	r3, [pc, #256]	; (80007b8 <SystemClock_Config+0x138>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	4a3f      	ldr	r2, [pc, #252]	; (80007b8 <SystemClock_Config+0x138>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c0:	6413      	str	r3, [r2, #64]	; 0x40
 80006c2:	4b3d      	ldr	r3, [pc, #244]	; (80007b8 <SystemClock_Config+0x138>)
 80006c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ce:	4b3b      	ldr	r3, [pc, #236]	; (80007bc <SystemClock_Config+0x13c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a3a      	ldr	r2, [pc, #232]	; (80007bc <SystemClock_Config+0x13c>)
 80006d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d8:	6013      	str	r3, [r2, #0]
 80006da:	4b38      	ldr	r3, [pc, #224]	; (80007bc <SystemClock_Config+0x13c>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e6:	2301      	movs	r3, #1
 80006e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000702:	2305      	movs	r3, #5
 8000704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000708:	23d8      	movs	r3, #216	; 0xd8
 800070a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000714:	2302      	movs	r3, #2
 8000716:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800071e:	4618      	mov	r0, r3
 8000720:	f003 f962 	bl	80039e8 <HAL_RCC_OscConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800072a:	f001 fa61 	bl	8001bf0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800072e:	f003 f90b 	bl	8003948 <HAL_PWREx_EnableOverDrive>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000738:	f001 fa5a 	bl	8001bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800074e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000752:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000756:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800075a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800075e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000762:	2107      	movs	r1, #7
 8000764:	4618      	mov	r0, r3
 8000766:	f003 fbed 	bl	8003f44 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000770:	f001 fa3e 	bl	8001bf0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART1
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <SystemClock_Config+0x140>)
 8000776:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000778:	2300      	movs	r3, #0
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077c:	2300      	movs	r3, #0
 800077e:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000780:	2300      	movs	r3, #0
 8000782:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000784:	2300      	movs	r3, #0
 8000786:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000788:	2300      	movs	r3, #0
 800078a:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800078c:	2300      	movs	r3, #0
 800078e:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000790:	2300      	movs	r3, #0
 8000792:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8000794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000798:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800079a:	f107 0308 	add.w	r3, r7, #8
 800079e:	4618      	mov	r0, r3
 80007a0:	f003 fda2 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80007aa:	f001 fa21 	bl	8001bf0 <Error_Handler>
  }
}
 80007ae:	bf00      	nop
 80007b0:	37e0      	adds	r7, #224	; 0xe0
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40007000 	.word	0x40007000
 80007c0:	000155d0 	.word	0x000155d0

080007c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80007d6:	4b21      	ldr	r3, [pc, #132]	; (800085c <MX_ADC1_Init+0x98>)
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <MX_ADC1_Init+0x9c>)
 80007da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <MX_ADC1_Init+0x98>)
 80007de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	; (800085c <MX_ADC1_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ea:	4b1c      	ldr	r3, [pc, #112]	; (800085c <MX_ADC1_Init+0x98>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f0:	4b1a      	ldr	r3, [pc, #104]	; (800085c <MX_ADC1_Init+0x98>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <MX_ADC1_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <MX_ADC1_Init+0x98>)
 8000800:	2200      	movs	r2, #0
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_ADC1_Init+0x98>)
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <MX_ADC1_Init+0xa0>)
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_ADC1_Init+0x98>)
 800080c:	2200      	movs	r2, #0
 800080e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_ADC1_Init+0x98>)
 8000812:	2201      	movs	r2, #1
 8000814:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_ADC1_Init+0x98>)
 8000820:	2201      	movs	r2, #1
 8000822:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000824:	480d      	ldr	r0, [pc, #52]	; (800085c <MX_ADC1_Init+0x98>)
 8000826:	f001 ff0b 	bl	8002640 <HAL_ADC_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000830:	f001 f9de 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000834:	2300      	movs	r3, #0
 8000836:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000838:	2301      	movs	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800083c:	2300      	movs	r3, #0
 800083e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000840:	463b      	mov	r3, r7
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_ADC1_Init+0x98>)
 8000846:	f002 f88b 	bl	8002960 <HAL_ADC_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000850:	f001 f9ce 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	20015c68 	.word	0x20015c68
 8000860:	40012000 	.word	0x40012000
 8000864:	0f000001 	.word	0x0f000001

08000868 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_I2C1_Init+0x74>)
 800086e:	4a1c      	ldr	r2, [pc, #112]	; (80008e0 <MX_I2C1_Init+0x78>)
 8000870:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_I2C1_Init+0x74>)
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x7c>)
 8000876:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800087e:	4b17      	ldr	r3, [pc, #92]	; (80008dc <MX_I2C1_Init+0x74>)
 8000880:	2201      	movs	r2, #1
 8000882:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000884:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800088a:	4b14      	ldr	r3, [pc, #80]	; (80008dc <MX_I2C1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_I2C1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_I2C1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800089c:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_I2C1_Init+0x74>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008a2:	480e      	ldr	r0, [pc, #56]	; (80008dc <MX_I2C1_Init+0x74>)
 80008a4:	f002 ff18 	bl	80036d8 <HAL_I2C_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ae:	f001 f99f 	bl	8001bf0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008b2:	2100      	movs	r1, #0
 80008b4:	4809      	ldr	r0, [pc, #36]	; (80008dc <MX_I2C1_Init+0x74>)
 80008b6:	f002 ff9f 	bl	80037f8 <HAL_I2CEx_ConfigAnalogFilter>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c0:	f001 f996 	bl	8001bf0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008c4:	2100      	movs	r1, #0
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_I2C1_Init+0x74>)
 80008c8:	f002 ffe1 	bl	800388e <HAL_I2CEx_ConfigDigitalFilter>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008d2:	f001 f98d 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000284 	.word	0x20000284
 80008e0:	40005400 	.word	0x40005400
 80008e4:	20404768 	.word	0x20404768

080008e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_I2C3_Init+0x74>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <MX_I2C3_Init+0x78>)
 80008f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_I2C3_Init+0x74>)
 80008f4:	4a1b      	ldr	r2, [pc, #108]	; (8000964 <MX_I2C3_Init+0x7c>)
 80008f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_I2C3_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_I2C3_Init+0x74>)
 8000900:	2201      	movs	r2, #1
 8000902:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_I2C3_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_I2C3_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2C3_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_I2C3_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_I2C3_Init+0x74>)
 800091e:	2200      	movs	r2, #0
 8000920:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000922:	480e      	ldr	r0, [pc, #56]	; (800095c <MX_I2C3_Init+0x74>)
 8000924:	f002 fed8 	bl	80036d8 <HAL_I2C_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800092e:	f001 f95f 	bl	8001bf0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <MX_I2C3_Init+0x74>)
 8000936:	f002 ff5f 	bl	80037f8 <HAL_I2CEx_ConfigAnalogFilter>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000940:	f001 f956 	bl	8001bf0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000944:	2100      	movs	r1, #0
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_I2C3_Init+0x74>)
 8000948:	f002 ffa1 	bl	800388e <HAL_I2CEx_ConfigDigitalFilter>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000952:	f001 f94d 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000b8 	.word	0x200000b8
 8000960:	40005c00 	.word	0x40005c00
 8000964:	20404768 	.word	0x20404768

08000968 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_SPI1_Init+0x6c>)
 800096e:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <MX_SPI1_Init+0x70>)
 8000970:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000972:	4b18      	ldr	r3, [pc, #96]	; (80009d4 <MX_SPI1_Init+0x6c>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <MX_SPI1_Init+0x6c>)
 800097a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800097e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000980:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <MX_SPI1_Init+0x6c>)
 8000982:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000986:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <MX_SPI1_Init+0x6c>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800098e:	4b11      	ldr	r3, [pc, #68]	; (80009d4 <MX_SPI1_Init+0x6c>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000994:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <MX_SPI1_Init+0x6c>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_SPI1_Init+0x6c>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_SPI1_Init+0x6c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_SPI1_Init+0x6c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <MX_SPI1_Init+0x6c>)
 80009ae:	2207      	movs	r2, #7
 80009b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_SPI1_Init+0x6c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_SPI1_Init+0x6c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <MX_SPI1_Init+0x6c>)
 80009c0:	f004 f8b8 	bl	8004b34 <HAL_SPI_Init>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80009ca:	f001 f911 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	2002b65c 	.word	0x2002b65c
 80009d8:	40013000 	.word	0x40013000

080009dc <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	; (8000a50 <MX_SPI4_Init+0x74>)
 80009e2:	4a1c      	ldr	r2, [pc, #112]	; (8000a54 <MX_SPI4_Init+0x78>)
 80009e4:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <MX_SPI4_Init+0x74>)
 80009e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009ec:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <MX_SPI4_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_SPI4_Init+0x74>)
 80009f6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80009fa:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <MX_SPI4_Init+0x74>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a02:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_SPI4_Init+0x74>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <MX_SPI4_Init+0x74>)
 8000a0a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a0e:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_SPI4_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <MX_SPI4_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_SPI4_Init+0x74>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <MX_SPI4_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000a28:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <MX_SPI4_Init+0x74>)
 8000a2a:	2207      	movs	r2, #7
 8000a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <MX_SPI4_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a34:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <MX_SPI4_Init+0x74>)
 8000a36:	2208      	movs	r2, #8
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <MX_SPI4_Init+0x74>)
 8000a3c:	f004 f87a 	bl	8004b34 <HAL_SPI_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000a46:	f001 f8d3 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2002b5b8 	.word	0x2002b5b8
 8000a54:	40013400 	.word	0x40013400

08000a58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09a      	sub	sp, #104	; 0x68
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a70:	2200      	movs	r2, #0
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	605a      	str	r2, [r3, #4]
 8000a76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
 8000a88:	615a      	str	r2, [r3, #20]
 8000a8a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	222c      	movs	r2, #44	; 0x2c
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f007 fb7a 	bl	800818c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a98:	4b4d      	ldr	r3, [pc, #308]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000a9a:	4a4e      	ldr	r2, [pc, #312]	; (8000bd4 <MX_TIM1_Init+0x17c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a9e:	4b4c      	ldr	r3, [pc, #304]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa4:	4b4a      	ldr	r3, [pc, #296]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4898-1;
 8000aaa:	4b49      	ldr	r3, [pc, #292]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000aac:	f241 3221 	movw	r2, #4897	; 0x1321
 8000ab0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab2:	4b47      	ldr	r3, [pc, #284]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab8:	4b45      	ldr	r3, [pc, #276]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000abe:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac4:	4842      	ldr	r0, [pc, #264]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000ac6:	f004 fdd4 	bl	8005672 <HAL_TIM_Base_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000ad0:	f001 f88e 	bl	8001bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ada:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ade:	4619      	mov	r1, r3
 8000ae0:	483b      	ldr	r0, [pc, #236]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000ae2:	f005 fb49 	bl	8006178 <HAL_TIM_ConfigClockSource>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000aec:	f001 f880 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af0:	4837      	ldr	r0, [pc, #220]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000af2:	f004 fe3e 	bl	8005772 <HAL_TIM_PWM_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000afc:	f001 f878 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b00:	2320      	movs	r3, #32
 8000b02:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b04:	2300      	movs	r3, #0
 8000b06:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b0c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b10:	4619      	mov	r1, r3
 8000b12:	482f      	ldr	r0, [pc, #188]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000b14:	f006 f9fe 	bl	8006f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b1e:	f001 f867 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b22:	2370      	movs	r3, #112	; 0x70
 8000b24:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 864+10;
 8000b26:	f240 336a 	movw	r3, #874	; 0x36a
 8000b2a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b3c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b46:	2200      	movs	r2, #0
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4821      	ldr	r0, [pc, #132]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000b4c:	f005 f9fc 	bl	8005f48 <HAL_TIM_PWM_ConfigChannel>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000b56:	f001 f84b 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b5a:	2360      	movs	r3, #96	; 0x60
 8000b5c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 8000b5e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b62:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b68:	2204      	movs	r2, #4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000b6e:	f005 f9eb 	bl	8005f48 <HAL_TIM_PWM_ConfigChannel>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000b78:	f001 f83a 	bl	8001bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4807      	ldr	r0, [pc, #28]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000bb2:	f006 fa3d 	bl	8007030 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000bbc:	f001 f818 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <MX_TIM1_Init+0x178>)
 8000bc2:	f001 fa51 	bl	8002068 <HAL_TIM_MspPostInit>

}
 8000bc6:	bf00      	nop
 8000bc8:	3768      	adds	r7, #104	; 0x68
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2002b61c 	.word	0x2002b61c
 8000bd4:	40010000 	.word	0x40010000

08000bd8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <MX_TIM2_Init+0xa4>)
 8000bf8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bfc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bfe:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <MX_TIM2_Init+0xa4>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <MX_TIM2_Init+0xa4>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <MX_TIM2_Init+0xa4>)
 8000c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c10:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	; (8000c7c <MX_TIM2_Init+0xa4>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <MX_TIM2_Init+0xa4>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c1e:	4817      	ldr	r0, [pc, #92]	; (8000c7c <MX_TIM2_Init+0xa4>)
 8000c20:	f004 fef6 	bl	8005a10 <HAL_TIM_IC_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c2a:	f000 ffe1 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480f      	ldr	r0, [pc, #60]	; (8000c7c <MX_TIM2_Init+0xa4>)
 8000c3e:	f006 f969 	bl	8006f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c48:	f000 ffd2 	bl	8001bf0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c50:	2301      	movs	r3, #1
 8000c52:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	4619      	mov	r1, r3
 8000c62:	4806      	ldr	r0, [pc, #24]	; (8000c7c <MX_TIM2_Init+0xa4>)
 8000c64:	f005 f8d3 	bl	8005e0e <HAL_TIM_IC_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c6e:	f000 ffbf 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	3720      	adds	r7, #32
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2002b6c0 	.word	0x2002b6c0

08000c80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b090      	sub	sp, #64	; 0x40
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c96:	f107 0320 	add.w	r3, r7, #32
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
 8000cb0:	615a      	str	r2, [r3, #20]
 8000cb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cb4:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000cb6:	4a2d      	ldr	r2, [pc, #180]	; (8000d6c <MX_TIM3_Init+0xec>)
 8000cb8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cba:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc0:	4b29      	ldr	r3, [pc, #164]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000cc6:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ccc:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cd8:	4823      	ldr	r0, [pc, #140]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000cda:	f004 fcca 	bl	8005672 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000ce4:	f000 ff84 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ce8:	481f      	ldr	r0, [pc, #124]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000cea:	f004 fd42 	bl	8005772 <HAL_TIM_PWM_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000cf4:	f000 ff7c 	bl	8001bf0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d04:	4619      	mov	r1, r3
 8000d06:	4818      	ldr	r0, [pc, #96]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000d08:	f005 faf0 	bl	80062ec <HAL_TIM_SlaveConfigSynchro>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d12:	f000 ff6d 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	4619      	mov	r1, r3
 8000d24:	4810      	ldr	r0, [pc, #64]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000d26:	f006 f8f5 	bl	8006f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d30:	f000 ff5e 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d34:	2360      	movs	r3, #96	; 0x60
 8000d36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2200      	movs	r2, #0
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4807      	ldr	r0, [pc, #28]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000d4c:	f005 f8fc 	bl	8005f48 <HAL_TIM_PWM_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000d56:	f000 ff4b 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d5a:	4803      	ldr	r0, [pc, #12]	; (8000d68 <MX_TIM3_Init+0xe8>)
 8000d5c:	f001 f984 	bl	8002068 <HAL_TIM_MspPostInit>

}
 8000d60:	bf00      	nop
 8000d62:	3740      	adds	r7, #64	; 0x40
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20015b9c 	.word	0x20015b9c
 8000d6c:	40000400 	.word	0x40000400

08000d70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	; 0x28
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d82:	463b      	mov	r3, r7
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
 8000d90:	615a      	str	r2, [r3, #20]
 8000d92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d94:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <MX_TIM4_Init+0xac>)
 8000d96:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <MX_TIM4_Init+0xb0>)
 8000d98:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d9a:	4b20      	ldr	r3, [pc, #128]	; (8000e1c <MX_TIM4_Init+0xac>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <MX_TIM4_Init+0xac>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4898-1;
 8000da6:	4b1d      	ldr	r3, [pc, #116]	; (8000e1c <MX_TIM4_Init+0xac>)
 8000da8:	f241 3221 	movw	r2, #4897	; 0x1321
 8000dac:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dae:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <MX_TIM4_Init+0xac>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_TIM4_Init+0xac>)
 8000db6:	2280      	movs	r2, #128	; 0x80
 8000db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dba:	4818      	ldr	r0, [pc, #96]	; (8000e1c <MX_TIM4_Init+0xac>)
 8000dbc:	f004 fcd9 	bl	8005772 <HAL_TIM_PWM_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000dc6:	f000 ff13 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dca:	2320      	movs	r3, #32
 8000dcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dd2:	f107 031c 	add.w	r3, r7, #28
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4810      	ldr	r0, [pc, #64]	; (8000e1c <MX_TIM4_Init+0xac>)
 8000dda:	f006 f89b 	bl	8006f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000de4:	f000 ff04 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000de8:	2360      	movs	r3, #96	; 0x60
 8000dea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4807      	ldr	r0, [pc, #28]	; (8000e1c <MX_TIM4_Init+0xac>)
 8000e00:	f005 f8a2 	bl	8005f48 <HAL_TIM_PWM_ConfigChannel>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000e0a:	f000 fef1 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e0e:	4803      	ldr	r0, [pc, #12]	; (8000e1c <MX_TIM4_Init+0xac>)
 8000e10:	f001 f92a 	bl	8002068 <HAL_TIM_MspPostInit>

}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	200001c4 	.word	0x200001c4
 8000e20:	40000800 	.word	0x40000800

08000e24 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e38:	1d3b      	adds	r3, r7, #4
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <MX_TIM5_Init+0x94>)
 8000e44:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <MX_TIM5_Init+0x98>)
 8000e46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_TIM5_Init+0x94>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <MX_TIM5_Init+0x94>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 2160-1;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_TIM5_Init+0x94>)
 8000e56:	f640 026f 	movw	r2, #2159	; 0x86f
 8000e5a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <MX_TIM5_Init+0x94>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <MX_TIM5_Init+0x94>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e68:	4813      	ldr	r0, [pc, #76]	; (8000eb8 <MX_TIM5_Init+0x94>)
 8000e6a:	f004 fc02 	bl	8005672 <HAL_TIM_Base_Init>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000e74:	f000 febc 	bl	8001bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	4619      	mov	r1, r3
 8000e84:	480c      	ldr	r0, [pc, #48]	; (8000eb8 <MX_TIM5_Init+0x94>)
 8000e86:	f005 f977 	bl	8006178 <HAL_TIM_ConfigClockSource>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000e90:	f000 feae 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_TIM5_Init+0x94>)
 8000ea2:	f006 f837 	bl	8006f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000eac:	f000 fea0 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20015b5c 	.word	0x20015b5c
 8000ebc:	40000c00 	.word	0x40000c00

08000ec0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09e      	sub	sp, #120	; 0x78
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ec6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ed4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	615a      	str	r2, [r3, #20]
 8000f02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f04:	463b      	mov	r3, r7
 8000f06:	222c      	movs	r2, #44	; 0x2c
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f007 f93e 	bl	800818c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f10:	4b4f      	ldr	r3, [pc, #316]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f12:	4a50      	ldr	r2, [pc, #320]	; (8001054 <MX_TIM8_Init+0x194>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000f16:	4b4e      	ldr	r3, [pc, #312]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b4c      	ldr	r3, [pc, #304]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 108-1;
 8000f22:	4b4b      	ldr	r3, [pc, #300]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f24:	226b      	movs	r2, #107	; 0x6b
 8000f26:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f28:	4b49      	ldr	r3, [pc, #292]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 24;
 8000f2e:	4b48      	ldr	r3, [pc, #288]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f30:	2218      	movs	r2, #24
 8000f32:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b46      	ldr	r3, [pc, #280]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f3a:	4845      	ldr	r0, [pc, #276]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f3c:	f004 fb99 	bl	8005672 <HAL_TIM_Base_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8000f46:	f000 fe53 	bl	8001bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f54:	4619      	mov	r1, r3
 8000f56:	483e      	ldr	r0, [pc, #248]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f58:	f005 f90e 	bl	8006178 <HAL_TIM_ConfigClockSource>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000f62:	f000 fe45 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f66:	483a      	ldr	r0, [pc, #232]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f68:	f004 fc03 	bl	8005772 <HAL_TIM_PWM_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8000f72:	f000 fe3d 	bl	8001bf0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f76:	2108      	movs	r1, #8
 8000f78:	4835      	ldr	r0, [pc, #212]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f7a:	f004 fde3 	bl	8005b44 <HAL_TIM_OnePulse_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8000f84:	f000 fe34 	bl	8001bf0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000f88:	2306      	movs	r3, #6
 8000f8a:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000f90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f94:	4619      	mov	r1, r3
 8000f96:	482e      	ldr	r0, [pc, #184]	; (8001050 <MX_TIM8_Init+0x190>)
 8000f98:	f005 f9a8 	bl	80062ec <HAL_TIM_SlaveConfigSynchro>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8000fa2:	f000 fe25 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4825      	ldr	r0, [pc, #148]	; (8001050 <MX_TIM8_Init+0x190>)
 8000fba:	f005 ffab 	bl	8006f14 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000fc4:	f000 fe14 	bl	8001bf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000fc8:	2370      	movs	r3, #112	; 0x70
 8000fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4619      	mov	r1, r3
 8000fec:	4818      	ldr	r0, [pc, #96]	; (8001050 <MX_TIM8_Init+0x190>)
 8000fee:	f004 ffab 	bl	8005f48 <HAL_TIM_PWM_ConfigChannel>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 8000ff8:	f000 fdfa 	bl	8001bf0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001010:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001014:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800101e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001022:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800102c:	463b      	mov	r3, r7
 800102e:	4619      	mov	r1, r3
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <MX_TIM8_Init+0x190>)
 8001032:	f005 fffd 	bl	8007030 <HAL_TIMEx_ConfigBreakDeadTime>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 800103c:	f000 fdd8 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001040:	4803      	ldr	r0, [pc, #12]	; (8001050 <MX_TIM8_Init+0x190>)
 8001042:	f001 f811 	bl	8002068 <HAL_TIM_MspPostInit>

}
 8001046:	bf00      	nop
 8001048:	3778      	adds	r7, #120	; 0x78
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000184 	.word	0x20000184
 8001054:	40010400 	.word	0x40010400

08001058 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_UART5_Init+0x58>)
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <MX_UART5_Init+0x5c>)
 8001060:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <MX_UART5_Init+0x58>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_UART5_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_UART5_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_UART5_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_UART5_Init+0x58>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <MX_UART5_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_UART5_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <MX_UART5_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_UART5_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_UART5_Init+0x58>)
 800109c:	f006 f864 	bl	8007168 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80010a6:	f000 fda3 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20015be8 	.word	0x20015be8
 80010b4:	40005000 	.word	0x40005000

080010b8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_UART7_Init+0x58>)
 80010be:	4a15      	ldr	r2, [pc, #84]	; (8001114 <MX_UART7_Init+0x5c>)
 80010c0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <MX_UART7_Init+0x58>)
 80010c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_UART7_Init+0x58>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <MX_UART7_Init+0x58>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <MX_UART7_Init+0x58>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <MX_UART7_Init+0x58>)
 80010de:	220c      	movs	r2, #12
 80010e0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <MX_UART7_Init+0x58>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <MX_UART7_Init+0x58>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <MX_UART7_Init+0x58>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <MX_UART7_Init+0x58>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <MX_UART7_Init+0x58>)
 80010fc:	f006 f834 	bl	8007168 <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001106:	f000 fd73 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000104 	.word	0x20000104
 8001114:	40007800 	.word	0x40007800

08001118 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_USART1_UART_Init+0x58>)
 800111e:	4a15      	ldr	r2, [pc, #84]	; (8001174 <MX_USART1_UART_Init+0x5c>)
 8001120:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001122:	4b13      	ldr	r3, [pc, #76]	; (8001170 <MX_USART1_UART_Init+0x58>)
 8001124:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001128:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART1_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <MX_USART1_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART1_UART_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART1_UART_Init+0x58>)
 800113e:	220c      	movs	r2, #12
 8001140:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART1_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART1_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART1_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART1_UART_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART1_UART_Init+0x58>)
 800115c:	f006 f804 	bl	8007168 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001166:	f000 fd43 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20015cb0 	.word	0x20015cb0
 8001174:	40011000 	.word	0x40011000

08001178 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <MX_USART2_UART_Init+0x58>)
 800117e:	4a15      	ldr	r2, [pc, #84]	; (80011d4 <MX_USART2_UART_Init+0x5c>)
 8001180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <MX_USART2_UART_Init+0x58>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <MX_USART2_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <MX_USART2_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <MX_USART2_UART_Init+0x58>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <MX_USART2_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <MX_USART2_UART_Init+0x58>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	; (80011d0 <MX_USART2_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b4:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <MX_USART2_UART_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	; (80011d0 <MX_USART2_UART_Init+0x58>)
 80011bc:	f005 ffd4 	bl	8007168 <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011c6:	f000 fd13 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	2002b700 	.word	0x2002b700
 80011d4:	40004400 	.word	0x40004400

080011d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_USART3_UART_Init+0x54>)
 80011de:	4a14      	ldr	r2, [pc, #80]	; (8001230 <MX_USART3_UART_Init+0x58>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 80011e2:	4b12      	ldr	r3, [pc, #72]	; (800122c <MX_USART3_UART_Init+0x54>)
 80011e4:	4a13      	ldr	r2, [pc, #76]	; (8001234 <MX_USART3_UART_Init+0x5c>)
 80011e6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_USART3_UART_Init+0x54>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_USART3_UART_Init+0x54>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011f4:	4b0d      	ldr	r3, [pc, #52]	; (800122c <MX_USART3_UART_Init+0x54>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011fa:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_USART3_UART_Init+0x54>)
 80011fc:	220c      	movs	r2, #12
 80011fe:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_USART3_UART_Init+0x54>)
 8001202:	2200      	movs	r2, #0
 8001204:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_USART3_UART_Init+0x54>)
 8001208:	2200      	movs	r2, #0
 800120a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <MX_USART3_UART_Init+0x54>)
 800120e:	2200      	movs	r2, #0
 8001210:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001212:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_USART3_UART_Init+0x54>)
 8001214:	2200      	movs	r2, #0
 8001216:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001218:	4804      	ldr	r0, [pc, #16]	; (800122c <MX_USART3_UART_Init+0x54>)
 800121a:	f005 ffa5 	bl	8007168 <HAL_UART_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8001224:	f000 fce4 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000204 	.word	0x20000204
 8001230:	40004800 	.word	0x40004800
 8001234:	001e8480 	.word	0x001e8480

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	; 0x30
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124e:	4b40      	ldr	r3, [pc, #256]	; (8001350 <MX_GPIO_Init+0x118>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a3f      	ldr	r2, [pc, #252]	; (8001350 <MX_GPIO_Init+0x118>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <MX_GPIO_Init+0x118>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <MX_GPIO_Init+0x118>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a39      	ldr	r2, [pc, #228]	; (8001350 <MX_GPIO_Init+0x118>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b37      	ldr	r3, [pc, #220]	; (8001350 <MX_GPIO_Init+0x118>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	4b34      	ldr	r3, [pc, #208]	; (8001350 <MX_GPIO_Init+0x118>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a33      	ldr	r2, [pc, #204]	; (8001350 <MX_GPIO_Init+0x118>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b31      	ldr	r3, [pc, #196]	; (8001350 <MX_GPIO_Init+0x118>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b2e      	ldr	r3, [pc, #184]	; (8001350 <MX_GPIO_Init+0x118>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a2d      	ldr	r2, [pc, #180]	; (8001350 <MX_GPIO_Init+0x118>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b2b      	ldr	r3, [pc, #172]	; (8001350 <MX_GPIO_Init+0x118>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b28      	ldr	r3, [pc, #160]	; (8001350 <MX_GPIO_Init+0x118>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a27      	ldr	r2, [pc, #156]	; (8001350 <MX_GPIO_Init+0x118>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b25      	ldr	r3, [pc, #148]	; (8001350 <MX_GPIO_Init+0x118>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60bb      	str	r3, [r7, #8]
 80012c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <MX_GPIO_Init+0x118>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a21      	ldr	r2, [pc, #132]	; (8001350 <MX_GPIO_Init+0x118>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_GPIO_Init+0x118>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 80012de:	2200      	movs	r2, #0
 80012e0:	2108      	movs	r1, #8
 80012e2:	481c      	ldr	r0, [pc, #112]	; (8001354 <MX_GPIO_Init+0x11c>)
 80012e4:	f002 f9de 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 80012e8:	2200      	movs	r2, #0
 80012ea:	f64e 717f 	movw	r1, #61311	; 0xef7f
 80012ee:	481a      	ldr	r0, [pc, #104]	; (8001358 <MX_GPIO_Init+0x120>)
 80012f0:	f002 f9d8 	bl	80036a4 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SN6505_EN_Pin */
  GPIO_InitStruct.Pin = SN6505_EN_Pin;
 80012f4:	2308      	movs	r3, #8
 80012f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4812      	ldr	r0, [pc, #72]	; (8001354 <MX_GPIO_Init+0x11c>)
 800130c:	f002 f820 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin 
                           LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin 
                           S1_Pin S2_Pin S3_Pin S4_Pin 
                           S5_Pin S6_Pin */
  GPIO_InitStruct.Pin = LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 8001310:	f64e 737f 	movw	r3, #61311	; 0xef7f
 8001314:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001316:	2301      	movs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4619      	mov	r1, r3
 8001328:	480b      	ldr	r0, [pc, #44]	; (8001358 <MX_GPIO_Init+0x120>)
 800132a:	f002 f811 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800132e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133c:	f107 031c 	add.w	r3, r7, #28
 8001340:	4619      	mov	r1, r3
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_GPIO_Init+0x11c>)
 8001344:	f002 f804 	bl	8003350 <HAL_GPIO_Init>

}
 8001348:	bf00      	nop
 800134a:	3730      	adds	r7, #48	; 0x30
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40023800 	.word	0x40023800
 8001354:	40020800 	.word	0x40020800
 8001358:	40020c00 	.word	0x40020c00

0800135c <chooseActionByState>:

/* USER CODE BEGIN 4 */


void chooseActionByState() {
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
	// if new measurement technique was set, update remaining measurements as well
	if (state.measureTechniqueUpdated) {
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <chooseActionByState+0x74>)
 8001362:	799b      	ldrb	r3, [r3, #6]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00b      	beq.n	8001380 <chooseActionByState+0x24>
		state.remainingMeasurements = state.setMeasurements;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <chooseActionByState+0x74>)
 800136a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <chooseActionByState+0x74>)
 8001370:	805a      	strh	r2, [r3, #2]
		state.activeMeasureTechnique = state.setMeasureTechnique;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <chooseActionByState+0x74>)
 8001374:	781a      	ldrb	r2, [r3, #0]
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <chooseActionByState+0x74>)
 8001378:	705a      	strb	r2, [r3, #1]
		state.measureTechniqueUpdated = 0;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <chooseActionByState+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	719a      	strb	r2, [r3, #6]

	}
	switch (state.activeMeasureTechnique) {
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <chooseActionByState+0x74>)
 8001382:	785b      	ldrb	r3, [r3, #1]
 8001384:	2b03      	cmp	r3, #3
 8001386:	d820      	bhi.n	80013ca <chooseActionByState+0x6e>
 8001388:	a201      	add	r2, pc, #4	; (adr r2, 8001390 <chooseActionByState+0x34>)
 800138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138e:	bf00      	nop
 8001390:	080013a1 	.word	0x080013a1
 8001394:	080013ad 	.word	0x080013ad
 8001398:	080013b7 	.word	0x080013b7
 800139c:	080013c1 	.word	0x080013c1

	case 0:
		// Idle state
		set_LED1(0, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 f8e5 	bl	8001574 <set_LED1>
		break;
 80013aa:	e00e      	b.n	80013ca <chooseActionByState+0x6e>
	case 1:
		// measure with external ADC
		runPolarizationSequence();
 80013ac:	f000 f812 	bl	80013d4 <runPolarizationSequence>
		measureWithExternalADC();
 80013b0:	f000 f962 	bl	8001678 <measureWithExternalADC>
		break;
 80013b4:	e009      	b.n	80013ca <chooseActionByState+0x6e>
	case 2:
		// measure with internal ADC
		runPolarizationSequence();
 80013b6:	f000 f80d 	bl	80013d4 <runPolarizationSequence>
		measureWithInternalADC();
 80013ba:	f000 f985 	bl	80016c8 <measureWithInternalADC>
		break;
 80013be:	e004      	b.n	80013ca <chooseActionByState+0x6e>
	case 3:
		// measure with comparator
		runPolarizationSequence();
 80013c0:	f000 f808 	bl	80013d4 <runPolarizationSequence>
		measureWithComparator();
 80013c4:	f000 f99c 	bl	8001700 <measureWithComparator>
		break;
 80013c8:	bf00      	nop

	}
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20015bdc 	.word	0x20015bdc

080013d4 <runPolarizationSequence>:
void runPolarizationSequence() {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	//state.preparedToRunPolarizationPhase = 0;
	// visualise
	set_LED1(1, 1, 1);
 80013d8:	2201      	movs	r2, #1
 80013da:	2101      	movs	r1, #1
 80013dc:	2001      	movs	r0, #1
 80013de:	f000 f8c9 	bl	8001574 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 80013e2:	2201      	movs	r2, #1
 80013e4:	2102      	movs	r1, #2
 80013e6:	4862      	ldr	r0, [pc, #392]	; (8001570 <runPolarizationSequence+0x19c>)
 80013e8:	f002 f95c 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2104      	movs	r1, #4
 80013f0:	485f      	ldr	r0, [pc, #380]	; (8001570 <runPolarizationSequence+0x19c>)
 80013f2:	f002 f957 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80013f6:	2201      	movs	r2, #1
 80013f8:	2108      	movs	r1, #8
 80013fa:	485d      	ldr	r0, [pc, #372]	; (8001570 <runPolarizationSequence+0x19c>)
 80013fc:	f002 f952 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001400:	2200      	movs	r2, #0
 8001402:	2110      	movs	r1, #16
 8001404:	485a      	ldr	r0, [pc, #360]	; (8001570 <runPolarizationSequence+0x19c>)
 8001406:	f002 f94d 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2120      	movs	r1, #32
 800140e:	4858      	ldr	r0, [pc, #352]	; (8001570 <runPolarizationSequence+0x19c>)
 8001410:	f002 f948 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001414:	2201      	movs	r2, #1
 8001416:	2140      	movs	r1, #64	; 0x40
 8001418:	4855      	ldr	r0, [pc, #340]	; (8001570 <runPolarizationSequence+0x19c>)
 800141a:	f002 f943 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800141e:	2005      	movs	r0, #5
 8001420:	f001 f8ec 	bl	80025fc <HAL_Delay>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001424:	2201      	movs	r2, #1
 8001426:	2102      	movs	r1, #2
 8001428:	4851      	ldr	r0, [pc, #324]	; (8001570 <runPolarizationSequence+0x19c>)
 800142a:	f002 f93b 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2104      	movs	r1, #4
 8001432:	484f      	ldr	r0, [pc, #316]	; (8001570 <runPolarizationSequence+0x19c>)
 8001434:	f002 f936 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001438:	2201      	movs	r2, #1
 800143a:	2108      	movs	r1, #8
 800143c:	484c      	ldr	r0, [pc, #304]	; (8001570 <runPolarizationSequence+0x19c>)
 800143e:	f002 f931 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 8001442:	2201      	movs	r2, #1
 8001444:	2110      	movs	r1, #16
 8001446:	484a      	ldr	r0, [pc, #296]	; (8001570 <runPolarizationSequence+0x19c>)
 8001448:	f002 f92c 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2120      	movs	r1, #32
 8001450:	4847      	ldr	r0, [pc, #284]	; (8001570 <runPolarizationSequence+0x19c>)
 8001452:	f002 f927 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001456:	2201      	movs	r2, #1
 8001458:	2140      	movs	r1, #64	; 0x40
 800145a:	4845      	ldr	r0, [pc, #276]	; (8001570 <runPolarizationSequence+0x19c>)
 800145c:	f002 f922 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8001460:	f241 3088 	movw	r0, #5000	; 0x1388
 8001464:	f001 f8ca 	bl	80025fc <HAL_Delay>


	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2102      	movs	r1, #2
 800146c:	4840      	ldr	r0, [pc, #256]	; (8001570 <runPolarizationSequence+0x19c>)
 800146e:	f002 f919 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2104      	movs	r1, #4
 8001476:	483e      	ldr	r0, [pc, #248]	; (8001570 <runPolarizationSequence+0x19c>)
 8001478:	f002 f914 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800147c:	2201      	movs	r2, #1
 800147e:	2108      	movs	r1, #8
 8001480:	483b      	ldr	r0, [pc, #236]	; (8001570 <runPolarizationSequence+0x19c>)
 8001482:	f002 f90f 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2110      	movs	r1, #16
 800148a:	4839      	ldr	r0, [pc, #228]	; (8001570 <runPolarizationSequence+0x19c>)
 800148c:	f002 f90a 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2120      	movs	r1, #32
 8001494:	4836      	ldr	r0, [pc, #216]	; (8001570 <runPolarizationSequence+0x19c>)
 8001496:	f002 f905 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800149a:	2201      	movs	r2, #1
 800149c:	2140      	movs	r1, #64	; 0x40
 800149e:	4834      	ldr	r0, [pc, #208]	; (8001570 <runPolarizationSequence+0x19c>)
 80014a0:	f002 f900 	bl	80036a4 <HAL_GPIO_WritePin>
	delay_us(200);
 80014a4:	20c8      	movs	r0, #200	; 0xc8
 80014a6:	f000 f8d3 	bl	8001650 <delay_us>



	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2102      	movs	r1, #2
 80014ae:	4830      	ldr	r0, [pc, #192]	; (8001570 <runPolarizationSequence+0x19c>)
 80014b0:	f002 f8f8 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2104      	movs	r1, #4
 80014b8:	482d      	ldr	r0, [pc, #180]	; (8001570 <runPolarizationSequence+0x19c>)
 80014ba:	f002 f8f3 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80014be:	2201      	movs	r2, #1
 80014c0:	2108      	movs	r1, #8
 80014c2:	482b      	ldr	r0, [pc, #172]	; (8001570 <runPolarizationSequence+0x19c>)
 80014c4:	f002 f8ee 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2110      	movs	r1, #16
 80014cc:	4828      	ldr	r0, [pc, #160]	; (8001570 <runPolarizationSequence+0x19c>)
 80014ce:	f002 f8e9 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2120      	movs	r1, #32
 80014d6:	4826      	ldr	r0, [pc, #152]	; (8001570 <runPolarizationSequence+0x19c>)
 80014d8:	f002 f8e4 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80014dc:	2201      	movs	r2, #1
 80014de:	2140      	movs	r1, #64	; 0x40
 80014e0:	4823      	ldr	r0, [pc, #140]	; (8001570 <runPolarizationSequence+0x19c>)
 80014e2:	f002 f8df 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80014e6:	200a      	movs	r0, #10
 80014e8:	f001 f888 	bl	80025fc <HAL_Delay>

	//run sequnece T5 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2102      	movs	r1, #2
 80014f0:	481f      	ldr	r0, [pc, #124]	; (8001570 <runPolarizationSequence+0x19c>)
 80014f2:	f002 f8d7 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2104      	movs	r1, #4
 80014fa:	481d      	ldr	r0, [pc, #116]	; (8001570 <runPolarizationSequence+0x19c>)
 80014fc:	f002 f8d2 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001500:	2201      	movs	r2, #1
 8001502:	2108      	movs	r1, #8
 8001504:	481a      	ldr	r0, [pc, #104]	; (8001570 <runPolarizationSequence+0x19c>)
 8001506:	f002 f8cd 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2110      	movs	r1, #16
 800150e:	4818      	ldr	r0, [pc, #96]	; (8001570 <runPolarizationSequence+0x19c>)
 8001510:	f002 f8c8 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	2120      	movs	r1, #32
 8001518:	4815      	ldr	r0, [pc, #84]	; (8001570 <runPolarizationSequence+0x19c>)
 800151a:	f002 f8c3 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2140      	movs	r1, #64	; 0x40
 8001522:	4813      	ldr	r0, [pc, #76]	; (8001570 <runPolarizationSequence+0x19c>)
 8001524:	f002 f8be 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001528:	2005      	movs	r0, #5
 800152a:	f001 f867 	bl	80025fc <HAL_Delay>
	//run sequnece T6 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2102      	movs	r1, #2
 8001532:	480f      	ldr	r0, [pc, #60]	; (8001570 <runPolarizationSequence+0x19c>)
 8001534:	f002 f8b6 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	2104      	movs	r1, #4
 800153c:	480c      	ldr	r0, [pc, #48]	; (8001570 <runPolarizationSequence+0x19c>)
 800153e:	f002 f8b1 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2108      	movs	r1, #8
 8001546:	480a      	ldr	r0, [pc, #40]	; (8001570 <runPolarizationSequence+0x19c>)
 8001548:	f002 f8ac 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2110      	movs	r1, #16
 8001550:	4807      	ldr	r0, [pc, #28]	; (8001570 <runPolarizationSequence+0x19c>)
 8001552:	f002 f8a7 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001556:	2201      	movs	r2, #1
 8001558:	2120      	movs	r1, #32
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <runPolarizationSequence+0x19c>)
 800155c:	f002 f8a2 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2140      	movs	r1, #64	; 0x40
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <runPolarizationSequence+0x19c>)
 8001566:	f002 f89d 	bl	80036a4 <HAL_GPIO_WritePin>

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40020c00 	.word	0x40020c00

08001574 <set_LED1>:


void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	460b      	mov	r3, r1
 8001580:	71bb      	strb	r3, [r7, #6]
 8001582:	4613      	mov	r3, r2
 8001584:	717b      	strb	r3, [r7, #5]

	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, R);
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	461a      	mov	r2, r3
 800158a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800158e:	480a      	ldr	r0, [pc, #40]	; (80015b8 <set_LED1+0x44>)
 8001590:	f002 f888 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, G);
 8001594:	79bb      	ldrb	r3, [r7, #6]
 8001596:	461a      	mov	r2, r3
 8001598:	f44f 7100 	mov.w	r1, #512	; 0x200
 800159c:	4806      	ldr	r0, [pc, #24]	; (80015b8 <set_LED1+0x44>)
 800159e:	f002 f881 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, B);
 80015a2:	797b      	ldrb	r3, [r7, #5]
 80015a4:	461a      	mov	r2, r3
 80015a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015aa:	4803      	ldr	r0, [pc, #12]	; (80015b8 <set_LED1+0x44>)
 80015ac:	f002 f87a 	bl	80036a4 <HAL_GPIO_WritePin>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40020c00 	.word	0x40020c00

080015bc <switchingCircuitIdle>:

void switchingCircuitIdle() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2000      	movs	r0, #0
 80015c6:	f7ff ffd5 	bl	8001574 <set_LED1>
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 80015ca:	2200      	movs	r2, #0
 80015cc:	2101      	movs	r1, #1
 80015ce:	4811      	ldr	r0, [pc, #68]	; (8001614 <switchingCircuitIdle+0x58>)
 80015d0:	f002 f868 	bl	80036a4 <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2102      	movs	r1, #2
 80015d8:	480e      	ldr	r0, [pc, #56]	; (8001614 <switchingCircuitIdle+0x58>)
 80015da:	f002 f863 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2104      	movs	r1, #4
 80015e2:	480c      	ldr	r0, [pc, #48]	; (8001614 <switchingCircuitIdle+0x58>)
 80015e4:	f002 f85e 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80015e8:	2201      	movs	r2, #1
 80015ea:	2108      	movs	r1, #8
 80015ec:	4809      	ldr	r0, [pc, #36]	; (8001614 <switchingCircuitIdle+0x58>)
 80015ee:	f002 f859 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2110      	movs	r1, #16
 80015f6:	4807      	ldr	r0, [pc, #28]	; (8001614 <switchingCircuitIdle+0x58>)
 80015f8:	f002 f854 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2120      	movs	r1, #32
 8001600:	4804      	ldr	r0, [pc, #16]	; (8001614 <switchingCircuitIdle+0x58>)
 8001602:	f002 f84f 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2140      	movs	r1, #64	; 0x40
 800160a:	4802      	ldr	r0, [pc, #8]	; (8001614 <switchingCircuitIdle+0x58>)
 800160c:	f002 f84a 	bl	80036a4 <HAL_GPIO_WritePin>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40020c00 	.word	0x40020c00

08001618 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a08      	ldr	r2, [pc, #32]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d108      	bne.n	800163c <HAL_TIM_PeriodElapsedCallback+0x24>
		//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		if (timeIndex > 0){
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d004      	beq.n	800163c <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -=10;
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	3b0a      	subs	r3, #10
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800163a:	6013      	str	r3, [r2, #0]
		}
	}

}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	40000c00 	.word	0x40000c00
 800164c:	200000a8 	.word	0x200000a8

08001650 <delay_us>:

void delay_us(uint32_t delay_us){
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 8001658:	4a06      	ldr	r2, [pc, #24]	; (8001674 <delay_us+0x24>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6013      	str	r3, [r2, #0]
    while (timeIndex > 0);
 800165e:	bf00      	nop
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <delay_us+0x24>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1fb      	bne.n	8001660 <delay_us+0x10>
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	200000a8 	.word	0x200000a8

08001678 <measureWithExternalADC>:




void measureWithExternalADC() {
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(1, 0, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff ff77 	bl	8001574 <set_LED1>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_rx1.uint8, samplesPerPeriod);
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <measureWithExternalADC+0x3c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	490a      	ldr	r1, [pc, #40]	; (80016b8 <measureWithExternalADC+0x40>)
 8001690:	480a      	ldr	r0, [pc, #40]	; (80016bc <measureWithExternalADC+0x44>)
 8001692:	f003 fae1 	bl	8004c58 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 8001696:	2100      	movs	r1, #0
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <measureWithExternalADC+0x48>)
 800169a:	f004 f895 	bl	80057c8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 800169e:	2104      	movs	r1, #4
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <measureWithExternalADC+0x48>)
 80016a2:	f004 f891 	bl	80057c8 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 80016a6:	2100      	movs	r1, #0
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <measureWithExternalADC+0x4c>)
 80016aa:	f004 f88d 	bl	80057c8 <HAL_TIM_PWM_Start_IT>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20015d30 	.word	0x20015d30
 80016bc:	2002b65c 	.word	0x2002b65c
 80016c0:	2002b61c 	.word	0x2002b61c
 80016c4:	20000184 	.word	0x20000184

080016c8 <measureWithInternalADC>:

void measureWithInternalADC() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 1, 0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2101      	movs	r1, #1
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff ff4f 	bl	8001574 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16, samplesPerPeriod);
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <measureWithInternalADC+0x28>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	461a      	mov	r2, r3
 80016dc:	4905      	ldr	r1, [pc, #20]	; (80016f4 <measureWithInternalADC+0x2c>)
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <measureWithInternalADC+0x30>)
 80016e0:	f000 fff2 	bl	80026c8 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim4);
 80016e4:	4805      	ldr	r0, [pc, #20]	; (80016fc <measureWithInternalADC+0x34>)
 80016e6:	f003 ffef 	bl	80056c8 <HAL_TIM_Base_Start_IT>
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000000 	.word	0x20000000
 80016f4:	20015d30 	.word	0x20015d30
 80016f8:	20015c68 	.word	0x20015c68
 80016fc:	200001c4 	.word	0x200001c4

08001700 <measureWithComparator>:

void measureWithComparator() {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 0, 1);
 8001704:	2201      	movs	r2, #1
 8001706:	2100      	movs	r1, #0
 8001708:	2000      	movs	r0, #0
 800170a:	f7ff ff33 	bl	8001574 <set_LED1>
	// run the timer
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800170e:	2100      	movs	r1, #0
 8001710:	4802      	ldr	r0, [pc, #8]	; (800171c <measureWithComparator+0x1c>)
 8001712:	f004 f9a9 	bl	8005a68 <HAL_TIM_IC_Start_IT>
}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2002b6c0 	.word	0x2002b6c0

08001720 <measureFrequencyWithTimer>:

//mode = 1 ... run only once, mode = 0 ... run infinity times
void measureFrequencyWithTimer(TIM_HandleTypeDef *htim) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	if (firstCapturedSample == 0) {
 8001728:	4b21      	ldr	r3, [pc, #132]	; (80017b0 <measureFrequencyWithTimer+0x90>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d10a      	bne.n	8001746 <measureFrequencyWithTimer+0x26>
		IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001730:	2100      	movs	r1, #0
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f004 fe1c 	bl	8006370 <HAL_TIM_ReadCapturedValue>
 8001738:	4602      	mov	r2, r0
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <measureFrequencyWithTimer+0x94>)
 800173c:	601a      	str	r2, [r3, #0]
		firstCapturedSample = 1;
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <measureFrequencyWithTimer+0x90>)
 8001740:	2201      	movs	r2, #1
 8001742:	701a      	strb	r2, [r3, #0]
		}
		else{
			state.preparedToRunPolarizationPhase = 1;
		}
	}
}
 8001744:	e02f      	b.n	80017a6 <measureFrequencyWithTimer+0x86>
	else if (firstCapturedSample) {
 8001746:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <measureFrequencyWithTimer+0x90>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d02b      	beq.n	80017a6 <measureFrequencyWithTimer+0x86>
		IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800174e:	2100      	movs	r1, #0
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f004 fe0d 	bl	8006370 <HAL_TIM_ReadCapturedValue>
 8001756:	4602      	mov	r2, r0
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <measureFrequencyWithTimer+0x98>)
 800175a:	601a      	str	r2, [r3, #0]
		difference = IC_Value2 - IC_Value1;
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <measureFrequencyWithTimer+0x98>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <measureFrequencyWithTimer+0x94>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	4a15      	ldr	r2, [pc, #84]	; (80017bc <measureFrequencyWithTimer+0x9c>)
 8001768:	6013      	str	r3, [r2, #0]
		frequency = /*HAL_RCC_GetHCLKFreq() /*/difference;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <measureFrequencyWithTimer+0x9c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a14      	ldr	r2, [pc, #80]	; (80017c0 <measureFrequencyWithTimer+0xa0>)
 8001770:	6013      	str	r3, [r2, #0]
		firstCapturedSample = 0;
 8001772:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <measureFrequencyWithTimer+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001778:	f000 f836 	bl	80017e8 <sendDataOverUART>
		state.remainingMeasurements--;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <measureFrequencyWithTimer+0xa4>)
 800177e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001782:	b29b      	uxth	r3, r3
 8001784:	3b01      	subs	r3, #1
 8001786:	b29b      	uxth	r3, r3
 8001788:	b21a      	sxth	r2, r3
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <measureFrequencyWithTimer+0xa4>)
 800178c:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <measureFrequencyWithTimer+0xa4>)
 8001790:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <measureFrequencyWithTimer+0x80>
			state.activeMeasureTechnique = 0;
 8001798:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <measureFrequencyWithTimer+0xa4>)
 800179a:	2200      	movs	r2, #0
 800179c:	705a      	strb	r2, [r3, #1]
}
 800179e:	e002      	b.n	80017a6 <measureFrequencyWithTimer+0x86>
			state.preparedToRunPolarizationPhase = 1;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <measureFrequencyWithTimer+0xa4>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	71da      	strb	r2, [r3, #7]
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200000a4 	.word	0x200000a4
 80017b4:	20000094 	.word	0x20000094
 80017b8:	20000098 	.word	0x20000098
 80017bc:	2000009c 	.word	0x2000009c
 80017c0:	200000a0 	.word	0x200000a0
 80017c4:	20015bdc 	.word	0x20015bdc

080017c8 <HAL_TIM_IC_CaptureCallback>:



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017d8:	d102      	bne.n	80017e0 <HAL_TIM_IC_CaptureCallback+0x18>
		measureFrequencyWithTimer(htim);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffa0 	bl	8001720 <measureFrequencyWithTimer>
	}
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <sendDataOverUART>:
	state.preparedToRunPolarizationPhase = 0;
	state.index = 0;
}


void sendDataOverUART() {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	847b      	strh	r3, [r7, #34]	; 0x22
	int i = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
	if (state.activeMeasureTechnique == 1
 80017f6:	4b4a      	ldr	r3, [pc, #296]	; (8001920 <sendDataOverUART+0x138>)
 80017f8:	785b      	ldrb	r3, [r3, #1]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d003      	beq.n	8001806 <sendDataOverUART+0x1e>
			|| state.activeMeasureTechnique == 2) {
 80017fe:	4b48      	ldr	r3, [pc, #288]	; (8001920 <sendDataOverUART+0x138>)
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d16e      	bne.n	80018e4 <sendDataOverUART+0xfc>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8001806:	2300      	movs	r3, #0
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
 800180a:	e025      	b.n	8001858 <sendDataOverUART+0x70>
			adc = (uint16_t) (buffer_rx1.uint8[i])
 800180c:	4a45      	ldr	r2, [pc, #276]	; (8001924 <sendDataOverUART+0x13c>)
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	4413      	add	r3, r2
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx1.uint8[i + 1]);
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	3301      	adds	r3, #1
 800181a:	4942      	ldr	r1, [pc, #264]	; (8001924 <sendDataOverUART+0x13c>)
 800181c:	5ccb      	ldrb	r3, [r1, r3]
 800181e:	b29b      	uxth	r3, r3
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx1.uint8[i])
 8001824:	4413      	add	r3, r2
 8001826:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 8001828:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800182a:	463b      	mov	r3, r7
 800182c:	493e      	ldr	r1, [pc, #248]	; (8001928 <sendDataOverUART+0x140>)
 800182e:	4618      	mov	r0, r3
 8001830:	f006 fcb4 	bl	800819c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 8001834:	463b      	mov	r3, r7
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fd02 	bl	8000240 <strlen>
 800183c:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 800183e:	b29a      	uxth	r2, r3
 8001840:	4639      	mov	r1, r7
 8001842:	f04f 33ff 	mov.w	r3, #4294967295
 8001846:	4839      	ldr	r0, [pc, #228]	; (800192c <sendDataOverUART+0x144>)
 8001848:	f005 fcdc 	bl	8007204 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	3301      	adds	r3, #1
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	3301      	adds	r3, #1
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
 8001858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800185a:	4b35      	ldr	r3, [pc, #212]	; (8001930 <sendDataOverUART+0x148>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d3d4      	bcc.n	800180c <sendDataOverUART+0x24>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8001862:	2300      	movs	r3, #0
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
 8001866:	e025      	b.n	80018b4 <sendDataOverUART+0xcc>
			adc = (uint16_t) (buffer_rx2.uint8[i])
 8001868:	4a32      	ldr	r2, [pc, #200]	; (8001934 <sendDataOverUART+0x14c>)
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	4413      	add	r3, r2
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b29a      	uxth	r2, r3
					+ (uint16_t) (256 * buffer_rx2.uint8[i + 1]);
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	3301      	adds	r3, #1
 8001876:	492f      	ldr	r1, [pc, #188]	; (8001934 <sendDataOverUART+0x14c>)
 8001878:	5ccb      	ldrb	r3, [r1, r3]
 800187a:	b29b      	uxth	r3, r3
 800187c:	021b      	lsls	r3, r3, #8
 800187e:	b29b      	uxth	r3, r3
			adc = (uint16_t) (buffer_rx2.uint8[i])
 8001880:	4413      	add	r3, r2
 8001882:	847b      	strh	r3, [r7, #34]	; 0x22
			sprintf(msg_buffers, "%hu\n", adc);
 8001884:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001886:	463b      	mov	r3, r7
 8001888:	4927      	ldr	r1, [pc, #156]	; (8001928 <sendDataOverUART+0x140>)
 800188a:	4618      	mov	r0, r3
 800188c:	f006 fc86 	bl	800819c <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
					strlen(msg_buffers),
 8001890:	463b      	mov	r3, r7
 8001892:	4618      	mov	r0, r3
 8001894:	f7fe fcd4 	bl	8000240 <strlen>
 8001898:	4603      	mov	r3, r0
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers,
 800189a:	b29a      	uxth	r2, r3
 800189c:	4639      	mov	r1, r7
 800189e:	f04f 33ff 	mov.w	r3, #4294967295
 80018a2:	4822      	ldr	r0, [pc, #136]	; (800192c <sendDataOverUART+0x144>)
 80018a4:	f005 fcae 	bl	8007204 <HAL_UART_Transmit>
					HAL_MAX_DELAY);
			i++;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	3301      	adds	r3, #1
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
		for (i = 0; i < samplesPerPeriod; i++) {
 80018ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b0:	3301      	adds	r3, #1
 80018b2:	627b      	str	r3, [r7, #36]	; 0x24
 80018b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b6:	4b1e      	ldr	r3, [pc, #120]	; (8001930 <sendDataOverUART+0x148>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d3d4      	bcc.n	8001868 <sendDataOverUART+0x80>
		}
		sprintf(msg_buffers, ";%hu\n", 50);
 80018be:	463b      	mov	r3, r7
 80018c0:	2232      	movs	r2, #50	; 0x32
 80018c2:	491d      	ldr	r1, [pc, #116]	; (8001938 <sendDataOverUART+0x150>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f006 fc69 	bl	800819c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 80018ca:	463b      	mov	r3, r7
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7fe fcb7 	bl	8000240 <strlen>
 80018d2:	4603      	mov	r3, r0
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	4639      	mov	r1, r7
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	4813      	ldr	r0, [pc, #76]	; (800192c <sendDataOverUART+0x144>)
 80018de:	f005 fc91 	bl	8007204 <HAL_UART_Transmit>
		sprintf(msg_freq, "%d\n", frequency);
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
		HAL_MAX_DELAY);
	}

}
 80018e2:	e019      	b.n	8001918 <sendDataOverUART+0x130>
	} else if (state.activeMeasureTechnique == 3) {
 80018e4:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <sendDataOverUART+0x138>)
 80018e6:	785b      	ldrb	r3, [r3, #1]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d115      	bne.n	8001918 <sendDataOverUART+0x130>
		sprintf(msg_freq, "%d\n", frequency);
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <sendDataOverUART+0x154>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	f107 0310 	add.w	r3, r7, #16
 80018f4:	4912      	ldr	r1, [pc, #72]	; (8001940 <sendDataOverUART+0x158>)
 80018f6:	4618      	mov	r0, r3
 80018f8:	f006 fc50 	bl	800819c <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq),
 80018fc:	f107 0310 	add.w	r3, r7, #16
 8001900:	4618      	mov	r0, r3
 8001902:	f7fe fc9d 	bl	8000240 <strlen>
 8001906:	4603      	mov	r3, r0
 8001908:	b29a      	uxth	r2, r3
 800190a:	f107 0110 	add.w	r1, r7, #16
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	4806      	ldr	r0, [pc, #24]	; (800192c <sendDataOverUART+0x144>)
 8001914:	f005 fc76 	bl	8007204 <HAL_UART_Transmit>
}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	; 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20015bdc 	.word	0x20015bdc
 8001924:	20015d30 	.word	0x20015d30
 8001928:	080089c0 	.word	0x080089c0
 800192c:	20000204 	.word	0x20000204
 8001930:	20000000 	.word	0x20000000
 8001934:	200002d4 	.word	0x200002d4
 8001938:	080089c8 	.word	0x080089c8
 800193c:	200000a0 	.word	0x200000a0
 8001940:	080089d0 	.word	0x080089d0

08001944 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	//stop the ADC when in interrupt
	HAL_ADC_Stop_DMA(&hadc1);
 800194c:	481f      	ldr	r0, [pc, #124]	; (80019cc <HAL_ADC_ConvCpltCallback+0x88>)
 800194e:	f000 ffa9 	bl	80028a4 <HAL_ADC_Stop_DMA>
	filledBuffers++;
 8001952:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b1d      	ldr	r3, [pc, #116]	; (80019d0 <HAL_ADC_ConvCpltCallback+0x8c>)
 800195c:	701a      	strb	r2, [r3, #0]
	// observe interval of SPI receiving
	// Run the measurement again

	//first buffer is filled
	if (filledBuffers == 1) {
 800195e:	4b1c      	ldr	r3, [pc, #112]	; (80019d0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d107      	bne.n	8001976 <HAL_ADC_ConvCpltCallback+0x32>

		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx2.uint16,
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_ADC_ConvCpltCallback+0x90>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	461a      	mov	r2, r3
 800196c:	491a      	ldr	r1, [pc, #104]	; (80019d8 <HAL_ADC_ConvCpltCallback+0x94>)
 800196e:	4817      	ldr	r0, [pc, #92]	; (80019cc <HAL_ADC_ConvCpltCallback+0x88>)
 8001970:	f000 feaa 	bl	80026c8 <HAL_ADC_Start_DMA>
					samplesPerPeriod);
		}

	}

}
 8001974:	e026      	b.n	80019c4 <HAL_ADC_ConvCpltCallback+0x80>
	else if (filledBuffers == 2) {
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b02      	cmp	r3, #2
 800197c:	d122      	bne.n	80019c4 <HAL_ADC_ConvCpltCallback+0x80>
		switchingCircuitIdle();
 800197e:	f7ff fe1d 	bl	80015bc <switchingCircuitIdle>
		filledBuffers = 0;
 8001982:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001988:	f7ff ff2e 	bl	80017e8 <sendDataOverUART>
		state.remainingMeasurements--;
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <HAL_ADC_ConvCpltCallback+0x98>)
 800198e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001992:	b29b      	uxth	r3, r3
 8001994:	3b01      	subs	r3, #1
 8001996:	b29b      	uxth	r3, r3
 8001998:	b21a      	sxth	r2, r3
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <HAL_ADC_ConvCpltCallback+0x98>)
 800199c:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 800199e:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <HAL_ADC_ConvCpltCallback+0x98>)
 80019a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d106      	bne.n	80019b6 <HAL_ADC_ConvCpltCallback+0x72>
			state.activeMeasureTechnique = 0;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	; (80019dc <HAL_ADC_ConvCpltCallback+0x98>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	705a      	strb	r2, [r3, #1]
			HAL_TIM_Base_Stop_IT(&htim4);
 80019ae:	480c      	ldr	r0, [pc, #48]	; (80019e0 <HAL_ADC_ConvCpltCallback+0x9c>)
 80019b0:	f003 feb4 	bl	800571c <HAL_TIM_Base_Stop_IT>
}
 80019b4:	e006      	b.n	80019c4 <HAL_ADC_ConvCpltCallback+0x80>
			HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_rx1.uint16,
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <HAL_ADC_ConvCpltCallback+0x90>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	4909      	ldr	r1, [pc, #36]	; (80019e4 <HAL_ADC_ConvCpltCallback+0xa0>)
 80019be:	4803      	ldr	r0, [pc, #12]	; (80019cc <HAL_ADC_ConvCpltCallback+0x88>)
 80019c0:	f000 fe82 	bl	80026c8 <HAL_ADC_Start_DMA>
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20015c68 	.word	0x20015c68
 80019d0:	20000090 	.word	0x20000090
 80019d4:	20000000 	.word	0x20000000
 80019d8:	200002d4 	.word	0x200002d4
 80019dc:	20015bdc 	.word	0x20015bdc
 80019e0:	200001c4 	.word	0x200001c4
 80019e4:	20015d30 	.word	0x20015d30

080019e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a0f      	ldr	r2, [pc, #60]	; (8001a34 <HAL_UART_RxCpltCallback+0x4c>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d117      	bne.n	8001a2a <HAL_UART_RxCpltCallback+0x42>
		state.measureTechniqueUpdated = 1;
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <HAL_UART_RxCpltCallback+0x50>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	719a      	strb	r2, [r3, #6]
		prepareForNextMeasurements(buffer_uart_rx);
 8001a00:	480e      	ldr	r0, [pc, #56]	; (8001a3c <HAL_UART_RxCpltCallback+0x54>)
 8001a02:	f000 f81f 	bl	8001a44 <prepareForNextMeasurements>
		char msg_buffer[18];
		//sprintf(msg_buffer, "Mode %u selected\n\r", state.setMeasureTechnique);
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffer, strlen(msg_buffer),
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fc18 	bl	8000240 <strlen>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	f107 010c 	add.w	r1, r7, #12
 8001a18:	230a      	movs	r3, #10
 8001a1a:	4809      	ldr	r0, [pc, #36]	; (8001a40 <HAL_UART_RxCpltCallback+0x58>)
 8001a1c:	f005 fbf2 	bl	8007204 <HAL_UART_Transmit>
				10);
		//wait for next incomming data
		HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 3);
 8001a20:	2203      	movs	r2, #3
 8001a22:	4906      	ldr	r1, [pc, #24]	; (8001a3c <HAL_UART_RxCpltCallback+0x54>)
 8001a24:	4806      	ldr	r0, [pc, #24]	; (8001a40 <HAL_UART_RxCpltCallback+0x58>)
 8001a26:	f005 fc7f 	bl	8007328 <HAL_UART_Receive_IT>
	}
}
 8001a2a:	bf00      	nop
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40004800 	.word	0x40004800
 8001a38:	20015bdc 	.word	0x20015bdc
 8001a3c:	200002d0 	.word	0x200002d0
 8001a40:	20000204 	.word	0x20000204

08001a44 <prepareForNextMeasurements>:

prepareForNextMeasurements(char *receivedData) {
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

	//set measurement method
	switch (receivedData[0]) {
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	3b30      	subs	r3, #48	; 0x30
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d81a      	bhi.n	8001a8c <prepareForNextMeasurements+0x48>
 8001a56:	a201      	add	r2, pc, #4	; (adr r2, 8001a5c <prepareForNextMeasurements+0x18>)
 8001a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a5c:	08001a6d 	.word	0x08001a6d
 8001a60:	08001a75 	.word	0x08001a75
 8001a64:	08001a7d 	.word	0x08001a7d
 8001a68:	08001a85 	.word	0x08001a85
	case '0':
		state.setMeasureTechnique = 0;
 8001a6c:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
		break;
 8001a72:	e00f      	b.n	8001a94 <prepareForNextMeasurements+0x50>
	case '1':
		state.setMeasureTechnique = 1;
 8001a74:	4b32      	ldr	r3, [pc, #200]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
		break;
 8001a7a:	e00b      	b.n	8001a94 <prepareForNextMeasurements+0x50>
	case '2':
		state.setMeasureTechnique = 2;
 8001a7c:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	701a      	strb	r2, [r3, #0]
		break;
 8001a82:	e007      	b.n	8001a94 <prepareForNextMeasurements+0x50>
	case '3':
		state.setMeasureTechnique = 3;
 8001a84:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001a86:	2203      	movs	r2, #3
 8001a88:	701a      	strb	r2, [r3, #0]
		break;
 8001a8a:	e003      	b.n	8001a94 <prepareForNextMeasurements+0x50>
	default:
		state.setMeasureTechnique = 0;
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
		break;
 8001a92:	bf00      	nop
	}

	//set number of measurements
	switch (receivedData[1]) {
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	3301      	adds	r3, #1
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	3b30      	subs	r3, #48	; 0x30
 8001a9c:	2b09      	cmp	r3, #9
 8001a9e:	d840      	bhi.n	8001b22 <prepareForNextMeasurements+0xde>
 8001aa0:	a201      	add	r2, pc, #4	; (adr r2, 8001aa8 <prepareForNextMeasurements+0x64>)
 8001aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aa6:	bf00      	nop
 8001aa8:	08001ad1 	.word	0x08001ad1
 8001aac:	08001adb 	.word	0x08001adb
 8001ab0:	08001ae3 	.word	0x08001ae3
 8001ab4:	08001aeb 	.word	0x08001aeb
 8001ab8:	08001af3 	.word	0x08001af3
 8001abc:	08001afb 	.word	0x08001afb
 8001ac0:	08001b03 	.word	0x08001b03
 8001ac4:	08001b0b 	.word	0x08001b0b
 8001ac8:	08001b13 	.word	0x08001b13
 8001acc:	08001b1b 	.word	0x08001b1b
	case '0':
		state.setMeasurements = -1;
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad6:	809a      	strh	r2, [r3, #4]
		break;
 8001ad8:	e027      	b.n	8001b2a <prepareForNextMeasurements+0xe6>
	case '1':
		state.setMeasurements = 1;
 8001ada:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	809a      	strh	r2, [r3, #4]
		break;
 8001ae0:	e023      	b.n	8001b2a <prepareForNextMeasurements+0xe6>
	case '2':
		state.setMeasurements = 2;
 8001ae2:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	809a      	strh	r2, [r3, #4]
		break;
 8001ae8:	e01f      	b.n	8001b2a <prepareForNextMeasurements+0xe6>
	case '3':
		state.setMeasurements = 3;
 8001aea:	4b15      	ldr	r3, [pc, #84]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001aec:	2203      	movs	r2, #3
 8001aee:	809a      	strh	r2, [r3, #4]
		break;
 8001af0:	e01b      	b.n	8001b2a <prepareForNextMeasurements+0xe6>
	case '4':
		state.setMeasurements = 4;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001af4:	2204      	movs	r2, #4
 8001af6:	809a      	strh	r2, [r3, #4]
		break;
 8001af8:	e017      	b.n	8001b2a <prepareForNextMeasurements+0xe6>
	case '5':
		state.setMeasurements = 5;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001afc:	2205      	movs	r2, #5
 8001afe:	809a      	strh	r2, [r3, #4]
		break;
 8001b00:	e013      	b.n	8001b2a <prepareForNextMeasurements+0xe6>
	case '6':
		state.setMeasurements = 6;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001b04:	2206      	movs	r2, #6
 8001b06:	809a      	strh	r2, [r3, #4]
		break;
 8001b08:	e00f      	b.n	8001b2a <prepareForNextMeasurements+0xe6>
	case '7':
		state.setMeasurements = 7;
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001b0c:	2207      	movs	r2, #7
 8001b0e:	809a      	strh	r2, [r3, #4]
		break;
 8001b10:	e00b      	b.n	8001b2a <prepareForNextMeasurements+0xe6>
	case '8':
		state.setMeasurements = 8;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001b14:	2208      	movs	r2, #8
 8001b16:	809a      	strh	r2, [r3, #4]
		break;
 8001b18:	e007      	b.n	8001b2a <prepareForNextMeasurements+0xe6>
	case '9':
		state.setMeasurements = 9;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001b1c:	2209      	movs	r2, #9
 8001b1e:	809a      	strh	r2, [r3, #4]
		break;
 8001b20:	e003      	b.n	8001b2a <prepareForNextMeasurements+0xe6>
	default:
		state.setMeasurements = 1;
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	809a      	strh	r2, [r3, #4]
		break;
 8001b28:	bf00      	nop
	}
	state.preparedToRunPolarizationPhase = 1;
 8001b2a:	4b05      	ldr	r3, [pc, #20]	; (8001b40 <prepareForNextMeasurements+0xfc>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	71da      	strb	r2, [r3, #7]
}
 8001b30:	bf00      	nop
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20015bdc 	.word	0x20015bdc

08001b44 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	filledBuffers++;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <HAL_SPI_RxCpltCallback+0x90>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	b2da      	uxtb	r2, r3
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <HAL_SPI_RxCpltCallback+0x90>)
 8001b56:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffers == 1) {
 8001b58:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <HAL_SPI_RxCpltCallback+0x90>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d108      	bne.n	8001b72 <HAL_SPI_RxCpltCallback+0x2e>
		HAL_SPI_Receive_DMA(&hspi1, buffer_rx2.uint8, samplesPerPeriod);
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_SPI_RxCpltCallback+0x94>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	461a      	mov	r2, r3
 8001b68:	491c      	ldr	r1, [pc, #112]	; (8001bdc <HAL_SPI_RxCpltCallback+0x98>)
 8001b6a:	481d      	ldr	r0, [pc, #116]	; (8001be0 <HAL_SPI_RxCpltCallback+0x9c>)
 8001b6c:	f003 f874 	bl	8004c58 <HAL_SPI_Receive_DMA>
	 samplesPerPeriod++;
	 sprintf(msg_buffers, "%hu\n", adc);
	 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);

	 }*/
}
 8001b70:	e02b      	b.n	8001bca <HAL_SPI_RxCpltCallback+0x86>
	else if (filledBuffers == 2) {
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <HAL_SPI_RxCpltCallback+0x90>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d127      	bne.n	8001bca <HAL_SPI_RxCpltCallback+0x86>
		switchingCircuitIdle();
 8001b7a:	f7ff fd1f 	bl	80015bc <switchingCircuitIdle>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4818      	ldr	r0, [pc, #96]	; (8001be4 <HAL_SPI_RxCpltCallback+0xa0>)
 8001b82:	f003 feab 	bl	80058dc <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001b86:	2104      	movs	r1, #4
 8001b88:	4816      	ldr	r0, [pc, #88]	; (8001be4 <HAL_SPI_RxCpltCallback+0xa0>)
 8001b8a:	f003 fea7 	bl	80058dc <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8001b8e:	2100      	movs	r1, #0
 8001b90:	4815      	ldr	r0, [pc, #84]	; (8001be8 <HAL_SPI_RxCpltCallback+0xa4>)
 8001b92:	f003 fea3 	bl	80058dc <HAL_TIM_PWM_Stop_IT>
		filledBuffers = 0;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_SPI_RxCpltCallback+0x90>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001b9c:	f7ff fe24 	bl	80017e8 <sendDataOverUART>
		state.remainingMeasurements--;
 8001ba0:	4b12      	ldr	r3, [pc, #72]	; (8001bec <HAL_SPI_RxCpltCallback+0xa8>)
 8001ba2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	b21a      	sxth	r2, r3
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <HAL_SPI_RxCpltCallback+0xa8>)
 8001bb0:	805a      	strh	r2, [r3, #2]
		if (state.remainingMeasurements == 0) {
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_SPI_RxCpltCallback+0xa8>)
 8001bb4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d103      	bne.n	8001bc4 <HAL_SPI_RxCpltCallback+0x80>
			state.activeMeasureTechnique = 0;
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_SPI_RxCpltCallback+0xa8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	705a      	strb	r2, [r3, #1]
}
 8001bc2:	e002      	b.n	8001bca <HAL_SPI_RxCpltCallback+0x86>
			state.preparedToRunPolarizationPhase = 1;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <HAL_SPI_RxCpltCallback+0xa8>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	71da      	strb	r2, [r3, #7]
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	20000090 	.word	0x20000090
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	200002d4 	.word	0x200002d4
 8001be0:	2002b65c 	.word	0x2002b65c
 8001be4:	2002b61c 	.word	0x2002b61c
 8001be8:	20000184 	.word	0x20000184
 8001bec:	20015bdc 	.word	0x20015bdc

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_MspInit+0x44>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	; (8001c44 <HAL_MspInit+0x44>)
 8001c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <HAL_MspInit+0x44>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_MspInit+0x44>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <HAL_MspInit+0x44>)
 8001c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <HAL_MspInit+0x44>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800

08001c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a15      	ldr	r2, [pc, #84]	; (8001cbc <HAL_ADC_MspInit+0x74>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d123      	bne.n	8001cb2 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_ADC_MspInit+0x78>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <HAL_ADC_MspInit+0x78>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_ADC_MspInit+0x78>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_ADC_MspInit+0x78>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a0e      	ldr	r2, [pc, #56]	; (8001cc0 <HAL_ADC_MspInit+0x78>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <HAL_ADC_MspInit+0x78>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <HAL_ADC_MspInit+0x7c>)
 8001cae:	f001 fb4f 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	; 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40012000 	.word	0x40012000
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020000 	.word	0x40020000

08001cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a3d      	ldr	r2, [pc, #244]	; (8001ddc <HAL_I2C_MspInit+0x114>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d128      	bne.n	8001d3c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b3d      	ldr	r3, [pc, #244]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a3c      	ldr	r2, [pc, #240]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d02:	23c0      	movs	r3, #192	; 0xc0
 8001d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d06:	2312      	movs	r3, #18
 8001d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d12:	2304      	movs	r3, #4
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d16:	f107 031c 	add.w	r3, r7, #28
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4831      	ldr	r0, [pc, #196]	; (8001de4 <HAL_I2C_MspInit+0x11c>)
 8001d1e:	f001 fb17 	bl	8003350 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a2e      	ldr	r2, [pc, #184]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d2e:	4b2c      	ldr	r3, [pc, #176]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d36:	617b      	str	r3, [r7, #20]
 8001d38:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d3a:	e04a      	b.n	8001dd2 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <HAL_I2C_MspInit+0x120>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d145      	bne.n	8001dd2 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b23      	ldr	r3, [pc, #140]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0304 	and.w	r3, r3, #4
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a1f      	ldr	r2, [pc, #124]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b1d      	ldr	r3, [pc, #116]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d7c:	2312      	movs	r3, #18
 8001d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d80:	2301      	movs	r3, #1
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d84:	2303      	movs	r3, #3
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d88:	2304      	movs	r3, #4
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	4619      	mov	r1, r3
 8001d92:	4816      	ldr	r0, [pc, #88]	; (8001dec <HAL_I2C_MspInit+0x124>)
 8001d94:	f001 fadc 	bl	8003350 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d9e:	2312      	movs	r3, #18
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001daa:	2304      	movs	r3, #4
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	480e      	ldr	r0, [pc, #56]	; (8001df0 <HAL_I2C_MspInit+0x128>)
 8001db6:	f001 facb 	bl	8003350 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001dc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_I2C_MspInit+0x118>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
}
 8001dd2:	bf00      	nop
 8001dd4:	3730      	adds	r7, #48	; 0x30
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020400 	.word	0x40020400
 8001de8:	40005c00 	.word	0x40005c00
 8001dec:	40020800 	.word	0x40020800
 8001df0:	40020000 	.word	0x40020000

08001df4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08c      	sub	sp, #48	; 0x30
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfc:	f107 031c 	add.w	r3, r7, #28
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a2e      	ldr	r2, [pc, #184]	; (8001ecc <HAL_SPI_MspInit+0xd8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d128      	bne.n	8001e68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a2d      	ldr	r2, [pc, #180]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2e:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a27      	ldr	r2, [pc, #156]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b25      	ldr	r3, [pc, #148]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 8001e46:	23b0      	movs	r3, #176	; 0xb0
 8001e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e56:	2305      	movs	r3, #5
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5a:	f107 031c 	add.w	r3, r7, #28
 8001e5e:	4619      	mov	r1, r3
 8001e60:	481c      	ldr	r0, [pc, #112]	; (8001ed4 <HAL_SPI_MspInit+0xe0>)
 8001e62:	f001 fa75 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8001e66:	e02c      	b.n	8001ec2 <HAL_SPI_MspInit+0xce>
  else if(hspi->Instance==SPI4)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <HAL_SPI_MspInit+0xe4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d127      	bne.n	8001ec2 <HAL_SPI_MspInit+0xce>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a16      	ldr	r2, [pc, #88]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a10      	ldr	r2, [pc, #64]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_SPI_MspInit+0xdc>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001ea2:	2374      	movs	r3, #116	; 0x74
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001eb6:	f107 031c 	add.w	r3, r7, #28
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4807      	ldr	r0, [pc, #28]	; (8001edc <HAL_SPI_MspInit+0xe8>)
 8001ebe:	f001 fa47 	bl	8003350 <HAL_GPIO_Init>
}
 8001ec2:	bf00      	nop
 8001ec4:	3730      	adds	r7, #48	; 0x30
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40013000 	.word	0x40013000
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40013400 	.word	0x40013400
 8001edc:	40021000 	.word	0x40021000

08001ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a28      	ldr	r2, [pc, #160]	; (8001f90 <HAL_TIM_Base_MspInit+0xb0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10c      	bne.n	8001f0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ef2:	4b28      	ldr	r3, [pc, #160]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef6:	4a27      	ldr	r2, [pc, #156]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6453      	str	r3, [r2, #68]	; 0x44
 8001efe:	4b25      	ldr	r3, [pc, #148]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f0a:	e03c      	b.n	8001f86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a21      	ldr	r2, [pc, #132]	; (8001f98 <HAL_TIM_Base_MspInit+0xb8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d10c      	bne.n	8001f30 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f16:	4b1f      	ldr	r3, [pc, #124]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a1e      	ldr	r2, [pc, #120]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
}
 8001f2e:	e02a      	b.n	8001f86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM5)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_TIM_Base_MspInit+0xbc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d114      	bne.n	8001f64 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f3a:	4b16      	ldr	r3, [pc, #88]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001f40:	f043 0308 	orr.w	r3, r3, #8
 8001f44:	6413      	str	r3, [r2, #64]	; 0x40
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001f52:	2200      	movs	r2, #0
 8001f54:	2100      	movs	r1, #0
 8001f56:	2032      	movs	r0, #50	; 0x32
 8001f58:	f001 f8a3 	bl	80030a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f5c:	2032      	movs	r0, #50	; 0x32
 8001f5e:	f001 f8bc 	bl	80030da <HAL_NVIC_EnableIRQ>
}
 8001f62:	e010      	b.n	8001f86 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0d      	ldr	r2, [pc, #52]	; (8001fa0 <HAL_TIM_Base_MspInit+0xc0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d10b      	bne.n	8001f86 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001f74:	f043 0302 	orr.w	r3, r3, #2
 8001f78:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_TIM_Base_MspInit+0xb4>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40010000 	.word	0x40010000
 8001f94:	40023800 	.word	0x40023800
 8001f98:	40000400 	.word	0x40000400
 8001f9c:	40000c00 	.word	0x40000c00
 8001fa0:	40010400 	.word	0x40010400

08001fa4 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc4:	d128      	bne.n	8002018 <HAL_TIM_IC_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <HAL_TIM_IC_MspInit+0x7c>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a15      	ldr	r2, [pc, #84]	; (8002020 <HAL_TIM_IC_MspInit+0x7c>)
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b13      	ldr	r3, [pc, #76]	; (8002020 <HAL_TIM_IC_MspInit+0x7c>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_TIM_IC_MspInit+0x7c>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <HAL_TIM_IC_MspInit+0x7c>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_TIM_IC_MspInit+0x7c>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8001ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002008:	2301      	movs	r3, #1
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 0314 	add.w	r3, r7, #20
 8002010:	4619      	mov	r1, r3
 8002012:	4804      	ldr	r0, [pc, #16]	; (8002024 <HAL_TIM_IC_MspInit+0x80>)
 8002014:	f001 f99c 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002018:	bf00      	nop
 800201a:	3728      	adds	r7, #40	; 0x28
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	40020000 	.word	0x40020000

08002028 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <HAL_TIM_PWM_MspInit+0x38>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d10b      	bne.n	8002052 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_TIM_PWM_MspInit+0x3c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	4a09      	ldr	r2, [pc, #36]	; (8002064 <HAL_TIM_PWM_MspInit+0x3c>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6413      	str	r3, [r2, #64]	; 0x40
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <HAL_TIM_PWM_MspInit+0x3c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002052:	bf00      	nop
 8002054:	3714      	adds	r7, #20
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	40000800 	.word	0x40000800
 8002064:	40023800 	.word	0x40023800

08002068 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]
 800207a:	609a      	str	r2, [r3, #8]
 800207c:	60da      	str	r2, [r3, #12]
 800207e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a45      	ldr	r2, [pc, #276]	; (800219c <HAL_TIM_MspPostInit+0x134>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d11d      	bne.n	80020c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800208a:	4b45      	ldr	r3, [pc, #276]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208e:	4a44      	ldr	r2, [pc, #272]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 8002090:	f043 0310 	orr.w	r3, r3, #16
 8002094:	6313      	str	r3, [r2, #48]	; 0x30
 8002096:	4b42      	ldr	r3, [pc, #264]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	f003 0310 	and.w	r3, r3, #16
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 80020a2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80020a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020b4:	2301      	movs	r3, #1
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	4839      	ldr	r0, [pc, #228]	; (80021a4 <HAL_TIM_MspPostInit+0x13c>)
 80020c0:	f001 f946 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80020c4:	e065      	b.n	8002192 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a37      	ldr	r2, [pc, #220]	; (80021a8 <HAL_TIM_MspPostInit+0x140>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d11c      	bne.n	800210a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d0:	4b33      	ldr	r3, [pc, #204]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a32      	ldr	r2, [pc, #200]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
 80020e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 80020e8:	2340      	movs	r3, #64	; 0x40
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ec:	2302      	movs	r3, #2
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020f8:	2302      	movs	r3, #2
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 031c 	add.w	r3, r7, #28
 8002100:	4619      	mov	r1, r3
 8002102:	482a      	ldr	r0, [pc, #168]	; (80021ac <HAL_TIM_MspPostInit+0x144>)
 8002104:	f001 f924 	bl	8003350 <HAL_GPIO_Init>
}
 8002108:	e043      	b.n	8002192 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a28      	ldr	r2, [pc, #160]	; (80021b0 <HAL_TIM_MspPostInit+0x148>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d11d      	bne.n	8002150 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002114:	4b22      	ldr	r3, [pc, #136]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a21      	ldr	r2, [pc, #132]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 800212c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800213e:	2302      	movs	r3, #2
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	481a      	ldr	r0, [pc, #104]	; (80021b4 <HAL_TIM_MspPostInit+0x14c>)
 800214a:	f001 f901 	bl	8003350 <HAL_GPIO_Init>
}
 800214e:	e020      	b.n	8002192 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <HAL_TIM_MspPostInit+0x150>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d11b      	bne.n	8002192 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	4b11      	ldr	r3, [pc, #68]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	4a10      	ldr	r2, [pc, #64]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6313      	str	r3, [r2, #48]	; 0x30
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_TIM_MspPostInit+0x138>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 8002172:	2340      	movs	r3, #64	; 0x40
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217e:	2300      	movs	r3, #0
 8002180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002182:	2303      	movs	r3, #3
 8002184:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 8002186:	f107 031c 	add.w	r3, r7, #28
 800218a:	4619      	mov	r1, r3
 800218c:	480b      	ldr	r0, [pc, #44]	; (80021bc <HAL_TIM_MspPostInit+0x154>)
 800218e:	f001 f8df 	bl	8003350 <HAL_GPIO_Init>
}
 8002192:	bf00      	nop
 8002194:	3730      	adds	r7, #48	; 0x30
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	40010000 	.word	0x40010000
 80021a0:	40023800 	.word	0x40023800
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40000400 	.word	0x40000400
 80021ac:	40020000 	.word	0x40020000
 80021b0:	40000800 	.word	0x40000800
 80021b4:	40020c00 	.word	0x40020c00
 80021b8:	40010400 	.word	0x40010400
 80021bc:	40020800 	.word	0x40020800

080021c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b092      	sub	sp, #72	; 0x48
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a79      	ldr	r2, [pc, #484]	; (80023c4 <HAL_UART_MspInit+0x204>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d129      	bne.n	8002236 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80021e2:	4b79      	ldr	r3, [pc, #484]	; (80023c8 <HAL_UART_MspInit+0x208>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a78      	ldr	r2, [pc, #480]	; (80023c8 <HAL_UART_MspInit+0x208>)
 80021e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <HAL_UART_MspInit+0x208>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fa:	4b73      	ldr	r3, [pc, #460]	; (80023c8 <HAL_UART_MspInit+0x208>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a72      	ldr	r2, [pc, #456]	; (80023c8 <HAL_UART_MspInit+0x208>)
 8002200:	f043 0302 	orr.w	r3, r3, #2
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b70      	ldr	r3, [pc, #448]	; (80023c8 <HAL_UART_MspInit+0x208>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = UART5_RX_Pin|UART5_TX_Pin;
 8002212:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002216:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002218:	2302      	movs	r3, #2
 800221a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002220:	2303      	movs	r3, #3
 8002222:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002224:	2308      	movs	r3, #8
 8002226:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800222c:	4619      	mov	r1, r3
 800222e:	4867      	ldr	r0, [pc, #412]	; (80023cc <HAL_UART_MspInit+0x20c>)
 8002230:	f001 f88e 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002234:	e0c1      	b.n	80023ba <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==UART7)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a65      	ldr	r2, [pc, #404]	; (80023d0 <HAL_UART_MspInit+0x210>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d129      	bne.n	8002294 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002240:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <HAL_UART_MspInit+0x208>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	4a60      	ldr	r2, [pc, #384]	; (80023c8 <HAL_UART_MspInit+0x208>)
 8002246:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800224a:	6413      	str	r3, [r2, #64]	; 0x40
 800224c:	4b5e      	ldr	r3, [pc, #376]	; (80023c8 <HAL_UART_MspInit+0x208>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002254:	62bb      	str	r3, [r7, #40]	; 0x28
 8002256:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002258:	4b5b      	ldr	r3, [pc, #364]	; (80023c8 <HAL_UART_MspInit+0x208>)
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	4a5a      	ldr	r2, [pc, #360]	; (80023c8 <HAL_UART_MspInit+0x208>)
 800225e:	f043 0310 	orr.w	r3, r3, #16
 8002262:	6313      	str	r3, [r2, #48]	; 0x30
 8002264:	4b58      	ldr	r3, [pc, #352]	; (80023c8 <HAL_UART_MspInit+0x208>)
 8002266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002268:	f003 0310 	and.w	r3, r3, #16
 800226c:	627b      	str	r3, [r7, #36]	; 0x24
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002270:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002274:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002276:	2302      	movs	r3, #2
 8002278:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227a:	2300      	movs	r3, #0
 800227c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002282:	2308      	movs	r3, #8
 8002284:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002286:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800228a:	4619      	mov	r1, r3
 800228c:	4851      	ldr	r0, [pc, #324]	; (80023d4 <HAL_UART_MspInit+0x214>)
 800228e:	f001 f85f 	bl	8003350 <HAL_GPIO_Init>
}
 8002292:	e092      	b.n	80023ba <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a4f      	ldr	r2, [pc, #316]	; (80023d8 <HAL_UART_MspInit+0x218>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d129      	bne.n	80022f2 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 800229e:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_UART_MspInit+0x208>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	4a49      	ldr	r2, [pc, #292]	; (80023c8 <HAL_UART_MspInit+0x208>)
 80022a4:	f043 0310 	orr.w	r3, r3, #16
 80022a8:	6453      	str	r3, [r2, #68]	; 0x44
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_UART_MspInit+0x208>)
 80022ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	623b      	str	r3, [r7, #32]
 80022b4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	4b44      	ldr	r3, [pc, #272]	; (80023c8 <HAL_UART_MspInit+0x208>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	4a43      	ldr	r2, [pc, #268]	; (80023c8 <HAL_UART_MspInit+0x208>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	6313      	str	r3, [r2, #48]	; 0x30
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_UART_MspInit+0x208>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 80022ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80022d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d4:	2302      	movs	r3, #2
 80022d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022dc:	2303      	movs	r3, #3
 80022de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80022e0:	2304      	movs	r3, #4
 80022e2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022e8:	4619      	mov	r1, r3
 80022ea:	4838      	ldr	r0, [pc, #224]	; (80023cc <HAL_UART_MspInit+0x20c>)
 80022ec:	f001 f830 	bl	8003350 <HAL_GPIO_Init>
}
 80022f0:	e063      	b.n	80023ba <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART2)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a39      	ldr	r2, [pc, #228]	; (80023dc <HAL_UART_MspInit+0x21c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d128      	bne.n	800234e <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80022fc:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <HAL_UART_MspInit+0x208>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <HAL_UART_MspInit+0x208>)
 8002302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002306:	6413      	str	r3, [r2, #64]	; 0x40
 8002308:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <HAL_UART_MspInit+0x208>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	61bb      	str	r3, [r7, #24]
 8002312:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <HAL_UART_MspInit+0x208>)
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	4a2b      	ldr	r2, [pc, #172]	; (80023c8 <HAL_UART_MspInit+0x208>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6313      	str	r3, [r2, #48]	; 0x30
 8002320:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <HAL_UART_MspInit+0x208>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 800232c:	230c      	movs	r3, #12
 800232e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002338:	2303      	movs	r3, #3
 800233a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800233c:	2307      	movs	r3, #7
 800233e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002340:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002344:	4619      	mov	r1, r3
 8002346:	4826      	ldr	r0, [pc, #152]	; (80023e0 <HAL_UART_MspInit+0x220>)
 8002348:	f001 f802 	bl	8003350 <HAL_GPIO_Init>
}
 800234c:	e035      	b.n	80023ba <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a24      	ldr	r2, [pc, #144]	; (80023e4 <HAL_UART_MspInit+0x224>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d130      	bne.n	80023ba <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_UART_MspInit+0x208>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_UART_MspInit+0x208>)
 800235e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002362:	6413      	str	r3, [r2, #64]	; 0x40
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_UART_MspInit+0x208>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002370:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_UART_MspInit+0x208>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <HAL_UART_MspInit+0x208>)
 8002376:	f043 0302 	orr.w	r3, r3, #2
 800237a:	6313      	str	r3, [r2, #48]	; 0x30
 800237c:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_UART_MspInit+0x208>)
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 8002388:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800238c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800239a:	2307      	movs	r3, #7
 800239c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023a2:	4619      	mov	r1, r3
 80023a4:	4809      	ldr	r0, [pc, #36]	; (80023cc <HAL_UART_MspInit+0x20c>)
 80023a6:	f000 ffd3 	bl	8003350 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2027      	movs	r0, #39	; 0x27
 80023b0:	f000 fe77 	bl	80030a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023b4:	2027      	movs	r0, #39	; 0x27
 80023b6:	f000 fe90 	bl	80030da <HAL_NVIC_EnableIRQ>
}
 80023ba:	bf00      	nop
 80023bc:	3748      	adds	r7, #72	; 0x48
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40005000 	.word	0x40005000
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020400 	.word	0x40020400
 80023d0:	40007800 	.word	0x40007800
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40011000 	.word	0x40011000
 80023dc:	40004400 	.word	0x40004400
 80023e0:	40020000 	.word	0x40020000
 80023e4:	40004800 	.word	0x40004800

080023e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fa:	e7fe      	b.n	80023fa <HardFault_Handler+0x4>

080023fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002400:	e7fe      	b.n	8002400 <MemManage_Handler+0x4>

08002402 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002402:	b480      	push	{r7}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002406:	e7fe      	b.n	8002406 <BusFault_Handler+0x4>

08002408 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800240c:	e7fe      	b.n	800240c <UsageFault_Handler+0x4>

0800240e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800240e:	b480      	push	{r7}
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800243c:	f000 f8be 	bl	80025bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}

08002444 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <USART3_IRQHandler+0x10>)
 800244a:	f005 f80f 	bl	800746c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000204 	.word	0x20000204

08002458 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <TIM5_IRQHandler+0x10>)
 800245e:	f003 fbb7 	bl	8005bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20015b5c 	.word	0x20015b5c

0800246c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002474:	4b11      	ldr	r3, [pc, #68]	; (80024bc <_sbrk+0x50>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <_sbrk+0x16>
		heap_end = &end;
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <_sbrk+0x50>)
 800247e:	4a10      	ldr	r2, [pc, #64]	; (80024c0 <_sbrk+0x54>)
 8002480:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <_sbrk+0x50>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <_sbrk+0x50>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4413      	add	r3, r2
 8002490:	466a      	mov	r2, sp
 8002492:	4293      	cmp	r3, r2
 8002494:	d907      	bls.n	80024a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002496:	f005 fe4f 	bl	8008138 <__errno>
 800249a:	4602      	mov	r2, r0
 800249c:	230c      	movs	r3, #12
 800249e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295
 80024a4:	e006      	b.n	80024b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <_sbrk+0x50>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	4a03      	ldr	r2, [pc, #12]	; (80024bc <_sbrk+0x50>)
 80024b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80024b2:	68fb      	ldr	r3, [r7, #12]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200000ac 	.word	0x200000ac
 80024c0:	2002b788 	.word	0x2002b788

080024c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <SystemInit+0x28>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <SystemInit+0x28>)
 80024d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <SystemInit+0x28>)
 80024da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024de:	609a      	str	r2, [r3, #8]
#endif
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	e000ed00 	.word	0xe000ed00

080024f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002528 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024f6:	e003      	b.n	8002500 <LoopCopyDataInit>

080024f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80024fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024fe:	3104      	adds	r1, #4

08002500 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002500:	480b      	ldr	r0, [pc, #44]	; (8002530 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002504:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002506:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002508:	d3f6      	bcc.n	80024f8 <CopyDataInit>
  ldr  r2, =_sbss
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800250c:	e002      	b.n	8002514 <LoopFillZerobss>

0800250e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800250e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002510:	f842 3b04 	str.w	r3, [r2], #4

08002514 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002516:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002518:	d3f9      	bcc.n	800250e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800251a:	f7ff ffd3 	bl	80024c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800251e:	f005 fe11 	bl	8008144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002522:	f7fe f865 	bl	80005f0 <main>
  bx  lr    
 8002526:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002528:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800252c:	08008a30 	.word	0x08008a30
  ldr  r0, =_sdata
 8002530:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002534:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002538:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 800253c:	2002b788 	.word	0x2002b788

08002540 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002540:	e7fe      	b.n	8002540 <ADC_IRQHandler>

08002542 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002546:	2003      	movs	r0, #3
 8002548:	f000 fda0 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800254c:	2000      	movs	r0, #0
 800254e:	f000 f805 	bl	800255c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002552:	f7ff fb55 	bl	8001c00 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_InitTick+0x54>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_InitTick+0x58>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002572:	fbb3 f3f1 	udiv	r3, r3, r1
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fdbb 	bl	80030f6 <HAL_SYSTICK_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e00e      	b.n	80025a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b0f      	cmp	r3, #15
 800258e:	d80a      	bhi.n	80025a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002590:	2200      	movs	r2, #0
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f000 fd83 	bl	80030a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <HAL_InitTick+0x5c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000004 	.word	0x20000004
 80025b4:	2000000c 	.word	0x2000000c
 80025b8:	20000008 	.word	0x20000008

080025bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <HAL_IncTick+0x20>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_IncTick+0x24>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <HAL_IncTick+0x24>)
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	2002b780 	.word	0x2002b780

080025e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return uwTick;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_GetTick+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2002b780 	.word	0x2002b780

080025fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff ffee 	bl	80025e4 <HAL_GetTick>
 8002608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002614:	d005      	beq.n	8002622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_Delay+0x40>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	4413      	add	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002622:	bf00      	nop
 8002624:	f7ff ffde 	bl	80025e4 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	429a      	cmp	r2, r3
 8002632:	d8f7      	bhi.n	8002624 <HAL_Delay+0x28>
  {
  }
}
 8002634:	bf00      	nop
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	2000000c 	.word	0x2000000c

08002640 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e031      	b.n	80026ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d109      	bne.n	8002672 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff faf2 	bl	8001c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d116      	bne.n	80026ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_ADC_Init+0x84>)
 8002684:	4013      	ands	r3, r2
 8002686:	f043 0202 	orr.w	r2, r3, #2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fab0 	bl	8002bf4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	f023 0303 	bic.w	r3, r3, #3
 80026a2:	f043 0201 	orr.w	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
 80026aa:	e001      	b.n	80026b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	ffffeefd 	.word	0xffffeefd

080026c8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_Start_DMA+0x1e>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e0c7      	b.n	8002876 <HAL_ADC_Start_DMA+0x1ae>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d018      	beq.n	800272e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0201 	orr.w	r2, r2, #1
 800270a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800270c:	4b5c      	ldr	r3, [pc, #368]	; (8002880 <HAL_ADC_Start_DMA+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a5c      	ldr	r2, [pc, #368]	; (8002884 <HAL_ADC_Start_DMA+0x1bc>)
 8002712:	fba2 2303 	umull	r2, r3, r2, r3
 8002716:	0c9a      	lsrs	r2, r3, #18
 8002718:	4613      	mov	r3, r2
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4413      	add	r3, r2
 800271e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002720:	e002      	b.n	8002728 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3b01      	subs	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f9      	bne.n	8002722 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b01      	cmp	r3, #1
 800273a:	f040 809b 	bne.w	8002874 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002742:	4b51      	ldr	r3, [pc, #324]	; (8002888 <HAL_ADC_Start_DMA+0x1c0>)
 8002744:	4013      	ands	r3, r2
 8002746:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002758:	2b00      	cmp	r3, #0
 800275a:	d007      	beq.n	800276c <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002764:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002774:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002778:	d106      	bne.n	8002788 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	f023 0206 	bic.w	r2, r3, #6
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
 8002786:	e002      	b.n	800278e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2200      	movs	r2, #0
 800278c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	4a3c      	ldr	r2, [pc, #240]	; (800288c <HAL_ADC_Start_DMA+0x1c4>)
 800279c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a2:	4a3b      	ldr	r2, [pc, #236]	; (8002890 <HAL_ADC_Start_DMA+0x1c8>)
 80027a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	4a3a      	ldr	r2, [pc, #232]	; (8002894 <HAL_ADC_Start_DMA+0x1cc>)
 80027ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80027c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	334c      	adds	r3, #76	; 0x4c
 80027e2:	4619      	mov	r1, r3
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f000 fc91 	bl	800310e <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <HAL_ADC_Start_DMA+0x1d0>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10f      	bne.n	8002818 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d136      	bne.n	8002874 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	e02d      	b.n	8002874 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1f      	ldr	r2, [pc, #124]	; (800289c <HAL_ADC_Start_DMA+0x1d4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d10e      	bne.n	8002840 <HAL_ADC_Start_DMA+0x178>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d107      	bne.n	8002840 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800283e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <HAL_ADC_Start_DMA+0x1d0>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	d113      	bne.n	8002874 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <HAL_ADC_Start_DMA+0x1d8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10e      	bne.n	8002874 <HAL_ADC_Start_DMA+0x1ac>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d107      	bne.n	8002874 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002872:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	20000004 	.word	0x20000004
 8002884:	431bde83 	.word	0x431bde83
 8002888:	fffff8fe 	.word	0xfffff8fe
 800288c:	08002de9 	.word	0x08002de9
 8002890:	08002ea3 	.word	0x08002ea3
 8002894:	08002ebf 	.word	0x08002ebf
 8002898:	40012300 	.word	0x40012300
 800289c:	40012000 	.word	0x40012000
 80028a0:	40012200 	.word	0x40012200

080028a4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ac:	2300      	movs	r3, #0
 80028ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_ADC_Stop_DMA+0x1a>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e036      	b.n	800292c <HAL_ADC_Stop_DMA+0x88>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d11e      	bne.n	8002922 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689a      	ldr	r2, [r3, #8]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028f2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fc68 	bl	80031ce <HAL_DMA_Abort>
 80028fe:	4603      	mov	r3, r0
 8002900:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002910:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <HAL_ADC_Stop_DMA+0x90>)
 8002918:	4013      	ands	r3, r2
 800291a:	f043 0201 	orr.w	r2, r3, #1
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3710      	adds	r7, #16
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	ffffeefe 	.word	0xffffeefe

08002938 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_ADC_ConfigChannel+0x1c>
 8002978:	2302      	movs	r3, #2
 800297a:	e12a      	b.n	8002bd2 <HAL_ADC_ConfigChannel+0x272>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b09      	cmp	r3, #9
 800298a:	d93a      	bls.n	8002a02 <HAL_ADC_ConfigChannel+0xa2>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002994:	d035      	beq.n	8002a02 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68d9      	ldr	r1, [r3, #12]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	461a      	mov	r2, r3
 80029a4:	4613      	mov	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4413      	add	r3, r2
 80029aa:	3b1e      	subs	r3, #30
 80029ac:	2207      	movs	r2, #7
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	400a      	ands	r2, r1
 80029ba:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a87      	ldr	r2, [pc, #540]	; (8002be0 <HAL_ADC_ConfigChannel+0x280>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d10a      	bne.n	80029dc <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68d9      	ldr	r1, [r3, #12]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	061a      	lsls	r2, r3, #24
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029da:	e035      	b.n	8002a48 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68d9      	ldr	r1, [r3, #12]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4618      	mov	r0, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	4403      	add	r3, r0
 80029f4:	3b1e      	subs	r3, #30
 80029f6:	409a      	lsls	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	430a      	orrs	r2, r1
 80029fe:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a00:	e022      	b.n	8002a48 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6919      	ldr	r1, [r3, #16]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	2207      	movs	r2, #7
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	400a      	ands	r2, r1
 8002a24:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	6919      	ldr	r1, [r3, #16]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4618      	mov	r0, r3
 8002a38:	4603      	mov	r3, r0
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4403      	add	r3, r0
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b06      	cmp	r3, #6
 8002a4e:	d824      	bhi.n	8002a9a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	685a      	ldr	r2, [r3, #4]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	3b05      	subs	r3, #5
 8002a62:	221f      	movs	r2, #31
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	43da      	mvns	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	400a      	ands	r2, r1
 8002a70:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	3b05      	subs	r3, #5
 8002a8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	430a      	orrs	r2, r1
 8002a96:	635a      	str	r2, [r3, #52]	; 0x34
 8002a98:	e04c      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b0c      	cmp	r3, #12
 8002aa0:	d824      	bhi.n	8002aec <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3b23      	subs	r3, #35	; 0x23
 8002ab4:	221f      	movs	r2, #31
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	3b23      	subs	r3, #35	; 0x23
 8002ade:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
 8002aea:	e023      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	3b41      	subs	r3, #65	; 0x41
 8002afe:	221f      	movs	r2, #31
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43da      	mvns	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	3b41      	subs	r3, #65	; 0x41
 8002b28:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a2a      	ldr	r2, [pc, #168]	; (8002be4 <HAL_ADC_ConfigChannel+0x284>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10a      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1f4>
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b46:	d105      	bne.n	8002b54 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002b48:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_ADC_ConfigChannel+0x288>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <HAL_ADC_ConfigChannel+0x288>)
 8002b4e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b52:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a22      	ldr	r2, [pc, #136]	; (8002be4 <HAL_ADC_ConfigChannel+0x284>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d109      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x212>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2b12      	cmp	r3, #18
 8002b64:	d105      	bne.n	8002b72 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_ADC_ConfigChannel+0x288>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <HAL_ADC_ConfigChannel+0x288>)
 8002b6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b70:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <HAL_ADC_ConfigChannel+0x284>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d125      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x268>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a17      	ldr	r2, [pc, #92]	; (8002be0 <HAL_ADC_ConfigChannel+0x280>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <HAL_ADC_ConfigChannel+0x22e>
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b11      	cmp	r3, #17
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <HAL_ADC_ConfigChannel+0x288>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <HAL_ADC_ConfigChannel+0x288>)
 8002b94:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b98:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a10      	ldr	r2, [pc, #64]	; (8002be0 <HAL_ADC_ConfigChannel+0x280>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d111      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_ADC_ConfigChannel+0x28c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a11      	ldr	r2, [pc, #68]	; (8002bf0 <HAL_ADC_ConfigChannel+0x290>)
 8002baa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bae:	0c9a      	lsrs	r2, r3, #18
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bba:	e002      	b.n	8002bc2 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d1f9      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	10000012 	.word	0x10000012
 8002be4:	40012000 	.word	0x40012000
 8002be8:	40012300 	.word	0x40012300
 8002bec:	20000004 	.word	0x20000004
 8002bf0:	431bde83 	.word	0x431bde83

08002bf4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002bfc:	4b78      	ldr	r3, [pc, #480]	; (8002de0 <ADC_Init+0x1ec>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	4a77      	ldr	r2, [pc, #476]	; (8002de0 <ADC_Init+0x1ec>)
 8002c02:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002c06:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002c08:	4b75      	ldr	r3, [pc, #468]	; (8002de0 <ADC_Init+0x1ec>)
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	4973      	ldr	r1, [pc, #460]	; (8002de0 <ADC_Init+0x1ec>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c24:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6859      	ldr	r1, [r3, #4]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	021a      	lsls	r2, r3, #8
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68da      	ldr	r2, [r3, #12]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c82:	4a58      	ldr	r2, [pc, #352]	; (8002de4 <ADC_Init+0x1f0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689a      	ldr	r2, [r3, #8]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c96:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6899      	ldr	r1, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	689a      	ldr	r2, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cb8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6899      	ldr	r1, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	e00f      	b.n	8002cee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0202 	bic.w	r2, r2, #2
 8002cfc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	6899      	ldr	r1, [r3, #8]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	005a      	lsls	r2, r3, #1
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d01b      	beq.n	8002d54 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685a      	ldr	r2, [r3, #4]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d2a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6859      	ldr	r1, [r3, #4]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	3b01      	subs	r3, #1
 8002d48:	035a      	lsls	r2, r3, #13
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	e007      	b.n	8002d64 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d62:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	051a      	lsls	r2, r3, #20
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	430a      	orrs	r2, r1
 8002d88:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002d98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6899      	ldr	r1, [r3, #8]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002da6:	025a      	lsls	r2, r3, #9
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	430a      	orrs	r2, r1
 8002dae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6899      	ldr	r1, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	029a      	lsls	r2, r3, #10
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	609a      	str	r2, [r3, #8]
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr
 8002de0:	40012300 	.word	0x40012300
 8002de4:	0f000001 	.word	0x0f000001

08002de8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d13c      	bne.n	8002e7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d12b      	bne.n	8002e74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d127      	bne.n	8002e74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d006      	beq.n	8002e40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d119      	bne.n	8002e74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0220 	bic.w	r2, r2, #32
 8002e4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f7fe fd65 	bl	8001944 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002e7a:	e00e      	b.n	8002e9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff fd5f 	bl	800294c <HAL_ADC_ErrorCallback>
}
 8002e8e:	e004      	b.n	8002e9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	4798      	blx	r3
}
 8002e9a:	bf00      	nop
 8002e9c:	3710      	adds	r7, #16
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fd41 	bl	8002938 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2240      	movs	r2, #64	; 0x40
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	f043 0204 	orr.w	r2, r3, #4
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f7ff fd34 	bl	800294c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ee4:	bf00      	nop
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0b      	ldr	r3, [pc, #44]	; (8002f2c <__NVIC_SetPriorityGrouping+0x40>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1a:	4a04      	ldr	r2, [pc, #16]	; (8002f2c <__NVIC_SetPriorityGrouping+0x40>)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	60d3      	str	r3, [r2, #12]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	e000ed00 	.word	0xe000ed00
 8002f30:	05fa0000 	.word	0x05fa0000

08002f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db0b      	blt.n	8002f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <__NVIC_EnableIRQ+0x38>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2001      	movs	r0, #1
 8002f72:	fa00 f202 	lsl.w	r2, r0, r2
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff8e 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff29 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b4:	f7ff ff3e 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 80030b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f7ff ff8e 	bl	8002fe0 <NVIC_EncodePriority>
 80030c4:	4602      	mov	r2, r0
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff5d 	bl	8002f8c <__NVIC_SetPriority>
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff31 	bl	8002f50 <__NVIC_EnableIRQ>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ffa2 	bl	8003048 <SysTick_Config>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af00      	add	r7, sp, #0
 8003114:	60f8      	str	r0, [r7, #12]
 8003116:	60b9      	str	r1, [r7, #8]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003124:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_DMA_Start_IT+0x26>
 8003130:	2302      	movs	r3, #2
 8003132:	e048      	b.n	80031c6 <HAL_DMA_Start_IT+0xb8>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b01      	cmp	r3, #1
 8003146:	d137      	bne.n	80031b8 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2202      	movs	r2, #2
 800314c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f8c8 	bl	80032f2 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	223f      	movs	r2, #63	; 0x3f
 8003168:	409a      	lsls	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0216 	orr.w	r2, r2, #22
 800317c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800318c:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	2b00      	cmp	r3, #0
 8003194:	d007      	beq.n	80031a6 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0208 	orr.w	r2, r2, #8
 80031a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f042 0201 	orr.w	r2, r2, #1
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	e005      	b.n	80031c4 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031c0:	2302      	movs	r3, #2
 80031c2:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80031dc:	f7ff fa02 	bl	80025e4 <HAL_GetTick>
 80031e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d008      	beq.n	8003200 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e052      	b.n	80032a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0216 	bic.w	r2, r2, #22
 800320e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800321e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d103      	bne.n	8003230 <HAL_DMA_Abort+0x62>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0208 	bic.w	r2, r2, #8
 800323e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003250:	e013      	b.n	800327a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003252:	f7ff f9c7 	bl	80025e4 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b05      	cmp	r3, #5
 800325e:	d90c      	bls.n	800327a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2220      	movs	r2, #32
 8003264:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2203      	movs	r2, #3
 8003272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e015      	b.n	80032a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e4      	bne.n	8003252 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328c:	223f      	movs	r2, #63	; 0x3f
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d004      	beq.n	80032cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2280      	movs	r2, #128	; 0x80
 80032c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e00c      	b.n	80032e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2205      	movs	r2, #5
 80032d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f022 0201 	bic.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b085      	sub	sp, #20
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
 80032fe:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800330e:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d108      	bne.n	8003332 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003330:	e007      	b.n	8003342 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	60da      	str	r2, [r3, #12]
}
 8003342:	bf00      	nop
 8003344:	3714      	adds	r7, #20
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
	...

08003350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003350:	b480      	push	{r7}
 8003352:	b089      	sub	sp, #36	; 0x24
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800335a:	2300      	movs	r3, #0
 800335c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800335e:	2300      	movs	r3, #0
 8003360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
 800336e:	e175      	b.n	800365c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003370:	2201      	movs	r2, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4013      	ands	r3, r2
 8003382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	429a      	cmp	r2, r3
 800338a:	f040 8164 	bne.w	8003656 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d00b      	beq.n	80033ae <HAL_GPIO_Init+0x5e>
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d007      	beq.n	80033ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033a2:	2b11      	cmp	r3, #17
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b12      	cmp	r3, #18
 80033ac:	d130      	bne.n	8003410 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	2203      	movs	r2, #3
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e4:	2201      	movs	r2, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 0201 	and.w	r2, r3, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b02      	cmp	r3, #2
 8003446:	d003      	beq.n	8003450 <HAL_GPIO_Init+0x100>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b12      	cmp	r3, #18
 800344e:	d123      	bne.n	8003498 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	08da      	lsrs	r2, r3, #3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3208      	adds	r2, #8
 8003458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	220f      	movs	r2, #15
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691a      	ldr	r2, [r3, #16]
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f003 0307 	and.w	r3, r3, #7
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	4313      	orrs	r3, r2
 8003488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	08da      	lsrs	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3208      	adds	r2, #8
 8003492:	69b9      	ldr	r1, [r7, #24]
 8003494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	2203      	movs	r2, #3
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	43db      	mvns	r3, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4013      	ands	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0203 	and.w	r2, r3, #3
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80be 	beq.w	8003656 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034da:	4b65      	ldr	r3, [pc, #404]	; (8003670 <HAL_GPIO_Init+0x320>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034de:	4a64      	ldr	r2, [pc, #400]	; (8003670 <HAL_GPIO_Init+0x320>)
 80034e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e4:	6453      	str	r3, [r2, #68]	; 0x44
 80034e6:	4b62      	ldr	r3, [pc, #392]	; (8003670 <HAL_GPIO_Init+0x320>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80034f2:	4a60      	ldr	r2, [pc, #384]	; (8003674 <HAL_GPIO_Init+0x324>)
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	3302      	adds	r3, #2
 80034fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	220f      	movs	r2, #15
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	4013      	ands	r3, r2
 8003514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a57      	ldr	r2, [pc, #348]	; (8003678 <HAL_GPIO_Init+0x328>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d037      	beq.n	800358e <HAL_GPIO_Init+0x23e>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a56      	ldr	r2, [pc, #344]	; (800367c <HAL_GPIO_Init+0x32c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d031      	beq.n	800358a <HAL_GPIO_Init+0x23a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a55      	ldr	r2, [pc, #340]	; (8003680 <HAL_GPIO_Init+0x330>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02b      	beq.n	8003586 <HAL_GPIO_Init+0x236>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a54      	ldr	r2, [pc, #336]	; (8003684 <HAL_GPIO_Init+0x334>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d025      	beq.n	8003582 <HAL_GPIO_Init+0x232>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a53      	ldr	r2, [pc, #332]	; (8003688 <HAL_GPIO_Init+0x338>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d01f      	beq.n	800357e <HAL_GPIO_Init+0x22e>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a52      	ldr	r2, [pc, #328]	; (800368c <HAL_GPIO_Init+0x33c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d019      	beq.n	800357a <HAL_GPIO_Init+0x22a>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a51      	ldr	r2, [pc, #324]	; (8003690 <HAL_GPIO_Init+0x340>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_GPIO_Init+0x226>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a50      	ldr	r2, [pc, #320]	; (8003694 <HAL_GPIO_Init+0x344>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00d      	beq.n	8003572 <HAL_GPIO_Init+0x222>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4f      	ldr	r2, [pc, #316]	; (8003698 <HAL_GPIO_Init+0x348>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <HAL_GPIO_Init+0x21e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4e      	ldr	r2, [pc, #312]	; (800369c <HAL_GPIO_Init+0x34c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_GPIO_Init+0x21a>
 8003566:	2309      	movs	r3, #9
 8003568:	e012      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800356a:	230a      	movs	r3, #10
 800356c:	e010      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800356e:	2308      	movs	r3, #8
 8003570:	e00e      	b.n	8003590 <HAL_GPIO_Init+0x240>
 8003572:	2307      	movs	r3, #7
 8003574:	e00c      	b.n	8003590 <HAL_GPIO_Init+0x240>
 8003576:	2306      	movs	r3, #6
 8003578:	e00a      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800357a:	2305      	movs	r3, #5
 800357c:	e008      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800357e:	2304      	movs	r3, #4
 8003580:	e006      	b.n	8003590 <HAL_GPIO_Init+0x240>
 8003582:	2303      	movs	r3, #3
 8003584:	e004      	b.n	8003590 <HAL_GPIO_Init+0x240>
 8003586:	2302      	movs	r3, #2
 8003588:	e002      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <HAL_GPIO_Init+0x240>
 800358e:	2300      	movs	r3, #0
 8003590:	69fa      	ldr	r2, [r7, #28]
 8003592:	f002 0203 	and.w	r2, r2, #3
 8003596:	0092      	lsls	r2, r2, #2
 8003598:	4093      	lsls	r3, r2
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4313      	orrs	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80035a0:	4934      	ldr	r1, [pc, #208]	; (8003674 <HAL_GPIO_Init+0x324>)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	089b      	lsrs	r3, r3, #2
 80035a6:	3302      	adds	r3, #2
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ae:	4b3c      	ldr	r3, [pc, #240]	; (80036a0 <HAL_GPIO_Init+0x350>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4013      	ands	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035d2:	4a33      	ldr	r2, [pc, #204]	; (80036a0 <HAL_GPIO_Init+0x350>)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035d8:	4b31      	ldr	r3, [pc, #196]	; (80036a0 <HAL_GPIO_Init+0x350>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035fc:	4a28      	ldr	r2, [pc, #160]	; (80036a0 <HAL_GPIO_Init+0x350>)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003602:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <HAL_GPIO_Init+0x350>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	43db      	mvns	r3, r3
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	4013      	ands	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003626:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <HAL_GPIO_Init+0x350>)
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800362c:	4b1c      	ldr	r3, [pc, #112]	; (80036a0 <HAL_GPIO_Init+0x350>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	43db      	mvns	r3, r3
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4013      	ands	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003650:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <HAL_GPIO_Init+0x350>)
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3301      	adds	r3, #1
 800365a:	61fb      	str	r3, [r7, #28]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	f67f ae86 	bls.w	8003370 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003664:	bf00      	nop
 8003666:	3724      	adds	r7, #36	; 0x24
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	40023800 	.word	0x40023800
 8003674:	40013800 	.word	0x40013800
 8003678:	40020000 	.word	0x40020000
 800367c:	40020400 	.word	0x40020400
 8003680:	40020800 	.word	0x40020800
 8003684:	40020c00 	.word	0x40020c00
 8003688:	40021000 	.word	0x40021000
 800368c:	40021400 	.word	0x40021400
 8003690:	40021800 	.word	0x40021800
 8003694:	40021c00 	.word	0x40021c00
 8003698:	40022000 	.word	0x40022000
 800369c:	40022400 	.word	0x40022400
 80036a0:	40013c00 	.word	0x40013c00

080036a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
 80036b0:	4613      	mov	r3, r2
 80036b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b4:	787b      	ldrb	r3, [r7, #1]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80036c0:	e003      	b.n	80036ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	041a      	lsls	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	619a      	str	r2, [r3, #24]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e07f      	b.n	80037ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fe fae2 	bl	8001cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2224      	movs	r2, #36	; 0x24
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003728:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003738:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	e006      	b.n	8003760 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800375e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d104      	bne.n	8003772 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003770:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	4b1d      	ldr	r3, [pc, #116]	; (80037f4 <HAL_I2C_Init+0x11c>)
 800377e:	430b      	orrs	r3, r1
 8003780:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003790:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	ea42 0103 	orr.w	r1, r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	021a      	lsls	r2, r3, #8
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69d9      	ldr	r1, [r3, #28]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	02008000 	.word	0x02008000

080037f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b20      	cmp	r3, #32
 800380c:	d138      	bne.n	8003880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003818:	2302      	movs	r3, #2
 800381a:	e032      	b.n	8003882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	; 0x24
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800384a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6819      	ldr	r1, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800387c:	2300      	movs	r3, #0
 800387e:	e000      	b.n	8003882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
  }
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d139      	bne.n	8003918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d101      	bne.n	80038b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ae:	2302      	movs	r3, #2
 80038b0:	e033      	b.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2224      	movs	r2, #36	; 0x24
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0201 	bic.w	r2, r2, #1
 80038d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	021b      	lsls	r3, r3, #8
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003928:	b480      	push	{r7}
 800392a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003936:	6013      	str	r3, [r2, #0]
}
 8003938:	bf00      	nop
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	40007000 	.word	0x40007000

08003948 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003952:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	4a22      	ldr	r2, [pc, #136]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800395c:	6413      	str	r3, [r2, #64]	; 0x40
 800395e:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003966:	603b      	str	r3, [r7, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800396a:	4b1e      	ldr	r3, [pc, #120]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1d      	ldr	r2, [pc, #116]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003974:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003976:	f7fe fe35 	bl	80025e4 <HAL_GetTick>
 800397a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800397c:	e009      	b.n	8003992 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800397e:	f7fe fe31 	bl	80025e4 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800398c:	d901      	bls.n	8003992 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e022      	b.n	80039d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003992:	4b14      	ldr	r3, [pc, #80]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800399e:	d1ee      	bne.n	800397e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039a0:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a0f      	ldr	r2, [pc, #60]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ac:	f7fe fe1a 	bl	80025e4 <HAL_GetTick>
 80039b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039b2:	e009      	b.n	80039c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039b4:	f7fe fe16 	bl	80025e4 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c2:	d901      	bls.n	80039c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e007      	b.n	80039d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039c8:	4b06      	ldr	r3, [pc, #24]	; (80039e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039d4:	d1ee      	bne.n	80039b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40007000 	.word	0x40007000

080039e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80039f0:	2300      	movs	r3, #0
 80039f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e29b      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8087 	beq.w	8003b1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a0c:	4b96      	ldr	r3, [pc, #600]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 030c 	and.w	r3, r3, #12
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d00c      	beq.n	8003a32 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a18:	4b93      	ldr	r3, [pc, #588]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 030c 	and.w	r3, r3, #12
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d112      	bne.n	8003a4a <HAL_RCC_OscConfig+0x62>
 8003a24:	4b90      	ldr	r3, [pc, #576]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a30:	d10b      	bne.n	8003a4a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a32:	4b8d      	ldr	r3, [pc, #564]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d06c      	beq.n	8003b18 <HAL_RCC_OscConfig+0x130>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d168      	bne.n	8003b18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e275      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a52:	d106      	bne.n	8003a62 <HAL_RCC_OscConfig+0x7a>
 8003a54:	4b84      	ldr	r3, [pc, #528]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a83      	ldr	r2, [pc, #524]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a5e:	6013      	str	r3, [r2, #0]
 8003a60:	e02e      	b.n	8003ac0 <HAL_RCC_OscConfig+0xd8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10c      	bne.n	8003a84 <HAL_RCC_OscConfig+0x9c>
 8003a6a:	4b7f      	ldr	r3, [pc, #508]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a7e      	ldr	r2, [pc, #504]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	4b7c      	ldr	r3, [pc, #496]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a7b      	ldr	r2, [pc, #492]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e01d      	b.n	8003ac0 <HAL_RCC_OscConfig+0xd8>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a8c:	d10c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0xc0>
 8003a8e:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a75      	ldr	r2, [pc, #468]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4b73      	ldr	r3, [pc, #460]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a72      	ldr	r2, [pc, #456]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	e00b      	b.n	8003ac0 <HAL_RCC_OscConfig+0xd8>
 8003aa8:	4b6f      	ldr	r3, [pc, #444]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a6e      	ldr	r2, [pc, #440]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ab2:	6013      	str	r3, [r2, #0]
 8003ab4:	4b6c      	ldr	r3, [pc, #432]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6b      	ldr	r2, [pc, #428]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003aba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d013      	beq.n	8003af0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac8:	f7fe fd8c 	bl	80025e4 <HAL_GetTick>
 8003acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	e008      	b.n	8003ae2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ad0:	f7fe fd88 	bl	80025e4 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	2b64      	cmp	r3, #100	; 0x64
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e229      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ae2:	4b61      	ldr	r3, [pc, #388]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d0f0      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xe8>
 8003aee:	e014      	b.n	8003b1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fe fd78 	bl	80025e4 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003af8:	f7fe fd74 	bl	80025e4 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b64      	cmp	r3, #100	; 0x64
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e215      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b0a:	4b57      	ldr	r3, [pc, #348]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f0      	bne.n	8003af8 <HAL_RCC_OscConfig+0x110>
 8003b16:	e000      	b.n	8003b1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d069      	beq.n	8003bfa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b26:	4b50      	ldr	r3, [pc, #320]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 030c 	and.w	r3, r3, #12
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b32:	4b4d      	ldr	r3, [pc, #308]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	f003 030c 	and.w	r3, r3, #12
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d11c      	bne.n	8003b78 <HAL_RCC_OscConfig+0x190>
 8003b3e:	4b4a      	ldr	r3, [pc, #296]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d116      	bne.n	8003b78 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b4a:	4b47      	ldr	r3, [pc, #284]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_RCC_OscConfig+0x17a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d001      	beq.n	8003b62 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e1e9      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	493d      	ldr	r1, [pc, #244]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b76:	e040      	b.n	8003bfa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d023      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b80:	4b39      	ldr	r3, [pc, #228]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a38      	ldr	r2, [pc, #224]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003b86:	f043 0301 	orr.w	r3, r3, #1
 8003b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fe fd2a 	bl	80025e4 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b94:	f7fe fd26 	bl	80025e4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e1c7      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba6:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d0f0      	beq.n	8003b94 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb2:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4929      	ldr	r1, [pc, #164]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	600b      	str	r3, [r1, #0]
 8003bc6:	e018      	b.n	8003bfa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a26      	ldr	r2, [pc, #152]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003bce:	f023 0301 	bic.w	r3, r3, #1
 8003bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fd06 	bl	80025e4 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bdc:	f7fe fd02 	bl	80025e4 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1a3      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bee:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1f0      	bne.n	8003bdc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d038      	beq.n	8003c78 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d019      	beq.n	8003c42 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c0e:	4b16      	ldr	r3, [pc, #88]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c12:	4a15      	ldr	r2, [pc, #84]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003c14:	f043 0301 	orr.w	r3, r3, #1
 8003c18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c1a:	f7fe fce3 	bl	80025e4 <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c22:	f7fe fcdf 	bl	80025e4 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e180      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c34:	4b0c      	ldr	r3, [pc, #48]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003c36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x23a>
 8003c40:	e01a      	b.n	8003c78 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c42:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	4a08      	ldr	r2, [pc, #32]	; (8003c68 <HAL_RCC_OscConfig+0x280>)
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4e:	f7fe fcc9 	bl	80025e4 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c54:	e00a      	b.n	8003c6c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c56:	f7fe fcc5 	bl	80025e4 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d903      	bls.n	8003c6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e166      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
 8003c68:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c6c:	4b92      	ldr	r3, [pc, #584]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1ee      	bne.n	8003c56 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0304 	and.w	r3, r3, #4
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80a4 	beq.w	8003dce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c86:	4b8c      	ldr	r3, [pc, #560]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10d      	bne.n	8003cae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c92:	4b89      	ldr	r3, [pc, #548]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c96:	4a88      	ldr	r2, [pc, #544]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003c9e:	4b86      	ldr	r3, [pc, #536]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca6:	60bb      	str	r3, [r7, #8]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003caa:	2301      	movs	r3, #1
 8003cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cae:	4b83      	ldr	r3, [pc, #524]	; (8003ebc <HAL_RCC_OscConfig+0x4d4>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d118      	bne.n	8003cec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cba:	4b80      	ldr	r3, [pc, #512]	; (8003ebc <HAL_RCC_OscConfig+0x4d4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a7f      	ldr	r2, [pc, #508]	; (8003ebc <HAL_RCC_OscConfig+0x4d4>)
 8003cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cc6:	f7fe fc8d 	bl	80025e4 <HAL_GetTick>
 8003cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ccc:	e008      	b.n	8003ce0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cce:	f7fe fc89 	bl	80025e4 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	2b64      	cmp	r3, #100	; 0x64
 8003cda:	d901      	bls.n	8003ce0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003cdc:	2303      	movs	r3, #3
 8003cde:	e12a      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce0:	4b76      	ldr	r3, [pc, #472]	; (8003ebc <HAL_RCC_OscConfig+0x4d4>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d0f0      	beq.n	8003cce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d106      	bne.n	8003d02 <HAL_RCC_OscConfig+0x31a>
 8003cf4:	4b70      	ldr	r3, [pc, #448]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a6f      	ldr	r2, [pc, #444]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	e02d      	b.n	8003d5e <HAL_RCC_OscConfig+0x376>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0x33c>
 8003d0a:	4b6b      	ldr	r3, [pc, #428]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d0e:	4a6a      	ldr	r2, [pc, #424]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d10:	f023 0301 	bic.w	r3, r3, #1
 8003d14:	6713      	str	r3, [r2, #112]	; 0x70
 8003d16:	4b68      	ldr	r3, [pc, #416]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1a:	4a67      	ldr	r2, [pc, #412]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d1c:	f023 0304 	bic.w	r3, r3, #4
 8003d20:	6713      	str	r3, [r2, #112]	; 0x70
 8003d22:	e01c      	b.n	8003d5e <HAL_RCC_OscConfig+0x376>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	d10c      	bne.n	8003d46 <HAL_RCC_OscConfig+0x35e>
 8003d2c:	4b62      	ldr	r3, [pc, #392]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a61      	ldr	r2, [pc, #388]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d32:	f043 0304 	orr.w	r3, r3, #4
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
 8003d38:	4b5f      	ldr	r3, [pc, #380]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d3c:	4a5e      	ldr	r2, [pc, #376]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d3e:	f043 0301 	orr.w	r3, r3, #1
 8003d42:	6713      	str	r3, [r2, #112]	; 0x70
 8003d44:	e00b      	b.n	8003d5e <HAL_RCC_OscConfig+0x376>
 8003d46:	4b5c      	ldr	r3, [pc, #368]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	4a5b      	ldr	r2, [pc, #364]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d4c:	f023 0301 	bic.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	; 0x70
 8003d52:	4b59      	ldr	r3, [pc, #356]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d56:	4a58      	ldr	r2, [pc, #352]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d58:	f023 0304 	bic.w	r3, r3, #4
 8003d5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d015      	beq.n	8003d92 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d66:	f7fe fc3d 	bl	80025e4 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d6c:	e00a      	b.n	8003d84 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f7fe fc39 	bl	80025e4 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e0d8      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d84:	4b4c      	ldr	r3, [pc, #304]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0ee      	beq.n	8003d6e <HAL_RCC_OscConfig+0x386>
 8003d90:	e014      	b.n	8003dbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d92:	f7fe fc27 	bl	80025e4 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d98:	e00a      	b.n	8003db0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9a:	f7fe fc23 	bl	80025e4 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e0c2      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003db0:	4b41      	ldr	r3, [pc, #260]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1ee      	bne.n	8003d9a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003dbc:	7dfb      	ldrb	r3, [r7, #23]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d105      	bne.n	8003dce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dc2:	4b3d      	ldr	r3, [pc, #244]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc6:	4a3c      	ldr	r2, [pc, #240]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	f000 80ae 	beq.w	8003f34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dd8:	4b37      	ldr	r3, [pc, #220]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d06d      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d14b      	bne.n	8003e84 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dec:	4b32      	ldr	r3, [pc, #200]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a31      	ldr	r2, [pc, #196]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df8:	f7fe fbf4 	bl	80025e4 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fe fbf0 	bl	80025e4 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e091      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e12:	4b29      	ldr	r3, [pc, #164]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69da      	ldr	r2, [r3, #28]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	431a      	orrs	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	019b      	lsls	r3, r3, #6
 8003e2e:	431a      	orrs	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	3b01      	subs	r3, #1
 8003e38:	041b      	lsls	r3, r3, #16
 8003e3a:	431a      	orrs	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e40:	061b      	lsls	r3, r3, #24
 8003e42:	431a      	orrs	r2, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e48:	071b      	lsls	r3, r3, #28
 8003e4a:	491b      	ldr	r1, [pc, #108]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e50:	4b19      	ldr	r3, [pc, #100]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a18      	ldr	r2, [pc, #96]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fe fbc2 	bl	80025e4 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fe fbbe 	bl	80025e4 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e05f      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0x47c>
 8003e82:	e057      	b.n	8003f34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a0b      	ldr	r2, [pc, #44]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003e8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fe fba8 	bl	80025e4 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e96:	e008      	b.n	8003eaa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e98:	f7fe fba4 	bl	80025e4 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e045      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eaa:	4b03      	ldr	r3, [pc, #12]	; (8003eb8 <HAL_RCC_OscConfig+0x4d0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1f0      	bne.n	8003e98 <HAL_RCC_OscConfig+0x4b0>
 8003eb6:	e03d      	b.n	8003f34 <HAL_RCC_OscConfig+0x54c>
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	; (8003f40 <HAL_RCC_OscConfig+0x558>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d030      	beq.n	8003f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d129      	bne.n	8003f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d122      	bne.n	8003f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ef6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d119      	bne.n	8003f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d10f      	bne.n	8003f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d107      	bne.n	8003f30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d001      	beq.n	8003f34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40023800 	.word	0x40023800

08003f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0d0      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f5c:	4b6a      	ldr	r3, [pc, #424]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 030f 	and.w	r3, r3, #15
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d910      	bls.n	8003f8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f6a:	4b67      	ldr	r3, [pc, #412]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f023 020f 	bic.w	r2, r3, #15
 8003f72:	4965      	ldr	r1, [pc, #404]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7a:	4b63      	ldr	r3, [pc, #396]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d001      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0b8      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d005      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa4:	4b59      	ldr	r3, [pc, #356]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	4a58      	ldr	r2, [pc, #352]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003faa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a52      	ldr	r2, [pc, #328]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc8:	4b50      	ldr	r3, [pc, #320]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	494d      	ldr	r1, [pc, #308]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d040      	beq.n	8004068 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d107      	bne.n	8003ffe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	4b47      	ldr	r3, [pc, #284]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d115      	bne.n	8004026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e07f      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004006:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d109      	bne.n	8004026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e073      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e06b      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004026:	4b39      	ldr	r3, [pc, #228]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f023 0203 	bic.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4936      	ldr	r1, [pc, #216]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004034:	4313      	orrs	r3, r2
 8004036:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004038:	f7fe fad4 	bl	80025e4 <HAL_GetTick>
 800403c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403e:	e00a      	b.n	8004056 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004040:	f7fe fad0 	bl	80025e4 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e053      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	4b2d      	ldr	r3, [pc, #180]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 020c 	and.w	r2, r3, #12
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	429a      	cmp	r2, r3
 8004066:	d1eb      	bne.n	8004040 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004068:	4b27      	ldr	r3, [pc, #156]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d210      	bcs.n	8004098 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f023 020f 	bic.w	r2, r3, #15
 800407e:	4922      	ldr	r1, [pc, #136]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	4313      	orrs	r3, r2
 8004084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b20      	ldr	r3, [pc, #128]	; (8004108 <HAL_RCC_ClockConfig+0x1c4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 030f 	and.w	r3, r3, #15
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e032      	b.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0304 	and.w	r3, r3, #4
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4916      	ldr	r1, [pc, #88]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d009      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040c2:	4b12      	ldr	r3, [pc, #72]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	00db      	lsls	r3, r3, #3
 80040d0:	490e      	ldr	r1, [pc, #56]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040d6:	f000 f821 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80040da:	4601      	mov	r1, r0
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	4a0a      	ldr	r2, [pc, #40]	; (8004110 <HAL_RCC_ClockConfig+0x1cc>)
 80040e8:	5cd3      	ldrb	r3, [r2, r3]
 80040ea:	fa21 f303 	lsr.w	r3, r1, r3
 80040ee:	4a09      	ldr	r2, [pc, #36]	; (8004114 <HAL_RCC_ClockConfig+0x1d0>)
 80040f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x1d4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fe fa30 	bl	800255c <HAL_InitTick>

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	40023c00 	.word	0x40023c00
 800410c:	40023800 	.word	0x40023800
 8004110:	080089d4 	.word	0x080089d4
 8004114:	20000004 	.word	0x20000004
 8004118:	20000008 	.word	0x20000008

0800411c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800411c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	2300      	movs	r3, #0
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	2300      	movs	r3, #0
 800412c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004132:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b04      	cmp	r3, #4
 800413c:	d007      	beq.n	800414e <HAL_RCC_GetSysClockFreq+0x32>
 800413e:	2b08      	cmp	r3, #8
 8004140:	d008      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x38>
 8004142:	2b00      	cmp	r3, #0
 8004144:	f040 808d 	bne.w	8004262 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004148:	4b4b      	ldr	r3, [pc, #300]	; (8004278 <HAL_RCC_GetSysClockFreq+0x15c>)
 800414a:	60bb      	str	r3, [r7, #8]
      break;
 800414c:	e08c      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800414e:	4b4b      	ldr	r3, [pc, #300]	; (800427c <HAL_RCC_GetSysClockFreq+0x160>)
 8004150:	60bb      	str	r3, [r7, #8]
      break;
 8004152:	e089      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004154:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800415c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800415e:	4b45      	ldr	r3, [pc, #276]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d023      	beq.n	80041b2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800416a:	4b42      	ldr	r3, [pc, #264]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	099b      	lsrs	r3, r3, #6
 8004170:	f04f 0400 	mov.w	r4, #0
 8004174:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	ea03 0501 	and.w	r5, r3, r1
 8004180:	ea04 0602 	and.w	r6, r4, r2
 8004184:	4a3d      	ldr	r2, [pc, #244]	; (800427c <HAL_RCC_GetSysClockFreq+0x160>)
 8004186:	fb02 f106 	mul.w	r1, r2, r6
 800418a:	2200      	movs	r2, #0
 800418c:	fb02 f205 	mul.w	r2, r2, r5
 8004190:	440a      	add	r2, r1
 8004192:	493a      	ldr	r1, [pc, #232]	; (800427c <HAL_RCC_GetSysClockFreq+0x160>)
 8004194:	fba5 0101 	umull	r0, r1, r5, r1
 8004198:	1853      	adds	r3, r2, r1
 800419a:	4619      	mov	r1, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f04f 0400 	mov.w	r4, #0
 80041a2:	461a      	mov	r2, r3
 80041a4:	4623      	mov	r3, r4
 80041a6:	f7fc f8a3 	bl	80002f0 <__aeabi_uldivmod>
 80041aa:	4603      	mov	r3, r0
 80041ac:	460c      	mov	r4, r1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e049      	b.n	8004246 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b2:	4b30      	ldr	r3, [pc, #192]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	099b      	lsrs	r3, r3, #6
 80041b8:	f04f 0400 	mov.w	r4, #0
 80041bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041c0:	f04f 0200 	mov.w	r2, #0
 80041c4:	ea03 0501 	and.w	r5, r3, r1
 80041c8:	ea04 0602 	and.w	r6, r4, r2
 80041cc:	4629      	mov	r1, r5
 80041ce:	4632      	mov	r2, r6
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	f04f 0400 	mov.w	r4, #0
 80041d8:	0154      	lsls	r4, r2, #5
 80041da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80041de:	014b      	lsls	r3, r1, #5
 80041e0:	4619      	mov	r1, r3
 80041e2:	4622      	mov	r2, r4
 80041e4:	1b49      	subs	r1, r1, r5
 80041e6:	eb62 0206 	sbc.w	r2, r2, r6
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	f04f 0400 	mov.w	r4, #0
 80041f2:	0194      	lsls	r4, r2, #6
 80041f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80041f8:	018b      	lsls	r3, r1, #6
 80041fa:	1a5b      	subs	r3, r3, r1
 80041fc:	eb64 0402 	sbc.w	r4, r4, r2
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	00e2      	lsls	r2, r4, #3
 800420a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800420e:	00d9      	lsls	r1, r3, #3
 8004210:	460b      	mov	r3, r1
 8004212:	4614      	mov	r4, r2
 8004214:	195b      	adds	r3, r3, r5
 8004216:	eb44 0406 	adc.w	r4, r4, r6
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	02a2      	lsls	r2, r4, #10
 8004224:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004228:	0299      	lsls	r1, r3, #10
 800422a:	460b      	mov	r3, r1
 800422c:	4614      	mov	r4, r2
 800422e:	4618      	mov	r0, r3
 8004230:	4621      	mov	r1, r4
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f04f 0400 	mov.w	r4, #0
 8004238:	461a      	mov	r2, r3
 800423a:	4623      	mov	r3, r4
 800423c:	f7fc f858 	bl	80002f0 <__aeabi_uldivmod>
 8004240:	4603      	mov	r3, r0
 8004242:	460c      	mov	r4, r1
 8004244:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_GetSysClockFreq+0x158>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	0c1b      	lsrs	r3, r3, #16
 800424c:	f003 0303 	and.w	r3, r3, #3
 8004250:	3301      	adds	r3, #1
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	60bb      	str	r3, [r7, #8]
      break;
 8004260:	e002      	b.n	8004268 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004262:	4b05      	ldr	r3, [pc, #20]	; (8004278 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004264:	60bb      	str	r3, [r7, #8]
      break;
 8004266:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004268:	68bb      	ldr	r3, [r7, #8]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004272:	bf00      	nop
 8004274:	40023800 	.word	0x40023800
 8004278:	00f42400 	.word	0x00f42400
 800427c:	00989680 	.word	0x00989680

08004280 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004280:	b480      	push	{r7}
 8004282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <HAL_RCC_GetHCLKFreq+0x14>)
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20000004 	.word	0x20000004

08004298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800429c:	f7ff fff0 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042a0:	4601      	mov	r1, r0
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	0a9b      	lsrs	r3, r3, #10
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	4a03      	ldr	r2, [pc, #12]	; (80042bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40023800 	.word	0x40023800
 80042bc:	080089e4 	.word	0x080089e4

080042c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042c4:	f7ff ffdc 	bl	8004280 <HAL_RCC_GetHCLKFreq>
 80042c8:	4601      	mov	r1, r0
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	0b5b      	lsrs	r3, r3, #13
 80042d0:	f003 0307 	and.w	r3, r3, #7
 80042d4:	4a03      	ldr	r2, [pc, #12]	; (80042e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042d6:	5cd3      	ldrb	r3, [r2, r3]
 80042d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042dc:	4618      	mov	r0, r3
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40023800 	.word	0x40023800
 80042e4:	080089e4 	.word	0x080089e4

080042e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004300:	2300      	movs	r3, #0
 8004302:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004310:	4b69      	ldr	r3, [pc, #420]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	4a68      	ldr	r2, [pc, #416]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004316:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800431a:	6093      	str	r3, [r2, #8]
 800431c:	4b66      	ldr	r3, [pc, #408]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004324:	4964      	ldr	r1, [pc, #400]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004332:	2301      	movs	r3, #1
 8004334:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800433e:	2b00      	cmp	r3, #0
 8004340:	d017      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004342:	4b5d      	ldr	r3, [pc, #372]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	4959      	ldr	r1, [pc, #356]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004360:	d101      	bne.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004362:	2301      	movs	r3, #1
 8004364:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800436e:	2301      	movs	r3, #1
 8004370:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d017      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800437e:	4b4e      	ldr	r3, [pc, #312]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004384:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	494a      	ldr	r1, [pc, #296]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800438e:	4313      	orrs	r3, r2
 8004390:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004398:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800439c:	d101      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800439e:	2301      	movs	r3, #1
 80043a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d101      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80043aa:	2301      	movs	r3, #1
 80043ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80043ba:	2301      	movs	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 808b 	beq.w	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043cc:	4b3a      	ldr	r3, [pc, #232]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	4a39      	ldr	r2, [pc, #228]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d6:	6413      	str	r3, [r2, #64]	; 0x40
 80043d8:	4b37      	ldr	r3, [pc, #220]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80043e4:	4b35      	ldr	r3, [pc, #212]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a34      	ldr	r2, [pc, #208]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80043ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043f0:	f7fe f8f8 	bl	80025e4 <HAL_GetTick>
 80043f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f8:	f7fe f8f4 	bl	80025e4 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	; 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e38d      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800440a:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004416:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800441e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d035      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d02e      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004434:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800443e:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	4a1d      	ldr	r2, [pc, #116]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004448:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800444a:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800444e:	4a1a      	ldr	r2, [pc, #104]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004454:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004456:	4a18      	ldr	r2, [pc, #96]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800445c:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b01      	cmp	r3, #1
 8004466:	d114      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004468:	f7fe f8bc 	bl	80025e4 <HAL_GetTick>
 800446c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	e00a      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fe f8b8 	bl	80025e4 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e34f      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	4b0c      	ldr	r3, [pc, #48]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ee      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800449a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449e:	d111      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80044a0:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80044ae:	400b      	ands	r3, r1
 80044b0:	4901      	ldr	r1, [pc, #4]	; (80044b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	608b      	str	r3, [r1, #8]
 80044b6:	e00b      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80044b8:	40023800 	.word	0x40023800
 80044bc:	40007000 	.word	0x40007000
 80044c0:	0ffffcff 	.word	0x0ffffcff
 80044c4:	4bb3      	ldr	r3, [pc, #716]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4ab2      	ldr	r2, [pc, #712]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044ce:	6093      	str	r3, [r2, #8]
 80044d0:	4bb0      	ldr	r3, [pc, #704]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044dc:	49ad      	ldr	r1, [pc, #692]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d010      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044ee:	4ba9      	ldr	r3, [pc, #676]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f4:	4aa7      	ldr	r2, [pc, #668]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80044f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80044fe:	4ba5      	ldr	r3, [pc, #660]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004500:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	49a2      	ldr	r1, [pc, #648]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800450a:	4313      	orrs	r3, r2
 800450c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00a      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800451c:	4b9d      	ldr	r3, [pc, #628]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800451e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004522:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800452a:	499a      	ldr	r1, [pc, #616]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800453e:	4b95      	ldr	r3, [pc, #596]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004544:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800454c:	4991      	ldr	r1, [pc, #580]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00a      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004560:	4b8c      	ldr	r3, [pc, #560]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004566:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800456e:	4989      	ldr	r1, [pc, #548]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004570:	4313      	orrs	r3, r2
 8004572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00a      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004582:	4b84      	ldr	r3, [pc, #528]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004588:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	4980      	ldr	r1, [pc, #512]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00a      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045a4:	4b7b      	ldr	r3, [pc, #492]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f023 0203 	bic.w	r2, r3, #3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b2:	4978      	ldr	r1, [pc, #480]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045c6:	4b73      	ldr	r3, [pc, #460]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f023 020c 	bic.w	r2, r3, #12
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045d4:	496f      	ldr	r1, [pc, #444]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045e8:	4b6a      	ldr	r3, [pc, #424]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045f6:	4967      	ldr	r1, [pc, #412]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800460a:	4b62      	ldr	r3, [pc, #392]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004618:	495e      	ldr	r1, [pc, #376]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800462c:	4b59      	ldr	r3, [pc, #356]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	4956      	ldr	r1, [pc, #344]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800464e:	4b51      	ldr	r3, [pc, #324]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004654:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465c:	494d      	ldr	r1, [pc, #308]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004670:	4b48      	ldr	r3, [pc, #288]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004676:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467e:	4945      	ldr	r1, [pc, #276]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004692:	4b40      	ldr	r3, [pc, #256]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004698:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046a0:	493c      	ldr	r1, [pc, #240]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046b4:	4b37      	ldr	r3, [pc, #220]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046c2:	4934      	ldr	r1, [pc, #208]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d011      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80046d6:	4b2f      	ldr	r3, [pc, #188]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046dc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e4:	492b      	ldr	r1, [pc, #172]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046f4:	d101      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80046f6:	2301      	movs	r3, #1
 80046f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004706:	2301      	movs	r3, #1
 8004708:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004716:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004724:	491b      	ldr	r1, [pc, #108]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00b      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004738:	4b16      	ldr	r3, [pc, #88]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004748:	4912      	ldr	r1, [pc, #72]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00b      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800475c:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004762:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800476c:	4909      	ldr	r1, [pc, #36]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00f      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004780:	4b04      	ldr	r3, [pc, #16]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004782:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004786:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004790:	e002      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004792:	bf00      	nop
 8004794:	40023800 	.word	0x40023800
 8004798:	4985      	ldr	r1, [pc, #532]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80047ac:	4b80      	ldr	r3, [pc, #512]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047bc:	497c      	ldr	r1, [pc, #496]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d005      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047d2:	f040 80d6 	bne.w	8004982 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047d6:	4b76      	ldr	r3, [pc, #472]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a75      	ldr	r2, [pc, #468]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80047e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047e2:	f7fd feff 	bl	80025e4 <HAL_GetTick>
 80047e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047e8:	e008      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047ea:	f7fd fefb 	bl	80025e4 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b64      	cmp	r3, #100	; 0x64
 80047f6:	d901      	bls.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047f8:	2303      	movs	r3, #3
 80047fa:	e194      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047fc:	4b6c      	ldr	r3, [pc, #432]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f0      	bne.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d021      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004818:	2b00      	cmp	r3, #0
 800481a:	d11d      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800481c:	4b64      	ldr	r3, [pc, #400]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800482a:	4b61      	ldr	r3, [pc, #388]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800482c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004830:	0e1b      	lsrs	r3, r3, #24
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	019a      	lsls	r2, r3, #6
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	041b      	lsls	r3, r3, #16
 8004842:	431a      	orrs	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	061b      	lsls	r3, r3, #24
 8004848:	431a      	orrs	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	071b      	lsls	r3, r3, #28
 8004850:	4957      	ldr	r1, [pc, #348]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d004      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800486c:	d00a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004876:	2b00      	cmp	r3, #0
 8004878:	d02e      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004882:	d129      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004884:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800488a:	0c1b      	lsrs	r3, r3, #16
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004892:	4b47      	ldr	r3, [pc, #284]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004898:	0f1b      	lsrs	r3, r3, #28
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	019a      	lsls	r2, r3, #6
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	431a      	orrs	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	061b      	lsls	r3, r3, #24
 80048b2:	431a      	orrs	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	071b      	lsls	r3, r3, #28
 80048b8:	493d      	ldr	r1, [pc, #244]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80048c0:	4b3b      	ldr	r3, [pc, #236]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c6:	f023 021f 	bic.w	r2, r3, #31
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	3b01      	subs	r3, #1
 80048d0:	4937      	ldr	r1, [pc, #220]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01d      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048e4:	4b32      	ldr	r3, [pc, #200]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ea:	0e1b      	lsrs	r3, r3, #24
 80048ec:	f003 030f 	and.w	r3, r3, #15
 80048f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80048f2:	4b2f      	ldr	r3, [pc, #188]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80048f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f8:	0f1b      	lsrs	r3, r3, #28
 80048fa:	f003 0307 	and.w	r3, r3, #7
 80048fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	019a      	lsls	r2, r3, #6
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	041b      	lsls	r3, r3, #16
 800490c:	431a      	orrs	r2, r3
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	061b      	lsls	r3, r3, #24
 8004912:	431a      	orrs	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	071b      	lsls	r3, r3, #28
 8004918:	4925      	ldr	r1, [pc, #148]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d011      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	019a      	lsls	r2, r3, #6
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	061b      	lsls	r3, r3, #24
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	071b      	lsls	r3, r3, #28
 8004948:	4919      	ldr	r1, [pc, #100]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800494a:	4313      	orrs	r3, r2
 800494c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004950:	4b17      	ldr	r3, [pc, #92]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004956:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800495a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800495c:	f7fd fe42 	bl	80025e4 <HAL_GetTick>
 8004960:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004964:	f7fd fe3e 	bl	80025e4 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	; 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e0d7      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004976:	4b0e      	ldr	r3, [pc, #56]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	2b01      	cmp	r3, #1
 8004986:	f040 80cd 	bne.w	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800498a:	4b09      	ldr	r3, [pc, #36]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004996:	f7fd fe25 	bl	80025e4 <HAL_GetTick>
 800499a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800499c:	e00a      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800499e:	f7fd fe21 	bl	80025e4 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b64      	cmp	r3, #100	; 0x64
 80049aa:	d903      	bls.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e0ba      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80049b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80049b4:	4b5e      	ldr	r3, [pc, #376]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c0:	d0ed      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d02e      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d12a      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80049ea:	4b51      	ldr	r3, [pc, #324]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80049ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f0:	0c1b      	lsrs	r3, r3, #16
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80049f8:	4b4d      	ldr	r3, [pc, #308]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	0f1b      	lsrs	r3, r3, #28
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	019a      	lsls	r2, r3, #6
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	041b      	lsls	r3, r3, #16
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	061b      	lsls	r3, r3, #24
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	071b      	lsls	r3, r3, #28
 8004a1e:	4944      	ldr	r1, [pc, #272]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004a26:	4b42      	ldr	r3, [pc, #264]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	3b01      	subs	r3, #1
 8004a36:	021b      	lsls	r3, r3, #8
 8004a38:	493d      	ldr	r1, [pc, #244]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d022      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a54:	d11d      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a56:	4b36      	ldr	r3, [pc, #216]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5c:	0e1b      	lsrs	r3, r3, #24
 8004a5e:	f003 030f 	and.w	r3, r3, #15
 8004a62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a64:	4b32      	ldr	r3, [pc, #200]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	0f1b      	lsrs	r3, r3, #28
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	019a      	lsls	r2, r3, #6
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	061b      	lsls	r3, r3, #24
 8004a84:	431a      	orrs	r2, r3
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	071b      	lsls	r3, r3, #28
 8004a8a:	4929      	ldr	r1, [pc, #164]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d028      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aa4:	0e1b      	lsrs	r3, r3, #24
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004aac:	4b20      	ldr	r3, [pc, #128]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ab2:	0c1b      	lsrs	r3, r3, #16
 8004ab4:	f003 0303 	and.w	r3, r3, #3
 8004ab8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	019a      	lsls	r2, r3, #6
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	041b      	lsls	r3, r3, #16
 8004ac4:	431a      	orrs	r2, r3
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	061b      	lsls	r3, r3, #24
 8004aca:	431a      	orrs	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	071b      	lsls	r3, r3, #28
 8004ad2:	4917      	ldr	r1, [pc, #92]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004ada:	4b15      	ldr	r3, [pc, #84]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ae0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	4911      	ldr	r1, [pc, #68]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004af0:	4b0f      	ldr	r3, [pc, #60]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a0e      	ldr	r2, [pc, #56]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004afc:	f7fd fd72 	bl	80025e4 <HAL_GetTick>
 8004b00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b04:	f7fd fd6e 	bl	80025e4 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b64      	cmp	r3, #100	; 0x64
 8004b10:	d901      	bls.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e007      	b.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b16:	4b06      	ldr	r3, [pc, #24]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b22:	d1ef      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004b24:	2300      	movs	r3, #0
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3720      	adds	r7, #32
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	40023800 	.word	0x40023800

08004b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e084      	b.n	8004c50 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d106      	bne.n	8004b66 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f7fd f947 	bl	8001df4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2202      	movs	r2, #2
 8004b6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b7c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b86:	d902      	bls.n	8004b8e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	e002      	b.n	8004b94 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b9c:	d007      	beq.n	8004bae <HAL_SPI_Init+0x7a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ba6:	d002      	beq.n	8004bae <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d10b      	bne.n	8004bce <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bbe:	d903      	bls.n	8004bc8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
 8004bc6:	e002      	b.n	8004bce <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	ea42 0103 	orr.w	r1, r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	699b      	ldr	r3, [r3, #24]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	f003 0204 	and.w	r2, r3, #4
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	431a      	orrs	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	ea42 0103 	orr.w	r1, r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3710      	adds	r7, #16
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	4613      	mov	r3, r2
 8004c64:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c66:	2300      	movs	r3, #0
 8004c68:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d110      	bne.n	8004c94 <HAL_SPI_Receive_DMA+0x3c>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7a:	d10b      	bne.n	8004c94 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2204      	movs	r2, #4
 8004c80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 f900 	bl	8004e90 <HAL_SPI_TransmitReceive_DMA>
 8004c90:	4603      	mov	r3, r0
 8004c92:	e0f3      	b.n	8004e7c <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_SPI_Receive_DMA+0x4a>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e0ec      	b.n	8004e7c <HAL_SPI_Receive_DMA+0x224>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d002      	beq.n	8004cbc <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004cba:	e0da      	b.n	8004e72 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_SPI_Receive_DMA+0x70>
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d102      	bne.n	8004cce <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ccc:	e0d1      	b.n	8004e72 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	88fa      	ldrh	r2, [r7, #6]
 8004ce6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	88fa      	ldrh	r2, [r7, #6]
 8004cee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	2200      	movs	r2, #0
 8004d08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d12:	d107      	bne.n	8004d24 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d32:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d3c:	d908      	bls.n	8004d50 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	e042      	b.n	8004dd6 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685a      	ldr	r2, [r3, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d5e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6a:	d134      	bne.n	8004dd6 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d7a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d111      	bne.n	8004db0 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d9a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	085b      	lsrs	r3, r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004dae:	e012      	b.n	8004dd6 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dbe:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	3301      	adds	r3, #1
 8004dce:	b29a      	uxth	r2, r3
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dda:	4a2a      	ldr	r2, [pc, #168]	; (8004e84 <HAL_SPI_Receive_DMA+0x22c>)
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de2:	4a29      	ldr	r2, [pc, #164]	; (8004e88 <HAL_SPI_Receive_DMA+0x230>)
 8004de4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	4a28      	ldr	r2, [pc, #160]	; (8004e8c <HAL_SPI_Receive_DMA+0x234>)
 8004dec:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df2:	2200      	movs	r2, #0
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	330c      	adds	r3, #12
 8004e00:	4619      	mov	r1, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e06:	461a      	mov	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f7fe f97d 	bl	800310e <HAL_DMA_Start_IT>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00c      	beq.n	8004e34 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e1e:	f043 0210 	orr.w	r2, r3, #16
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8004e32:	e01e      	b.n	8004e72 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e3e:	2b40      	cmp	r3, #64	; 0x40
 8004e40:	d007      	beq.n	8004e52 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e50:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f042 0220 	orr.w	r2, r2, #32
 8004e60:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3718      	adds	r7, #24
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	08005311 	.word	0x08005311
 8004e88:	080051f9 	.word	0x080051f9
 8004e8c:	08005349 	.word	0x08005349

08004e90 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
 8004e9c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e16c      	b.n	800518a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ebe:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8004ec6:	7dbb      	ldrb	r3, [r7, #22]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d00d      	beq.n	8004ee8 <HAL_SPI_TransmitReceive_DMA+0x58>
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ed2:	d106      	bne.n	8004ee2 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d102      	bne.n	8004ee2 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004edc:	7dbb      	ldrb	r3, [r7, #22]
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d002      	beq.n	8004ee8 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004ee2:	2302      	movs	r3, #2
 8004ee4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ee6:	e14b      	b.n	8005180 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004ef4:	887b      	ldrh	r3, [r7, #2]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004efe:	e13f      	b.n	8005180 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d003      	beq.n	8004f14 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2205      	movs	r2, #5
 8004f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	887a      	ldrh	r2, [r7, #2]
 8004f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	887a      	ldrh	r2, [r7, #2]
 8004f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	887a      	ldrh	r2, [r7, #2]
 8004f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	887a      	ldrh	r2, [r7, #2]
 8004f3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8004f5c:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f66:	d908      	bls.n	8004f7a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	685a      	ldr	r2, [r3, #4]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f76:	605a      	str	r2, [r3, #4]
 8004f78:	e06f      	b.n	800505a <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f88:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f94:	d126      	bne.n	8004fe4 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10f      	bne.n	8004fc2 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004fb0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	085b      	lsrs	r3, r3, #1
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fc0:	e010      	b.n	8004fe4 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fd0:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	085b      	lsrs	r3, r3, #1
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3301      	adds	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fee:	d134      	bne.n	800505a <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ffe:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005006:	b29b      	uxth	r3, r3
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b00      	cmp	r3, #0
 800500e:	d111      	bne.n	8005034 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800501e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005026:	b29b      	uxth	r3, r3
 8005028:	085b      	lsrs	r3, r3, #1
 800502a:	b29a      	uxth	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005032:	e012      	b.n	800505a <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005042:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800504a:	b29b      	uxth	r3, r3
 800504c:	085b      	lsrs	r3, r3, #1
 800504e:	b29b      	uxth	r3, r3
 8005050:	3301      	adds	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b04      	cmp	r3, #4
 8005064:	d108      	bne.n	8005078 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506a:	4a4a      	ldr	r2, [pc, #296]	; (8005194 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800506c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	4a49      	ldr	r2, [pc, #292]	; (8005198 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c
 8005076:	e007      	b.n	8005088 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	4a47      	ldr	r2, [pc, #284]	; (800519c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800507e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005084:	4a46      	ldr	r2, [pc, #280]	; (80051a0 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8005086:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800508c:	4a45      	ldr	r2, [pc, #276]	; (80051a4 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800508e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	2200      	movs	r2, #0
 8005096:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	330c      	adds	r3, #12
 80050a2:	4619      	mov	r1, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	461a      	mov	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f7fe f82c 	bl	800310e <HAL_DMA_Start_IT>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00c      	beq.n	80050d6 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c0:	f043 0210 	orr.w	r2, r3, #16
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80050d4:	e054      	b.n	8005180 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	2200      	movs	r2, #0
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050f2:	2200      	movs	r2, #0
 80050f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050fa:	2200      	movs	r2, #0
 80050fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005102:	2200      	movs	r2, #0
 8005104:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	4619      	mov	r1, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	461a      	mov	r2, r3
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800511c:	b29b      	uxth	r3, r3
 800511e:	f7fd fff6 	bl	800310e <HAL_DMA_Start_IT>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00c      	beq.n	8005142 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800512c:	f043 0210 	orr.w	r2, r3, #16
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005140:	e01e      	b.n	8005180 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d007      	beq.n	8005160 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800515e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f042 0220 	orr.w	r2, r2, #32
 800516e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0202 	orr.w	r2, r2, #2
 800517e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005188:	7dfb      	ldrb	r3, [r7, #23]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	08005311 	.word	0x08005311
 8005198:	080051f9 	.word	0x080051f9
 800519c:	0800532d 	.word	0x0800532d
 80051a0:	0800527f 	.word	0x0800527f
 80051a4:	08005349 	.word	0x08005349

080051a8 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005204:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005206:	f7fd f9ed 	bl	80025e4 <HAL_GetTick>
 800520a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800521a:	d02a      	beq.n	8005272 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 0220 	bic.w	r2, r2, #32
 800522a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0203 	bic.w	r2, r2, #3
 800523a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800523c:	68ba      	ldr	r2, [r7, #8]
 800523e:	2164      	movs	r1, #100	; 0x64
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f978 	bl	8005536 <SPI_EndRxTransaction>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2220      	movs	r2, #32
 8005250:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff ffba 	bl	80051e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005270:	e002      	b.n	8005278 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7fc fc66 	bl	8001b44 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}

0800527e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800528c:	f7fd f9aa 	bl	80025e4 <HAL_GetTick>
 8005290:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800529c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052a0:	d030      	beq.n	8005304 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f022 0220 	bic.w	r2, r2, #32
 80052b0:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80052b2:	68ba      	ldr	r2, [r7, #8]
 80052b4:	2164      	movs	r1, #100	; 0x64
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f995 	bl	80055e6 <SPI_EndRxTxTransaction>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d005      	beq.n	80052ce <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c6:	f043 0220 	orr.w	r2, r3, #32
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0203 	bic.w	r2, r2, #3
 80052dc:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f7ff ff71 	bl	80051e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005302:	e002      	b.n	800530a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f7ff ff4f 	bl	80051a8 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f7ff ff4c 	bl	80051bc <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff ff48 	bl	80051d0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005340:	bf00      	nop
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0203 	bic.w	r2, r2, #3
 8005364:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536a:	f043 0210 	orr.w	r2, r3, #16
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f7ff ff32 	bl	80051e4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005380:	bf00      	nop
 8005382:	3710      	adds	r7, #16
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	4613      	mov	r3, r2
 8005396:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005398:	e04c      	b.n	8005434 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d048      	beq.n	8005434 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80053a2:	f7fd f91f 	bl	80025e4 <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d902      	bls.n	80053b8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d13d      	bne.n	8005434 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80053c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053d0:	d111      	bne.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053da:	d004      	beq.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e4:	d107      	bne.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fe:	d10f      	bne.n	8005420 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800541e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005430:	2303      	movs	r3, #3
 8005432:	e00f      	b.n	8005454 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	4013      	ands	r3, r2
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	429a      	cmp	r2, r3
 8005442:	bf0c      	ite	eq
 8005444:	2301      	moveq	r3, #1
 8005446:	2300      	movne	r3, #0
 8005448:	b2db      	uxtb	r3, r3
 800544a:	461a      	mov	r2, r3
 800544c:	79fb      	ldrb	r3, [r7, #7]
 800544e:	429a      	cmp	r2, r3
 8005450:	d1a3      	bne.n	800539a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800546a:	e057      	b.n	800551c <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005472:	d106      	bne.n	8005482 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d103      	bne.n	8005482 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	330c      	adds	r3, #12
 8005480:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005488:	d048      	beq.n	800551c <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800548a:	f7fd f8ab 	bl	80025e4 <HAL_GetTick>
 800548e:	4602      	mov	r2, r0
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	683a      	ldr	r2, [r7, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d902      	bls.n	80054a0 <SPI_WaitFifoStateUntilTimeout+0x44>
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d13d      	bne.n	800551c <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b8:	d111      	bne.n	80054de <SPI_WaitFifoStateUntilTimeout+0x82>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c2:	d004      	beq.n	80054ce <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054cc:	d107      	bne.n	80054de <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e6:	d10f      	bne.n	8005508 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005506:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e008      	b.n	800552e <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	4013      	ands	r3, r2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	429a      	cmp	r2, r3
 800552a:	d19f      	bne.n	800546c <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af02      	add	r7, sp, #8
 800553c:	60f8      	str	r0, [r7, #12]
 800553e:	60b9      	str	r1, [r7, #8]
 8005540:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800554a:	d111      	bne.n	8005570 <SPI_EndRxTransaction+0x3a>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005554:	d004      	beq.n	8005560 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800555e:	d107      	bne.n	8005570 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2200      	movs	r2, #0
 8005578:	2180      	movs	r1, #128	; 0x80
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7ff ff04 	bl	8005388 <SPI_WaitFlagStateUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558a:	f043 0220 	orr.w	r2, r3, #32
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e023      	b.n	80055de <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800559e:	d11d      	bne.n	80055dc <SPI_EndRxTransaction+0xa6>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055a8:	d004      	beq.n	80055b4 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055b2:	d113      	bne.n	80055dc <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff ff4b 	bl	800545c <SPI_WaitFifoStateUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d007      	beq.n	80055dc <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d0:	f043 0220 	orr.w	r2, r3, #32
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e000      	b.n	80055de <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80055e6:	b580      	push	{r7, lr}
 80055e8:	b086      	sub	sp, #24
 80055ea:	af02      	add	r7, sp, #8
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f7ff ff2c 	bl	800545c <SPI_WaitFifoStateUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d007      	beq.n	800561a <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800560e:	f043 0220 	orr.w	r2, r3, #32
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e027      	b.n	800566a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	9300      	str	r3, [sp, #0]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	2200      	movs	r2, #0
 8005622:	2180      	movs	r1, #128	; 0x80
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f7ff feaf 	bl	8005388 <SPI_WaitFlagStateUntilTimeout>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d007      	beq.n	8005640 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e014      	b.n	800566a <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2200      	movs	r2, #0
 8005648:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f7ff ff05 	bl	800545c <SPI_WaitFifoStateUntilTimeout>
 8005652:	4603      	mov	r3, r0
 8005654:	2b00      	cmp	r3, #0
 8005656:	d007      	beq.n	8005668 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565c:	f043 0220 	orr.w	r2, r3, #32
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e000      	b.n	800566a <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e01d      	b.n	80056c0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	d106      	bne.n	800569e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7fc fc21 	bl	8001ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2202      	movs	r2, #2
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	3304      	adds	r3, #4
 80056ae:	4619      	mov	r1, r3
 80056b0:	4610      	mov	r0, r2
 80056b2:	f000 febf 	bl	8006434 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f042 0201 	orr.w	r2, r2, #1
 80056de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <HAL_TIM_Base_Start_IT+0x50>)
 80056e8:	4013      	ands	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2b06      	cmp	r3, #6
 80056f0:	d00b      	beq.n	800570a <HAL_TIM_Base_Start_IT+0x42>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f8:	d007      	beq.n	800570a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0201 	orr.w	r2, r2, #1
 8005708:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3714      	adds	r7, #20
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr
 8005718:	00010007 	.word	0x00010007

0800571c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68da      	ldr	r2, [r3, #12]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f022 0201 	bic.w	r2, r2, #1
 8005732:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6a1a      	ldr	r2, [r3, #32]
 800573a:	f241 1311 	movw	r3, #4369	; 0x1111
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10f      	bne.n	8005764 <HAL_TIM_Base_Stop_IT+0x48>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6a1a      	ldr	r2, [r3, #32]
 800574a:	f240 4344 	movw	r3, #1092	; 0x444
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d107      	bne.n	8005764 <HAL_TIM_Base_Stop_IT+0x48>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f022 0201 	bic.w	r2, r2, #1
 8005762:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b082      	sub	sp, #8
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e01d      	b.n	80057c0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fc fc45 	bl	8002028 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2202      	movs	r2, #2
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3304      	adds	r3, #4
 80057ae:	4619      	mov	r1, r3
 80057b0:	4610      	mov	r0, r2
 80057b2:	f000 fe3f 	bl	8006434 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b0c      	cmp	r3, #12
 80057d6:	d841      	bhi.n	800585c <HAL_TIM_PWM_Start_IT+0x94>
 80057d8:	a201      	add	r2, pc, #4	; (adr r2, 80057e0 <HAL_TIM_PWM_Start_IT+0x18>)
 80057da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057de:	bf00      	nop
 80057e0:	08005815 	.word	0x08005815
 80057e4:	0800585d 	.word	0x0800585d
 80057e8:	0800585d 	.word	0x0800585d
 80057ec:	0800585d 	.word	0x0800585d
 80057f0:	08005827 	.word	0x08005827
 80057f4:	0800585d 	.word	0x0800585d
 80057f8:	0800585d 	.word	0x0800585d
 80057fc:	0800585d 	.word	0x0800585d
 8005800:	08005839 	.word	0x08005839
 8005804:	0800585d 	.word	0x0800585d
 8005808:	0800585d 	.word	0x0800585d
 800580c:	0800585d 	.word	0x0800585d
 8005810:	0800584b 	.word	0x0800584b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0202 	orr.w	r2, r2, #2
 8005822:	60da      	str	r2, [r3, #12]
      break;
 8005824:	e01b      	b.n	800585e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68da      	ldr	r2, [r3, #12]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f042 0204 	orr.w	r2, r2, #4
 8005834:	60da      	str	r2, [r3, #12]
      break;
 8005836:	e012      	b.n	800585e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0208 	orr.w	r2, r2, #8
 8005846:	60da      	str	r2, [r3, #12]
      break;
 8005848:	e009      	b.n	800585e <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0210 	orr.w	r2, r2, #16
 8005858:	60da      	str	r2, [r3, #12]
      break;
 800585a:	e000      	b.n	800585e <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800585c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	2201      	movs	r2, #1
 8005864:	6839      	ldr	r1, [r7, #0]
 8005866:	4618      	mov	r0, r3
 8005868:	f001 fb2e 	bl	8006ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a17      	ldr	r2, [pc, #92]	; (80058d0 <HAL_TIM_PWM_Start_IT+0x108>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d004      	beq.n	8005880 <HAL_TIM_PWM_Start_IT+0xb8>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a16      	ldr	r2, [pc, #88]	; (80058d4 <HAL_TIM_PWM_Start_IT+0x10c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d101      	bne.n	8005884 <HAL_TIM_PWM_Start_IT+0xbc>
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <HAL_TIM_PWM_Start_IT+0xbe>
 8005884:	2300      	movs	r3, #0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005898:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <HAL_TIM_PWM_Start_IT+0x110>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b06      	cmp	r3, #6
 80058aa:	d00b      	beq.n	80058c4 <HAL_TIM_PWM_Start_IT+0xfc>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b2:	d007      	beq.n	80058c4 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f042 0201 	orr.w	r2, r2, #1
 80058c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40010000 	.word	0x40010000
 80058d4:	40010400 	.word	0x40010400
 80058d8:	00010007 	.word	0x00010007

080058dc <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b0c      	cmp	r3, #12
 80058ea:	d841      	bhi.n	8005970 <HAL_TIM_PWM_Stop_IT+0x94>
 80058ec:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <HAL_TIM_PWM_Stop_IT+0x18>)
 80058ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	08005929 	.word	0x08005929
 80058f8:	08005971 	.word	0x08005971
 80058fc:	08005971 	.word	0x08005971
 8005900:	08005971 	.word	0x08005971
 8005904:	0800593b 	.word	0x0800593b
 8005908:	08005971 	.word	0x08005971
 800590c:	08005971 	.word	0x08005971
 8005910:	08005971 	.word	0x08005971
 8005914:	0800594d 	.word	0x0800594d
 8005918:	08005971 	.word	0x08005971
 800591c:	08005971 	.word	0x08005971
 8005920:	08005971 	.word	0x08005971
 8005924:	0800595f 	.word	0x0800595f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0202 	bic.w	r2, r2, #2
 8005936:	60da      	str	r2, [r3, #12]
      break;
 8005938:	e01b      	b.n	8005972 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68da      	ldr	r2, [r3, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0204 	bic.w	r2, r2, #4
 8005948:	60da      	str	r2, [r3, #12]
      break;
 800594a:	e012      	b.n	8005972 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f022 0208 	bic.w	r2, r2, #8
 800595a:	60da      	str	r2, [r3, #12]
      break;
 800595c:	e009      	b.n	8005972 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0210 	bic.w	r2, r2, #16
 800596c:	60da      	str	r2, [r3, #12]
      break;
 800596e:	e000      	b.n	8005972 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8005970:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2200      	movs	r2, #0
 8005978:	6839      	ldr	r1, [r7, #0]
 800597a:	4618      	mov	r0, r3
 800597c:	f001 faa4 	bl	8006ec8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a20      	ldr	r2, [pc, #128]	; (8005a08 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <HAL_TIM_PWM_Stop_IT+0xb8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1f      	ldr	r2, [pc, #124]	; (8005a0c <HAL_TIM_PWM_Stop_IT+0x130>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d101      	bne.n	8005998 <HAL_TIM_PWM_Stop_IT+0xbc>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <HAL_TIM_PWM_Stop_IT+0xbe>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d017      	beq.n	80059ce <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	6a1a      	ldr	r2, [r3, #32]
 80059a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80059a8:	4013      	ands	r3, r2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10f      	bne.n	80059ce <HAL_TIM_PWM_Stop_IT+0xf2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6a1a      	ldr	r2, [r3, #32]
 80059b4:	f240 4344 	movw	r3, #1092	; 0x444
 80059b8:	4013      	ands	r3, r2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d107      	bne.n	80059ce <HAL_TIM_PWM_Stop_IT+0xf2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6a1a      	ldr	r2, [r3, #32]
 80059d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80059d8:	4013      	ands	r3, r2
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d10f      	bne.n	80059fe <HAL_TIM_PWM_Stop_IT+0x122>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6a1a      	ldr	r2, [r3, #32]
 80059e4:	f240 4344 	movw	r3, #1092	; 0x444
 80059e8:	4013      	ands	r3, r2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d107      	bne.n	80059fe <HAL_TIM_PWM_Stop_IT+0x122>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0201 	bic.w	r2, r2, #1
 80059fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40010400 	.word	0x40010400

08005a10 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e01d      	b.n	8005a5e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fc fab4 	bl	8001fa4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4610      	mov	r0, r2
 8005a50:	f000 fcf0 	bl	8006434 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	2b0c      	cmp	r3, #12
 8005a76:	d841      	bhi.n	8005afc <HAL_TIM_IC_Start_IT+0x94>
 8005a78:	a201      	add	r2, pc, #4	; (adr r2, 8005a80 <HAL_TIM_IC_Start_IT+0x18>)
 8005a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a7e:	bf00      	nop
 8005a80:	08005ab5 	.word	0x08005ab5
 8005a84:	08005afd 	.word	0x08005afd
 8005a88:	08005afd 	.word	0x08005afd
 8005a8c:	08005afd 	.word	0x08005afd
 8005a90:	08005ac7 	.word	0x08005ac7
 8005a94:	08005afd 	.word	0x08005afd
 8005a98:	08005afd 	.word	0x08005afd
 8005a9c:	08005afd 	.word	0x08005afd
 8005aa0:	08005ad9 	.word	0x08005ad9
 8005aa4:	08005afd 	.word	0x08005afd
 8005aa8:	08005afd 	.word	0x08005afd
 8005aac:	08005afd 	.word	0x08005afd
 8005ab0:	08005aeb 	.word	0x08005aeb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f042 0202 	orr.w	r2, r2, #2
 8005ac2:	60da      	str	r2, [r3, #12]
      break;
 8005ac4:	e01b      	b.n	8005afe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68da      	ldr	r2, [r3, #12]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f042 0204 	orr.w	r2, r2, #4
 8005ad4:	60da      	str	r2, [r3, #12]
      break;
 8005ad6:	e012      	b.n	8005afe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68da      	ldr	r2, [r3, #12]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f042 0208 	orr.w	r2, r2, #8
 8005ae6:	60da      	str	r2, [r3, #12]
      break;
 8005ae8:	e009      	b.n	8005afe <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0210 	orr.w	r2, r2, #16
 8005af8:	60da      	str	r2, [r3, #12]
      break;
 8005afa:	e000      	b.n	8005afe <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005afc:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	6839      	ldr	r1, [r7, #0]
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 f9de 	bl	8006ec8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <HAL_TIM_IC_Start_IT+0xd8>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2b06      	cmp	r3, #6
 8005b1c:	d00b      	beq.n	8005b36 <HAL_TIM_IC_Start_IT+0xce>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b24:	d007      	beq.n	8005b36 <HAL_TIM_IC_Start_IT+0xce>
  {
    __HAL_TIM_ENABLE(htim);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0201 	orr.w	r2, r2, #1
 8005b34:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3710      	adds	r7, #16
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	00010007 	.word	0x00010007

08005b44 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e02d      	b.n	8005bb4 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d106      	bne.n	8005b72 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f825 	bl	8005bbc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	3304      	adds	r3, #4
 8005b82:	4619      	mov	r1, r3
 8005b84:	4610      	mov	r0, r2
 8005b86:	f000 fc55 	bl	8006434 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0208 	bic.w	r2, r2, #8
 8005b98:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d122      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d11b      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0202 	mvn.w	r2, #2
 8005bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f003 0303 	and.w	r3, r3, #3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d003      	beq.n	8005c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f7fb fdd8 	bl	80017c8 <HAL_TIM_IC_CaptureCallback>
 8005c18:	e005      	b.n	8005c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fbec 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fbf3 	bl	800640c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d122      	bne.n	8005c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0304 	and.w	r3, r3, #4
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d11b      	bne.n	8005c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0204 	mvn.w	r2, #4
 8005c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699b      	ldr	r3, [r3, #24]
 8005c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d003      	beq.n	8005c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fb fdae 	bl	80017c8 <HAL_TIM_IC_CaptureCallback>
 8005c6c:	e005      	b.n	8005c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 fbc2 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fbc9 	bl	800640c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0308 	and.w	r3, r3, #8
 8005c8a:	2b08      	cmp	r3, #8
 8005c8c:	d122      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 0308 	and.w	r3, r3, #8
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d11b      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0208 	mvn.w	r2, #8
 8005ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2204      	movs	r2, #4
 8005caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f7fb fd84 	bl	80017c8 <HAL_TIM_IC_CaptureCallback>
 8005cc0:	e005      	b.n	8005cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fb98 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fb9f 	bl	800640c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0310 	and.w	r3, r3, #16
 8005cde:	2b10      	cmp	r3, #16
 8005ce0:	d122      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0310 	and.w	r3, r3, #16
 8005cec:	2b10      	cmp	r3, #16
 8005cee:	d11b      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0210 	mvn.w	r2, #16
 8005cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7fb fd5a 	bl	80017c8 <HAL_TIM_IC_CaptureCallback>
 8005d14:	e005      	b.n	8005d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fb6e 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fb75 	bl	800640c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0301 	and.w	r3, r3, #1
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d10e      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d107      	bne.n	8005d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0201 	mvn.w	r2, #1
 8005d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fb fc62 	bl	8001618 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d5e:	2b80      	cmp	r3, #128	; 0x80
 8005d60:	d10e      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6c:	2b80      	cmp	r3, #128	; 0x80
 8005d6e:	d107      	bne.n	8005d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f001 f9e0 	bl	8007140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d8e:	d10e      	bne.n	8005dae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9a:	2b80      	cmp	r3, #128	; 0x80
 8005d9c:	d107      	bne.n	8005dae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 f9d3 	bl	8007154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db8:	2b40      	cmp	r3, #64	; 0x40
 8005dba:	d10e      	bne.n	8005dda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dc6:	2b40      	cmp	r3, #64	; 0x40
 8005dc8:	d107      	bne.n	8005dda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fb23 	bl	8006420 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b20      	cmp	r3, #32
 8005de6:	d10e      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b20      	cmp	r3, #32
 8005df4:	d107      	bne.n	8005e06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f06f 0220 	mvn.w	r2, #32
 8005dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f001 f993 	bl	800712c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e06:	bf00      	nop
 8005e08:	3708      	adds	r7, #8
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	60f8      	str	r0, [r7, #12]
 8005e16:	60b9      	str	r1, [r7, #8]
 8005e18:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_TIM_IC_ConfigChannel+0x1a>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e08a      	b.n	8005f3e <HAL_TIM_IC_ConfigChannel+0x130>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2202      	movs	r2, #2
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d11b      	bne.n	8005e76 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	6819      	ldr	r1, [r3, #0]
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f000 fe77 	bl	8006b40 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f022 020c 	bic.w	r2, r2, #12
 8005e60:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6999      	ldr	r1, [r3, #24]
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	619a      	str	r2, [r3, #24]
 8005e74:	e05a      	b.n	8005f2c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d11c      	bne.n	8005eb6 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6818      	ldr	r0, [r3, #0]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f000 fefb 	bl	8006c86 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e9e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6999      	ldr	r1, [r3, #24]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	021a      	lsls	r2, r3, #8
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	619a      	str	r2, [r3, #24]
 8005eb4:	e03a      	b.n	8005f2c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d11b      	bne.n	8005ef4 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	6818      	ldr	r0, [r3, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6819      	ldr	r1, [r3, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f000 ff48 	bl	8006d60 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69da      	ldr	r2, [r3, #28]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 020c 	bic.w	r2, r2, #12
 8005ede:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	69d9      	ldr	r1, [r3, #28]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	61da      	str	r2, [r3, #28]
 8005ef2:	e01b      	b.n	8005f2c <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6819      	ldr	r1, [r3, #0]
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f000 ff68 	bl	8006dd8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	69da      	ldr	r2, [r3, #28]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f16:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69d9      	ldr	r1, [r3, #28]
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	021a      	lsls	r2, r3, #8
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b084      	sub	sp, #16
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d101      	bne.n	8005f62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005f5e:	2302      	movs	r3, #2
 8005f60:	e105      	b.n	800616e <HAL_TIM_PWM_ConfigChannel+0x226>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b14      	cmp	r3, #20
 8005f76:	f200 80f0 	bhi.w	800615a <HAL_TIM_PWM_ConfigChannel+0x212>
 8005f7a:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f80:	08005fd5 	.word	0x08005fd5
 8005f84:	0800615b 	.word	0x0800615b
 8005f88:	0800615b 	.word	0x0800615b
 8005f8c:	0800615b 	.word	0x0800615b
 8005f90:	08006015 	.word	0x08006015
 8005f94:	0800615b 	.word	0x0800615b
 8005f98:	0800615b 	.word	0x0800615b
 8005f9c:	0800615b 	.word	0x0800615b
 8005fa0:	08006057 	.word	0x08006057
 8005fa4:	0800615b 	.word	0x0800615b
 8005fa8:	0800615b 	.word	0x0800615b
 8005fac:	0800615b 	.word	0x0800615b
 8005fb0:	08006097 	.word	0x08006097
 8005fb4:	0800615b 	.word	0x0800615b
 8005fb8:	0800615b 	.word	0x0800615b
 8005fbc:	0800615b 	.word	0x0800615b
 8005fc0:	080060d9 	.word	0x080060d9
 8005fc4:	0800615b 	.word	0x0800615b
 8005fc8:	0800615b 	.word	0x0800615b
 8005fcc:	0800615b 	.word	0x0800615b
 8005fd0:	08006119 	.word	0x08006119
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68b9      	ldr	r1, [r7, #8]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f000 faca 	bl	8006574 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699a      	ldr	r2, [r3, #24]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0208 	orr.w	r2, r2, #8
 8005fee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 0204 	bic.w	r2, r2, #4
 8005ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6999      	ldr	r1, [r3, #24]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	430a      	orrs	r2, r1
 8006010:	619a      	str	r2, [r3, #24]
      break;
 8006012:	e0a3      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fb1c 	bl	8006658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	699a      	ldr	r2, [r3, #24]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800602e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	699a      	ldr	r2, [r3, #24]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800603e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6999      	ldr	r1, [r3, #24]
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	021a      	lsls	r2, r3, #8
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	619a      	str	r2, [r3, #24]
      break;
 8006054:	e082      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68b9      	ldr	r1, [r7, #8]
 800605c:	4618      	mov	r0, r3
 800605e:	f000 fb73 	bl	8006748 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	69da      	ldr	r2, [r3, #28]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f042 0208 	orr.w	r2, r2, #8
 8006070:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69da      	ldr	r2, [r3, #28]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f022 0204 	bic.w	r2, r2, #4
 8006080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	69d9      	ldr	r1, [r3, #28]
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	61da      	str	r2, [r3, #28]
      break;
 8006094:	e062      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68b9      	ldr	r1, [r7, #8]
 800609c:	4618      	mov	r0, r3
 800609e:	f000 fbc9 	bl	8006834 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	69da      	ldr	r2, [r3, #28]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69da      	ldr	r2, [r3, #28]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69d9      	ldr	r1, [r3, #28]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	021a      	lsls	r2, r3, #8
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	61da      	str	r2, [r3, #28]
      break;
 80060d6:	e041      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fc00 	bl	80068e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f042 0208 	orr.w	r2, r2, #8
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f022 0204 	bic.w	r2, r2, #4
 8006102:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006116:	e021      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68b9      	ldr	r1, [r7, #8]
 800611e:	4618      	mov	r0, r3
 8006120:	f000 fc32 	bl	8006988 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006132:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006142:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	021a      	lsls	r2, r3, #8
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006158:	e000      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800615a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop

08006178 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006188:	2b01      	cmp	r3, #1
 800618a:	d101      	bne.n	8006190 <HAL_TIM_ConfigClockSource+0x18>
 800618c:	2302      	movs	r3, #2
 800618e:	e0a6      	b.n	80062de <HAL_TIM_ConfigClockSource+0x166>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2202      	movs	r2, #2
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	689b      	ldr	r3, [r3, #8]
 80061a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4b4f      	ldr	r3, [pc, #316]	; (80062e8 <HAL_TIM_ConfigClockSource+0x170>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061b6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b40      	cmp	r3, #64	; 0x40
 80061c6:	d067      	beq.n	8006298 <HAL_TIM_ConfigClockSource+0x120>
 80061c8:	2b40      	cmp	r3, #64	; 0x40
 80061ca:	d80b      	bhi.n	80061e4 <HAL_TIM_ConfigClockSource+0x6c>
 80061cc:	2b10      	cmp	r3, #16
 80061ce:	d073      	beq.n	80062b8 <HAL_TIM_ConfigClockSource+0x140>
 80061d0:	2b10      	cmp	r3, #16
 80061d2:	d802      	bhi.n	80061da <HAL_TIM_ConfigClockSource+0x62>
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d06f      	beq.n	80062b8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80061d8:	e078      	b.n	80062cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d06c      	beq.n	80062b8 <HAL_TIM_ConfigClockSource+0x140>
 80061de:	2b30      	cmp	r3, #48	; 0x30
 80061e0:	d06a      	beq.n	80062b8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80061e2:	e073      	b.n	80062cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061e4:	2b70      	cmp	r3, #112	; 0x70
 80061e6:	d00d      	beq.n	8006204 <HAL_TIM_ConfigClockSource+0x8c>
 80061e8:	2b70      	cmp	r3, #112	; 0x70
 80061ea:	d804      	bhi.n	80061f6 <HAL_TIM_ConfigClockSource+0x7e>
 80061ec:	2b50      	cmp	r3, #80	; 0x50
 80061ee:	d033      	beq.n	8006258 <HAL_TIM_ConfigClockSource+0xe0>
 80061f0:	2b60      	cmp	r3, #96	; 0x60
 80061f2:	d041      	beq.n	8006278 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80061f4:	e06a      	b.n	80062cc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fa:	d066      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x152>
 80061fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006200:	d017      	beq.n	8006232 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006202:	e063      	b.n	80062cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6818      	ldr	r0, [r3, #0]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	6899      	ldr	r1, [r3, #8]
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	f000 fe38 	bl	8006e88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006226:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	609a      	str	r2, [r3, #8]
      break;
 8006230:	e04c      	b.n	80062cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	6899      	ldr	r1, [r3, #8]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f000 fe21 	bl	8006e88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006254:	609a      	str	r2, [r3, #8]
      break;
 8006256:	e039      	b.n	80062cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6818      	ldr	r0, [r3, #0]
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	6859      	ldr	r1, [r3, #4]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	461a      	mov	r2, r3
 8006266:	f000 fcdf 	bl	8006c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2150      	movs	r1, #80	; 0x50
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fdee 	bl	8006e52 <TIM_ITRx_SetConfig>
      break;
 8006276:	e029      	b.n	80062cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	6859      	ldr	r1, [r3, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	461a      	mov	r2, r3
 8006286:	f000 fd3b 	bl	8006d00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2160      	movs	r1, #96	; 0x60
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fdde 	bl	8006e52 <TIM_ITRx_SetConfig>
      break;
 8006296:	e019      	b.n	80062cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	6859      	ldr	r1, [r3, #4]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	461a      	mov	r2, r3
 80062a6:	f000 fcbf 	bl	8006c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2140      	movs	r1, #64	; 0x40
 80062b0:	4618      	mov	r0, r3
 80062b2:	f000 fdce 	bl	8006e52 <TIM_ITRx_SetConfig>
      break;
 80062b6:	e009      	b.n	80062cc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4619      	mov	r1, r3
 80062c2:	4610      	mov	r0, r2
 80062c4:	f000 fdc5 	bl	8006e52 <TIM_ITRx_SetConfig>
      break;
 80062c8:	e000      	b.n	80062cc <HAL_TIM_ConfigClockSource+0x154>
      break;
 80062ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	fffeff88 	.word	0xfffeff88

080062ec <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b082      	sub	sp, #8
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d101      	bne.n	8006304 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006300:	2302      	movs	r3, #2
 8006302:	e031      	b.n	8006368 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fb8a 	bl	8006a30 <TIM_SlaveTimer_SetConfig>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d009      	beq.n	8006336 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2201      	movs	r2, #1
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e018      	b.n	8006368 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006344:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68da      	ldr	r2, [r3, #12]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006354:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3708      	adds	r7, #8
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}

08006370 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b0c      	cmp	r3, #12
 8006382:	d831      	bhi.n	80063e8 <HAL_TIM_ReadCapturedValue+0x78>
 8006384:	a201      	add	r2, pc, #4	; (adr r2, 800638c <HAL_TIM_ReadCapturedValue+0x1c>)
 8006386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638a:	bf00      	nop
 800638c:	080063c1 	.word	0x080063c1
 8006390:	080063e9 	.word	0x080063e9
 8006394:	080063e9 	.word	0x080063e9
 8006398:	080063e9 	.word	0x080063e9
 800639c:	080063cb 	.word	0x080063cb
 80063a0:	080063e9 	.word	0x080063e9
 80063a4:	080063e9 	.word	0x080063e9
 80063a8:	080063e9 	.word	0x080063e9
 80063ac:	080063d5 	.word	0x080063d5
 80063b0:	080063e9 	.word	0x080063e9
 80063b4:	080063e9 	.word	0x080063e9
 80063b8:	080063e9 	.word	0x080063e9
 80063bc:	080063df 	.word	0x080063df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c6:	60fb      	str	r3, [r7, #12]

      break;
 80063c8:	e00f      	b.n	80063ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	60fb      	str	r3, [r7, #12]

      break;
 80063d2:	e00a      	b.n	80063ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063da:	60fb      	str	r3, [r7, #12]

      break;
 80063dc:	e005      	b.n	80063ea <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	60fb      	str	r3, [r7, #12]

      break;
 80063e6:	e000      	b.n	80063ea <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80063e8:	bf00      	nop
  }

  return tmpreg;
 80063ea:	68fb      	ldr	r3, [r7, #12]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a40      	ldr	r2, [pc, #256]	; (8006548 <TIM_Base_SetConfig+0x114>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d013      	beq.n	8006474 <TIM_Base_SetConfig+0x40>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006452:	d00f      	beq.n	8006474 <TIM_Base_SetConfig+0x40>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a3d      	ldr	r2, [pc, #244]	; (800654c <TIM_Base_SetConfig+0x118>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00b      	beq.n	8006474 <TIM_Base_SetConfig+0x40>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a3c      	ldr	r2, [pc, #240]	; (8006550 <TIM_Base_SetConfig+0x11c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d007      	beq.n	8006474 <TIM_Base_SetConfig+0x40>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a3b      	ldr	r2, [pc, #236]	; (8006554 <TIM_Base_SetConfig+0x120>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_Base_SetConfig+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a3a      	ldr	r2, [pc, #232]	; (8006558 <TIM_Base_SetConfig+0x124>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d108      	bne.n	8006486 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a2f      	ldr	r2, [pc, #188]	; (8006548 <TIM_Base_SetConfig+0x114>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d02b      	beq.n	80064e6 <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006494:	d027      	beq.n	80064e6 <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2c      	ldr	r2, [pc, #176]	; (800654c <TIM_Base_SetConfig+0x118>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d023      	beq.n	80064e6 <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2b      	ldr	r2, [pc, #172]	; (8006550 <TIM_Base_SetConfig+0x11c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d01f      	beq.n	80064e6 <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2a      	ldr	r2, [pc, #168]	; (8006554 <TIM_Base_SetConfig+0x120>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d01b      	beq.n	80064e6 <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a29      	ldr	r2, [pc, #164]	; (8006558 <TIM_Base_SetConfig+0x124>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d017      	beq.n	80064e6 <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a28      	ldr	r2, [pc, #160]	; (800655c <TIM_Base_SetConfig+0x128>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d013      	beq.n	80064e6 <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a27      	ldr	r2, [pc, #156]	; (8006560 <TIM_Base_SetConfig+0x12c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00f      	beq.n	80064e6 <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a26      	ldr	r2, [pc, #152]	; (8006564 <TIM_Base_SetConfig+0x130>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00b      	beq.n	80064e6 <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a25      	ldr	r2, [pc, #148]	; (8006568 <TIM_Base_SetConfig+0x134>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d007      	beq.n	80064e6 <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a24      	ldr	r2, [pc, #144]	; (800656c <TIM_Base_SetConfig+0x138>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d003      	beq.n	80064e6 <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a23      	ldr	r2, [pc, #140]	; (8006570 <TIM_Base_SetConfig+0x13c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d108      	bne.n	80064f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	4313      	orrs	r3, r2
 8006504:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a0a      	ldr	r2, [pc, #40]	; (8006548 <TIM_Base_SetConfig+0x114>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d003      	beq.n	800652c <TIM_Base_SetConfig+0xf8>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a0c      	ldr	r2, [pc, #48]	; (8006558 <TIM_Base_SetConfig+0x124>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d103      	bne.n	8006534 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	615a      	str	r2, [r3, #20]
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40010000 	.word	0x40010000
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800
 8006554:	40000c00 	.word	0x40000c00
 8006558:	40010400 	.word	0x40010400
 800655c:	40014000 	.word	0x40014000
 8006560:	40014400 	.word	0x40014400
 8006564:	40014800 	.word	0x40014800
 8006568:	40001800 	.word	0x40001800
 800656c:	40001c00 	.word	0x40001c00
 8006570:	40002000 	.word	0x40002000

08006574 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	f023 0201 	bic.w	r2, r3, #1
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4b2b      	ldr	r3, [pc, #172]	; (800664c <TIM_OC1_SetConfig+0xd8>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f023 0303 	bic.w	r3, r3, #3
 80065aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	f023 0302 	bic.w	r3, r3, #2
 80065bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a21      	ldr	r2, [pc, #132]	; (8006650 <TIM_OC1_SetConfig+0xdc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC1_SetConfig+0x64>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a20      	ldr	r2, [pc, #128]	; (8006654 <TIM_OC1_SetConfig+0xe0>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d10c      	bne.n	80065f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0308 	bic.w	r3, r3, #8
 80065de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f023 0304 	bic.w	r3, r3, #4
 80065f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a16      	ldr	r2, [pc, #88]	; (8006650 <TIM_OC1_SetConfig+0xdc>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d003      	beq.n	8006602 <TIM_OC1_SetConfig+0x8e>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a15      	ldr	r2, [pc, #84]	; (8006654 <TIM_OC1_SetConfig+0xe0>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d111      	bne.n	8006626 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006608:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006610:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	4313      	orrs	r3, r2
 800661a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4313      	orrs	r3, r2
 8006624:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	621a      	str	r2, [r3, #32]
}
 8006640:	bf00      	nop
 8006642:	371c      	adds	r7, #28
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	fffeff8f 	.word	0xfffeff8f
 8006650:	40010000 	.word	0x40010000
 8006654:	40010400 	.word	0x40010400

08006658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	f023 0210 	bic.w	r2, r3, #16
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a1b      	ldr	r3, [r3, #32]
 8006672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	4b2e      	ldr	r3, [pc, #184]	; (800673c <TIM_OC2_SetConfig+0xe4>)
 8006684:	4013      	ands	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800668e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	021b      	lsls	r3, r3, #8
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	4313      	orrs	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f023 0320 	bic.w	r3, r3, #32
 80066a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	011b      	lsls	r3, r3, #4
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a23      	ldr	r2, [pc, #140]	; (8006740 <TIM_OC2_SetConfig+0xe8>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_OC2_SetConfig+0x68>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a22      	ldr	r2, [pc, #136]	; (8006744 <TIM_OC2_SetConfig+0xec>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d10d      	bne.n	80066dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	697a      	ldr	r2, [r7, #20]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a18      	ldr	r2, [pc, #96]	; (8006740 <TIM_OC2_SetConfig+0xe8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_OC2_SetConfig+0x94>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a17      	ldr	r2, [pc, #92]	; (8006744 <TIM_OC2_SetConfig+0xec>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d113      	bne.n	8006714 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	4313      	orrs	r3, r2
 8006712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	685a      	ldr	r2, [r3, #4]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	621a      	str	r2, [r3, #32]
}
 800672e:	bf00      	nop
 8006730:	371c      	adds	r7, #28
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	feff8fff 	.word	0xfeff8fff
 8006740:	40010000 	.word	0x40010000
 8006744:	40010400 	.word	0x40010400

08006748 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006748:	b480      	push	{r7}
 800674a:	b087      	sub	sp, #28
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4b2d      	ldr	r3, [pc, #180]	; (8006828 <TIM_OC3_SetConfig+0xe0>)
 8006774:	4013      	ands	r3, r2
 8006776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f023 0303 	bic.w	r3, r3, #3
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006790:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	021b      	lsls	r3, r3, #8
 8006798:	697a      	ldr	r2, [r7, #20]
 800679a:	4313      	orrs	r3, r2
 800679c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a22      	ldr	r2, [pc, #136]	; (800682c <TIM_OC3_SetConfig+0xe4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d003      	beq.n	80067ae <TIM_OC3_SetConfig+0x66>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a21      	ldr	r2, [pc, #132]	; (8006830 <TIM_OC3_SetConfig+0xe8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d10d      	bne.n	80067ca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a17      	ldr	r2, [pc, #92]	; (800682c <TIM_OC3_SetConfig+0xe4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d003      	beq.n	80067da <TIM_OC3_SetConfig+0x92>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a16      	ldr	r2, [pc, #88]	; (8006830 <TIM_OC3_SetConfig+0xe8>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d113      	bne.n	8006802 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	695b      	ldr	r3, [r3, #20]
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	011b      	lsls	r3, r3, #4
 80067fc:	693a      	ldr	r2, [r7, #16]
 80067fe:	4313      	orrs	r3, r2
 8006800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	685a      	ldr	r2, [r3, #4]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	621a      	str	r2, [r3, #32]
}
 800681c:	bf00      	nop
 800681e:	371c      	adds	r7, #28
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	fffeff8f 	.word	0xfffeff8f
 800682c:	40010000 	.word	0x40010000
 8006830:	40010400 	.word	0x40010400

08006834 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a1b      	ldr	r3, [r3, #32]
 800684e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	69db      	ldr	r3, [r3, #28]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800685c:	68fa      	ldr	r2, [r7, #12]
 800685e:	4b1e      	ldr	r3, [pc, #120]	; (80068d8 <TIM_OC4_SetConfig+0xa4>)
 8006860:	4013      	ands	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800686a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	021b      	lsls	r3, r3, #8
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	4313      	orrs	r3, r2
 8006876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800687e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	031b      	lsls	r3, r3, #12
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a13      	ldr	r2, [pc, #76]	; (80068dc <TIM_OC4_SetConfig+0xa8>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d003      	beq.n	800689c <TIM_OC4_SetConfig+0x68>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a12      	ldr	r2, [pc, #72]	; (80068e0 <TIM_OC4_SetConfig+0xac>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d109      	bne.n	80068b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	695b      	ldr	r3, [r3, #20]
 80068a8:	019b      	lsls	r3, r3, #6
 80068aa:	697a      	ldr	r2, [r7, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	693a      	ldr	r2, [r7, #16]
 80068c8:	621a      	str	r2, [r3, #32]
}
 80068ca:	bf00      	nop
 80068cc:	371c      	adds	r7, #28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	feff8fff 	.word	0xfeff8fff
 80068dc:	40010000 	.word	0x40010000
 80068e0:	40010400 	.word	0x40010400

080068e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a1b      	ldr	r3, [r3, #32]
 80068fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800690c:	68fa      	ldr	r2, [r7, #12]
 800690e:	4b1b      	ldr	r3, [pc, #108]	; (800697c <TIM_OC5_SetConfig+0x98>)
 8006910:	4013      	ands	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006924:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	041b      	lsls	r3, r3, #16
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	4313      	orrs	r3, r2
 8006930:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a12      	ldr	r2, [pc, #72]	; (8006980 <TIM_OC5_SetConfig+0x9c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d003      	beq.n	8006942 <TIM_OC5_SetConfig+0x5e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a11      	ldr	r2, [pc, #68]	; (8006984 <TIM_OC5_SetConfig+0xa0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d109      	bne.n	8006956 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006948:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	621a      	str	r2, [r3, #32]
}
 8006970:	bf00      	nop
 8006972:	371c      	adds	r7, #28
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr
 800697c:	fffeff8f 	.word	0xfffeff8f
 8006980:	40010000 	.word	0x40010000
 8006984:	40010400 	.word	0x40010400

08006988 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4b1c      	ldr	r3, [pc, #112]	; (8006a24 <TIM_OC6_SetConfig+0x9c>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	051b      	lsls	r3, r3, #20
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4a13      	ldr	r2, [pc, #76]	; (8006a28 <TIM_OC6_SetConfig+0xa0>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d003      	beq.n	80069e8 <TIM_OC6_SetConfig+0x60>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a12      	ldr	r2, [pc, #72]	; (8006a2c <TIM_OC6_SetConfig+0xa4>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d109      	bne.n	80069fc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	029b      	lsls	r3, r3, #10
 80069f6:	697a      	ldr	r2, [r7, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop
 8006a24:	feff8fff 	.word	0xfeff8fff
 8006a28:	40010000 	.word	0x40010000
 8006a2c:	40010400 	.word	0x40010400

08006a30 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a48:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006a54:	697a      	ldr	r2, [r7, #20]
 8006a56:	4b39      	ldr	r3, [pc, #228]	; (8006b3c <TIM_SlaveTimer_SetConfig+0x10c>)
 8006a58:	4013      	ands	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	2b30      	cmp	r3, #48	; 0x30
 8006a74:	d05c      	beq.n	8006b30 <TIM_SlaveTimer_SetConfig+0x100>
 8006a76:	2b30      	cmp	r3, #48	; 0x30
 8006a78:	d806      	bhi.n	8006a88 <TIM_SlaveTimer_SetConfig+0x58>
 8006a7a:	2b10      	cmp	r3, #16
 8006a7c:	d058      	beq.n	8006b30 <TIM_SlaveTimer_SetConfig+0x100>
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d056      	beq.n	8006b30 <TIM_SlaveTimer_SetConfig+0x100>
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d054      	beq.n	8006b30 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8006a86:	e054      	b.n	8006b32 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006a88:	2b50      	cmp	r3, #80	; 0x50
 8006a8a:	d03d      	beq.n	8006b08 <TIM_SlaveTimer_SetConfig+0xd8>
 8006a8c:	2b50      	cmp	r3, #80	; 0x50
 8006a8e:	d802      	bhi.n	8006a96 <TIM_SlaveTimer_SetConfig+0x66>
 8006a90:	2b40      	cmp	r3, #64	; 0x40
 8006a92:	d010      	beq.n	8006ab6 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8006a94:	e04d      	b.n	8006b32 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8006a96:	2b60      	cmp	r3, #96	; 0x60
 8006a98:	d040      	beq.n	8006b1c <TIM_SlaveTimer_SetConfig+0xec>
 8006a9a:	2b70      	cmp	r3, #112	; 0x70
 8006a9c:	d000      	beq.n	8006aa0 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8006a9e:	e048      	b.n	8006b32 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6818      	ldr	r0, [r3, #0]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68d9      	ldr	r1, [r3, #12]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689a      	ldr	r2, [r3, #8]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	f000 f9ea 	bl	8006e88 <TIM_ETR_SetConfig>
      break;
 8006ab4:	e03d      	b.n	8006b32 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b05      	cmp	r3, #5
 8006abc:	d101      	bne.n	8006ac2 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e038      	b.n	8006b34 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6a1a      	ldr	r2, [r3, #32]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0201 	bic.w	r2, r2, #1
 8006ad8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ae8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	011b      	lsls	r3, r3, #4
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	621a      	str	r2, [r3, #32]
      break;
 8006b06:	e014      	b.n	8006b32 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	6899      	ldr	r1, [r3, #8]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	461a      	mov	r2, r3
 8006b16:	f000 f887 	bl	8006c28 <TIM_TI1_ConfigInputStage>
      break;
 8006b1a:	e00a      	b.n	8006b32 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6818      	ldr	r0, [r3, #0]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	6899      	ldr	r1, [r3, #8]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	461a      	mov	r2, r3
 8006b2a:	f000 f8e9 	bl	8006d00 <TIM_TI2_ConfigInputStage>
      break;
 8006b2e:	e000      	b.n	8006b32 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8006b30:	bf00      	nop
  }
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3718      	adds	r7, #24
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}
 8006b3c:	fffefff8 	.word	0xfffefff8

08006b40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b087      	sub	sp, #28
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	f023 0201 	bic.w	r2, r3, #1
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4a28      	ldr	r2, [pc, #160]	; (8006c0c <TIM_TI1_SetConfig+0xcc>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d01b      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x66>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b74:	d017      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x66>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a25      	ldr	r2, [pc, #148]	; (8006c10 <TIM_TI1_SetConfig+0xd0>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x66>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a24      	ldr	r2, [pc, #144]	; (8006c14 <TIM_TI1_SetConfig+0xd4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00f      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x66>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a23      	ldr	r2, [pc, #140]	; (8006c18 <TIM_TI1_SetConfig+0xd8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d00b      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x66>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4a22      	ldr	r2, [pc, #136]	; (8006c1c <TIM_TI1_SetConfig+0xdc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d007      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x66>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4a21      	ldr	r2, [pc, #132]	; (8006c20 <TIM_TI1_SetConfig+0xe0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d003      	beq.n	8006ba6 <TIM_TI1_SetConfig+0x66>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4a20      	ldr	r2, [pc, #128]	; (8006c24 <TIM_TI1_SetConfig+0xe4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d101      	bne.n	8006baa <TIM_TI1_SetConfig+0x6a>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <TIM_TI1_SetConfig+0x6c>
 8006baa:	2300      	movs	r3, #0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f023 0303 	bic.w	r3, r3, #3
 8006bb6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	e003      	b.n	8006bca <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	011b      	lsls	r3, r3, #4
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f023 030a 	bic.w	r3, r3, #10
 8006be4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f003 030a 	and.w	r3, r3, #10
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	693a      	ldr	r2, [r7, #16]
 8006bfc:	621a      	str	r2, [r3, #32]
}
 8006bfe:	bf00      	nop
 8006c00:	371c      	adds	r7, #28
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	40010000 	.word	0x40010000
 8006c10:	40000400 	.word	0x40000400
 8006c14:	40000800 	.word	0x40000800
 8006c18:	40000c00 	.word	0x40000c00
 8006c1c:	40010400 	.word	0x40010400
 8006c20:	40014000 	.word	0x40014000
 8006c24:	40001800 	.word	0x40001800

08006c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f023 0201 	bic.w	r2, r3, #1
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f023 030a 	bic.w	r3, r3, #10
 8006c64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	693a      	ldr	r2, [r7, #16]
 8006c72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	621a      	str	r2, [r3, #32]
}
 8006c7a:	bf00      	nop
 8006c7c:	371c      	adds	r7, #28
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr

08006c86 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b087      	sub	sp, #28
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	607a      	str	r2, [r7, #4]
 8006c92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	f023 0210 	bic.w	r2, r3, #16
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	021b      	lsls	r3, r3, #8
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	031b      	lsls	r3, r3, #12
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cd8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	621a      	str	r2, [r3, #32]
}
 8006cf4:	bf00      	nop
 8006cf6:	371c      	adds	r7, #28
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	60f8      	str	r0, [r7, #12]
 8006d08:	60b9      	str	r1, [r7, #8]
 8006d0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	f023 0210 	bic.w	r2, r3, #16
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	031b      	lsls	r3, r3, #12
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	693a      	ldr	r2, [r7, #16]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	621a      	str	r2, [r3, #32]
}
 8006d54:	bf00      	nop
 8006d56:	371c      	adds	r7, #28
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f023 0303 	bic.w	r3, r3, #3
 8006d8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	011b      	lsls	r3, r3, #4
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006db0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	021b      	lsls	r3, r3, #8
 8006db6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006dba:	693a      	ldr	r2, [r7, #16]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	621a      	str	r2, [r3, #32]
}
 8006dcc:	bf00      	nop
 8006dce:	371c      	adds	r7, #28
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	607a      	str	r2, [r7, #4]
 8006de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1b      	ldr	r3, [r3, #32]
 8006dea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a1b      	ldr	r3, [r3, #32]
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	697a      	ldr	r2, [r7, #20]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	031b      	lsls	r3, r3, #12
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006e2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	031b      	lsls	r3, r3, #12
 8006e30:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	621a      	str	r2, [r3, #32]
}
 8006e46:	bf00      	nop
 8006e48:	371c      	adds	r7, #28
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr

08006e52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
 8006e5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	f043 0307 	orr.w	r3, r3, #7
 8006e74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	609a      	str	r2, [r3, #8]
}
 8006e7c:	bf00      	nop
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b087      	sub	sp, #28
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ea2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	021a      	lsls	r2, r3, #8
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	609a      	str	r2, [r3, #8]
}
 8006ebc:	bf00      	nop
 8006ebe:	371c      	adds	r7, #28
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b087      	sub	sp, #28
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f003 031f 	and.w	r3, r3, #31
 8006eda:	2201      	movs	r2, #1
 8006edc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	6a1a      	ldr	r2, [r3, #32]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	401a      	ands	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6a1a      	ldr	r2, [r3, #32]
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	fa01 f303 	lsl.w	r3, r1, r3
 8006f00:	431a      	orrs	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	621a      	str	r2, [r3, #32]
}
 8006f06:	bf00      	nop
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
	...

08006f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d101      	bne.n	8006f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e06d      	b.n	8007008 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a30      	ldr	r2, [pc, #192]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d004      	beq.n	8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a2f      	ldr	r2, [pc, #188]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d108      	bne.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	68fa      	ldr	r2, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a20      	ldr	r2, [pc, #128]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d022      	beq.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9e:	d01d      	beq.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1d      	ldr	r2, [pc, #116]	; (800701c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d018      	beq.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1c      	ldr	r2, [pc, #112]	; (8007020 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d013      	beq.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1a      	ldr	r2, [pc, #104]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00e      	beq.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a15      	ldr	r2, [pc, #84]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d009      	beq.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a16      	ldr	r2, [pc, #88]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a15      	ldr	r2, [pc, #84]	; (800702c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d10c      	bne.n	8006ff6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	40010000 	.word	0x40010000
 8007018:	40010400 	.word	0x40010400
 800701c:	40000400 	.word	0x40000400
 8007020:	40000800 	.word	0x40000800
 8007024:	40000c00 	.word	0x40000c00
 8007028:	40014000 	.word	0x40014000
 800702c:	40001800 	.word	0x40001800

08007030 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007048:	2302      	movs	r3, #2
 800704a:	e065      	b.n	8007118 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	4313      	orrs	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	689b      	ldr	r3, [r3, #8]
 800706c:	4313      	orrs	r3, r2
 800706e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4313      	orrs	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	4313      	orrs	r3, r2
 8007098:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	695b      	ldr	r3, [r3, #20]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	041b      	lsls	r3, r3, #16
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a16      	ldr	r2, [pc, #88]	; (8007124 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d004      	beq.n	80070da <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a14      	ldr	r2, [pc, #80]	; (8007128 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d115      	bne.n	8007106 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	051b      	lsls	r3, r3, #20
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr
 8007124:	40010000 	.word	0x40010000
 8007128:	40010400 	.word	0x40010400

0800712c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e040      	b.n	80071fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717e:	2b00      	cmp	r3, #0
 8007180:	d106      	bne.n	8007190 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7fb f818 	bl	80021c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2224      	movs	r2, #36	; 0x24
 8007194:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0201 	bic.w	r2, r2, #1
 80071a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fac4 	bl	8007734 <UART_SetConfig>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d101      	bne.n	80071b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e022      	b.n	80071fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d002      	beq.n	80071c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fd62 	bl	8007c88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f042 0201 	orr.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fde9 	bl	8007dcc <UART_CheckIdleState>
 80071fa:	4603      	mov	r3, r0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	; 0x28
 8007208:	af02      	add	r7, sp, #8
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	4613      	mov	r3, r2
 8007212:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007218:	2b20      	cmp	r3, #32
 800721a:	d17f      	bne.n	800731c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <HAL_UART_Transmit+0x24>
 8007222:	88fb      	ldrh	r3, [r7, #6]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e078      	b.n	800731e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_UART_Transmit+0x36>
 8007236:	2302      	movs	r3, #2
 8007238:	e071      	b.n	800731e <HAL_UART_Transmit+0x11a>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2221      	movs	r2, #33	; 0x21
 800724c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800724e:	f7fb f9c9 	bl	80025e4 <HAL_GetTick>
 8007252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	88fa      	ldrh	r2, [r7, #6]
 8007258:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	88fa      	ldrh	r2, [r7, #6]
 8007260:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800726c:	d108      	bne.n	8007280 <HAL_UART_Transmit+0x7c>
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d104      	bne.n	8007280 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8007276:	2300      	movs	r3, #0
 8007278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	e003      	b.n	8007288 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007284:	2300      	movs	r3, #0
 8007286:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8007290:	e02c      	b.n	80072ec <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	9300      	str	r3, [sp, #0]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	2200      	movs	r2, #0
 800729a:	2180      	movs	r1, #128	; 0x80
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fdda 	bl	8007e56 <UART_WaitOnFlagUntilTimeout>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e038      	b.n	800731e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10b      	bne.n	80072ca <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	881b      	ldrh	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	3302      	adds	r3, #2
 80072c6:	61bb      	str	r3, [r7, #24]
 80072c8:	e007      	b.n	80072da <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	781a      	ldrb	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	3301      	adds	r3, #1
 80072d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	3b01      	subs	r3, #1
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1cc      	bne.n	8007292 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	2200      	movs	r2, #0
 8007300:	2140      	movs	r1, #64	; 0x40
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 fda7 	bl	8007e56 <UART_WaitOnFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e005      	b.n	800731e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2220      	movs	r2, #32
 8007316:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8007318:	2300      	movs	r3, #0
 800731a:	e000      	b.n	800731e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800731c:	2302      	movs	r3, #2
  }
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
	...

08007328 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007328:	b480      	push	{r7}
 800732a:	b085      	sub	sp, #20
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	4613      	mov	r3, r2
 8007334:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800733a:	2b20      	cmp	r3, #32
 800733c:	f040 808a 	bne.w	8007454 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <HAL_UART_Receive_IT+0x24>
 8007346:	88fb      	ldrh	r3, [r7, #6]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d101      	bne.n	8007350 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e082      	b.n	8007456 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_UART_Receive_IT+0x36>
 800735a:	2302      	movs	r3, #2
 800735c:	e07b      	b.n	8007456 <HAL_UART_Receive_IT+0x12e>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	88fa      	ldrh	r2, [r7, #6]
 8007370:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	88fa      	ldrh	r2, [r7, #6]
 8007378:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738a:	d10e      	bne.n	80073aa <HAL_UART_Receive_IT+0x82>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <HAL_UART_Receive_IT+0x78>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f240 12ff 	movw	r2, #511	; 0x1ff
 800739a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800739e:	e02d      	b.n	80073fc <HAL_UART_Receive_IT+0xd4>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	22ff      	movs	r2, #255	; 0xff
 80073a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073a8:	e028      	b.n	80073fc <HAL_UART_Receive_IT+0xd4>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10d      	bne.n	80073ce <HAL_UART_Receive_IT+0xa6>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <HAL_UART_Receive_IT+0x9c>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	22ff      	movs	r2, #255	; 0xff
 80073be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073c2:	e01b      	b.n	80073fc <HAL_UART_Receive_IT+0xd4>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	227f      	movs	r2, #127	; 0x7f
 80073c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073cc:	e016      	b.n	80073fc <HAL_UART_Receive_IT+0xd4>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d6:	d10d      	bne.n	80073f4 <HAL_UART_Receive_IT+0xcc>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <HAL_UART_Receive_IT+0xc2>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	227f      	movs	r2, #127	; 0x7f
 80073e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073e8:	e008      	b.n	80073fc <HAL_UART_Receive_IT+0xd4>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	223f      	movs	r2, #63	; 0x3f
 80073ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073f2:	e003      	b.n	80073fc <HAL_UART_Receive_IT+0xd4>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2222      	movs	r2, #34	; 0x22
 8007406:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0201 	orr.w	r2, r2, #1
 8007416:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007420:	d107      	bne.n	8007432 <HAL_UART_Receive_IT+0x10a>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d103      	bne.n	8007432 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4a0d      	ldr	r2, [pc, #52]	; (8007464 <HAL_UART_Receive_IT+0x13c>)
 800742e:	661a      	str	r2, [r3, #96]	; 0x60
 8007430:	e002      	b.n	8007438 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	4a0c      	ldr	r2, [pc, #48]	; (8007468 <HAL_UART_Receive_IT+0x140>)
 8007436:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800744e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	e000      	b.n	8007456 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8007454:	2302      	movs	r3, #2
  }
}
 8007456:	4618      	mov	r0, r3
 8007458:	3714      	adds	r7, #20
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	08008091 	.word	0x08008091
 8007468:	08007feb 	.word	0x08007feb

0800746c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800748c:	69fa      	ldr	r2, [r7, #28]
 800748e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007492:	4013      	ands	r3, r2
 8007494:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d113      	bne.n	80074c4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f003 0320 	and.w	r3, r3, #32
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00e      	beq.n	80074c4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d009      	beq.n	80074c4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 8114 	beq.w	80076e2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	4798      	blx	r3
      }
      return;
 80074c2:	e10e      	b.n	80076e2 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 80d6 	beq.w	8007678 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d105      	bne.n	80074e2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f000 80cb 	beq.w	8007678 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00e      	beq.n	800750a <HAL_UART_IRQHandler+0x9e>
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2201      	movs	r2, #1
 80074fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007502:	f043 0201 	orr.w	r2, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00e      	beq.n	8007532 <HAL_UART_IRQHandler+0xc6>
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d009      	beq.n	8007532 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2202      	movs	r2, #2
 8007524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800752a:	f043 0204 	orr.w	r2, r3, #4
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007532:	69fb      	ldr	r3, [r7, #28]
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00e      	beq.n	800755a <HAL_UART_IRQHandler+0xee>
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d009      	beq.n	800755a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2204      	movs	r2, #4
 800754c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007552:	f043 0202 	orr.w	r2, r3, #2
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800755a:	69fb      	ldr	r3, [r7, #28]
 800755c:	f003 0308 	and.w	r3, r3, #8
 8007560:	2b00      	cmp	r3, #0
 8007562:	d013      	beq.n	800758c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007564:	69bb      	ldr	r3, [r7, #24]
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b00      	cmp	r3, #0
 800756c:	d104      	bne.n	8007578 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007574:	2b00      	cmp	r3, #0
 8007576:	d009      	beq.n	800758c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2208      	movs	r2, #8
 800757e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007584:	f043 0208 	orr.w	r2, r3, #8
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00f      	beq.n	80075b6 <HAL_UART_IRQHandler+0x14a>
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00a      	beq.n	80075b6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ae:	f043 0220 	orr.w	r2, r3, #32
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 8093 	beq.w	80076e6 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	f003 0320 	and.w	r3, r3, #32
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00c      	beq.n	80075e4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d007      	beq.n	80075e4 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80075e8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d004      	beq.n	8007602 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d031      	beq.n	8007666 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fca2 	bl	8007f4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007612:	2b40      	cmp	r3, #64	; 0x40
 8007614:	d123      	bne.n	800765e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007624:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d013      	beq.n	8007656 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007632:	4a30      	ldr	r2, [pc, #192]	; (80076f4 <HAL_UART_IRQHandler+0x288>)
 8007634:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800763a:	4618      	mov	r0, r3
 800763c:	f7fb fe37 	bl	80032ae <HAL_DMA_Abort_IT>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d016      	beq.n	8007674 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800764a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007650:	4610      	mov	r0, r2
 8007652:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007654:	e00e      	b.n	8007674 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f858 	bl	800770c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765c:	e00a      	b.n	8007674 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f854 	bl	800770c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007664:	e006      	b.n	8007674 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 f850 	bl	800770c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8007672:	e038      	b.n	80076e6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007674:	bf00      	nop
    return;
 8007676:	e036      	b.n	80076e6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00d      	beq.n	800769e <HAL_UART_IRQHandler+0x232>
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d008      	beq.n	800769e <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007694:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f842 	bl	8007720 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800769c:	e026      	b.n	80076ec <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00d      	beq.n	80076c4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d008      	beq.n	80076c4 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d017      	beq.n	80076ea <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	4798      	blx	r3
    }
    return;
 80076c2:	e012      	b.n	80076ea <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d00e      	beq.n	80076ec <HAL_UART_IRQHandler+0x280>
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d009      	beq.n	80076ec <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fc6d 	bl	8007fb8 <UART_EndTransmit_IT>
    return;
 80076de:	bf00      	nop
 80076e0:	e004      	b.n	80076ec <HAL_UART_IRQHandler+0x280>
      return;
 80076e2:	bf00      	nop
 80076e4:	e002      	b.n	80076ec <HAL_UART_IRQHandler+0x280>
    return;
 80076e6:	bf00      	nop
 80076e8:	e000      	b.n	80076ec <HAL_UART_IRQHandler+0x280>
    return;
 80076ea:	bf00      	nop
  }

}
 80076ec:	3720      	adds	r7, #32
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	08007f8d 	.word	0x08007f8d

080076f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b088      	sub	sp, #32
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800773c:	2300      	movs	r3, #0
 800773e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8007740:	2300      	movs	r3, #0
 8007742:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689a      	ldr	r2, [r3, #8]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	431a      	orrs	r2, r3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	431a      	orrs	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	69db      	ldr	r3, [r3, #28]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4bb1      	ldr	r3, [pc, #708]	; (8007a28 <UART_SetConfig+0x2f4>)
 8007764:	4013      	ands	r3, r2
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	6812      	ldr	r2, [r2, #0]
 800776a:	6939      	ldr	r1, [r7, #16]
 800776c:	430b      	orrs	r3, r1
 800776e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	430a      	orrs	r2, r1
 8007784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a1b      	ldr	r3, [r3, #32]
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	4313      	orrs	r3, r2
 8007794:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	693a      	ldr	r2, [r7, #16]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a9f      	ldr	r2, [pc, #636]	; (8007a2c <UART_SetConfig+0x2f8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d121      	bne.n	80077f8 <UART_SetConfig+0xc4>
 80077b4:	4b9e      	ldr	r3, [pc, #632]	; (8007a30 <UART_SetConfig+0x2fc>)
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ba:	f003 0303 	and.w	r3, r3, #3
 80077be:	2b03      	cmp	r3, #3
 80077c0:	d816      	bhi.n	80077f0 <UART_SetConfig+0xbc>
 80077c2:	a201      	add	r2, pc, #4	; (adr r2, 80077c8 <UART_SetConfig+0x94>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077d9 	.word	0x080077d9
 80077cc:	080077e5 	.word	0x080077e5
 80077d0:	080077df 	.word	0x080077df
 80077d4:	080077eb 	.word	0x080077eb
 80077d8:	2301      	movs	r3, #1
 80077da:	77fb      	strb	r3, [r7, #31]
 80077dc:	e151      	b.n	8007a82 <UART_SetConfig+0x34e>
 80077de:	2302      	movs	r3, #2
 80077e0:	77fb      	strb	r3, [r7, #31]
 80077e2:	e14e      	b.n	8007a82 <UART_SetConfig+0x34e>
 80077e4:	2304      	movs	r3, #4
 80077e6:	77fb      	strb	r3, [r7, #31]
 80077e8:	e14b      	b.n	8007a82 <UART_SetConfig+0x34e>
 80077ea:	2308      	movs	r3, #8
 80077ec:	77fb      	strb	r3, [r7, #31]
 80077ee:	e148      	b.n	8007a82 <UART_SetConfig+0x34e>
 80077f0:	2310      	movs	r3, #16
 80077f2:	77fb      	strb	r3, [r7, #31]
 80077f4:	bf00      	nop
 80077f6:	e144      	b.n	8007a82 <UART_SetConfig+0x34e>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a8d      	ldr	r2, [pc, #564]	; (8007a34 <UART_SetConfig+0x300>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d134      	bne.n	800786c <UART_SetConfig+0x138>
 8007802:	4b8b      	ldr	r3, [pc, #556]	; (8007a30 <UART_SetConfig+0x2fc>)
 8007804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007808:	f003 030c 	and.w	r3, r3, #12
 800780c:	2b0c      	cmp	r3, #12
 800780e:	d829      	bhi.n	8007864 <UART_SetConfig+0x130>
 8007810:	a201      	add	r2, pc, #4	; (adr r2, 8007818 <UART_SetConfig+0xe4>)
 8007812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007816:	bf00      	nop
 8007818:	0800784d 	.word	0x0800784d
 800781c:	08007865 	.word	0x08007865
 8007820:	08007865 	.word	0x08007865
 8007824:	08007865 	.word	0x08007865
 8007828:	08007859 	.word	0x08007859
 800782c:	08007865 	.word	0x08007865
 8007830:	08007865 	.word	0x08007865
 8007834:	08007865 	.word	0x08007865
 8007838:	08007853 	.word	0x08007853
 800783c:	08007865 	.word	0x08007865
 8007840:	08007865 	.word	0x08007865
 8007844:	08007865 	.word	0x08007865
 8007848:	0800785f 	.word	0x0800785f
 800784c:	2300      	movs	r3, #0
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	e117      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007852:	2302      	movs	r3, #2
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e114      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007858:	2304      	movs	r3, #4
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e111      	b.n	8007a82 <UART_SetConfig+0x34e>
 800785e:	2308      	movs	r3, #8
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e10e      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007864:	2310      	movs	r3, #16
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	bf00      	nop
 800786a:	e10a      	b.n	8007a82 <UART_SetConfig+0x34e>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a71      	ldr	r2, [pc, #452]	; (8007a38 <UART_SetConfig+0x304>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d120      	bne.n	80078b8 <UART_SetConfig+0x184>
 8007876:	4b6e      	ldr	r3, [pc, #440]	; (8007a30 <UART_SetConfig+0x2fc>)
 8007878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007880:	2b10      	cmp	r3, #16
 8007882:	d00f      	beq.n	80078a4 <UART_SetConfig+0x170>
 8007884:	2b10      	cmp	r3, #16
 8007886:	d802      	bhi.n	800788e <UART_SetConfig+0x15a>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <UART_SetConfig+0x164>
 800788c:	e010      	b.n	80078b0 <UART_SetConfig+0x17c>
 800788e:	2b20      	cmp	r3, #32
 8007890:	d005      	beq.n	800789e <UART_SetConfig+0x16a>
 8007892:	2b30      	cmp	r3, #48	; 0x30
 8007894:	d009      	beq.n	80078aa <UART_SetConfig+0x176>
 8007896:	e00b      	b.n	80078b0 <UART_SetConfig+0x17c>
 8007898:	2300      	movs	r3, #0
 800789a:	77fb      	strb	r3, [r7, #31]
 800789c:	e0f1      	b.n	8007a82 <UART_SetConfig+0x34e>
 800789e:	2302      	movs	r3, #2
 80078a0:	77fb      	strb	r3, [r7, #31]
 80078a2:	e0ee      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078a4:	2304      	movs	r3, #4
 80078a6:	77fb      	strb	r3, [r7, #31]
 80078a8:	e0eb      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078aa:	2308      	movs	r3, #8
 80078ac:	77fb      	strb	r3, [r7, #31]
 80078ae:	e0e8      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078b0:	2310      	movs	r3, #16
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	bf00      	nop
 80078b6:	e0e4      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a5f      	ldr	r2, [pc, #380]	; (8007a3c <UART_SetConfig+0x308>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d120      	bne.n	8007904 <UART_SetConfig+0x1d0>
 80078c2:	4b5b      	ldr	r3, [pc, #364]	; (8007a30 <UART_SetConfig+0x2fc>)
 80078c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80078cc:	2b40      	cmp	r3, #64	; 0x40
 80078ce:	d00f      	beq.n	80078f0 <UART_SetConfig+0x1bc>
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	d802      	bhi.n	80078da <UART_SetConfig+0x1a6>
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d005      	beq.n	80078e4 <UART_SetConfig+0x1b0>
 80078d8:	e010      	b.n	80078fc <UART_SetConfig+0x1c8>
 80078da:	2b80      	cmp	r3, #128	; 0x80
 80078dc:	d005      	beq.n	80078ea <UART_SetConfig+0x1b6>
 80078de:	2bc0      	cmp	r3, #192	; 0xc0
 80078e0:	d009      	beq.n	80078f6 <UART_SetConfig+0x1c2>
 80078e2:	e00b      	b.n	80078fc <UART_SetConfig+0x1c8>
 80078e4:	2300      	movs	r3, #0
 80078e6:	77fb      	strb	r3, [r7, #31]
 80078e8:	e0cb      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078ea:	2302      	movs	r3, #2
 80078ec:	77fb      	strb	r3, [r7, #31]
 80078ee:	e0c8      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078f0:	2304      	movs	r3, #4
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e0c5      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078f6:	2308      	movs	r3, #8
 80078f8:	77fb      	strb	r3, [r7, #31]
 80078fa:	e0c2      	b.n	8007a82 <UART_SetConfig+0x34e>
 80078fc:	2310      	movs	r3, #16
 80078fe:	77fb      	strb	r3, [r7, #31]
 8007900:	bf00      	nop
 8007902:	e0be      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a4d      	ldr	r2, [pc, #308]	; (8007a40 <UART_SetConfig+0x30c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d124      	bne.n	8007958 <UART_SetConfig+0x224>
 800790e:	4b48      	ldr	r3, [pc, #288]	; (8007a30 <UART_SetConfig+0x2fc>)
 8007910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007918:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800791c:	d012      	beq.n	8007944 <UART_SetConfig+0x210>
 800791e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007922:	d802      	bhi.n	800792a <UART_SetConfig+0x1f6>
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <UART_SetConfig+0x204>
 8007928:	e012      	b.n	8007950 <UART_SetConfig+0x21c>
 800792a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800792e:	d006      	beq.n	800793e <UART_SetConfig+0x20a>
 8007930:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007934:	d009      	beq.n	800794a <UART_SetConfig+0x216>
 8007936:	e00b      	b.n	8007950 <UART_SetConfig+0x21c>
 8007938:	2300      	movs	r3, #0
 800793a:	77fb      	strb	r3, [r7, #31]
 800793c:	e0a1      	b.n	8007a82 <UART_SetConfig+0x34e>
 800793e:	2302      	movs	r3, #2
 8007940:	77fb      	strb	r3, [r7, #31]
 8007942:	e09e      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007944:	2304      	movs	r3, #4
 8007946:	77fb      	strb	r3, [r7, #31]
 8007948:	e09b      	b.n	8007a82 <UART_SetConfig+0x34e>
 800794a:	2308      	movs	r3, #8
 800794c:	77fb      	strb	r3, [r7, #31]
 800794e:	e098      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007950:	2310      	movs	r3, #16
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	bf00      	nop
 8007956:	e094      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a39      	ldr	r2, [pc, #228]	; (8007a44 <UART_SetConfig+0x310>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d124      	bne.n	80079ac <UART_SetConfig+0x278>
 8007962:	4b33      	ldr	r3, [pc, #204]	; (8007a30 <UART_SetConfig+0x2fc>)
 8007964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007968:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800796c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007970:	d012      	beq.n	8007998 <UART_SetConfig+0x264>
 8007972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007976:	d802      	bhi.n	800797e <UART_SetConfig+0x24a>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d007      	beq.n	800798c <UART_SetConfig+0x258>
 800797c:	e012      	b.n	80079a4 <UART_SetConfig+0x270>
 800797e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007982:	d006      	beq.n	8007992 <UART_SetConfig+0x25e>
 8007984:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007988:	d009      	beq.n	800799e <UART_SetConfig+0x26a>
 800798a:	e00b      	b.n	80079a4 <UART_SetConfig+0x270>
 800798c:	2301      	movs	r3, #1
 800798e:	77fb      	strb	r3, [r7, #31]
 8007990:	e077      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007992:	2302      	movs	r3, #2
 8007994:	77fb      	strb	r3, [r7, #31]
 8007996:	e074      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007998:	2304      	movs	r3, #4
 800799a:	77fb      	strb	r3, [r7, #31]
 800799c:	e071      	b.n	8007a82 <UART_SetConfig+0x34e>
 800799e:	2308      	movs	r3, #8
 80079a0:	77fb      	strb	r3, [r7, #31]
 80079a2:	e06e      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079a4:	2310      	movs	r3, #16
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	bf00      	nop
 80079aa:	e06a      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a25      	ldr	r2, [pc, #148]	; (8007a48 <UART_SetConfig+0x314>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d124      	bne.n	8007a00 <UART_SetConfig+0x2cc>
 80079b6:	4b1e      	ldr	r3, [pc, #120]	; (8007a30 <UART_SetConfig+0x2fc>)
 80079b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80079c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c4:	d012      	beq.n	80079ec <UART_SetConfig+0x2b8>
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	d802      	bhi.n	80079d2 <UART_SetConfig+0x29e>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d007      	beq.n	80079e0 <UART_SetConfig+0x2ac>
 80079d0:	e012      	b.n	80079f8 <UART_SetConfig+0x2c4>
 80079d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079d6:	d006      	beq.n	80079e6 <UART_SetConfig+0x2b2>
 80079d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079dc:	d009      	beq.n	80079f2 <UART_SetConfig+0x2be>
 80079de:	e00b      	b.n	80079f8 <UART_SetConfig+0x2c4>
 80079e0:	2300      	movs	r3, #0
 80079e2:	77fb      	strb	r3, [r7, #31]
 80079e4:	e04d      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079e6:	2302      	movs	r3, #2
 80079e8:	77fb      	strb	r3, [r7, #31]
 80079ea:	e04a      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079ec:	2304      	movs	r3, #4
 80079ee:	77fb      	strb	r3, [r7, #31]
 80079f0:	e047      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079f2:	2308      	movs	r3, #8
 80079f4:	77fb      	strb	r3, [r7, #31]
 80079f6:	e044      	b.n	8007a82 <UART_SetConfig+0x34e>
 80079f8:	2310      	movs	r3, #16
 80079fa:	77fb      	strb	r3, [r7, #31]
 80079fc:	bf00      	nop
 80079fe:	e040      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a11      	ldr	r2, [pc, #68]	; (8007a4c <UART_SetConfig+0x318>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d139      	bne.n	8007a7e <UART_SetConfig+0x34a>
 8007a0a:	4b09      	ldr	r3, [pc, #36]	; (8007a30 <UART_SetConfig+0x2fc>)
 8007a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a18:	d027      	beq.n	8007a6a <UART_SetConfig+0x336>
 8007a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a1e:	d817      	bhi.n	8007a50 <UART_SetConfig+0x31c>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d01c      	beq.n	8007a5e <UART_SetConfig+0x32a>
 8007a24:	e027      	b.n	8007a76 <UART_SetConfig+0x342>
 8007a26:	bf00      	nop
 8007a28:	efff69f3 	.word	0xefff69f3
 8007a2c:	40011000 	.word	0x40011000
 8007a30:	40023800 	.word	0x40023800
 8007a34:	40004400 	.word	0x40004400
 8007a38:	40004800 	.word	0x40004800
 8007a3c:	40004c00 	.word	0x40004c00
 8007a40:	40005000 	.word	0x40005000
 8007a44:	40011400 	.word	0x40011400
 8007a48:	40007800 	.word	0x40007800
 8007a4c:	40007c00 	.word	0x40007c00
 8007a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a54:	d006      	beq.n	8007a64 <UART_SetConfig+0x330>
 8007a56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a5a:	d009      	beq.n	8007a70 <UART_SetConfig+0x33c>
 8007a5c:	e00b      	b.n	8007a76 <UART_SetConfig+0x342>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	77fb      	strb	r3, [r7, #31]
 8007a62:	e00e      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a64:	2302      	movs	r3, #2
 8007a66:	77fb      	strb	r3, [r7, #31]
 8007a68:	e00b      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a6a:	2304      	movs	r3, #4
 8007a6c:	77fb      	strb	r3, [r7, #31]
 8007a6e:	e008      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a70:	2308      	movs	r3, #8
 8007a72:	77fb      	strb	r3, [r7, #31]
 8007a74:	e005      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a76:	2310      	movs	r3, #16
 8007a78:	77fb      	strb	r3, [r7, #31]
 8007a7a:	bf00      	nop
 8007a7c:	e001      	b.n	8007a82 <UART_SetConfig+0x34e>
 8007a7e:	2310      	movs	r3, #16
 8007a80:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	69db      	ldr	r3, [r3, #28]
 8007a86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a8a:	d17f      	bne.n	8007b8c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8007a8c:	7ffb      	ldrb	r3, [r7, #31]
 8007a8e:	2b08      	cmp	r3, #8
 8007a90:	d85c      	bhi.n	8007b4c <UART_SetConfig+0x418>
 8007a92:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <UART_SetConfig+0x364>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007abd 	.word	0x08007abd
 8007a9c:	08007add 	.word	0x08007add
 8007aa0:	08007afd 	.word	0x08007afd
 8007aa4:	08007b4d 	.word	0x08007b4d
 8007aa8:	08007b15 	.word	0x08007b15
 8007aac:	08007b4d 	.word	0x08007b4d
 8007ab0:	08007b4d 	.word	0x08007b4d
 8007ab4:	08007b4d 	.word	0x08007b4d
 8007ab8:	08007b35 	.word	0x08007b35
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007abc:	f7fc fbec 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8007ac0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	005a      	lsls	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	085b      	lsrs	r3, r3, #1
 8007acc:	441a      	add	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	61bb      	str	r3, [r7, #24]
        break;
 8007ada:	e03a      	b.n	8007b52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007adc:	f7fc fbf0 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 8007ae0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	005a      	lsls	r2, r3, #1
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	085b      	lsrs	r3, r3, #1
 8007aec:	441a      	add	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	61bb      	str	r3, [r7, #24]
        break;
 8007afa:	e02a      	b.n	8007b52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	085a      	lsrs	r2, r3, #1
 8007b02:	4b5f      	ldr	r3, [pc, #380]	; (8007c80 <UART_SetConfig+0x54c>)
 8007b04:	4413      	add	r3, r2
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	6852      	ldr	r2, [r2, #4]
 8007b0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	61bb      	str	r3, [r7, #24]
        break;
 8007b12:	e01e      	b.n	8007b52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b14:	f7fc fb02 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8007b18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	005a      	lsls	r2, r3, #1
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	441a      	add	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	61bb      	str	r3, [r7, #24]
        break;
 8007b32:	e00e      	b.n	8007b52 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	085b      	lsrs	r3, r3, #1
 8007b3a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	61bb      	str	r3, [r7, #24]
        break;
 8007b4a:	e002      	b.n	8007b52 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	75fb      	strb	r3, [r7, #23]
        break;
 8007b50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	2b0f      	cmp	r3, #15
 8007b56:	d916      	bls.n	8007b86 <UART_SetConfig+0x452>
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5e:	d212      	bcs.n	8007b86 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f023 030f 	bic.w	r3, r3, #15
 8007b68:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b6a:	69bb      	ldr	r3, [r7, #24]
 8007b6c:	085b      	lsrs	r3, r3, #1
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	f003 0307 	and.w	r3, r3, #7
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	897b      	ldrh	r3, [r7, #10]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	897a      	ldrh	r2, [r7, #10]
 8007b82:	60da      	str	r2, [r3, #12]
 8007b84:	e070      	b.n	8007c68 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	75fb      	strb	r3, [r7, #23]
 8007b8a:	e06d      	b.n	8007c68 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8007b8c:	7ffb      	ldrb	r3, [r7, #31]
 8007b8e:	2b08      	cmp	r3, #8
 8007b90:	d859      	bhi.n	8007c46 <UART_SetConfig+0x512>
 8007b92:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x464>)
 8007b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bdb 	.word	0x08007bdb
 8007ba0:	08007bf9 	.word	0x08007bf9
 8007ba4:	08007c47 	.word	0x08007c47
 8007ba8:	08007c11 	.word	0x08007c11
 8007bac:	08007c47 	.word	0x08007c47
 8007bb0:	08007c47 	.word	0x08007c47
 8007bb4:	08007c47 	.word	0x08007c47
 8007bb8:	08007c2f 	.word	0x08007c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fc fb6c 	bl	8004298 <HAL_RCC_GetPCLK1Freq>
 8007bc0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	085a      	lsrs	r2, r3, #1
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	441a      	add	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	61bb      	str	r3, [r7, #24]
        break;
 8007bd8:	e038      	b.n	8007c4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bda:	f7fc fb71 	bl	80042c0 <HAL_RCC_GetPCLK2Freq>
 8007bde:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	085a      	lsrs	r2, r3, #1
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	441a      	add	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	61bb      	str	r3, [r7, #24]
        break;
 8007bf6:	e029      	b.n	8007c4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	085a      	lsrs	r2, r3, #1
 8007bfe:	4b21      	ldr	r3, [pc, #132]	; (8007c84 <UART_SetConfig+0x550>)
 8007c00:	4413      	add	r3, r2
 8007c02:	687a      	ldr	r2, [r7, #4]
 8007c04:	6852      	ldr	r2, [r2, #4]
 8007c06:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	61bb      	str	r3, [r7, #24]
        break;
 8007c0e:	e01d      	b.n	8007c4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c10:	f7fc fa84 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8007c14:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	085a      	lsrs	r2, r3, #1
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	441a      	add	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	61bb      	str	r3, [r7, #24]
        break;
 8007c2c:	e00e      	b.n	8007c4c <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	085b      	lsrs	r3, r3, #1
 8007c34:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	61bb      	str	r3, [r7, #24]
        break;
 8007c44:	e002      	b.n	8007c4c <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	75fb      	strb	r3, [r7, #23]
        break;
 8007c4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	2b0f      	cmp	r3, #15
 8007c50:	d908      	bls.n	8007c64 <UART_SetConfig+0x530>
 8007c52:	69bb      	ldr	r3, [r7, #24]
 8007c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c58:	d204      	bcs.n	8007c64 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	60da      	str	r2, [r3, #12]
 8007c62:	e001      	b.n	8007c68 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007c74:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	01e84800 	.word	0x01e84800
 8007c84:	00f42400 	.word	0x00f42400

08007c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d00a      	beq.n	8007cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	430a      	orrs	r2, r1
 8007cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	f003 0304 	and.w	r3, r3, #4
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00a      	beq.n	8007cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	f003 0308 	and.w	r3, r3, #8
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	f003 0310 	and.w	r3, r3, #16
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	f003 0320 	and.w	r3, r3, #32
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	689b      	ldr	r3, [r3, #8]
 8007d4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d01a      	beq.n	8007d9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d86:	d10a      	bne.n	8007d9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00a      	beq.n	8007dc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	605a      	str	r2, [r3, #4]
  }
}
 8007dc0:	bf00      	nop
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007dda:	f7fa fc03 	bl	80025e4 <HAL_GetTick>
 8007dde:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0308 	and.w	r3, r3, #8
 8007dea:	2b08      	cmp	r3, #8
 8007dec:	d10e      	bne.n	8007e0c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f82a 	bl	8007e56 <UART_WaitOnFlagUntilTimeout>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e020      	b.n	8007e4e <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0304 	and.w	r3, r3, #4
 8007e16:	2b04      	cmp	r3, #4
 8007e18:	d10e      	bne.n	8007e38 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e28:	6878      	ldr	r0, [r7, #4]
 8007e2a:	f000 f814 	bl	8007e56 <UART_WaitOnFlagUntilTimeout>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e34:	2303      	movs	r3, #3
 8007e36:	e00a      	b.n	8007e4e <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2220      	movs	r2, #32
 8007e42:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	603b      	str	r3, [r7, #0]
 8007e62:	4613      	mov	r3, r2
 8007e64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e66:	e05d      	b.n	8007f24 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e6e:	d059      	beq.n	8007f24 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e70:	f7fa fbb8 	bl	80025e4 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	69ba      	ldr	r2, [r7, #24]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d302      	bcc.n	8007e86 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d11b      	bne.n	8007ebe <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007e94:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689a      	ldr	r2, [r3, #8]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 0201 	bic.w	r2, r2, #1
 8007ea4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2220      	movs	r2, #32
 8007eaa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8007eba:	2303      	movs	r3, #3
 8007ebc:	e042      	b.n	8007f44 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d02b      	beq.n	8007f24 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69db      	ldr	r3, [r3, #28]
 8007ed2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ed6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eda:	d123      	bne.n	8007f24 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ee4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ef4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689a      	ldr	r2, [r3, #8]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0201 	bic.w	r2, r2, #1
 8007f04:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2220      	movs	r2, #32
 8007f10:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2220      	movs	r2, #32
 8007f16:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e00f      	b.n	8007f44 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69da      	ldr	r2, [r3, #28]
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	bf0c      	ite	eq
 8007f34:	2301      	moveq	r3, #1
 8007f36:	2300      	movne	r3, #0
 8007f38:	b2db      	uxtb	r3, r3
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	79fb      	ldrb	r3, [r7, #7]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d092      	beq.n	8007e68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f62:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689a      	ldr	r2, [r3, #8]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0201 	bic.w	r2, r2, #1
 8007f72:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2220      	movs	r2, #32
 8007f78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f7ff fbae 	bl	800770c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fb0:	bf00      	nop
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fce:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f7ff fb8b 	bl	80076f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ff8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ffe:	2b22      	cmp	r3, #34	; 0x22
 8008000:	d13a      	bne.n	8008078 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008008:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800800a:	89bb      	ldrh	r3, [r7, #12]
 800800c:	b2d9      	uxtb	r1, r3
 800800e:	89fb      	ldrh	r3, [r7, #14]
 8008010:	b2da      	uxtb	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008016:	400a      	ands	r2, r1
 8008018:	b2d2      	uxtb	r2, r2
 800801a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800803e:	b29b      	uxth	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d121      	bne.n	8008088 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008052:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f022 0201 	bic.w	r2, r2, #1
 8008062:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2220      	movs	r2, #32
 8008068:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7f9 fcb9 	bl	80019e8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008076:	e007      	b.n	8008088 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699a      	ldr	r2, [r3, #24]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0208 	orr.w	r2, r2, #8
 8008086:	619a      	str	r2, [r3, #24]
}
 8008088:	bf00      	nop
 800808a:	3710      	adds	r7, #16
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800809e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080a4:	2b22      	cmp	r3, #34	; 0x22
 80080a6:	d13a      	bne.n	800811e <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ae:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080b4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80080b6:	89ba      	ldrh	r2, [r7, #12]
 80080b8:	89fb      	ldrh	r3, [r7, #14]
 80080ba:	4013      	ands	r3, r2
 80080bc:	b29a      	uxth	r2, r3
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c6:	1c9a      	adds	r2, r3, #2
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	3b01      	subs	r3, #1
 80080d6:	b29a      	uxth	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d121      	bne.n	800812e <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080f8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689a      	ldr	r2, [r3, #8]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f022 0201 	bic.w	r2, r2, #1
 8008108:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2220      	movs	r2, #32
 800810e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7f9 fc66 	bl	80019e8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800811c:	e007      	b.n	800812e <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	699a      	ldr	r2, [r3, #24]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f042 0208 	orr.w	r2, r2, #8
 800812c:	619a      	str	r2, [r3, #24]
}
 800812e:	bf00      	nop
 8008130:	3710      	adds	r7, #16
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
	...

08008138 <__errno>:
 8008138:	4b01      	ldr	r3, [pc, #4]	; (8008140 <__errno+0x8>)
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop
 8008140:	20000010 	.word	0x20000010

08008144 <__libc_init_array>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	4e0d      	ldr	r6, [pc, #52]	; (800817c <__libc_init_array+0x38>)
 8008148:	4c0d      	ldr	r4, [pc, #52]	; (8008180 <__libc_init_array+0x3c>)
 800814a:	1ba4      	subs	r4, r4, r6
 800814c:	10a4      	asrs	r4, r4, #2
 800814e:	2500      	movs	r5, #0
 8008150:	42a5      	cmp	r5, r4
 8008152:	d109      	bne.n	8008168 <__libc_init_array+0x24>
 8008154:	4e0b      	ldr	r6, [pc, #44]	; (8008184 <__libc_init_array+0x40>)
 8008156:	4c0c      	ldr	r4, [pc, #48]	; (8008188 <__libc_init_array+0x44>)
 8008158:	f000 fc26 	bl	80089a8 <_init>
 800815c:	1ba4      	subs	r4, r4, r6
 800815e:	10a4      	asrs	r4, r4, #2
 8008160:	2500      	movs	r5, #0
 8008162:	42a5      	cmp	r5, r4
 8008164:	d105      	bne.n	8008172 <__libc_init_array+0x2e>
 8008166:	bd70      	pop	{r4, r5, r6, pc}
 8008168:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800816c:	4798      	blx	r3
 800816e:	3501      	adds	r5, #1
 8008170:	e7ee      	b.n	8008150 <__libc_init_array+0xc>
 8008172:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008176:	4798      	blx	r3
 8008178:	3501      	adds	r5, #1
 800817a:	e7f2      	b.n	8008162 <__libc_init_array+0x1e>
 800817c:	08008a28 	.word	0x08008a28
 8008180:	08008a28 	.word	0x08008a28
 8008184:	08008a28 	.word	0x08008a28
 8008188:	08008a2c 	.word	0x08008a2c

0800818c <memset>:
 800818c:	4402      	add	r2, r0
 800818e:	4603      	mov	r3, r0
 8008190:	4293      	cmp	r3, r2
 8008192:	d100      	bne.n	8008196 <memset+0xa>
 8008194:	4770      	bx	lr
 8008196:	f803 1b01 	strb.w	r1, [r3], #1
 800819a:	e7f9      	b.n	8008190 <memset+0x4>

0800819c <siprintf>:
 800819c:	b40e      	push	{r1, r2, r3}
 800819e:	b500      	push	{lr}
 80081a0:	b09c      	sub	sp, #112	; 0x70
 80081a2:	ab1d      	add	r3, sp, #116	; 0x74
 80081a4:	9002      	str	r0, [sp, #8]
 80081a6:	9006      	str	r0, [sp, #24]
 80081a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80081ac:	4809      	ldr	r0, [pc, #36]	; (80081d4 <siprintf+0x38>)
 80081ae:	9107      	str	r1, [sp, #28]
 80081b0:	9104      	str	r1, [sp, #16]
 80081b2:	4909      	ldr	r1, [pc, #36]	; (80081d8 <siprintf+0x3c>)
 80081b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80081b8:	9105      	str	r1, [sp, #20]
 80081ba:	6800      	ldr	r0, [r0, #0]
 80081bc:	9301      	str	r3, [sp, #4]
 80081be:	a902      	add	r1, sp, #8
 80081c0:	f000 f866 	bl	8008290 <_svfiprintf_r>
 80081c4:	9b02      	ldr	r3, [sp, #8]
 80081c6:	2200      	movs	r2, #0
 80081c8:	701a      	strb	r2, [r3, #0]
 80081ca:	b01c      	add	sp, #112	; 0x70
 80081cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80081d0:	b003      	add	sp, #12
 80081d2:	4770      	bx	lr
 80081d4:	20000010 	.word	0x20000010
 80081d8:	ffff0208 	.word	0xffff0208

080081dc <__ssputs_r>:
 80081dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	688e      	ldr	r6, [r1, #8]
 80081e2:	429e      	cmp	r6, r3
 80081e4:	4682      	mov	sl, r0
 80081e6:	460c      	mov	r4, r1
 80081e8:	4690      	mov	r8, r2
 80081ea:	4699      	mov	r9, r3
 80081ec:	d837      	bhi.n	800825e <__ssputs_r+0x82>
 80081ee:	898a      	ldrh	r2, [r1, #12]
 80081f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081f4:	d031      	beq.n	800825a <__ssputs_r+0x7e>
 80081f6:	6825      	ldr	r5, [r4, #0]
 80081f8:	6909      	ldr	r1, [r1, #16]
 80081fa:	1a6f      	subs	r7, r5, r1
 80081fc:	6965      	ldr	r5, [r4, #20]
 80081fe:	2302      	movs	r3, #2
 8008200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008204:	fb95 f5f3 	sdiv	r5, r5, r3
 8008208:	f109 0301 	add.w	r3, r9, #1
 800820c:	443b      	add	r3, r7
 800820e:	429d      	cmp	r5, r3
 8008210:	bf38      	it	cc
 8008212:	461d      	movcc	r5, r3
 8008214:	0553      	lsls	r3, r2, #21
 8008216:	d530      	bpl.n	800827a <__ssputs_r+0x9e>
 8008218:	4629      	mov	r1, r5
 800821a:	f000 fb2b 	bl	8008874 <_malloc_r>
 800821e:	4606      	mov	r6, r0
 8008220:	b950      	cbnz	r0, 8008238 <__ssputs_r+0x5c>
 8008222:	230c      	movs	r3, #12
 8008224:	f8ca 3000 	str.w	r3, [sl]
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800822e:	81a3      	strh	r3, [r4, #12]
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008238:	463a      	mov	r2, r7
 800823a:	6921      	ldr	r1, [r4, #16]
 800823c:	f000 faa8 	bl	8008790 <memcpy>
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800824a:	81a3      	strh	r3, [r4, #12]
 800824c:	6126      	str	r6, [r4, #16]
 800824e:	6165      	str	r5, [r4, #20]
 8008250:	443e      	add	r6, r7
 8008252:	1bed      	subs	r5, r5, r7
 8008254:	6026      	str	r6, [r4, #0]
 8008256:	60a5      	str	r5, [r4, #8]
 8008258:	464e      	mov	r6, r9
 800825a:	454e      	cmp	r6, r9
 800825c:	d900      	bls.n	8008260 <__ssputs_r+0x84>
 800825e:	464e      	mov	r6, r9
 8008260:	4632      	mov	r2, r6
 8008262:	4641      	mov	r1, r8
 8008264:	6820      	ldr	r0, [r4, #0]
 8008266:	f000 fa9e 	bl	80087a6 <memmove>
 800826a:	68a3      	ldr	r3, [r4, #8]
 800826c:	1b9b      	subs	r3, r3, r6
 800826e:	60a3      	str	r3, [r4, #8]
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	441e      	add	r6, r3
 8008274:	6026      	str	r6, [r4, #0]
 8008276:	2000      	movs	r0, #0
 8008278:	e7dc      	b.n	8008234 <__ssputs_r+0x58>
 800827a:	462a      	mov	r2, r5
 800827c:	f000 fb54 	bl	8008928 <_realloc_r>
 8008280:	4606      	mov	r6, r0
 8008282:	2800      	cmp	r0, #0
 8008284:	d1e2      	bne.n	800824c <__ssputs_r+0x70>
 8008286:	6921      	ldr	r1, [r4, #16]
 8008288:	4650      	mov	r0, sl
 800828a:	f000 faa5 	bl	80087d8 <_free_r>
 800828e:	e7c8      	b.n	8008222 <__ssputs_r+0x46>

08008290 <_svfiprintf_r>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	461d      	mov	r5, r3
 8008296:	898b      	ldrh	r3, [r1, #12]
 8008298:	061f      	lsls	r7, r3, #24
 800829a:	b09d      	sub	sp, #116	; 0x74
 800829c:	4680      	mov	r8, r0
 800829e:	460c      	mov	r4, r1
 80082a0:	4616      	mov	r6, r2
 80082a2:	d50f      	bpl.n	80082c4 <_svfiprintf_r+0x34>
 80082a4:	690b      	ldr	r3, [r1, #16]
 80082a6:	b96b      	cbnz	r3, 80082c4 <_svfiprintf_r+0x34>
 80082a8:	2140      	movs	r1, #64	; 0x40
 80082aa:	f000 fae3 	bl	8008874 <_malloc_r>
 80082ae:	6020      	str	r0, [r4, #0]
 80082b0:	6120      	str	r0, [r4, #16]
 80082b2:	b928      	cbnz	r0, 80082c0 <_svfiprintf_r+0x30>
 80082b4:	230c      	movs	r3, #12
 80082b6:	f8c8 3000 	str.w	r3, [r8]
 80082ba:	f04f 30ff 	mov.w	r0, #4294967295
 80082be:	e0c8      	b.n	8008452 <_svfiprintf_r+0x1c2>
 80082c0:	2340      	movs	r3, #64	; 0x40
 80082c2:	6163      	str	r3, [r4, #20]
 80082c4:	2300      	movs	r3, #0
 80082c6:	9309      	str	r3, [sp, #36]	; 0x24
 80082c8:	2320      	movs	r3, #32
 80082ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082ce:	2330      	movs	r3, #48	; 0x30
 80082d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082d4:	9503      	str	r5, [sp, #12]
 80082d6:	f04f 0b01 	mov.w	fp, #1
 80082da:	4637      	mov	r7, r6
 80082dc:	463d      	mov	r5, r7
 80082de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80082e2:	b10b      	cbz	r3, 80082e8 <_svfiprintf_r+0x58>
 80082e4:	2b25      	cmp	r3, #37	; 0x25
 80082e6:	d13e      	bne.n	8008366 <_svfiprintf_r+0xd6>
 80082e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80082ec:	d00b      	beq.n	8008306 <_svfiprintf_r+0x76>
 80082ee:	4653      	mov	r3, sl
 80082f0:	4632      	mov	r2, r6
 80082f2:	4621      	mov	r1, r4
 80082f4:	4640      	mov	r0, r8
 80082f6:	f7ff ff71 	bl	80081dc <__ssputs_r>
 80082fa:	3001      	adds	r0, #1
 80082fc:	f000 80a4 	beq.w	8008448 <_svfiprintf_r+0x1b8>
 8008300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008302:	4453      	add	r3, sl
 8008304:	9309      	str	r3, [sp, #36]	; 0x24
 8008306:	783b      	ldrb	r3, [r7, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 809d 	beq.w	8008448 <_svfiprintf_r+0x1b8>
 800830e:	2300      	movs	r3, #0
 8008310:	f04f 32ff 	mov.w	r2, #4294967295
 8008314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008318:	9304      	str	r3, [sp, #16]
 800831a:	9307      	str	r3, [sp, #28]
 800831c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008320:	931a      	str	r3, [sp, #104]	; 0x68
 8008322:	462f      	mov	r7, r5
 8008324:	2205      	movs	r2, #5
 8008326:	f817 1b01 	ldrb.w	r1, [r7], #1
 800832a:	4850      	ldr	r0, [pc, #320]	; (800846c <_svfiprintf_r+0x1dc>)
 800832c:	f7f7 ff90 	bl	8000250 <memchr>
 8008330:	9b04      	ldr	r3, [sp, #16]
 8008332:	b9d0      	cbnz	r0, 800836a <_svfiprintf_r+0xda>
 8008334:	06d9      	lsls	r1, r3, #27
 8008336:	bf44      	itt	mi
 8008338:	2220      	movmi	r2, #32
 800833a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800833e:	071a      	lsls	r2, r3, #28
 8008340:	bf44      	itt	mi
 8008342:	222b      	movmi	r2, #43	; 0x2b
 8008344:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008348:	782a      	ldrb	r2, [r5, #0]
 800834a:	2a2a      	cmp	r2, #42	; 0x2a
 800834c:	d015      	beq.n	800837a <_svfiprintf_r+0xea>
 800834e:	9a07      	ldr	r2, [sp, #28]
 8008350:	462f      	mov	r7, r5
 8008352:	2000      	movs	r0, #0
 8008354:	250a      	movs	r5, #10
 8008356:	4639      	mov	r1, r7
 8008358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800835c:	3b30      	subs	r3, #48	; 0x30
 800835e:	2b09      	cmp	r3, #9
 8008360:	d94d      	bls.n	80083fe <_svfiprintf_r+0x16e>
 8008362:	b1b8      	cbz	r0, 8008394 <_svfiprintf_r+0x104>
 8008364:	e00f      	b.n	8008386 <_svfiprintf_r+0xf6>
 8008366:	462f      	mov	r7, r5
 8008368:	e7b8      	b.n	80082dc <_svfiprintf_r+0x4c>
 800836a:	4a40      	ldr	r2, [pc, #256]	; (800846c <_svfiprintf_r+0x1dc>)
 800836c:	1a80      	subs	r0, r0, r2
 800836e:	fa0b f000 	lsl.w	r0, fp, r0
 8008372:	4318      	orrs	r0, r3
 8008374:	9004      	str	r0, [sp, #16]
 8008376:	463d      	mov	r5, r7
 8008378:	e7d3      	b.n	8008322 <_svfiprintf_r+0x92>
 800837a:	9a03      	ldr	r2, [sp, #12]
 800837c:	1d11      	adds	r1, r2, #4
 800837e:	6812      	ldr	r2, [r2, #0]
 8008380:	9103      	str	r1, [sp, #12]
 8008382:	2a00      	cmp	r2, #0
 8008384:	db01      	blt.n	800838a <_svfiprintf_r+0xfa>
 8008386:	9207      	str	r2, [sp, #28]
 8008388:	e004      	b.n	8008394 <_svfiprintf_r+0x104>
 800838a:	4252      	negs	r2, r2
 800838c:	f043 0302 	orr.w	r3, r3, #2
 8008390:	9207      	str	r2, [sp, #28]
 8008392:	9304      	str	r3, [sp, #16]
 8008394:	783b      	ldrb	r3, [r7, #0]
 8008396:	2b2e      	cmp	r3, #46	; 0x2e
 8008398:	d10c      	bne.n	80083b4 <_svfiprintf_r+0x124>
 800839a:	787b      	ldrb	r3, [r7, #1]
 800839c:	2b2a      	cmp	r3, #42	; 0x2a
 800839e:	d133      	bne.n	8008408 <_svfiprintf_r+0x178>
 80083a0:	9b03      	ldr	r3, [sp, #12]
 80083a2:	1d1a      	adds	r2, r3, #4
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	9203      	str	r2, [sp, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bfb8      	it	lt
 80083ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80083b0:	3702      	adds	r7, #2
 80083b2:	9305      	str	r3, [sp, #20]
 80083b4:	4d2e      	ldr	r5, [pc, #184]	; (8008470 <_svfiprintf_r+0x1e0>)
 80083b6:	7839      	ldrb	r1, [r7, #0]
 80083b8:	2203      	movs	r2, #3
 80083ba:	4628      	mov	r0, r5
 80083bc:	f7f7 ff48 	bl	8000250 <memchr>
 80083c0:	b138      	cbz	r0, 80083d2 <_svfiprintf_r+0x142>
 80083c2:	2340      	movs	r3, #64	; 0x40
 80083c4:	1b40      	subs	r0, r0, r5
 80083c6:	fa03 f000 	lsl.w	r0, r3, r0
 80083ca:	9b04      	ldr	r3, [sp, #16]
 80083cc:	4303      	orrs	r3, r0
 80083ce:	3701      	adds	r7, #1
 80083d0:	9304      	str	r3, [sp, #16]
 80083d2:	7839      	ldrb	r1, [r7, #0]
 80083d4:	4827      	ldr	r0, [pc, #156]	; (8008474 <_svfiprintf_r+0x1e4>)
 80083d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083da:	2206      	movs	r2, #6
 80083dc:	1c7e      	adds	r6, r7, #1
 80083de:	f7f7 ff37 	bl	8000250 <memchr>
 80083e2:	2800      	cmp	r0, #0
 80083e4:	d038      	beq.n	8008458 <_svfiprintf_r+0x1c8>
 80083e6:	4b24      	ldr	r3, [pc, #144]	; (8008478 <_svfiprintf_r+0x1e8>)
 80083e8:	bb13      	cbnz	r3, 8008430 <_svfiprintf_r+0x1a0>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	3307      	adds	r3, #7
 80083ee:	f023 0307 	bic.w	r3, r3, #7
 80083f2:	3308      	adds	r3, #8
 80083f4:	9303      	str	r3, [sp, #12]
 80083f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f8:	444b      	add	r3, r9
 80083fa:	9309      	str	r3, [sp, #36]	; 0x24
 80083fc:	e76d      	b.n	80082da <_svfiprintf_r+0x4a>
 80083fe:	fb05 3202 	mla	r2, r5, r2, r3
 8008402:	2001      	movs	r0, #1
 8008404:	460f      	mov	r7, r1
 8008406:	e7a6      	b.n	8008356 <_svfiprintf_r+0xc6>
 8008408:	2300      	movs	r3, #0
 800840a:	3701      	adds	r7, #1
 800840c:	9305      	str	r3, [sp, #20]
 800840e:	4619      	mov	r1, r3
 8008410:	250a      	movs	r5, #10
 8008412:	4638      	mov	r0, r7
 8008414:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008418:	3a30      	subs	r2, #48	; 0x30
 800841a:	2a09      	cmp	r2, #9
 800841c:	d903      	bls.n	8008426 <_svfiprintf_r+0x196>
 800841e:	2b00      	cmp	r3, #0
 8008420:	d0c8      	beq.n	80083b4 <_svfiprintf_r+0x124>
 8008422:	9105      	str	r1, [sp, #20]
 8008424:	e7c6      	b.n	80083b4 <_svfiprintf_r+0x124>
 8008426:	fb05 2101 	mla	r1, r5, r1, r2
 800842a:	2301      	movs	r3, #1
 800842c:	4607      	mov	r7, r0
 800842e:	e7f0      	b.n	8008412 <_svfiprintf_r+0x182>
 8008430:	ab03      	add	r3, sp, #12
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	4622      	mov	r2, r4
 8008436:	4b11      	ldr	r3, [pc, #68]	; (800847c <_svfiprintf_r+0x1ec>)
 8008438:	a904      	add	r1, sp, #16
 800843a:	4640      	mov	r0, r8
 800843c:	f3af 8000 	nop.w
 8008440:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008444:	4681      	mov	r9, r0
 8008446:	d1d6      	bne.n	80083f6 <_svfiprintf_r+0x166>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	065b      	lsls	r3, r3, #25
 800844c:	f53f af35 	bmi.w	80082ba <_svfiprintf_r+0x2a>
 8008450:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008452:	b01d      	add	sp, #116	; 0x74
 8008454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008458:	ab03      	add	r3, sp, #12
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	4622      	mov	r2, r4
 800845e:	4b07      	ldr	r3, [pc, #28]	; (800847c <_svfiprintf_r+0x1ec>)
 8008460:	a904      	add	r1, sp, #16
 8008462:	4640      	mov	r0, r8
 8008464:	f000 f882 	bl	800856c <_printf_i>
 8008468:	e7ea      	b.n	8008440 <_svfiprintf_r+0x1b0>
 800846a:	bf00      	nop
 800846c:	080089ec 	.word	0x080089ec
 8008470:	080089f2 	.word	0x080089f2
 8008474:	080089f6 	.word	0x080089f6
 8008478:	00000000 	.word	0x00000000
 800847c:	080081dd 	.word	0x080081dd

08008480 <_printf_common>:
 8008480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	4691      	mov	r9, r2
 8008486:	461f      	mov	r7, r3
 8008488:	688a      	ldr	r2, [r1, #8]
 800848a:	690b      	ldr	r3, [r1, #16]
 800848c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008490:	4293      	cmp	r3, r2
 8008492:	bfb8      	it	lt
 8008494:	4613      	movlt	r3, r2
 8008496:	f8c9 3000 	str.w	r3, [r9]
 800849a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800849e:	4606      	mov	r6, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	b112      	cbz	r2, 80084aa <_printf_common+0x2a>
 80084a4:	3301      	adds	r3, #1
 80084a6:	f8c9 3000 	str.w	r3, [r9]
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	0699      	lsls	r1, r3, #26
 80084ae:	bf42      	ittt	mi
 80084b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80084b4:	3302      	addmi	r3, #2
 80084b6:	f8c9 3000 	strmi.w	r3, [r9]
 80084ba:	6825      	ldr	r5, [r4, #0]
 80084bc:	f015 0506 	ands.w	r5, r5, #6
 80084c0:	d107      	bne.n	80084d2 <_printf_common+0x52>
 80084c2:	f104 0a19 	add.w	sl, r4, #25
 80084c6:	68e3      	ldr	r3, [r4, #12]
 80084c8:	f8d9 2000 	ldr.w	r2, [r9]
 80084cc:	1a9b      	subs	r3, r3, r2
 80084ce:	42ab      	cmp	r3, r5
 80084d0:	dc28      	bgt.n	8008524 <_printf_common+0xa4>
 80084d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80084d6:	6822      	ldr	r2, [r4, #0]
 80084d8:	3300      	adds	r3, #0
 80084da:	bf18      	it	ne
 80084dc:	2301      	movne	r3, #1
 80084de:	0692      	lsls	r2, r2, #26
 80084e0:	d42d      	bmi.n	800853e <_printf_common+0xbe>
 80084e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084e6:	4639      	mov	r1, r7
 80084e8:	4630      	mov	r0, r6
 80084ea:	47c0      	blx	r8
 80084ec:	3001      	adds	r0, #1
 80084ee:	d020      	beq.n	8008532 <_printf_common+0xb2>
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	68e5      	ldr	r5, [r4, #12]
 80084f4:	f8d9 2000 	ldr.w	r2, [r9]
 80084f8:	f003 0306 	and.w	r3, r3, #6
 80084fc:	2b04      	cmp	r3, #4
 80084fe:	bf08      	it	eq
 8008500:	1aad      	subeq	r5, r5, r2
 8008502:	68a3      	ldr	r3, [r4, #8]
 8008504:	6922      	ldr	r2, [r4, #16]
 8008506:	bf0c      	ite	eq
 8008508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800850c:	2500      	movne	r5, #0
 800850e:	4293      	cmp	r3, r2
 8008510:	bfc4      	itt	gt
 8008512:	1a9b      	subgt	r3, r3, r2
 8008514:	18ed      	addgt	r5, r5, r3
 8008516:	f04f 0900 	mov.w	r9, #0
 800851a:	341a      	adds	r4, #26
 800851c:	454d      	cmp	r5, r9
 800851e:	d11a      	bne.n	8008556 <_printf_common+0xd6>
 8008520:	2000      	movs	r0, #0
 8008522:	e008      	b.n	8008536 <_printf_common+0xb6>
 8008524:	2301      	movs	r3, #1
 8008526:	4652      	mov	r2, sl
 8008528:	4639      	mov	r1, r7
 800852a:	4630      	mov	r0, r6
 800852c:	47c0      	blx	r8
 800852e:	3001      	adds	r0, #1
 8008530:	d103      	bne.n	800853a <_printf_common+0xba>
 8008532:	f04f 30ff 	mov.w	r0, #4294967295
 8008536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853a:	3501      	adds	r5, #1
 800853c:	e7c3      	b.n	80084c6 <_printf_common+0x46>
 800853e:	18e1      	adds	r1, r4, r3
 8008540:	1c5a      	adds	r2, r3, #1
 8008542:	2030      	movs	r0, #48	; 0x30
 8008544:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008548:	4422      	add	r2, r4
 800854a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800854e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008552:	3302      	adds	r3, #2
 8008554:	e7c5      	b.n	80084e2 <_printf_common+0x62>
 8008556:	2301      	movs	r3, #1
 8008558:	4622      	mov	r2, r4
 800855a:	4639      	mov	r1, r7
 800855c:	4630      	mov	r0, r6
 800855e:	47c0      	blx	r8
 8008560:	3001      	adds	r0, #1
 8008562:	d0e6      	beq.n	8008532 <_printf_common+0xb2>
 8008564:	f109 0901 	add.w	r9, r9, #1
 8008568:	e7d8      	b.n	800851c <_printf_common+0x9c>
	...

0800856c <_printf_i>:
 800856c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008570:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008574:	460c      	mov	r4, r1
 8008576:	7e09      	ldrb	r1, [r1, #24]
 8008578:	b085      	sub	sp, #20
 800857a:	296e      	cmp	r1, #110	; 0x6e
 800857c:	4617      	mov	r7, r2
 800857e:	4606      	mov	r6, r0
 8008580:	4698      	mov	r8, r3
 8008582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008584:	f000 80b3 	beq.w	80086ee <_printf_i+0x182>
 8008588:	d822      	bhi.n	80085d0 <_printf_i+0x64>
 800858a:	2963      	cmp	r1, #99	; 0x63
 800858c:	d036      	beq.n	80085fc <_printf_i+0x90>
 800858e:	d80a      	bhi.n	80085a6 <_printf_i+0x3a>
 8008590:	2900      	cmp	r1, #0
 8008592:	f000 80b9 	beq.w	8008708 <_printf_i+0x19c>
 8008596:	2958      	cmp	r1, #88	; 0x58
 8008598:	f000 8083 	beq.w	80086a2 <_printf_i+0x136>
 800859c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80085a4:	e032      	b.n	800860c <_printf_i+0xa0>
 80085a6:	2964      	cmp	r1, #100	; 0x64
 80085a8:	d001      	beq.n	80085ae <_printf_i+0x42>
 80085aa:	2969      	cmp	r1, #105	; 0x69
 80085ac:	d1f6      	bne.n	800859c <_printf_i+0x30>
 80085ae:	6820      	ldr	r0, [r4, #0]
 80085b0:	6813      	ldr	r3, [r2, #0]
 80085b2:	0605      	lsls	r5, r0, #24
 80085b4:	f103 0104 	add.w	r1, r3, #4
 80085b8:	d52a      	bpl.n	8008610 <_printf_i+0xa4>
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	6011      	str	r1, [r2, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	da03      	bge.n	80085ca <_printf_i+0x5e>
 80085c2:	222d      	movs	r2, #45	; 0x2d
 80085c4:	425b      	negs	r3, r3
 80085c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80085ca:	486f      	ldr	r0, [pc, #444]	; (8008788 <_printf_i+0x21c>)
 80085cc:	220a      	movs	r2, #10
 80085ce:	e039      	b.n	8008644 <_printf_i+0xd8>
 80085d0:	2973      	cmp	r1, #115	; 0x73
 80085d2:	f000 809d 	beq.w	8008710 <_printf_i+0x1a4>
 80085d6:	d808      	bhi.n	80085ea <_printf_i+0x7e>
 80085d8:	296f      	cmp	r1, #111	; 0x6f
 80085da:	d020      	beq.n	800861e <_printf_i+0xb2>
 80085dc:	2970      	cmp	r1, #112	; 0x70
 80085de:	d1dd      	bne.n	800859c <_printf_i+0x30>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	f043 0320 	orr.w	r3, r3, #32
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	e003      	b.n	80085f2 <_printf_i+0x86>
 80085ea:	2975      	cmp	r1, #117	; 0x75
 80085ec:	d017      	beq.n	800861e <_printf_i+0xb2>
 80085ee:	2978      	cmp	r1, #120	; 0x78
 80085f0:	d1d4      	bne.n	800859c <_printf_i+0x30>
 80085f2:	2378      	movs	r3, #120	; 0x78
 80085f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80085f8:	4864      	ldr	r0, [pc, #400]	; (800878c <_printf_i+0x220>)
 80085fa:	e055      	b.n	80086a8 <_printf_i+0x13c>
 80085fc:	6813      	ldr	r3, [r2, #0]
 80085fe:	1d19      	adds	r1, r3, #4
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6011      	str	r1, [r2, #0]
 8008604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800860c:	2301      	movs	r3, #1
 800860e:	e08c      	b.n	800872a <_printf_i+0x1be>
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6011      	str	r1, [r2, #0]
 8008614:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008618:	bf18      	it	ne
 800861a:	b21b      	sxthne	r3, r3
 800861c:	e7cf      	b.n	80085be <_printf_i+0x52>
 800861e:	6813      	ldr	r3, [r2, #0]
 8008620:	6825      	ldr	r5, [r4, #0]
 8008622:	1d18      	adds	r0, r3, #4
 8008624:	6010      	str	r0, [r2, #0]
 8008626:	0628      	lsls	r0, r5, #24
 8008628:	d501      	bpl.n	800862e <_printf_i+0xc2>
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	e002      	b.n	8008634 <_printf_i+0xc8>
 800862e:	0668      	lsls	r0, r5, #25
 8008630:	d5fb      	bpl.n	800862a <_printf_i+0xbe>
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	4854      	ldr	r0, [pc, #336]	; (8008788 <_printf_i+0x21c>)
 8008636:	296f      	cmp	r1, #111	; 0x6f
 8008638:	bf14      	ite	ne
 800863a:	220a      	movne	r2, #10
 800863c:	2208      	moveq	r2, #8
 800863e:	2100      	movs	r1, #0
 8008640:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008644:	6865      	ldr	r5, [r4, #4]
 8008646:	60a5      	str	r5, [r4, #8]
 8008648:	2d00      	cmp	r5, #0
 800864a:	f2c0 8095 	blt.w	8008778 <_printf_i+0x20c>
 800864e:	6821      	ldr	r1, [r4, #0]
 8008650:	f021 0104 	bic.w	r1, r1, #4
 8008654:	6021      	str	r1, [r4, #0]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d13d      	bne.n	80086d6 <_printf_i+0x16a>
 800865a:	2d00      	cmp	r5, #0
 800865c:	f040 808e 	bne.w	800877c <_printf_i+0x210>
 8008660:	4665      	mov	r5, ip
 8008662:	2a08      	cmp	r2, #8
 8008664:	d10b      	bne.n	800867e <_printf_i+0x112>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	07db      	lsls	r3, r3, #31
 800866a:	d508      	bpl.n	800867e <_printf_i+0x112>
 800866c:	6923      	ldr	r3, [r4, #16]
 800866e:	6862      	ldr	r2, [r4, #4]
 8008670:	429a      	cmp	r2, r3
 8008672:	bfde      	ittt	le
 8008674:	2330      	movle	r3, #48	; 0x30
 8008676:	f805 3c01 	strble.w	r3, [r5, #-1]
 800867a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800867e:	ebac 0305 	sub.w	r3, ip, r5
 8008682:	6123      	str	r3, [r4, #16]
 8008684:	f8cd 8000 	str.w	r8, [sp]
 8008688:	463b      	mov	r3, r7
 800868a:	aa03      	add	r2, sp, #12
 800868c:	4621      	mov	r1, r4
 800868e:	4630      	mov	r0, r6
 8008690:	f7ff fef6 	bl	8008480 <_printf_common>
 8008694:	3001      	adds	r0, #1
 8008696:	d14d      	bne.n	8008734 <_printf_i+0x1c8>
 8008698:	f04f 30ff 	mov.w	r0, #4294967295
 800869c:	b005      	add	sp, #20
 800869e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086a2:	4839      	ldr	r0, [pc, #228]	; (8008788 <_printf_i+0x21c>)
 80086a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80086a8:	6813      	ldr	r3, [r2, #0]
 80086aa:	6821      	ldr	r1, [r4, #0]
 80086ac:	1d1d      	adds	r5, r3, #4
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	6015      	str	r5, [r2, #0]
 80086b2:	060a      	lsls	r2, r1, #24
 80086b4:	d50b      	bpl.n	80086ce <_printf_i+0x162>
 80086b6:	07ca      	lsls	r2, r1, #31
 80086b8:	bf44      	itt	mi
 80086ba:	f041 0120 	orrmi.w	r1, r1, #32
 80086be:	6021      	strmi	r1, [r4, #0]
 80086c0:	b91b      	cbnz	r3, 80086ca <_printf_i+0x15e>
 80086c2:	6822      	ldr	r2, [r4, #0]
 80086c4:	f022 0220 	bic.w	r2, r2, #32
 80086c8:	6022      	str	r2, [r4, #0]
 80086ca:	2210      	movs	r2, #16
 80086cc:	e7b7      	b.n	800863e <_printf_i+0xd2>
 80086ce:	064d      	lsls	r5, r1, #25
 80086d0:	bf48      	it	mi
 80086d2:	b29b      	uxthmi	r3, r3
 80086d4:	e7ef      	b.n	80086b6 <_printf_i+0x14a>
 80086d6:	4665      	mov	r5, ip
 80086d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80086dc:	fb02 3311 	mls	r3, r2, r1, r3
 80086e0:	5cc3      	ldrb	r3, [r0, r3]
 80086e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80086e6:	460b      	mov	r3, r1
 80086e8:	2900      	cmp	r1, #0
 80086ea:	d1f5      	bne.n	80086d8 <_printf_i+0x16c>
 80086ec:	e7b9      	b.n	8008662 <_printf_i+0xf6>
 80086ee:	6813      	ldr	r3, [r2, #0]
 80086f0:	6825      	ldr	r5, [r4, #0]
 80086f2:	6961      	ldr	r1, [r4, #20]
 80086f4:	1d18      	adds	r0, r3, #4
 80086f6:	6010      	str	r0, [r2, #0]
 80086f8:	0628      	lsls	r0, r5, #24
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	d501      	bpl.n	8008702 <_printf_i+0x196>
 80086fe:	6019      	str	r1, [r3, #0]
 8008700:	e002      	b.n	8008708 <_printf_i+0x19c>
 8008702:	066a      	lsls	r2, r5, #25
 8008704:	d5fb      	bpl.n	80086fe <_printf_i+0x192>
 8008706:	8019      	strh	r1, [r3, #0]
 8008708:	2300      	movs	r3, #0
 800870a:	6123      	str	r3, [r4, #16]
 800870c:	4665      	mov	r5, ip
 800870e:	e7b9      	b.n	8008684 <_printf_i+0x118>
 8008710:	6813      	ldr	r3, [r2, #0]
 8008712:	1d19      	adds	r1, r3, #4
 8008714:	6011      	str	r1, [r2, #0]
 8008716:	681d      	ldr	r5, [r3, #0]
 8008718:	6862      	ldr	r2, [r4, #4]
 800871a:	2100      	movs	r1, #0
 800871c:	4628      	mov	r0, r5
 800871e:	f7f7 fd97 	bl	8000250 <memchr>
 8008722:	b108      	cbz	r0, 8008728 <_printf_i+0x1bc>
 8008724:	1b40      	subs	r0, r0, r5
 8008726:	6060      	str	r0, [r4, #4]
 8008728:	6863      	ldr	r3, [r4, #4]
 800872a:	6123      	str	r3, [r4, #16]
 800872c:	2300      	movs	r3, #0
 800872e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008732:	e7a7      	b.n	8008684 <_printf_i+0x118>
 8008734:	6923      	ldr	r3, [r4, #16]
 8008736:	462a      	mov	r2, r5
 8008738:	4639      	mov	r1, r7
 800873a:	4630      	mov	r0, r6
 800873c:	47c0      	blx	r8
 800873e:	3001      	adds	r0, #1
 8008740:	d0aa      	beq.n	8008698 <_printf_i+0x12c>
 8008742:	6823      	ldr	r3, [r4, #0]
 8008744:	079b      	lsls	r3, r3, #30
 8008746:	d413      	bmi.n	8008770 <_printf_i+0x204>
 8008748:	68e0      	ldr	r0, [r4, #12]
 800874a:	9b03      	ldr	r3, [sp, #12]
 800874c:	4298      	cmp	r0, r3
 800874e:	bfb8      	it	lt
 8008750:	4618      	movlt	r0, r3
 8008752:	e7a3      	b.n	800869c <_printf_i+0x130>
 8008754:	2301      	movs	r3, #1
 8008756:	464a      	mov	r2, r9
 8008758:	4639      	mov	r1, r7
 800875a:	4630      	mov	r0, r6
 800875c:	47c0      	blx	r8
 800875e:	3001      	adds	r0, #1
 8008760:	d09a      	beq.n	8008698 <_printf_i+0x12c>
 8008762:	3501      	adds	r5, #1
 8008764:	68e3      	ldr	r3, [r4, #12]
 8008766:	9a03      	ldr	r2, [sp, #12]
 8008768:	1a9b      	subs	r3, r3, r2
 800876a:	42ab      	cmp	r3, r5
 800876c:	dcf2      	bgt.n	8008754 <_printf_i+0x1e8>
 800876e:	e7eb      	b.n	8008748 <_printf_i+0x1dc>
 8008770:	2500      	movs	r5, #0
 8008772:	f104 0919 	add.w	r9, r4, #25
 8008776:	e7f5      	b.n	8008764 <_printf_i+0x1f8>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1ac      	bne.n	80086d6 <_printf_i+0x16a>
 800877c:	7803      	ldrb	r3, [r0, #0]
 800877e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008782:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008786:	e76c      	b.n	8008662 <_printf_i+0xf6>
 8008788:	080089fd 	.word	0x080089fd
 800878c:	08008a0e 	.word	0x08008a0e

08008790 <memcpy>:
 8008790:	b510      	push	{r4, lr}
 8008792:	1e43      	subs	r3, r0, #1
 8008794:	440a      	add	r2, r1
 8008796:	4291      	cmp	r1, r2
 8008798:	d100      	bne.n	800879c <memcpy+0xc>
 800879a:	bd10      	pop	{r4, pc}
 800879c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087a4:	e7f7      	b.n	8008796 <memcpy+0x6>

080087a6 <memmove>:
 80087a6:	4288      	cmp	r0, r1
 80087a8:	b510      	push	{r4, lr}
 80087aa:	eb01 0302 	add.w	r3, r1, r2
 80087ae:	d807      	bhi.n	80087c0 <memmove+0x1a>
 80087b0:	1e42      	subs	r2, r0, #1
 80087b2:	4299      	cmp	r1, r3
 80087b4:	d00a      	beq.n	80087cc <memmove+0x26>
 80087b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ba:	f802 4f01 	strb.w	r4, [r2, #1]!
 80087be:	e7f8      	b.n	80087b2 <memmove+0xc>
 80087c0:	4283      	cmp	r3, r0
 80087c2:	d9f5      	bls.n	80087b0 <memmove+0xa>
 80087c4:	1881      	adds	r1, r0, r2
 80087c6:	1ad2      	subs	r2, r2, r3
 80087c8:	42d3      	cmn	r3, r2
 80087ca:	d100      	bne.n	80087ce <memmove+0x28>
 80087cc:	bd10      	pop	{r4, pc}
 80087ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80087d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80087d6:	e7f7      	b.n	80087c8 <memmove+0x22>

080087d8 <_free_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4605      	mov	r5, r0
 80087dc:	2900      	cmp	r1, #0
 80087de:	d045      	beq.n	800886c <_free_r+0x94>
 80087e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e4:	1f0c      	subs	r4, r1, #4
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	bfb8      	it	lt
 80087ea:	18e4      	addlt	r4, r4, r3
 80087ec:	f000 f8d2 	bl	8008994 <__malloc_lock>
 80087f0:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <_free_r+0x98>)
 80087f2:	6813      	ldr	r3, [r2, #0]
 80087f4:	4610      	mov	r0, r2
 80087f6:	b933      	cbnz	r3, 8008806 <_free_r+0x2e>
 80087f8:	6063      	str	r3, [r4, #4]
 80087fa:	6014      	str	r4, [r2, #0]
 80087fc:	4628      	mov	r0, r5
 80087fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008802:	f000 b8c8 	b.w	8008996 <__malloc_unlock>
 8008806:	42a3      	cmp	r3, r4
 8008808:	d90c      	bls.n	8008824 <_free_r+0x4c>
 800880a:	6821      	ldr	r1, [r4, #0]
 800880c:	1862      	adds	r2, r4, r1
 800880e:	4293      	cmp	r3, r2
 8008810:	bf04      	itt	eq
 8008812:	681a      	ldreq	r2, [r3, #0]
 8008814:	685b      	ldreq	r3, [r3, #4]
 8008816:	6063      	str	r3, [r4, #4]
 8008818:	bf04      	itt	eq
 800881a:	1852      	addeq	r2, r2, r1
 800881c:	6022      	streq	r2, [r4, #0]
 800881e:	6004      	str	r4, [r0, #0]
 8008820:	e7ec      	b.n	80087fc <_free_r+0x24>
 8008822:	4613      	mov	r3, r2
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	b10a      	cbz	r2, 800882c <_free_r+0x54>
 8008828:	42a2      	cmp	r2, r4
 800882a:	d9fa      	bls.n	8008822 <_free_r+0x4a>
 800882c:	6819      	ldr	r1, [r3, #0]
 800882e:	1858      	adds	r0, r3, r1
 8008830:	42a0      	cmp	r0, r4
 8008832:	d10b      	bne.n	800884c <_free_r+0x74>
 8008834:	6820      	ldr	r0, [r4, #0]
 8008836:	4401      	add	r1, r0
 8008838:	1858      	adds	r0, r3, r1
 800883a:	4282      	cmp	r2, r0
 800883c:	6019      	str	r1, [r3, #0]
 800883e:	d1dd      	bne.n	80087fc <_free_r+0x24>
 8008840:	6810      	ldr	r0, [r2, #0]
 8008842:	6852      	ldr	r2, [r2, #4]
 8008844:	605a      	str	r2, [r3, #4]
 8008846:	4401      	add	r1, r0
 8008848:	6019      	str	r1, [r3, #0]
 800884a:	e7d7      	b.n	80087fc <_free_r+0x24>
 800884c:	d902      	bls.n	8008854 <_free_r+0x7c>
 800884e:	230c      	movs	r3, #12
 8008850:	602b      	str	r3, [r5, #0]
 8008852:	e7d3      	b.n	80087fc <_free_r+0x24>
 8008854:	6820      	ldr	r0, [r4, #0]
 8008856:	1821      	adds	r1, r4, r0
 8008858:	428a      	cmp	r2, r1
 800885a:	bf04      	itt	eq
 800885c:	6811      	ldreq	r1, [r2, #0]
 800885e:	6852      	ldreq	r2, [r2, #4]
 8008860:	6062      	str	r2, [r4, #4]
 8008862:	bf04      	itt	eq
 8008864:	1809      	addeq	r1, r1, r0
 8008866:	6021      	streq	r1, [r4, #0]
 8008868:	605c      	str	r4, [r3, #4]
 800886a:	e7c7      	b.n	80087fc <_free_r+0x24>
 800886c:	bd38      	pop	{r3, r4, r5, pc}
 800886e:	bf00      	nop
 8008870:	200000b0 	.word	0x200000b0

08008874 <_malloc_r>:
 8008874:	b570      	push	{r4, r5, r6, lr}
 8008876:	1ccd      	adds	r5, r1, #3
 8008878:	f025 0503 	bic.w	r5, r5, #3
 800887c:	3508      	adds	r5, #8
 800887e:	2d0c      	cmp	r5, #12
 8008880:	bf38      	it	cc
 8008882:	250c      	movcc	r5, #12
 8008884:	2d00      	cmp	r5, #0
 8008886:	4606      	mov	r6, r0
 8008888:	db01      	blt.n	800888e <_malloc_r+0x1a>
 800888a:	42a9      	cmp	r1, r5
 800888c:	d903      	bls.n	8008896 <_malloc_r+0x22>
 800888e:	230c      	movs	r3, #12
 8008890:	6033      	str	r3, [r6, #0]
 8008892:	2000      	movs	r0, #0
 8008894:	bd70      	pop	{r4, r5, r6, pc}
 8008896:	f000 f87d 	bl	8008994 <__malloc_lock>
 800889a:	4a21      	ldr	r2, [pc, #132]	; (8008920 <_malloc_r+0xac>)
 800889c:	6814      	ldr	r4, [r2, #0]
 800889e:	4621      	mov	r1, r4
 80088a0:	b991      	cbnz	r1, 80088c8 <_malloc_r+0x54>
 80088a2:	4c20      	ldr	r4, [pc, #128]	; (8008924 <_malloc_r+0xb0>)
 80088a4:	6823      	ldr	r3, [r4, #0]
 80088a6:	b91b      	cbnz	r3, 80088b0 <_malloc_r+0x3c>
 80088a8:	4630      	mov	r0, r6
 80088aa:	f000 f863 	bl	8008974 <_sbrk_r>
 80088ae:	6020      	str	r0, [r4, #0]
 80088b0:	4629      	mov	r1, r5
 80088b2:	4630      	mov	r0, r6
 80088b4:	f000 f85e 	bl	8008974 <_sbrk_r>
 80088b8:	1c43      	adds	r3, r0, #1
 80088ba:	d124      	bne.n	8008906 <_malloc_r+0x92>
 80088bc:	230c      	movs	r3, #12
 80088be:	6033      	str	r3, [r6, #0]
 80088c0:	4630      	mov	r0, r6
 80088c2:	f000 f868 	bl	8008996 <__malloc_unlock>
 80088c6:	e7e4      	b.n	8008892 <_malloc_r+0x1e>
 80088c8:	680b      	ldr	r3, [r1, #0]
 80088ca:	1b5b      	subs	r3, r3, r5
 80088cc:	d418      	bmi.n	8008900 <_malloc_r+0x8c>
 80088ce:	2b0b      	cmp	r3, #11
 80088d0:	d90f      	bls.n	80088f2 <_malloc_r+0x7e>
 80088d2:	600b      	str	r3, [r1, #0]
 80088d4:	50cd      	str	r5, [r1, r3]
 80088d6:	18cc      	adds	r4, r1, r3
 80088d8:	4630      	mov	r0, r6
 80088da:	f000 f85c 	bl	8008996 <__malloc_unlock>
 80088de:	f104 000b 	add.w	r0, r4, #11
 80088e2:	1d23      	adds	r3, r4, #4
 80088e4:	f020 0007 	bic.w	r0, r0, #7
 80088e8:	1ac3      	subs	r3, r0, r3
 80088ea:	d0d3      	beq.n	8008894 <_malloc_r+0x20>
 80088ec:	425a      	negs	r2, r3
 80088ee:	50e2      	str	r2, [r4, r3]
 80088f0:	e7d0      	b.n	8008894 <_malloc_r+0x20>
 80088f2:	428c      	cmp	r4, r1
 80088f4:	684b      	ldr	r3, [r1, #4]
 80088f6:	bf16      	itet	ne
 80088f8:	6063      	strne	r3, [r4, #4]
 80088fa:	6013      	streq	r3, [r2, #0]
 80088fc:	460c      	movne	r4, r1
 80088fe:	e7eb      	b.n	80088d8 <_malloc_r+0x64>
 8008900:	460c      	mov	r4, r1
 8008902:	6849      	ldr	r1, [r1, #4]
 8008904:	e7cc      	b.n	80088a0 <_malloc_r+0x2c>
 8008906:	1cc4      	adds	r4, r0, #3
 8008908:	f024 0403 	bic.w	r4, r4, #3
 800890c:	42a0      	cmp	r0, r4
 800890e:	d005      	beq.n	800891c <_malloc_r+0xa8>
 8008910:	1a21      	subs	r1, r4, r0
 8008912:	4630      	mov	r0, r6
 8008914:	f000 f82e 	bl	8008974 <_sbrk_r>
 8008918:	3001      	adds	r0, #1
 800891a:	d0cf      	beq.n	80088bc <_malloc_r+0x48>
 800891c:	6025      	str	r5, [r4, #0]
 800891e:	e7db      	b.n	80088d8 <_malloc_r+0x64>
 8008920:	200000b0 	.word	0x200000b0
 8008924:	200000b4 	.word	0x200000b4

08008928 <_realloc_r>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	4607      	mov	r7, r0
 800892c:	4614      	mov	r4, r2
 800892e:	460e      	mov	r6, r1
 8008930:	b921      	cbnz	r1, 800893c <_realloc_r+0x14>
 8008932:	4611      	mov	r1, r2
 8008934:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008938:	f7ff bf9c 	b.w	8008874 <_malloc_r>
 800893c:	b922      	cbnz	r2, 8008948 <_realloc_r+0x20>
 800893e:	f7ff ff4b 	bl	80087d8 <_free_r>
 8008942:	4625      	mov	r5, r4
 8008944:	4628      	mov	r0, r5
 8008946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008948:	f000 f826 	bl	8008998 <_malloc_usable_size_r>
 800894c:	42a0      	cmp	r0, r4
 800894e:	d20f      	bcs.n	8008970 <_realloc_r+0x48>
 8008950:	4621      	mov	r1, r4
 8008952:	4638      	mov	r0, r7
 8008954:	f7ff ff8e 	bl	8008874 <_malloc_r>
 8008958:	4605      	mov	r5, r0
 800895a:	2800      	cmp	r0, #0
 800895c:	d0f2      	beq.n	8008944 <_realloc_r+0x1c>
 800895e:	4631      	mov	r1, r6
 8008960:	4622      	mov	r2, r4
 8008962:	f7ff ff15 	bl	8008790 <memcpy>
 8008966:	4631      	mov	r1, r6
 8008968:	4638      	mov	r0, r7
 800896a:	f7ff ff35 	bl	80087d8 <_free_r>
 800896e:	e7e9      	b.n	8008944 <_realloc_r+0x1c>
 8008970:	4635      	mov	r5, r6
 8008972:	e7e7      	b.n	8008944 <_realloc_r+0x1c>

08008974 <_sbrk_r>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	4c06      	ldr	r4, [pc, #24]	; (8008990 <_sbrk_r+0x1c>)
 8008978:	2300      	movs	r3, #0
 800897a:	4605      	mov	r5, r0
 800897c:	4608      	mov	r0, r1
 800897e:	6023      	str	r3, [r4, #0]
 8008980:	f7f9 fd74 	bl	800246c <_sbrk>
 8008984:	1c43      	adds	r3, r0, #1
 8008986:	d102      	bne.n	800898e <_sbrk_r+0x1a>
 8008988:	6823      	ldr	r3, [r4, #0]
 800898a:	b103      	cbz	r3, 800898e <_sbrk_r+0x1a>
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	bd38      	pop	{r3, r4, r5, pc}
 8008990:	2002b784 	.word	0x2002b784

08008994 <__malloc_lock>:
 8008994:	4770      	bx	lr

08008996 <__malloc_unlock>:
 8008996:	4770      	bx	lr

08008998 <_malloc_usable_size_r>:
 8008998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800899c:	1f18      	subs	r0, r3, #4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bfbc      	itt	lt
 80089a2:	580b      	ldrlt	r3, [r1, r0]
 80089a4:	18c0      	addlt	r0, r0, r3
 80089a6:	4770      	bx	lr

080089a8 <_init>:
 80089a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089aa:	bf00      	nop
 80089ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ae:	bc08      	pop	{r3}
 80089b0:	469e      	mov	lr, r3
 80089b2:	4770      	bx	lr

080089b4 <_fini>:
 80089b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b6:	bf00      	nop
 80089b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ba:	bc08      	pop	{r3}
 80089bc:	469e      	mov	lr, r3
 80089be:	4770      	bx	lr
