
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000961c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800981c  0800981c  0001981c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009958  08009958  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009958  08009958  00019958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009960  08009960  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009960  08009960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009964  08009964  00019964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009968  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005e6ac  20000074  080099dc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2005e720  080099dc  0002e720  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156ca  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002881  00000000  00000000  0003576c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d8  00000000  00000000  00037ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001390  00000000  00000000  000394c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000297be  00000000  00000000  0003a858  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f7ff  00000000  00000000  00064016  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00103773  00000000  00000000  00073815  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00176f88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c6c  00000000  00000000  00177004  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08009804 	.word	0x08009804

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08009804 	.word	0x08009804

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000616:	f002 faba 	bl	8002b8e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800061a:	f000 f847 	bl	80006ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800061e:	f000 fe91 	bl	8001344 <MX_GPIO_Init>
	MX_DMA_Init();
 8000622:	f000 fe55 	bl	80012d0 <MX_DMA_Init>
	MX_ADC1_Init();
 8000626:	f000 f8e3 	bl	80007f0 <MX_ADC1_Init>
	MX_SPI1_Init();
 800062a:	f000 f9b3 	bl	8000994 <MX_SPI1_Init>
	MX_TIM1_Init();
 800062e:	f000 fa29 	bl	8000a84 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000632:	f000 fae7 	bl	8000c04 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000636:	f000 fb39 	bl	8000cac <MX_TIM3_Init>
	MX_TIM4_Init();
 800063a:	f000 fbaf 	bl	8000d9c <MX_TIM4_Init>
	MX_TIM8_Init();
 800063e:	f000 fc8b 	bl	8000f58 <MX_TIM8_Init>
	MX_UART5_Init();
 8000642:	f000 fd55 	bl	80010f0 <MX_UART5_Init>
	MX_USART1_UART_Init();
 8000646:	f000 fdb3 	bl	80011b0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800064a:	f000 fde1 	bl	8001210 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800064e:	f000 fe0f 	bl	8001270 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8000652:	f000 f91f 	bl	8000894 <MX_I2C1_Init>
	MX_I2C3_Init();
 8000656:	f000 f95d 	bl	8000914 <MX_I2C3_Init>
	MX_SPI4_Init();
 800065a:	f000 f9d5 	bl	8000a08 <MX_SPI4_Init>
	MX_TIM5_Init();
 800065e:	f000 fbf7 	bl	8000e50 <MX_TIM5_Init>
	MX_UART7_Init();
 8000662:	f000 fd75 	bl	8001150 <MX_UART7_Init>
	MX_TIM6_Init();
 8000666:	f000 fc41 	bl	8000eec <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	490b      	ldr	r1, [pc, #44]	; (800069c <main+0x8c>)
 800066e:	480c      	ldr	r0, [pc, #48]	; (80006a0 <main+0x90>)
 8000670:	f007 fd16 	bl	80080a0 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000674:	480b      	ldr	r0, [pc, #44]	; (80006a4 <main+0x94>)
 8000676:	f005 fd7b 	bl	8006170 <HAL_TIM_Base_Start_IT>
	char msg_buffers[25];
	uint16_t index = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	83fb      	strh	r3, [r7, #30]
	switchingCircuitIdle();
 800067e:	f001 f84f 	bl	8001720 <switchingCircuitIdle>
	HAL_Delay(1000);
 8000682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000686:	f002 fadf 	bl	8002c48 <HAL_Delay>
		 sprintf(msg_buffers, "Idle phase - %hu\n", index);
		 switchingCircuitIdle();
		 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
		 HAL_Delay(5000);
		 index++;*/
		parseText();
 800068a:	f001 fb17 	bl	8001cbc <parseText>

		if (state.preparedToRunPolarizationPhase) {
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <main+0x98>)
 8000690:	7adb      	ldrb	r3, [r3, #11]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d0f9      	beq.n	800068a <main+0x7a>
			chooseActionByState();
 8000696:	f000 fee7 	bl	8001468 <chooseActionByState>
	while (1) {
 800069a:	e7f6      	b.n	800068a <main+0x7a>
 800069c:	2000801c 	.word	0x2000801c
 80006a0:	20007f50 	.word	0x20007f50
 80006a4:	20033130 	.word	0x20033130
 80006a8:	200331b0 	.word	0x200331b0

080006ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0b8      	sub	sp, #224	; 0xe0
 80006b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006b6:	2234      	movs	r2, #52	; 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f008 fc22 	bl	8008f04 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	2290      	movs	r2, #144	; 0x90
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f008 fc13 	bl	8008f04 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80006de:	f003 fe77 	bl	80043d0 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006e2:	4b40      	ldr	r3, [pc, #256]	; (80007e4 <SystemClock_Config+0x138>)
 80006e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e6:	4a3f      	ldr	r2, [pc, #252]	; (80007e4 <SystemClock_Config+0x138>)
 80006e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ec:	6413      	str	r3, [r2, #64]	; 0x40
 80006ee:	4b3d      	ldr	r3, [pc, #244]	; (80007e4 <SystemClock_Config+0x138>)
 80006f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006fa:	4b3b      	ldr	r3, [pc, #236]	; (80007e8 <SystemClock_Config+0x13c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a3a      	ldr	r2, [pc, #232]	; (80007e8 <SystemClock_Config+0x13c>)
 8000700:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	4b38      	ldr	r3, [pc, #224]	; (80007e8 <SystemClock_Config+0x13c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000712:	2301      	movs	r3, #1
 8000714:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000718:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800071c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000720:	2302      	movs	r3, #2
 8000722:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 5;
 800072e:	2305      	movs	r3, #5
 8000730:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000734:	23d8      	movs	r3, #216	; 0xd8
 8000736:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800073a:	2302      	movs	r3, #2
 800073c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000740:	2302      	movs	r3, #2
 8000742:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000746:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800074a:	4618      	mov	r0, r3
 800074c:	f003 fea0 	bl	8004490 <HAL_RCC_OscConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xae>
		Error_Handler();
 8000756:	f001 fc3b 	bl	8001fd0 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800075a:	f003 fe49 	bl	80043f0 <HAL_PWREx_EnableOverDrive>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <SystemClock_Config+0xbc>
		Error_Handler();
 8000764:	f001 fc34 	bl	8001fd0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000768:	230f      	movs	r3, #15
 800076a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	2302      	movs	r3, #2
 8000770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800077a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800077e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000786:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800078a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800078e:	2107      	movs	r1, #7
 8000790:	4618      	mov	r0, r3
 8000792:	f004 f92b 	bl	80049ec <HAL_RCC_ClockConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xf4>
		Error_Handler();
 800079c:	f001 fc18 	bl	8001fd0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART5 | RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_I2C1
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <SystemClock_Config+0x140>)
 80007a2:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007a4:	2300      	movs	r3, #0
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007bc:	2300      	movs	r3, #0
 80007be:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80007c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007c4:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 fae0 	bl	8004d90 <HAL_RCCEx_PeriphCLKConfig>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x12e>
		Error_Handler();
 80007d6:	f001 fbfb 	bl	8001fd0 <Error_Handler>
	}
}
 80007da:	bf00      	nop
 80007dc:	37e0      	adds	r7, #224	; 0xe0
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40007000 	.word	0x40007000
 80007ec:	000155d0 	.word	0x000155d0

080007f0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000802:	4b22      	ldr	r3, [pc, #136]	; (800088c <MX_ADC1_Init+0x9c>)
 8000804:	4a22      	ldr	r2, [pc, #136]	; (8000890 <MX_ADC1_Init+0xa0>)
 8000806:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <MX_ADC1_Init+0x9c>)
 800080a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800080e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000810:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_ADC1_Init+0x9c>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000816:	4b1d      	ldr	r3, [pc, #116]	; (800088c <MX_ADC1_Init+0x9c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_ADC1_Init+0x9c>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000822:	4b1a      	ldr	r3, [pc, #104]	; (800088c <MX_ADC1_Init+0x9c>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800082a:	4b18      	ldr	r3, [pc, #96]	; (800088c <MX_ADC1_Init+0x9c>)
 800082c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000830:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_ADC1_Init+0x9c>)
 8000834:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000838:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_ADC1_Init+0x9c>)
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_ADC1_Init+0x9c>)
 8000842:	2201      	movs	r2, #1
 8000844:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_ADC1_Init+0x9c>)
 8000848:	2200      	movs	r2, #0
 800084a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_ADC1_Init+0x9c>)
 8000850:	2201      	movs	r2, #1
 8000852:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <MX_ADC1_Init+0x9c>)
 8000856:	f002 fa19 	bl	8002c8c <HAL_ADC_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_ADC1_Init+0x74>
		Error_Handler();
 8000860:	f001 fbb6 	bl	8001fd0 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000864:	2300      	movs	r3, #0
 8000866:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000868:	2301      	movs	r3, #1
 800086a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800086c:	2301      	movs	r3, #1
 800086e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000870:	463b      	mov	r3, r7
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_ADC1_Init+0x9c>)
 8000876:	f002 fb4f 	bl	8002f18 <HAL_ADC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_ADC1_Init+0x94>
		Error_Handler();
 8000880:	f001 fba6 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20033240 	.word	0x20033240
 8000890:	40012000 	.word	0x40012000

08000894 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000898:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_I2C1_Init+0x74>)
 800089a:	4a1c      	ldr	r2, [pc, #112]	; (800090c <MX_I2C1_Init+0x78>)
 800089c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20404768;
 800089e:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a0:	4a1b      	ldr	r2, [pc, #108]	; (8000910 <MX_I2C1_Init+0x7c>)
 80008a2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80008a4:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80008b6:	4b14      	ldr	r3, [pc, #80]	; (8000908 <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80008ce:	480e      	ldr	r0, [pc, #56]	; (8000908 <MX_I2C1_Init+0x74>)
 80008d0:	f003 fc56 	bl	8004180 <HAL_I2C_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x4a>
		Error_Handler();
 80008da:	f001 fb79 	bl	8001fd0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80008de:	2100      	movs	r1, #0
 80008e0:	4809      	ldr	r0, [pc, #36]	; (8000908 <MX_I2C1_Init+0x74>)
 80008e2:	f003 fcdd 	bl	80042a0 <HAL_I2CEx_ConfigAnalogFilter>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_I2C1_Init+0x5c>
		Error_Handler();
 80008ec:	f001 fb70 	bl	8001fd0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80008f0:	2100      	movs	r1, #0
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_I2C1_Init+0x74>)
 80008f4:	f003 fd1f 	bl	8004336 <HAL_I2CEx_ConfigDigitalFilter>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_I2C1_Init+0x6e>
		Error_Handler();
 80008fe:	f001 fb67 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20007fd0 	.word	0x20007fd0
 800090c:	40005400 	.word	0x40005400
 8000910:	20404768 	.word	0x20404768

08000914 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000918:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_I2C3_Init+0x74>)
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <MX_I2C3_Init+0x78>)
 800091c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x20404768;
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <MX_I2C3_Init+0x74>)
 8000920:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <MX_I2C3_Init+0x7c>)
 8000922:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_I2C3_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <MX_I2C3_Init+0x74>)
 800092c:	2201      	movs	r2, #1
 800092e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_I2C3_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_I2C3_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_I2C3_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <MX_I2C3_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000948:	4b0f      	ldr	r3, [pc, #60]	; (8000988 <MX_I2C3_Init+0x74>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800094e:	480e      	ldr	r0, [pc, #56]	; (8000988 <MX_I2C3_Init+0x74>)
 8000950:	f003 fc16 	bl	8004180 <HAL_I2C_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_I2C3_Init+0x4a>
		Error_Handler();
 800095a:	f001 fb39 	bl	8001fd0 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800095e:	2100      	movs	r1, #0
 8000960:	4809      	ldr	r0, [pc, #36]	; (8000988 <MX_I2C3_Init+0x74>)
 8000962:	f003 fc9d 	bl	80042a0 <HAL_I2CEx_ConfigAnalogFilter>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_I2C3_Init+0x5c>
		Error_Handler();
 800096c:	f001 fb30 	bl	8001fd0 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8000970:	2100      	movs	r1, #0
 8000972:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_I2C3_Init+0x74>)
 8000974:	f003 fcdf 	bl	8004336 <HAL_I2CEx_ConfigDigitalFilter>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_I2C3_Init+0x6e>
		Error_Handler();
 800097e:	f001 fb27 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20007da4 	.word	0x20007da4
 800098c:	40005c00 	.word	0x40005c00
 8000990:	20404768 	.word	0x20404768

08000994 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_SPI1_Init+0x6c>)
 800099a:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <MX_SPI1_Init+0x70>)
 800099c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 800099e:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009a4:	4b16      	ldr	r3, [pc, #88]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009aa:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009ae:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80009b2:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009da:	2207      	movs	r2, #7
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_SPI1_Init+0x6c>)
 80009ec:	f004 fdf6 	bl	80055dc <HAL_SPI_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_SPI1_Init+0x66>
		Error_Handler();
 80009f6:	f001 faeb 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20033484 	.word	0x20033484
 8000a04:	40013000 	.word	0x40013000

08000a08 <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a0e:	4a1c      	ldr	r2, [pc, #112]	; (8000a80 <MX_SPI4_Init+0x78>)
 8000a10:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a14:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a18:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a1a:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a22:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a26:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a2e:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a36:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a3a:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 7;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a56:	2207      	movs	r2, #7
 8000a58:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	631a      	str	r2, [r3, #48]	; 0x30
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a62:	2208      	movs	r2, #8
 8000a64:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_SPI4_Init+0x74>)
 8000a68:	f004 fdb8 	bl	80055dc <HAL_SPI_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_SPI4_Init+0x6e>
		Error_Handler();
 8000a72:	f001 faad 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20033308 	.word	0x20033308
 8000a80:	40013400 	.word	0x40013400

08000a84 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09a      	sub	sp, #104	; 0x68
 8000a88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000aa4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
 8000ab4:	615a      	str	r2, [r3, #20]
 8000ab6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	222c      	movs	r2, #44	; 0x2c
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f008 fa20 	bl	8008f04 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000ac4:	4b4d      	ldr	r3, [pc, #308]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000ac6:	4a4e      	ldr	r2, [pc, #312]	; (8000c00 <MX_TIM1_Init+0x17c>)
 8000ac8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000aca:	4b4c      	ldr	r3, [pc, #304]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad0:	4b4a      	ldr	r3, [pc, #296]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4898 - 1;
 8000ad6:	4b49      	ldr	r3, [pc, #292]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000ad8:	f241 3221 	movw	r2, #4897	; 0x1321
 8000adc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ade:	4b47      	ldr	r3, [pc, #284]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000ae4:	4b45      	ldr	r3, [pc, #276]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aea:	4b44      	ldr	r3, [pc, #272]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000af0:	4842      	ldr	r0, [pc, #264]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000af2:	f005 fb12 	bl	800611a <HAL_TIM_Base_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000afc:	f001 fa68 	bl	8001fd0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b04:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	483b      	ldr	r0, [pc, #236]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000b0e:	f006 f99d 	bl	8006e4c <HAL_TIM_ConfigClockSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0x98>
		Error_Handler();
 8000b18:	f001 fa5a 	bl	8001fd0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000b1c:	4837      	ldr	r0, [pc, #220]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000b1e:	f005 fb7c 	bl	800621a <HAL_TIM_PWM_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM1_Init+0xa8>
		Error_Handler();
 8000b28:	f001 fa52 	bl	8001fd0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b2c:	2320      	movs	r3, #32
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b30:	2300      	movs	r3, #0
 8000b32:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b34:	2380      	movs	r3, #128	; 0x80
 8000b36:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000b38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	482f      	ldr	r0, [pc, #188]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000b40:	f007 f8a4 	bl	8007c8c <HAL_TIMEx_MasterConfigSynchronization>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0xca>
		Error_Handler();
 8000b4a:	f001 fa41 	bl	8001fd0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b4e:	2370      	movs	r3, #112	; 0x70
 8000b50:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 864 + 10;
 8000b52:	f240 336a 	movw	r3, #874	; 0x36a
 8000b56:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b68:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000b6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b72:	2200      	movs	r2, #0
 8000b74:	4619      	mov	r1, r3
 8000b76:	4821      	ldr	r0, [pc, #132]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000b78:	f006 f850 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0x102>
		Error_Handler();
 8000b82:	f001 fa25 	bl	8001fd0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b86:	2360      	movs	r3, #96	; 0x60
 8000b88:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 3000;
 8000b8a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b8e:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000b90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b94:	2204      	movs	r2, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4818      	ldr	r0, [pc, #96]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000b9a:	f006 f83f 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0x124>
		Error_Handler();
 8000ba4:	f001 fa14 	bl	8001fd0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bc0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4807      	ldr	r0, [pc, #28]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000bde:	f007 f8e3 	bl	8007da8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM1_Init+0x168>
		Error_Handler();
 8000be8:	f001 f9f2 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <MX_TIM1_Init+0x178>)
 8000bee:	f001 fd07 	bl	8002600 <HAL_TIM_MspPostInit>

}
 8000bf2:	bf00      	nop
 8000bf4:	3768      	adds	r7, #104	; 0x68
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20033444 	.word	0x20033444
 8000c00:	40010000 	.word	0x40010000

08000c04 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c22:	4b21      	ldr	r3, [pc, #132]	; (8000ca8 <MX_TIM2_Init+0xa4>)
 8000c24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c28:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_TIM2_Init+0xa4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <MX_TIM2_Init+0xa4>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_TIM2_Init+0xa4>)
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ca8 <MX_TIM2_Init+0xa4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <MX_TIM2_Init+0xa4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8000c4a:	4817      	ldr	r0, [pc, #92]	; (8000ca8 <MX_TIM2_Init+0xa4>)
 8000c4c:	f005 fc34 	bl	80064b8 <HAL_TIM_IC_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM2_Init+0x56>
		Error_Handler();
 8000c56:	f001 f9bb 	bl	8001fd0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4619      	mov	r1, r3
 8000c68:	480f      	ldr	r0, [pc, #60]	; (8000ca8 <MX_TIM2_Init+0xa4>)
 8000c6a:	f007 f80f 	bl	8007c8c <HAL_TIMEx_MasterConfigSynchronization>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x74>
		Error_Handler();
 8000c74:	f001 f9ac 	bl	8001fd0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4806      	ldr	r0, [pc, #24]	; (8000ca8 <MX_TIM2_Init+0xa4>)
 8000c90:	f005 ff27 	bl	8006ae2 <HAL_TIM_IC_ConfigChannel>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0x9a>
		Error_Handler();
 8000c9a:	f001 f999 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200334e8 	.word	0x200334e8

08000cac <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b090      	sub	sp, #64	; 0x40
 8000cb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000cb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
 8000cbc:	609a      	str	r2, [r3, #8]
 8000cbe:	60da      	str	r2, [r3, #12]
 8000cc0:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cc2:	f107 0320 	add.w	r3, r7, #32
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
 8000cdc:	615a      	str	r2, [r3, #20]
 8000cde:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000ce0:	4b2c      	ldr	r3, [pc, #176]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000ce2:	4a2d      	ldr	r2, [pc, #180]	; (8000d98 <MX_TIM3_Init+0xec>)
 8000ce4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000ce6:	4b2b      	ldr	r3, [pc, #172]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cec:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0;
 8000cf2:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000d04:	4823      	ldr	r0, [pc, #140]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000d06:	f005 fa08 	bl	800611a <HAL_TIM_Base_Init>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM3_Init+0x68>
		Error_Handler();
 8000d10:	f001 f95e 	bl	8001fd0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000d14:	481f      	ldr	r0, [pc, #124]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000d16:	f005 fa80 	bl	800621a <HAL_TIM_PWM_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM3_Init+0x78>
		Error_Handler();
 8000d20:	f001 f956 	bl	8001fd0 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 8000d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d30:	4619      	mov	r1, r3
 8000d32:	4818      	ldr	r0, [pc, #96]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000d34:	f006 f944 	bl	8006fc0 <HAL_TIM_SlaveConfigSynchro>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM3_Init+0x96>
		Error_Handler();
 8000d3e:	f001 f947 	bl	8001fd0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4810      	ldr	r0, [pc, #64]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000d52:	f006 ff9b 	bl	8007c8c <HAL_TIMEx_MasterConfigSynchronization>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0xb4>
		Error_Handler();
 8000d5c:	f001 f938 	bl	8001fd0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d60:	2360      	movs	r3, #96	; 0x60
 8000d62:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000d70:	1d3b      	adds	r3, r7, #4
 8000d72:	2200      	movs	r2, #0
 8000d74:	4619      	mov	r1, r3
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000d78:	f005 ff50 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0xda>
		Error_Handler();
 8000d82:	f001 f925 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000d86:	4803      	ldr	r0, [pc, #12]	; (8000d94 <MX_TIM3_Init+0xe8>)
 8000d88:	f001 fc3a 	bl	8002600 <HAL_TIM_MspPostInit>

}
 8000d8c:	bf00      	nop
 8000d8e:	3740      	adds	r7, #64	; 0x40
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	20033170 	.word	0x20033170
 8000d98:	40000400 	.word	0x40000400

08000d9c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08a      	sub	sp, #40	; 0x28
 8000da0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000dc0:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dc2:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <MX_TIM4_Init+0xb0>)
 8000dc4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000de4:	4818      	ldr	r0, [pc, #96]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000de6:	f005 fa18 	bl	800621a <HAL_TIM_PWM_Init>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM4_Init+0x58>
		Error_Handler();
 8000df0:	f001 f8ee 	bl	8001fd0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000df4:	2320      	movs	r3, #32
 8000df6:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000e04:	f006 ff42 	bl	8007c8c <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM4_Init+0x76>
		Error_Handler();
 8000e0e:	f001 f8df 	bl	8001fd0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e12:	2360      	movs	r3, #96	; 0x60
 8000e14:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000e22:	463b      	mov	r3, r7
 8000e24:	2200      	movs	r2, #0
 8000e26:	4619      	mov	r1, r3
 8000e28:	4807      	ldr	r0, [pc, #28]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000e2a:	f005 fef7 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM4_Init+0x9c>
		Error_Handler();
 8000e34:	f001 f8cc 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000e38:	4803      	ldr	r0, [pc, #12]	; (8000e48 <MX_TIM4_Init+0xac>)
 8000e3a:	f001 fbe1 	bl	8002600 <HAL_TIM_MspPostInit>

}
 8000e3e:	bf00      	nop
 8000e40:	3728      	adds	r7, #40	; 0x28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20007f10 	.word	0x20007f10
 8000e4c:	40000800 	.word	0x40000800

08000e50 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]
 8000e60:	609a      	str	r2, [r3, #8]
 8000e62:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000e6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e70:	4a1d      	ldr	r2, [pc, #116]	; (8000ee8 <MX_TIM5_Init+0x98>)
 8000e72:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 2160 - 1;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e82:	f640 026f 	movw	r2, #2159	; 0x86f
 8000e86:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8000e94:	4813      	ldr	r0, [pc, #76]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000e96:	f005 f940 	bl	800611a <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM5_Init+0x54>
		Error_Handler();
 8000ea0:	f001 f896 	bl	8001fd0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ea8:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480c      	ldr	r0, [pc, #48]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000eb2:	f005 ffcb 	bl	8006e4c <HAL_TIM_ConfigClockSource>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM5_Init+0x70>
		Error_Handler();
 8000ebc:	f001 f888 	bl	8001fd0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <MX_TIM5_Init+0x94>)
 8000ece:	f006 fedd 	bl	8007c8c <HAL_TIMEx_MasterConfigSynchronization>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM5_Init+0x8c>
		Error_Handler();
 8000ed8:	f001 f87a 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	3720      	adds	r7, #32
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20033130 	.word	0x20033130
 8000ee8:	40000c00 	.word	0x40000c00

08000eec <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_TIM6_Init+0x64>)
 8000efe:	4a15      	ldr	r2, [pc, #84]	; (8000f54 <MX_TIM6_Init+0x68>)
 8000f00:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_TIM6_Init+0x64>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <MX_TIM6_Init+0x64>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 4898 - 1;
 8000f0e:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <MX_TIM6_Init+0x64>)
 8000f10:	f241 3221 	movw	r2, #4897	; 0x1321
 8000f14:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f16:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_TIM6_Init+0x64>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000f1c:	480c      	ldr	r0, [pc, #48]	; (8000f50 <MX_TIM6_Init+0x64>)
 8000f1e:	f005 f8fc 	bl	800611a <HAL_TIM_Base_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM6_Init+0x40>
		Error_Handler();
 8000f28:	f001 f852 	bl	8001fd0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f2c:	2320      	movs	r3, #32
 8000f2e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f30:	2300      	movs	r3, #0
 8000f32:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_TIM6_Init+0x64>)
 8000f3a:	f006 fea7 	bl	8007c8c <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM6_Init+0x5c>
		Error_Handler();
 8000f44:	f001 f844 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20033400 	.word	0x20033400
 8000f54:	40001000 	.word	0x40001000

08000f58 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b09e      	sub	sp, #120	; 0x78
 8000f5c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f5e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000f6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	222c      	movs	r2, #44	; 0x2c
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f007 ffae 	bl	8008f04 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000fa8:	4b4f      	ldr	r3, [pc, #316]	; (80010e8 <MX_TIM8_Init+0x190>)
 8000faa:	4a50      	ldr	r2, [pc, #320]	; (80010ec <MX_TIM8_Init+0x194>)
 8000fac:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8000fae:	4b4e      	ldr	r3, [pc, #312]	; (80010e8 <MX_TIM8_Init+0x190>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb4:	4b4c      	ldr	r3, [pc, #304]	; (80010e8 <MX_TIM8_Init+0x190>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 108 - 1;
 8000fba:	4b4b      	ldr	r3, [pc, #300]	; (80010e8 <MX_TIM8_Init+0x190>)
 8000fbc:	226b      	movs	r2, #107	; 0x6b
 8000fbe:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc0:	4b49      	ldr	r3, [pc, #292]	; (80010e8 <MX_TIM8_Init+0x190>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 24;
 8000fc6:	4b48      	ldr	r3, [pc, #288]	; (80010e8 <MX_TIM8_Init+0x190>)
 8000fc8:	2218      	movs	r2, #24
 8000fca:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fcc:	4b46      	ldr	r3, [pc, #280]	; (80010e8 <MX_TIM8_Init+0x190>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8000fd2:	4845      	ldr	r0, [pc, #276]	; (80010e8 <MX_TIM8_Init+0x190>)
 8000fd4:	f005 f8a1 	bl	800611a <HAL_TIM_Base_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_TIM8_Init+0x8a>
		Error_Handler();
 8000fde:	f000 fff7 	bl	8001fd0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe6:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8000fe8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000fec:	4619      	mov	r1, r3
 8000fee:	483e      	ldr	r0, [pc, #248]	; (80010e8 <MX_TIM8_Init+0x190>)
 8000ff0:	f005 ff2c 	bl	8006e4c <HAL_TIM_ConfigClockSource>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM8_Init+0xa6>
		Error_Handler();
 8000ffa:	f000 ffe9 	bl	8001fd0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8000ffe:	483a      	ldr	r0, [pc, #232]	; (80010e8 <MX_TIM8_Init+0x190>)
 8001000:	f005 f90b 	bl	800621a <HAL_TIM_PWM_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM8_Init+0xb6>
		Error_Handler();
 800100a:	f000 ffe1 	bl	8001fd0 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK) {
 800100e:	2108      	movs	r1, #8
 8001010:	4835      	ldr	r0, [pc, #212]	; (80010e8 <MX_TIM8_Init+0x190>)
 8001012:	f005 fc01 	bl	8006818 <HAL_TIM_OnePulse_Init>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM8_Init+0xc8>
		Error_Handler();
 800101c:	f000 ffd8 	bl	8001fd0 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001020:	2306      	movs	r3, #6
 8001022:	657b      	str	r3, [r7, #84]	; 0x54
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001024:	2300      	movs	r3, #0
 8001026:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK) {
 8001028:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800102c:	4619      	mov	r1, r3
 800102e:	482e      	ldr	r0, [pc, #184]	; (80010e8 <MX_TIM8_Init+0x190>)
 8001030:	f005 ffc6 	bl	8006fc0 <HAL_TIM_SlaveConfigSynchro>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM8_Init+0xe6>
		Error_Handler();
 800103a:	f000 ffc9 	bl	8001fd0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103e:	2300      	movs	r3, #0
 8001040:	64bb      	str	r3, [r7, #72]	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001042:	2300      	movs	r3, #0
 8001044:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 800104a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800104e:	4619      	mov	r1, r3
 8001050:	4825      	ldr	r0, [pc, #148]	; (80010e8 <MX_TIM8_Init+0x190>)
 8001052:	f006 fe1b 	bl	8007c8c <HAL_TIMEx_MasterConfigSynchronization>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_TIM8_Init+0x108>
		Error_Handler();
 800105c:	f000 ffb8 	bl	8001fd0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001060:	2370      	movs	r3, #112	; 0x70
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 54;
 8001064:	2336      	movs	r3, #54	; 0x36
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001068:	2300      	movs	r3, #0
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800106c:	2300      	movs	r3, #0
 800106e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001070:	2300      	movs	r3, #0
 8001072:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001078:	2300      	movs	r3, #0
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800107c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001080:	2200      	movs	r2, #0
 8001082:	4619      	mov	r1, r3
 8001084:	4818      	ldr	r0, [pc, #96]	; (80010e8 <MX_TIM8_Init+0x190>)
 8001086:	f005 fdc9 	bl	8006c1c <HAL_TIM_PWM_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM8_Init+0x13c>
		Error_Handler();
 8001090:	f000 ff9e 	bl	8001fd0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ac:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ba:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Filter = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 80010c4:	463b      	mov	r3, r7
 80010c6:	4619      	mov	r1, r3
 80010c8:	4807      	ldr	r0, [pc, #28]	; (80010e8 <MX_TIM8_Init+0x190>)
 80010ca:	f006 fe6d 	bl	8007da8 <HAL_TIMEx_ConfigBreakDeadTime>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM8_Init+0x180>
		Error_Handler();
 80010d4:	f000 ff7c 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 80010d8:	4803      	ldr	r0, [pc, #12]	; (80010e8 <MX_TIM8_Init+0x190>)
 80010da:	f001 fa91 	bl	8002600 <HAL_TIM_MspPostInit>

}
 80010de:	bf00      	nop
 80010e0:	3778      	adds	r7, #120	; 0x78
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20007ed0 	.word	0x20007ed0
 80010ec:	40010400 	.word	0x40010400

080010f0 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_UART5_Init+0x58>)
 80010f6:	4a15      	ldr	r2, [pc, #84]	; (800114c <MX_UART5_Init+0x5c>)
 80010f8:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <MX_UART5_Init+0x58>)
 80010fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001100:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_UART5_Init+0x58>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_UART5_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_UART5_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <MX_UART5_Init+0x58>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b0b      	ldr	r3, [pc, #44]	; (8001148 <MX_UART5_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <MX_UART5_Init+0x58>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <MX_UART5_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <MX_UART5_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001132:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_UART5_Init+0x58>)
 8001134:	f006 fed4 	bl	8007ee0 <HAL_UART_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_UART5_Init+0x52>
		Error_Handler();
 800113e:	f000 ff47 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	200331c0 	.word	0x200331c0
 800114c:	40005000 	.word	0x40005000

08001150 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_UART7_Init+0x58>)
 8001156:	4a15      	ldr	r2, [pc, #84]	; (80011ac <MX_UART7_Init+0x5c>)
 8001158:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <MX_UART7_Init+0x58>)
 800115c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001160:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001162:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <MX_UART7_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <MX_UART7_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 800116e:	4b0e      	ldr	r3, [pc, #56]	; (80011a8 <MX_UART7_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8001174:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <MX_UART7_Init+0x58>)
 8001176:	220c      	movs	r2, #12
 8001178:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_UART7_Init+0x58>)
 800117c:	2200      	movs	r2, #0
 800117e:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <MX_UART7_Init+0x58>)
 8001182:	2200      	movs	r2, #0
 8001184:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <MX_UART7_Init+0x58>)
 8001188:	2200      	movs	r2, #0
 800118a:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <MX_UART7_Init+0x58>)
 800118e:	2200      	movs	r2, #0
 8001190:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8001192:	4805      	ldr	r0, [pc, #20]	; (80011a8 <MX_UART7_Init+0x58>)
 8001194:	f006 fea4 	bl	8007ee0 <HAL_UART_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_UART7_Init+0x52>
		Error_Handler();
 800119e:	f000 ff17 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20007e50 	.word	0x20007e50
 80011ac:	40007800 	.word	0x40007800

080011b0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80011b4:	4b14      	ldr	r3, [pc, #80]	; (8001208 <MX_USART1_UART_Init+0x58>)
 80011b6:	4a15      	ldr	r2, [pc, #84]	; (800120c <MX_USART1_UART_Init+0x5c>)
 80011b8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <MX_USART1_UART_Init+0x58>)
 80011bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_USART1_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <MX_USART1_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_USART1_UART_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_USART1_UART_Init+0x58>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_USART1_UART_Init+0x58>)
 80011dc:	2200      	movs	r2, #0
 80011de:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_USART1_UART_Init+0x58>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_USART1_UART_Init+0x58>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_USART1_UART_Init+0x58>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_USART1_UART_Init+0x58>)
 80011f4:	f006 fe74 	bl	8007ee0 <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80011fe:	f000 fee7 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	20033288 	.word	0x20033288
 800120c:	40011000 	.word	0x40011000

08001210 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <MX_USART2_UART_Init+0x5c>)
 8001218:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800121a:	4b13      	ldr	r3, [pc, #76]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800121c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001220:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001228:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001234:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001236:	220c      	movs	r2, #12
 8001238:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_USART2_UART_Init+0x58>)
 800124e:	2200      	movs	r2, #0
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_USART2_UART_Init+0x58>)
 8001254:	f006 fe44 	bl	8007ee0 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800125e:	f000 feb7 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20033528 	.word	0x20033528
 800126c:	40004400 	.word	0x40004400

08001270 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_USART3_UART_Init+0x54>)
 8001276:	4a14      	ldr	r2, [pc, #80]	; (80012c8 <MX_USART3_UART_Init+0x58>)
 8001278:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 2000000;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_USART3_UART_Init+0x54>)
 800127c:	4a13      	ldr	r2, [pc, #76]	; (80012cc <MX_USART3_UART_Init+0x5c>)
 800127e:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_USART3_UART_Init+0x54>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_USART3_UART_Init+0x54>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800128c:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <MX_USART3_UART_Init+0x54>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_USART3_UART_Init+0x54>)
 8001294:	220c      	movs	r2, #12
 8001296:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001298:	4b0a      	ldr	r3, [pc, #40]	; (80012c4 <MX_USART3_UART_Init+0x54>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_USART3_UART_Init+0x54>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a4:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <MX_USART3_UART_Init+0x54>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_USART3_UART_Init+0x54>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_USART3_UART_Init+0x54>)
 80012b2:	f006 fe15 	bl	8007ee0 <HAL_UART_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_USART3_UART_Init+0x50>
		Error_Handler();
 80012bc:	f000 fe88 	bl	8001fd0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20007f50 	.word	0x20007f50
 80012c8:	40004800 	.word	0x40004800
 80012cc:	001e8480 	.word	0x001e8480

080012d0 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_DMA_Init+0x70>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a19      	ldr	r2, [pc, #100]	; (8001340 <MX_DMA_Init+0x70>)
 80012dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_DMA_Init+0x70>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_DMA_Init+0x70>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <MX_DMA_Init+0x70>)
 80012f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_DMA_Init+0x70>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2010      	movs	r0, #16
 800130c:	f002 f9a5 	bl	800365a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001310:	2010      	movs	r0, #16
 8001312:	f002 f9be 	bl	8003692 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	2100      	movs	r1, #0
 800131a:	2038      	movs	r0, #56	; 0x38
 800131c:	f002 f99d 	bl	800365a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001320:	2038      	movs	r0, #56	; 0x38
 8001322:	f002 f9b6 	bl	8003692 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2100      	movs	r1, #0
 800132a:	203c      	movs	r0, #60	; 0x3c
 800132c:	f002 f995 	bl	800365a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001330:	203c      	movs	r0, #60	; 0x3c
 8001332:	f002 f9ae 	bl	8003692 <HAL_NVIC_EnableIRQ>

}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800

08001344 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b08c      	sub	sp, #48	; 0x30
 8001348:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800135a:	4b40      	ldr	r3, [pc, #256]	; (800145c <MX_GPIO_Init+0x118>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a3f      	ldr	r2, [pc, #252]	; (800145c <MX_GPIO_Init+0x118>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <MX_GPIO_Init+0x118>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	61bb      	str	r3, [r7, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b3a      	ldr	r3, [pc, #232]	; (800145c <MX_GPIO_Init+0x118>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a39      	ldr	r2, [pc, #228]	; (800145c <MX_GPIO_Init+0x118>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b37      	ldr	r3, [pc, #220]	; (800145c <MX_GPIO_Init+0x118>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	617b      	str	r3, [r7, #20]
 8001388:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	4b34      	ldr	r3, [pc, #208]	; (800145c <MX_GPIO_Init+0x118>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a33      	ldr	r2, [pc, #204]	; (800145c <MX_GPIO_Init+0x118>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b31      	ldr	r3, [pc, #196]	; (800145c <MX_GPIO_Init+0x118>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <MX_GPIO_Init+0x118>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a2d      	ldr	r2, [pc, #180]	; (800145c <MX_GPIO_Init+0x118>)
 80013a8:	f043 0301 	orr.w	r3, r3, #1
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b2b      	ldr	r3, [pc, #172]	; (800145c <MX_GPIO_Init+0x118>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <MX_GPIO_Init+0x118>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a27      	ldr	r2, [pc, #156]	; (800145c <MX_GPIO_Init+0x118>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b25      	ldr	r3, [pc, #148]	; (800145c <MX_GPIO_Init+0x118>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80013d2:	4b22      	ldr	r3, [pc, #136]	; (800145c <MX_GPIO_Init+0x118>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a21      	ldr	r2, [pc, #132]	; (800145c <MX_GPIO_Init+0x118>)
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <MX_GPIO_Init+0x118>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2108      	movs	r1, #8
 80013ee:	481c      	ldr	r0, [pc, #112]	; (8001460 <MX_GPIO_Init+0x11c>)
 80013f0:	f002 feac 	bl	800414c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80013f4:	2200      	movs	r2, #0
 80013f6:	f64e 717f 	movw	r1, #61311	; 0xef7f
 80013fa:	481a      	ldr	r0, [pc, #104]	; (8001464 <MX_GPIO_Init+0x120>)
 80013fc:	f002 fea6 	bl	800414c <HAL_GPIO_WritePin>
	LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : SN6505_EN_Pin */
	GPIO_InitStruct.Pin = SN6505_EN_Pin;
 8001400:	2308      	movs	r3, #8
 8001402:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4812      	ldr	r0, [pc, #72]	; (8001460 <MX_GPIO_Init+0x11c>)
 8001418:	f002 fcee 	bl	8003df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin
	 LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin
	 S1_Pin S2_Pin S3_Pin S4_Pin
	 S5_Pin S6_Pin */
	GPIO_InitStruct.Pin = LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin;
 800141c:	f64e 737f 	movw	r3, #61311	; 0xef7f
 8001420:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	4619      	mov	r1, r3
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <MX_GPIO_Init+0x120>)
 8001436:	f002 fcdf 	bl	8003df8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin;
 800143a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800143e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	4619      	mov	r1, r3
 800144e:	4804      	ldr	r0, [pc, #16]	; (8001460 <MX_GPIO_Init+0x11c>)
 8001450:	f002 fcd2 	bl	8003df8 <HAL_GPIO_Init>

}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	; 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00

08001468 <chooseActionByState>:

/* USER CODE BEGIN 4 */

void chooseActionByState() {
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	// if new measurement technique was set, update remaining measurements as well
	if (state.measureTechniqueUpdated) {
 800146c:	4b2f      	ldr	r3, [pc, #188]	; (800152c <chooseActionByState+0xc4>)
 800146e:	7a9b      	ldrb	r3, [r3, #10]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d013      	beq.n	800149c <chooseActionByState+0x34>
		state.remainingMeasurements = state.setMeasurements;
 8001474:	4b2d      	ldr	r3, [pc, #180]	; (800152c <chooseActionByState+0xc4>)
 8001476:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800147a:	4b2c      	ldr	r3, [pc, #176]	; (800152c <chooseActionByState+0xc4>)
 800147c:	80da      	strh	r2, [r3, #6]
		state.extAdcActiveState = state.extAdcSetState;
 800147e:	4b2b      	ldr	r3, [pc, #172]	; (800152c <chooseActionByState+0xc4>)
 8001480:	78da      	ldrb	r2, [r3, #3]
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <chooseActionByState+0xc4>)
 8001484:	701a      	strb	r2, [r3, #0]
		state.intAdcActiveState = state.intAdcSetState;
 8001486:	4b29      	ldr	r3, [pc, #164]	; (800152c <chooseActionByState+0xc4>)
 8001488:	791a      	ldrb	r2, [r3, #4]
 800148a:	4b28      	ldr	r3, [pc, #160]	; (800152c <chooseActionByState+0xc4>)
 800148c:	705a      	strb	r2, [r3, #1]
		state.compActiveState = state.compSetState;
 800148e:	4b27      	ldr	r3, [pc, #156]	; (800152c <chooseActionByState+0xc4>)
 8001490:	795a      	ldrb	r2, [r3, #5]
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <chooseActionByState+0xc4>)
 8001494:	709a      	strb	r2, [r3, #2]
		state.measureTechniqueUpdated = 0;
 8001496:	4b25      	ldr	r3, [pc, #148]	; (800152c <chooseActionByState+0xc4>)
 8001498:	2200      	movs	r2, #0
 800149a:	729a      	strb	r2, [r3, #10]

	}
	//idle
	if ((state.extAdcActiveState == 0) && (state.intAdcActiveState == 0) && (state.compActiveState == 0)) {
 800149c:	4b23      	ldr	r3, [pc, #140]	; (800152c <chooseActionByState+0xc4>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10d      	bne.n	80014c0 <chooseActionByState+0x58>
 80014a4:	4b21      	ldr	r3, [pc, #132]	; (800152c <chooseActionByState+0xc4>)
 80014a6:	785b      	ldrb	r3, [r3, #1]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <chooseActionByState+0x58>
 80014ac:	4b1f      	ldr	r3, [pc, #124]	; (800152c <chooseActionByState+0xc4>)
 80014ae:	789b      	ldrb	r3, [r3, #2]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d105      	bne.n	80014c0 <chooseActionByState+0x58>
		set_LED1(0, 0, 0);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2000      	movs	r0, #0
 80014ba:	f000 f90d 	bl	80016d8 <set_LED1>
	if ((state.extAdcActiveState == 0) && (state.intAdcActiveState == 0) && (state.compActiveState == 0)) {
 80014be:	e032      	b.n	8001526 <chooseActionByState+0xbe>
	}
	//external ADC
	else if ((state.extAdcActiveState == 1) && (state.intAdcActiveState == 0) && (state.compActiveState == 0)) {
 80014c0:	4b1a      	ldr	r3, [pc, #104]	; (800152c <chooseActionByState+0xc4>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d10c      	bne.n	80014e2 <chooseActionByState+0x7a>
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <chooseActionByState+0xc4>)
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d108      	bne.n	80014e2 <chooseActionByState+0x7a>
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <chooseActionByState+0xc4>)
 80014d2:	789b      	ldrb	r3, [r3, #2]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d104      	bne.n	80014e2 <chooseActionByState+0x7a>
		runPolarizationSequence();
 80014d8:	f000 f82a 	bl	8001530 <runPolarizationSequence>
		measureWithExternalADC();
 80014dc:	f000 f97e 	bl	80017dc <measureWithExternalADC>
	else if ((state.extAdcActiveState == 1) && (state.intAdcActiveState == 0) && (state.compActiveState == 0)) {
 80014e0:	e021      	b.n	8001526 <chooseActionByState+0xbe>
	}

	//internal ADC
	else if ((state.extAdcActiveState == 0) && (state.intAdcActiveState == 1) && (state.compActiveState == 0)) {
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <chooseActionByState+0xc4>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d10c      	bne.n	8001504 <chooseActionByState+0x9c>
 80014ea:	4b10      	ldr	r3, [pc, #64]	; (800152c <chooseActionByState+0xc4>)
 80014ec:	785b      	ldrb	r3, [r3, #1]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d108      	bne.n	8001504 <chooseActionByState+0x9c>
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <chooseActionByState+0xc4>)
 80014f4:	789b      	ldrb	r3, [r3, #2]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d104      	bne.n	8001504 <chooseActionByState+0x9c>
		runPolarizationSequence();
 80014fa:	f000 f819 	bl	8001530 <runPolarizationSequence>
		measureWithInternalADC();
 80014fe:	f000 f995 	bl	800182c <measureWithInternalADC>
	else if ((state.extAdcActiveState == 0) && (state.intAdcActiveState == 1) && (state.compActiveState == 0)) {
 8001502:	e010      	b.n	8001526 <chooseActionByState+0xbe>
	}

	//comparator
	else if ((state.extAdcActiveState == 0) && (state.intAdcActiveState == 0) && (state.compActiveState == 1)) {
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <chooseActionByState+0xc4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10c      	bne.n	8001526 <chooseActionByState+0xbe>
 800150c:	4b07      	ldr	r3, [pc, #28]	; (800152c <chooseActionByState+0xc4>)
 800150e:	785b      	ldrb	r3, [r3, #1]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d108      	bne.n	8001526 <chooseActionByState+0xbe>
 8001514:	4b05      	ldr	r3, [pc, #20]	; (800152c <chooseActionByState+0xc4>)
 8001516:	789b      	ldrb	r3, [r3, #2]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d104      	bne.n	8001526 <chooseActionByState+0xbe>
		runPolarizationSequence();
 800151c:	f000 f808 	bl	8001530 <runPolarizationSequence>
		measureWithComparator();
 8001520:	f000 f9a0 	bl	8001864 <measureWithComparator>
	}
}
 8001524:	e7ff      	b.n	8001526 <chooseActionByState+0xbe>
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200331b0 	.word	0x200331b0

08001530 <runPolarizationSequence>:
void runPolarizationSequence() {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 8001534:	4b66      	ldr	r3, [pc, #408]	; (80016d0 <runPolarizationSequence+0x1a0>)
 8001536:	2200      	movs	r2, #0
 8001538:	72da      	strb	r2, [r3, #11]
	// visualise
	set_LED1(1, 1, 1);
 800153a:	2201      	movs	r2, #1
 800153c:	2101      	movs	r1, #1
 800153e:	2001      	movs	r0, #1
 8001540:	f000 f8ca 	bl	80016d8 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	2102      	movs	r1, #2
 8001548:	4862      	ldr	r0, [pc, #392]	; (80016d4 <runPolarizationSequence+0x1a4>)
 800154a:	f002 fdff 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2104      	movs	r1, #4
 8001552:	4860      	ldr	r0, [pc, #384]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001554:	f002 fdfa 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001558:	2201      	movs	r2, #1
 800155a:	2108      	movs	r1, #8
 800155c:	485d      	ldr	r0, [pc, #372]	; (80016d4 <runPolarizationSequence+0x1a4>)
 800155e:	f002 fdf5 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2110      	movs	r1, #16
 8001566:	485b      	ldr	r0, [pc, #364]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001568:	f002 fdf0 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2120      	movs	r1, #32
 8001570:	4858      	ldr	r0, [pc, #352]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001572:	f002 fdeb 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001576:	2201      	movs	r2, #1
 8001578:	2140      	movs	r1, #64	; 0x40
 800157a:	4856      	ldr	r0, [pc, #344]	; (80016d4 <runPolarizationSequence+0x1a4>)
 800157c:	f002 fde6 	bl	800414c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001580:	2005      	movs	r0, #5
 8001582:	f001 fb61 	bl	8002c48 <HAL_Delay>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001586:	2201      	movs	r2, #1
 8001588:	2102      	movs	r1, #2
 800158a:	4852      	ldr	r0, [pc, #328]	; (80016d4 <runPolarizationSequence+0x1a4>)
 800158c:	f002 fdde 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001590:	2200      	movs	r2, #0
 8001592:	2104      	movs	r1, #4
 8001594:	484f      	ldr	r0, [pc, #316]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001596:	f002 fdd9 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800159a:	2201      	movs	r2, #1
 800159c:	2108      	movs	r1, #8
 800159e:	484d      	ldr	r0, [pc, #308]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80015a0:	f002 fdd4 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2110      	movs	r1, #16
 80015a8:	484a      	ldr	r0, [pc, #296]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80015aa:	f002 fdcf 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2120      	movs	r1, #32
 80015b2:	4848      	ldr	r0, [pc, #288]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80015b4:	f002 fdca 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2140      	movs	r1, #64	; 0x40
 80015bc:	4845      	ldr	r0, [pc, #276]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80015be:	f002 fdc5 	bl	800414c <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 80015c2:	f241 3088 	movw	r0, #5000	; 0x1388
 80015c6:	f001 fb3f 	bl	8002c48 <HAL_Delay>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2102      	movs	r1, #2
 80015ce:	4841      	ldr	r0, [pc, #260]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80015d0:	f002 fdbc 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2104      	movs	r1, #4
 80015d8:	483e      	ldr	r0, [pc, #248]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80015da:	f002 fdb7 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80015de:	2201      	movs	r2, #1
 80015e0:	2108      	movs	r1, #8
 80015e2:	483c      	ldr	r0, [pc, #240]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80015e4:	f002 fdb2 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2110      	movs	r1, #16
 80015ec:	4839      	ldr	r0, [pc, #228]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80015ee:	f002 fdad 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2120      	movs	r1, #32
 80015f6:	4837      	ldr	r0, [pc, #220]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80015f8:	f002 fda8 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2140      	movs	r1, #64	; 0x40
 8001600:	4834      	ldr	r0, [pc, #208]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001602:	f002 fda3 	bl	800414c <HAL_GPIO_WritePin>
	delay_us(200);
 8001606:	20c8      	movs	r0, #200	; 0xc8
 8001608:	f000 f8d4 	bl	80017b4 <delay_us>

	//run sequnece T5 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2102      	movs	r1, #2
 8001610:	4830      	ldr	r0, [pc, #192]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001612:	f002 fd9b 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2104      	movs	r1, #4
 800161a:	482e      	ldr	r0, [pc, #184]	; (80016d4 <runPolarizationSequence+0x1a4>)
 800161c:	f002 fd96 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001620:	2201      	movs	r2, #1
 8001622:	2108      	movs	r1, #8
 8001624:	482b      	ldr	r0, [pc, #172]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001626:	f002 fd91 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2110      	movs	r1, #16
 800162e:	4829      	ldr	r0, [pc, #164]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001630:	f002 fd8c 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	2120      	movs	r1, #32
 8001638:	4826      	ldr	r0, [pc, #152]	; (80016d4 <runPolarizationSequence+0x1a4>)
 800163a:	f002 fd87 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800163e:	2201      	movs	r2, #1
 8001640:	2140      	movs	r1, #64	; 0x40
 8001642:	4824      	ldr	r0, [pc, #144]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001644:	f002 fd82 	bl	800414c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001648:	200a      	movs	r0, #10
 800164a:	f001 fafd 	bl	8002c48 <HAL_Delay>

	//run sequnece T6 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2102      	movs	r1, #2
 8001652:	4820      	ldr	r0, [pc, #128]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001654:	f002 fd7a 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2104      	movs	r1, #4
 800165c:	481d      	ldr	r0, [pc, #116]	; (80016d4 <runPolarizationSequence+0x1a4>)
 800165e:	f002 fd75 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001662:	2201      	movs	r2, #1
 8001664:	2108      	movs	r1, #8
 8001666:	481b      	ldr	r0, [pc, #108]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001668:	f002 fd70 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2110      	movs	r1, #16
 8001670:	4818      	ldr	r0, [pc, #96]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001672:	f002 fd6b 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001676:	2201      	movs	r2, #1
 8001678:	2120      	movs	r1, #32
 800167a:	4816      	ldr	r0, [pc, #88]	; (80016d4 <runPolarizationSequence+0x1a4>)
 800167c:	f002 fd66 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001686:	f002 fd61 	bl	800414c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800168a:	2005      	movs	r0, #5
 800168c:	f001 fadc 	bl	8002c48 <HAL_Delay>
	//run sequnece T7 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2102      	movs	r1, #2
 8001694:	480f      	ldr	r0, [pc, #60]	; (80016d4 <runPolarizationSequence+0x1a4>)
 8001696:	f002 fd59 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 800169a:	2201      	movs	r2, #1
 800169c:	2104      	movs	r1, #4
 800169e:	480d      	ldr	r0, [pc, #52]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80016a0:	f002 fd54 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2108      	movs	r1, #8
 80016a8:	480a      	ldr	r0, [pc, #40]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80016aa:	f002 fd4f 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2110      	movs	r1, #16
 80016b2:	4808      	ldr	r0, [pc, #32]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80016b4:	f002 fd4a 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2120      	movs	r1, #32
 80016bc:	4805      	ldr	r0, [pc, #20]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80016be:	f002 fd45 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2140      	movs	r1, #64	; 0x40
 80016c6:	4803      	ldr	r0, [pc, #12]	; (80016d4 <runPolarizationSequence+0x1a4>)
 80016c8:	f002 fd40 	bl	800414c <HAL_GPIO_WritePin>

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200331b0 	.word	0x200331b0
 80016d4:	40020c00 	.word	0x40020c00

080016d8 <set_LED1>:

void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	460b      	mov	r3, r1
 80016e4:	71bb      	strb	r3, [r7, #6]
 80016e6:	4613      	mov	r3, r2
 80016e8:	717b      	strb	r3, [r7, #5]

	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, R);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	461a      	mov	r2, r3
 80016ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016f2:	480a      	ldr	r0, [pc, #40]	; (800171c <set_LED1+0x44>)
 80016f4:	f002 fd2a 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, G);
 80016f8:	79bb      	ldrb	r3, [r7, #6]
 80016fa:	461a      	mov	r2, r3
 80016fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001700:	4806      	ldr	r0, [pc, #24]	; (800171c <set_LED1+0x44>)
 8001702:	f002 fd23 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, B);
 8001706:	797b      	ldrb	r3, [r7, #5]
 8001708:	461a      	mov	r2, r3
 800170a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800170e:	4803      	ldr	r0, [pc, #12]	; (800171c <set_LED1+0x44>)
 8001710:	f002 fd1c 	bl	800414c <HAL_GPIO_WritePin>
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40020c00 	.word	0x40020c00

08001720 <switchingCircuitIdle>:

void switchingCircuitIdle() {
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff ffd5 	bl	80016d8 <set_LED1>
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 800172e:	2200      	movs	r2, #0
 8001730:	2101      	movs	r1, #1
 8001732:	4811      	ldr	r0, [pc, #68]	; (8001778 <switchingCircuitIdle+0x58>)
 8001734:	f002 fd0a 	bl	800414c <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2102      	movs	r1, #2
 800173c:	480e      	ldr	r0, [pc, #56]	; (8001778 <switchingCircuitIdle+0x58>)
 800173e:	f002 fd05 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001742:	2200      	movs	r2, #0
 8001744:	2104      	movs	r1, #4
 8001746:	480c      	ldr	r0, [pc, #48]	; (8001778 <switchingCircuitIdle+0x58>)
 8001748:	f002 fd00 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800174c:	2201      	movs	r2, #1
 800174e:	2108      	movs	r1, #8
 8001750:	4809      	ldr	r0, [pc, #36]	; (8001778 <switchingCircuitIdle+0x58>)
 8001752:	f002 fcfb 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2110      	movs	r1, #16
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <switchingCircuitIdle+0x58>)
 800175c:	f002 fcf6 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2120      	movs	r1, #32
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <switchingCircuitIdle+0x58>)
 8001766:	f002 fcf1 	bl	800414c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2140      	movs	r1, #64	; 0x40
 800176e:	4802      	ldr	r0, [pc, #8]	; (8001778 <switchingCircuitIdle+0x58>)
 8001770:	f002 fcec 	bl	800414c <HAL_GPIO_WritePin>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40020c00 	.word	0x40020c00

0800177c <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_TIM_PeriodElapsedCallback+0x30>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d108      	bne.n	80017a0 <HAL_TIM_PeriodElapsedCallback+0x24>
		//HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
		if (timeIndex > 0) {
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d004      	beq.n	80017a0 <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -= 10;
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	3b0a      	subs	r3, #10
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800179e:	6013      	str	r3, [r2, #0]

	if (htim->Instance == TIM6) {
		//HAL_GPIO_TogglePin(LED1_R_GPIO_Port, LED1_R_Pin);
	}

}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	40000c00 	.word	0x40000c00
 80017b0:	20000094 	.word	0x20000094

080017b4 <delay_us>:

void delay_us(uint32_t delay_us) {
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 80017bc:	4a06      	ldr	r2, [pc, #24]	; (80017d8 <delay_us+0x24>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 80017c2:	bf00      	nop
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <delay_us+0x24>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1fb      	bne.n	80017c4 <delay_us+0x10>
		;
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	20000094 	.word	0x20000094

080017dc <measureWithExternalADC>:

void measureWithExternalADC() {
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(1, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff ff77 	bl	80016d8 <set_LED1>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_1.uint8, samplesPerPeriod);
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <measureWithExternalADC+0x3c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	461a      	mov	r2, r3
 80017f2:	490a      	ldr	r1, [pc, #40]	; (800181c <measureWithExternalADC+0x40>)
 80017f4:	480a      	ldr	r0, [pc, #40]	; (8001820 <measureWithExternalADC+0x44>)
 80017f6:	f003 ff83 	bl	8005700 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 80017fa:	2100      	movs	r1, #0
 80017fc:	4809      	ldr	r0, [pc, #36]	; (8001824 <measureWithExternalADC+0x48>)
 80017fe:	f004 fd37 	bl	8006270 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 8001802:	2104      	movs	r1, #4
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <measureWithExternalADC+0x48>)
 8001806:	f004 fd33 	bl	8006270 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 800180a:	2100      	movs	r1, #0
 800180c:	4806      	ldr	r0, [pc, #24]	; (8001828 <measureWithExternalADC+0x4c>)
 800180e:	f004 fd2f 	bl	8006270 <HAL_TIM_PWM_Start_IT>
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000000 	.word	0x20000000
 800181c:	20048e90 	.word	0x20048e90
 8001820:	20033484 	.word	0x20033484
 8001824:	20033444 	.word	0x20033444
 8001828:	20007ed0 	.word	0x20007ed0

0800182c <measureWithInternalADC>:

void measureWithInternalADC() {
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 1, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2101      	movs	r1, #1
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff ff4f 	bl	80016d8 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_1.uint16, samplesPerPeriod);
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <measureWithInternalADC+0x28>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	4905      	ldr	r1, [pc, #20]	; (8001858 <measureWithInternalADC+0x2c>)
 8001842:	4806      	ldr	r0, [pc, #24]	; (800185c <measureWithInternalADC+0x30>)
 8001844:	f001 fa66 	bl	8002d14 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 8001848:	4805      	ldr	r0, [pc, #20]	; (8001860 <measureWithInternalADC+0x34>)
 800184a:	f004 fc91 	bl	8006170 <HAL_TIM_Base_Start_IT>
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	20000000 	.word	0x20000000
 8001858:	200335a8 	.word	0x200335a8
 800185c:	20033240 	.word	0x20033240
 8001860:	20033400 	.word	0x20033400

08001864 <measureWithComparator>:

void measureWithComparator() {
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 0, 1);
 8001868:	2201      	movs	r2, #1
 800186a:	2100      	movs	r1, #0
 800186c:	2000      	movs	r0, #0
 800186e:	f7ff ff33 	bl	80016d8 <set_LED1>
	// run the timer
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, buffer_comp, 8000);
 8001872:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001876:	4a03      	ldr	r2, [pc, #12]	; (8001884 <measureWithComparator+0x20>)
 8001878:	2100      	movs	r1, #0
 800187a:	4803      	ldr	r0, [pc, #12]	; (8001888 <measureWithComparator+0x24>)
 800187c:	f004 fe48 	bl	8006510 <HAL_TIM_IC_Start_DMA>
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	200000a4 	.word	0x200000a4
 8001888:	200334e8 	.word	0x200334e8

0800188c <measureFrequencyWithTimer>:

//mode = 1 ... run only once, mode = 0 ... run infinity times
void measureFrequencyWithTimer(TIM_HandleTypeDef *htim) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001894:	2100      	movs	r1, #0
 8001896:	4810      	ldr	r0, [pc, #64]	; (80018d8 <measureFrequencyWithTimer+0x4c>)
 8001898:	f004 ff36 	bl	8006708 <HAL_TIM_IC_Stop_DMA>
	sendDataOverUART();
 800189c:	f000 f830 	bl	8001900 <sendDataOverUART>
	state.remainingMeasurements--;
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <measureFrequencyWithTimer+0x50>)
 80018a2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	3b01      	subs	r3, #1
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <measureFrequencyWithTimer+0x50>)
 80018b0:	80da      	strh	r2, [r3, #6]
	//if freq should be measured only once, after the measurement, go to idle state
	if (state.remainingMeasurements == 0) {
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <measureFrequencyWithTimer+0x50>)
 80018b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d106      	bne.n	80018ca <measureFrequencyWithTimer+0x3e>
		state.compActiveState = 0;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <measureFrequencyWithTimer+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	709a      	strb	r2, [r3, #2]
		state.compSetState = 0;
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <measureFrequencyWithTimer+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	715a      	strb	r2, [r3, #5]
	} else {
		state.preparedToRunPolarizationPhase = 1;
	}

}
 80018c8:	e002      	b.n	80018d0 <measureFrequencyWithTimer+0x44>
		state.preparedToRunPolarizationPhase = 1;
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <measureFrequencyWithTimer+0x50>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	72da      	strb	r2, [r3, #11]
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	200334e8 	.word	0x200334e8
 80018dc:	200331b0 	.word	0x200331b0

080018e0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f0:	d102      	bne.n	80018f8 <HAL_TIM_IC_CaptureCallback+0x18>
		measureFrequencyWithTimer(htim);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffca 	bl	800188c <measureFrequencyWithTimer>

	}
}
 80018f8:	bf00      	nop
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <sendDataOverUART>:
	state.remainingMeasurements = 0;
	state.preparedToRunPolarizationPhase = 0;
	state.index = 0;
}

void sendDataOverUART() {
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	; 0x30
 8001904:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	857b      	strh	r3, [r7, #42]	; 0x2a
	int i = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (state.extAdcActiveState == 1) {
 800190e:	4b74      	ldr	r3, [pc, #464]	; (8001ae0 <sendDataOverUART+0x1e0>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d156      	bne.n	80019c4 <sendDataOverUART+0xc4>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8001916:	2300      	movs	r3, #0
 8001918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191a:	e019      	b.n	8001950 <sendDataOverUART+0x50>
			adc = (buffer_extAdc_1.uint16[i]);
 800191c:	4a71      	ldr	r2, [pc, #452]	; (8001ae4 <sendDataOverUART+0x1e4>)
 800191e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001924:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 8001926:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001928:	1d3b      	adds	r3, r7, #4
 800192a:	496f      	ldr	r1, [pc, #444]	; (8001ae8 <sendDataOverUART+0x1e8>)
 800192c:	4618      	mov	r0, r3
 800192e:	f007 faf1 	bl	8008f14 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fc8d 	bl	8000254 <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	1d39      	adds	r1, r7, #4
 8001940:	f04f 33ff 	mov.w	r3, #4294967295
 8001944:	4869      	ldr	r0, [pc, #420]	; (8001aec <sendDataOverUART+0x1ec>)
 8001946:	f006 fb19 	bl	8007f7c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	3301      	adds	r3, #1
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001952:	4b67      	ldr	r3, [pc, #412]	; (8001af0 <sendDataOverUART+0x1f0>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d3e0      	bcc.n	800191c <sendDataOverUART+0x1c>
			HAL_MAX_DELAY);
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800195e:	e019      	b.n	8001994 <sendDataOverUART+0x94>
			adc = (buffer_extAdc_2.uint16[i]);
 8001960:	4a64      	ldr	r2, [pc, #400]	; (8001af4 <sendDataOverUART+0x1f4>)
 8001962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001964:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001968:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 800196a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	495e      	ldr	r1, [pc, #376]	; (8001ae8 <sendDataOverUART+0x1e8>)
 8001970:	4618      	mov	r0, r3
 8001972:	f007 facf 	bl	8008f14 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fc6b 	bl	8000254 <strlen>
 800197e:	4603      	mov	r3, r0
 8001980:	b29a      	uxth	r2, r3
 8001982:	1d39      	adds	r1, r7, #4
 8001984:	f04f 33ff 	mov.w	r3, #4294967295
 8001988:	4858      	ldr	r0, [pc, #352]	; (8001aec <sendDataOverUART+0x1ec>)
 800198a:	f006 faf7 	bl	8007f7c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 800198e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001990:	3301      	adds	r3, #1
 8001992:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001996:	4b56      	ldr	r3, [pc, #344]	; (8001af0 <sendDataOverUART+0x1f0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	d3e0      	bcc.n	8001960 <sendDataOverUART+0x60>
			HAL_MAX_DELAY);
		}
		sprintf(msg_buffers, ";%hu\n", 50);
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2232      	movs	r2, #50	; 0x32
 80019a2:	4955      	ldr	r1, [pc, #340]	; (8001af8 <sendDataOverUART+0x1f8>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f007 fab5 	bl	8008f14 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fc51 	bl	8000254 <strlen>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	1d39      	adds	r1, r7, #4
 80019b8:	f04f 33ff 	mov.w	r3, #4294967295
 80019bc:	484b      	ldr	r0, [pc, #300]	; (8001aec <sendDataOverUART+0x1ec>)
 80019be:	f006 fadd 	bl	8007f7c <HAL_UART_Transmit>
			sprintf(msg_freq, "%d\n", freq);
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq), HAL_MAX_DELAY);
		}
	}

}
 80019c2:	e088      	b.n	8001ad6 <sendDataOverUART+0x1d6>
	} else if (state.intAdcActiveState == 1) {
 80019c4:	4b46      	ldr	r3, [pc, #280]	; (8001ae0 <sendDataOverUART+0x1e0>)
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d156      	bne.n	8001a7a <sendDataOverUART+0x17a>
		for (i = 0; i < samplesPerPeriod; i++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019d0:	e019      	b.n	8001a06 <sendDataOverUART+0x106>
			adc = (buffer_intAdc_1.uint16[i]);
 80019d2:	4a4a      	ldr	r2, [pc, #296]	; (8001afc <sendDataOverUART+0x1fc>)
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019da:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 80019dc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	4941      	ldr	r1, [pc, #260]	; (8001ae8 <sendDataOverUART+0x1e8>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	f007 fa96 	bl	8008f14 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fc32 	bl	8000254 <strlen>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	1d39      	adds	r1, r7, #4
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	483c      	ldr	r0, [pc, #240]	; (8001aec <sendDataOverUART+0x1ec>)
 80019fc:	f006 fabe 	bl	8007f7c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8001a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a02:	3301      	adds	r3, #1
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a08:	4b39      	ldr	r3, [pc, #228]	; (8001af0 <sendDataOverUART+0x1f0>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d3e0      	bcc.n	80019d2 <sendDataOverUART+0xd2>
		for (i = 0; i < samplesPerPeriod; i++) {
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a14:	e019      	b.n	8001a4a <sendDataOverUART+0x14a>
			adc = (buffer_intAdc_2.uint16[i]);
 8001a16:	4a3a      	ldr	r2, [pc, #232]	; (8001b00 <sendDataOverUART+0x200>)
 8001a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1e:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 8001a20:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	4930      	ldr	r1, [pc, #192]	; (8001ae8 <sendDataOverUART+0x1e8>)
 8001a26:	4618      	mov	r0, r3
 8001a28:	f007 fa74 	bl	8008f14 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fc10 	bl	8000254 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	1d39      	adds	r1, r7, #4
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	482b      	ldr	r0, [pc, #172]	; (8001aec <sendDataOverUART+0x1ec>)
 8001a40:	f006 fa9c 	bl	8007f7c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8001a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a46:	3301      	adds	r3, #1
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a4c:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <sendDataOverUART+0x1f0>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d3e0      	bcc.n	8001a16 <sendDataOverUART+0x116>
		sprintf(msg_buffers, ";%hu\n", 50);
 8001a54:	1d3b      	adds	r3, r7, #4
 8001a56:	2232      	movs	r2, #50	; 0x32
 8001a58:	4927      	ldr	r1, [pc, #156]	; (8001af8 <sendDataOverUART+0x1f8>)
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f007 fa5a 	bl	8008f14 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fbf6 	bl	8000254 <strlen>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	1d39      	adds	r1, r7, #4
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	481e      	ldr	r0, [pc, #120]	; (8001aec <sendDataOverUART+0x1ec>)
 8001a74:	f006 fa82 	bl	8007f7c <HAL_UART_Transmit>
}
 8001a78:	e02d      	b.n	8001ad6 <sendDataOverUART+0x1d6>
	} else if (state.compActiveState == 1) {
 8001a7a:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <sendDataOverUART+0x1e0>)
 8001a7c:	789b      	ldrb	r3, [r3, #2]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d129      	bne.n	8001ad6 <sendDataOverUART+0x1d6>
		for (i = 0; i < 4000; i += 2) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a86:	e022      	b.n	8001ace <sendDataOverUART+0x1ce>
			uint32_t freq = buffer_comp[i + 1] - buffer_comp[i];
 8001a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <sendDataOverUART+0x204>)
 8001a8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a92:	491c      	ldr	r1, [pc, #112]	; (8001b04 <sendDataOverUART+0x204>)
 8001a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	627b      	str	r3, [r7, #36]	; 0x24
			sprintf(msg_freq, "%d\n", freq);
 8001a9e:	f107 0314 	add.w	r3, r7, #20
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa4:	4918      	ldr	r1, [pc, #96]	; (8001b08 <sendDataOverUART+0x208>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f007 fa34 	bl	8008f14 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq), HAL_MAX_DELAY);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7fe fbcf 	bl	8000254 <strlen>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	f107 0114 	add.w	r1, r7, #20
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	480a      	ldr	r0, [pc, #40]	; (8001aec <sendDataOverUART+0x1ec>)
 8001ac4:	f006 fa5a 	bl	8007f7c <HAL_UART_Transmit>
		for (i = 0; i < 4000; i += 2) {
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aca:	3302      	adds	r3, #2
 8001acc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001ad4:	dbd8      	blt.n	8001a88 <sendDataOverUART+0x188>
}
 8001ad6:	bf00      	nop
 8001ad8:	3730      	adds	r7, #48	; 0x30
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200331b0 	.word	0x200331b0
 8001ae4:	20048e90 	.word	0x20048e90
 8001ae8:	0800981c 	.word	0x0800981c
 8001aec:	20007f50 	.word	0x20007f50
 8001af0:	20000000 	.word	0x20000000
 8001af4:	2001d8a8 	.word	0x2001d8a8
 8001af8:	08009824 	.word	0x08009824
 8001afc:	200335a8 	.word	0x200335a8
 8001b00:	20008020 	.word	0x20008020
 8001b04:	200000a4 	.word	0x200000a4
 8001b08:	0800982c 	.word	0x0800982c

08001b0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	//stop the ADC when in interrupt
	ADC1->CR2 &= ~ADC_CR2_DMA;
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001b1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b1e:	6093      	str	r3, [r2, #8]
	// if function HAL_ADC_Stop_DMA(&hadc1) would be called, it wouldn't be possible to Start DMA again.

	filledBuffers++;
 8001b20:	4b1e      	ldr	r3, [pc, #120]	; (8001b9c <HAL_ADC_ConvCpltCallback+0x90>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_ADC_ConvCpltCallback+0x90>)
 8001b2a:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffers == 1) {
 8001b2c:	4b1b      	ldr	r3, [pc, #108]	; (8001b9c <HAL_ADC_ConvCpltCallback+0x90>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d107      	bne.n	8001b44 <HAL_ADC_ConvCpltCallback+0x38>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_2.uint16, samplesPerPeriod);
 8001b34:	4b1a      	ldr	r3, [pc, #104]	; (8001ba0 <HAL_ADC_ConvCpltCallback+0x94>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	491a      	ldr	r1, [pc, #104]	; (8001ba4 <HAL_ADC_ConvCpltCallback+0x98>)
 8001b3c:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <HAL_ADC_ConvCpltCallback+0x9c>)
 8001b3e:	f001 f8e9 	bl	8002d14 <HAL_ADC_Start_DMA>
			state.intAdcSetState = 0;
		} else {
			state.preparedToRunPolarizationPhase = 1;
		}
	}
}
 8001b42:	e025      	b.n	8001b90 <HAL_ADC_ConvCpltCallback+0x84>
	else if (filledBuffers == 2) {
 8001b44:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_ADC_ConvCpltCallback+0x90>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d121      	bne.n	8001b90 <HAL_ADC_ConvCpltCallback+0x84>
		switchingCircuitIdle();
 8001b4c:	f7ff fde8 	bl	8001720 <switchingCircuitIdle>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001b50:	4816      	ldr	r0, [pc, #88]	; (8001bac <HAL_ADC_ConvCpltCallback+0xa0>)
 8001b52:	f004 fb37 	bl	80061c4 <HAL_TIM_Base_Stop_IT>
		filledBuffers = 0;
 8001b56:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <HAL_ADC_ConvCpltCallback+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001b5c:	f7ff fed0 	bl	8001900 <sendDataOverUART>
		state.remainingMeasurements--;
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001b62:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	b21a      	sxth	r2, r3
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001b70:	80da      	strh	r2, [r3, #6]
		if (state.remainingMeasurements == 0) {
 8001b72:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001b74:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d106      	bne.n	8001b8a <HAL_ADC_ConvCpltCallback+0x7e>
			state.intAdcActiveState = 0;
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	705a      	strb	r2, [r3, #1]
			state.intAdcSetState = 0;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	711a      	strb	r2, [r3, #4]
}
 8001b88:	e002      	b.n	8001b90 <HAL_ADC_ConvCpltCallback+0x84>
			state.preparedToRunPolarizationPhase = 1;
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	72da      	strb	r2, [r3, #11]
}
 8001b90:	bf00      	nop
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40012000 	.word	0x40012000
 8001b9c:	20000090 	.word	0x20000090
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20008020 	.word	0x20008020
 8001ba8:	20033240 	.word	0x20033240
 8001bac:	20033400 	.word	0x20033400
 8001bb0:	200331b0 	.word	0x200331b0

08001bb4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0c      	ldr	r2, [pc, #48]	; (8001bf4 <HAL_UART_RxCpltCallback+0x40>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d112      	bne.n	8001bec <HAL_UART_RxCpltCallback+0x38>
		state.measureTechniqueUpdated = 1;
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_UART_RxCpltCallback+0x44>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	729a      	strb	r2, [r3, #10]
		//prepareForNextMeasurements(buffer_uart_rx);
		receivedChars[receivedCharIndex++] = buffer_uart_rx[0];
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_UART_RxCpltCallback+0x48>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	b2d1      	uxtb	r1, r2
 8001bd4:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_UART_RxCpltCallback+0x48>)
 8001bd6:	7011      	strb	r1, [r2, #0]
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_UART_RxCpltCallback+0x4c>)
 8001bdc:	7819      	ldrb	r1, [r3, #0]
 8001bde:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_UART_RxCpltCallback+0x50>)
 8001be0:	5499      	strb	r1, [r3, r2]
		//wait for next incomming data
		HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 8001be2:	2201      	movs	r2, #1
 8001be4:	4906      	ldr	r1, [pc, #24]	; (8001c00 <HAL_UART_RxCpltCallback+0x4c>)
 8001be6:	4808      	ldr	r0, [pc, #32]	; (8001c08 <HAL_UART_RxCpltCallback+0x54>)
 8001be8:	f006 fa5a 	bl	80080a0 <HAL_UART_Receive_IT>
	}
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40004800 	.word	0x40004800
 8001bf8:	200331b0 	.word	0x200331b0
 8001bfc:	20033440 	.word	0x20033440
 8001c00:	2000801c 	.word	0x2000801c
 8001c04:	200333cc 	.word	0x200333cc
 8001c08:	20007f50 	.word	0x20007f50

08001c0c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	filledBuffers++;
 8001c14:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_SPI_RxCpltCallback+0x94>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_SPI_RxCpltCallback+0x94>)
 8001c1e:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffers == 1) {
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_SPI_RxCpltCallback+0x94>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d108      	bne.n	8001c3a <HAL_SPI_RxCpltCallback+0x2e>
		HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_2.uint8, samplesPerPeriod);
 8001c28:	4b1e      	ldr	r3, [pc, #120]	; (8001ca4 <HAL_SPI_RxCpltCallback+0x98>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	491d      	ldr	r1, [pc, #116]	; (8001ca8 <HAL_SPI_RxCpltCallback+0x9c>)
 8001c32:	481e      	ldr	r0, [pc, #120]	; (8001cac <HAL_SPI_RxCpltCallback+0xa0>)
 8001c34:	f003 fd64 	bl	8005700 <HAL_SPI_Receive_DMA>
		} else {
			state.preparedToRunPolarizationPhase = 1;
		}

	}
}
 8001c38:	e02e      	b.n	8001c98 <HAL_SPI_RxCpltCallback+0x8c>
	else if (filledBuffers == 2) {
 8001c3a:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <HAL_SPI_RxCpltCallback+0x94>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	2b02      	cmp	r3, #2
 8001c40:	d12a      	bne.n	8001c98 <HAL_SPI_RxCpltCallback+0x8c>
		switchingCircuitIdle();
 8001c42:	f7ff fd6d 	bl	8001720 <switchingCircuitIdle>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001c46:	2100      	movs	r1, #0
 8001c48:	4819      	ldr	r0, [pc, #100]	; (8001cb0 <HAL_SPI_RxCpltCallback+0xa4>)
 8001c4a:	f004 fb9b 	bl	8006384 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001c4e:	2104      	movs	r1, #4
 8001c50:	4817      	ldr	r0, [pc, #92]	; (8001cb0 <HAL_SPI_RxCpltCallback+0xa4>)
 8001c52:	f004 fb97 	bl	8006384 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8001c56:	2100      	movs	r1, #0
 8001c58:	4816      	ldr	r0, [pc, #88]	; (8001cb4 <HAL_SPI_RxCpltCallback+0xa8>)
 8001c5a:	f004 fb93 	bl	8006384 <HAL_TIM_PWM_Stop_IT>
		filledBuffers = 0;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_SPI_RxCpltCallback+0x94>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
		sendDataOverUART();
 8001c64:	f7ff fe4c 	bl	8001900 <sendDataOverUART>
		state.remainingMeasurements--;
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_SPI_RxCpltCallback+0xac>)
 8001c6a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	b21a      	sxth	r2, r3
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_SPI_RxCpltCallback+0xac>)
 8001c78:	80da      	strh	r2, [r3, #6]
		if (state.remainingMeasurements == 0) {
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_SPI_RxCpltCallback+0xac>)
 8001c7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d106      	bne.n	8001c92 <HAL_SPI_RxCpltCallback+0x86>
			state.extAdcActiveState = 0;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <HAL_SPI_RxCpltCallback+0xac>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
			state.extAdcSetState = 0;
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <HAL_SPI_RxCpltCallback+0xac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	70da      	strb	r2, [r3, #3]
}
 8001c90:	e002      	b.n	8001c98 <HAL_SPI_RxCpltCallback+0x8c>
			state.preparedToRunPolarizationPhase = 1;
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_SPI_RxCpltCallback+0xac>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	72da      	strb	r2, [r3, #11]
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000090 	.word	0x20000090
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	2001d8a8 	.word	0x2001d8a8
 8001cac:	20033484 	.word	0x20033484
 8001cb0:	20033444 	.word	0x20033444
 8001cb4:	20007ed0 	.word	0x20007ed0
 8001cb8:	200331b0 	.word	0x200331b0

08001cbc <parseText>:

int parseText() {
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b09e      	sub	sp, #120	; 0x78
 8001cc0:	af00      	add	r7, sp, #0
	//check if there is two times character * indicating complete command
	uint8_t i, indexOfFirstSpecialChar, indexOfSecondSpecialChar, specialCharCount = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	char msg_buffers[50];
	char receivedCommand[50];
	for (i = 0; i < strlen(receivedCommand); i++) {
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001cce:	e014      	b.n	8001cfa <parseText+0x3e>
		msg_buffers[i] = '\0';
 8001cd0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001cd4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001cd8:	4413      	add	r3, r2
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f803 2c44 	strb.w	r2, [r3, #-68]
		receivedCommand[i] = '\0';
 8001ce0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001ce4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001ce8:	4413      	add	r3, r2
 8001cea:	2200      	movs	r2, #0
 8001cec:	f803 2c78 	strb.w	r2, [r3, #-120]
	for (i = 0; i < strlen(receivedCommand); i++) {
 8001cf0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001cfa:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8001cfe:	463b      	mov	r3, r7
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe faa7 	bl	8000254 <strlen>
 8001d06:	4603      	mov	r3, r0
 8001d08:	429c      	cmp	r4, r3
 8001d0a:	d3e1      	bcc.n	8001cd0 <parseText+0x14>
	}

	for (i = 0; i < strlen(receivedChars); i++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d12:	e020      	b.n	8001d56 <parseText+0x9a>
		if (receivedChars[i] == '*') {
 8001d14:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d18:	4a9e      	ldr	r2, [pc, #632]	; (8001f94 <parseText+0x2d8>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8001d1e:	d115      	bne.n	8001d4c <parseText+0x90>
			if (specialCharCount == 0) {
 8001d20:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d104      	bne.n	8001d32 <parseText+0x76>
				indexOfFirstSpecialChar = i;
 8001d28:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d2c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001d30:	e007      	b.n	8001d42 <parseText+0x86>
			} else if (specialCharCount == 1) {
 8001d32:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d103      	bne.n	8001d42 <parseText+0x86>
				indexOfSecondSpecialChar = i;
 8001d3a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d3e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
			}
			specialCharCount++;
 8001d42:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001d46:	3301      	adds	r3, #1
 8001d48:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
	for (i = 0; i < strlen(receivedChars); i++) {
 8001d4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001d50:	3301      	adds	r3, #1
 8001d52:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d56:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8001d5a:	488e      	ldr	r0, [pc, #568]	; (8001f94 <parseText+0x2d8>)
 8001d5c:	f7fe fa7a 	bl	8000254 <strlen>
 8001d60:	4603      	mov	r3, r0
 8001d62:	429c      	cmp	r4, r3
 8001d64:	d3d6      	bcc.n	8001d14 <parseText+0x58>
		}
	}
	if (specialCharCount == 1) {
 8001d66:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d11b      	bne.n	8001da6 <parseText+0xea>
		sprintf(msg_buffers, "The command is not complete. second * is missing\n");
 8001d6e:	4b8a      	ldr	r3, [pc, #552]	; (8001f98 <parseText+0x2dc>)
 8001d70:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8001d74:	461d      	mov	r5, r3
 8001d76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d82:	682b      	ldr	r3, [r5, #0]
 8001d84:	8023      	strh	r3, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8001d86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fa62 	bl	8000254 <strlen>
 8001d90:	4603      	mov	r3, r0
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	487f      	ldr	r0, [pc, #508]	; (8001f9c <parseText+0x2e0>)
 8001d9e:	f006 f8ed 	bl	8007f7c <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		return 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e0f1      	b.n	8001f8a <parseText+0x2ce>

	} else if (specialCharCount == 2) {
 8001da6:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d14e      	bne.n	8001e4c <parseText+0x190>
		sprintf(msg_buffers, "New state was set\n");
 8001dae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001db2:	4a7b      	ldr	r2, [pc, #492]	; (8001fa0 <parseText+0x2e4>)
 8001db4:	461c      	mov	r4, r3
 8001db6:	4615      	mov	r5, r2
 8001db8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dbc:	682b      	ldr	r3, [r5, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	8022      	strh	r2, [r4, #0]
 8001dc2:	3402      	adds	r4, #2
 8001dc4:	0c1b      	lsrs	r3, r3, #16
 8001dc6:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8001dc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe fa41 	bl	8000254 <strlen>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001dda:	f04f 33ff 	mov.w	r3, #4294967295
 8001dde:	486f      	ldr	r0, [pc, #444]	; (8001f9c <parseText+0x2e0>)
 8001de0:	f006 f8cc 	bl	8007f7c <HAL_UART_Transmit>
	} else {
		return 0;
	}

	// get string between special chars
	strncpy(receivedCommand, receivedChars + indexOfFirstSpecialChar + 1, indexOfSecondSpecialChar - indexOfFirstSpecialChar - 1);
 8001de4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001de8:	3301      	adds	r3, #1
 8001dea:	4a6a      	ldr	r2, [pc, #424]	; (8001f94 <parseText+0x2d8>)
 8001dec:	1899      	adds	r1, r3, r2
 8001dee:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8001df2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f007 f8a8 	bl	8008f54 <strncpy>
	receivedCommand[indexOfSecondSpecialChar - indexOfFirstSpecialChar-1] = '\0';
 8001e04:	f897 2075 	ldrb.w	r2, [r7, #117]	; 0x75
 8001e08:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001e14:	4413      	add	r3, r2
 8001e16:	2200      	movs	r2, #0
 8001e18:	f803 2c78 	strb.w	r2, [r3, #-120]

	//if specialCharCount == 2
	// Extract the first token - command

	char *command = strtok(receivedCommand, ":");
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4961      	ldr	r1, [pc, #388]	; (8001fa4 <parseText+0x2e8>)
 8001e20:	4618      	mov	r0, r3
 8001e22:	f007 f8ad 	bl	8008f80 <strtok>
 8001e26:	6738      	str	r0, [r7, #112]	; 0x70
	char *method = strtok(NULL, ":");
 8001e28:	495e      	ldr	r1, [pc, #376]	; (8001fa4 <parseText+0x2e8>)
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	f007 f8a8 	bl	8008f80 <strtok>
 8001e30:	66f8      	str	r0, [r7, #108]	; 0x6c
	char *count = strtok(NULL, ":");
 8001e32:	495c      	ldr	r1, [pc, #368]	; (8001fa4 <parseText+0x2e8>)
 8001e34:	2000      	movs	r0, #0
 8001e36:	f007 f8a3 	bl	8008f80 <strtok>
 8001e3a:	66b8      	str	r0, [r7, #104]	; 0x68

	//*IDN*
	if (strcmp(command, "IDN") == 0) {
 8001e3c:	495a      	ldr	r1, [pc, #360]	; (8001fa8 <parseText+0x2ec>)
 8001e3e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001e40:	f7fe f9fe 	bl	8000240 <strcmp>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d140      	bne.n	8001ecc <parseText+0x210>
 8001e4a:	e023      	b.n	8001e94 <parseText+0x1d8>
	} else if (specialCharCount > 2) {
 8001e4c:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d91d      	bls.n	8001e90 <parseText+0x1d4>
		sprintf(msg_buffers, "The command is wrong. too many * were received\n");
 8001e54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e58:	4a54      	ldr	r2, [pc, #336]	; (8001fac <parseText+0x2f0>)
 8001e5a:	461c      	mov	r4, r3
 8001e5c:	4615      	mov	r5, r2
 8001e5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8001e6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe f9ee 	bl	8000254 <strlen>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001e80:	f04f 33ff 	mov.w	r3, #4294967295
 8001e84:	4845      	ldr	r0, [pc, #276]	; (8001f9c <parseText+0x2e0>)
 8001e86:	f006 f879 	bl	8007f7c <HAL_UART_Transmit>
		return -1; // receivedChars needs to be cleared
 8001e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e8e:	e07c      	b.n	8001f8a <parseText+0x2ce>
		return 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	e07a      	b.n	8001f8a <parseText+0x2ce>
		sprintf(msg_buffers, "This is proton precession magnetometer, ver. 1\n");
 8001e94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e98:	4a45      	ldr	r2, [pc, #276]	; (8001fb0 <parseText+0x2f4>)
 8001e9a:	461c      	mov	r4, r3
 8001e9c:	4615      	mov	r5, r2
 8001e9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ea4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ea6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8001eae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe f9ce 	bl	8000254 <strlen>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec4:	4835      	ldr	r0, [pc, #212]	; (8001f9c <parseText+0x2e0>)
 8001ec6:	f006 f859 	bl	8007f7c <HAL_UART_Transmit>
 8001eca:	e045      	b.n	8001f58 <parseText+0x29c>
		HAL_MAX_DELAY);
	}
	//*MEAS:method:count*
	else if (strcmp(command, "MEAS") == 0) {
 8001ecc:	4939      	ldr	r1, [pc, #228]	; (8001fb4 <parseText+0x2f8>)
 8001ece:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001ed0:	f7fe f9b6 	bl	8000240 <strcmp>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d13e      	bne.n	8001f58 <parseText+0x29c>

		if (strcmp(method, "extADC") == 0) {
 8001eda:	4937      	ldr	r1, [pc, #220]	; (8001fb8 <parseText+0x2fc>)
 8001edc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001ede:	f7fe f9af 	bl	8000240 <strcmp>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d10c      	bne.n	8001f02 <parseText+0x246>
			state.extAdcSetState = 1;
 8001ee8:	4b34      	ldr	r3, [pc, #208]	; (8001fbc <parseText+0x300>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	70da      	strb	r2, [r3, #3]
			state.setMeasurements = 1;
 8001eee:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <parseText+0x300>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	811a      	strh	r2, [r3, #8]
			state.preparedToRunPolarizationPhase = 1;
 8001ef4:	4b31      	ldr	r3, [pc, #196]	; (8001fbc <parseText+0x300>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <parseText+0x300>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	729a      	strb	r2, [r3, #10]
 8001f00:	e026      	b.n	8001f50 <parseText+0x294>
		} else if (strcmp(method, "intADC") == 0) {
 8001f02:	492f      	ldr	r1, [pc, #188]	; (8001fc0 <parseText+0x304>)
 8001f04:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001f06:	f7fe f99b 	bl	8000240 <strcmp>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10c      	bne.n	8001f2a <parseText+0x26e>

			state.intAdcSetState = 1;
 8001f10:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <parseText+0x300>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	711a      	strb	r2, [r3, #4]
			state.setMeasurements = 1;
 8001f16:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <parseText+0x300>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	811a      	strh	r2, [r3, #8]
			state.preparedToRunPolarizationPhase = 1;
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <parseText+0x300>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <parseText+0x300>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	729a      	strb	r2, [r3, #10]
 8001f28:	e012      	b.n	8001f50 <parseText+0x294>
		} else if (strcmp(method, "comp") == 0) {
 8001f2a:	4926      	ldr	r1, [pc, #152]	; (8001fc4 <parseText+0x308>)
 8001f2c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001f2e:	f7fe f987 	bl	8000240 <strcmp>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10b      	bne.n	8001f50 <parseText+0x294>
			state.compSetState = 1;
 8001f38:	4b20      	ldr	r3, [pc, #128]	; (8001fbc <parseText+0x300>)
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	715a      	strb	r2, [r3, #5]
			state.setMeasurements = 1;
 8001f3e:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <parseText+0x300>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	811a      	strh	r2, [r3, #8]
			state.preparedToRunPolarizationPhase = 1;
 8001f44:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <parseText+0x300>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001f4a:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <parseText+0x300>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	729a      	strb	r2, [r3, #10]
		} else /* default: */
		{

		}
		if (strcmp(count, "INF") == 0) {
 8001f50:	491d      	ldr	r1, [pc, #116]	; (8001fc8 <parseText+0x30c>)
 8001f52:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001f54:	f7fe f974 	bl	8000240 <strcmp>
	}
	/* more else if clauses */
	else /* default: */
	{
	}
	receivedCharIndex = 0;
 8001f58:	4b1c      	ldr	r3, [pc, #112]	; (8001fcc <parseText+0x310>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < strlen(receivedChars); i++) {
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001f64:	e009      	b.n	8001f7a <parseText+0x2be>
		receivedChars[i] = '\0';
 8001f66:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <parseText+0x2d8>)
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < strlen(receivedChars); i++) {
 8001f70:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001f74:	3301      	adds	r3, #1
 8001f76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001f7a:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <parseText+0x2d8>)
 8001f80:	f7fe f968 	bl	8000254 <strlen>
 8001f84:	4603      	mov	r3, r0
 8001f86:	429c      	cmp	r4, r3
 8001f88:	d3ed      	bcc.n	8001f66 <parseText+0x2aa>
	}
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3778      	adds	r7, #120	; 0x78
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bdb0      	pop	{r4, r5, r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200333cc 	.word	0x200333cc
 8001f98:	08009830 	.word	0x08009830
 8001f9c:	20007f50 	.word	0x20007f50
 8001fa0:	08009864 	.word	0x08009864
 8001fa4:	080098a8 	.word	0x080098a8
 8001fa8:	080098ac 	.word	0x080098ac
 8001fac:	08009878 	.word	0x08009878
 8001fb0:	080098b0 	.word	0x080098b0
 8001fb4:	080098e0 	.word	0x080098e0
 8001fb8:	080098e8 	.word	0x080098e8
 8001fbc:	200331b0 	.word	0x200331b0
 8001fc0:	080098f0 	.word	0x080098f0
 8001fc4:	080098f8 	.word	0x080098f8
 8001fc8:	08009900 	.word	0x08009900
 8001fcc:	20033440 	.word	0x20033440

08001fd0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <HAL_MspInit+0x44>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <HAL_MspInit+0x44>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <HAL_MspInit+0x44>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_MspInit+0x44>)
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <HAL_MspInit+0x44>)
 8002004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002008:	6453      	str	r3, [r2, #68]	; 0x44
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_MspInit+0x44>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002012:	603b      	str	r3, [r7, #0]
 8002014:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800

08002028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a2c      	ldr	r2, [pc, #176]	; (80020f8 <HAL_ADC_MspInit+0xd0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d152      	bne.n	80020f0 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800204a:	4b2c      	ldr	r3, [pc, #176]	; (80020fc <HAL_ADC_MspInit+0xd4>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <HAL_ADC_MspInit+0xd4>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_ADC_MspInit+0xd4>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_ADC_MspInit+0xd4>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	4a25      	ldr	r2, [pc, #148]	; (80020fc <HAL_ADC_MspInit+0xd4>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	6313      	str	r3, [r2, #48]	; 0x30
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_ADC_MspInit+0xd4>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60fb      	str	r3, [r7, #12]
 8002078:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 800207a:	2301      	movs	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800207e:	2303      	movs	r3, #3
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	481c      	ldr	r0, [pc, #112]	; (8002100 <HAL_ADC_MspInit+0xd8>)
 800208e:	f001 feb3 	bl	8003df8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 8002094:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <HAL_ADC_MspInit+0xe0>)
 8002096:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 800209a:	2200      	movs	r2, #0
 800209c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800209e:	4b19      	ldr	r3, [pc, #100]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a4:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 80020ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 80020b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80020b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 80020bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80020c2:	4b10      	ldr	r3, [pc, #64]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020c8:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020ce:	4b0d      	ldr	r3, [pc, #52]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020d4:	480b      	ldr	r0, [pc, #44]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 80020d6:	f001 faf7 	bl	80036c8 <HAL_DMA_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 80020e0:	f7ff ff76 	bl	8001fd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38
 80020ea:	4a06      	ldr	r2, [pc, #24]	; (8002104 <HAL_ADC_MspInit+0xdc>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40012000 	.word	0x40012000
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000
 8002104:	2003336c 	.word	0x2003336c
 8002108:	40026470 	.word	0x40026470

0800210c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08c      	sub	sp, #48	; 0x30
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002114:	f107 031c 	add.w	r3, r7, #28
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
 800211e:	609a      	str	r2, [r3, #8]
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a3d      	ldr	r2, [pc, #244]	; (8002220 <HAL_I2C_MspInit+0x114>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d128      	bne.n	8002180 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <HAL_I2C_MspInit+0x118>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	4a3c      	ldr	r2, [pc, #240]	; (8002224 <HAL_I2C_MspInit+0x118>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6313      	str	r3, [r2, #48]	; 0x30
 800213a:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <HAL_I2C_MspInit+0x118>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
 8002144:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002146:	23c0      	movs	r3, #192	; 0xc0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800214a:	2312      	movs	r3, #18
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800214e:	2301      	movs	r3, #1
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002152:	2303      	movs	r3, #3
 8002154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002156:	2304      	movs	r3, #4
 8002158:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	4619      	mov	r1, r3
 8002160:	4831      	ldr	r0, [pc, #196]	; (8002228 <HAL_I2C_MspInit+0x11c>)
 8002162:	f001 fe49 	bl	8003df8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002166:	4b2f      	ldr	r3, [pc, #188]	; (8002224 <HAL_I2C_MspInit+0x118>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a2e      	ldr	r2, [pc, #184]	; (8002224 <HAL_I2C_MspInit+0x118>)
 800216c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b2c      	ldr	r3, [pc, #176]	; (8002224 <HAL_I2C_MspInit+0x118>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800217e:	e04a      	b.n	8002216 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a29      	ldr	r2, [pc, #164]	; (800222c <HAL_I2C_MspInit+0x120>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d145      	bne.n	8002216 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800218a:	4b26      	ldr	r3, [pc, #152]	; (8002224 <HAL_I2C_MspInit+0x118>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	4a25      	ldr	r2, [pc, #148]	; (8002224 <HAL_I2C_MspInit+0x118>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6313      	str	r3, [r2, #48]	; 0x30
 8002196:	4b23      	ldr	r3, [pc, #140]	; (8002224 <HAL_I2C_MspInit+0x118>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4b20      	ldr	r3, [pc, #128]	; (8002224 <HAL_I2C_MspInit+0x118>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a1f      	ldr	r2, [pc, #124]	; (8002224 <HAL_I2C_MspInit+0x118>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_I2C_MspInit+0x118>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021c0:	2312      	movs	r3, #18
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021cc:	2304      	movs	r3, #4
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	4816      	ldr	r0, [pc, #88]	; (8002230 <HAL_I2C_MspInit+0x124>)
 80021d8:	f001 fe0e 	bl	8003df8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021e2:	2312      	movs	r3, #18
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80021ee:	2304      	movs	r3, #4
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	4619      	mov	r1, r3
 80021f8:	480e      	ldr	r0, [pc, #56]	; (8002234 <HAL_I2C_MspInit+0x128>)
 80021fa:	f001 fdfd 	bl	8003df8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_I2C_MspInit+0x118>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <HAL_I2C_MspInit+0x118>)
 8002204:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002208:	6413      	str	r3, [r2, #64]	; 0x40
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <HAL_I2C_MspInit+0x118>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
}
 8002216:	bf00      	nop
 8002218:	3730      	adds	r7, #48	; 0x30
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40005400 	.word	0x40005400
 8002224:	40023800 	.word	0x40023800
 8002228:	40020400 	.word	0x40020400
 800222c:	40005c00 	.word	0x40005c00
 8002230:	40020800 	.word	0x40020800
 8002234:	40020000 	.word	0x40020000

08002238 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	; 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 031c 	add.w	r3, r7, #28
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a46      	ldr	r2, [pc, #280]	; (8002370 <HAL_SPI_MspInit+0x138>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d158      	bne.n	800230c <HAL_SPI_MspInit+0xd4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800225a:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a45      	ldr	r2, [pc, #276]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 8002260:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800226e:	61bb      	str	r3, [r7, #24]
 8002270:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	4b40      	ldr	r3, [pc, #256]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	4a3f      	ldr	r2, [pc, #252]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6313      	str	r3, [r2, #48]	; 0x30
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 800228a:	23b0      	movs	r3, #176	; 0xb0
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228e:	2302      	movs	r3, #2
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002296:	2303      	movs	r3, #3
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800229a:	2305      	movs	r3, #5
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 031c 	add.w	r3, r7, #28
 80022a2:	4619      	mov	r1, r3
 80022a4:	4834      	ldr	r0, [pc, #208]	; (8002378 <HAL_SPI_MspInit+0x140>)
 80022a6:	f001 fda7 	bl	8003df8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80022aa:	4b34      	ldr	r3, [pc, #208]	; (800237c <HAL_SPI_MspInit+0x144>)
 80022ac:	4a34      	ldr	r2, [pc, #208]	; (8002380 <HAL_SPI_MspInit+0x148>)
 80022ae:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80022b0:	4b32      	ldr	r3, [pc, #200]	; (800237c <HAL_SPI_MspInit+0x144>)
 80022b2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80022b6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022b8:	4b30      	ldr	r3, [pc, #192]	; (800237c <HAL_SPI_MspInit+0x144>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022be:	4b2f      	ldr	r3, [pc, #188]	; (800237c <HAL_SPI_MspInit+0x144>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022c4:	4b2d      	ldr	r3, [pc, #180]	; (800237c <HAL_SPI_MspInit+0x144>)
 80022c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ca:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022cc:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_SPI_MspInit+0x144>)
 80022ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022d2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_SPI_MspInit+0x144>)
 80022d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022da:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80022dc:	4b27      	ldr	r3, [pc, #156]	; (800237c <HAL_SPI_MspInit+0x144>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_SPI_MspInit+0x144>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_SPI_MspInit+0x144>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80022ee:	4823      	ldr	r0, [pc, #140]	; (800237c <HAL_SPI_MspInit+0x144>)
 80022f0:	f001 f9ea 	bl	80036c8 <HAL_DMA_Init>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80022fa:	f7ff fe69 	bl	8001fd0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a1e      	ldr	r2, [pc, #120]	; (800237c <HAL_SPI_MspInit+0x144>)
 8002302:	659a      	str	r2, [r3, #88]	; 0x58
 8002304:	4a1d      	ldr	r2, [pc, #116]	; (800237c <HAL_SPI_MspInit+0x144>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800230a:	e02c      	b.n	8002366 <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI4)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <HAL_SPI_MspInit+0x14c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d127      	bne.n	8002366 <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 8002318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231a:	4a16      	ldr	r2, [pc, #88]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 800231c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002320:	6453      	str	r3, [r2, #68]	; 0x44
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 8002324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002326:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	4a10      	ldr	r2, [pc, #64]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 8002334:	f043 0310 	orr.w	r3, r3, #16
 8002338:	6313      	str	r3, [r2, #48]	; 0x30
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_SPI_MspInit+0x13c>)
 800233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002346:	2374      	movs	r3, #116	; 0x74
 8002348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234a:	2302      	movs	r3, #2
 800234c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002352:	2303      	movs	r3, #3
 8002354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002356:	2305      	movs	r3, #5
 8002358:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4619      	mov	r1, r3
 8002360:	4809      	ldr	r0, [pc, #36]	; (8002388 <HAL_SPI_MspInit+0x150>)
 8002362:	f001 fd49 	bl	8003df8 <HAL_GPIO_Init>
}
 8002366:	bf00      	nop
 8002368:	3730      	adds	r7, #48	; 0x30
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40013000 	.word	0x40013000
 8002374:	40023800 	.word	0x40023800
 8002378:	40020000 	.word	0x40020000
 800237c:	20048e30 	.word	0x20048e30
 8002380:	40026410 	.word	0x40026410
 8002384:	40013400 	.word	0x40013400
 8002388:	40021000 	.word	0x40021000

0800238c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a41      	ldr	r2, [pc, #260]	; (80024a0 <HAL_TIM_Base_MspInit+0x114>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d114      	bne.n	80023c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800239e:	4b41      	ldr	r3, [pc, #260]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	4a40      	ldr	r2, [pc, #256]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6453      	str	r3, [r2, #68]	; 0x44
 80023aa:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	61fb      	str	r3, [r7, #28]
 80023b4:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2101      	movs	r1, #1
 80023ba:	201b      	movs	r0, #27
 80023bc:	f001 f94d 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023c0:	201b      	movs	r0, #27
 80023c2:	f001 f966 	bl	8003692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80023c6:	e066      	b.n	8002496 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a36      	ldr	r2, [pc, #216]	; (80024a8 <HAL_TIM_Base_MspInit+0x11c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d114      	bne.n	80023fc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023d2:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4a33      	ldr	r2, [pc, #204]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 80023d8:	f043 0302 	orr.w	r3, r3, #2
 80023dc:	6413      	str	r3, [r2, #64]	; 0x40
 80023de:	4b31      	ldr	r3, [pc, #196]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	61bb      	str	r3, [r7, #24]
 80023e8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2101      	movs	r1, #1
 80023ee:	201d      	movs	r0, #29
 80023f0:	f001 f933 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023f4:	201d      	movs	r0, #29
 80023f6:	f001 f94c 	bl	8003692 <HAL_NVIC_EnableIRQ>
}
 80023fa:	e04c      	b.n	8002496 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM5)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a2a      	ldr	r2, [pc, #168]	; (80024ac <HAL_TIM_Base_MspInit+0x120>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d114      	bne.n	8002430 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002406:	4b27      	ldr	r3, [pc, #156]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	6413      	str	r3, [r2, #64]	; 0x40
 8002412:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2101      	movs	r1, #1
 8002422:	2032      	movs	r0, #50	; 0x32
 8002424:	f001 f919 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002428:	2032      	movs	r0, #50	; 0x32
 800242a:	f001 f932 	bl	8003692 <HAL_NVIC_EnableIRQ>
}
 800242e:	e032      	b.n	8002496 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM6)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <HAL_TIM_Base_MspInit+0x124>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d114      	bne.n	8002464 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800243a:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a19      	ldr	r2, [pc, #100]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002452:	2200      	movs	r2, #0
 8002454:	2100      	movs	r1, #0
 8002456:	2036      	movs	r0, #54	; 0x36
 8002458:	f001 f8ff 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800245c:	2036      	movs	r0, #54	; 0x36
 800245e:	f001 f918 	bl	8003692 <HAL_NVIC_EnableIRQ>
}
 8002462:	e018      	b.n	8002496 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM8)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a12      	ldr	r2, [pc, #72]	; (80024b4 <HAL_TIM_Base_MspInit+0x128>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d113      	bne.n	8002496 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800246e:	4b0d      	ldr	r3, [pc, #52]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	4a0c      	ldr	r2, [pc, #48]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 8002474:	f043 0302 	orr.w	r3, r3, #2
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	4b0a      	ldr	r3, [pc, #40]	; (80024a4 <HAL_TIM_Base_MspInit+0x118>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	60fb      	str	r3, [r7, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8002486:	2200      	movs	r2, #0
 8002488:	2101      	movs	r1, #1
 800248a:	202e      	movs	r0, #46	; 0x2e
 800248c:	f001 f8e5 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002490:	202e      	movs	r0, #46	; 0x2e
 8002492:	f001 f8fe 	bl	8003692 <HAL_NVIC_EnableIRQ>
}
 8002496:	bf00      	nop
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40010000 	.word	0x40010000
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40000400 	.word	0x40000400
 80024ac:	40000c00 	.word	0x40000c00
 80024b0:	40001000 	.word	0x40001000
 80024b4:	40010400 	.word	0x40010400

080024b8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	; 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d8:	d160      	bne.n	800259c <HAL_TIM_IC_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <HAL_TIM_IC_MspInit+0xec>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	4a31      	ldr	r2, [pc, #196]	; (80025a4 <HAL_TIM_IC_MspInit+0xec>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6413      	str	r3, [r2, #64]	; 0x40
 80024e6:	4b2f      	ldr	r3, [pc, #188]	; (80025a4 <HAL_TIM_IC_MspInit+0xec>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <HAL_TIM_IC_MspInit+0xec>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a2b      	ldr	r2, [pc, #172]	; (80025a4 <HAL_TIM_IC_MspInit+0xec>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b29      	ldr	r3, [pc, #164]	; (80025a4 <HAL_TIM_IC_MspInit+0xec>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 800250a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800250e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002510:	2302      	movs	r3, #2
 8002512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002518:	2300      	movs	r3, #0
 800251a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800251c:	2301      	movs	r3, #1
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	4820      	ldr	r0, [pc, #128]	; (80025a8 <HAL_TIM_IC_MspInit+0xf0>)
 8002528:	f001 fc66 	bl	8003df8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800252c:	4b1f      	ldr	r3, [pc, #124]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 800252e:	4a20      	ldr	r2, [pc, #128]	; (80025b0 <HAL_TIM_IC_MspInit+0xf8>)
 8002530:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 8002534:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002538:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800253a:	4b1c      	ldr	r3, [pc, #112]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 8002542:	2200      	movs	r2, #0
 8002544:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 8002548:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800254c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800254e:	4b17      	ldr	r3, [pc, #92]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 8002550:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002554:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 8002558:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800255c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 8002560:	2200      	movs	r2, #0
 8002562:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002564:	4b11      	ldr	r3, [pc, #68]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 8002566:	2200      	movs	r2, #0
 8002568:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 800256c:	2200      	movs	r2, #0
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002570:	480e      	ldr	r0, [pc, #56]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 8002572:	f001 f8a9 	bl	80036c8 <HAL_DMA_Init>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <HAL_TIM_IC_MspInit+0xc8>
    {
      Error_Handler();
 800257c:	f7ff fd28 	bl	8001fd0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a0a      	ldr	r2, [pc, #40]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_TIM_IC_MspInit+0xf4>)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800258c:	2200      	movs	r2, #0
 800258e:	2101      	movs	r1, #1
 8002590:	201c      	movs	r0, #28
 8002592:	f001 f862 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002596:	201c      	movs	r0, #28
 8002598:	f001 f87b 	bl	8003692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800259c:	bf00      	nop
 800259e:	3728      	adds	r7, #40	; 0x28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020000 	.word	0x40020000
 80025ac:	20007df0 	.word	0x20007df0
 80025b0:	40026088 	.word	0x40026088

080025b4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <HAL_TIM_PWM_MspInit+0x44>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d113      	bne.n	80025ee <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025c6:	4b0d      	ldr	r3, [pc, #52]	; (80025fc <HAL_TIM_PWM_MspInit+0x48>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a0c      	ldr	r2, [pc, #48]	; (80025fc <HAL_TIM_PWM_MspInit+0x48>)
 80025cc:	f043 0304 	orr.w	r3, r3, #4
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_TIM_PWM_MspInit+0x48>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2101      	movs	r1, #1
 80025e2:	201e      	movs	r0, #30
 80025e4:	f001 f839 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025e8:	201e      	movs	r0, #30
 80025ea:	f001 f852 	bl	8003692 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80025ee:	bf00      	nop
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40000800 	.word	0x40000800
 80025fc:	40023800 	.word	0x40023800

08002600 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08c      	sub	sp, #48	; 0x30
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	605a      	str	r2, [r3, #4]
 8002612:	609a      	str	r2, [r3, #8]
 8002614:	60da      	str	r2, [r3, #12]
 8002616:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a45      	ldr	r2, [pc, #276]	; (8002734 <HAL_TIM_MspPostInit+0x134>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d11d      	bne.n	800265e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002622:	4b45      	ldr	r3, [pc, #276]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	4a44      	ldr	r2, [pc, #272]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 8002628:	f043 0310 	orr.w	r3, r3, #16
 800262c:	6313      	str	r3, [r2, #48]	; 0x30
 800262e:	4b42      	ldr	r3, [pc, #264]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	61bb      	str	r3, [r7, #24]
 8002638:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 800263a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800263e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002640:	2302      	movs	r3, #2
 8002642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800264c:	2301      	movs	r3, #1
 800264e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002650:	f107 031c 	add.w	r3, r7, #28
 8002654:	4619      	mov	r1, r3
 8002656:	4839      	ldr	r0, [pc, #228]	; (800273c <HAL_TIM_MspPostInit+0x13c>)
 8002658:	f001 fbce 	bl	8003df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800265c:	e065      	b.n	800272a <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a37      	ldr	r2, [pc, #220]	; (8002740 <HAL_TIM_MspPostInit+0x140>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d11c      	bne.n	80026a2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002668:	4b33      	ldr	r3, [pc, #204]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	4a32      	ldr	r2, [pc, #200]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6313      	str	r3, [r2, #48]	; 0x30
 8002674:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 8002680:	2340      	movs	r3, #64	; 0x40
 8002682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002684:	2302      	movs	r3, #2
 8002686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002690:	2302      	movs	r3, #2
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 031c 	add.w	r3, r7, #28
 8002698:	4619      	mov	r1, r3
 800269a:	482a      	ldr	r0, [pc, #168]	; (8002744 <HAL_TIM_MspPostInit+0x144>)
 800269c:	f001 fbac 	bl	8003df8 <HAL_GPIO_Init>
}
 80026a0:	e043      	b.n	800272a <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a28      	ldr	r2, [pc, #160]	; (8002748 <HAL_TIM_MspPostInit+0x148>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d11d      	bne.n	80026e8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026ac:	4b22      	ldr	r3, [pc, #136]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b0:	4a21      	ldr	r2, [pc, #132]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 80026b2:	f043 0308 	orr.w	r3, r3, #8
 80026b6:	6313      	str	r3, [r2, #48]	; 0x30
 80026b8:	4b1f      	ldr	r3, [pc, #124]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 80026c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026d6:	2302      	movs	r3, #2
 80026d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 80026da:	f107 031c 	add.w	r3, r7, #28
 80026de:	4619      	mov	r1, r3
 80026e0:	481a      	ldr	r0, [pc, #104]	; (800274c <HAL_TIM_MspPostInit+0x14c>)
 80026e2:	f001 fb89 	bl	8003df8 <HAL_GPIO_Init>
}
 80026e6:	e020      	b.n	800272a <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a18      	ldr	r2, [pc, #96]	; (8002750 <HAL_TIM_MspPostInit+0x150>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d11b      	bne.n	800272a <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026f2:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	4a10      	ldr	r2, [pc, #64]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	6313      	str	r3, [r2, #48]	; 0x30
 80026fe:	4b0e      	ldr	r3, [pc, #56]	; (8002738 <HAL_TIM_MspPostInit+0x138>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	60fb      	str	r3, [r7, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 800270a:	2340      	movs	r3, #64	; 0x40
 800270c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270e:	2302      	movs	r3, #2
 8002710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002716:	2300      	movs	r3, #0
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800271a:	2303      	movs	r3, #3
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4619      	mov	r1, r3
 8002724:	480b      	ldr	r0, [pc, #44]	; (8002754 <HAL_TIM_MspPostInit+0x154>)
 8002726:	f001 fb67 	bl	8003df8 <HAL_GPIO_Init>
}
 800272a:	bf00      	nop
 800272c:	3730      	adds	r7, #48	; 0x30
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40010000 	.word	0x40010000
 8002738:	40023800 	.word	0x40023800
 800273c:	40021000 	.word	0x40021000
 8002740:	40000400 	.word	0x40000400
 8002744:	40020000 	.word	0x40020000
 8002748:	40000800 	.word	0x40000800
 800274c:	40020c00 	.word	0x40020c00
 8002750:	40010400 	.word	0x40010400
 8002754:	40020800 	.word	0x40020800

08002758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b092      	sub	sp, #72	; 0x48
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a79      	ldr	r2, [pc, #484]	; (800295c <HAL_UART_MspInit+0x204>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d129      	bne.n	80027ce <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800277a:	4b79      	ldr	r3, [pc, #484]	; (8002960 <HAL_UART_MspInit+0x208>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a78      	ldr	r2, [pc, #480]	; (8002960 <HAL_UART_MspInit+0x208>)
 8002780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b76      	ldr	r3, [pc, #472]	; (8002960 <HAL_UART_MspInit+0x208>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	4b73      	ldr	r3, [pc, #460]	; (8002960 <HAL_UART_MspInit+0x208>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	4a72      	ldr	r2, [pc, #456]	; (8002960 <HAL_UART_MspInit+0x208>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6313      	str	r3, [r2, #48]	; 0x30
 800279e:	4b70      	ldr	r3, [pc, #448]	; (8002960 <HAL_UART_MspInit+0x208>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = UART5_RX_Pin|UART5_TX_Pin;
 80027aa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80027ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027bc:	2308      	movs	r3, #8
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027c4:	4619      	mov	r1, r3
 80027c6:	4867      	ldr	r0, [pc, #412]	; (8002964 <HAL_UART_MspInit+0x20c>)
 80027c8:	f001 fb16 	bl	8003df8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80027cc:	e0c1      	b.n	8002952 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==UART7)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a65      	ldr	r2, [pc, #404]	; (8002968 <HAL_UART_MspInit+0x210>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d129      	bne.n	800282c <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART7_CLK_ENABLE();
 80027d8:	4b61      	ldr	r3, [pc, #388]	; (8002960 <HAL_UART_MspInit+0x208>)
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	4a60      	ldr	r2, [pc, #384]	; (8002960 <HAL_UART_MspInit+0x208>)
 80027de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027e2:	6413      	str	r3, [r2, #64]	; 0x40
 80027e4:	4b5e      	ldr	r3, [pc, #376]	; (8002960 <HAL_UART_MspInit+0x208>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027f0:	4b5b      	ldr	r3, [pc, #364]	; (8002960 <HAL_UART_MspInit+0x208>)
 80027f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f4:	4a5a      	ldr	r2, [pc, #360]	; (8002960 <HAL_UART_MspInit+0x208>)
 80027f6:	f043 0310 	orr.w	r3, r3, #16
 80027fa:	6313      	str	r3, [r2, #48]	; 0x30
 80027fc:	4b58      	ldr	r3, [pc, #352]	; (8002960 <HAL_UART_MspInit+0x208>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002808:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800280c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800281a:	2308      	movs	r3, #8
 800281c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800281e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002822:	4619      	mov	r1, r3
 8002824:	4851      	ldr	r0, [pc, #324]	; (800296c <HAL_UART_MspInit+0x214>)
 8002826:	f001 fae7 	bl	8003df8 <HAL_GPIO_Init>
}
 800282a:	e092      	b.n	8002952 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a4f      	ldr	r2, [pc, #316]	; (8002970 <HAL_UART_MspInit+0x218>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d129      	bne.n	800288a <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002836:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <HAL_UART_MspInit+0x208>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a49      	ldr	r2, [pc, #292]	; (8002960 <HAL_UART_MspInit+0x208>)
 800283c:	f043 0310 	orr.w	r3, r3, #16
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b47      	ldr	r3, [pc, #284]	; (8002960 <HAL_UART_MspInit+0x208>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	623b      	str	r3, [r7, #32]
 800284c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b44      	ldr	r3, [pc, #272]	; (8002960 <HAL_UART_MspInit+0x208>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a43      	ldr	r2, [pc, #268]	; (8002960 <HAL_UART_MspInit+0x208>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b41      	ldr	r3, [pc, #260]	; (8002960 <HAL_UART_MspInit+0x208>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	61fb      	str	r3, [r7, #28]
 8002864:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 8002866:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286c:	2302      	movs	r3, #2
 800286e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002878:	2304      	movs	r3, #4
 800287a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002880:	4619      	mov	r1, r3
 8002882:	4838      	ldr	r0, [pc, #224]	; (8002964 <HAL_UART_MspInit+0x20c>)
 8002884:	f001 fab8 	bl	8003df8 <HAL_GPIO_Init>
}
 8002888:	e063      	b.n	8002952 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART2)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a39      	ldr	r2, [pc, #228]	; (8002974 <HAL_UART_MspInit+0x21c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d128      	bne.n	80028e6 <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002894:	4b32      	ldr	r3, [pc, #200]	; (8002960 <HAL_UART_MspInit+0x208>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a31      	ldr	r2, [pc, #196]	; (8002960 <HAL_UART_MspInit+0x208>)
 800289a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <HAL_UART_MspInit+0x208>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	61bb      	str	r3, [r7, #24]
 80028aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ac:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <HAL_UART_MspInit+0x208>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <HAL_UART_MspInit+0x208>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6313      	str	r3, [r2, #48]	; 0x30
 80028b8:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_UART_MspInit+0x208>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	f003 0301 	and.w	r3, r3, #1
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 80028c4:	230c      	movs	r3, #12
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c8:	2302      	movs	r3, #2
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d0:	2303      	movs	r3, #3
 80028d2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028d4:	2307      	movs	r3, #7
 80028d6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028dc:	4619      	mov	r1, r3
 80028de:	4826      	ldr	r0, [pc, #152]	; (8002978 <HAL_UART_MspInit+0x220>)
 80028e0:	f001 fa8a 	bl	8003df8 <HAL_GPIO_Init>
}
 80028e4:	e035      	b.n	8002952 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a24      	ldr	r2, [pc, #144]	; (800297c <HAL_UART_MspInit+0x224>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d130      	bne.n	8002952 <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_UART_MspInit+0x208>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <HAL_UART_MspInit+0x208>)
 80028f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fa:	6413      	str	r3, [r2, #64]	; 0x40
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <HAL_UART_MspInit+0x208>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002908:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_UART_MspInit+0x208>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290c:	4a14      	ldr	r2, [pc, #80]	; (8002960 <HAL_UART_MspInit+0x208>)
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	6313      	str	r3, [r2, #48]	; 0x30
 8002914:	4b12      	ldr	r3, [pc, #72]	; (8002960 <HAL_UART_MspInit+0x208>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 8002920:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002926:	2302      	movs	r3, #2
 8002928:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292e:	2303      	movs	r3, #3
 8002930:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002932:	2307      	movs	r3, #7
 8002934:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800293a:	4619      	mov	r1, r3
 800293c:	4809      	ldr	r0, [pc, #36]	; (8002964 <HAL_UART_MspInit+0x20c>)
 800293e:	f001 fa5b 	bl	8003df8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	2027      	movs	r0, #39	; 0x27
 8002948:	f000 fe87 	bl	800365a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800294c:	2027      	movs	r0, #39	; 0x27
 800294e:	f000 fea0 	bl	8003692 <HAL_NVIC_EnableIRQ>
}
 8002952:	bf00      	nop
 8002954:	3748      	adds	r7, #72	; 0x48
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40005000 	.word	0x40005000
 8002960:	40023800 	.word	0x40023800
 8002964:	40020400 	.word	0x40020400
 8002968:	40007800 	.word	0x40007800
 800296c:	40021000 	.word	0x40021000
 8002970:	40011000 	.word	0x40011000
 8002974:	40004400 	.word	0x40004400
 8002978:	40020000 	.word	0x40020000
 800297c:	40004800 	.word	0x40004800

08002980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800298e:	b480      	push	{r7}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002992:	e7fe      	b.n	8002992 <HardFault_Handler+0x4>

08002994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002998:	e7fe      	b.n	8002998 <MemManage_Handler+0x4>

0800299a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800299a:	b480      	push	{r7}
 800299c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800299e:	e7fe      	b.n	800299e <BusFault_Handler+0x4>

080029a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a4:	e7fe      	b.n	80029a4 <UsageFault_Handler+0x4>

080029a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr

080029c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029c6:	bf00      	nop
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029d4:	f000 f918 	bl	8002c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029d8:	bf00      	nop
 80029da:	bd80      	pop	{r7, pc}

080029dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <DMA1_Stream5_IRQHandler+0x10>)
 80029e2:	f000 ffa1 	bl	8003928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20007df0 	.word	0x20007df0

080029f0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <TIM1_CC_IRQHandler+0x10>)
 80029f6:	f003 ff55 	bl	80068a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20033444 	.word	0x20033444

08002a04 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <TIM2_IRQHandler+0x10>)
 8002a0a:	f003 ff4b 	bl	80068a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200334e8 	.word	0x200334e8

08002a18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <TIM3_IRQHandler+0x10>)
 8002a1e:	f003 ff41 	bl	80068a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20033170 	.word	0x20033170

08002a2c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a30:	4802      	ldr	r0, [pc, #8]	; (8002a3c <TIM4_IRQHandler+0x10>)
 8002a32:	f003 ff37 	bl	80068a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20007f10 	.word	0x20007f10

08002a40 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a44:	4802      	ldr	r0, [pc, #8]	; (8002a50 <USART3_IRQHandler+0x10>)
 8002a46:	f005 fbcd 	bl	80081e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	20007f50 	.word	0x20007f50

08002a54 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002a58:	4802      	ldr	r0, [pc, #8]	; (8002a64 <TIM8_CC_IRQHandler+0x10>)
 8002a5a:	f003 ff23 	bl	80068a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	20007ed0 	.word	0x20007ed0

08002a68 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002a6c:	4802      	ldr	r0, [pc, #8]	; (8002a78 <TIM5_IRQHandler+0x10>)
 8002a6e:	f003 ff19 	bl	80068a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20033130 	.word	0x20033130

08002a7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a80:	4802      	ldr	r0, [pc, #8]	; (8002a8c <TIM6_DAC_IRQHandler+0x10>)
 8002a82:	f003 ff0f 	bl	80068a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20033400 	.word	0x20033400

08002a90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <DMA2_Stream0_IRQHandler+0x10>)
 8002a96:	f000 ff47 	bl	8003928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20048e30 	.word	0x20048e30

08002aa4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <DMA2_Stream4_IRQHandler+0x10>)
 8002aaa:	f000 ff3d 	bl	8003928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	2003336c 	.word	0x2003336c

08002ab8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <_sbrk+0x50>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <_sbrk+0x16>
		heap_end = &end;
 8002ac8:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <_sbrk+0x50>)
 8002aca:	4a10      	ldr	r2, [pc, #64]	; (8002b0c <_sbrk+0x54>)
 8002acc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ace:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <_sbrk+0x50>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <_sbrk+0x50>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4413      	add	r3, r2
 8002adc:	466a      	mov	r2, sp
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d907      	bls.n	8002af2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002ae2:	f006 f9e5 	bl	8008eb0 <__errno>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	230c      	movs	r3, #12
 8002aea:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002aec:	f04f 33ff 	mov.w	r3, #4294967295
 8002af0:	e006      	b.n	8002b00 <_sbrk+0x48>
	}

	heap_end += incr;
 8002af2:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <_sbrk+0x50>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	4a03      	ldr	r2, [pc, #12]	; (8002b08 <_sbrk+0x50>)
 8002afc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000098 	.word	0x20000098
 8002b0c:	2005e720 	.word	0x2005e720

08002b10 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <SystemInit+0x28>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <SystemInit+0x28>)
 8002b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <SystemInit+0x28>)
 8002b26:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b2a:	609a      	str	r2, [r3, #8]
#endif
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b74 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b42:	e003      	b.n	8002b4c <LoopCopyDataInit>

08002b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b4a:	3104      	adds	r1, #4

08002b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b4c:	480b      	ldr	r0, [pc, #44]	; (8002b7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b54:	d3f6      	bcc.n	8002b44 <CopyDataInit>
  ldr  r2, =_sbss
 8002b56:	4a0b      	ldr	r2, [pc, #44]	; (8002b84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b58:	e002      	b.n	8002b60 <LoopFillZerobss>

08002b5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b5c:	f842 3b04 	str.w	r3, [r2], #4

08002b60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b60:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b64:	d3f9      	bcc.n	8002b5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b66:	f7ff ffd3 	bl	8002b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b6a:	f006 f9a7 	bl	8008ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b6e:	f7fd fd4f 	bl	8000610 <main>
  bx  lr    
 8002b72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b74:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002b78:	08009968 	.word	0x08009968
  ldr  r0, =_sdata
 8002b7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b80:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8002b84:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8002b88:	2005e720 	.word	0x2005e720

08002b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b8c:	e7fe      	b.n	8002b8c <ADC_IRQHandler>

08002b8e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b92:	2003      	movs	r0, #3
 8002b94:	f000 fd56 	bl	8003644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f000 f805 	bl	8002ba8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002b9e:	f7ff fa1f 	bl	8001fe0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_InitTick+0x54>)
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_InitTick+0x58>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fd71 	bl	80036ae <HAL_SYSTICK_Config>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e00e      	b.n	8002bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b0f      	cmp	r3, #15
 8002bda:	d80a      	bhi.n	8002bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	f04f 30ff 	mov.w	r0, #4294967295
 8002be4:	f000 fd39 	bl	800365a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002be8:	4a06      	ldr	r2, [pc, #24]	; (8002c04 <HAL_InitTick+0x5c>)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	20000004 	.word	0x20000004
 8002c00:	2000000c 	.word	0x2000000c
 8002c04:	20000008 	.word	0x20000008

08002c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_IncTick+0x20>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <HAL_IncTick+0x24>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4413      	add	r3, r2
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_IncTick+0x24>)
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	2000000c 	.word	0x2000000c
 8002c2c:	2005e718 	.word	0x2005e718

08002c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  return uwTick;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <HAL_GetTick+0x14>)
 8002c36:	681b      	ldr	r3, [r3, #0]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	2005e718 	.word	0x2005e718

08002c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c50:	f7ff ffee 	bl	8002c30 <HAL_GetTick>
 8002c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c60:	d005      	beq.n	8002c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c62:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <HAL_Delay+0x40>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c6e:	bf00      	nop
 8002c70:	f7ff ffde 	bl	8002c30 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d8f7      	bhi.n	8002c70 <HAL_Delay+0x28>
  {
  }
}
 8002c80:	bf00      	nop
 8002c82:	3710      	adds	r7, #16
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	2000000c 	.word	0x2000000c

08002c8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e031      	b.n	8002d06 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d109      	bne.n	8002cbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7ff f9bc 	bl	8002028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 0310 	and.w	r3, r3, #16
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d116      	bne.n	8002cf8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <HAL_ADC_Init+0x84>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	f043 0202 	orr.w	r2, r3, #2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa66 	bl	80031ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f023 0303 	bic.w	r3, r3, #3
 8002cee:	f043 0201 	orr.w	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8002cf6:	e001      	b.n	8002cfc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3710      	adds	r7, #16
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	ffffeefd 	.word	0xffffeefd

08002d14 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADC_Start_DMA+0x1e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0c7      	b.n	8002ec2 <HAL_ADC_Start_DMA+0x1ae>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	f003 0301 	and.w	r3, r3, #1
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d018      	beq.n	8002d7a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689a      	ldr	r2, [r3, #8]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f042 0201 	orr.w	r2, r2, #1
 8002d56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002d58:	4b5c      	ldr	r3, [pc, #368]	; (8002ecc <HAL_ADC_Start_DMA+0x1b8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a5c      	ldr	r2, [pc, #368]	; (8002ed0 <HAL_ADC_Start_DMA+0x1bc>)
 8002d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d62:	0c9a      	lsrs	r2, r3, #18
 8002d64:	4613      	mov	r3, r2
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	4413      	add	r3, r2
 8002d6a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002d6c:	e002      	b.n	8002d74 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1f9      	bne.n	8002d6e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	f040 809b 	bne.w	8002ec0 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d8e:	4b51      	ldr	r3, [pc, #324]	; (8002ed4 <HAL_ADC_Start_DMA+0x1c0>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d007      	beq.n	8002db8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002db0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc4:	d106      	bne.n	8002dd4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f023 0206 	bic.w	r2, r3, #6
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	645a      	str	r2, [r3, #68]	; 0x44
 8002dd2:	e002      	b.n	8002dda <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de6:	4a3c      	ldr	r2, [pc, #240]	; (8002ed8 <HAL_ADC_Start_DMA+0x1c4>)
 8002de8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	4a3b      	ldr	r2, [pc, #236]	; (8002edc <HAL_ADC_Start_DMA+0x1c8>)
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	4a3a      	ldr	r2, [pc, #232]	; (8002ee0 <HAL_ADC_Start_DMA+0x1cc>)
 8002df8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e02:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002e12:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e22:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	334c      	adds	r3, #76	; 0x4c
 8002e2e:	4619      	mov	r1, r3
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f000 fcf6 	bl	8003824 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <HAL_ADC_Start_DMA+0x1d0>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10f      	bne.n	8002e64 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d136      	bne.n	8002ec0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e60:	609a      	str	r2, [r3, #8]
 8002e62:	e02d      	b.n	8002ec0 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <HAL_ADC_Start_DMA+0x1d4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d10e      	bne.n	8002e8c <HAL_ADC_Start_DMA+0x178>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002e8a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002e8c:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_ADC_Start_DMA+0x1d0>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d113      	bne.n	8002ec0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a13      	ldr	r2, [pc, #76]	; (8002eec <HAL_ADC_Start_DMA+0x1d8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d10e      	bne.n	8002ec0 <HAL_ADC_Start_DMA+0x1ac>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ebe:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000004 	.word	0x20000004
 8002ed0:	431bde83 	.word	0x431bde83
 8002ed4:	fffff8fe 	.word	0xfffff8fe
 8002ed8:	080033a1 	.word	0x080033a1
 8002edc:	0800345b 	.word	0x0800345b
 8002ee0:	08003477 	.word	0x08003477
 8002ee4:	40012300 	.word	0x40012300
 8002ee8:	40012000 	.word	0x40012000
 8002eec:	40012200 	.word	0x40012200

08002ef0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x1c>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e12a      	b.n	800318a <HAL_ADC_ConfigChannel+0x272>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b09      	cmp	r3, #9
 8002f42:	d93a      	bls.n	8002fba <HAL_ADC_ConfigChannel+0xa2>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f4c:	d035      	beq.n	8002fba <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68d9      	ldr	r1, [r3, #12]
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	4413      	add	r3, r2
 8002f62:	3b1e      	subs	r3, #30
 8002f64:	2207      	movs	r2, #7
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	400a      	ands	r2, r1
 8002f72:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a87      	ldr	r2, [pc, #540]	; (8003198 <HAL_ADC_ConfigChannel+0x280>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d10a      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68d9      	ldr	r1, [r3, #12]
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	061a      	lsls	r2, r3, #24
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f92:	e035      	b.n	8003000 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68d9      	ldr	r1, [r3, #12]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4403      	add	r3, r0
 8002fac:	3b1e      	subs	r3, #30
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fb8:	e022      	b.n	8003000 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6919      	ldr	r1, [r3, #16]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	2207      	movs	r2, #7
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	400a      	ands	r2, r1
 8002fdc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6919      	ldr	r1, [r3, #16]
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	689a      	ldr	r2, [r3, #8]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4403      	add	r3, r0
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	2b06      	cmp	r3, #6
 8003006:	d824      	bhi.n	8003052 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4413      	add	r3, r2
 8003018:	3b05      	subs	r3, #5
 800301a:	221f      	movs	r2, #31
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43da      	mvns	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	400a      	ands	r2, r1
 8003028:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b29b      	uxth	r3, r3
 8003036:	4618      	mov	r0, r3
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4613      	mov	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	4413      	add	r3, r2
 8003042:	3b05      	subs	r3, #5
 8003044:	fa00 f203 	lsl.w	r2, r0, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	635a      	str	r2, [r3, #52]	; 0x34
 8003050:	e04c      	b.n	80030ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d824      	bhi.n	80030a4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	4413      	add	r3, r2
 800306a:	3b23      	subs	r3, #35	; 0x23
 800306c:	221f      	movs	r2, #31
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	43da      	mvns	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	400a      	ands	r2, r1
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	b29b      	uxth	r3, r3
 8003088:	4618      	mov	r0, r3
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4413      	add	r3, r2
 8003094:	3b23      	subs	r3, #35	; 0x23
 8003096:	fa00 f203 	lsl.w	r2, r0, r3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
 80030a2:	e023      	b.n	80030ec <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4413      	add	r3, r2
 80030b4:	3b41      	subs	r3, #65	; 0x41
 80030b6:	221f      	movs	r2, #31
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43da      	mvns	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	400a      	ands	r2, r1
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	4618      	mov	r0, r3
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	3b41      	subs	r3, #65	; 0x41
 80030e0:	fa00 f203 	lsl.w	r2, r0, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a2a      	ldr	r2, [pc, #168]	; (800319c <HAL_ADC_ConfigChannel+0x284>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10a      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1f4>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030fe:	d105      	bne.n	800310c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003100:	4b27      	ldr	r3, [pc, #156]	; (80031a0 <HAL_ADC_ConfigChannel+0x288>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <HAL_ADC_ConfigChannel+0x288>)
 8003106:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800310a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a22      	ldr	r2, [pc, #136]	; (800319c <HAL_ADC_ConfigChannel+0x284>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d109      	bne.n	800312a <HAL_ADC_ConfigChannel+0x212>
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b12      	cmp	r3, #18
 800311c:	d105      	bne.n	800312a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <HAL_ADC_ConfigChannel+0x288>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <HAL_ADC_ConfigChannel+0x288>)
 8003124:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003128:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1b      	ldr	r2, [pc, #108]	; (800319c <HAL_ADC_ConfigChannel+0x284>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d125      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x268>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a17      	ldr	r2, [pc, #92]	; (8003198 <HAL_ADC_ConfigChannel+0x280>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d003      	beq.n	8003146 <HAL_ADC_ConfigChannel+0x22e>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2b11      	cmp	r3, #17
 8003144:	d11c      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003146:	4b16      	ldr	r3, [pc, #88]	; (80031a0 <HAL_ADC_ConfigChannel+0x288>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4a15      	ldr	r2, [pc, #84]	; (80031a0 <HAL_ADC_ConfigChannel+0x288>)
 800314c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003150:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a10      	ldr	r2, [pc, #64]	; (8003198 <HAL_ADC_ConfigChannel+0x280>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d111      	bne.n	8003180 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800315c:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <HAL_ADC_ConfigChannel+0x28c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a11      	ldr	r2, [pc, #68]	; (80031a8 <HAL_ADC_ConfigChannel+0x290>)
 8003162:	fba2 2303 	umull	r2, r3, r2, r3
 8003166:	0c9a      	lsrs	r2, r3, #18
 8003168:	4613      	mov	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003172:	e002      	b.n	800317a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	3b01      	subs	r3, #1
 8003178:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f9      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	10000012 	.word	0x10000012
 800319c:	40012000 	.word	0x40012000
 80031a0:	40012300 	.word	0x40012300
 80031a4:	20000004 	.word	0x20000004
 80031a8:	431bde83 	.word	0x431bde83

080031ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80031b4:	4b78      	ldr	r3, [pc, #480]	; (8003398 <ADC_Init+0x1ec>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4a77      	ldr	r2, [pc, #476]	; (8003398 <ADC_Init+0x1ec>)
 80031ba:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80031be:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80031c0:	4b75      	ldr	r3, [pc, #468]	; (8003398 <ADC_Init+0x1ec>)
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	4973      	ldr	r1, [pc, #460]	; (8003398 <ADC_Init+0x1ec>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	021a      	lsls	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6859      	ldr	r1, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003222:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6899      	ldr	r1, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	4a58      	ldr	r2, [pc, #352]	; (800339c <ADC_Init+0x1f0>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d022      	beq.n	8003286 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689a      	ldr	r2, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800324e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6899      	ldr	r1, [r3, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003270:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6899      	ldr	r1, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	430a      	orrs	r2, r1
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	e00f      	b.n	80032a6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80032a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f022 0202 	bic.w	r2, r2, #2
 80032b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6899      	ldr	r1, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	005a      	lsls	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d01b      	beq.n	800330c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6859      	ldr	r1, [r3, #4]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	3b01      	subs	r3, #1
 8003300:	035a      	lsls	r2, r3, #13
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	e007      	b.n	800331c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	3b01      	subs	r3, #1
 8003338:	051a      	lsls	r2, r3, #20
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6899      	ldr	r1, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800335e:	025a      	lsls	r2, r3, #9
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6899      	ldr	r1, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	029a      	lsls	r2, r3, #10
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	609a      	str	r2, [r3, #8]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	40012300 	.word	0x40012300
 800339c:	0f000001 	.word	0x0f000001

080033a0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d13c      	bne.n	8003434 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d12b      	bne.n	800342c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d127      	bne.n	800342c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d006      	beq.n	80033f8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d119      	bne.n	800342c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0220 	bic.w	r2, r2, #32
 8003406:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d105      	bne.n	800342c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	f043 0201 	orr.w	r2, r3, #1
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f7fe fb6d 	bl	8001b0c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003432:	e00e      	b.n	8003452 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	f003 0310 	and.w	r3, r3, #16
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7ff fd5f 	bl	8002f04 <HAL_ADC_ErrorCallback>
}
 8003446:	e004      	b.n	8003452 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
}
 8003452:	bf00      	nop
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003466:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003468:	68f8      	ldr	r0, [r7, #12]
 800346a:	f7ff fd41 	bl	8002ef0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800346e:	bf00      	nop
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b084      	sub	sp, #16
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2240      	movs	r2, #64	; 0x40
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f043 0204 	orr.w	r2, r3, #4
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f7ff fd34 	bl	8002f04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <__NVIC_SetPriorityGrouping+0x40>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034c0:	4013      	ands	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80034cc:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <__NVIC_SetPriorityGrouping+0x44>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034d2:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <__NVIC_SetPriorityGrouping+0x40>)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	60d3      	str	r3, [r2, #12]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00
 80034e8:	05fa0000 	.word	0x05fa0000

080034ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034f0:	4b04      	ldr	r3, [pc, #16]	; (8003504 <__NVIC_GetPriorityGrouping+0x18>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	0a1b      	lsrs	r3, r3, #8
 80034f6:	f003 0307 	and.w	r3, r3, #7
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	2b00      	cmp	r3, #0
 8003518:	db0b      	blt.n	8003532 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	f003 021f 	and.w	r2, r3, #31
 8003520:	4907      	ldr	r1, [pc, #28]	; (8003540 <__NVIC_EnableIRQ+0x38>)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	2001      	movs	r0, #1
 800352a:	fa00 f202 	lsl.w	r2, r0, r2
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	e000e100 	.word	0xe000e100

08003544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	6039      	str	r1, [r7, #0]
 800354e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003554:	2b00      	cmp	r3, #0
 8003556:	db0a      	blt.n	800356e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	b2da      	uxtb	r2, r3
 800355c:	490c      	ldr	r1, [pc, #48]	; (8003590 <__NVIC_SetPriority+0x4c>)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	0112      	lsls	r2, r2, #4
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	440b      	add	r3, r1
 8003568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800356c:	e00a      	b.n	8003584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	b2da      	uxtb	r2, r3
 8003572:	4908      	ldr	r1, [pc, #32]	; (8003594 <__NVIC_SetPriority+0x50>)
 8003574:	79fb      	ldrb	r3, [r7, #7]
 8003576:	f003 030f 	and.w	r3, r3, #15
 800357a:	3b04      	subs	r3, #4
 800357c:	0112      	lsls	r2, r2, #4
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	440b      	add	r3, r1
 8003582:	761a      	strb	r2, [r3, #24]
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	e000e100 	.word	0xe000e100
 8003594:	e000ed00 	.word	0xe000ed00

08003598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003598:	b480      	push	{r7}
 800359a:	b089      	sub	sp, #36	; 0x24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f1c3 0307 	rsb	r3, r3, #7
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	bf28      	it	cs
 80035b6:	2304      	movcs	r3, #4
 80035b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3304      	adds	r3, #4
 80035be:	2b06      	cmp	r3, #6
 80035c0:	d902      	bls.n	80035c8 <NVIC_EncodePriority+0x30>
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	3b03      	subs	r3, #3
 80035c6:	e000      	b.n	80035ca <NVIC_EncodePriority+0x32>
 80035c8:	2300      	movs	r3, #0
 80035ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035cc:	f04f 32ff 	mov.w	r2, #4294967295
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	fa02 f303 	lsl.w	r3, r2, r3
 80035d6:	43da      	mvns	r2, r3
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	401a      	ands	r2, r3
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035e0:	f04f 31ff 	mov.w	r1, #4294967295
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ea:	43d9      	mvns	r1, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035f0:	4313      	orrs	r3, r2
         );
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3724      	adds	r7, #36	; 0x24
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
	...

08003600 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003610:	d301      	bcc.n	8003616 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003612:	2301      	movs	r3, #1
 8003614:	e00f      	b.n	8003636 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003616:	4a0a      	ldr	r2, [pc, #40]	; (8003640 <SysTick_Config+0x40>)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3b01      	subs	r3, #1
 800361c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800361e:	210f      	movs	r1, #15
 8003620:	f04f 30ff 	mov.w	r0, #4294967295
 8003624:	f7ff ff8e 	bl	8003544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <SysTick_Config+0x40>)
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <SysTick_Config+0x40>)
 8003630:	2207      	movs	r2, #7
 8003632:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	e000e010 	.word	0xe000e010

08003644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff ff29 	bl	80034a4 <__NVIC_SetPriorityGrouping>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800365a:	b580      	push	{r7, lr}
 800365c:	b086      	sub	sp, #24
 800365e:	af00      	add	r7, sp, #0
 8003660:	4603      	mov	r3, r0
 8003662:	60b9      	str	r1, [r7, #8]
 8003664:	607a      	str	r2, [r7, #4]
 8003666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003668:	2300      	movs	r3, #0
 800366a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800366c:	f7ff ff3e 	bl	80034ec <__NVIC_GetPriorityGrouping>
 8003670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	6978      	ldr	r0, [r7, #20]
 8003678:	f7ff ff8e 	bl	8003598 <NVIC_EncodePriority>
 800367c:	4602      	mov	r2, r0
 800367e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003682:	4611      	mov	r1, r2
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff ff5d 	bl	8003544 <__NVIC_SetPriority>
}
 800368a:	bf00      	nop
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	4603      	mov	r3, r0
 800369a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800369c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff ff31 	bl	8003508 <__NVIC_EnableIRQ>
}
 80036a6:	bf00      	nop
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b082      	sub	sp, #8
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff ffa2 	bl	8003600 <SysTick_Config>
 80036bc:	4603      	mov	r3, r0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036d4:	f7ff faac 	bl	8002c30 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e099      	b.n	8003818 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003704:	e00f      	b.n	8003726 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003706:	f7ff fa93 	bl	8002c30 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	2b05      	cmp	r3, #5
 8003712:	d908      	bls.n	8003726 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2220      	movs	r2, #32
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2203      	movs	r2, #3
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e078      	b.n	8003818 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e8      	bne.n	8003706 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	4b38      	ldr	r3, [pc, #224]	; (8003820 <HAL_DMA_Init+0x158>)
 8003740:	4013      	ands	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003752:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800375e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800376a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	2b04      	cmp	r3, #4
 800377e:	d107      	bne.n	8003790 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	4313      	orrs	r3, r2
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0307 	bic.w	r3, r3, #7
 80037a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d117      	bne.n	80037ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d00e      	beq.n	80037ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fa99 	bl	8003d04 <DMA_CheckFifoParam>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2240      	movs	r2, #64	; 0x40
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037e6:	2301      	movs	r3, #1
 80037e8:	e016      	b.n	8003818 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa50 	bl	8003c98 <DMA_CalcBaseAndBitshift>
 80037f8:	4603      	mov	r3, r0
 80037fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003800:	223f      	movs	r2, #63	; 0x3f
 8003802:	409a      	lsls	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	e010803f 	.word	0xe010803f

08003824 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800383a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_DMA_Start_IT+0x26>
 8003846:	2302      	movs	r3, #2
 8003848:	e048      	b.n	80038dc <HAL_DMA_Start_IT+0xb8>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b01      	cmp	r3, #1
 800385c:	d137      	bne.n	80038ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2202      	movs	r2, #2
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68b9      	ldr	r1, [r7, #8]
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f9e2 	bl	8003c3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	223f      	movs	r2, #63	; 0x3f
 800387e:	409a      	lsls	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0216 	orr.w	r2, r2, #22
 8003892:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695a      	ldr	r2, [r3, #20]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80038a2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d007      	beq.n	80038bc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0208 	orr.w	r2, r2, #8
 80038ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f042 0201 	orr.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	e005      	b.n	80038da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
 80038d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038da:	7dfb      	ldrb	r3, [r7, #23]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d004      	beq.n	8003902 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e00c      	b.n	800391c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2205      	movs	r2, #5
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f022 0201 	bic.w	r2, r2, #1
 8003918:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003934:	4b92      	ldr	r3, [pc, #584]	; (8003b80 <HAL_DMA_IRQHandler+0x258>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a92      	ldr	r2, [pc, #584]	; (8003b84 <HAL_DMA_IRQHandler+0x25c>)
 800393a:	fba2 2303 	umull	r2, r3, r2, r3
 800393e:	0a9b      	lsrs	r3, r3, #10
 8003940:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	2208      	movs	r2, #8
 8003954:	409a      	lsls	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	4013      	ands	r3, r2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d01a      	beq.n	8003994 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0204 	bic.w	r2, r2, #4
 800397a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003980:	2208      	movs	r2, #8
 8003982:	409a      	lsls	r2, r3
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	f043 0201 	orr.w	r2, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2201      	movs	r2, #1
 800399a:	409a      	lsls	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d012      	beq.n	80039ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00b      	beq.n	80039ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	2201      	movs	r2, #1
 80039b8:	409a      	lsls	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c2:	f043 0202 	orr.w	r2, r3, #2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ce:	2204      	movs	r2, #4
 80039d0:	409a      	lsls	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4013      	ands	r3, r2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d012      	beq.n	8003a00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00b      	beq.n	8003a00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ec:	2204      	movs	r2, #4
 80039ee:	409a      	lsls	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f8:	f043 0204 	orr.w	r2, r3, #4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a04:	2210      	movs	r2, #16
 8003a06:	409a      	lsls	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d043      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d03c      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a22:	2210      	movs	r2, #16
 8003a24:	409a      	lsls	r2, r3
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d018      	beq.n	8003a6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d108      	bne.n	8003a58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d024      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	4798      	blx	r3
 8003a56:	e01f      	b.n	8003a98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d01b      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
 8003a68:	e016      	b.n	8003a98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d107      	bne.n	8003a88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0208 	bic.w	r2, r2, #8
 8003a86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 808e 	beq.w	8003bc6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8086 	beq.w	8003bc6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003abe:	2220      	movs	r2, #32
 8003ac0:	409a      	lsls	r2, r3
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b05      	cmp	r3, #5
 8003ad0:	d136      	bne.n	8003b40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0216 	bic.w	r2, r2, #22
 8003ae0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695a      	ldr	r2, [r3, #20]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003af0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d103      	bne.n	8003b02 <HAL_DMA_IRQHandler+0x1da>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0208 	bic.w	r2, r2, #8
 8003b10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b16:	223f      	movs	r2, #63	; 0x3f
 8003b18:	409a      	lsls	r2, r3
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d07d      	beq.n	8003c32 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
        }
        return;
 8003b3e:	e078      	b.n	8003c32 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01c      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d108      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d030      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4798      	blx	r3
 8003b6c:	e02b      	b.n	8003bc6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d027      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	4798      	blx	r3
 8003b7e:	e022      	b.n	8003bc6 <HAL_DMA_IRQHandler+0x29e>
 8003b80:	20000004 	.word	0x20000004
 8003b84:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10f      	bne.n	8003bb6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0210 	bic.w	r2, r2, #16
 8003ba4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d032      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d022      	beq.n	8003c20 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2205      	movs	r2, #5
 8003bde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0201 	bic.w	r2, r2, #1
 8003bf0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	60bb      	str	r3, [r7, #8]
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d307      	bcc.n	8003c0e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1f2      	bne.n	8003bf2 <HAL_DMA_IRQHandler+0x2ca>
 8003c0c:	e000      	b.n	8003c10 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003c0e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d005      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	4798      	blx	r3
 8003c30:	e000      	b.n	8003c34 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003c32:	bf00      	nop
    }
  }
}
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop

08003c3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
 8003c48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b40      	cmp	r3, #64	; 0x40
 8003c68:	d108      	bne.n	8003c7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003c7a:	e007      	b.n	8003c8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	60da      	str	r2, [r3, #12]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	3b10      	subs	r3, #16
 8003ca8:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <DMA_CalcBaseAndBitshift+0x60>)
 8003caa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cae:	091b      	lsrs	r3, r3, #4
 8003cb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cb2:	4a12      	ldr	r2, [pc, #72]	; (8003cfc <DMA_CalcBaseAndBitshift+0x64>)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d908      	bls.n	8003cd8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4b0c      	ldr	r3, [pc, #48]	; (8003d00 <DMA_CalcBaseAndBitshift+0x68>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	1d1a      	adds	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	659a      	str	r2, [r3, #88]	; 0x58
 8003cd6:	e006      	b.n	8003ce6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <DMA_CalcBaseAndBitshift+0x68>)
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	aaaaaaab 	.word	0xaaaaaaab
 8003cfc:	0800991c 	.word	0x0800991c
 8003d00:	fffffc00 	.word	0xfffffc00

08003d04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d11f      	bne.n	8003d5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	2b03      	cmp	r3, #3
 8003d22:	d855      	bhi.n	8003dd0 <DMA_CheckFifoParam+0xcc>
 8003d24:	a201      	add	r2, pc, #4	; (adr r2, 8003d2c <DMA_CheckFifoParam+0x28>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d3d 	.word	0x08003d3d
 8003d30:	08003d4f 	.word	0x08003d4f
 8003d34:	08003d3d 	.word	0x08003d3d
 8003d38:	08003dd1 	.word	0x08003dd1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d045      	beq.n	8003dd4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d4c:	e042      	b.n	8003dd4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d56:	d13f      	bne.n	8003dd8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d5c:	e03c      	b.n	8003dd8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d66:	d121      	bne.n	8003dac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d836      	bhi.n	8003ddc <DMA_CheckFifoParam+0xd8>
 8003d6e:	a201      	add	r2, pc, #4	; (adr r2, 8003d74 <DMA_CheckFifoParam+0x70>)
 8003d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d74:	08003d85 	.word	0x08003d85
 8003d78:	08003d8b 	.word	0x08003d8b
 8003d7c:	08003d85 	.word	0x08003d85
 8003d80:	08003d9d 	.word	0x08003d9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	73fb      	strb	r3, [r7, #15]
      break;
 8003d88:	e02f      	b.n	8003dea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d024      	beq.n	8003de0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9a:	e021      	b.n	8003de0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003da4:	d11e      	bne.n	8003de4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003daa:	e01b      	b.n	8003de4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d902      	bls.n	8003db8 <DMA_CheckFifoParam+0xb4>
 8003db2:	2b03      	cmp	r3, #3
 8003db4:	d003      	beq.n	8003dbe <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003db6:	e018      	b.n	8003dea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	73fb      	strb	r3, [r7, #15]
      break;
 8003dbc:	e015      	b.n	8003dea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00e      	beq.n	8003de8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8003dce:	e00b      	b.n	8003de8 <DMA_CheckFifoParam+0xe4>
      break;
 8003dd0:	bf00      	nop
 8003dd2:	e00a      	b.n	8003dea <DMA_CheckFifoParam+0xe6>
      break;
 8003dd4:	bf00      	nop
 8003dd6:	e008      	b.n	8003dea <DMA_CheckFifoParam+0xe6>
      break;
 8003dd8:	bf00      	nop
 8003dda:	e006      	b.n	8003dea <DMA_CheckFifoParam+0xe6>
      break;
 8003ddc:	bf00      	nop
 8003dde:	e004      	b.n	8003dea <DMA_CheckFifoParam+0xe6>
      break;
 8003de0:	bf00      	nop
 8003de2:	e002      	b.n	8003dea <DMA_CheckFifoParam+0xe6>
      break;   
 8003de4:	bf00      	nop
 8003de6:	e000      	b.n	8003dea <DMA_CheckFifoParam+0xe6>
      break;
 8003de8:	bf00      	nop
    }
  } 
  
  return status; 
 8003dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b089      	sub	sp, #36	; 0x24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e02:	2300      	movs	r3, #0
 8003e04:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e12:	2300      	movs	r3, #0
 8003e14:	61fb      	str	r3, [r7, #28]
 8003e16:	e175      	b.n	8004104 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e18:	2201      	movs	r2, #1
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	f040 8164 	bne.w	80040fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d00b      	beq.n	8003e56 <HAL_GPIO_Init+0x5e>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d007      	beq.n	8003e56 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e4a:	2b11      	cmp	r3, #17
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b12      	cmp	r3, #18
 8003e54:	d130      	bne.n	8003eb8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	2203      	movs	r2, #3
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 0201 	and.w	r2, r3, #1
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	2203      	movs	r2, #3
 8003ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d003      	beq.n	8003ef8 <HAL_GPIO_Init+0x100>
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b12      	cmp	r3, #18
 8003ef6:	d123      	bne.n	8003f40 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	08da      	lsrs	r2, r3, #3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	3208      	adds	r2, #8
 8003f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	220f      	movs	r2, #15
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	08da      	lsrs	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3208      	adds	r2, #8
 8003f3a:	69b9      	ldr	r1, [r7, #24]
 8003f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	2203      	movs	r2, #3
 8003f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0203 	and.w	r2, r3, #3
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 80be 	beq.w	80040fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f82:	4b65      	ldr	r3, [pc, #404]	; (8004118 <HAL_GPIO_Init+0x320>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	4a64      	ldr	r2, [pc, #400]	; (8004118 <HAL_GPIO_Init+0x320>)
 8003f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8e:	4b62      	ldr	r3, [pc, #392]	; (8004118 <HAL_GPIO_Init+0x320>)
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003f9a:	4a60      	ldr	r2, [pc, #384]	; (800411c <HAL_GPIO_Init+0x324>)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	089b      	lsrs	r3, r3, #2
 8003fa0:	3302      	adds	r3, #2
 8003fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	220f      	movs	r2, #15
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a57      	ldr	r2, [pc, #348]	; (8004120 <HAL_GPIO_Init+0x328>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d037      	beq.n	8004036 <HAL_GPIO_Init+0x23e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a56      	ldr	r2, [pc, #344]	; (8004124 <HAL_GPIO_Init+0x32c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d031      	beq.n	8004032 <HAL_GPIO_Init+0x23a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a55      	ldr	r2, [pc, #340]	; (8004128 <HAL_GPIO_Init+0x330>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d02b      	beq.n	800402e <HAL_GPIO_Init+0x236>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a54      	ldr	r2, [pc, #336]	; (800412c <HAL_GPIO_Init+0x334>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d025      	beq.n	800402a <HAL_GPIO_Init+0x232>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a53      	ldr	r2, [pc, #332]	; (8004130 <HAL_GPIO_Init+0x338>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d01f      	beq.n	8004026 <HAL_GPIO_Init+0x22e>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a52      	ldr	r2, [pc, #328]	; (8004134 <HAL_GPIO_Init+0x33c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d019      	beq.n	8004022 <HAL_GPIO_Init+0x22a>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a51      	ldr	r2, [pc, #324]	; (8004138 <HAL_GPIO_Init+0x340>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d013      	beq.n	800401e <HAL_GPIO_Init+0x226>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a50      	ldr	r2, [pc, #320]	; (800413c <HAL_GPIO_Init+0x344>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d00d      	beq.n	800401a <HAL_GPIO_Init+0x222>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a4f      	ldr	r2, [pc, #316]	; (8004140 <HAL_GPIO_Init+0x348>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d007      	beq.n	8004016 <HAL_GPIO_Init+0x21e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a4e      	ldr	r2, [pc, #312]	; (8004144 <HAL_GPIO_Init+0x34c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_GPIO_Init+0x21a>
 800400e:	2309      	movs	r3, #9
 8004010:	e012      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004012:	230a      	movs	r3, #10
 8004014:	e010      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004016:	2308      	movs	r3, #8
 8004018:	e00e      	b.n	8004038 <HAL_GPIO_Init+0x240>
 800401a:	2307      	movs	r3, #7
 800401c:	e00c      	b.n	8004038 <HAL_GPIO_Init+0x240>
 800401e:	2306      	movs	r3, #6
 8004020:	e00a      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004022:	2305      	movs	r3, #5
 8004024:	e008      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004026:	2304      	movs	r3, #4
 8004028:	e006      	b.n	8004038 <HAL_GPIO_Init+0x240>
 800402a:	2303      	movs	r3, #3
 800402c:	e004      	b.n	8004038 <HAL_GPIO_Init+0x240>
 800402e:	2302      	movs	r3, #2
 8004030:	e002      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004032:	2301      	movs	r3, #1
 8004034:	e000      	b.n	8004038 <HAL_GPIO_Init+0x240>
 8004036:	2300      	movs	r3, #0
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f002 0203 	and.w	r2, r2, #3
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	4093      	lsls	r3, r2
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4313      	orrs	r3, r2
 8004046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004048:	4934      	ldr	r1, [pc, #208]	; (800411c <HAL_GPIO_Init+0x324>)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	3302      	adds	r3, #2
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004056:	4b3c      	ldr	r3, [pc, #240]	; (8004148 <HAL_GPIO_Init+0x350>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	43db      	mvns	r3, r3
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	4013      	ands	r3, r2
 8004064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800407a:	4a33      	ldr	r2, [pc, #204]	; (8004148 <HAL_GPIO_Init+0x350>)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004080:	4b31      	ldr	r3, [pc, #196]	; (8004148 <HAL_GPIO_Init+0x350>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	43db      	mvns	r3, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040a4:	4a28      	ldr	r2, [pc, #160]	; (8004148 <HAL_GPIO_Init+0x350>)
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040aa:	4b27      	ldr	r3, [pc, #156]	; (8004148 <HAL_GPIO_Init+0x350>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4013      	ands	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <HAL_GPIO_Init+0x350>)
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040d4:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <HAL_GPIO_Init+0x350>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	43db      	mvns	r3, r3
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	4013      	ands	r3, r2
 80040e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040f8:	4a13      	ldr	r2, [pc, #76]	; (8004148 <HAL_GPIO_Init+0x350>)
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b0f      	cmp	r3, #15
 8004108:	f67f ae86 	bls.w	8003e18 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800410c:	bf00      	nop
 800410e:	3724      	adds	r7, #36	; 0x24
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	40023800 	.word	0x40023800
 800411c:	40013800 	.word	0x40013800
 8004120:	40020000 	.word	0x40020000
 8004124:	40020400 	.word	0x40020400
 8004128:	40020800 	.word	0x40020800
 800412c:	40020c00 	.word	0x40020c00
 8004130:	40021000 	.word	0x40021000
 8004134:	40021400 	.word	0x40021400
 8004138:	40021800 	.word	0x40021800
 800413c:	40021c00 	.word	0x40021c00
 8004140:	40022000 	.word	0x40022000
 8004144:	40022400 	.word	0x40022400
 8004148:	40013c00 	.word	0x40013c00

0800414c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	807b      	strh	r3, [r7, #2]
 8004158:	4613      	mov	r3, r2
 800415a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800415c:	787b      	ldrb	r3, [r7, #1]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004162:	887a      	ldrh	r2, [r7, #2]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004168:	e003      	b.n	8004172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800416a:	887b      	ldrh	r3, [r7, #2]
 800416c:	041a      	lsls	r2, r3, #16
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	619a      	str	r2, [r3, #24]
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
	...

08004180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e07f      	b.n	8004292 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f7fd ffb0 	bl	800210c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2224      	movs	r2, #36	; 0x24
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0201 	bic.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d107      	bne.n	80041fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041f6:	609a      	str	r2, [r3, #8]
 80041f8:	e006      	b.n	8004208 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004206:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b02      	cmp	r3, #2
 800420e:	d104      	bne.n	800421a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004218:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b1d      	ldr	r3, [pc, #116]	; (800429c <HAL_I2C_Init+0x11c>)
 8004226:	430b      	orrs	r3, r1
 8004228:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004238:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	691a      	ldr	r2, [r3, #16]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	ea42 0103 	orr.w	r1, r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	021a      	lsls	r2, r3, #8
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	430a      	orrs	r2, r1
 8004252:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	69d9      	ldr	r1, [r3, #28]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1a      	ldr	r2, [r3, #32]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	02008000 	.word	0x02008000

080042a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	d138      	bne.n	8004328 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e032      	b.n	800432a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 0201 	bic.w	r2, r2, #1
 80042e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6819      	ldr	r1, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	430a      	orrs	r2, r1
 8004302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681a      	ldr	r2, [r3, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0201 	orr.w	r2, r2, #1
 8004312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	370c      	adds	r7, #12
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004346:	b2db      	uxtb	r3, r3
 8004348:	2b20      	cmp	r3, #32
 800434a:	d139      	bne.n	80043c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004352:	2b01      	cmp	r3, #1
 8004354:	d101      	bne.n	800435a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004356:	2302      	movs	r3, #2
 8004358:	e033      	b.n	80043c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2201      	movs	r2, #1
 800435e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2224      	movs	r2, #36	; 0x24
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004388:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	021b      	lsls	r3, r3, #8
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	4313      	orrs	r3, r2
 8004392:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	e000      	b.n	80043c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
  }
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
	...

080043d0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a04      	ldr	r2, [pc, #16]	; (80043ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80043da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043de:	6013      	str	r3, [r2, #0]
}
 80043e0:	bf00      	nop
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
 80043ea:	bf00      	nop
 80043ec:	40007000 	.word	0x40007000

080043f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	4b23      	ldr	r3, [pc, #140]	; (8004488 <HAL_PWREx_EnableOverDrive+0x98>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	4a22      	ldr	r2, [pc, #136]	; (8004488 <HAL_PWREx_EnableOverDrive+0x98>)
 8004400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004404:	6413      	str	r3, [r2, #64]	; 0x40
 8004406:	4b20      	ldr	r3, [pc, #128]	; (8004488 <HAL_PWREx_EnableOverDrive+0x98>)
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004412:	4b1e      	ldr	r3, [pc, #120]	; (800448c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1d      	ldr	r2, [pc, #116]	; (800448c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800441e:	f7fe fc07 	bl	8002c30 <HAL_GetTick>
 8004422:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004424:	e009      	b.n	800443a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004426:	f7fe fc03 	bl	8002c30 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004434:	d901      	bls.n	800443a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e022      	b.n	8004480 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800443a:	4b14      	ldr	r3, [pc, #80]	; (800448c <HAL_PWREx_EnableOverDrive+0x9c>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004446:	d1ee      	bne.n	8004426 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_PWREx_EnableOverDrive+0x9c>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a0f      	ldr	r2, [pc, #60]	; (800448c <HAL_PWREx_EnableOverDrive+0x9c>)
 800444e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004452:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004454:	f7fe fbec 	bl	8002c30 <HAL_GetTick>
 8004458:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800445a:	e009      	b.n	8004470 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800445c:	f7fe fbe8 	bl	8002c30 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800446a:	d901      	bls.n	8004470 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e007      	b.n	8004480 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004470:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800447c:	d1ee      	bne.n	800445c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40023800 	.word	0x40023800
 800448c:	40007000 	.word	0x40007000

08004490 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004498:	2300      	movs	r3, #0
 800449a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e29b      	b.n	80049de <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	f000 8087 	beq.w	80045c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044b4:	4b96      	ldr	r3, [pc, #600]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f003 030c 	and.w	r3, r3, #12
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d00c      	beq.n	80044da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c0:	4b93      	ldr	r3, [pc, #588]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d112      	bne.n	80044f2 <HAL_RCC_OscConfig+0x62>
 80044cc:	4b90      	ldr	r3, [pc, #576]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044d8:	d10b      	bne.n	80044f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044da:	4b8d      	ldr	r3, [pc, #564]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d06c      	beq.n	80045c0 <HAL_RCC_OscConfig+0x130>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d168      	bne.n	80045c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e275      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fa:	d106      	bne.n	800450a <HAL_RCC_OscConfig+0x7a>
 80044fc:	4b84      	ldr	r3, [pc, #528]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a83      	ldr	r2, [pc, #524]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	e02e      	b.n	8004568 <HAL_RCC_OscConfig+0xd8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10c      	bne.n	800452c <HAL_RCC_OscConfig+0x9c>
 8004512:	4b7f      	ldr	r3, [pc, #508]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a7e      	ldr	r2, [pc, #504]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	4b7c      	ldr	r3, [pc, #496]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a7b      	ldr	r2, [pc, #492]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004528:	6013      	str	r3, [r2, #0]
 800452a:	e01d      	b.n	8004568 <HAL_RCC_OscConfig+0xd8>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0xc0>
 8004536:	4b76      	ldr	r3, [pc, #472]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a75      	ldr	r2, [pc, #468]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 800453c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b73      	ldr	r3, [pc, #460]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a72      	ldr	r2, [pc, #456]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454c:	6013      	str	r3, [r2, #0]
 800454e:	e00b      	b.n	8004568 <HAL_RCC_OscConfig+0xd8>
 8004550:	4b6f      	ldr	r3, [pc, #444]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a6e      	ldr	r2, [pc, #440]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4b6c      	ldr	r3, [pc, #432]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a6b      	ldr	r2, [pc, #428]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004566:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d013      	beq.n	8004598 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004570:	f7fe fb5e 	bl	8002c30 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004576:	e008      	b.n	800458a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004578:	f7fe fb5a 	bl	8002c30 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	2b64      	cmp	r3, #100	; 0x64
 8004584:	d901      	bls.n	800458a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e229      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	4b61      	ldr	r3, [pc, #388]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d0f0      	beq.n	8004578 <HAL_RCC_OscConfig+0xe8>
 8004596:	e014      	b.n	80045c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004598:	f7fe fb4a 	bl	8002c30 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7fe fb46 	bl	8002c30 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b64      	cmp	r3, #100	; 0x64
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e215      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b2:	4b57      	ldr	r3, [pc, #348]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f0      	bne.n	80045a0 <HAL_RCC_OscConfig+0x110>
 80045be:	e000      	b.n	80045c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d069      	beq.n	80046a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ce:	4b50      	ldr	r3, [pc, #320]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045da:	4b4d      	ldr	r3, [pc, #308]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 030c 	and.w	r3, r3, #12
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d11c      	bne.n	8004620 <HAL_RCC_OscConfig+0x190>
 80045e6:	4b4a      	ldr	r3, [pc, #296]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d116      	bne.n	8004620 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f2:	4b47      	ldr	r3, [pc, #284]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d005      	beq.n	800460a <HAL_RCC_OscConfig+0x17a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d001      	beq.n	800460a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e1e9      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460a:	4b41      	ldr	r3, [pc, #260]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	00db      	lsls	r3, r3, #3
 8004618:	493d      	ldr	r1, [pc, #244]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 800461a:	4313      	orrs	r3, r2
 800461c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461e:	e040      	b.n	80046a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d023      	beq.n	8004670 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004628:	4b39      	ldr	r3, [pc, #228]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a38      	ldr	r2, [pc, #224]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004634:	f7fe fafc 	bl	8002c30 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463a:	e008      	b.n	800464e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463c:	f7fe faf8 	bl	8002c30 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d901      	bls.n	800464e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e1c7      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800464e:	4b30      	ldr	r3, [pc, #192]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0f0      	beq.n	800463c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465a:	4b2d      	ldr	r3, [pc, #180]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4929      	ldr	r1, [pc, #164]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 800466a:	4313      	orrs	r3, r2
 800466c:	600b      	str	r3, [r1, #0]
 800466e:	e018      	b.n	80046a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004670:	4b27      	ldr	r3, [pc, #156]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a26      	ldr	r2, [pc, #152]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004676:	f023 0301 	bic.w	r3, r3, #1
 800467a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fe fad8 	bl	8002c30 <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004684:	f7fe fad4 	bl	8002c30 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e1a3      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004696:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1f0      	bne.n	8004684 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d038      	beq.n	8004720 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d019      	beq.n	80046ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046b6:	4b16      	ldr	r3, [pc, #88]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80046b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ba:	4a15      	ldr	r2, [pc, #84]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80046bc:	f043 0301 	orr.w	r3, r3, #1
 80046c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c2:	f7fe fab5 	bl	8002c30 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ca:	f7fe fab1 	bl	8002c30 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e180      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046dc:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80046de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x23a>
 80046e8:	e01a      	b.n	8004720 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ea:	4b09      	ldr	r3, [pc, #36]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80046ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ee:	4a08      	ldr	r2, [pc, #32]	; (8004710 <HAL_RCC_OscConfig+0x280>)
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046f6:	f7fe fa9b 	bl	8002c30 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046fe:	f7fe fa97 	bl	8002c30 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d903      	bls.n	8004714 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e166      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
 8004710:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004714:	4b92      	ldr	r3, [pc, #584]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 8004716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ee      	bne.n	80046fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80a4 	beq.w	8004876 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472e:	4b8c      	ldr	r3, [pc, #560]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10d      	bne.n	8004756 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800473a:	4b89      	ldr	r3, [pc, #548]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	4a88      	ldr	r2, [pc, #544]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 8004740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004744:	6413      	str	r3, [r2, #64]	; 0x40
 8004746:	4b86      	ldr	r3, [pc, #536]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	60bb      	str	r3, [r7, #8]
 8004750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004752:	2301      	movs	r3, #1
 8004754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004756:	4b83      	ldr	r3, [pc, #524]	; (8004964 <HAL_RCC_OscConfig+0x4d4>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d118      	bne.n	8004794 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004762:	4b80      	ldr	r3, [pc, #512]	; (8004964 <HAL_RCC_OscConfig+0x4d4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a7f      	ldr	r2, [pc, #508]	; (8004964 <HAL_RCC_OscConfig+0x4d4>)
 8004768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800476c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800476e:	f7fe fa5f 	bl	8002c30 <HAL_GetTick>
 8004772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004776:	f7fe fa5b 	bl	8002c30 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b64      	cmp	r3, #100	; 0x64
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e12a      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004788:	4b76      	ldr	r3, [pc, #472]	; (8004964 <HAL_RCC_OscConfig+0x4d4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004790:	2b00      	cmp	r3, #0
 8004792:	d0f0      	beq.n	8004776 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d106      	bne.n	80047aa <HAL_RCC_OscConfig+0x31a>
 800479c:	4b70      	ldr	r3, [pc, #448]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 800479e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a0:	4a6f      	ldr	r2, [pc, #444]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6713      	str	r3, [r2, #112]	; 0x70
 80047a8:	e02d      	b.n	8004806 <HAL_RCC_OscConfig+0x376>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10c      	bne.n	80047cc <HAL_RCC_OscConfig+0x33c>
 80047b2:	4b6b      	ldr	r3, [pc, #428]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047b6:	4a6a      	ldr	r2, [pc, #424]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	6713      	str	r3, [r2, #112]	; 0x70
 80047be:	4b68      	ldr	r3, [pc, #416]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c2:	4a67      	ldr	r2, [pc, #412]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047c4:	f023 0304 	bic.w	r3, r3, #4
 80047c8:	6713      	str	r3, [r2, #112]	; 0x70
 80047ca:	e01c      	b.n	8004806 <HAL_RCC_OscConfig+0x376>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	2b05      	cmp	r3, #5
 80047d2:	d10c      	bne.n	80047ee <HAL_RCC_OscConfig+0x35e>
 80047d4:	4b62      	ldr	r3, [pc, #392]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d8:	4a61      	ldr	r2, [pc, #388]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047da:	f043 0304 	orr.w	r3, r3, #4
 80047de:	6713      	str	r3, [r2, #112]	; 0x70
 80047e0:	4b5f      	ldr	r3, [pc, #380]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e4:	4a5e      	ldr	r2, [pc, #376]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6713      	str	r3, [r2, #112]	; 0x70
 80047ec:	e00b      	b.n	8004806 <HAL_RCC_OscConfig+0x376>
 80047ee:	4b5c      	ldr	r3, [pc, #368]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	4a5b      	ldr	r2, [pc, #364]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	6713      	str	r3, [r2, #112]	; 0x70
 80047fa:	4b59      	ldr	r3, [pc, #356]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	4a58      	ldr	r2, [pc, #352]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 8004800:	f023 0304 	bic.w	r3, r3, #4
 8004804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d015      	beq.n	800483a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480e:	f7fe fa0f 	bl	8002c30 <HAL_GetTick>
 8004812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004814:	e00a      	b.n	800482c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fe fa0b 	bl	8002c30 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	; 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e0d8      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482c:	4b4c      	ldr	r3, [pc, #304]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0ee      	beq.n	8004816 <HAL_RCC_OscConfig+0x386>
 8004838:	e014      	b.n	8004864 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483a:	f7fe f9f9 	bl	8002c30 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004840:	e00a      	b.n	8004858 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004842:	f7fe f9f5 	bl	8002c30 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004850:	4293      	cmp	r3, r2
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e0c2      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004858:	4b41      	ldr	r3, [pc, #260]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 800485a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485c:	f003 0302 	and.w	r3, r3, #2
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1ee      	bne.n	8004842 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004864:	7dfb      	ldrb	r3, [r7, #23]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d105      	bne.n	8004876 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486a:	4b3d      	ldr	r3, [pc, #244]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a3c      	ldr	r2, [pc, #240]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 8004870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80ae 	beq.w	80049dc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004880:	4b37      	ldr	r3, [pc, #220]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 030c 	and.w	r3, r3, #12
 8004888:	2b08      	cmp	r3, #8
 800488a:	d06d      	beq.n	8004968 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d14b      	bne.n	800492c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004894:	4b32      	ldr	r3, [pc, #200]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a31      	ldr	r2, [pc, #196]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 800489a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800489e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fe f9c6 	bl	8002c30 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fe f9c2 	bl	8002c30 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e091      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	4b29      	ldr	r3, [pc, #164]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d4:	019b      	lsls	r3, r3, #6
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	085b      	lsrs	r3, r3, #1
 80048de:	3b01      	subs	r3, #1
 80048e0:	041b      	lsls	r3, r3, #16
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e8:	061b      	lsls	r3, r3, #24
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	071b      	lsls	r3, r3, #28
 80048f2:	491b      	ldr	r1, [pc, #108]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f8:	4b19      	ldr	r3, [pc, #100]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a18      	ldr	r2, [pc, #96]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 80048fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fe f994 	bl	8002c30 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490c:	f7fe f990 	bl	8002c30 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e05f      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800491e:	4b10      	ldr	r3, [pc, #64]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x47c>
 800492a:	e057      	b.n	80049dc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0b      	ldr	r2, [pc, #44]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 8004932:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004936:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004938:	f7fe f97a 	bl	8002c30 <HAL_GetTick>
 800493c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800493e:	e008      	b.n	8004952 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004940:	f7fe f976 	bl	8002c30 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	2b02      	cmp	r3, #2
 800494c:	d901      	bls.n	8004952 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800494e:	2303      	movs	r3, #3
 8004950:	e045      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004952:	4b03      	ldr	r3, [pc, #12]	; (8004960 <HAL_RCC_OscConfig+0x4d0>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f0      	bne.n	8004940 <HAL_RCC_OscConfig+0x4b0>
 800495e:	e03d      	b.n	80049dc <HAL_RCC_OscConfig+0x54c>
 8004960:	40023800 	.word	0x40023800
 8004964:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004968:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <HAL_RCC_OscConfig+0x558>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d030      	beq.n	80049d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004980:	429a      	cmp	r2, r3
 8004982:	d129      	bne.n	80049d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800498e:	429a      	cmp	r2, r3
 8004990:	d122      	bne.n	80049d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004998:	4013      	ands	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800499e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d119      	bne.n	80049d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	085b      	lsrs	r3, r3, #1
 80049b0:	3b01      	subs	r3, #1
 80049b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d10f      	bne.n	80049d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d107      	bne.n	80049d8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d001      	beq.n	80049dc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800

080049ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0d0      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a04:	4b6a      	ldr	r3, [pc, #424]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d910      	bls.n	8004a34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b67      	ldr	r3, [pc, #412]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 020f 	bic.w	r2, r3, #15
 8004a1a:	4965      	ldr	r1, [pc, #404]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b63      	ldr	r3, [pc, #396]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 030f 	and.w	r3, r3, #15
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0b8      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a4c:	4b59      	ldr	r3, [pc, #356]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4a58      	ldr	r2, [pc, #352]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a64:	4b53      	ldr	r3, [pc, #332]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	4a52      	ldr	r2, [pc, #328]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a70:	4b50      	ldr	r3, [pc, #320]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	494d      	ldr	r1, [pc, #308]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d040      	beq.n	8004b10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d107      	bne.n	8004aa6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a96:	4b47      	ldr	r3, [pc, #284]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d115      	bne.n	8004ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e07f      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d107      	bne.n	8004abe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004aae:	4b41      	ldr	r3, [pc, #260]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d109      	bne.n	8004ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e073      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004abe:	4b3d      	ldr	r3, [pc, #244]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e06b      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ace:	4b39      	ldr	r3, [pc, #228]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f023 0203 	bic.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4936      	ldr	r1, [pc, #216]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae0:	f7fe f8a6 	bl	8002c30 <HAL_GetTick>
 8004ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae6:	e00a      	b.n	8004afe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae8:	f7fe f8a2 	bl	8002c30 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e053      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afe:	4b2d      	ldr	r3, [pc, #180]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 020c 	and.w	r2, r3, #12
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d1eb      	bne.n	8004ae8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b10:	4b27      	ldr	r3, [pc, #156]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d210      	bcs.n	8004b40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b1e:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f023 020f 	bic.w	r2, r3, #15
 8004b26:	4922      	ldr	r1, [pc, #136]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b2e:	4b20      	ldr	r3, [pc, #128]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 030f 	and.w	r3, r3, #15
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d001      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e032      	b.n	8004ba6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d008      	beq.n	8004b5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b4c:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	4916      	ldr	r1, [pc, #88]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0308 	and.w	r3, r3, #8
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b6a:	4b12      	ldr	r3, [pc, #72]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	490e      	ldr	r1, [pc, #56]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b7e:	f000 f821 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8004b82:	4601      	mov	r1, r0
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	091b      	lsrs	r3, r3, #4
 8004b8a:	f003 030f 	and.w	r3, r3, #15
 8004b8e:	4a0a      	ldr	r2, [pc, #40]	; (8004bb8 <HAL_RCC_ClockConfig+0x1cc>)
 8004b90:	5cd3      	ldrb	r3, [r2, r3]
 8004b92:	fa21 f303 	lsr.w	r3, r1, r3
 8004b96:	4a09      	ldr	r2, [pc, #36]	; (8004bbc <HAL_RCC_ClockConfig+0x1d0>)
 8004b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b9a:	4b09      	ldr	r3, [pc, #36]	; (8004bc0 <HAL_RCC_ClockConfig+0x1d4>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe f802 	bl	8002ba8 <HAL_InitTick>

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	40023c00 	.word	0x40023c00
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	08009904 	.word	0x08009904
 8004bbc:	20000004 	.word	0x20000004
 8004bc0:	20000008 	.word	0x20000008

08004bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	607b      	str	r3, [r7, #4]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bda:	4b50      	ldr	r3, [pc, #320]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d007      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x32>
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d008      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0x38>
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f040 808d 	bne.w	8004d0a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf0:	4b4b      	ldr	r3, [pc, #300]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004bf2:	60bb      	str	r3, [r7, #8]
      break;
 8004bf4:	e08c      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bf6:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004bf8:	60bb      	str	r3, [r7, #8]
      break;
 8004bfa:	e089      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bfc:	4b47      	ldr	r3, [pc, #284]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c04:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c06:	4b45      	ldr	r3, [pc, #276]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d023      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c12:	4b42      	ldr	r3, [pc, #264]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	099b      	lsrs	r3, r3, #6
 8004c18:	f04f 0400 	mov.w	r4, #0
 8004c1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	ea03 0501 	and.w	r5, r3, r1
 8004c28:	ea04 0602 	and.w	r6, r4, r2
 8004c2c:	4a3d      	ldr	r2, [pc, #244]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c2e:	fb02 f106 	mul.w	r1, r2, r6
 8004c32:	2200      	movs	r2, #0
 8004c34:	fb02 f205 	mul.w	r2, r2, r5
 8004c38:	440a      	add	r2, r1
 8004c3a:	493a      	ldr	r1, [pc, #232]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x160>)
 8004c3c:	fba5 0101 	umull	r0, r1, r5, r1
 8004c40:	1853      	adds	r3, r2, r1
 8004c42:	4619      	mov	r1, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	4623      	mov	r3, r4
 8004c4e:	f7fb fb5f 	bl	8000310 <__aeabi_uldivmod>
 8004c52:	4603      	mov	r3, r0
 8004c54:	460c      	mov	r4, r1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e049      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5a:	4b30      	ldr	r3, [pc, #192]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	099b      	lsrs	r3, r3, #6
 8004c60:	f04f 0400 	mov.w	r4, #0
 8004c64:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	ea03 0501 	and.w	r5, r3, r1
 8004c70:	ea04 0602 	and.w	r6, r4, r2
 8004c74:	4629      	mov	r1, r5
 8004c76:	4632      	mov	r2, r6
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	f04f 0400 	mov.w	r4, #0
 8004c80:	0154      	lsls	r4, r2, #5
 8004c82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c86:	014b      	lsls	r3, r1, #5
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4622      	mov	r2, r4
 8004c8c:	1b49      	subs	r1, r1, r5
 8004c8e:	eb62 0206 	sbc.w	r2, r2, r6
 8004c92:	f04f 0300 	mov.w	r3, #0
 8004c96:	f04f 0400 	mov.w	r4, #0
 8004c9a:	0194      	lsls	r4, r2, #6
 8004c9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ca0:	018b      	lsls	r3, r1, #6
 8004ca2:	1a5b      	subs	r3, r3, r1
 8004ca4:	eb64 0402 	sbc.w	r4, r4, r2
 8004ca8:	f04f 0100 	mov.w	r1, #0
 8004cac:	f04f 0200 	mov.w	r2, #0
 8004cb0:	00e2      	lsls	r2, r4, #3
 8004cb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cb6:	00d9      	lsls	r1, r3, #3
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4614      	mov	r4, r2
 8004cbc:	195b      	adds	r3, r3, r5
 8004cbe:	eb44 0406 	adc.w	r4, r4, r6
 8004cc2:	f04f 0100 	mov.w	r1, #0
 8004cc6:	f04f 0200 	mov.w	r2, #0
 8004cca:	02a2      	lsls	r2, r4, #10
 8004ccc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004cd0:	0299      	lsls	r1, r3, #10
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	4621      	mov	r1, r4
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f04f 0400 	mov.w	r4, #0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	4623      	mov	r3, r4
 8004ce4:	f7fb fb14 	bl	8000310 <__aeabi_uldivmod>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	460c      	mov	r4, r1
 8004cec:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <HAL_RCC_GetSysClockFreq+0x158>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	0c1b      	lsrs	r3, r3, #16
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	005b      	lsls	r3, r3, #1
 8004cfc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004cfe:	68fa      	ldr	r2, [r7, #12]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d06:	60bb      	str	r3, [r7, #8]
      break;
 8004d08:	e002      	b.n	8004d10 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d0a:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004d0c:	60bb      	str	r3, [r7, #8]
      break;
 8004d0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d10:	68bb      	ldr	r3, [r7, #8]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3714      	adds	r7, #20
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	00f42400 	.word	0x00f42400
 8004d24:	00989680 	.word	0x00989680

08004d28 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d2c:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <HAL_RCC_GetHCLKFreq+0x14>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000004 	.word	0x20000004

08004d40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d44:	f7ff fff0 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d48:	4601      	mov	r1, r0
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	0a9b      	lsrs	r3, r3, #10
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	4a03      	ldr	r2, [pc, #12]	; (8004d64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d56:	5cd3      	ldrb	r3, [r2, r3]
 8004d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40023800 	.word	0x40023800
 8004d64:	08009914 	.word	0x08009914

08004d68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d6c:	f7ff ffdc 	bl	8004d28 <HAL_RCC_GetHCLKFreq>
 8004d70:	4601      	mov	r1, r0
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0b5b      	lsrs	r3, r3, #13
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4a03      	ldr	r2, [pc, #12]	; (8004d8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d7e:	5cd3      	ldrb	r3, [r2, r3]
 8004d80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	08009914 	.word	0x08009914

08004d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d012      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004db8:	4b69      	ldr	r3, [pc, #420]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4a68      	ldr	r2, [pc, #416]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dc2:	6093      	str	r3, [r2, #8]
 8004dc4:	4b66      	ldr	r3, [pc, #408]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dcc:	4964      	ldr	r1, [pc, #400]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d017      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dea:	4b5d      	ldr	r3, [pc, #372]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004df0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	4959      	ldr	r1, [pc, #356]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e08:	d101      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d017      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e26:	4b4e      	ldr	r3, [pc, #312]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	494a      	ldr	r1, [pc, #296]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e44:	d101      	bne.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e46:	2301      	movs	r3, #1
 8004e48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e52:	2301      	movs	r3, #1
 8004e54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e62:	2301      	movs	r3, #1
 8004e64:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0320 	and.w	r3, r3, #32
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 808b 	beq.w	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e74:	4b3a      	ldr	r3, [pc, #232]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	4a39      	ldr	r2, [pc, #228]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e80:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004e8c:	4b35      	ldr	r3, [pc, #212]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a34      	ldr	r2, [pc, #208]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e98:	f7fd feca 	bl	8002c30 <HAL_GetTick>
 8004e9c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea0:	f7fd fec6 	bl	8002c30 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	; 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e38d      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eb2:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ebe:	4b28      	ldr	r3, [pc, #160]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d035      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d02e      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004edc:	4b20      	ldr	r3, [pc, #128]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ee6:	4b1e      	ldr	r3, [pc, #120]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	4a1d      	ldr	r2, [pc, #116]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef2:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef6:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004efe:	4a18      	ldr	r2, [pc, #96]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f04:	4b16      	ldr	r3, [pc, #88]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d114      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fd fe8e 	bl	8002c30 <HAL_GetTick>
 8004f14:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f16:	e00a      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f18:	f7fd fe8a 	bl	8002c30 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e34f      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f32:	f003 0302 	and.w	r3, r3, #2
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ee      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f46:	d111      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f54:	4b04      	ldr	r3, [pc, #16]	; (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f56:	400b      	ands	r3, r1
 8004f58:	4901      	ldr	r1, [pc, #4]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	608b      	str	r3, [r1, #8]
 8004f5e:	e00b      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f60:	40023800 	.word	0x40023800
 8004f64:	40007000 	.word	0x40007000
 8004f68:	0ffffcff 	.word	0x0ffffcff
 8004f6c:	4bb3      	ldr	r3, [pc, #716]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	4ab2      	ldr	r2, [pc, #712]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f72:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f76:	6093      	str	r3, [r2, #8]
 8004f78:	4bb0      	ldr	r3, [pc, #704]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f84:	49ad      	ldr	r1, [pc, #692]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0310 	and.w	r3, r3, #16
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d010      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f96:	4ba9      	ldr	r3, [pc, #676]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f9c:	4aa7      	ldr	r2, [pc, #668]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fa2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fa6:	4ba5      	ldr	r3, [pc, #660]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fa8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb0:	49a2      	ldr	r1, [pc, #648]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fc4:	4b9d      	ldr	r3, [pc, #628]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd2:	499a      	ldr	r1, [pc, #616]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fd4:	4313      	orrs	r3, r2
 8004fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d00a      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fe6:	4b95      	ldr	r3, [pc, #596]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ff4:	4991      	ldr	r1, [pc, #580]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005008:	4b8c      	ldr	r3, [pc, #560]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005016:	4989      	ldr	r1, [pc, #548]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00a      	beq.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800502a:	4b84      	ldr	r3, [pc, #528]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005038:	4980      	ldr	r1, [pc, #512]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800503a:	4313      	orrs	r3, r2
 800503c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00a      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800504c:	4b7b      	ldr	r3, [pc, #492]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005052:	f023 0203 	bic.w	r2, r3, #3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	4978      	ldr	r1, [pc, #480]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800505c:	4313      	orrs	r3, r2
 800505e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00a      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800506e:	4b73      	ldr	r3, [pc, #460]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005074:	f023 020c 	bic.w	r2, r3, #12
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800507c:	496f      	ldr	r1, [pc, #444]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800507e:	4313      	orrs	r3, r2
 8005080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005090:	4b6a      	ldr	r3, [pc, #424]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800509e:	4967      	ldr	r1, [pc, #412]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050b2:	4b62      	ldr	r3, [pc, #392]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c0:	495e      	ldr	r1, [pc, #376]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80050d4:	4b59      	ldr	r3, [pc, #356]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050e2:	4956      	ldr	r1, [pc, #344]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80050f6:	4b51      	ldr	r3, [pc, #324]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	494d      	ldr	r1, [pc, #308]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005106:	4313      	orrs	r3, r2
 8005108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005118:	4b48      	ldr	r3, [pc, #288]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800511a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005126:	4945      	ldr	r1, [pc, #276]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005128:	4313      	orrs	r3, r2
 800512a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800513a:	4b40      	ldr	r3, [pc, #256]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800513c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005140:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005148:	493c      	ldr	r1, [pc, #240]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800514a:	4313      	orrs	r3, r2
 800514c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00a      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800515c:	4b37      	ldr	r3, [pc, #220]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800515e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005162:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800516a:	4934      	ldr	r1, [pc, #208]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d011      	beq.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800517e:	4b2f      	ldr	r3, [pc, #188]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005184:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800518c:	492b      	ldr	r1, [pc, #172]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800518e:	4313      	orrs	r3, r2
 8005190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005198:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800519c:	d101      	bne.n	80051a2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800519e:	2301      	movs	r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051ae:	2301      	movs	r3, #1
 80051b0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051be:	4b1f      	ldr	r3, [pc, #124]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051cc:	491b      	ldr	r1, [pc, #108]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80051e0:	4b16      	ldr	r3, [pc, #88]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051f0:	4912      	ldr	r1, [pc, #72]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00b      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005204:	4b0d      	ldr	r3, [pc, #52]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005214:	4909      	ldr	r1, [pc, #36]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00f      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005228:	4b04      	ldr	r3, [pc, #16]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800522a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800522e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	e002      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800
 8005240:	4985      	ldr	r1, [pc, #532]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00b      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005254:	4b80      	ldr	r3, [pc, #512]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800525a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005264:	497c      	ldr	r1, [pc, #496]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b01      	cmp	r3, #1
 8005270:	d005      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800527a:	f040 80d6 	bne.w	800542a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800527e:	4b76      	ldr	r3, [pc, #472]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a75      	ldr	r2, [pc, #468]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005284:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528a:	f7fd fcd1 	bl	8002c30 <HAL_GetTick>
 800528e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005290:	e008      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005292:	f7fd fccd 	bl	8002c30 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b64      	cmp	r3, #100	; 0x64
 800529e:	d901      	bls.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e194      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052a4:	4b6c      	ldr	r3, [pc, #432]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1f0      	bne.n	8005292 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d021      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d11d      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052c4:	4b64      	ldr	r3, [pc, #400]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ca:	0c1b      	lsrs	r3, r3, #16
 80052cc:	f003 0303 	and.w	r3, r3, #3
 80052d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80052d2:	4b61      	ldr	r3, [pc, #388]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052d8:	0e1b      	lsrs	r3, r3, #24
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	019a      	lsls	r2, r3, #6
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	041b      	lsls	r3, r3, #16
 80052ea:	431a      	orrs	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	061b      	lsls	r3, r3, #24
 80052f0:	431a      	orrs	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	071b      	lsls	r3, r3, #28
 80052f8:	4957      	ldr	r1, [pc, #348]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80052fa:	4313      	orrs	r3, r2
 80052fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d004      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005310:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800531e:	2b00      	cmp	r3, #0
 8005320:	d02e      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800532a:	d129      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800532c:	4b4a      	ldr	r3, [pc, #296]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800532e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005332:	0c1b      	lsrs	r3, r3, #16
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800533a:	4b47      	ldr	r3, [pc, #284]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800533c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005340:	0f1b      	lsrs	r3, r3, #28
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	019a      	lsls	r2, r3, #6
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	041b      	lsls	r3, r3, #16
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	431a      	orrs	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	071b      	lsls	r3, r3, #28
 8005360:	493d      	ldr	r1, [pc, #244]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005362:	4313      	orrs	r3, r2
 8005364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005368:	4b3b      	ldr	r3, [pc, #236]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800536a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800536e:	f023 021f 	bic.w	r2, r3, #31
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005376:	3b01      	subs	r3, #1
 8005378:	4937      	ldr	r1, [pc, #220]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01d      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800538c:	4b32      	ldr	r3, [pc, #200]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800538e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005392:	0e1b      	lsrs	r3, r3, #24
 8005394:	f003 030f 	and.w	r3, r3, #15
 8005398:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800539a:	4b2f      	ldr	r3, [pc, #188]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800539c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a0:	0f1b      	lsrs	r3, r3, #28
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	019a      	lsls	r2, r3, #6
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	041b      	lsls	r3, r3, #16
 80053b4:	431a      	orrs	r2, r3
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	061b      	lsls	r3, r3, #24
 80053ba:	431a      	orrs	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	071b      	lsls	r3, r3, #28
 80053c0:	4925      	ldr	r1, [pc, #148]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d011      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	019a      	lsls	r2, r3, #6
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	041b      	lsls	r3, r3, #16
 80053e0:	431a      	orrs	r2, r3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	061b      	lsls	r3, r3, #24
 80053e8:	431a      	orrs	r2, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	071b      	lsls	r3, r3, #28
 80053f0:	4919      	ldr	r1, [pc, #100]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80053f8:	4b17      	ldr	r3, [pc, #92]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a16      	ldr	r2, [pc, #88]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80053fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005404:	f7fd fc14 	bl	8002c30 <HAL_GetTick>
 8005408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800540a:	e008      	b.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800540c:	f7fd fc10 	bl	8002c30 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	; 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e0d7      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800541e:	4b0e      	ldr	r3, [pc, #56]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	2b01      	cmp	r3, #1
 800542e:	f040 80cd 	bne.w	80055cc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005432:	4b09      	ldr	r3, [pc, #36]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a08      	ldr	r2, [pc, #32]	; (8005458 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800543e:	f7fd fbf7 	bl	8002c30 <HAL_GetTick>
 8005442:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005444:	e00a      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005446:	f7fd fbf3 	bl	8002c30 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b64      	cmp	r3, #100	; 0x64
 8005452:	d903      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e0ba      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005458:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800545c:	4b5e      	ldr	r3, [pc, #376]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005468:	d0ed      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d003      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005486:	2b00      	cmp	r3, #0
 8005488:	d02e      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	d12a      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005492:	4b51      	ldr	r3, [pc, #324]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005498:	0c1b      	lsrs	r3, r3, #16
 800549a:	f003 0303 	and.w	r3, r3, #3
 800549e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054a0:	4b4d      	ldr	r3, [pc, #308]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054a6:	0f1b      	lsrs	r3, r3, #28
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	019a      	lsls	r2, r3, #6
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	041b      	lsls	r3, r3, #16
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	061b      	lsls	r3, r3, #24
 80054c0:	431a      	orrs	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	071b      	lsls	r3, r3, #28
 80054c6:	4944      	ldr	r1, [pc, #272]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054ce:	4b42      	ldr	r3, [pc, #264]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	3b01      	subs	r3, #1
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	493d      	ldr	r1, [pc, #244]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d022      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054fc:	d11d      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80054fe:	4b36      	ldr	r3, [pc, #216]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005504:	0e1b      	lsrs	r3, r3, #24
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800550c:	4b32      	ldr	r3, [pc, #200]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800550e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005512:	0f1b      	lsrs	r3, r3, #28
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	019a      	lsls	r2, r3, #6
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	431a      	orrs	r2, r3
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	061b      	lsls	r3, r3, #24
 800552c:	431a      	orrs	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	071b      	lsls	r3, r3, #28
 8005532:	4929      	ldr	r1, [pc, #164]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d028      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005546:	4b24      	ldr	r3, [pc, #144]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	0e1b      	lsrs	r3, r3, #24
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005554:	4b20      	ldr	r3, [pc, #128]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555a:	0c1b      	lsrs	r3, r3, #16
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	019a      	lsls	r2, r3, #6
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	041b      	lsls	r3, r3, #16
 800556c:	431a      	orrs	r2, r3
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	061b      	lsls	r3, r3, #24
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	69db      	ldr	r3, [r3, #28]
 8005578:	071b      	lsls	r3, r3, #28
 800557a:	4917      	ldr	r1, [pc, #92]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005582:	4b15      	ldr	r3, [pc, #84]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005588:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	4911      	ldr	r1, [pc, #68]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005598:	4b0f      	ldr	r3, [pc, #60]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a0e      	ldr	r2, [pc, #56]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800559e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a4:	f7fd fb44 	bl	8002c30 <HAL_GetTick>
 80055a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055aa:	e008      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055ac:	f7fd fb40 	bl	8002c30 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b64      	cmp	r3, #100	; 0x64
 80055b8:	d901      	bls.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e007      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055be:	4b06      	ldr	r3, [pc, #24]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ca:	d1ef      	bne.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3720      	adds	r7, #32
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}
 80055d6:	bf00      	nop
 80055d8:	40023800 	.word	0x40023800

080055dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e084      	b.n	80056f8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2200      	movs	r2, #0
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d106      	bne.n	800560e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fc fe15 	bl	8002238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005624:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800562e:	d902      	bls.n	8005636 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	e002      	b.n	800563c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800563a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005644:	d007      	beq.n	8005656 <HAL_SPI_Init+0x7a>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800564e:	d002      	beq.n	8005656 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10b      	bne.n	8005676 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005666:	d903      	bls.n	8005670 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
 800566e:	e002      	b.n	8005676 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	431a      	orrs	r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	69db      	ldr	r3, [r3, #28]
 800569a:	431a      	orrs	r2, r3
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a1b      	ldr	r3, [r3, #32]
 80056a0:	ea42 0103 	orr.w	r1, r2, r3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	0c1b      	lsrs	r3, r3, #16
 80056b6:	f003 0204 	and.w	r2, r3, #4
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	431a      	orrs	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	ea42 0103 	orr.w	r1, r2, r3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	69da      	ldr	r2, [r3, #28]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2201      	movs	r2, #1
 80056f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	4613      	mov	r3, r2
 800570c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d110      	bne.n	800573c <HAL_SPI_Receive_DMA+0x3c>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005722:	d10b      	bne.n	800573c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2204      	movs	r2, #4
 8005728:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800572c:	88fb      	ldrh	r3, [r7, #6]
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f900 	bl	8005938 <HAL_SPI_TransmitReceive_DMA>
 8005738:	4603      	mov	r3, r0
 800573a:	e0f3      	b.n	8005924 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005742:	2b01      	cmp	r3, #1
 8005744:	d101      	bne.n	800574a <HAL_SPI_Receive_DMA+0x4a>
 8005746:	2302      	movs	r3, #2
 8005748:	e0ec      	b.n	8005924 <HAL_SPI_Receive_DMA+0x224>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b01      	cmp	r3, #1
 800575c:	d002      	beq.n	8005764 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800575e:	2302      	movs	r3, #2
 8005760:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005762:	e0da      	b.n	800591a <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <HAL_SPI_Receive_DMA+0x70>
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d102      	bne.n	8005776 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005774:	e0d1      	b.n	800591a <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2204      	movs	r2, #4
 800577a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	88fa      	ldrh	r2, [r7, #6]
 800578e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	88fa      	ldrh	r2, [r7, #6]
 8005796:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ba:	d107      	bne.n	80057cc <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80057ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	685a      	ldr	r2, [r3, #4]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057da:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057e4:	d908      	bls.n	80057f8 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057f4:	605a      	str	r2, [r3, #4]
 80057f6:	e042      	b.n	800587e <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005806:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005812:	d134      	bne.n	800587e <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005822:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800582a:	b29b      	uxth	r3, r3
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d111      	bne.n	8005858 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685a      	ldr	r2, [r3, #4]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005842:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800584a:	b29b      	uxth	r3, r3
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005856:	e012      	b.n	800587e <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685a      	ldr	r2, [r3, #4]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005866:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800586e:	b29b      	uxth	r3, r3
 8005870:	085b      	lsrs	r3, r3, #1
 8005872:	b29b      	uxth	r3, r3
 8005874:	3301      	adds	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005882:	4a2a      	ldr	r2, [pc, #168]	; (800592c <HAL_SPI_Receive_DMA+0x22c>)
 8005884:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588a:	4a29      	ldr	r2, [pc, #164]	; (8005930 <HAL_SPI_Receive_DMA+0x230>)
 800588c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005892:	4a28      	ldr	r2, [pc, #160]	; (8005934 <HAL_SPI_Receive_DMA+0x234>)
 8005894:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589a:	2200      	movs	r2, #0
 800589c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	330c      	adds	r3, #12
 80058a8:	4619      	mov	r1, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ae:	461a      	mov	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	f7fd ffb4 	bl	8003824 <HAL_DMA_Start_IT>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00c      	beq.n	80058dc <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c6:	f043 0210 	orr.w	r2, r3, #16
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80058da:	e01e      	b.n	800591a <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e6:	2b40      	cmp	r3, #64	; 0x40
 80058e8:	d007      	beq.n	80058fa <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058f8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0220 	orr.w	r2, r2, #32
 8005908:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f042 0201 	orr.w	r2, r2, #1
 8005918:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005922:	7dfb      	ldrb	r3, [r7, #23]
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	08005db9 	.word	0x08005db9
 8005930:	08005ca1 	.word	0x08005ca1
 8005934:	08005df1 	.word	0x08005df1

08005938 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005950:	2b01      	cmp	r3, #1
 8005952:	d101      	bne.n	8005958 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005954:	2302      	movs	r3, #2
 8005956:	e16c      	b.n	8005c32 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005966:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800596e:	7dbb      	ldrb	r3, [r7, #22]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d00d      	beq.n	8005990 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597a:	d106      	bne.n	800598a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <HAL_SPI_TransmitReceive_DMA+0x52>
 8005984:	7dbb      	ldrb	r3, [r7, #22]
 8005986:	2b04      	cmp	r3, #4
 8005988:	d002      	beq.n	8005990 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800598a:	2302      	movs	r3, #2
 800598c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800598e:	e14b      	b.n	8005c28 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800599c:	887b      	ldrh	r3, [r7, #2]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059a6:	e13f      	b.n	8005c28 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d003      	beq.n	80059bc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2205      	movs	r2, #5
 80059b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	887a      	ldrh	r2, [r7, #2]
 80059cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	887a      	ldrh	r2, [r7, #2]
 80059d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	887a      	ldrh	r2, [r7, #2]
 80059de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	887a      	ldrh	r2, [r7, #2]
 80059e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8005a04:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a0e:	d908      	bls.n	8005a22 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a1e:	605a      	str	r2, [r3, #4]
 8005a20:	e06f      	b.n	8005b02 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a30:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a36:	699b      	ldr	r3, [r3, #24]
 8005a38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3c:	d126      	bne.n	8005a8c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10f      	bne.n	8005a6a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a58:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	085b      	lsrs	r3, r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a68:	e010      	b.n	8005a8c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a78:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	085b      	lsrs	r3, r3, #1
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3301      	adds	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a96:	d134      	bne.n	8005b02 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005aa6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d111      	bne.n	8005adc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ac6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	085b      	lsrs	r3, r3, #1
 8005ad2:	b29a      	uxth	r2, r3
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ada:	e012      	b.n	8005b02 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aea:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	085b      	lsrs	r3, r3, #1
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3301      	adds	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d108      	bne.n	8005b20 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b12:	4a4a      	ldr	r2, [pc, #296]	; (8005c3c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1a:	4a49      	ldr	r2, [pc, #292]	; (8005c40 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8005b1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b1e:	e007      	b.n	8005b30 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b24:	4a47      	ldr	r2, [pc, #284]	; (8005c44 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8005b26:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2c:	4a46      	ldr	r2, [pc, #280]	; (8005c48 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8005b2e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b34:	4a45      	ldr	r2, [pc, #276]	; (8005c4c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8005b36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	461a      	mov	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b58:	b29b      	uxth	r3, r3
 8005b5a:	f7fd fe63 	bl	8003824 <HAL_DMA_Start_IT>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00c      	beq.n	8005b7e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b68:	f043 0210 	orr.w	r2, r3, #16
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005b7c:	e054      	b.n	8005c28 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	685a      	ldr	r2, [r3, #4]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b92:	2200      	movs	r2, #0
 8005b94:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005baa:	2200      	movs	r2, #0
 8005bac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	f7fd fe2d 	bl	8003824 <HAL_DMA_Start_IT>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00c      	beq.n	8005bea <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd4:	f043 0210 	orr.w	r2, r3, #16
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005be8:	e01e      	b.n	8005c28 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf4:	2b40      	cmp	r3, #64	; 0x40
 8005bf6:	d007      	beq.n	8005c08 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c06:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f042 0220 	orr.w	r2, r2, #32
 8005c16:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685a      	ldr	r2, [r3, #4]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f042 0202 	orr.w	r2, r2, #2
 8005c26:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	08005db9 	.word	0x08005db9
 8005c40:	08005ca1 	.word	0x08005ca1
 8005c44:	08005dd5 	.word	0x08005dd5
 8005c48:	08005d27 	.word	0x08005d27
 8005c4c:	08005df1 	.word	0x08005df1

08005c50 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005c94:	bf00      	nop
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cae:	f7fc ffbf 	bl	8002c30 <HAL_GetTick>
 8005cb2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cc2:	d02a      	beq.n	8005d1a <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0220 	bic.w	r2, r2, #32
 8005cd2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0203 	bic.w	r2, r2, #3
 8005ce2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	2164      	movs	r1, #100	; 0x64
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f978 	bl	8005fde <SPI_EndRxTransaction>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005d12:	68f8      	ldr	r0, [r7, #12]
 8005d14:	f7ff ffba 	bl	8005c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005d18:	e002      	b.n	8005d20 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f7fb ff76 	bl	8001c0c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d32:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d34:	f7fc ff7c 	bl	8002c30 <HAL_GetTick>
 8005d38:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d48:	d030      	beq.n	8005dac <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0220 	bic.w	r2, r2, #32
 8005d58:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	2164      	movs	r1, #100	; 0x64
 8005d5e:	68f8      	ldr	r0, [r7, #12]
 8005d60:	f000 f995 	bl	800608e <SPI_EndRxTxTransaction>
 8005d64:	4603      	mov	r3, r0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6e:	f043 0220 	orr.w	r2, r3, #32
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0203 	bic.w	r2, r2, #3
 8005d84:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d003      	beq.n	8005dac <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005da4:	68f8      	ldr	r0, [r7, #12]
 8005da6:	f7ff ff71 	bl	8005c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005daa:	e002      	b.n	8005db2 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f7ff ff4f 	bl	8005c50 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005db2:	3710      	adds	r7, #16
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff ff4c 	bl	8005c64 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f7ff ff48 	bl	8005c78 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685a      	ldr	r2, [r3, #4]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0203 	bic.w	r2, r2, #3
 8005e0c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e12:	f043 0210 	orr.w	r2, r3, #16
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f7ff ff32 	bl	8005c8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005e28:	bf00      	nop
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	603b      	str	r3, [r7, #0]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e40:	e04c      	b.n	8005edc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e48:	d048      	beq.n	8005edc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005e4a:	f7fc fef1 	bl	8002c30 <HAL_GetTick>
 8005e4e:	4602      	mov	r2, r0
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d902      	bls.n	8005e60 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d13d      	bne.n	8005edc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e78:	d111      	bne.n	8005e9e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e82:	d004      	beq.n	8005e8e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8c:	d107      	bne.n	8005e9e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea6:	d10f      	bne.n	8005ec8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ec6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e00f      	b.n	8005efc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689a      	ldr	r2, [r3, #8]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	bf0c      	ite	eq
 8005eec:	2301      	moveq	r3, #1
 8005eee:	2300      	movne	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	79fb      	ldrb	r3, [r7, #7]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d1a3      	bne.n	8005e42 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f12:	e057      	b.n	8005fc4 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f1a:	d106      	bne.n	8005f2a <SPI_WaitFifoStateUntilTimeout+0x26>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d103      	bne.n	8005f2a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f30:	d048      	beq.n	8005fc4 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005f32:	f7fc fe7d 	bl	8002c30 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	683a      	ldr	r2, [r7, #0]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d902      	bls.n	8005f48 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d13d      	bne.n	8005fc4 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f56:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f60:	d111      	bne.n	8005f86 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f6a:	d004      	beq.n	8005f76 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f74:	d107      	bne.n	8005f86 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f84:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8e:	d10f      	bne.n	8005fb0 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e008      	b.n	8005fd6 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	4013      	ands	r3, r2
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d19f      	bne.n	8005f14 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af02      	add	r7, sp, #8
 8005fe4:	60f8      	str	r0, [r7, #12]
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff2:	d111      	bne.n	8006018 <SPI_EndRxTransaction+0x3a>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffc:	d004      	beq.n	8006008 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006006:	d107      	bne.n	8006018 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006016:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2200      	movs	r2, #0
 8006020:	2180      	movs	r1, #128	; 0x80
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff ff04 	bl	8005e30 <SPI_WaitFlagStateUntilTimeout>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006032:	f043 0220 	orr.w	r2, r3, #32
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e023      	b.n	8006086 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006046:	d11d      	bne.n	8006084 <SPI_EndRxTransaction+0xa6>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006050:	d004      	beq.n	800605c <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800605a:	d113      	bne.n	8006084 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2200      	movs	r2, #0
 8006064:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7ff ff4b 	bl	8005f04 <SPI_WaitFifoStateUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d007      	beq.n	8006084 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006078:	f043 0220 	orr.w	r2, r3, #32
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e000      	b.n	8006086 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800608e:	b580      	push	{r7, lr}
 8006090:	b086      	sub	sp, #24
 8006092:	af02      	add	r7, sp, #8
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f7ff ff2c 	bl	8005f04 <SPI_WaitFifoStateUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b6:	f043 0220 	orr.w	r2, r3, #32
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e027      	b.n	8006112 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	9300      	str	r3, [sp, #0]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2200      	movs	r2, #0
 80060ca:	2180      	movs	r1, #128	; 0x80
 80060cc:	68f8      	ldr	r0, [r7, #12]
 80060ce:	f7ff feaf 	bl	8005e30 <SPI_WaitFlagStateUntilTimeout>
 80060d2:	4603      	mov	r3, r0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d007      	beq.n	80060e8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060dc:	f043 0220 	orr.w	r2, r3, #32
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e014      	b.n	8006112 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f7ff ff05 	bl	8005f04 <SPI_WaitFifoStateUntilTimeout>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006104:	f043 0220 	orr.w	r2, r3, #32
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e000      	b.n	8006112 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e01d      	b.n	8006168 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fc f923 	bl	800238c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2202      	movs	r2, #2
 800614a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	3304      	adds	r3, #4
 8006156:	4619      	mov	r1, r3
 8006158:	4610      	mov	r0, r2
 800615a:	f001 f827 	bl	80071ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3708      	adds	r7, #8
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	4b0c      	ldr	r3, [pc, #48]	; (80061c0 <HAL_TIM_Base_Start_IT+0x50>)
 8006190:	4013      	ands	r3, r2
 8006192:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2b06      	cmp	r3, #6
 8006198:	d00b      	beq.n	80061b2 <HAL_TIM_Base_Start_IT+0x42>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061a0:	d007      	beq.n	80061b2 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f042 0201 	orr.w	r2, r2, #1
 80061b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	00010007 	.word	0x00010007

080061c4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0201 	bic.w	r2, r2, #1
 80061da:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6a1a      	ldr	r2, [r3, #32]
 80061e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80061e6:	4013      	ands	r3, r2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10f      	bne.n	800620c <HAL_TIM_Base_Stop_IT+0x48>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6a1a      	ldr	r2, [r3, #32]
 80061f2:	f240 4344 	movw	r3, #1092	; 0x444
 80061f6:	4013      	ands	r3, r2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <HAL_TIM_Base_Stop_IT+0x48>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0201 	bic.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	370c      	adds	r7, #12
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b082      	sub	sp, #8
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e01d      	b.n	8006268 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	d106      	bne.n	8006246 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fc f9b7 	bl	80025b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2202      	movs	r2, #2
 800624a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	3304      	adds	r3, #4
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f000 ffa7 	bl	80071ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b0c      	cmp	r3, #12
 800627e:	d841      	bhi.n	8006304 <HAL_TIM_PWM_Start_IT+0x94>
 8006280:	a201      	add	r2, pc, #4	; (adr r2, 8006288 <HAL_TIM_PWM_Start_IT+0x18>)
 8006282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006286:	bf00      	nop
 8006288:	080062bd 	.word	0x080062bd
 800628c:	08006305 	.word	0x08006305
 8006290:	08006305 	.word	0x08006305
 8006294:	08006305 	.word	0x08006305
 8006298:	080062cf 	.word	0x080062cf
 800629c:	08006305 	.word	0x08006305
 80062a0:	08006305 	.word	0x08006305
 80062a4:	08006305 	.word	0x08006305
 80062a8:	080062e1 	.word	0x080062e1
 80062ac:	08006305 	.word	0x08006305
 80062b0:	08006305 	.word	0x08006305
 80062b4:	08006305 	.word	0x08006305
 80062b8:	080062f3 	.word	0x080062f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0202 	orr.w	r2, r2, #2
 80062ca:	60da      	str	r2, [r3, #12]
      break;
 80062cc:	e01b      	b.n	8006306 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0204 	orr.w	r2, r2, #4
 80062dc:	60da      	str	r2, [r3, #12]
      break;
 80062de:	e012      	b.n	8006306 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68da      	ldr	r2, [r3, #12]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0208 	orr.w	r2, r2, #8
 80062ee:	60da      	str	r2, [r3, #12]
      break;
 80062f0:	e009      	b.n	8006306 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f042 0210 	orr.w	r2, r2, #16
 8006300:	60da      	str	r2, [r3, #12]
      break;
 8006302:	e000      	b.n	8006306 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8006304:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2201      	movs	r2, #1
 800630c:	6839      	ldr	r1, [r7, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	f001 fc96 	bl	8007c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a17      	ldr	r2, [pc, #92]	; (8006378 <HAL_TIM_PWM_Start_IT+0x108>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_TIM_PWM_Start_IT+0xb8>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a16      	ldr	r2, [pc, #88]	; (800637c <HAL_TIM_PWM_Start_IT+0x10c>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d101      	bne.n	800632c <HAL_TIM_PWM_Start_IT+0xbc>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_TIM_PWM_Start_IT+0xbe>
 800632c:	2300      	movs	r3, #0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006340:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	4b0d      	ldr	r3, [pc, #52]	; (8006380 <HAL_TIM_PWM_Start_IT+0x110>)
 800634a:	4013      	ands	r3, r2
 800634c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b06      	cmp	r3, #6
 8006352:	d00b      	beq.n	800636c <HAL_TIM_PWM_Start_IT+0xfc>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800635a:	d007      	beq.n	800636c <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f042 0201 	orr.w	r2, r2, #1
 800636a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	40010000 	.word	0x40010000
 800637c:	40010400 	.word	0x40010400
 8006380:	00010007 	.word	0x00010007

08006384 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b082      	sub	sp, #8
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	2b0c      	cmp	r3, #12
 8006392:	d841      	bhi.n	8006418 <HAL_TIM_PWM_Stop_IT+0x94>
 8006394:	a201      	add	r2, pc, #4	; (adr r2, 800639c <HAL_TIM_PWM_Stop_IT+0x18>)
 8006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639a:	bf00      	nop
 800639c:	080063d1 	.word	0x080063d1
 80063a0:	08006419 	.word	0x08006419
 80063a4:	08006419 	.word	0x08006419
 80063a8:	08006419 	.word	0x08006419
 80063ac:	080063e3 	.word	0x080063e3
 80063b0:	08006419 	.word	0x08006419
 80063b4:	08006419 	.word	0x08006419
 80063b8:	08006419 	.word	0x08006419
 80063bc:	080063f5 	.word	0x080063f5
 80063c0:	08006419 	.word	0x08006419
 80063c4:	08006419 	.word	0x08006419
 80063c8:	08006419 	.word	0x08006419
 80063cc:	08006407 	.word	0x08006407
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68da      	ldr	r2, [r3, #12]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0202 	bic.w	r2, r2, #2
 80063de:	60da      	str	r2, [r3, #12]
      break;
 80063e0:	e01b      	b.n	800641a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	68da      	ldr	r2, [r3, #12]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f022 0204 	bic.w	r2, r2, #4
 80063f0:	60da      	str	r2, [r3, #12]
      break;
 80063f2:	e012      	b.n	800641a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68da      	ldr	r2, [r3, #12]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0208 	bic.w	r2, r2, #8
 8006402:	60da      	str	r2, [r3, #12]
      break;
 8006404:	e009      	b.n	800641a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	68da      	ldr	r2, [r3, #12]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0210 	bic.w	r2, r2, #16
 8006414:	60da      	str	r2, [r3, #12]
      break;
 8006416:	e000      	b.n	800641a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8006418:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2200      	movs	r2, #0
 8006420:	6839      	ldr	r1, [r7, #0]
 8006422:	4618      	mov	r0, r3
 8006424:	f001 fc0c 	bl	8007c40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a20      	ldr	r2, [pc, #128]	; (80064b0 <HAL_TIM_PWM_Stop_IT+0x12c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d004      	beq.n	800643c <HAL_TIM_PWM_Stop_IT+0xb8>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1f      	ldr	r2, [pc, #124]	; (80064b4 <HAL_TIM_PWM_Stop_IT+0x130>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d101      	bne.n	8006440 <HAL_TIM_PWM_Stop_IT+0xbc>
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <HAL_TIM_PWM_Stop_IT+0xbe>
 8006440:	2300      	movs	r3, #0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d017      	beq.n	8006476 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a1a      	ldr	r2, [r3, #32]
 800644c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006450:	4013      	ands	r3, r2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10f      	bne.n	8006476 <HAL_TIM_PWM_Stop_IT+0xf2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	6a1a      	ldr	r2, [r3, #32]
 800645c:	f240 4344 	movw	r3, #1092	; 0x444
 8006460:	4013      	ands	r3, r2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d107      	bne.n	8006476 <HAL_TIM_PWM_Stop_IT+0xf2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006474:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	6a1a      	ldr	r2, [r3, #32]
 800647c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006480:	4013      	ands	r3, r2
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10f      	bne.n	80064a6 <HAL_TIM_PWM_Stop_IT+0x122>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	6a1a      	ldr	r2, [r3, #32]
 800648c:	f240 4344 	movw	r3, #1092	; 0x444
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d107      	bne.n	80064a6 <HAL_TIM_PWM_Stop_IT+0x122>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f022 0201 	bic.w	r2, r2, #1
 80064a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3708      	adds	r7, #8
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	40010000 	.word	0x40010000
 80064b4:	40010400 	.word	0x40010400

080064b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e01d      	b.n	8006506 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fb ffea 	bl	80024b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f000 fe58 	bl	80071ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b086      	sub	sp, #24
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b02      	cmp	r3, #2
 8006528:	d101      	bne.n	800652e <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800652a:	2302      	movs	r3, #2
 800652c:	e0e0      	b.n	80066f0 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b01      	cmp	r3, #1
 8006538:	d10b      	bne.n	8006552 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d104      	bne.n	800654a <HAL_TIM_IC_Start_DMA+0x3a>
 8006540:	887b      	ldrh	r3, [r7, #2]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d001      	beq.n	800654a <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e0d2      	b.n	80066f0 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2202      	movs	r2, #2
 800654e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	2b0c      	cmp	r3, #12
 8006556:	f200 80ad 	bhi.w	80066b4 <HAL_TIM_IC_Start_DMA+0x1a4>
 800655a:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <HAL_TIM_IC_Start_DMA+0x50>)
 800655c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006560:	08006595 	.word	0x08006595
 8006564:	080066b5 	.word	0x080066b5
 8006568:	080066b5 	.word	0x080066b5
 800656c:	080066b5 	.word	0x080066b5
 8006570:	080065dd 	.word	0x080065dd
 8006574:	080066b5 	.word	0x080066b5
 8006578:	080066b5 	.word	0x080066b5
 800657c:	080066b5 	.word	0x080066b5
 8006580:	08006625 	.word	0x08006625
 8006584:	080066b5 	.word	0x080066b5
 8006588:	080066b5 	.word	0x080066b5
 800658c:	080066b5 	.word	0x080066b5
 8006590:	0800666d 	.word	0x0800666d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	4a57      	ldr	r2, [pc, #348]	; (80066f8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 800659a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	4a56      	ldr	r2, [pc, #344]	; (80066fc <HAL_TIM_IC_Start_DMA+0x1ec>)
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a8:	4a55      	ldr	r2, [pc, #340]	; (8006700 <HAL_TIM_IC_Start_DMA+0x1f0>)
 80065aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3334      	adds	r3, #52	; 0x34
 80065b6:	4619      	mov	r1, r3
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	887b      	ldrh	r3, [r7, #2]
 80065bc:	f7fd f932 	bl	8003824 <HAL_DMA_Start_IT>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e092      	b.n	80066f0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68da      	ldr	r2, [r3, #12]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d8:	60da      	str	r2, [r3, #12]
      break;
 80065da:	e06c      	b.n	80066b6 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	4a45      	ldr	r2, [pc, #276]	; (80066f8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80065e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e8:	4a44      	ldr	r2, [pc, #272]	; (80066fc <HAL_TIM_IC_Start_DMA+0x1ec>)
 80065ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	4a43      	ldr	r2, [pc, #268]	; (8006700 <HAL_TIM_IC_Start_DMA+0x1f0>)
 80065f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3338      	adds	r3, #56	; 0x38
 80065fe:	4619      	mov	r1, r3
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	887b      	ldrh	r3, [r7, #2]
 8006604:	f7fd f90e 	bl	8003824 <HAL_DMA_Start_IT>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e06e      	b.n	80066f0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006620:	60da      	str	r2, [r3, #12]
      break;
 8006622:	e048      	b.n	80066b6 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	4a33      	ldr	r2, [pc, #204]	; (80066f8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 800662a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006630:	4a32      	ldr	r2, [pc, #200]	; (80066fc <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006632:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	4a31      	ldr	r2, [pc, #196]	; (8006700 <HAL_TIM_IC_Start_DMA+0x1f0>)
 800663a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	333c      	adds	r3, #60	; 0x3c
 8006646:	4619      	mov	r1, r3
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	887b      	ldrh	r3, [r7, #2]
 800664c:	f7fd f8ea 	bl	8003824 <HAL_DMA_Start_IT>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e04a      	b.n	80066f0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006668:	60da      	str	r2, [r3, #12]
      break;
 800666a:	e024      	b.n	80066b6 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006670:	4a21      	ldr	r2, [pc, #132]	; (80066f8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006672:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006678:	4a20      	ldr	r2, [pc, #128]	; (80066fc <HAL_TIM_IC_Start_DMA+0x1ec>)
 800667a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006680:	4a1f      	ldr	r2, [pc, #124]	; (8006700 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006682:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	3340      	adds	r3, #64	; 0x40
 800668e:	4619      	mov	r1, r3
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	887b      	ldrh	r3, [r7, #2]
 8006694:	f7fd f8c6 	bl	8003824 <HAL_DMA_Start_IT>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e026      	b.n	80066f0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80066b0:	60da      	str	r2, [r3, #12]
      break;
 80066b2:	e000      	b.n	80066b6 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 80066b4:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2201      	movs	r2, #1
 80066bc:	68b9      	ldr	r1, [r7, #8]
 80066be:	4618      	mov	r0, r3
 80066c0:	f001 fabe 	bl	8007c40 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	4b0e      	ldr	r3, [pc, #56]	; (8006704 <HAL_TIM_IC_Start_DMA+0x1f4>)
 80066cc:	4013      	ands	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2b06      	cmp	r3, #6
 80066d4:	d00b      	beq.n	80066ee <HAL_TIM_IC_Start_DMA+0x1de>
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066dc:	d007      	beq.n	80066ee <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	080070cd 	.word	0x080070cd
 80066fc:	0800713d 	.word	0x0800713d
 8006700:	080070a9 	.word	0x080070a9
 8006704:	00010007 	.word	0x00010007

08006708 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b0c      	cmp	r3, #12
 8006716:	d855      	bhi.n	80067c4 <HAL_TIM_IC_Stop_DMA+0xbc>
 8006718:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <HAL_TIM_IC_Stop_DMA+0x18>)
 800671a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800671e:	bf00      	nop
 8006720:	08006755 	.word	0x08006755
 8006724:	080067c5 	.word	0x080067c5
 8006728:	080067c5 	.word	0x080067c5
 800672c:	080067c5 	.word	0x080067c5
 8006730:	08006771 	.word	0x08006771
 8006734:	080067c5 	.word	0x080067c5
 8006738:	080067c5 	.word	0x080067c5
 800673c:	080067c5 	.word	0x080067c5
 8006740:	0800678d 	.word	0x0800678d
 8006744:	080067c5 	.word	0x080067c5
 8006748:	080067c5 	.word	0x080067c5
 800674c:	080067c5 	.word	0x080067c5
 8006750:	080067a9 	.word	0x080067a9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006762:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	4618      	mov	r0, r3
 800676a:	f7fd f8bb 	bl	80038e4 <HAL_DMA_Abort_IT>
      break;
 800676e:	e02a      	b.n	80067c6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800677e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006784:	4618      	mov	r0, r3
 8006786:	f7fd f8ad 	bl	80038e4 <HAL_DMA_Abort_IT>
      break;
 800678a:	e01c      	b.n	80067c6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800679a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fd f89f 	bl	80038e4 <HAL_DMA_Abort_IT>
      break;
 80067a6:	e00e      	b.n	80067c6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	4618      	mov	r0, r3
 80067be:	f7fd f891 	bl	80038e4 <HAL_DMA_Abort_IT>
      break;
 80067c2:	e000      	b.n	80067c6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 80067c4:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	2200      	movs	r2, #0
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 fa36 	bl	8007c40 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6a1a      	ldr	r2, [r3, #32]
 80067da:	f241 1311 	movw	r3, #4369	; 0x1111
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10f      	bne.n	8006804 <HAL_TIM_IC_Stop_DMA+0xfc>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6a1a      	ldr	r2, [r3, #32]
 80067ea:	f240 4344 	movw	r3, #1092	; 0x444
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d107      	bne.n	8006804 <HAL_TIM_IC_Stop_DMA+0xfc>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0201 	bic.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop

08006818 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e02d      	b.n	8006888 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d106      	bne.n	8006846 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f825 	bl	8006890 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3304      	adds	r3, #4
 8006856:	4619      	mov	r1, r3
 8006858:	4610      	mov	r0, r2
 800685a:	f000 fca7 	bl	80071ac <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0208 	bic.w	r2, r2, #8
 800686c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6819      	ldr	r1, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	683a      	ldr	r2, [r7, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d122      	bne.n	8006900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	f003 0302 	and.w	r3, r3, #2
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d11b      	bne.n	8006900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f06f 0202 	mvn.w	r2, #2
 80068d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	f003 0303 	and.w	r3, r3, #3
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d003      	beq.n	80068ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fa fffa 	bl	80018e0 <HAL_TIM_IC_CaptureCallback>
 80068ec:	e005      	b.n	80068fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fba8 	bl	8007044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fbb9 	bl	800706c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	f003 0304 	and.w	r3, r3, #4
 800690a:	2b04      	cmp	r3, #4
 800690c:	d122      	bne.n	8006954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b04      	cmp	r3, #4
 800691a:	d11b      	bne.n	8006954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f06f 0204 	mvn.w	r2, #4
 8006924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2202      	movs	r2, #2
 800692a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7fa ffd0 	bl	80018e0 <HAL_TIM_IC_CaptureCallback>
 8006940:	e005      	b.n	800694e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 fb7e 	bl	8007044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fb8f 	bl	800706c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	f003 0308 	and.w	r3, r3, #8
 800695e:	2b08      	cmp	r3, #8
 8006960:	d122      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b08      	cmp	r3, #8
 800696e:	d11b      	bne.n	80069a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0208 	mvn.w	r2, #8
 8006978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2204      	movs	r2, #4
 800697e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fa ffa6 	bl	80018e0 <HAL_TIM_IC_CaptureCallback>
 8006994:	e005      	b.n	80069a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fb54 	bl	8007044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fb65 	bl	800706c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	f003 0310 	and.w	r3, r3, #16
 80069b2:	2b10      	cmp	r3, #16
 80069b4:	d122      	bne.n	80069fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	f003 0310 	and.w	r3, r3, #16
 80069c0:	2b10      	cmp	r3, #16
 80069c2:	d11b      	bne.n	80069fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f06f 0210 	mvn.w	r2, #16
 80069cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2208      	movs	r2, #8
 80069d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d003      	beq.n	80069ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f7fa ff7c 	bl	80018e0 <HAL_TIM_IC_CaptureCallback>
 80069e8:	e005      	b.n	80069f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fb2a 	bl	8007044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fb3b 	bl	800706c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d10e      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	f003 0301 	and.w	r3, r3, #1
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d107      	bne.n	8006a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f06f 0201 	mvn.w	r2, #1
 8006a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fa feaa 	bl	800177c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	691b      	ldr	r3, [r3, #16]
 8006a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a32:	2b80      	cmp	r3, #128	; 0x80
 8006a34:	d10e      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a40:	2b80      	cmp	r3, #128	; 0x80
 8006a42:	d107      	bne.n	8006a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f001 fa32 	bl	8007eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a62:	d10e      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6e:	2b80      	cmp	r3, #128	; 0x80
 8006a70:	d107      	bne.n	8006a82 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f001 fa25 	bl	8007ecc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8c:	2b40      	cmp	r3, #64	; 0x40
 8006a8e:	d10e      	bne.n	8006aae <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d107      	bne.n	8006aae <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fae9 	bl	8007080 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	f003 0320 	and.w	r3, r3, #32
 8006ab8:	2b20      	cmp	r3, #32
 8006aba:	d10e      	bne.n	8006ada <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f003 0320 	and.w	r3, r3, #32
 8006ac6:	2b20      	cmp	r3, #32
 8006ac8:	d107      	bne.n	8006ada <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f06f 0220 	mvn.w	r2, #32
 8006ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 f9e5 	bl	8007ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ada:	bf00      	nop
 8006adc:	3708      	adds	r7, #8
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b084      	sub	sp, #16
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_TIM_IC_ConfigChannel+0x1a>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e08a      	b.n	8006c12 <HAL_TIM_IC_ConfigChannel+0x130>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d11b      	bne.n	8006b4a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6818      	ldr	r0, [r3, #0]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6819      	ldr	r1, [r3, #0]
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f000 fec9 	bl	80078b8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699a      	ldr	r2, [r3, #24]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 020c 	bic.w	r2, r2, #12
 8006b34:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6999      	ldr	r1, [r3, #24]
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	430a      	orrs	r2, r1
 8006b46:	619a      	str	r2, [r3, #24]
 8006b48:	e05a      	b.n	8006c00 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b04      	cmp	r3, #4
 8006b4e:	d11c      	bne.n	8006b8a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6818      	ldr	r0, [r3, #0]
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	6819      	ldr	r1, [r3, #0]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	685a      	ldr	r2, [r3, #4]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	f000 ff4d 	bl	80079fe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b72:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6999      	ldr	r1, [r3, #24]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	021a      	lsls	r2, r3, #8
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	619a      	str	r2, [r3, #24]
 8006b88:	e03a      	b.n	8006c00 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	d11b      	bne.n	8006bc8 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6818      	ldr	r0, [r3, #0]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6819      	ldr	r1, [r3, #0]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f000 ff9a 	bl	8007ad8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69da      	ldr	r2, [r3, #28]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 020c 	bic.w	r2, r2, #12
 8006bb2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	69d9      	ldr	r1, [r3, #28]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	61da      	str	r2, [r3, #28]
 8006bc6:	e01b      	b.n	8006c00 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6818      	ldr	r0, [r3, #0]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6819      	ldr	r1, [r3, #0]
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	685a      	ldr	r2, [r3, #4]
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f000 ffba 	bl	8007b50 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	69da      	ldr	r2, [r3, #28]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006bea:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69d9      	ldr	r1, [r3, #28]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	021a      	lsls	r2, r3, #8
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d101      	bne.n	8006c36 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e105      	b.n	8006e42 <HAL_TIM_PWM_ConfigChannel+0x226>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2201      	movs	r2, #1
 8006c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b14      	cmp	r3, #20
 8006c4a:	f200 80f0 	bhi.w	8006e2e <HAL_TIM_PWM_ConfigChannel+0x212>
 8006c4e:	a201      	add	r2, pc, #4	; (adr r2, 8006c54 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006ca9 	.word	0x08006ca9
 8006c58:	08006e2f 	.word	0x08006e2f
 8006c5c:	08006e2f 	.word	0x08006e2f
 8006c60:	08006e2f 	.word	0x08006e2f
 8006c64:	08006ce9 	.word	0x08006ce9
 8006c68:	08006e2f 	.word	0x08006e2f
 8006c6c:	08006e2f 	.word	0x08006e2f
 8006c70:	08006e2f 	.word	0x08006e2f
 8006c74:	08006d2b 	.word	0x08006d2b
 8006c78:	08006e2f 	.word	0x08006e2f
 8006c7c:	08006e2f 	.word	0x08006e2f
 8006c80:	08006e2f 	.word	0x08006e2f
 8006c84:	08006d6b 	.word	0x08006d6b
 8006c88:	08006e2f 	.word	0x08006e2f
 8006c8c:	08006e2f 	.word	0x08006e2f
 8006c90:	08006e2f 	.word	0x08006e2f
 8006c94:	08006dad 	.word	0x08006dad
 8006c98:	08006e2f 	.word	0x08006e2f
 8006c9c:	08006e2f 	.word	0x08006e2f
 8006ca0:	08006e2f 	.word	0x08006e2f
 8006ca4:	08006ded 	.word	0x08006ded
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	68b9      	ldr	r1, [r7, #8]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fb1c 	bl	80072ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f042 0208 	orr.w	r2, r2, #8
 8006cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0204 	bic.w	r2, r2, #4
 8006cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6999      	ldr	r1, [r3, #24]
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	691a      	ldr	r2, [r3, #16]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	619a      	str	r2, [r3, #24]
      break;
 8006ce6:	e0a3      	b.n	8006e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f000 fb6e 	bl	80073d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699a      	ldr	r2, [r3, #24]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6999      	ldr	r1, [r3, #24]
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	021a      	lsls	r2, r3, #8
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	619a      	str	r2, [r3, #24]
      break;
 8006d28:	e082      	b.n	8006e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fbc5 	bl	80074c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f042 0208 	orr.w	r2, r2, #8
 8006d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69da      	ldr	r2, [r3, #28]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f022 0204 	bic.w	r2, r2, #4
 8006d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	69d9      	ldr	r1, [r3, #28]
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	61da      	str	r2, [r3, #28]
      break;
 8006d68:	e062      	b.n	8006e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68b9      	ldr	r1, [r7, #8]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fc1b 	bl	80075ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69da      	ldr	r2, [r3, #28]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69d9      	ldr	r1, [r3, #28]
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	021a      	lsls	r2, r3, #8
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	61da      	str	r2, [r3, #28]
      break;
 8006daa:	e041      	b.n	8006e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68b9      	ldr	r1, [r7, #8]
 8006db2:	4618      	mov	r0, r3
 8006db4:	f000 fc52 	bl	800765c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f042 0208 	orr.w	r2, r2, #8
 8006dc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f022 0204 	bic.w	r2, r2, #4
 8006dd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	691a      	ldr	r2, [r3, #16]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006dea:	e021      	b.n	8006e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fc84 	bl	8007700 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	021a      	lsls	r2, r3, #8
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e2c:	e000      	b.n	8006e30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8006e2e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e40:	2300      	movs	r3, #0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop

08006e4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_TIM_ConfigClockSource+0x18>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e0a6      	b.n	8006fb2 <HAL_TIM_ConfigClockSource+0x166>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	4b4f      	ldr	r3, [pc, #316]	; (8006fbc <HAL_TIM_ConfigClockSource+0x170>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e8a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b40      	cmp	r3, #64	; 0x40
 8006e9a:	d067      	beq.n	8006f6c <HAL_TIM_ConfigClockSource+0x120>
 8006e9c:	2b40      	cmp	r3, #64	; 0x40
 8006e9e:	d80b      	bhi.n	8006eb8 <HAL_TIM_ConfigClockSource+0x6c>
 8006ea0:	2b10      	cmp	r3, #16
 8006ea2:	d073      	beq.n	8006f8c <HAL_TIM_ConfigClockSource+0x140>
 8006ea4:	2b10      	cmp	r3, #16
 8006ea6:	d802      	bhi.n	8006eae <HAL_TIM_ConfigClockSource+0x62>
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d06f      	beq.n	8006f8c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006eac:	e078      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d06c      	beq.n	8006f8c <HAL_TIM_ConfigClockSource+0x140>
 8006eb2:	2b30      	cmp	r3, #48	; 0x30
 8006eb4:	d06a      	beq.n	8006f8c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006eb6:	e073      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006eb8:	2b70      	cmp	r3, #112	; 0x70
 8006eba:	d00d      	beq.n	8006ed8 <HAL_TIM_ConfigClockSource+0x8c>
 8006ebc:	2b70      	cmp	r3, #112	; 0x70
 8006ebe:	d804      	bhi.n	8006eca <HAL_TIM_ConfigClockSource+0x7e>
 8006ec0:	2b50      	cmp	r3, #80	; 0x50
 8006ec2:	d033      	beq.n	8006f2c <HAL_TIM_ConfigClockSource+0xe0>
 8006ec4:	2b60      	cmp	r3, #96	; 0x60
 8006ec6:	d041      	beq.n	8006f4c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006ec8:	e06a      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ece:	d066      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0x152>
 8006ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed4:	d017      	beq.n	8006f06 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006ed6:	e063      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	6899      	ldr	r1, [r3, #8]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	68db      	ldr	r3, [r3, #12]
 8006ee8:	f000 fe8a 	bl	8007c00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006efa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	609a      	str	r2, [r3, #8]
      break;
 8006f04:	e04c      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	6899      	ldr	r1, [r3, #8]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	f000 fe73 	bl	8007c00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689a      	ldr	r2, [r3, #8]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f28:	609a      	str	r2, [r3, #8]
      break;
 8006f2a:	e039      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	6859      	ldr	r1, [r3, #4]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	68db      	ldr	r3, [r3, #12]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	f000 fd31 	bl	80079a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2150      	movs	r1, #80	; 0x50
 8006f44:	4618      	mov	r0, r3
 8006f46:	f000 fe40 	bl	8007bca <TIM_ITRx_SetConfig>
      break;
 8006f4a:	e029      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	6859      	ldr	r1, [r3, #4]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	f000 fd8d 	bl	8007a78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2160      	movs	r1, #96	; 0x60
 8006f64:	4618      	mov	r0, r3
 8006f66:	f000 fe30 	bl	8007bca <TIM_ITRx_SetConfig>
      break;
 8006f6a:	e019      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6818      	ldr	r0, [r3, #0]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	6859      	ldr	r1, [r3, #4]
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	461a      	mov	r2, r3
 8006f7a:	f000 fd11 	bl	80079a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2140      	movs	r1, #64	; 0x40
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 fe20 	bl	8007bca <TIM_ITRx_SetConfig>
      break;
 8006f8a:	e009      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4619      	mov	r1, r3
 8006f96:	4610      	mov	r0, r2
 8006f98:	f000 fe17 	bl	8007bca <TIM_ITRx_SetConfig>
      break;
 8006f9c:	e000      	b.n	8006fa0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	fffeff88 	.word	0xfffeff88

08006fc0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e031      	b.n	800703c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2202      	movs	r2, #2
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fbdc 	bl	80077a8 <TIM_SlaveTimer_SetConfig>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d009      	beq.n	800700a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e018      	b.n	800703c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	68da      	ldr	r2, [r3, #12]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007018:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68da      	ldr	r2, [r3, #12]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007028:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr

08007058 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f7ff ffe8 	bl	8007094 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d103      	bne.n	80070f4 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	2201      	movs	r2, #1
 80070f0:	771a      	strb	r2, [r3, #28]
 80070f2:	e019      	b.n	8007128 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f8:	687a      	ldr	r2, [r7, #4]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d103      	bne.n	8007106 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2202      	movs	r2, #2
 8007102:	771a      	strb	r2, [r3, #28]
 8007104:	e010      	b.n	8007128 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	429a      	cmp	r2, r3
 800710e:	d103      	bne.n	8007118 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2204      	movs	r2, #4
 8007114:	771a      	strb	r2, [r3, #28]
 8007116:	e007      	b.n	8007128 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	429a      	cmp	r2, r3
 8007120:	d102      	bne.n	8007128 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2208      	movs	r2, #8
 8007126:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f7fa fbd9 	bl	80018e0 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2200      	movs	r2, #0
 8007132:	771a      	strb	r2, [r3, #28]
}
 8007134:	bf00      	nop
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007148:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2201      	movs	r2, #1
 800714e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	429a      	cmp	r2, r3
 800715a:	d103      	bne.n	8007164 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	771a      	strb	r2, [r3, #28]
 8007162:	e019      	b.n	8007198 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	429a      	cmp	r2, r3
 800716c:	d103      	bne.n	8007176 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	2202      	movs	r2, #2
 8007172:	771a      	strb	r2, [r3, #28]
 8007174:	e010      	b.n	8007198 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	429a      	cmp	r2, r3
 800717e:	d103      	bne.n	8007188 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2204      	movs	r2, #4
 8007184:	771a      	strb	r2, [r3, #28]
 8007186:	e007      	b.n	8007198 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	429a      	cmp	r2, r3
 8007190:	d102      	bne.n	8007198 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2208      	movs	r2, #8
 8007196:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f7ff ff5d 	bl	8007058 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	771a      	strb	r2, [r3, #28]
}
 80071a4:	bf00      	nop
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a40      	ldr	r2, [pc, #256]	; (80072c0 <TIM_Base_SetConfig+0x114>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d013      	beq.n	80071ec <TIM_Base_SetConfig+0x40>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ca:	d00f      	beq.n	80071ec <TIM_Base_SetConfig+0x40>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a3d      	ldr	r2, [pc, #244]	; (80072c4 <TIM_Base_SetConfig+0x118>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d00b      	beq.n	80071ec <TIM_Base_SetConfig+0x40>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a3c      	ldr	r2, [pc, #240]	; (80072c8 <TIM_Base_SetConfig+0x11c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d007      	beq.n	80071ec <TIM_Base_SetConfig+0x40>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4a3b      	ldr	r2, [pc, #236]	; (80072cc <TIM_Base_SetConfig+0x120>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d003      	beq.n	80071ec <TIM_Base_SetConfig+0x40>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a3a      	ldr	r2, [pc, #232]	; (80072d0 <TIM_Base_SetConfig+0x124>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d108      	bne.n	80071fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	685b      	ldr	r3, [r3, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	4313      	orrs	r3, r2
 80071fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a2f      	ldr	r2, [pc, #188]	; (80072c0 <TIM_Base_SetConfig+0x114>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d02b      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800720c:	d027      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a2c      	ldr	r2, [pc, #176]	; (80072c4 <TIM_Base_SetConfig+0x118>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d023      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a2b      	ldr	r2, [pc, #172]	; (80072c8 <TIM_Base_SetConfig+0x11c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d01f      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a2a      	ldr	r2, [pc, #168]	; (80072cc <TIM_Base_SetConfig+0x120>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d01b      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a29      	ldr	r2, [pc, #164]	; (80072d0 <TIM_Base_SetConfig+0x124>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d017      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a28      	ldr	r2, [pc, #160]	; (80072d4 <TIM_Base_SetConfig+0x128>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d013      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a27      	ldr	r2, [pc, #156]	; (80072d8 <TIM_Base_SetConfig+0x12c>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d00f      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	4a26      	ldr	r2, [pc, #152]	; (80072dc <TIM_Base_SetConfig+0x130>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d00b      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a25      	ldr	r2, [pc, #148]	; (80072e0 <TIM_Base_SetConfig+0x134>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d007      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a24      	ldr	r2, [pc, #144]	; (80072e4 <TIM_Base_SetConfig+0x138>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_Base_SetConfig+0xb2>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a23      	ldr	r2, [pc, #140]	; (80072e8 <TIM_Base_SetConfig+0x13c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d108      	bne.n	8007270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	4313      	orrs	r3, r2
 800726e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a0a      	ldr	r2, [pc, #40]	; (80072c0 <TIM_Base_SetConfig+0x114>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d003      	beq.n	80072a4 <TIM_Base_SetConfig+0xf8>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a0c      	ldr	r2, [pc, #48]	; (80072d0 <TIM_Base_SetConfig+0x124>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d103      	bne.n	80072ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	691a      	ldr	r2, [r3, #16]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	615a      	str	r2, [r3, #20]
}
 80072b2:	bf00      	nop
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40010000 	.word	0x40010000
 80072c4:	40000400 	.word	0x40000400
 80072c8:	40000800 	.word	0x40000800
 80072cc:	40000c00 	.word	0x40000c00
 80072d0:	40010400 	.word	0x40010400
 80072d4:	40014000 	.word	0x40014000
 80072d8:	40014400 	.word	0x40014400
 80072dc:	40014800 	.word	0x40014800
 80072e0:	40001800 	.word	0x40001800
 80072e4:	40001c00 	.word	0x40001c00
 80072e8:	40002000 	.word	0x40002000

080072ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
 80072f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f023 0201 	bic.w	r2, r3, #1
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007314:	68fa      	ldr	r2, [r7, #12]
 8007316:	4b2b      	ldr	r3, [pc, #172]	; (80073c4 <TIM_OC1_SetConfig+0xd8>)
 8007318:	4013      	ands	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f023 0303 	bic.w	r3, r3, #3
 8007322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f023 0302 	bic.w	r3, r3, #2
 8007334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	697a      	ldr	r2, [r7, #20]
 800733c:	4313      	orrs	r3, r2
 800733e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a21      	ldr	r2, [pc, #132]	; (80073c8 <TIM_OC1_SetConfig+0xdc>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d003      	beq.n	8007350 <TIM_OC1_SetConfig+0x64>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a20      	ldr	r2, [pc, #128]	; (80073cc <TIM_OC1_SetConfig+0xe0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d10c      	bne.n	800736a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f023 0308 	bic.w	r3, r3, #8
 8007356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f023 0304 	bic.w	r3, r3, #4
 8007368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a16      	ldr	r2, [pc, #88]	; (80073c8 <TIM_OC1_SetConfig+0xdc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d003      	beq.n	800737a <TIM_OC1_SetConfig+0x8e>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a15      	ldr	r2, [pc, #84]	; (80073cc <TIM_OC1_SetConfig+0xe0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d111      	bne.n	800739e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	695b      	ldr	r3, [r3, #20]
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	4313      	orrs	r3, r2
 800739c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	621a      	str	r2, [r3, #32]
}
 80073b8:	bf00      	nop
 80073ba:	371c      	adds	r7, #28
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	fffeff8f 	.word	0xfffeff8f
 80073c8:	40010000 	.word	0x40010000
 80073cc:	40010400 	.word	0x40010400

080073d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	f023 0210 	bic.w	r2, r3, #16
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a1b      	ldr	r3, [r3, #32]
 80073ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4b2e      	ldr	r3, [pc, #184]	; (80074b4 <TIM_OC2_SetConfig+0xe4>)
 80073fc:	4013      	ands	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	4313      	orrs	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f023 0320 	bic.w	r3, r3, #32
 800741a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	011b      	lsls	r3, r3, #4
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a23      	ldr	r2, [pc, #140]	; (80074b8 <TIM_OC2_SetConfig+0xe8>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d003      	beq.n	8007438 <TIM_OC2_SetConfig+0x68>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4a22      	ldr	r2, [pc, #136]	; (80074bc <TIM_OC2_SetConfig+0xec>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d10d      	bne.n	8007454 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800743e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	011b      	lsls	r3, r3, #4
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4313      	orrs	r3, r2
 800744a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007452:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a18      	ldr	r2, [pc, #96]	; (80074b8 <TIM_OC2_SetConfig+0xe8>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d003      	beq.n	8007464 <TIM_OC2_SetConfig+0x94>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a17      	ldr	r2, [pc, #92]	; (80074bc <TIM_OC2_SetConfig+0xec>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d113      	bne.n	800748c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800746a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007472:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	695b      	ldr	r3, [r3, #20]
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	4313      	orrs	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	009b      	lsls	r3, r3, #2
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	4313      	orrs	r3, r2
 800748a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	621a      	str	r2, [r3, #32]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	feff8fff 	.word	0xfeff8fff
 80074b8:	40010000 	.word	0x40010000
 80074bc:	40010400 	.word	0x40010400

080074c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b087      	sub	sp, #28
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a1b      	ldr	r3, [r3, #32]
 80074da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	685b      	ldr	r3, [r3, #4]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	4b2d      	ldr	r3, [pc, #180]	; (80075a0 <TIM_OC3_SetConfig+0xe0>)
 80074ec:	4013      	ands	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f023 0303 	bic.w	r3, r3, #3
 80074f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4313      	orrs	r3, r2
 8007500:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007508:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	021b      	lsls	r3, r3, #8
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	4a22      	ldr	r2, [pc, #136]	; (80075a4 <TIM_OC3_SetConfig+0xe4>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d003      	beq.n	8007526 <TIM_OC3_SetConfig+0x66>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a21      	ldr	r2, [pc, #132]	; (80075a8 <TIM_OC3_SetConfig+0xe8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d10d      	bne.n	8007542 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800752c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	021b      	lsls	r3, r3, #8
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007540:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a17      	ldr	r2, [pc, #92]	; (80075a4 <TIM_OC3_SetConfig+0xe4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d003      	beq.n	8007552 <TIM_OC3_SetConfig+0x92>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a16      	ldr	r2, [pc, #88]	; (80075a8 <TIM_OC3_SetConfig+0xe8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d113      	bne.n	800757a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	621a      	str	r2, [r3, #32]
}
 8007594:	bf00      	nop
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	fffeff8f 	.word	0xfffeff8f
 80075a4:	40010000 	.word	0x40010000
 80075a8:	40010400 	.word	0x40010400

080075ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6a1b      	ldr	r3, [r3, #32]
 80075ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	4b1e      	ldr	r3, [pc, #120]	; (8007650 <TIM_OC4_SetConfig+0xa4>)
 80075d8:	4013      	ands	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	021b      	lsls	r3, r3, #8
 80075ea:	68fa      	ldr	r2, [r7, #12]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	031b      	lsls	r3, r3, #12
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	4a13      	ldr	r2, [pc, #76]	; (8007654 <TIM_OC4_SetConfig+0xa8>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d003      	beq.n	8007614 <TIM_OC4_SetConfig+0x68>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	4a12      	ldr	r2, [pc, #72]	; (8007658 <TIM_OC4_SetConfig+0xac>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d109      	bne.n	8007628 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800761a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	695b      	ldr	r3, [r3, #20]
 8007620:	019b      	lsls	r3, r3, #6
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	4313      	orrs	r3, r2
 8007626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685a      	ldr	r2, [r3, #4]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	621a      	str	r2, [r3, #32]
}
 8007642:	bf00      	nop
 8007644:	371c      	adds	r7, #28
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr
 800764e:	bf00      	nop
 8007650:	feff8fff 	.word	0xfeff8fff
 8007654:	40010000 	.word	0x40010000
 8007658:	40010400 	.word	0x40010400

0800765c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4b1b      	ldr	r3, [pc, #108]	; (80076f4 <TIM_OC5_SetConfig+0x98>)
 8007688:	4013      	ands	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4313      	orrs	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800769c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	041b      	lsls	r3, r3, #16
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a12      	ldr	r2, [pc, #72]	; (80076f8 <TIM_OC5_SetConfig+0x9c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d003      	beq.n	80076ba <TIM_OC5_SetConfig+0x5e>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a11      	ldr	r2, [pc, #68]	; (80076fc <TIM_OC5_SetConfig+0xa0>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d109      	bne.n	80076ce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	695b      	ldr	r3, [r3, #20]
 80076c6:	021b      	lsls	r3, r3, #8
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	697a      	ldr	r2, [r7, #20]
 80076d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	693a      	ldr	r2, [r7, #16]
 80076e6:	621a      	str	r2, [r3, #32]
}
 80076e8:	bf00      	nop
 80076ea:	371c      	adds	r7, #28
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	fffeff8f 	.word	0xfffeff8f
 80076f8:	40010000 	.word	0x40010000
 80076fc:	40010400 	.word	0x40010400

08007700 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	4b1c      	ldr	r3, [pc, #112]	; (800779c <TIM_OC6_SetConfig+0x9c>)
 800772c:	4013      	ands	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	021b      	lsls	r3, r3, #8
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	4313      	orrs	r3, r2
 800773a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	051b      	lsls	r3, r3, #20
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	4313      	orrs	r3, r2
 800774e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a13      	ldr	r2, [pc, #76]	; (80077a0 <TIM_OC6_SetConfig+0xa0>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_OC6_SetConfig+0x60>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a12      	ldr	r2, [pc, #72]	; (80077a4 <TIM_OC6_SetConfig+0xa4>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d109      	bne.n	8007774 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007766:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	029b      	lsls	r3, r3, #10
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4313      	orrs	r3, r2
 8007772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	621a      	str	r2, [r3, #32]
}
 800778e:	bf00      	nop
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	feff8fff 	.word	0xfeff8fff
 80077a0:	40010000 	.word	0x40010000
 80077a4:	40010400 	.word	0x40010400

080077a8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80077cc:	697a      	ldr	r2, [r7, #20]
 80077ce:	4b39      	ldr	r3, [pc, #228]	; (80078b4 <TIM_SlaveTimer_SetConfig+0x10c>)
 80077d0:	4013      	ands	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	697a      	ldr	r2, [r7, #20]
 80077da:	4313      	orrs	r3, r2
 80077dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	2b30      	cmp	r3, #48	; 0x30
 80077ec:	d05c      	beq.n	80078a8 <TIM_SlaveTimer_SetConfig+0x100>
 80077ee:	2b30      	cmp	r3, #48	; 0x30
 80077f0:	d806      	bhi.n	8007800 <TIM_SlaveTimer_SetConfig+0x58>
 80077f2:	2b10      	cmp	r3, #16
 80077f4:	d058      	beq.n	80078a8 <TIM_SlaveTimer_SetConfig+0x100>
 80077f6:	2b20      	cmp	r3, #32
 80077f8:	d056      	beq.n	80078a8 <TIM_SlaveTimer_SetConfig+0x100>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d054      	beq.n	80078a8 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80077fe:	e054      	b.n	80078aa <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007800:	2b50      	cmp	r3, #80	; 0x50
 8007802:	d03d      	beq.n	8007880 <TIM_SlaveTimer_SetConfig+0xd8>
 8007804:	2b50      	cmp	r3, #80	; 0x50
 8007806:	d802      	bhi.n	800780e <TIM_SlaveTimer_SetConfig+0x66>
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	d010      	beq.n	800782e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800780c:	e04d      	b.n	80078aa <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800780e:	2b60      	cmp	r3, #96	; 0x60
 8007810:	d040      	beq.n	8007894 <TIM_SlaveTimer_SetConfig+0xec>
 8007812:	2b70      	cmp	r3, #112	; 0x70
 8007814:	d000      	beq.n	8007818 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8007816:	e048      	b.n	80078aa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	68d9      	ldr	r1, [r3, #12]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f000 f9ea 	bl	8007c00 <TIM_ETR_SetConfig>
      break;
 800782c:	e03d      	b.n	80078aa <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b05      	cmp	r3, #5
 8007834:	d101      	bne.n	800783a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e038      	b.n	80078ac <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6a1a      	ldr	r2, [r3, #32]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0201 	bic.w	r2, r2, #1
 8007850:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699b      	ldr	r3, [r3, #24]
 8007858:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007860:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	68fa      	ldr	r2, [r7, #12]
 800786a:	4313      	orrs	r3, r2
 800786c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	621a      	str	r2, [r3, #32]
      break;
 800787e:	e014      	b.n	80078aa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	6899      	ldr	r1, [r3, #8]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	461a      	mov	r2, r3
 800788e:	f000 f887 	bl	80079a0 <TIM_TI1_ConfigInputStage>
      break;
 8007892:	e00a      	b.n	80078aa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6818      	ldr	r0, [r3, #0]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	6899      	ldr	r1, [r3, #8]
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	691b      	ldr	r3, [r3, #16]
 80078a0:	461a      	mov	r2, r3
 80078a2:	f000 f8e9 	bl	8007a78 <TIM_TI2_ConfigInputStage>
      break;
 80078a6:	e000      	b.n	80078aa <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80078a8:	bf00      	nop
  }
  return HAL_OK;
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	fffefff8 	.word	0xfffefff8

080078b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b087      	sub	sp, #28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	f023 0201 	bic.w	r2, r3, #1
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6a1b      	ldr	r3, [r3, #32]
 80078dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	4a28      	ldr	r2, [pc, #160]	; (8007984 <TIM_TI1_SetConfig+0xcc>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d01b      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ec:	d017      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	4a25      	ldr	r2, [pc, #148]	; (8007988 <TIM_TI1_SetConfig+0xd0>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	4a24      	ldr	r2, [pc, #144]	; (800798c <TIM_TI1_SetConfig+0xd4>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d00f      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4a23      	ldr	r2, [pc, #140]	; (8007990 <TIM_TI1_SetConfig+0xd8>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d00b      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	4a22      	ldr	r2, [pc, #136]	; (8007994 <TIM_TI1_SetConfig+0xdc>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d007      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	4a21      	ldr	r2, [pc, #132]	; (8007998 <TIM_TI1_SetConfig+0xe0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d003      	beq.n	800791e <TIM_TI1_SetConfig+0x66>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4a20      	ldr	r2, [pc, #128]	; (800799c <TIM_TI1_SetConfig+0xe4>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d101      	bne.n	8007922 <TIM_TI1_SetConfig+0x6a>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <TIM_TI1_SetConfig+0x6c>
 8007922:	2300      	movs	r3, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d008      	beq.n	800793a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	f023 0303 	bic.w	r3, r3, #3
 800792e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4313      	orrs	r3, r2
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	e003      	b.n	8007942 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f043 0301 	orr.w	r3, r3, #1
 8007940:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007948:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	b2db      	uxtb	r3, r3
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4313      	orrs	r3, r2
 8007954:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	f023 030a 	bic.w	r3, r3, #10
 800795c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	f003 030a 	and.w	r3, r3, #10
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	4313      	orrs	r3, r2
 8007968:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	697a      	ldr	r2, [r7, #20]
 800796e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	693a      	ldr	r2, [r7, #16]
 8007974:	621a      	str	r2, [r3, #32]
}
 8007976:	bf00      	nop
 8007978:	371c      	adds	r7, #28
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40010000 	.word	0x40010000
 8007988:	40000400 	.word	0x40000400
 800798c:	40000800 	.word	0x40000800
 8007990:	40000c00 	.word	0x40000c00
 8007994:	40010400 	.word	0x40010400
 8007998:	40014000 	.word	0x40014000
 800799c:	40001800 	.word	0x40001800

080079a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	f023 0201 	bic.w	r2, r3, #1
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80079ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f023 030a 	bic.w	r3, r3, #10
 80079dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	621a      	str	r2, [r3, #32]
}
 80079f2:	bf00      	nop
 80079f4:	371c      	adds	r7, #28
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b087      	sub	sp, #28
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	60f8      	str	r0, [r7, #12]
 8007a06:	60b9      	str	r1, [r7, #8]
 8007a08:	607a      	str	r2, [r7, #4]
 8007a0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a1b      	ldr	r3, [r3, #32]
 8007a10:	f023 0210 	bic.w	r2, r3, #16
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	699b      	ldr	r3, [r3, #24]
 8007a1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	021b      	lsls	r3, r3, #8
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007a3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	031b      	lsls	r3, r3, #12
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007a50:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007a5a:	693a      	ldr	r2, [r7, #16]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	697a      	ldr	r2, [r7, #20]
 8007a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	621a      	str	r2, [r3, #32]
}
 8007a6c:	bf00      	nop
 8007a6e:	371c      	adds	r7, #28
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b087      	sub	sp, #28
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6a1b      	ldr	r3, [r3, #32]
 8007a88:	f023 0210 	bic.w	r2, r3, #16
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6a1b      	ldr	r3, [r3, #32]
 8007a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007aa2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	031b      	lsls	r3, r3, #12
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ab4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	011b      	lsls	r3, r3, #4
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	621a      	str	r2, [r3, #32]
}
 8007acc:	bf00      	nop
 8007ace:	371c      	adds	r7, #28
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
 8007ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
 8007aea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	69db      	ldr	r3, [r3, #28]
 8007af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f023 0303 	bic.w	r3, r3, #3
 8007b04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	697a      	ldr	r2, [r7, #20]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007b28:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007b32:	693a      	ldr	r2, [r7, #16]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	697a      	ldr	r2, [r7, #20]
 8007b3c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	693a      	ldr	r2, [r7, #16]
 8007b42:	621a      	str	r2, [r3, #32]
}
 8007b44:	bf00      	nop
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a1b      	ldr	r3, [r3, #32]
 8007b62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	69db      	ldr	r3, [r3, #28]
 8007b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b8e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	031b      	lsls	r3, r3, #12
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007ba2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	031b      	lsls	r3, r3, #12
 8007ba8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007bac:	693a      	ldr	r2, [r7, #16]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	621a      	str	r2, [r3, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	371c      	adds	r7, #28
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b085      	sub	sp, #20
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	4313      	orrs	r3, r2
 8007be8:	f043 0307 	orr.w	r3, r3, #7
 8007bec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	609a      	str	r2, [r3, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	3714      	adds	r7, #20
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
 8007c0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	021a      	lsls	r2, r3, #8
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	431a      	orrs	r2, r3
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	697a      	ldr	r2, [r7, #20]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	609a      	str	r2, [r3, #8]
}
 8007c34:	bf00      	nop
 8007c36:	371c      	adds	r7, #28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b087      	sub	sp, #28
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f003 031f 	and.w	r3, r3, #31
 8007c52:	2201      	movs	r2, #1
 8007c54:	fa02 f303 	lsl.w	r3, r2, r3
 8007c58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6a1a      	ldr	r2, [r3, #32]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	43db      	mvns	r3, r3
 8007c62:	401a      	ands	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a1a      	ldr	r2, [r3, #32]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f003 031f 	and.w	r3, r3, #31
 8007c72:	6879      	ldr	r1, [r7, #4]
 8007c74:	fa01 f303 	lsl.w	r3, r1, r3
 8007c78:	431a      	orrs	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	621a      	str	r2, [r3, #32]
}
 8007c7e:	bf00      	nop
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
	...

08007c8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d101      	bne.n	8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ca0:	2302      	movs	r3, #2
 8007ca2:	e06d      	b.n	8007d80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	4a30      	ldr	r2, [pc, #192]	; (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d004      	beq.n	8007cd8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	4a2f      	ldr	r2, [pc, #188]	; (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d108      	bne.n	8007cea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007cde:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	68fa      	ldr	r2, [r7, #12]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a20      	ldr	r2, [pc, #128]	; (8007d8c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d022      	beq.n	8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d16:	d01d      	beq.n	8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a1d      	ldr	r2, [pc, #116]	; (8007d94 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d018      	beq.n	8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a1c      	ldr	r2, [pc, #112]	; (8007d98 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d013      	beq.n	8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a1a      	ldr	r2, [pc, #104]	; (8007d9c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00e      	beq.n	8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a15      	ldr	r2, [pc, #84]	; (8007d90 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d009      	beq.n	8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a16      	ldr	r2, [pc, #88]	; (8007da0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d004      	beq.n	8007d54 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a15      	ldr	r2, [pc, #84]	; (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d10c      	bne.n	8007d6e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	689b      	ldr	r3, [r3, #8]
 8007d60:	68ba      	ldr	r2, [r7, #8]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3714      	adds	r7, #20
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	40010000 	.word	0x40010000
 8007d90:	40010400 	.word	0x40010400
 8007d94:	40000400 	.word	0x40000400
 8007d98:	40000800 	.word	0x40000800
 8007d9c:	40000c00 	.word	0x40000c00
 8007da0:	40014000 	.word	0x40014000
 8007da4:	40001800 	.word	0x40001800

08007da8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007db2:	2300      	movs	r3, #0
 8007db4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d101      	bne.n	8007dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e065      	b.n	8007e90 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	691b      	ldr	r3, [r3, #16]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	041b      	lsls	r3, r3, #16
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a16      	ldr	r2, [pc, #88]	; (8007e9c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d004      	beq.n	8007e52 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a14      	ldr	r2, [pc, #80]	; (8007ea0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d115      	bne.n	8007e7e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	051b      	lsls	r3, r3, #20
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3714      	adds	r7, #20
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	40010000 	.word	0x40010000
 8007ea0:	40010400 	.word	0x40010400

08007ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007eac:	bf00      	nop
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e040      	b.n	8007f74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fa fc28 	bl	8002758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2224      	movs	r2, #36	; 0x24
 8007f0c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0201 	bic.w	r2, r2, #1
 8007f1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fac4 	bl	80084ac <UART_SetConfig>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e022      	b.n	8007f74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d002      	beq.n	8007f3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fd62 	bl	8008a00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685a      	ldr	r2, [r3, #4]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689a      	ldr	r2, [r3, #8]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f042 0201 	orr.w	r2, r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fde9 	bl	8008b44 <UART_CheckIdleState>
 8007f72:	4603      	mov	r3, r0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08a      	sub	sp, #40	; 0x28
 8007f80:	af02      	add	r7, sp, #8
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	603b      	str	r3, [r7, #0]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f90:	2b20      	cmp	r3, #32
 8007f92:	d17f      	bne.n	8008094 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d002      	beq.n	8007fa0 <HAL_UART_Transmit+0x24>
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e078      	b.n	8008096 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d101      	bne.n	8007fb2 <HAL_UART_Transmit+0x36>
 8007fae:	2302      	movs	r3, #2
 8007fb0:	e071      	b.n	8008096 <HAL_UART_Transmit+0x11a>
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2221      	movs	r2, #33	; 0x21
 8007fc4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8007fc6:	f7fa fe33 	bl	8002c30 <HAL_GetTick>
 8007fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	88fa      	ldrh	r2, [r7, #6]
 8007fd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	88fa      	ldrh	r2, [r7, #6]
 8007fd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe4:	d108      	bne.n	8007ff8 <HAL_UART_Transmit+0x7c>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d104      	bne.n	8007ff8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	e003      	b.n	8008000 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008008:	e02c      	b.n	8008064 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2200      	movs	r2, #0
 8008012:	2180      	movs	r1, #128	; 0x80
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 fdda 	bl	8008bce <UART_WaitOnFlagUntilTimeout>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e038      	b.n	8008096 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10b      	bne.n	8008042 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008038:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	3302      	adds	r3, #2
 800803e:	61bb      	str	r3, [r7, #24]
 8008040:	e007      	b.n	8008052 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	781a      	ldrb	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	3301      	adds	r3, #1
 8008050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008058:	b29b      	uxth	r3, r3
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800806a:	b29b      	uxth	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d1cc      	bne.n	800800a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	2200      	movs	r2, #0
 8008078:	2140      	movs	r1, #64	; 0x40
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 fda7 	bl	8008bce <UART_WaitOnFlagUntilTimeout>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e005      	b.n	8008096 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2220      	movs	r2, #32
 800808e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008090:	2300      	movs	r3, #0
 8008092:	e000      	b.n	8008096 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008094:	2302      	movs	r3, #2
  }
}
 8008096:	4618      	mov	r0, r3
 8008098:	3720      	adds	r7, #32
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
	...

080080a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b085      	sub	sp, #20
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	4613      	mov	r3, r2
 80080ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	f040 808a 	bne.w	80081cc <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <HAL_UART_Receive_IT+0x24>
 80080be:	88fb      	ldrh	r3, [r7, #6]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e082      	b.n	80081ce <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d101      	bne.n	80080d6 <HAL_UART_Receive_IT+0x36>
 80080d2:	2302      	movs	r3, #2
 80080d4:	e07b      	b.n	80081ce <HAL_UART_Receive_IT+0x12e>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	88fa      	ldrh	r2, [r7, #6]
 80080e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	88fa      	ldrh	r2, [r7, #6]
 80080f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2200      	movs	r2, #0
 80080f8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	689b      	ldr	r3, [r3, #8]
 80080fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008102:	d10e      	bne.n	8008122 <HAL_UART_Receive_IT+0x82>
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	691b      	ldr	r3, [r3, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d105      	bne.n	8008118 <HAL_UART_Receive_IT+0x78>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008112:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008116:	e02d      	b.n	8008174 <HAL_UART_Receive_IT+0xd4>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	22ff      	movs	r2, #255	; 0xff
 800811c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008120:	e028      	b.n	8008174 <HAL_UART_Receive_IT+0xd4>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10d      	bne.n	8008146 <HAL_UART_Receive_IT+0xa6>
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d104      	bne.n	800813c <HAL_UART_Receive_IT+0x9c>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	22ff      	movs	r2, #255	; 0xff
 8008136:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800813a:	e01b      	b.n	8008174 <HAL_UART_Receive_IT+0xd4>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	227f      	movs	r2, #127	; 0x7f
 8008140:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008144:	e016      	b.n	8008174 <HAL_UART_Receive_IT+0xd4>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800814e:	d10d      	bne.n	800816c <HAL_UART_Receive_IT+0xcc>
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d104      	bne.n	8008162 <HAL_UART_Receive_IT+0xc2>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	227f      	movs	r2, #127	; 0x7f
 800815c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008160:	e008      	b.n	8008174 <HAL_UART_Receive_IT+0xd4>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	223f      	movs	r2, #63	; 0x3f
 8008166:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800816a:	e003      	b.n	8008174 <HAL_UART_Receive_IT+0xd4>
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2222      	movs	r2, #34	; 0x22
 800817e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f042 0201 	orr.w	r2, r2, #1
 800818e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	689b      	ldr	r3, [r3, #8]
 8008194:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008198:	d107      	bne.n	80081aa <HAL_UART_Receive_IT+0x10a>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d103      	bne.n	80081aa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	4a0d      	ldr	r2, [pc, #52]	; (80081dc <HAL_UART_Receive_IT+0x13c>)
 80081a6:	661a      	str	r2, [r3, #96]	; 0x60
 80081a8:	e002      	b.n	80081b0 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4a0c      	ldr	r2, [pc, #48]	; (80081e0 <HAL_UART_Receive_IT+0x140>)
 80081ae:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	2200      	movs	r2, #0
 80081b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80081c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	e000      	b.n	80081ce <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80081cc:	2302      	movs	r3, #2
  }
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3714      	adds	r7, #20
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	08008e09 	.word	0x08008e09
 80081e0:	08008d63 	.word	0x08008d63

080081e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008204:	69fa      	ldr	r2, [r7, #28]
 8008206:	f640 030f 	movw	r3, #2063	; 0x80f
 800820a:	4013      	ands	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d113      	bne.n	800823c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f003 0320 	and.w	r3, r3, #32
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00e      	beq.n	800823c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	f003 0320 	and.w	r3, r3, #32
 8008224:	2b00      	cmp	r3, #0
 8008226:	d009      	beq.n	800823c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822c:	2b00      	cmp	r3, #0
 800822e:	f000 8114 	beq.w	800845a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	4798      	blx	r3
      }
      return;
 800823a:	e10e      	b.n	800845a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 80d6 	beq.w	80083f0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d105      	bne.n	800825a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 80cb 	beq.w	80083f0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	f003 0301 	and.w	r3, r3, #1
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00e      	beq.n	8008282 <HAL_UART_IRQHandler+0x9e>
 8008264:	69bb      	ldr	r3, [r7, #24]
 8008266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800826a:	2b00      	cmp	r3, #0
 800826c:	d009      	beq.n	8008282 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2201      	movs	r2, #1
 8008274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800827a:	f043 0201 	orr.w	r2, r3, #1
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	f003 0302 	and.w	r3, r3, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00e      	beq.n	80082aa <HAL_UART_IRQHandler+0xc6>
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	f003 0301 	and.w	r3, r3, #1
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2202      	movs	r2, #2
 800829c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082a2:	f043 0204 	orr.w	r2, r3, #4
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	f003 0304 	and.w	r3, r3, #4
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00e      	beq.n	80082d2 <HAL_UART_IRQHandler+0xee>
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d009      	beq.n	80082d2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2204      	movs	r2, #4
 80082c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082ca:	f043 0202 	orr.w	r2, r3, #2
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	f003 0308 	and.w	r3, r3, #8
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d013      	beq.n	8008304 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80082dc:	69bb      	ldr	r3, [r7, #24]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d104      	bne.n	80082f0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d009      	beq.n	8008304 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2208      	movs	r2, #8
 80082f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082fc:	f043 0208 	orr.w	r2, r3, #8
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800830a:	2b00      	cmp	r3, #0
 800830c:	d00f      	beq.n	800832e <HAL_UART_IRQHandler+0x14a>
 800830e:	69bb      	ldr	r3, [r7, #24]
 8008310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00a      	beq.n	800832e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008326:	f043 0220 	orr.w	r2, r3, #32
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8093 	beq.w	800845e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008338:	69fb      	ldr	r3, [r7, #28]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00c      	beq.n	800835c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	f003 0320 	and.w	r3, r3, #32
 8008348:	2b00      	cmp	r3, #0
 800834a:	d007      	beq.n	800835c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008350:	2b00      	cmp	r3, #0
 8008352:	d003      	beq.n	800835c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008360:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836c:	2b40      	cmp	r3, #64	; 0x40
 800836e:	d004      	beq.n	800837a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008376:	2b00      	cmp	r3, #0
 8008378:	d031      	beq.n	80083de <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fca2 	bl	8008cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800838a:	2b40      	cmp	r3, #64	; 0x40
 800838c:	d123      	bne.n	80083d6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689a      	ldr	r2, [r3, #8]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800839c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d013      	beq.n	80083ce <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083aa:	4a30      	ldr	r2, [pc, #192]	; (800846c <HAL_UART_IRQHandler+0x288>)
 80083ac:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fb fa96 	bl	80038e4 <HAL_DMA_Abort_IT>
 80083b8:	4603      	mov	r3, r0
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d016      	beq.n	80083ec <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80083c8:	4610      	mov	r0, r2
 80083ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083cc:	e00e      	b.n	80083ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f858 	bl	8008484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083d4:	e00a      	b.n	80083ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f854 	bl	8008484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	e006      	b.n	80083ec <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 f850 	bl	8008484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2200      	movs	r2, #0
 80083e8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80083ea:	e038      	b.n	800845e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083ec:	bf00      	nop
    return;
 80083ee:	e036      	b.n	800845e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d00d      	beq.n	8008416 <HAL_UART_IRQHandler+0x232>
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d008      	beq.n	8008416 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800840c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f842 	bl	8008498 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008414:	e026      	b.n	8008464 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00d      	beq.n	800843c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008426:	2b00      	cmp	r3, #0
 8008428:	d008      	beq.n	800843c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800842e:	2b00      	cmp	r3, #0
 8008430:	d017      	beq.n	8008462 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	4798      	blx	r3
    }
    return;
 800843a:	e012      	b.n	8008462 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00e      	beq.n	8008464 <HAL_UART_IRQHandler+0x280>
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800844c:	2b00      	cmp	r3, #0
 800844e:	d009      	beq.n	8008464 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f000 fc6d 	bl	8008d30 <UART_EndTransmit_IT>
    return;
 8008456:	bf00      	nop
 8008458:	e004      	b.n	8008464 <HAL_UART_IRQHandler+0x280>
      return;
 800845a:	bf00      	nop
 800845c:	e002      	b.n	8008464 <HAL_UART_IRQHandler+0x280>
    return;
 800845e:	bf00      	nop
 8008460:	e000      	b.n	8008464 <HAL_UART_IRQHandler+0x280>
    return;
 8008462:	bf00      	nop
  }

}
 8008464:	3720      	adds	r7, #32
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}
 800846a:	bf00      	nop
 800846c:	08008d05 	.word	0x08008d05

08008470 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008478:	bf00      	nop
 800847a:	370c      	adds	r7, #12
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr

08008498 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80084b4:	2300      	movs	r3, #0
 80084b6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689a      	ldr	r2, [r3, #8]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	69db      	ldr	r3, [r3, #28]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	4bb1      	ldr	r3, [pc, #708]	; (80087a0 <UART_SetConfig+0x2f4>)
 80084dc:	4013      	ands	r3, r2
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6812      	ldr	r2, [r2, #0]
 80084e2:	6939      	ldr	r1, [r7, #16]
 80084e4:	430b      	orrs	r3, r1
 80084e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	430a      	orrs	r2, r1
 80084fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	4313      	orrs	r3, r2
 800850c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	689b      	ldr	r3, [r3, #8]
 8008514:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	430a      	orrs	r2, r1
 8008520:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a9f      	ldr	r2, [pc, #636]	; (80087a4 <UART_SetConfig+0x2f8>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d121      	bne.n	8008570 <UART_SetConfig+0xc4>
 800852c:	4b9e      	ldr	r3, [pc, #632]	; (80087a8 <UART_SetConfig+0x2fc>)
 800852e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008532:	f003 0303 	and.w	r3, r3, #3
 8008536:	2b03      	cmp	r3, #3
 8008538:	d816      	bhi.n	8008568 <UART_SetConfig+0xbc>
 800853a:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <UART_SetConfig+0x94>)
 800853c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008540:	08008551 	.word	0x08008551
 8008544:	0800855d 	.word	0x0800855d
 8008548:	08008557 	.word	0x08008557
 800854c:	08008563 	.word	0x08008563
 8008550:	2301      	movs	r3, #1
 8008552:	77fb      	strb	r3, [r7, #31]
 8008554:	e151      	b.n	80087fa <UART_SetConfig+0x34e>
 8008556:	2302      	movs	r3, #2
 8008558:	77fb      	strb	r3, [r7, #31]
 800855a:	e14e      	b.n	80087fa <UART_SetConfig+0x34e>
 800855c:	2304      	movs	r3, #4
 800855e:	77fb      	strb	r3, [r7, #31]
 8008560:	e14b      	b.n	80087fa <UART_SetConfig+0x34e>
 8008562:	2308      	movs	r3, #8
 8008564:	77fb      	strb	r3, [r7, #31]
 8008566:	e148      	b.n	80087fa <UART_SetConfig+0x34e>
 8008568:	2310      	movs	r3, #16
 800856a:	77fb      	strb	r3, [r7, #31]
 800856c:	bf00      	nop
 800856e:	e144      	b.n	80087fa <UART_SetConfig+0x34e>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a8d      	ldr	r2, [pc, #564]	; (80087ac <UART_SetConfig+0x300>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d134      	bne.n	80085e4 <UART_SetConfig+0x138>
 800857a:	4b8b      	ldr	r3, [pc, #556]	; (80087a8 <UART_SetConfig+0x2fc>)
 800857c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008580:	f003 030c 	and.w	r3, r3, #12
 8008584:	2b0c      	cmp	r3, #12
 8008586:	d829      	bhi.n	80085dc <UART_SetConfig+0x130>
 8008588:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <UART_SetConfig+0xe4>)
 800858a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800858e:	bf00      	nop
 8008590:	080085c5 	.word	0x080085c5
 8008594:	080085dd 	.word	0x080085dd
 8008598:	080085dd 	.word	0x080085dd
 800859c:	080085dd 	.word	0x080085dd
 80085a0:	080085d1 	.word	0x080085d1
 80085a4:	080085dd 	.word	0x080085dd
 80085a8:	080085dd 	.word	0x080085dd
 80085ac:	080085dd 	.word	0x080085dd
 80085b0:	080085cb 	.word	0x080085cb
 80085b4:	080085dd 	.word	0x080085dd
 80085b8:	080085dd 	.word	0x080085dd
 80085bc:	080085dd 	.word	0x080085dd
 80085c0:	080085d7 	.word	0x080085d7
 80085c4:	2300      	movs	r3, #0
 80085c6:	77fb      	strb	r3, [r7, #31]
 80085c8:	e117      	b.n	80087fa <UART_SetConfig+0x34e>
 80085ca:	2302      	movs	r3, #2
 80085cc:	77fb      	strb	r3, [r7, #31]
 80085ce:	e114      	b.n	80087fa <UART_SetConfig+0x34e>
 80085d0:	2304      	movs	r3, #4
 80085d2:	77fb      	strb	r3, [r7, #31]
 80085d4:	e111      	b.n	80087fa <UART_SetConfig+0x34e>
 80085d6:	2308      	movs	r3, #8
 80085d8:	77fb      	strb	r3, [r7, #31]
 80085da:	e10e      	b.n	80087fa <UART_SetConfig+0x34e>
 80085dc:	2310      	movs	r3, #16
 80085de:	77fb      	strb	r3, [r7, #31]
 80085e0:	bf00      	nop
 80085e2:	e10a      	b.n	80087fa <UART_SetConfig+0x34e>
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a71      	ldr	r2, [pc, #452]	; (80087b0 <UART_SetConfig+0x304>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d120      	bne.n	8008630 <UART_SetConfig+0x184>
 80085ee:	4b6e      	ldr	r3, [pc, #440]	; (80087a8 <UART_SetConfig+0x2fc>)
 80085f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80085f8:	2b10      	cmp	r3, #16
 80085fa:	d00f      	beq.n	800861c <UART_SetConfig+0x170>
 80085fc:	2b10      	cmp	r3, #16
 80085fe:	d802      	bhi.n	8008606 <UART_SetConfig+0x15a>
 8008600:	2b00      	cmp	r3, #0
 8008602:	d005      	beq.n	8008610 <UART_SetConfig+0x164>
 8008604:	e010      	b.n	8008628 <UART_SetConfig+0x17c>
 8008606:	2b20      	cmp	r3, #32
 8008608:	d005      	beq.n	8008616 <UART_SetConfig+0x16a>
 800860a:	2b30      	cmp	r3, #48	; 0x30
 800860c:	d009      	beq.n	8008622 <UART_SetConfig+0x176>
 800860e:	e00b      	b.n	8008628 <UART_SetConfig+0x17c>
 8008610:	2300      	movs	r3, #0
 8008612:	77fb      	strb	r3, [r7, #31]
 8008614:	e0f1      	b.n	80087fa <UART_SetConfig+0x34e>
 8008616:	2302      	movs	r3, #2
 8008618:	77fb      	strb	r3, [r7, #31]
 800861a:	e0ee      	b.n	80087fa <UART_SetConfig+0x34e>
 800861c:	2304      	movs	r3, #4
 800861e:	77fb      	strb	r3, [r7, #31]
 8008620:	e0eb      	b.n	80087fa <UART_SetConfig+0x34e>
 8008622:	2308      	movs	r3, #8
 8008624:	77fb      	strb	r3, [r7, #31]
 8008626:	e0e8      	b.n	80087fa <UART_SetConfig+0x34e>
 8008628:	2310      	movs	r3, #16
 800862a:	77fb      	strb	r3, [r7, #31]
 800862c:	bf00      	nop
 800862e:	e0e4      	b.n	80087fa <UART_SetConfig+0x34e>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a5f      	ldr	r2, [pc, #380]	; (80087b4 <UART_SetConfig+0x308>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d120      	bne.n	800867c <UART_SetConfig+0x1d0>
 800863a:	4b5b      	ldr	r3, [pc, #364]	; (80087a8 <UART_SetConfig+0x2fc>)
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008640:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008644:	2b40      	cmp	r3, #64	; 0x40
 8008646:	d00f      	beq.n	8008668 <UART_SetConfig+0x1bc>
 8008648:	2b40      	cmp	r3, #64	; 0x40
 800864a:	d802      	bhi.n	8008652 <UART_SetConfig+0x1a6>
 800864c:	2b00      	cmp	r3, #0
 800864e:	d005      	beq.n	800865c <UART_SetConfig+0x1b0>
 8008650:	e010      	b.n	8008674 <UART_SetConfig+0x1c8>
 8008652:	2b80      	cmp	r3, #128	; 0x80
 8008654:	d005      	beq.n	8008662 <UART_SetConfig+0x1b6>
 8008656:	2bc0      	cmp	r3, #192	; 0xc0
 8008658:	d009      	beq.n	800866e <UART_SetConfig+0x1c2>
 800865a:	e00b      	b.n	8008674 <UART_SetConfig+0x1c8>
 800865c:	2300      	movs	r3, #0
 800865e:	77fb      	strb	r3, [r7, #31]
 8008660:	e0cb      	b.n	80087fa <UART_SetConfig+0x34e>
 8008662:	2302      	movs	r3, #2
 8008664:	77fb      	strb	r3, [r7, #31]
 8008666:	e0c8      	b.n	80087fa <UART_SetConfig+0x34e>
 8008668:	2304      	movs	r3, #4
 800866a:	77fb      	strb	r3, [r7, #31]
 800866c:	e0c5      	b.n	80087fa <UART_SetConfig+0x34e>
 800866e:	2308      	movs	r3, #8
 8008670:	77fb      	strb	r3, [r7, #31]
 8008672:	e0c2      	b.n	80087fa <UART_SetConfig+0x34e>
 8008674:	2310      	movs	r3, #16
 8008676:	77fb      	strb	r3, [r7, #31]
 8008678:	bf00      	nop
 800867a:	e0be      	b.n	80087fa <UART_SetConfig+0x34e>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a4d      	ldr	r2, [pc, #308]	; (80087b8 <UART_SetConfig+0x30c>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d124      	bne.n	80086d0 <UART_SetConfig+0x224>
 8008686:	4b48      	ldr	r3, [pc, #288]	; (80087a8 <UART_SetConfig+0x2fc>)
 8008688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800868c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008690:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008694:	d012      	beq.n	80086bc <UART_SetConfig+0x210>
 8008696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800869a:	d802      	bhi.n	80086a2 <UART_SetConfig+0x1f6>
 800869c:	2b00      	cmp	r3, #0
 800869e:	d007      	beq.n	80086b0 <UART_SetConfig+0x204>
 80086a0:	e012      	b.n	80086c8 <UART_SetConfig+0x21c>
 80086a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086a6:	d006      	beq.n	80086b6 <UART_SetConfig+0x20a>
 80086a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ac:	d009      	beq.n	80086c2 <UART_SetConfig+0x216>
 80086ae:	e00b      	b.n	80086c8 <UART_SetConfig+0x21c>
 80086b0:	2300      	movs	r3, #0
 80086b2:	77fb      	strb	r3, [r7, #31]
 80086b4:	e0a1      	b.n	80087fa <UART_SetConfig+0x34e>
 80086b6:	2302      	movs	r3, #2
 80086b8:	77fb      	strb	r3, [r7, #31]
 80086ba:	e09e      	b.n	80087fa <UART_SetConfig+0x34e>
 80086bc:	2304      	movs	r3, #4
 80086be:	77fb      	strb	r3, [r7, #31]
 80086c0:	e09b      	b.n	80087fa <UART_SetConfig+0x34e>
 80086c2:	2308      	movs	r3, #8
 80086c4:	77fb      	strb	r3, [r7, #31]
 80086c6:	e098      	b.n	80087fa <UART_SetConfig+0x34e>
 80086c8:	2310      	movs	r3, #16
 80086ca:	77fb      	strb	r3, [r7, #31]
 80086cc:	bf00      	nop
 80086ce:	e094      	b.n	80087fa <UART_SetConfig+0x34e>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	4a39      	ldr	r2, [pc, #228]	; (80087bc <UART_SetConfig+0x310>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d124      	bne.n	8008724 <UART_SetConfig+0x278>
 80086da:	4b33      	ldr	r3, [pc, #204]	; (80087a8 <UART_SetConfig+0x2fc>)
 80086dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80086e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086e8:	d012      	beq.n	8008710 <UART_SetConfig+0x264>
 80086ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ee:	d802      	bhi.n	80086f6 <UART_SetConfig+0x24a>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d007      	beq.n	8008704 <UART_SetConfig+0x258>
 80086f4:	e012      	b.n	800871c <UART_SetConfig+0x270>
 80086f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086fa:	d006      	beq.n	800870a <UART_SetConfig+0x25e>
 80086fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008700:	d009      	beq.n	8008716 <UART_SetConfig+0x26a>
 8008702:	e00b      	b.n	800871c <UART_SetConfig+0x270>
 8008704:	2301      	movs	r3, #1
 8008706:	77fb      	strb	r3, [r7, #31]
 8008708:	e077      	b.n	80087fa <UART_SetConfig+0x34e>
 800870a:	2302      	movs	r3, #2
 800870c:	77fb      	strb	r3, [r7, #31]
 800870e:	e074      	b.n	80087fa <UART_SetConfig+0x34e>
 8008710:	2304      	movs	r3, #4
 8008712:	77fb      	strb	r3, [r7, #31]
 8008714:	e071      	b.n	80087fa <UART_SetConfig+0x34e>
 8008716:	2308      	movs	r3, #8
 8008718:	77fb      	strb	r3, [r7, #31]
 800871a:	e06e      	b.n	80087fa <UART_SetConfig+0x34e>
 800871c:	2310      	movs	r3, #16
 800871e:	77fb      	strb	r3, [r7, #31]
 8008720:	bf00      	nop
 8008722:	e06a      	b.n	80087fa <UART_SetConfig+0x34e>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a25      	ldr	r2, [pc, #148]	; (80087c0 <UART_SetConfig+0x314>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d124      	bne.n	8008778 <UART_SetConfig+0x2cc>
 800872e:	4b1e      	ldr	r3, [pc, #120]	; (80087a8 <UART_SetConfig+0x2fc>)
 8008730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008734:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008738:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800873c:	d012      	beq.n	8008764 <UART_SetConfig+0x2b8>
 800873e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008742:	d802      	bhi.n	800874a <UART_SetConfig+0x29e>
 8008744:	2b00      	cmp	r3, #0
 8008746:	d007      	beq.n	8008758 <UART_SetConfig+0x2ac>
 8008748:	e012      	b.n	8008770 <UART_SetConfig+0x2c4>
 800874a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800874e:	d006      	beq.n	800875e <UART_SetConfig+0x2b2>
 8008750:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008754:	d009      	beq.n	800876a <UART_SetConfig+0x2be>
 8008756:	e00b      	b.n	8008770 <UART_SetConfig+0x2c4>
 8008758:	2300      	movs	r3, #0
 800875a:	77fb      	strb	r3, [r7, #31]
 800875c:	e04d      	b.n	80087fa <UART_SetConfig+0x34e>
 800875e:	2302      	movs	r3, #2
 8008760:	77fb      	strb	r3, [r7, #31]
 8008762:	e04a      	b.n	80087fa <UART_SetConfig+0x34e>
 8008764:	2304      	movs	r3, #4
 8008766:	77fb      	strb	r3, [r7, #31]
 8008768:	e047      	b.n	80087fa <UART_SetConfig+0x34e>
 800876a:	2308      	movs	r3, #8
 800876c:	77fb      	strb	r3, [r7, #31]
 800876e:	e044      	b.n	80087fa <UART_SetConfig+0x34e>
 8008770:	2310      	movs	r3, #16
 8008772:	77fb      	strb	r3, [r7, #31]
 8008774:	bf00      	nop
 8008776:	e040      	b.n	80087fa <UART_SetConfig+0x34e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a11      	ldr	r2, [pc, #68]	; (80087c4 <UART_SetConfig+0x318>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d139      	bne.n	80087f6 <UART_SetConfig+0x34a>
 8008782:	4b09      	ldr	r3, [pc, #36]	; (80087a8 <UART_SetConfig+0x2fc>)
 8008784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800878c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008790:	d027      	beq.n	80087e2 <UART_SetConfig+0x336>
 8008792:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008796:	d817      	bhi.n	80087c8 <UART_SetConfig+0x31c>
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01c      	beq.n	80087d6 <UART_SetConfig+0x32a>
 800879c:	e027      	b.n	80087ee <UART_SetConfig+0x342>
 800879e:	bf00      	nop
 80087a0:	efff69f3 	.word	0xefff69f3
 80087a4:	40011000 	.word	0x40011000
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40004400 	.word	0x40004400
 80087b0:	40004800 	.word	0x40004800
 80087b4:	40004c00 	.word	0x40004c00
 80087b8:	40005000 	.word	0x40005000
 80087bc:	40011400 	.word	0x40011400
 80087c0:	40007800 	.word	0x40007800
 80087c4:	40007c00 	.word	0x40007c00
 80087c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087cc:	d006      	beq.n	80087dc <UART_SetConfig+0x330>
 80087ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80087d2:	d009      	beq.n	80087e8 <UART_SetConfig+0x33c>
 80087d4:	e00b      	b.n	80087ee <UART_SetConfig+0x342>
 80087d6:	2300      	movs	r3, #0
 80087d8:	77fb      	strb	r3, [r7, #31]
 80087da:	e00e      	b.n	80087fa <UART_SetConfig+0x34e>
 80087dc:	2302      	movs	r3, #2
 80087de:	77fb      	strb	r3, [r7, #31]
 80087e0:	e00b      	b.n	80087fa <UART_SetConfig+0x34e>
 80087e2:	2304      	movs	r3, #4
 80087e4:	77fb      	strb	r3, [r7, #31]
 80087e6:	e008      	b.n	80087fa <UART_SetConfig+0x34e>
 80087e8:	2308      	movs	r3, #8
 80087ea:	77fb      	strb	r3, [r7, #31]
 80087ec:	e005      	b.n	80087fa <UART_SetConfig+0x34e>
 80087ee:	2310      	movs	r3, #16
 80087f0:	77fb      	strb	r3, [r7, #31]
 80087f2:	bf00      	nop
 80087f4:	e001      	b.n	80087fa <UART_SetConfig+0x34e>
 80087f6:	2310      	movs	r3, #16
 80087f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008802:	d17f      	bne.n	8008904 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008804:	7ffb      	ldrb	r3, [r7, #31]
 8008806:	2b08      	cmp	r3, #8
 8008808:	d85c      	bhi.n	80088c4 <UART_SetConfig+0x418>
 800880a:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <UART_SetConfig+0x364>)
 800880c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008810:	08008835 	.word	0x08008835
 8008814:	08008855 	.word	0x08008855
 8008818:	08008875 	.word	0x08008875
 800881c:	080088c5 	.word	0x080088c5
 8008820:	0800888d 	.word	0x0800888d
 8008824:	080088c5 	.word	0x080088c5
 8008828:	080088c5 	.word	0x080088c5
 800882c:	080088c5 	.word	0x080088c5
 8008830:	080088ad 	.word	0x080088ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008834:	f7fc fa84 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 8008838:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	005a      	lsls	r2, r3, #1
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	085b      	lsrs	r3, r3, #1
 8008844:	441a      	add	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	fbb2 f3f3 	udiv	r3, r2, r3
 800884e:	b29b      	uxth	r3, r3
 8008850:	61bb      	str	r3, [r7, #24]
        break;
 8008852:	e03a      	b.n	80088ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008854:	f7fc fa88 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8008858:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	005a      	lsls	r2, r3, #1
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	441a      	add	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	fbb2 f3f3 	udiv	r3, r2, r3
 800886e:	b29b      	uxth	r3, r3
 8008870:	61bb      	str	r3, [r7, #24]
        break;
 8008872:	e02a      	b.n	80088ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	085a      	lsrs	r2, r3, #1
 800887a:	4b5f      	ldr	r3, [pc, #380]	; (80089f8 <UART_SetConfig+0x54c>)
 800887c:	4413      	add	r3, r2
 800887e:	687a      	ldr	r2, [r7, #4]
 8008880:	6852      	ldr	r2, [r2, #4]
 8008882:	fbb3 f3f2 	udiv	r3, r3, r2
 8008886:	b29b      	uxth	r3, r3
 8008888:	61bb      	str	r3, [r7, #24]
        break;
 800888a:	e01e      	b.n	80088ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800888c:	f7fc f99a 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8008890:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	005a      	lsls	r2, r3, #1
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	085b      	lsrs	r3, r3, #1
 800889c:	441a      	add	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	61bb      	str	r3, [r7, #24]
        break;
 80088aa:	e00e      	b.n	80088ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	085b      	lsrs	r3, r3, #1
 80088b2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80088be:	b29b      	uxth	r3, r3
 80088c0:	61bb      	str	r3, [r7, #24]
        break;
 80088c2:	e002      	b.n	80088ca <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	75fb      	strb	r3, [r7, #23]
        break;
 80088c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b0f      	cmp	r3, #15
 80088ce:	d916      	bls.n	80088fe <UART_SetConfig+0x452>
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088d6:	d212      	bcs.n	80088fe <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088d8:	69bb      	ldr	r3, [r7, #24]
 80088da:	b29b      	uxth	r3, r3
 80088dc:	f023 030f 	bic.w	r3, r3, #15
 80088e0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088e2:	69bb      	ldr	r3, [r7, #24]
 80088e4:	085b      	lsrs	r3, r3, #1
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	f003 0307 	and.w	r3, r3, #7
 80088ec:	b29a      	uxth	r2, r3
 80088ee:	897b      	ldrh	r3, [r7, #10]
 80088f0:	4313      	orrs	r3, r2
 80088f2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	897a      	ldrh	r2, [r7, #10]
 80088fa:	60da      	str	r2, [r3, #12]
 80088fc:	e070      	b.n	80089e0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	75fb      	strb	r3, [r7, #23]
 8008902:	e06d      	b.n	80089e0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008904:	7ffb      	ldrb	r3, [r7, #31]
 8008906:	2b08      	cmp	r3, #8
 8008908:	d859      	bhi.n	80089be <UART_SetConfig+0x512>
 800890a:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <UART_SetConfig+0x464>)
 800890c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008910:	08008935 	.word	0x08008935
 8008914:	08008953 	.word	0x08008953
 8008918:	08008971 	.word	0x08008971
 800891c:	080089bf 	.word	0x080089bf
 8008920:	08008989 	.word	0x08008989
 8008924:	080089bf 	.word	0x080089bf
 8008928:	080089bf 	.word	0x080089bf
 800892c:	080089bf 	.word	0x080089bf
 8008930:	080089a7 	.word	0x080089a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008934:	f7fc fa04 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
 8008938:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	085a      	lsrs	r2, r3, #1
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	441a      	add	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	fbb2 f3f3 	udiv	r3, r2, r3
 800894c:	b29b      	uxth	r3, r3
 800894e:	61bb      	str	r3, [r7, #24]
        break;
 8008950:	e038      	b.n	80089c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008952:	f7fc fa09 	bl	8004d68 <HAL_RCC_GetPCLK2Freq>
 8008956:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	085a      	lsrs	r2, r3, #1
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	441a      	add	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	fbb2 f3f3 	udiv	r3, r2, r3
 800896a:	b29b      	uxth	r3, r3
 800896c:	61bb      	str	r3, [r7, #24]
        break;
 800896e:	e029      	b.n	80089c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	085a      	lsrs	r2, r3, #1
 8008976:	4b21      	ldr	r3, [pc, #132]	; (80089fc <UART_SetConfig+0x550>)
 8008978:	4413      	add	r3, r2
 800897a:	687a      	ldr	r2, [r7, #4]
 800897c:	6852      	ldr	r2, [r2, #4]
 800897e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008982:	b29b      	uxth	r3, r3
 8008984:	61bb      	str	r3, [r7, #24]
        break;
 8008986:	e01d      	b.n	80089c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008988:	f7fc f91c 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 800898c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	085a      	lsrs	r2, r3, #1
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	441a      	add	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	61bb      	str	r3, [r7, #24]
        break;
 80089a4:	e00e      	b.n	80089c4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	085b      	lsrs	r3, r3, #1
 80089ac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	61bb      	str	r3, [r7, #24]
        break;
 80089bc:	e002      	b.n	80089c4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	75fb      	strb	r3, [r7, #23]
        break;
 80089c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c4:	69bb      	ldr	r3, [r7, #24]
 80089c6:	2b0f      	cmp	r3, #15
 80089c8:	d908      	bls.n	80089dc <UART_SetConfig+0x530>
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d0:	d204      	bcs.n	80089dc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	69ba      	ldr	r2, [r7, #24]
 80089d8:	60da      	str	r2, [r3, #12]
 80089da:	e001      	b.n	80089e0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2200      	movs	r2, #0
 80089ea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3720      	adds	r7, #32
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}
 80089f6:	bf00      	nop
 80089f8:	01e84800 	.word	0x01e84800
 80089fc:	00f42400 	.word	0x00f42400

08008a00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0c:	f003 0301 	and.w	r3, r3, #1
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d00a      	beq.n	8008a2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	f003 0302 	and.w	r3, r3, #2
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a50:	f003 0304 	and.w	r3, r3, #4
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00a      	beq.n	8008a6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	430a      	orrs	r2, r1
 8008a6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a72:	f003 0308 	and.w	r3, r3, #8
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a94:	f003 0310 	and.w	r3, r3, #16
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ab6:	f003 0320 	and.w	r3, r3, #32
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d01a      	beq.n	8008b16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008afe:	d10a      	bne.n	8008b16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00a      	beq.n	8008b38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	605a      	str	r2, [r3, #4]
  }
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b086      	sub	sp, #24
 8008b48:	af02      	add	r7, sp, #8
 8008b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8008b52:	f7fa f86d 	bl	8002c30 <HAL_GetTick>
 8008b56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0308 	and.w	r3, r3, #8
 8008b62:	2b08      	cmp	r3, #8
 8008b64:	d10e      	bne.n	8008b84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f82a 	bl	8008bce <UART_WaitOnFlagUntilTimeout>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e020      	b.n	8008bc6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d10e      	bne.n	8008bb0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b96:	9300      	str	r3, [sp, #0]
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 f814 	bl	8008bce <UART_WaitOnFlagUntilTimeout>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bac:	2303      	movs	r3, #3
 8008bae:	e00a      	b.n	8008bc6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	60f8      	str	r0, [r7, #12]
 8008bd6:	60b9      	str	r1, [r7, #8]
 8008bd8:	603b      	str	r3, [r7, #0]
 8008bda:	4613      	mov	r3, r2
 8008bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bde:	e05d      	b.n	8008c9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be6:	d059      	beq.n	8008c9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008be8:	f7fa f822 	bl	8002c30 <HAL_GetTick>
 8008bec:	4602      	mov	r2, r0
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	1ad3      	subs	r3, r2, r3
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d302      	bcc.n	8008bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d11b      	bne.n	8008c36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	689a      	ldr	r2, [r3, #8]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f022 0201 	bic.w	r2, r2, #1
 8008c1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2220      	movs	r2, #32
 8008c22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2220      	movs	r2, #32
 8008c28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e042      	b.n	8008cbc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0304 	and.w	r3, r3, #4
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d02b      	beq.n	8008c9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	69db      	ldr	r3, [r3, #28]
 8008c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c52:	d123      	bne.n	8008c9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c5c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008c6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 0201 	bic.w	r2, r2, #1
 8008c7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2220      	movs	r2, #32
 8008c82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2220      	movs	r2, #32
 8008c88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2200      	movs	r2, #0
 8008c94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	e00f      	b.n	8008cbc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	69da      	ldr	r2, [r3, #28]
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	68ba      	ldr	r2, [r7, #8]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	bf0c      	ite	eq
 8008cac:	2301      	moveq	r3, #1
 8008cae:	2300      	movne	r3, #0
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	79fb      	ldrb	r3, [r7, #7]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d092      	beq.n	8008be0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cda:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	689a      	ldr	r2, [r3, #8]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0201 	bic.w	r2, r2, #1
 8008cea:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	661a      	str	r2, [r3, #96]	; 0x60
}
 8008cf8:	bf00      	nop
 8008cfa:	370c      	adds	r7, #12
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d02:	4770      	bx	lr

08008d04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b084      	sub	sp, #16
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d22:	68f8      	ldr	r0, [r7, #12]
 8008d24:	f7ff fbae 	bl	8008484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d46:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2220      	movs	r2, #32
 8008d4c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f7ff fb8b 	bl	8008470 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d5a:	bf00      	nop
 8008d5c:	3708      	adds	r7, #8
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d62:	b580      	push	{r7, lr}
 8008d64:	b084      	sub	sp, #16
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008d70:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d76:	2b22      	cmp	r3, #34	; 0x22
 8008d78:	d13a      	bne.n	8008df0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d80:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d82:	89bb      	ldrh	r3, [r7, #12]
 8008d84:	b2d9      	uxtb	r1, r3
 8008d86:	89fb      	ldrh	r3, [r7, #14]
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8e:	400a      	ands	r2, r1
 8008d90:	b2d2      	uxtb	r2, r2
 8008d92:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	3b01      	subs	r3, #1
 8008da8:	b29a      	uxth	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008db6:	b29b      	uxth	r3, r3
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d121      	bne.n	8008e00 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008dca:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689a      	ldr	r2, [r3, #8]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0201 	bic.w	r2, r2, #1
 8008dda:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2220      	movs	r2, #32
 8008de0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f7f8 fee3 	bl	8001bb4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dee:	e007      	b.n	8008e00 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0208 	orr.w	r2, r2, #8
 8008dfe:	619a      	str	r2, [r3, #24]
}
 8008e00:	bf00      	nop
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e16:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e1c:	2b22      	cmp	r3, #34	; 0x22
 8008e1e:	d13a      	bne.n	8008e96 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e26:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e2c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e2e:	89ba      	ldrh	r2, [r7, #12]
 8008e30:	89fb      	ldrh	r3, [r7, #14]
 8008e32:	4013      	ands	r3, r2
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e3e:	1c9a      	adds	r2, r3, #2
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d121      	bne.n	8008ea6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008e70:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689a      	ldr	r2, [r3, #8]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f022 0201 	bic.w	r2, r2, #1
 8008e80:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2220      	movs	r2, #32
 8008e86:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7f8 fe90 	bl	8001bb4 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e94:	e007      	b.n	8008ea6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	699a      	ldr	r2, [r3, #24]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f042 0208 	orr.w	r2, r2, #8
 8008ea4:	619a      	str	r2, [r3, #24]
}
 8008ea6:	bf00      	nop
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <__errno>:
 8008eb0:	4b01      	ldr	r3, [pc, #4]	; (8008eb8 <__errno+0x8>)
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	4770      	bx	lr
 8008eb6:	bf00      	nop
 8008eb8:	20000010 	.word	0x20000010

08008ebc <__libc_init_array>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	4e0d      	ldr	r6, [pc, #52]	; (8008ef4 <__libc_init_array+0x38>)
 8008ec0:	4c0d      	ldr	r4, [pc, #52]	; (8008ef8 <__libc_init_array+0x3c>)
 8008ec2:	1ba4      	subs	r4, r4, r6
 8008ec4:	10a4      	asrs	r4, r4, #2
 8008ec6:	2500      	movs	r5, #0
 8008ec8:	42a5      	cmp	r5, r4
 8008eca:	d109      	bne.n	8008ee0 <__libc_init_array+0x24>
 8008ecc:	4e0b      	ldr	r6, [pc, #44]	; (8008efc <__libc_init_array+0x40>)
 8008ece:	4c0c      	ldr	r4, [pc, #48]	; (8008f00 <__libc_init_array+0x44>)
 8008ed0:	f000 fc98 	bl	8009804 <_init>
 8008ed4:	1ba4      	subs	r4, r4, r6
 8008ed6:	10a4      	asrs	r4, r4, #2
 8008ed8:	2500      	movs	r5, #0
 8008eda:	42a5      	cmp	r5, r4
 8008edc:	d105      	bne.n	8008eea <__libc_init_array+0x2e>
 8008ede:	bd70      	pop	{r4, r5, r6, pc}
 8008ee0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ee4:	4798      	blx	r3
 8008ee6:	3501      	adds	r5, #1
 8008ee8:	e7ee      	b.n	8008ec8 <__libc_init_array+0xc>
 8008eea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008eee:	4798      	blx	r3
 8008ef0:	3501      	adds	r5, #1
 8008ef2:	e7f2      	b.n	8008eda <__libc_init_array+0x1e>
 8008ef4:	08009960 	.word	0x08009960
 8008ef8:	08009960 	.word	0x08009960
 8008efc:	08009960 	.word	0x08009960
 8008f00:	08009964 	.word	0x08009964

08008f04 <memset>:
 8008f04:	4402      	add	r2, r0
 8008f06:	4603      	mov	r3, r0
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d100      	bne.n	8008f0e <memset+0xa>
 8008f0c:	4770      	bx	lr
 8008f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f12:	e7f9      	b.n	8008f08 <memset+0x4>

08008f14 <siprintf>:
 8008f14:	b40e      	push	{r1, r2, r3}
 8008f16:	b500      	push	{lr}
 8008f18:	b09c      	sub	sp, #112	; 0x70
 8008f1a:	ab1d      	add	r3, sp, #116	; 0x74
 8008f1c:	9002      	str	r0, [sp, #8]
 8008f1e:	9006      	str	r0, [sp, #24]
 8008f20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008f24:	4809      	ldr	r0, [pc, #36]	; (8008f4c <siprintf+0x38>)
 8008f26:	9107      	str	r1, [sp, #28]
 8008f28:	9104      	str	r1, [sp, #16]
 8008f2a:	4909      	ldr	r1, [pc, #36]	; (8008f50 <siprintf+0x3c>)
 8008f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f30:	9105      	str	r1, [sp, #20]
 8008f32:	6800      	ldr	r0, [r0, #0]
 8008f34:	9301      	str	r3, [sp, #4]
 8008f36:	a902      	add	r1, sp, #8
 8008f38:	f000 f980 	bl	800923c <_svfiprintf_r>
 8008f3c:	9b02      	ldr	r3, [sp, #8]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	701a      	strb	r2, [r3, #0]
 8008f42:	b01c      	add	sp, #112	; 0x70
 8008f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f48:	b003      	add	sp, #12
 8008f4a:	4770      	bx	lr
 8008f4c:	20000010 	.word	0x20000010
 8008f50:	ffff0208 	.word	0xffff0208

08008f54 <strncpy>:
 8008f54:	b570      	push	{r4, r5, r6, lr}
 8008f56:	3901      	subs	r1, #1
 8008f58:	4604      	mov	r4, r0
 8008f5a:	b902      	cbnz	r2, 8008f5e <strncpy+0xa>
 8008f5c:	bd70      	pop	{r4, r5, r6, pc}
 8008f5e:	4623      	mov	r3, r4
 8008f60:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8008f64:	f803 5b01 	strb.w	r5, [r3], #1
 8008f68:	1e56      	subs	r6, r2, #1
 8008f6a:	b92d      	cbnz	r5, 8008f78 <strncpy+0x24>
 8008f6c:	4414      	add	r4, r2
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	d0f4      	beq.n	8008f5c <strncpy+0x8>
 8008f72:	f803 5b01 	strb.w	r5, [r3], #1
 8008f76:	e7fa      	b.n	8008f6e <strncpy+0x1a>
 8008f78:	461c      	mov	r4, r3
 8008f7a:	4632      	mov	r2, r6
 8008f7c:	e7ed      	b.n	8008f5a <strncpy+0x6>
	...

08008f80 <strtok>:
 8008f80:	4b13      	ldr	r3, [pc, #76]	; (8008fd0 <strtok+0x50>)
 8008f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f86:	681d      	ldr	r5, [r3, #0]
 8008f88:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8008f8a:	4606      	mov	r6, r0
 8008f8c:	460f      	mov	r7, r1
 8008f8e:	b9b4      	cbnz	r4, 8008fbe <strtok+0x3e>
 8008f90:	2050      	movs	r0, #80	; 0x50
 8008f92:	f000 f849 	bl	8009028 <malloc>
 8008f96:	65a8      	str	r0, [r5, #88]	; 0x58
 8008f98:	e9c0 4400 	strd	r4, r4, [r0]
 8008f9c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008fa0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008fa4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8008fa8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8008fac:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008fb0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008fb4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8008fb8:	6184      	str	r4, [r0, #24]
 8008fba:	7704      	strb	r4, [r0, #28]
 8008fbc:	6244      	str	r4, [r0, #36]	; 0x24
 8008fbe:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008fc0:	4639      	mov	r1, r7
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008fca:	f000 b803 	b.w	8008fd4 <__strtok_r>
 8008fce:	bf00      	nop
 8008fd0:	20000010 	.word	0x20000010

08008fd4 <__strtok_r>:
 8008fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008fd6:	b918      	cbnz	r0, 8008fe0 <__strtok_r+0xc>
 8008fd8:	6810      	ldr	r0, [r2, #0]
 8008fda:	b908      	cbnz	r0, 8008fe0 <__strtok_r+0xc>
 8008fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fde:	4620      	mov	r0, r4
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	460f      	mov	r7, r1
 8008fe4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008fe8:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008fec:	b91e      	cbnz	r6, 8008ff6 <__strtok_r+0x22>
 8008fee:	b96d      	cbnz	r5, 800900c <__strtok_r+0x38>
 8008ff0:	6015      	str	r5, [r2, #0]
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	e7f2      	b.n	8008fdc <__strtok_r+0x8>
 8008ff6:	42b5      	cmp	r5, r6
 8008ff8:	d1f6      	bne.n	8008fe8 <__strtok_r+0x14>
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1ef      	bne.n	8008fde <__strtok_r+0xa>
 8008ffe:	6014      	str	r4, [r2, #0]
 8009000:	7003      	strb	r3, [r0, #0]
 8009002:	e7eb      	b.n	8008fdc <__strtok_r+0x8>
 8009004:	462b      	mov	r3, r5
 8009006:	e00d      	b.n	8009024 <__strtok_r+0x50>
 8009008:	b926      	cbnz	r6, 8009014 <__strtok_r+0x40>
 800900a:	461c      	mov	r4, r3
 800900c:	4623      	mov	r3, r4
 800900e:	460f      	mov	r7, r1
 8009010:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009014:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009018:	42b5      	cmp	r5, r6
 800901a:	d1f5      	bne.n	8009008 <__strtok_r+0x34>
 800901c:	2d00      	cmp	r5, #0
 800901e:	d0f1      	beq.n	8009004 <__strtok_r+0x30>
 8009020:	2100      	movs	r1, #0
 8009022:	7021      	strb	r1, [r4, #0]
 8009024:	6013      	str	r3, [r2, #0]
 8009026:	e7d9      	b.n	8008fdc <__strtok_r+0x8>

08009028 <malloc>:
 8009028:	4b02      	ldr	r3, [pc, #8]	; (8009034 <malloc+0xc>)
 800902a:	4601      	mov	r1, r0
 800902c:	6818      	ldr	r0, [r3, #0]
 800902e:	f000 b851 	b.w	80090d4 <_malloc_r>
 8009032:	bf00      	nop
 8009034:	20000010 	.word	0x20000010

08009038 <_free_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4605      	mov	r5, r0
 800903c:	2900      	cmp	r1, #0
 800903e:	d045      	beq.n	80090cc <_free_r+0x94>
 8009040:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009044:	1f0c      	subs	r4, r1, #4
 8009046:	2b00      	cmp	r3, #0
 8009048:	bfb8      	it	lt
 800904a:	18e4      	addlt	r4, r4, r3
 800904c:	f000 fbaa 	bl	80097a4 <__malloc_lock>
 8009050:	4a1f      	ldr	r2, [pc, #124]	; (80090d0 <_free_r+0x98>)
 8009052:	6813      	ldr	r3, [r2, #0]
 8009054:	4610      	mov	r0, r2
 8009056:	b933      	cbnz	r3, 8009066 <_free_r+0x2e>
 8009058:	6063      	str	r3, [r4, #4]
 800905a:	6014      	str	r4, [r2, #0]
 800905c:	4628      	mov	r0, r5
 800905e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009062:	f000 bba0 	b.w	80097a6 <__malloc_unlock>
 8009066:	42a3      	cmp	r3, r4
 8009068:	d90c      	bls.n	8009084 <_free_r+0x4c>
 800906a:	6821      	ldr	r1, [r4, #0]
 800906c:	1862      	adds	r2, r4, r1
 800906e:	4293      	cmp	r3, r2
 8009070:	bf04      	itt	eq
 8009072:	681a      	ldreq	r2, [r3, #0]
 8009074:	685b      	ldreq	r3, [r3, #4]
 8009076:	6063      	str	r3, [r4, #4]
 8009078:	bf04      	itt	eq
 800907a:	1852      	addeq	r2, r2, r1
 800907c:	6022      	streq	r2, [r4, #0]
 800907e:	6004      	str	r4, [r0, #0]
 8009080:	e7ec      	b.n	800905c <_free_r+0x24>
 8009082:	4613      	mov	r3, r2
 8009084:	685a      	ldr	r2, [r3, #4]
 8009086:	b10a      	cbz	r2, 800908c <_free_r+0x54>
 8009088:	42a2      	cmp	r2, r4
 800908a:	d9fa      	bls.n	8009082 <_free_r+0x4a>
 800908c:	6819      	ldr	r1, [r3, #0]
 800908e:	1858      	adds	r0, r3, r1
 8009090:	42a0      	cmp	r0, r4
 8009092:	d10b      	bne.n	80090ac <_free_r+0x74>
 8009094:	6820      	ldr	r0, [r4, #0]
 8009096:	4401      	add	r1, r0
 8009098:	1858      	adds	r0, r3, r1
 800909a:	4282      	cmp	r2, r0
 800909c:	6019      	str	r1, [r3, #0]
 800909e:	d1dd      	bne.n	800905c <_free_r+0x24>
 80090a0:	6810      	ldr	r0, [r2, #0]
 80090a2:	6852      	ldr	r2, [r2, #4]
 80090a4:	605a      	str	r2, [r3, #4]
 80090a6:	4401      	add	r1, r0
 80090a8:	6019      	str	r1, [r3, #0]
 80090aa:	e7d7      	b.n	800905c <_free_r+0x24>
 80090ac:	d902      	bls.n	80090b4 <_free_r+0x7c>
 80090ae:	230c      	movs	r3, #12
 80090b0:	602b      	str	r3, [r5, #0]
 80090b2:	e7d3      	b.n	800905c <_free_r+0x24>
 80090b4:	6820      	ldr	r0, [r4, #0]
 80090b6:	1821      	adds	r1, r4, r0
 80090b8:	428a      	cmp	r2, r1
 80090ba:	bf04      	itt	eq
 80090bc:	6811      	ldreq	r1, [r2, #0]
 80090be:	6852      	ldreq	r2, [r2, #4]
 80090c0:	6062      	str	r2, [r4, #4]
 80090c2:	bf04      	itt	eq
 80090c4:	1809      	addeq	r1, r1, r0
 80090c6:	6021      	streq	r1, [r4, #0]
 80090c8:	605c      	str	r4, [r3, #4]
 80090ca:	e7c7      	b.n	800905c <_free_r+0x24>
 80090cc:	bd38      	pop	{r3, r4, r5, pc}
 80090ce:	bf00      	nop
 80090d0:	2000009c 	.word	0x2000009c

080090d4 <_malloc_r>:
 80090d4:	b570      	push	{r4, r5, r6, lr}
 80090d6:	1ccd      	adds	r5, r1, #3
 80090d8:	f025 0503 	bic.w	r5, r5, #3
 80090dc:	3508      	adds	r5, #8
 80090de:	2d0c      	cmp	r5, #12
 80090e0:	bf38      	it	cc
 80090e2:	250c      	movcc	r5, #12
 80090e4:	2d00      	cmp	r5, #0
 80090e6:	4606      	mov	r6, r0
 80090e8:	db01      	blt.n	80090ee <_malloc_r+0x1a>
 80090ea:	42a9      	cmp	r1, r5
 80090ec:	d903      	bls.n	80090f6 <_malloc_r+0x22>
 80090ee:	230c      	movs	r3, #12
 80090f0:	6033      	str	r3, [r6, #0]
 80090f2:	2000      	movs	r0, #0
 80090f4:	bd70      	pop	{r4, r5, r6, pc}
 80090f6:	f000 fb55 	bl	80097a4 <__malloc_lock>
 80090fa:	4a21      	ldr	r2, [pc, #132]	; (8009180 <_malloc_r+0xac>)
 80090fc:	6814      	ldr	r4, [r2, #0]
 80090fe:	4621      	mov	r1, r4
 8009100:	b991      	cbnz	r1, 8009128 <_malloc_r+0x54>
 8009102:	4c20      	ldr	r4, [pc, #128]	; (8009184 <_malloc_r+0xb0>)
 8009104:	6823      	ldr	r3, [r4, #0]
 8009106:	b91b      	cbnz	r3, 8009110 <_malloc_r+0x3c>
 8009108:	4630      	mov	r0, r6
 800910a:	f000 fb17 	bl	800973c <_sbrk_r>
 800910e:	6020      	str	r0, [r4, #0]
 8009110:	4629      	mov	r1, r5
 8009112:	4630      	mov	r0, r6
 8009114:	f000 fb12 	bl	800973c <_sbrk_r>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d124      	bne.n	8009166 <_malloc_r+0x92>
 800911c:	230c      	movs	r3, #12
 800911e:	6033      	str	r3, [r6, #0]
 8009120:	4630      	mov	r0, r6
 8009122:	f000 fb40 	bl	80097a6 <__malloc_unlock>
 8009126:	e7e4      	b.n	80090f2 <_malloc_r+0x1e>
 8009128:	680b      	ldr	r3, [r1, #0]
 800912a:	1b5b      	subs	r3, r3, r5
 800912c:	d418      	bmi.n	8009160 <_malloc_r+0x8c>
 800912e:	2b0b      	cmp	r3, #11
 8009130:	d90f      	bls.n	8009152 <_malloc_r+0x7e>
 8009132:	600b      	str	r3, [r1, #0]
 8009134:	50cd      	str	r5, [r1, r3]
 8009136:	18cc      	adds	r4, r1, r3
 8009138:	4630      	mov	r0, r6
 800913a:	f000 fb34 	bl	80097a6 <__malloc_unlock>
 800913e:	f104 000b 	add.w	r0, r4, #11
 8009142:	1d23      	adds	r3, r4, #4
 8009144:	f020 0007 	bic.w	r0, r0, #7
 8009148:	1ac3      	subs	r3, r0, r3
 800914a:	d0d3      	beq.n	80090f4 <_malloc_r+0x20>
 800914c:	425a      	negs	r2, r3
 800914e:	50e2      	str	r2, [r4, r3]
 8009150:	e7d0      	b.n	80090f4 <_malloc_r+0x20>
 8009152:	428c      	cmp	r4, r1
 8009154:	684b      	ldr	r3, [r1, #4]
 8009156:	bf16      	itet	ne
 8009158:	6063      	strne	r3, [r4, #4]
 800915a:	6013      	streq	r3, [r2, #0]
 800915c:	460c      	movne	r4, r1
 800915e:	e7eb      	b.n	8009138 <_malloc_r+0x64>
 8009160:	460c      	mov	r4, r1
 8009162:	6849      	ldr	r1, [r1, #4]
 8009164:	e7cc      	b.n	8009100 <_malloc_r+0x2c>
 8009166:	1cc4      	adds	r4, r0, #3
 8009168:	f024 0403 	bic.w	r4, r4, #3
 800916c:	42a0      	cmp	r0, r4
 800916e:	d005      	beq.n	800917c <_malloc_r+0xa8>
 8009170:	1a21      	subs	r1, r4, r0
 8009172:	4630      	mov	r0, r6
 8009174:	f000 fae2 	bl	800973c <_sbrk_r>
 8009178:	3001      	adds	r0, #1
 800917a:	d0cf      	beq.n	800911c <_malloc_r+0x48>
 800917c:	6025      	str	r5, [r4, #0]
 800917e:	e7db      	b.n	8009138 <_malloc_r+0x64>
 8009180:	2000009c 	.word	0x2000009c
 8009184:	200000a0 	.word	0x200000a0

08009188 <__ssputs_r>:
 8009188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800918c:	688e      	ldr	r6, [r1, #8]
 800918e:	429e      	cmp	r6, r3
 8009190:	4682      	mov	sl, r0
 8009192:	460c      	mov	r4, r1
 8009194:	4690      	mov	r8, r2
 8009196:	4699      	mov	r9, r3
 8009198:	d837      	bhi.n	800920a <__ssputs_r+0x82>
 800919a:	898a      	ldrh	r2, [r1, #12]
 800919c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091a0:	d031      	beq.n	8009206 <__ssputs_r+0x7e>
 80091a2:	6825      	ldr	r5, [r4, #0]
 80091a4:	6909      	ldr	r1, [r1, #16]
 80091a6:	1a6f      	subs	r7, r5, r1
 80091a8:	6965      	ldr	r5, [r4, #20]
 80091aa:	2302      	movs	r3, #2
 80091ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80091b4:	f109 0301 	add.w	r3, r9, #1
 80091b8:	443b      	add	r3, r7
 80091ba:	429d      	cmp	r5, r3
 80091bc:	bf38      	it	cc
 80091be:	461d      	movcc	r5, r3
 80091c0:	0553      	lsls	r3, r2, #21
 80091c2:	d530      	bpl.n	8009226 <__ssputs_r+0x9e>
 80091c4:	4629      	mov	r1, r5
 80091c6:	f7ff ff85 	bl	80090d4 <_malloc_r>
 80091ca:	4606      	mov	r6, r0
 80091cc:	b950      	cbnz	r0, 80091e4 <__ssputs_r+0x5c>
 80091ce:	230c      	movs	r3, #12
 80091d0:	f8ca 3000 	str.w	r3, [sl]
 80091d4:	89a3      	ldrh	r3, [r4, #12]
 80091d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091da:	81a3      	strh	r3, [r4, #12]
 80091dc:	f04f 30ff 	mov.w	r0, #4294967295
 80091e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e4:	463a      	mov	r2, r7
 80091e6:	6921      	ldr	r1, [r4, #16]
 80091e8:	f000 fab8 	bl	800975c <memcpy>
 80091ec:	89a3      	ldrh	r3, [r4, #12]
 80091ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091f6:	81a3      	strh	r3, [r4, #12]
 80091f8:	6126      	str	r6, [r4, #16]
 80091fa:	6165      	str	r5, [r4, #20]
 80091fc:	443e      	add	r6, r7
 80091fe:	1bed      	subs	r5, r5, r7
 8009200:	6026      	str	r6, [r4, #0]
 8009202:	60a5      	str	r5, [r4, #8]
 8009204:	464e      	mov	r6, r9
 8009206:	454e      	cmp	r6, r9
 8009208:	d900      	bls.n	800920c <__ssputs_r+0x84>
 800920a:	464e      	mov	r6, r9
 800920c:	4632      	mov	r2, r6
 800920e:	4641      	mov	r1, r8
 8009210:	6820      	ldr	r0, [r4, #0]
 8009212:	f000 faae 	bl	8009772 <memmove>
 8009216:	68a3      	ldr	r3, [r4, #8]
 8009218:	1b9b      	subs	r3, r3, r6
 800921a:	60a3      	str	r3, [r4, #8]
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	441e      	add	r6, r3
 8009220:	6026      	str	r6, [r4, #0]
 8009222:	2000      	movs	r0, #0
 8009224:	e7dc      	b.n	80091e0 <__ssputs_r+0x58>
 8009226:	462a      	mov	r2, r5
 8009228:	f000 fabe 	bl	80097a8 <_realloc_r>
 800922c:	4606      	mov	r6, r0
 800922e:	2800      	cmp	r0, #0
 8009230:	d1e2      	bne.n	80091f8 <__ssputs_r+0x70>
 8009232:	6921      	ldr	r1, [r4, #16]
 8009234:	4650      	mov	r0, sl
 8009236:	f7ff feff 	bl	8009038 <_free_r>
 800923a:	e7c8      	b.n	80091ce <__ssputs_r+0x46>

0800923c <_svfiprintf_r>:
 800923c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009240:	461d      	mov	r5, r3
 8009242:	898b      	ldrh	r3, [r1, #12]
 8009244:	061f      	lsls	r7, r3, #24
 8009246:	b09d      	sub	sp, #116	; 0x74
 8009248:	4680      	mov	r8, r0
 800924a:	460c      	mov	r4, r1
 800924c:	4616      	mov	r6, r2
 800924e:	d50f      	bpl.n	8009270 <_svfiprintf_r+0x34>
 8009250:	690b      	ldr	r3, [r1, #16]
 8009252:	b96b      	cbnz	r3, 8009270 <_svfiprintf_r+0x34>
 8009254:	2140      	movs	r1, #64	; 0x40
 8009256:	f7ff ff3d 	bl	80090d4 <_malloc_r>
 800925a:	6020      	str	r0, [r4, #0]
 800925c:	6120      	str	r0, [r4, #16]
 800925e:	b928      	cbnz	r0, 800926c <_svfiprintf_r+0x30>
 8009260:	230c      	movs	r3, #12
 8009262:	f8c8 3000 	str.w	r3, [r8]
 8009266:	f04f 30ff 	mov.w	r0, #4294967295
 800926a:	e0c8      	b.n	80093fe <_svfiprintf_r+0x1c2>
 800926c:	2340      	movs	r3, #64	; 0x40
 800926e:	6163      	str	r3, [r4, #20]
 8009270:	2300      	movs	r3, #0
 8009272:	9309      	str	r3, [sp, #36]	; 0x24
 8009274:	2320      	movs	r3, #32
 8009276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800927a:	2330      	movs	r3, #48	; 0x30
 800927c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009280:	9503      	str	r5, [sp, #12]
 8009282:	f04f 0b01 	mov.w	fp, #1
 8009286:	4637      	mov	r7, r6
 8009288:	463d      	mov	r5, r7
 800928a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800928e:	b10b      	cbz	r3, 8009294 <_svfiprintf_r+0x58>
 8009290:	2b25      	cmp	r3, #37	; 0x25
 8009292:	d13e      	bne.n	8009312 <_svfiprintf_r+0xd6>
 8009294:	ebb7 0a06 	subs.w	sl, r7, r6
 8009298:	d00b      	beq.n	80092b2 <_svfiprintf_r+0x76>
 800929a:	4653      	mov	r3, sl
 800929c:	4632      	mov	r2, r6
 800929e:	4621      	mov	r1, r4
 80092a0:	4640      	mov	r0, r8
 80092a2:	f7ff ff71 	bl	8009188 <__ssputs_r>
 80092a6:	3001      	adds	r0, #1
 80092a8:	f000 80a4 	beq.w	80093f4 <_svfiprintf_r+0x1b8>
 80092ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092ae:	4453      	add	r3, sl
 80092b0:	9309      	str	r3, [sp, #36]	; 0x24
 80092b2:	783b      	ldrb	r3, [r7, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f000 809d 	beq.w	80093f4 <_svfiprintf_r+0x1b8>
 80092ba:	2300      	movs	r3, #0
 80092bc:	f04f 32ff 	mov.w	r2, #4294967295
 80092c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092c4:	9304      	str	r3, [sp, #16]
 80092c6:	9307      	str	r3, [sp, #28]
 80092c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092cc:	931a      	str	r3, [sp, #104]	; 0x68
 80092ce:	462f      	mov	r7, r5
 80092d0:	2205      	movs	r2, #5
 80092d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80092d6:	4850      	ldr	r0, [pc, #320]	; (8009418 <_svfiprintf_r+0x1dc>)
 80092d8:	f7f6 ffca 	bl	8000270 <memchr>
 80092dc:	9b04      	ldr	r3, [sp, #16]
 80092de:	b9d0      	cbnz	r0, 8009316 <_svfiprintf_r+0xda>
 80092e0:	06d9      	lsls	r1, r3, #27
 80092e2:	bf44      	itt	mi
 80092e4:	2220      	movmi	r2, #32
 80092e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80092ea:	071a      	lsls	r2, r3, #28
 80092ec:	bf44      	itt	mi
 80092ee:	222b      	movmi	r2, #43	; 0x2b
 80092f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80092f4:	782a      	ldrb	r2, [r5, #0]
 80092f6:	2a2a      	cmp	r2, #42	; 0x2a
 80092f8:	d015      	beq.n	8009326 <_svfiprintf_r+0xea>
 80092fa:	9a07      	ldr	r2, [sp, #28]
 80092fc:	462f      	mov	r7, r5
 80092fe:	2000      	movs	r0, #0
 8009300:	250a      	movs	r5, #10
 8009302:	4639      	mov	r1, r7
 8009304:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009308:	3b30      	subs	r3, #48	; 0x30
 800930a:	2b09      	cmp	r3, #9
 800930c:	d94d      	bls.n	80093aa <_svfiprintf_r+0x16e>
 800930e:	b1b8      	cbz	r0, 8009340 <_svfiprintf_r+0x104>
 8009310:	e00f      	b.n	8009332 <_svfiprintf_r+0xf6>
 8009312:	462f      	mov	r7, r5
 8009314:	e7b8      	b.n	8009288 <_svfiprintf_r+0x4c>
 8009316:	4a40      	ldr	r2, [pc, #256]	; (8009418 <_svfiprintf_r+0x1dc>)
 8009318:	1a80      	subs	r0, r0, r2
 800931a:	fa0b f000 	lsl.w	r0, fp, r0
 800931e:	4318      	orrs	r0, r3
 8009320:	9004      	str	r0, [sp, #16]
 8009322:	463d      	mov	r5, r7
 8009324:	e7d3      	b.n	80092ce <_svfiprintf_r+0x92>
 8009326:	9a03      	ldr	r2, [sp, #12]
 8009328:	1d11      	adds	r1, r2, #4
 800932a:	6812      	ldr	r2, [r2, #0]
 800932c:	9103      	str	r1, [sp, #12]
 800932e:	2a00      	cmp	r2, #0
 8009330:	db01      	blt.n	8009336 <_svfiprintf_r+0xfa>
 8009332:	9207      	str	r2, [sp, #28]
 8009334:	e004      	b.n	8009340 <_svfiprintf_r+0x104>
 8009336:	4252      	negs	r2, r2
 8009338:	f043 0302 	orr.w	r3, r3, #2
 800933c:	9207      	str	r2, [sp, #28]
 800933e:	9304      	str	r3, [sp, #16]
 8009340:	783b      	ldrb	r3, [r7, #0]
 8009342:	2b2e      	cmp	r3, #46	; 0x2e
 8009344:	d10c      	bne.n	8009360 <_svfiprintf_r+0x124>
 8009346:	787b      	ldrb	r3, [r7, #1]
 8009348:	2b2a      	cmp	r3, #42	; 0x2a
 800934a:	d133      	bne.n	80093b4 <_svfiprintf_r+0x178>
 800934c:	9b03      	ldr	r3, [sp, #12]
 800934e:	1d1a      	adds	r2, r3, #4
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	9203      	str	r2, [sp, #12]
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfb8      	it	lt
 8009358:	f04f 33ff 	movlt.w	r3, #4294967295
 800935c:	3702      	adds	r7, #2
 800935e:	9305      	str	r3, [sp, #20]
 8009360:	4d2e      	ldr	r5, [pc, #184]	; (800941c <_svfiprintf_r+0x1e0>)
 8009362:	7839      	ldrb	r1, [r7, #0]
 8009364:	2203      	movs	r2, #3
 8009366:	4628      	mov	r0, r5
 8009368:	f7f6 ff82 	bl	8000270 <memchr>
 800936c:	b138      	cbz	r0, 800937e <_svfiprintf_r+0x142>
 800936e:	2340      	movs	r3, #64	; 0x40
 8009370:	1b40      	subs	r0, r0, r5
 8009372:	fa03 f000 	lsl.w	r0, r3, r0
 8009376:	9b04      	ldr	r3, [sp, #16]
 8009378:	4303      	orrs	r3, r0
 800937a:	3701      	adds	r7, #1
 800937c:	9304      	str	r3, [sp, #16]
 800937e:	7839      	ldrb	r1, [r7, #0]
 8009380:	4827      	ldr	r0, [pc, #156]	; (8009420 <_svfiprintf_r+0x1e4>)
 8009382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009386:	2206      	movs	r2, #6
 8009388:	1c7e      	adds	r6, r7, #1
 800938a:	f7f6 ff71 	bl	8000270 <memchr>
 800938e:	2800      	cmp	r0, #0
 8009390:	d038      	beq.n	8009404 <_svfiprintf_r+0x1c8>
 8009392:	4b24      	ldr	r3, [pc, #144]	; (8009424 <_svfiprintf_r+0x1e8>)
 8009394:	bb13      	cbnz	r3, 80093dc <_svfiprintf_r+0x1a0>
 8009396:	9b03      	ldr	r3, [sp, #12]
 8009398:	3307      	adds	r3, #7
 800939a:	f023 0307 	bic.w	r3, r3, #7
 800939e:	3308      	adds	r3, #8
 80093a0:	9303      	str	r3, [sp, #12]
 80093a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a4:	444b      	add	r3, r9
 80093a6:	9309      	str	r3, [sp, #36]	; 0x24
 80093a8:	e76d      	b.n	8009286 <_svfiprintf_r+0x4a>
 80093aa:	fb05 3202 	mla	r2, r5, r2, r3
 80093ae:	2001      	movs	r0, #1
 80093b0:	460f      	mov	r7, r1
 80093b2:	e7a6      	b.n	8009302 <_svfiprintf_r+0xc6>
 80093b4:	2300      	movs	r3, #0
 80093b6:	3701      	adds	r7, #1
 80093b8:	9305      	str	r3, [sp, #20]
 80093ba:	4619      	mov	r1, r3
 80093bc:	250a      	movs	r5, #10
 80093be:	4638      	mov	r0, r7
 80093c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093c4:	3a30      	subs	r2, #48	; 0x30
 80093c6:	2a09      	cmp	r2, #9
 80093c8:	d903      	bls.n	80093d2 <_svfiprintf_r+0x196>
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d0c8      	beq.n	8009360 <_svfiprintf_r+0x124>
 80093ce:	9105      	str	r1, [sp, #20]
 80093d0:	e7c6      	b.n	8009360 <_svfiprintf_r+0x124>
 80093d2:	fb05 2101 	mla	r1, r5, r1, r2
 80093d6:	2301      	movs	r3, #1
 80093d8:	4607      	mov	r7, r0
 80093da:	e7f0      	b.n	80093be <_svfiprintf_r+0x182>
 80093dc:	ab03      	add	r3, sp, #12
 80093de:	9300      	str	r3, [sp, #0]
 80093e0:	4622      	mov	r2, r4
 80093e2:	4b11      	ldr	r3, [pc, #68]	; (8009428 <_svfiprintf_r+0x1ec>)
 80093e4:	a904      	add	r1, sp, #16
 80093e6:	4640      	mov	r0, r8
 80093e8:	f3af 8000 	nop.w
 80093ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80093f0:	4681      	mov	r9, r0
 80093f2:	d1d6      	bne.n	80093a2 <_svfiprintf_r+0x166>
 80093f4:	89a3      	ldrh	r3, [r4, #12]
 80093f6:	065b      	lsls	r3, r3, #25
 80093f8:	f53f af35 	bmi.w	8009266 <_svfiprintf_r+0x2a>
 80093fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093fe:	b01d      	add	sp, #116	; 0x74
 8009400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009404:	ab03      	add	r3, sp, #12
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4622      	mov	r2, r4
 800940a:	4b07      	ldr	r3, [pc, #28]	; (8009428 <_svfiprintf_r+0x1ec>)
 800940c:	a904      	add	r1, sp, #16
 800940e:	4640      	mov	r0, r8
 8009410:	f000 f882 	bl	8009518 <_printf_i>
 8009414:	e7ea      	b.n	80093ec <_svfiprintf_r+0x1b0>
 8009416:	bf00      	nop
 8009418:	08009924 	.word	0x08009924
 800941c:	0800992a 	.word	0x0800992a
 8009420:	0800992e 	.word	0x0800992e
 8009424:	00000000 	.word	0x00000000
 8009428:	08009189 	.word	0x08009189

0800942c <_printf_common>:
 800942c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009430:	4691      	mov	r9, r2
 8009432:	461f      	mov	r7, r3
 8009434:	688a      	ldr	r2, [r1, #8]
 8009436:	690b      	ldr	r3, [r1, #16]
 8009438:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800943c:	4293      	cmp	r3, r2
 800943e:	bfb8      	it	lt
 8009440:	4613      	movlt	r3, r2
 8009442:	f8c9 3000 	str.w	r3, [r9]
 8009446:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800944a:	4606      	mov	r6, r0
 800944c:	460c      	mov	r4, r1
 800944e:	b112      	cbz	r2, 8009456 <_printf_common+0x2a>
 8009450:	3301      	adds	r3, #1
 8009452:	f8c9 3000 	str.w	r3, [r9]
 8009456:	6823      	ldr	r3, [r4, #0]
 8009458:	0699      	lsls	r1, r3, #26
 800945a:	bf42      	ittt	mi
 800945c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009460:	3302      	addmi	r3, #2
 8009462:	f8c9 3000 	strmi.w	r3, [r9]
 8009466:	6825      	ldr	r5, [r4, #0]
 8009468:	f015 0506 	ands.w	r5, r5, #6
 800946c:	d107      	bne.n	800947e <_printf_common+0x52>
 800946e:	f104 0a19 	add.w	sl, r4, #25
 8009472:	68e3      	ldr	r3, [r4, #12]
 8009474:	f8d9 2000 	ldr.w	r2, [r9]
 8009478:	1a9b      	subs	r3, r3, r2
 800947a:	42ab      	cmp	r3, r5
 800947c:	dc28      	bgt.n	80094d0 <_printf_common+0xa4>
 800947e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009482:	6822      	ldr	r2, [r4, #0]
 8009484:	3300      	adds	r3, #0
 8009486:	bf18      	it	ne
 8009488:	2301      	movne	r3, #1
 800948a:	0692      	lsls	r2, r2, #26
 800948c:	d42d      	bmi.n	80094ea <_printf_common+0xbe>
 800948e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009492:	4639      	mov	r1, r7
 8009494:	4630      	mov	r0, r6
 8009496:	47c0      	blx	r8
 8009498:	3001      	adds	r0, #1
 800949a:	d020      	beq.n	80094de <_printf_common+0xb2>
 800949c:	6823      	ldr	r3, [r4, #0]
 800949e:	68e5      	ldr	r5, [r4, #12]
 80094a0:	f8d9 2000 	ldr.w	r2, [r9]
 80094a4:	f003 0306 	and.w	r3, r3, #6
 80094a8:	2b04      	cmp	r3, #4
 80094aa:	bf08      	it	eq
 80094ac:	1aad      	subeq	r5, r5, r2
 80094ae:	68a3      	ldr	r3, [r4, #8]
 80094b0:	6922      	ldr	r2, [r4, #16]
 80094b2:	bf0c      	ite	eq
 80094b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094b8:	2500      	movne	r5, #0
 80094ba:	4293      	cmp	r3, r2
 80094bc:	bfc4      	itt	gt
 80094be:	1a9b      	subgt	r3, r3, r2
 80094c0:	18ed      	addgt	r5, r5, r3
 80094c2:	f04f 0900 	mov.w	r9, #0
 80094c6:	341a      	adds	r4, #26
 80094c8:	454d      	cmp	r5, r9
 80094ca:	d11a      	bne.n	8009502 <_printf_common+0xd6>
 80094cc:	2000      	movs	r0, #0
 80094ce:	e008      	b.n	80094e2 <_printf_common+0xb6>
 80094d0:	2301      	movs	r3, #1
 80094d2:	4652      	mov	r2, sl
 80094d4:	4639      	mov	r1, r7
 80094d6:	4630      	mov	r0, r6
 80094d8:	47c0      	blx	r8
 80094da:	3001      	adds	r0, #1
 80094dc:	d103      	bne.n	80094e6 <_printf_common+0xba>
 80094de:	f04f 30ff 	mov.w	r0, #4294967295
 80094e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e6:	3501      	adds	r5, #1
 80094e8:	e7c3      	b.n	8009472 <_printf_common+0x46>
 80094ea:	18e1      	adds	r1, r4, r3
 80094ec:	1c5a      	adds	r2, r3, #1
 80094ee:	2030      	movs	r0, #48	; 0x30
 80094f0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094f4:	4422      	add	r2, r4
 80094f6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80094fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80094fe:	3302      	adds	r3, #2
 8009500:	e7c5      	b.n	800948e <_printf_common+0x62>
 8009502:	2301      	movs	r3, #1
 8009504:	4622      	mov	r2, r4
 8009506:	4639      	mov	r1, r7
 8009508:	4630      	mov	r0, r6
 800950a:	47c0      	blx	r8
 800950c:	3001      	adds	r0, #1
 800950e:	d0e6      	beq.n	80094de <_printf_common+0xb2>
 8009510:	f109 0901 	add.w	r9, r9, #1
 8009514:	e7d8      	b.n	80094c8 <_printf_common+0x9c>
	...

08009518 <_printf_i>:
 8009518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800951c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009520:	460c      	mov	r4, r1
 8009522:	7e09      	ldrb	r1, [r1, #24]
 8009524:	b085      	sub	sp, #20
 8009526:	296e      	cmp	r1, #110	; 0x6e
 8009528:	4617      	mov	r7, r2
 800952a:	4606      	mov	r6, r0
 800952c:	4698      	mov	r8, r3
 800952e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009530:	f000 80b3 	beq.w	800969a <_printf_i+0x182>
 8009534:	d822      	bhi.n	800957c <_printf_i+0x64>
 8009536:	2963      	cmp	r1, #99	; 0x63
 8009538:	d036      	beq.n	80095a8 <_printf_i+0x90>
 800953a:	d80a      	bhi.n	8009552 <_printf_i+0x3a>
 800953c:	2900      	cmp	r1, #0
 800953e:	f000 80b9 	beq.w	80096b4 <_printf_i+0x19c>
 8009542:	2958      	cmp	r1, #88	; 0x58
 8009544:	f000 8083 	beq.w	800964e <_printf_i+0x136>
 8009548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800954c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009550:	e032      	b.n	80095b8 <_printf_i+0xa0>
 8009552:	2964      	cmp	r1, #100	; 0x64
 8009554:	d001      	beq.n	800955a <_printf_i+0x42>
 8009556:	2969      	cmp	r1, #105	; 0x69
 8009558:	d1f6      	bne.n	8009548 <_printf_i+0x30>
 800955a:	6820      	ldr	r0, [r4, #0]
 800955c:	6813      	ldr	r3, [r2, #0]
 800955e:	0605      	lsls	r5, r0, #24
 8009560:	f103 0104 	add.w	r1, r3, #4
 8009564:	d52a      	bpl.n	80095bc <_printf_i+0xa4>
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6011      	str	r1, [r2, #0]
 800956a:	2b00      	cmp	r3, #0
 800956c:	da03      	bge.n	8009576 <_printf_i+0x5e>
 800956e:	222d      	movs	r2, #45	; 0x2d
 8009570:	425b      	negs	r3, r3
 8009572:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009576:	486f      	ldr	r0, [pc, #444]	; (8009734 <_printf_i+0x21c>)
 8009578:	220a      	movs	r2, #10
 800957a:	e039      	b.n	80095f0 <_printf_i+0xd8>
 800957c:	2973      	cmp	r1, #115	; 0x73
 800957e:	f000 809d 	beq.w	80096bc <_printf_i+0x1a4>
 8009582:	d808      	bhi.n	8009596 <_printf_i+0x7e>
 8009584:	296f      	cmp	r1, #111	; 0x6f
 8009586:	d020      	beq.n	80095ca <_printf_i+0xb2>
 8009588:	2970      	cmp	r1, #112	; 0x70
 800958a:	d1dd      	bne.n	8009548 <_printf_i+0x30>
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	f043 0320 	orr.w	r3, r3, #32
 8009592:	6023      	str	r3, [r4, #0]
 8009594:	e003      	b.n	800959e <_printf_i+0x86>
 8009596:	2975      	cmp	r1, #117	; 0x75
 8009598:	d017      	beq.n	80095ca <_printf_i+0xb2>
 800959a:	2978      	cmp	r1, #120	; 0x78
 800959c:	d1d4      	bne.n	8009548 <_printf_i+0x30>
 800959e:	2378      	movs	r3, #120	; 0x78
 80095a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095a4:	4864      	ldr	r0, [pc, #400]	; (8009738 <_printf_i+0x220>)
 80095a6:	e055      	b.n	8009654 <_printf_i+0x13c>
 80095a8:	6813      	ldr	r3, [r2, #0]
 80095aa:	1d19      	adds	r1, r3, #4
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6011      	str	r1, [r2, #0]
 80095b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095b8:	2301      	movs	r3, #1
 80095ba:	e08c      	b.n	80096d6 <_printf_i+0x1be>
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6011      	str	r1, [r2, #0]
 80095c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80095c4:	bf18      	it	ne
 80095c6:	b21b      	sxthne	r3, r3
 80095c8:	e7cf      	b.n	800956a <_printf_i+0x52>
 80095ca:	6813      	ldr	r3, [r2, #0]
 80095cc:	6825      	ldr	r5, [r4, #0]
 80095ce:	1d18      	adds	r0, r3, #4
 80095d0:	6010      	str	r0, [r2, #0]
 80095d2:	0628      	lsls	r0, r5, #24
 80095d4:	d501      	bpl.n	80095da <_printf_i+0xc2>
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	e002      	b.n	80095e0 <_printf_i+0xc8>
 80095da:	0668      	lsls	r0, r5, #25
 80095dc:	d5fb      	bpl.n	80095d6 <_printf_i+0xbe>
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	4854      	ldr	r0, [pc, #336]	; (8009734 <_printf_i+0x21c>)
 80095e2:	296f      	cmp	r1, #111	; 0x6f
 80095e4:	bf14      	ite	ne
 80095e6:	220a      	movne	r2, #10
 80095e8:	2208      	moveq	r2, #8
 80095ea:	2100      	movs	r1, #0
 80095ec:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095f0:	6865      	ldr	r5, [r4, #4]
 80095f2:	60a5      	str	r5, [r4, #8]
 80095f4:	2d00      	cmp	r5, #0
 80095f6:	f2c0 8095 	blt.w	8009724 <_printf_i+0x20c>
 80095fa:	6821      	ldr	r1, [r4, #0]
 80095fc:	f021 0104 	bic.w	r1, r1, #4
 8009600:	6021      	str	r1, [r4, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d13d      	bne.n	8009682 <_printf_i+0x16a>
 8009606:	2d00      	cmp	r5, #0
 8009608:	f040 808e 	bne.w	8009728 <_printf_i+0x210>
 800960c:	4665      	mov	r5, ip
 800960e:	2a08      	cmp	r2, #8
 8009610:	d10b      	bne.n	800962a <_printf_i+0x112>
 8009612:	6823      	ldr	r3, [r4, #0]
 8009614:	07db      	lsls	r3, r3, #31
 8009616:	d508      	bpl.n	800962a <_printf_i+0x112>
 8009618:	6923      	ldr	r3, [r4, #16]
 800961a:	6862      	ldr	r2, [r4, #4]
 800961c:	429a      	cmp	r2, r3
 800961e:	bfde      	ittt	le
 8009620:	2330      	movle	r3, #48	; 0x30
 8009622:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009626:	f105 35ff 	addle.w	r5, r5, #4294967295
 800962a:	ebac 0305 	sub.w	r3, ip, r5
 800962e:	6123      	str	r3, [r4, #16]
 8009630:	f8cd 8000 	str.w	r8, [sp]
 8009634:	463b      	mov	r3, r7
 8009636:	aa03      	add	r2, sp, #12
 8009638:	4621      	mov	r1, r4
 800963a:	4630      	mov	r0, r6
 800963c:	f7ff fef6 	bl	800942c <_printf_common>
 8009640:	3001      	adds	r0, #1
 8009642:	d14d      	bne.n	80096e0 <_printf_i+0x1c8>
 8009644:	f04f 30ff 	mov.w	r0, #4294967295
 8009648:	b005      	add	sp, #20
 800964a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800964e:	4839      	ldr	r0, [pc, #228]	; (8009734 <_printf_i+0x21c>)
 8009650:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009654:	6813      	ldr	r3, [r2, #0]
 8009656:	6821      	ldr	r1, [r4, #0]
 8009658:	1d1d      	adds	r5, r3, #4
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	6015      	str	r5, [r2, #0]
 800965e:	060a      	lsls	r2, r1, #24
 8009660:	d50b      	bpl.n	800967a <_printf_i+0x162>
 8009662:	07ca      	lsls	r2, r1, #31
 8009664:	bf44      	itt	mi
 8009666:	f041 0120 	orrmi.w	r1, r1, #32
 800966a:	6021      	strmi	r1, [r4, #0]
 800966c:	b91b      	cbnz	r3, 8009676 <_printf_i+0x15e>
 800966e:	6822      	ldr	r2, [r4, #0]
 8009670:	f022 0220 	bic.w	r2, r2, #32
 8009674:	6022      	str	r2, [r4, #0]
 8009676:	2210      	movs	r2, #16
 8009678:	e7b7      	b.n	80095ea <_printf_i+0xd2>
 800967a:	064d      	lsls	r5, r1, #25
 800967c:	bf48      	it	mi
 800967e:	b29b      	uxthmi	r3, r3
 8009680:	e7ef      	b.n	8009662 <_printf_i+0x14a>
 8009682:	4665      	mov	r5, ip
 8009684:	fbb3 f1f2 	udiv	r1, r3, r2
 8009688:	fb02 3311 	mls	r3, r2, r1, r3
 800968c:	5cc3      	ldrb	r3, [r0, r3]
 800968e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009692:	460b      	mov	r3, r1
 8009694:	2900      	cmp	r1, #0
 8009696:	d1f5      	bne.n	8009684 <_printf_i+0x16c>
 8009698:	e7b9      	b.n	800960e <_printf_i+0xf6>
 800969a:	6813      	ldr	r3, [r2, #0]
 800969c:	6825      	ldr	r5, [r4, #0]
 800969e:	6961      	ldr	r1, [r4, #20]
 80096a0:	1d18      	adds	r0, r3, #4
 80096a2:	6010      	str	r0, [r2, #0]
 80096a4:	0628      	lsls	r0, r5, #24
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	d501      	bpl.n	80096ae <_printf_i+0x196>
 80096aa:	6019      	str	r1, [r3, #0]
 80096ac:	e002      	b.n	80096b4 <_printf_i+0x19c>
 80096ae:	066a      	lsls	r2, r5, #25
 80096b0:	d5fb      	bpl.n	80096aa <_printf_i+0x192>
 80096b2:	8019      	strh	r1, [r3, #0]
 80096b4:	2300      	movs	r3, #0
 80096b6:	6123      	str	r3, [r4, #16]
 80096b8:	4665      	mov	r5, ip
 80096ba:	e7b9      	b.n	8009630 <_printf_i+0x118>
 80096bc:	6813      	ldr	r3, [r2, #0]
 80096be:	1d19      	adds	r1, r3, #4
 80096c0:	6011      	str	r1, [r2, #0]
 80096c2:	681d      	ldr	r5, [r3, #0]
 80096c4:	6862      	ldr	r2, [r4, #4]
 80096c6:	2100      	movs	r1, #0
 80096c8:	4628      	mov	r0, r5
 80096ca:	f7f6 fdd1 	bl	8000270 <memchr>
 80096ce:	b108      	cbz	r0, 80096d4 <_printf_i+0x1bc>
 80096d0:	1b40      	subs	r0, r0, r5
 80096d2:	6060      	str	r0, [r4, #4]
 80096d4:	6863      	ldr	r3, [r4, #4]
 80096d6:	6123      	str	r3, [r4, #16]
 80096d8:	2300      	movs	r3, #0
 80096da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096de:	e7a7      	b.n	8009630 <_printf_i+0x118>
 80096e0:	6923      	ldr	r3, [r4, #16]
 80096e2:	462a      	mov	r2, r5
 80096e4:	4639      	mov	r1, r7
 80096e6:	4630      	mov	r0, r6
 80096e8:	47c0      	blx	r8
 80096ea:	3001      	adds	r0, #1
 80096ec:	d0aa      	beq.n	8009644 <_printf_i+0x12c>
 80096ee:	6823      	ldr	r3, [r4, #0]
 80096f0:	079b      	lsls	r3, r3, #30
 80096f2:	d413      	bmi.n	800971c <_printf_i+0x204>
 80096f4:	68e0      	ldr	r0, [r4, #12]
 80096f6:	9b03      	ldr	r3, [sp, #12]
 80096f8:	4298      	cmp	r0, r3
 80096fa:	bfb8      	it	lt
 80096fc:	4618      	movlt	r0, r3
 80096fe:	e7a3      	b.n	8009648 <_printf_i+0x130>
 8009700:	2301      	movs	r3, #1
 8009702:	464a      	mov	r2, r9
 8009704:	4639      	mov	r1, r7
 8009706:	4630      	mov	r0, r6
 8009708:	47c0      	blx	r8
 800970a:	3001      	adds	r0, #1
 800970c:	d09a      	beq.n	8009644 <_printf_i+0x12c>
 800970e:	3501      	adds	r5, #1
 8009710:	68e3      	ldr	r3, [r4, #12]
 8009712:	9a03      	ldr	r2, [sp, #12]
 8009714:	1a9b      	subs	r3, r3, r2
 8009716:	42ab      	cmp	r3, r5
 8009718:	dcf2      	bgt.n	8009700 <_printf_i+0x1e8>
 800971a:	e7eb      	b.n	80096f4 <_printf_i+0x1dc>
 800971c:	2500      	movs	r5, #0
 800971e:	f104 0919 	add.w	r9, r4, #25
 8009722:	e7f5      	b.n	8009710 <_printf_i+0x1f8>
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1ac      	bne.n	8009682 <_printf_i+0x16a>
 8009728:	7803      	ldrb	r3, [r0, #0]
 800972a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800972e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009732:	e76c      	b.n	800960e <_printf_i+0xf6>
 8009734:	08009935 	.word	0x08009935
 8009738:	08009946 	.word	0x08009946

0800973c <_sbrk_r>:
 800973c:	b538      	push	{r3, r4, r5, lr}
 800973e:	4c06      	ldr	r4, [pc, #24]	; (8009758 <_sbrk_r+0x1c>)
 8009740:	2300      	movs	r3, #0
 8009742:	4605      	mov	r5, r0
 8009744:	4608      	mov	r0, r1
 8009746:	6023      	str	r3, [r4, #0]
 8009748:	f7f9 f9b6 	bl	8002ab8 <_sbrk>
 800974c:	1c43      	adds	r3, r0, #1
 800974e:	d102      	bne.n	8009756 <_sbrk_r+0x1a>
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	b103      	cbz	r3, 8009756 <_sbrk_r+0x1a>
 8009754:	602b      	str	r3, [r5, #0]
 8009756:	bd38      	pop	{r3, r4, r5, pc}
 8009758:	2005e71c 	.word	0x2005e71c

0800975c <memcpy>:
 800975c:	b510      	push	{r4, lr}
 800975e:	1e43      	subs	r3, r0, #1
 8009760:	440a      	add	r2, r1
 8009762:	4291      	cmp	r1, r2
 8009764:	d100      	bne.n	8009768 <memcpy+0xc>
 8009766:	bd10      	pop	{r4, pc}
 8009768:	f811 4b01 	ldrb.w	r4, [r1], #1
 800976c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009770:	e7f7      	b.n	8009762 <memcpy+0x6>

08009772 <memmove>:
 8009772:	4288      	cmp	r0, r1
 8009774:	b510      	push	{r4, lr}
 8009776:	eb01 0302 	add.w	r3, r1, r2
 800977a:	d807      	bhi.n	800978c <memmove+0x1a>
 800977c:	1e42      	subs	r2, r0, #1
 800977e:	4299      	cmp	r1, r3
 8009780:	d00a      	beq.n	8009798 <memmove+0x26>
 8009782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009786:	f802 4f01 	strb.w	r4, [r2, #1]!
 800978a:	e7f8      	b.n	800977e <memmove+0xc>
 800978c:	4283      	cmp	r3, r0
 800978e:	d9f5      	bls.n	800977c <memmove+0xa>
 8009790:	1881      	adds	r1, r0, r2
 8009792:	1ad2      	subs	r2, r2, r3
 8009794:	42d3      	cmn	r3, r2
 8009796:	d100      	bne.n	800979a <memmove+0x28>
 8009798:	bd10      	pop	{r4, pc}
 800979a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800979e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80097a2:	e7f7      	b.n	8009794 <memmove+0x22>

080097a4 <__malloc_lock>:
 80097a4:	4770      	bx	lr

080097a6 <__malloc_unlock>:
 80097a6:	4770      	bx	lr

080097a8 <_realloc_r>:
 80097a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097aa:	4607      	mov	r7, r0
 80097ac:	4614      	mov	r4, r2
 80097ae:	460e      	mov	r6, r1
 80097b0:	b921      	cbnz	r1, 80097bc <_realloc_r+0x14>
 80097b2:	4611      	mov	r1, r2
 80097b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80097b8:	f7ff bc8c 	b.w	80090d4 <_malloc_r>
 80097bc:	b922      	cbnz	r2, 80097c8 <_realloc_r+0x20>
 80097be:	f7ff fc3b 	bl	8009038 <_free_r>
 80097c2:	4625      	mov	r5, r4
 80097c4:	4628      	mov	r0, r5
 80097c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c8:	f000 f814 	bl	80097f4 <_malloc_usable_size_r>
 80097cc:	42a0      	cmp	r0, r4
 80097ce:	d20f      	bcs.n	80097f0 <_realloc_r+0x48>
 80097d0:	4621      	mov	r1, r4
 80097d2:	4638      	mov	r0, r7
 80097d4:	f7ff fc7e 	bl	80090d4 <_malloc_r>
 80097d8:	4605      	mov	r5, r0
 80097da:	2800      	cmp	r0, #0
 80097dc:	d0f2      	beq.n	80097c4 <_realloc_r+0x1c>
 80097de:	4631      	mov	r1, r6
 80097e0:	4622      	mov	r2, r4
 80097e2:	f7ff ffbb 	bl	800975c <memcpy>
 80097e6:	4631      	mov	r1, r6
 80097e8:	4638      	mov	r0, r7
 80097ea:	f7ff fc25 	bl	8009038 <_free_r>
 80097ee:	e7e9      	b.n	80097c4 <_realloc_r+0x1c>
 80097f0:	4635      	mov	r5, r6
 80097f2:	e7e7      	b.n	80097c4 <_realloc_r+0x1c>

080097f4 <_malloc_usable_size_r>:
 80097f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097f8:	1f18      	subs	r0, r3, #4
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	bfbc      	itt	lt
 80097fe:	580b      	ldrlt	r3, [r1, r0]
 8009800:	18c0      	addlt	r0, r0, r3
 8009802:	4770      	bx	lr

08009804 <_init>:
 8009804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009806:	bf00      	nop
 8009808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800980a:	bc08      	pop	{r3}
 800980c:	469e      	mov	lr, r3
 800980e:	4770      	bx	lr

08009810 <_fini>:
 8009810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009812:	bf00      	nop
 8009814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009816:	bc08      	pop	{r3}
 8009818:	469e      	mov	lr, r3
 800981a:	4770      	bx	lr
