
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e60  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  0800a060  0800a060  0001a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a318  0800a318  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a318  0800a318  0001a318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a320  0800a320  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a320  0800a320  0001a320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a324  0800a324  0001a324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005a86c  200001e4  0800a50c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2005aa50  0800a50c  0002aa50  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015a73  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000289e  00000000  00000000  00035c85  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001550  00000000  00000000  00038528  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  00039a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029847  00000000  00000000  0003aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa53  00000000  00000000  000646f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001039ee  00000000  00000000  0007414a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00177b38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ff8  00000000  00000000  00177bb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a048 	.word	0x0800a048

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	0800a048 	.word	0x0800a048

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f002 fe22 	bl	800325e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f86b 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 feb5 	bl	800138c <MX_GPIO_Init>
  MX_DMA_Init();
 8000622:	f000 fe79 	bl	8001318 <MX_DMA_Init>
  MX_ADC1_Init();
 8000626:	f000 f907 	bl	8000838 <MX_ADC1_Init>
  MX_SPI1_Init();
 800062a:	f000 f9d7 	bl	80009dc <MX_SPI1_Init>
  MX_TIM1_Init();
 800062e:	f000 fa4d 	bl	8000acc <MX_TIM1_Init>
  MX_TIM2_Init();
 8000632:	f000 fb0b 	bl	8000c4c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000636:	f000 fb5d 	bl	8000cf4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800063a:	f000 fbd3 	bl	8000de4 <MX_TIM4_Init>
  MX_TIM8_Init();
 800063e:	f000 fcaf 	bl	8000fa0 <MX_TIM8_Init>
  MX_UART5_Init();
 8000642:	f000 fd79 	bl	8001138 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000646:	f000 fdd7 	bl	80011f8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800064a:	f000 fe05 	bl	8001258 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800064e:	f000 fe33 	bl	80012b8 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000652:	f000 f943 	bl	80008dc <MX_I2C1_Init>
  MX_I2C3_Init();
 8000656:	f000 f981 	bl	800095c <MX_I2C3_Init>
  MX_SPI4_Init();
 800065a:	f000 f9f9 	bl	8000a50 <MX_SPI4_Init>
  MX_TIM5_Init();
 800065e:	f000 fc1b 	bl	8000e98 <MX_TIM5_Init>
  MX_UART7_Init();
 8000662:	f000 fd99 	bl	8001198 <MX_UART7_Init>
  MX_TIM6_Init();
 8000666:	f000 fc65 	bl	8000f34 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	491c      	ldr	r1, [pc, #112]	; (80006e0 <main+0xd0>)
 800066e:	481d      	ldr	r0, [pc, #116]	; (80006e4 <main+0xd4>)
 8000670:	f008 f87e 	bl	8008770 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000674:	481c      	ldr	r0, [pc, #112]	; (80006e8 <main+0xd8>)
 8000676:	f006 f8e3 	bl	8006840 <HAL_TIM_Base_Start_IT>
	char msg_buffers[25];
	uint16_t index = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	83fb      	strh	r3, [r7, #30]
	switchingCircuitIdle();
 800067e:	f001 f8a9 	bl	80017d4 <switchingCircuitIdle>
	// visualise
	set_LED1(0, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f001 f84a 	bl	8001720 <set_LED1>
	HAL_Delay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f002 fe42 	bl	8003318 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//parse text every time before polarization
		parseText();
 8000694:	f001 fb66 	bl	8001d64 <parseText>

		// if new measurement technique was updated - change state regarding to the update
		if (stateCanBeUpdated()) {
 8000698:	f001 ff7c 	bl	8002594 <stateCanBeUpdated>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <main+0x96>
			updateState();
 80006a2:	f001 ff57 	bl	8002554 <updateState>
		}
		//
		if (measurementCanRun() && timeToNextPolarization == 0) {
 80006a6:	f001 ff9d 	bl	80025e4 <measurementCanRun>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d009      	beq.n	80006c4 <main+0xb4>
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <main+0xdc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d105      	bne.n	80006c4 <main+0xb4>
			timeToNextPolarization = 15000000;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <main+0xdc>)
 80006ba:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <main+0xe0>)
 80006bc:	601a      	str	r2, [r3, #0]
			runMeasurementMethod();
 80006be:	f000 fef7 	bl	80014b0 <runMeasurementMethod>
		if (measurementCanRun() && timeToNextPolarization == 0) {
 80006c2:	e00c      	b.n	80006de <main+0xce>
		}
		// idle state - if no method is active and there are no data to be sent
		else if (stateIsIdle()) {
 80006c4:	f001 ffb6 	bl	8002634 <stateIsIdle>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d005      	beq.n	80006da <main+0xca>
			set_LED1(0, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2000      	movs	r0, #0
 80006d4:	f001 f824 	bl	8001720 <set_LED1>
 80006d8:	e7dc      	b.n	8000694 <main+0x84>
		} else {
			sendMeasuredData();
 80006da:	f001 fdbb 	bl	8002254 <sendMeasuredData>
	while (1) {
 80006de:	e7d9      	b.n	8000694 <main+0x84>
 80006e0:	20004314 	.word	0x20004314
 80006e4:	20004248 	.word	0x20004248
 80006e8:	2002f428 	.word	0x2002f428
 80006ec:	20000208 	.word	0x20000208
 80006f0:	00e4e1c0 	.word	0x00e4e1c0

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0b8      	sub	sp, #224	; 0xe0
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006fe:	2234      	movs	r2, #52	; 0x34
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f008 ff6a 	bl	80095dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2290      	movs	r2, #144	; 0x90
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f008 ff5b 	bl	80095dc <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000726:	f004 f9bb 	bl	8004aa0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072a:	4b40      	ldr	r3, [pc, #256]	; (800082c <SystemClock_Config+0x138>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	4a3f      	ldr	r2, [pc, #252]	; (800082c <SystemClock_Config+0x138>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	6413      	str	r3, [r2, #64]	; 0x40
 8000736:	4b3d      	ldr	r3, [pc, #244]	; (800082c <SystemClock_Config+0x138>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000742:	4b3b      	ldr	r3, [pc, #236]	; (8000830 <SystemClock_Config+0x13c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a3a      	ldr	r2, [pc, #232]	; (8000830 <SystemClock_Config+0x13c>)
 8000748:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800074c:	6013      	str	r3, [r2, #0]
 800074e:	4b38      	ldr	r3, [pc, #224]	; (8000830 <SystemClock_Config+0x13c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800075a:	2301      	movs	r3, #1
 800075c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000764:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800076e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000772:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000776:	2305      	movs	r3, #5
 8000778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800077c:	23d8      	movs	r3, #216	; 0xd8
 800077e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000792:	4618      	mov	r0, r3
 8000794:	f004 f9e4 	bl	8004b60 <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800079e:	f001 ff6d 	bl	800267c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007a2:	f004 f98d 	bl	8004ac0 <HAL_PWREx_EnableOverDrive>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007ac:	f001 ff66 	bl	800267c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	230f      	movs	r3, #15
 80007b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b6:	2302      	movs	r3, #2
 80007b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007d6:	2107      	movs	r1, #7
 80007d8:	4618      	mov	r0, r3
 80007da:	f004 fc6f 	bl	80050bc <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80007e4:	f001 ff4a 	bl	800267c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART1
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <SystemClock_Config+0x140>)
 80007ea:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007ec:	2300      	movs	r3, #0
 80007ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80007fc:	2300      	movs	r3, #0
 80007fe:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000800:	2300      	movs	r3, #0
 8000802:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000804:	2300      	movs	r3, #0
 8000806:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8000808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800080c:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800080e:	f107 0308 	add.w	r3, r7, #8
 8000812:	4618      	mov	r0, r3
 8000814:	f004 fe24 	bl	8005460 <HAL_RCCEx_PeriphCLKConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800081e:	f001 ff2d 	bl	800267c <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	37e0      	adds	r7, #224	; 0xe0
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000
 8000834:	000155d0 	.word	0x000155d0

08000838 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800083e:	463b      	mov	r3, r7
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800084a:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_ADC1_Init+0x9c>)
 800084c:	4a22      	ldr	r2, [pc, #136]	; (80008d8 <MX_ADC1_Init+0xa0>)
 800084e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000850:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <MX_ADC1_Init+0x9c>)
 8000852:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000856:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000858:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_ADC1_Init+0x9c>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_ADC1_Init+0x9c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000864:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_ADC1_Init+0x9c>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_ADC1_Init+0x9c>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000872:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_ADC1_Init+0x9c>)
 8000874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_ADC1_Init+0x9c>)
 800087c:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000880:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MX_ADC1_Init+0x9c>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <MX_ADC1_Init+0x9c>)
 800088a:	2201      	movs	r2, #1
 800088c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <MX_ADC1_Init+0x9c>)
 8000890:	2200      	movs	r2, #0
 8000892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <MX_ADC1_Init+0x9c>)
 8000898:	2201      	movs	r2, #1
 800089a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800089c:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_ADC1_Init+0x9c>)
 800089e:	f002 fd5d 	bl	800335c <HAL_ADC_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80008a8:	f001 fee8 	bl	800267c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008b4:	2301      	movs	r3, #1
 80008b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_ADC1_Init+0x9c>)
 80008be:	f002 fe93 	bl	80035e8 <HAL_ADC_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008c8:	f001 fed8 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2002f540 	.word	0x2002f540
 80008d8:	40012000 	.word	0x40012000

080008dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_I2C1_Init+0x74>)
 80008e2:	4a1c      	ldr	r2, [pc, #112]	; (8000954 <MX_I2C1_Init+0x78>)
 80008e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	; (8000950 <MX_I2C1_Init+0x74>)
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <MX_I2C1_Init+0x7c>)
 80008ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008ec:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <MX_I2C1_Init+0x74>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008f8:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008fe:	4b14      	ldr	r3, [pc, #80]	; (8000950 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <MX_I2C1_Init+0x74>)
 800090c:	2200      	movs	r2, #0
 800090e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <MX_I2C1_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000916:	480e      	ldr	r0, [pc, #56]	; (8000950 <MX_I2C1_Init+0x74>)
 8000918:	f003 ff9a 	bl	8004850 <HAL_I2C_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000922:	f001 feab 	bl	800267c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000926:	2100      	movs	r1, #0
 8000928:	4809      	ldr	r0, [pc, #36]	; (8000950 <MX_I2C1_Init+0x74>)
 800092a:	f004 f821 	bl	8004970 <HAL_I2CEx_ConfigAnalogFilter>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000934:	f001 fea2 	bl	800267c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000938:	2100      	movs	r1, #0
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_I2C1_Init+0x74>)
 800093c:	f004 f863 	bl	8004a06 <HAL_I2CEx_ConfigDigitalFilter>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000946:	f001 fe99 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200042c8 	.word	0x200042c8
 8000954:	40005400 	.word	0x40005400
 8000958:	20404768 	.word	0x20404768

0800095c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000960:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <MX_I2C3_Init+0x74>)
 8000962:	4a1c      	ldr	r2, [pc, #112]	; (80009d4 <MX_I2C3_Init+0x78>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <MX_I2C3_Init+0x74>)
 8000968:	4a1b      	ldr	r2, [pc, #108]	; (80009d8 <MX_I2C3_Init+0x7c>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <MX_I2C3_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_I2C3_Init+0x74>)
 8000974:	2201      	movs	r2, #1
 8000976:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000978:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <MX_I2C3_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_I2C3_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_I2C3_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_I2C3_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_I2C3_Init+0x74>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <MX_I2C3_Init+0x74>)
 8000998:	f003 ff5a 	bl	8004850 <HAL_I2C_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80009a2:	f001 fe6b 	bl	800267c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a6:	2100      	movs	r1, #0
 80009a8:	4809      	ldr	r0, [pc, #36]	; (80009d0 <MX_I2C3_Init+0x74>)
 80009aa:	f003 ffe1 	bl	8004970 <HAL_I2CEx_ConfigAnalogFilter>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009b4:	f001 fe62 	bl	800267c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009b8:	2100      	movs	r1, #0
 80009ba:	4805      	ldr	r0, [pc, #20]	; (80009d0 <MX_I2C3_Init+0x74>)
 80009bc:	f004 f823 	bl	8004a06 <HAL_I2CEx_ConfigDigitalFilter>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009c6:	f001 fe59 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	2000409c 	.word	0x2000409c
 80009d4:	40005c00 	.word	0x40005c00
 80009d8:	20404768 	.word	0x20404768

080009dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <MX_SPI1_Init+0x6c>)
 80009e2:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <MX_SPI1_Init+0x70>)
 80009e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009e6:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_SPI1_Init+0x6c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <MX_SPI1_Init+0x6c>)
 80009ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009f4:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_SPI1_Init+0x6c>)
 80009f6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80009fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_SPI1_Init+0x6c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_SPI1_Init+0x6c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_SPI1_Init+0x6c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_SPI1_Init+0x6c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_SPI1_Init+0x6c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_SPI1_Init+0x6c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_SPI1_Init+0x6c>)
 8000a22:	2207      	movs	r2, #7
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_SPI1_Init+0x6c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <MX_SPI1_Init+0x6c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a32:	4805      	ldr	r0, [pc, #20]	; (8000a48 <MX_SPI1_Init+0x6c>)
 8000a34:	f005 f93a 	bl	8005cac <HAL_SPI_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000a3e:	f001 fe1d 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	2002f7b4 	.word	0x2002f7b4
 8000a4c:	40013000 	.word	0x40013000

08000a50 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a56:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <MX_SPI4_Init+0x78>)
 8000a58:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a5a:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a60:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a6a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a6e:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a7e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a82:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a84:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a96:	4b0b      	ldr	r3, [pc, #44]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000a9e:	2207      	movs	r2, #7
 8000aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000aaa:	2208      	movs	r2, #8
 8000aac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <MX_SPI4_Init+0x74>)
 8000ab0:	f005 f8fc 	bl	8005cac <HAL_SPI_Init>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000aba:	f001 fddf 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2002f608 	.word	0x2002f608
 8000ac8:	40013400 	.word	0x40013400

08000acc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b09a      	sub	sp, #104	; 0x68
 8000ad0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]
 8000afe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	222c      	movs	r2, #44	; 0x2c
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f008 fd68 	bl	80095dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b0c:	4b4d      	ldr	r3, [pc, #308]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000b0e:	4a4e      	ldr	r2, [pc, #312]	; (8000c48 <MX_TIM1_Init+0x17c>)
 8000b10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b12:	4b4c      	ldr	r3, [pc, #304]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b18:	4b4a      	ldr	r3, [pc, #296]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4898-1;
 8000b1e:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000b20:	f241 3221 	movw	r2, #4897	; 0x1321
 8000b24:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b26:	4b47      	ldr	r3, [pc, #284]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b2c:	4b45      	ldr	r3, [pc, #276]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b44      	ldr	r3, [pc, #272]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b38:	4842      	ldr	r0, [pc, #264]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000b3a:	f005 fe56 	bl	80067ea <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b44:	f001 fd9a 	bl	800267c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b4c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b52:	4619      	mov	r1, r3
 8000b54:	483b      	ldr	r0, [pc, #236]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000b56:	f006 fce1 	bl	800751c <HAL_TIM_ConfigClockSource>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b60:	f001 fd8c 	bl	800267c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b64:	4837      	ldr	r0, [pc, #220]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000b66:	f005 fec0 	bl	80068ea <HAL_TIM_PWM_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b70:	f001 fd84 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b74:	2320      	movs	r3, #32
 8000b76:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b7c:	2380      	movs	r3, #128	; 0x80
 8000b7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b84:	4619      	mov	r1, r3
 8000b86:	482f      	ldr	r0, [pc, #188]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000b88:	f007 fbe8 	bl	800835c <HAL_TIMEx_MasterConfigSynchronization>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b92:	f001 fd73 	bl	800267c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b96:	2370      	movs	r3, #112	; 0x70
 8000b98:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 864+10;
 8000b9a:	f240 336a 	movw	r3, #874	; 0x36a
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000bac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bb0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bba:	2200      	movs	r2, #0
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	4821      	ldr	r0, [pc, #132]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000bc0:	f006 fb94 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000bca:	f001 fd57 	bl	800267c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bce:	2360      	movs	r3, #96	; 0x60
 8000bd0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 8000bd2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bdc:	2204      	movs	r2, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4818      	ldr	r0, [pc, #96]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000be2:	f006 fb83 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000bec:	f001 fd46 	bl	800267c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	4619      	mov	r1, r3
 8000c24:	4807      	ldr	r0, [pc, #28]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000c26:	f007 fc27 	bl	8008478 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000c30:	f001 fd24 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <MX_TIM1_Init+0x178>)
 8000c36:	f002 f841 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 8000c3a:	bf00      	nop
 8000c3c:	3768      	adds	r7, #104	; 0x68
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2002f774 	.word	0x2002f774
 8000c48:	40010000 	.word	0x40010000

08000c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c52:	f107 0314 	add.w	r3, r7, #20
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c6a:	4b21      	ldr	r3, [pc, #132]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c6c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c70:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c72:	4b1f      	ldr	r3, [pc, #124]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c78:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000c7e:	4b1c      	ldr	r3, [pc, #112]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c86:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8c:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c92:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000c94:	f005 ff78 	bl	8006b88 <HAL_TIM_IC_Init>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c9e:	f001 fced 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000cb2:	f007 fb53 	bl	800835c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000cbc:	f001 fcde 	bl	800267c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4806      	ldr	r0, [pc, #24]	; (8000cf0 <MX_TIM2_Init+0xa4>)
 8000cd8:	f006 fa6b 	bl	80071b2 <HAL_TIM_IC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ce2:	f001 fccb 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	3720      	adds	r7, #32
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	2002f818 	.word	0x2002f818

08000cf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b090      	sub	sp, #64	; 0x40
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
 8000d24:	615a      	str	r2, [r3, #20]
 8000d26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d28:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000d2a:	4a2d      	ldr	r2, [pc, #180]	; (8000de0 <MX_TIM3_Init+0xec>)
 8000d2c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d2e:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d34:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d40:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d4c:	4823      	ldr	r0, [pc, #140]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000d4e:	f005 fd4c 	bl	80067ea <HAL_TIM_Base_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d58:	f001 fc90 	bl	800267c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d5c:	481f      	ldr	r0, [pc, #124]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000d5e:	f005 fdc4 	bl	80068ea <HAL_TIM_PWM_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d68:	f001 fc88 	bl	800267c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4818      	ldr	r0, [pc, #96]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000d7c:	f006 fc88 	bl	8007690 <HAL_TIM_SlaveConfigSynchro>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d86:	f001 fc79 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d92:	f107 0320 	add.w	r3, r7, #32
 8000d96:	4619      	mov	r1, r3
 8000d98:	4810      	ldr	r0, [pc, #64]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000d9a:	f007 fadf 	bl	800835c <HAL_TIMEx_MasterConfigSynchronization>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000da4:	f001 fc6a 	bl	800267c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da8:	2360      	movs	r3, #96	; 0x60
 8000daa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4807      	ldr	r0, [pc, #28]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000dc0:	f006 fa94 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000dca:	f001 fc57 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dce:	4803      	ldr	r0, [pc, #12]	; (8000ddc <MX_TIM3_Init+0xe8>)
 8000dd0:	f001 ff74 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 8000dd4:	bf00      	nop
 8000dd6:	3740      	adds	r7, #64	; 0x40
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2002f468 	.word	0x2002f468
 8000de0:	40000400 	.word	0x40000400

08000de4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]
 8000e06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e08:	4b21      	ldr	r3, [pc, #132]	; (8000e90 <MX_TIM4_Init+0xac>)
 8000e0a:	4a22      	ldr	r2, [pc, #136]	; (8000e94 <MX_TIM4_Init+0xb0>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <MX_TIM4_Init+0xac>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <MX_TIM4_Init+0xac>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	; (8000e90 <MX_TIM4_Init+0xac>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <MX_TIM4_Init+0xac>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <MX_TIM4_Init+0xac>)
 8000e28:	2280      	movs	r2, #128	; 0x80
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e2c:	4818      	ldr	r0, [pc, #96]	; (8000e90 <MX_TIM4_Init+0xac>)
 8000e2e:	f005 fd5c 	bl	80068ea <HAL_TIM_PWM_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000e38:	f001 fc20 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e3c:	2320      	movs	r3, #32
 8000e3e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4811      	ldr	r0, [pc, #68]	; (8000e90 <MX_TIM4_Init+0xac>)
 8000e4c:	f007 fa86 	bl	800835c <HAL_TIMEx_MasterConfigSynchronization>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000e56:	f001 fc11 	bl	800267c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5a:	2360      	movs	r3, #96	; 0x60
 8000e5c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6a:	463b      	mov	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_TIM4_Init+0xac>)
 8000e72:	f006 fa3b 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000e7c:	f001 fbfe 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MX_TIM4_Init+0xac>)
 8000e82:	f001 ff1b 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	; 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20004208 	.word	0x20004208
 8000e94:	40000800 	.word	0x40000800

08000e98 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0310 	add.w	r3, r7, #16
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	1d3b      	adds	r3, r7, #4
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000eb8:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <MX_TIM5_Init+0x98>)
 8000eba:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec2:	4b1a      	ldr	r3, [pc, #104]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = (21600/2) -1;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000eca:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000ece:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000edc:	4813      	ldr	r0, [pc, #76]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000ede:	f005 fc84 	bl	80067ea <HAL_TIM_Base_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ee8:	f001 fbc8 	bl	800267c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ef2:	f107 0310 	add.w	r3, r7, #16
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480c      	ldr	r0, [pc, #48]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000efa:	f006 fb0f 	bl	800751c <HAL_TIM_ConfigClockSource>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000f04:	f001 fbba 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	4619      	mov	r1, r3
 8000f14:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_TIM5_Init+0x94>)
 8000f16:	f007 fa21 	bl	800835c <HAL_TIMEx_MasterConfigSynchronization>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000f20:	f001 fbac 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	2002f428 	.word	0x2002f428
 8000f30:	40000c00 	.word	0x40000c00

08000f34 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f44:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f46:	4a15      	ldr	r2, [pc, #84]	; (8000f9c <MX_TIM6_Init+0x68>)
 8000f48:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4898-1;
 8000f56:	4b10      	ldr	r3, [pc, #64]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f58:	f241 3221 	movw	r2, #4897	; 0x1321
 8000f5c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f66:	f005 fc40 	bl	80067ea <HAL_TIM_Base_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f70:	f001 fb84 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f74:	2320      	movs	r3, #32
 8000f76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f7c:	1d3b      	adds	r3, r7, #4
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_TIM6_Init+0x64>)
 8000f82:	f007 f9eb 	bl	800835c <HAL_TIMEx_MasterConfigSynchronization>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f8c:	f001 fb76 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f90:	bf00      	nop
 8000f92:	3710      	adds	r7, #16
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	2002f730 	.word	0x2002f730
 8000f9c:	40001000 	.word	0x40001000

08000fa0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b09e      	sub	sp, #120	; 0x78
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fa6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
 8000fe0:	615a      	str	r2, [r3, #20]
 8000fe2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	222c      	movs	r2, #44	; 0x2c
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f008 faf6 	bl	80095dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ff0:	4b4f      	ldr	r3, [pc, #316]	; (8001130 <MX_TIM8_Init+0x190>)
 8000ff2:	4a50      	ldr	r2, [pc, #320]	; (8001134 <MX_TIM8_Init+0x194>)
 8000ff4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ff6:	4b4e      	ldr	r3, [pc, #312]	; (8001130 <MX_TIM8_Init+0x190>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b4c      	ldr	r3, [pc, #304]	; (8001130 <MX_TIM8_Init+0x190>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 108-1;
 8001002:	4b4b      	ldr	r3, [pc, #300]	; (8001130 <MX_TIM8_Init+0x190>)
 8001004:	226b      	movs	r2, #107	; 0x6b
 8001006:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001008:	4b49      	ldr	r3, [pc, #292]	; (8001130 <MX_TIM8_Init+0x190>)
 800100a:	2200      	movs	r2, #0
 800100c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 24;
 800100e:	4b48      	ldr	r3, [pc, #288]	; (8001130 <MX_TIM8_Init+0x190>)
 8001010:	2218      	movs	r2, #24
 8001012:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001014:	4b46      	ldr	r3, [pc, #280]	; (8001130 <MX_TIM8_Init+0x190>)
 8001016:	2200      	movs	r2, #0
 8001018:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800101a:	4845      	ldr	r0, [pc, #276]	; (8001130 <MX_TIM8_Init+0x190>)
 800101c:	f005 fbe5 	bl	80067ea <HAL_TIM_Base_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8001026:	f001 fb29 	bl	800267c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800102e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001030:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001034:	4619      	mov	r1, r3
 8001036:	483e      	ldr	r0, [pc, #248]	; (8001130 <MX_TIM8_Init+0x190>)
 8001038:	f006 fa70 	bl	800751c <HAL_TIM_ConfigClockSource>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001042:	f001 fb1b 	bl	800267c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001046:	483a      	ldr	r0, [pc, #232]	; (8001130 <MX_TIM8_Init+0x190>)
 8001048:	f005 fc4f 	bl	80068ea <HAL_TIM_PWM_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8001052:	f001 fb13 	bl	800267c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8001056:	2108      	movs	r1, #8
 8001058:	4835      	ldr	r0, [pc, #212]	; (8001130 <MX_TIM8_Init+0x190>)
 800105a:	f005 ff45 	bl	8006ee8 <HAL_TIM_OnePulse_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001064:	f001 fb0a 	bl	800267c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001068:	2306      	movs	r3, #6
 800106a:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800106c:	2300      	movs	r3, #0
 800106e:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001070:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001074:	4619      	mov	r1, r3
 8001076:	482e      	ldr	r0, [pc, #184]	; (8001130 <MX_TIM8_Init+0x190>)
 8001078:	f006 fb0a 	bl	8007690 <HAL_TIM_SlaveConfigSynchro>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8001082:	f001 fafb 	bl	800267c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800108a:	2300      	movs	r3, #0
 800108c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800108e:	2300      	movs	r3, #0
 8001090:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001092:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001096:	4619      	mov	r1, r3
 8001098:	4825      	ldr	r0, [pc, #148]	; (8001130 <MX_TIM8_Init+0x190>)
 800109a:	f007 f95f 	bl	800835c <HAL_TIMEx_MasterConfigSynchronization>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80010a4:	f001 faea 	bl	800267c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80010a8:	2370      	movs	r3, #112	; 0x70
 80010aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 54;
 80010ac:	2336      	movs	r3, #54	; 0x36
 80010ae:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010b0:	2300      	movs	r3, #0
 80010b2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c8:	2200      	movs	r2, #0
 80010ca:	4619      	mov	r1, r3
 80010cc:	4818      	ldr	r0, [pc, #96]	; (8001130 <MX_TIM8_Init+0x190>)
 80010ce:	f006 f90d 	bl	80072ec <HAL_TIM_PWM_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 80010d8:	f001 fad0 	bl	800267c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001102:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001108:	2300      	movs	r3, #0
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	4807      	ldr	r0, [pc, #28]	; (8001130 <MX_TIM8_Init+0x190>)
 8001112:	f007 f9b1 	bl	8008478 <HAL_TIMEx_ConfigBreakDeadTime>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 800111c:	f001 faae 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001120:	4803      	ldr	r0, [pc, #12]	; (8001130 <MX_TIM8_Init+0x190>)
 8001122:	f001 fdcb 	bl	8002cbc <HAL_TIM_MspPostInit>

}
 8001126:	bf00      	nop
 8001128:	3778      	adds	r7, #120	; 0x78
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200041c8 	.word	0x200041c8
 8001134:	40010400 	.word	0x40010400

08001138 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_UART5_Init+0x58>)
 800113e:	4a15      	ldr	r2, [pc, #84]	; (8001194 <MX_UART5_Init+0x5c>)
 8001140:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <MX_UART5_Init+0x58>)
 8001144:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001148:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_UART5_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_UART5_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <MX_UART5_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_UART5_Init+0x58>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <MX_UART5_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_UART5_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800116e:	4b08      	ldr	r3, [pc, #32]	; (8001190 <MX_UART5_Init+0x58>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_UART5_Init+0x58>)
 8001176:	2200      	movs	r2, #0
 8001178:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_UART5_Init+0x58>)
 800117c:	f007 fa18 	bl	80085b0 <HAL_UART_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001186:	f001 fa79 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	2002f4c0 	.word	0x2002f4c0
 8001194:	40005000 	.word	0x40005000

08001198 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <MX_UART7_Init+0x58>)
 800119e:	4a15      	ldr	r2, [pc, #84]	; (80011f4 <MX_UART7_Init+0x5c>)
 80011a0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <MX_UART7_Init+0x58>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011a8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b11      	ldr	r3, [pc, #68]	; (80011f0 <MX_UART7_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <MX_UART7_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <MX_UART7_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <MX_UART7_Init+0x58>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <MX_UART7_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <MX_UART7_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ce:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <MX_UART7_Init+0x58>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <MX_UART7_Init+0x58>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80011da:	4805      	ldr	r0, [pc, #20]	; (80011f0 <MX_UART7_Init+0x58>)
 80011dc:	f007 f9e8 	bl	80085b0 <HAL_UART_Init>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80011e6:	f001 fa49 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20004148 	.word	0x20004148
 80011f4:	40007800 	.word	0x40007800

080011f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <MX_USART1_UART_Init+0x58>)
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <MX_USART1_UART_Init+0x5c>)
 8001200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001202:	4b13      	ldr	r3, [pc, #76]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <MX_USART1_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <MX_USART1_UART_Init+0x58>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <MX_USART1_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800122e:	4b08      	ldr	r3, [pc, #32]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001234:	4b06      	ldr	r3, [pc, #24]	; (8001250 <MX_USART1_UART_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800123a:	4805      	ldr	r0, [pc, #20]	; (8001250 <MX_USART1_UART_Init+0x58>)
 800123c:	f007 f9b8 	bl	80085b0 <HAL_UART_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001246:	f001 fa19 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2002f588 	.word	0x2002f588
 8001254:	40011000 	.word	0x40011000

08001258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800125e:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_USART2_UART_Init+0x5c>)
 8001260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_USART2_UART_Init+0x58>)
 800129c:	f007 f988 	bl	80085b0 <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80012a6:	f001 f9e9 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2002f858 	.word	0x2002f858
 80012b4:	40004400 	.word	0x40004400

080012b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_USART3_UART_Init+0x54>)
 80012be:	4a14      	ldr	r2, [pc, #80]	; (8001310 <MX_USART3_UART_Init+0x58>)
 80012c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_USART3_UART_Init+0x54>)
 80012c4:	4a13      	ldr	r2, [pc, #76]	; (8001314 <MX_USART3_UART_Init+0x5c>)
 80012c6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART3_UART_Init+0x54>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_USART3_UART_Init+0x54>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_USART3_UART_Init+0x54>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART3_UART_Init+0x54>)
 80012dc:	220c      	movs	r2, #12
 80012de:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <MX_USART3_UART_Init+0x54>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART3_UART_Init+0x54>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <MX_USART3_UART_Init+0x54>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART3_UART_Init+0x54>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_USART3_UART_Init+0x54>)
 80012fa:	f007 f959 	bl	80085b0 <HAL_UART_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8001304:	f001 f9ba 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20004248 	.word	0x20004248
 8001310:	40004800 	.word	0x40004800
 8001314:	001e8480 	.word	0x001e8480

08001318 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <MX_DMA_Init+0x70>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a19      	ldr	r2, [pc, #100]	; (8001388 <MX_DMA_Init+0x70>)
 8001324:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_DMA_Init+0x70>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_DMA_Init+0x70>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a13      	ldr	r2, [pc, #76]	; (8001388 <MX_DMA_Init+0x70>)
 800133c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_DMA_Init+0x70>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2100      	movs	r1, #0
 8001352:	2010      	movs	r0, #16
 8001354:	f002 fce9 	bl	8003d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001358:	2010      	movs	r0, #16
 800135a:	f002 fd02 	bl	8003d62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2038      	movs	r0, #56	; 0x38
 8001364:	f002 fce1 	bl	8003d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001368:	2038      	movs	r0, #56	; 0x38
 800136a:	f002 fcfa 	bl	8003d62 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	203c      	movs	r0, #60	; 0x3c
 8001374:	f002 fcd9 	bl	8003d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001378:	203c      	movs	r0, #60	; 0x3c
 800137a:	f002 fcf2 	bl	8003d62 <HAL_NVIC_EnableIRQ>

}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800

0800138c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a2:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a3f      	ldr	r2, [pc, #252]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013a8:	f043 0310 	orr.w	r3, r3, #16
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b3d      	ldr	r3, [pc, #244]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0310 	and.w	r3, r3, #16
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a39      	ldr	r2, [pc, #228]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013d2:	4b34      	ldr	r3, [pc, #208]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a33      	ldr	r2, [pc, #204]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e6:	613b      	str	r3, [r7, #16]
 80013e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	4a2d      	ldr	r2, [pc, #180]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6313      	str	r3, [r2, #48]	; 0x30
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <MX_GPIO_Init+0x118>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
 8001400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <MX_GPIO_Init+0x118>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a27      	ldr	r2, [pc, #156]	; (80014a4 <MX_GPIO_Init+0x118>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_GPIO_Init+0x118>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <MX_GPIO_Init+0x118>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <MX_GPIO_Init+0x118>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <MX_GPIO_Init+0x118>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0308 	and.w	r3, r3, #8
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2108      	movs	r1, #8
 8001436:	481c      	ldr	r0, [pc, #112]	; (80014a8 <MX_GPIO_Init+0x11c>)
 8001438:	f003 f9f0 	bl	800481c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 800143c:	2200      	movs	r2, #0
 800143e:	f64e 717f 	movw	r1, #61311	; 0xef7f
 8001442:	481a      	ldr	r0, [pc, #104]	; (80014ac <MX_GPIO_Init+0x120>)
 8001444:	f003 f9ea 	bl	800481c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SN6505_EN_Pin */
  GPIO_InitStruct.Pin = SN6505_EN_Pin;
 8001448:	2308      	movs	r3, #8
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	4812      	ldr	r0, [pc, #72]	; (80014a8 <MX_GPIO_Init+0x11c>)
 8001460:	f003 f832 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin 
                           LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin 
                           S1_Pin S2_Pin S3_Pin S4_Pin 
                           S5_Pin S6_Pin */
  GPIO_InitStruct.Pin = LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 8001464:	f64e 737f 	movw	r3, #61311	; 0xef7f
 8001468:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	4619      	mov	r1, r3
 800147c:	480b      	ldr	r0, [pc, #44]	; (80014ac <MX_GPIO_Init+0x120>)
 800147e:	f003 f823 	bl	80044c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8001482:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001490:	f107 031c 	add.w	r3, r7, #28
 8001494:	4619      	mov	r1, r3
 8001496:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_GPIO_Init+0x11c>)
 8001498:	f003 f816 	bl	80044c8 <HAL_GPIO_Init>

}
 800149c:	bf00      	nop
 800149e:	3730      	adds	r7, #48	; 0x30
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020800 	.word	0x40020800
 80014ac:	40020c00 	.word	0x40020c00

080014b0 <runMeasurementMethod>:

/* USER CODE BEGIN 4 */

void runMeasurementMethod() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

	//if measurement method is set, run the polarization sequence
	if ((state.remainingMeasurements > 0) || (state.remainingMeasurements == -1) && ((state.extAdcActiveState == 1) || (state.intAdcActiveState == 1) || (state.compActiveState == 1))) {
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <runMeasurementMethod+0x70>)
 80014b6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	dc11      	bgt.n	80014e2 <runMeasurementMethod+0x32>
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <runMeasurementMethod+0x70>)
 80014c0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c8:	d128      	bne.n	800151c <runMeasurementMethod+0x6c>
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <runMeasurementMethod+0x70>)
 80014cc:	78db      	ldrb	r3, [r3, #3]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d007      	beq.n	80014e2 <runMeasurementMethod+0x32>
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <runMeasurementMethod+0x70>)
 80014d4:	791b      	ldrb	r3, [r3, #4]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d003      	beq.n	80014e2 <runMeasurementMethod+0x32>
 80014da:	4b11      	ldr	r3, [pc, #68]	; (8001520 <runMeasurementMethod+0x70>)
 80014dc:	795b      	ldrb	r3, [r3, #5]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d11c      	bne.n	800151c <runMeasurementMethod+0x6c>
		runPolarizationSequence();
 80014e2:	f000 f81f 	bl	8001524 <runPolarizationSequence>
		// check, if there isn't new user update before starting measurement
		parseText();
 80014e6:	f000 fc3d 	bl	8001d64 <parseText>
		if (stateCanBeUpdated()) {
 80014ea:	f001 f853 	bl	8002594 <stateCanBeUpdated>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <runMeasurementMethod+0x48>
			updateState();
 80014f4:	f001 f82e 	bl	8002554 <updateState>
		}
		if (state.intAdcActiveState == 1) {
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <runMeasurementMethod+0x70>)
 80014fa:	791b      	ldrb	r3, [r3, #4]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d101      	bne.n	8001504 <runMeasurementMethod+0x54>
			measureWithIntADC();
 8001500:	f000 fa16 	bl	8001930 <measureWithIntADC>
		}
		if (state.extAdcActiveState == 1) {
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <runMeasurementMethod+0x70>)
 8001506:	78db      	ldrb	r3, [r3, #3]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <runMeasurementMethod+0x60>
			measureWithExtADC();
 800150c:	f000 f9e0 	bl	80018d0 <measureWithExtADC>
		}
		if (state.compActiveState == 1) {
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <runMeasurementMethod+0x70>)
 8001512:	795b      	ldrb	r3, [r3, #5]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d101      	bne.n	800151c <runMeasurementMethod+0x6c>
			measureWithComp();
 8001518:	f000 fa2e 	bl	8001978 <measureWithComp>
		}
	}
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	2002f4a8 	.word	0x2002f4a8

08001524 <runPolarizationSequence>:

void runPolarizationSequence() {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 8001528:	4b7a      	ldr	r3, [pc, #488]	; (8001714 <runPolarizationSequence+0x1f0>)
 800152a:	2200      	movs	r2, #0
 800152c:	745a      	strb	r2, [r3, #17]
	state.index++;
 800152e:	4b79      	ldr	r3, [pc, #484]	; (8001714 <runPolarizationSequence+0x1f0>)
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	3301      	adds	r3, #1
 8001534:	4a77      	ldr	r2, [pc, #476]	; (8001714 <runPolarizationSequence+0x1f0>)
 8001536:	6153      	str	r3, [r2, #20]
	// visualise
	set_LED1(1, 1, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	2101      	movs	r1, #1
 800153c:	2001      	movs	r0, #1
 800153e:	f000 f8ef 	bl	8001720 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001542:	2201      	movs	r2, #1
 8001544:	2102      	movs	r1, #2
 8001546:	4874      	ldr	r0, [pc, #464]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001548:	f003 f968 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2104      	movs	r1, #4
 8001550:	4871      	ldr	r0, [pc, #452]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001552:	f003 f963 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001556:	2201      	movs	r2, #1
 8001558:	2108      	movs	r1, #8
 800155a:	486f      	ldr	r0, [pc, #444]	; (8001718 <runPolarizationSequence+0x1f4>)
 800155c:	f003 f95e 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2110      	movs	r1, #16
 8001564:	486c      	ldr	r0, [pc, #432]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001566:	f003 f959 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2120      	movs	r1, #32
 800156e:	486a      	ldr	r0, [pc, #424]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001570:	f003 f954 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	2140      	movs	r1, #64	; 0x40
 8001578:	4867      	ldr	r0, [pc, #412]	; (8001718 <runPolarizationSequence+0x1f4>)
 800157a:	f003 f94f 	bl	800481c <HAL_GPIO_WritePin>
	delay_ms(5);
 800157e:	2005      	movs	r0, #5
 8001580:	f000 f98e 	bl	80018a0 <delay_ms>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001584:	2201      	movs	r2, #1
 8001586:	2102      	movs	r1, #2
 8001588:	4863      	ldr	r0, [pc, #396]	; (8001718 <runPolarizationSequence+0x1f4>)
 800158a:	f003 f947 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2104      	movs	r1, #4
 8001592:	4861      	ldr	r0, [pc, #388]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001594:	f003 f942 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001598:	2201      	movs	r2, #1
 800159a:	2108      	movs	r1, #8
 800159c:	485e      	ldr	r0, [pc, #376]	; (8001718 <runPolarizationSequence+0x1f4>)
 800159e:	f003 f93d 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80015a2:	2201      	movs	r2, #1
 80015a4:	2110      	movs	r1, #16
 80015a6:	485c      	ldr	r0, [pc, #368]	; (8001718 <runPolarizationSequence+0x1f4>)
 80015a8:	f003 f938 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80015ac:	2200      	movs	r2, #0
 80015ae:	2120      	movs	r1, #32
 80015b0:	4859      	ldr	r0, [pc, #356]	; (8001718 <runPolarizationSequence+0x1f4>)
 80015b2:	f003 f933 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80015b6:	2201      	movs	r2, #1
 80015b8:	2140      	movs	r1, #64	; 0x40
 80015ba:	4857      	ldr	r0, [pc, #348]	; (8001718 <runPolarizationSequence+0x1f4>)
 80015bc:	f003 f92e 	bl	800481c <HAL_GPIO_WritePin>
	delay_ms(polarizationTime);
 80015c0:	4b56      	ldr	r3, [pc, #344]	; (800171c <runPolarizationSequence+0x1f8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 f96b 	bl	80018a0 <delay_ms>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2102      	movs	r1, #2
 80015ce:	4852      	ldr	r0, [pc, #328]	; (8001718 <runPolarizationSequence+0x1f4>)
 80015d0:	f003 f924 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2104      	movs	r1, #4
 80015d8:	484f      	ldr	r0, [pc, #316]	; (8001718 <runPolarizationSequence+0x1f4>)
 80015da:	f003 f91f 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80015de:	2201      	movs	r2, #1
 80015e0:	2108      	movs	r1, #8
 80015e2:	484d      	ldr	r0, [pc, #308]	; (8001718 <runPolarizationSequence+0x1f4>)
 80015e4:	f003 f91a 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2110      	movs	r1, #16
 80015ec:	484a      	ldr	r0, [pc, #296]	; (8001718 <runPolarizationSequence+0x1f4>)
 80015ee:	f003 f915 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2120      	movs	r1, #32
 80015f6:	4848      	ldr	r0, [pc, #288]	; (8001718 <runPolarizationSequence+0x1f4>)
 80015f8:	f003 f910 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2140      	movs	r1, #64	; 0x40
 8001600:	4845      	ldr	r0, [pc, #276]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001602:	f003 f90b 	bl	800481c <HAL_GPIO_WritePin>
	delay_us(50);
 8001606:	2032      	movs	r0, #50	; 0x32
 8001608:	f000 f936 	bl	8001878 <delay_us>

	//run sequnece T5 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800160c:	2200      	movs	r2, #0
 800160e:	2102      	movs	r1, #2
 8001610:	4841      	ldr	r0, [pc, #260]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001612:	f003 f903 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2104      	movs	r1, #4
 800161a:	483f      	ldr	r0, [pc, #252]	; (8001718 <runPolarizationSequence+0x1f4>)
 800161c:	f003 f8fe 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001620:	2201      	movs	r2, #1
 8001622:	2108      	movs	r1, #8
 8001624:	483c      	ldr	r0, [pc, #240]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001626:	f003 f8f9 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2110      	movs	r1, #16
 800162e:	483a      	ldr	r0, [pc, #232]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001630:	f003 f8f4 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	2120      	movs	r1, #32
 8001638:	4837      	ldr	r0, [pc, #220]	; (8001718 <runPolarizationSequence+0x1f4>)
 800163a:	f003 f8ef 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800163e:	2201      	movs	r2, #1
 8001640:	2140      	movs	r1, #64	; 0x40
 8001642:	4835      	ldr	r0, [pc, #212]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001644:	f003 f8ea 	bl	800481c <HAL_GPIO_WritePin>
	delay_ms(5);
 8001648:	2005      	movs	r0, #5
 800164a:	f000 f929 	bl	80018a0 <delay_ms>

	//run sequnece T6 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2102      	movs	r1, #2
 8001652:	4831      	ldr	r0, [pc, #196]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001654:	f003 f8e2 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2104      	movs	r1, #4
 800165c:	482e      	ldr	r0, [pc, #184]	; (8001718 <runPolarizationSequence+0x1f4>)
 800165e:	f003 f8dd 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001662:	2201      	movs	r2, #1
 8001664:	2108      	movs	r1, #8
 8001666:	482c      	ldr	r0, [pc, #176]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001668:	f003 f8d8 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2110      	movs	r1, #16
 8001670:	4829      	ldr	r0, [pc, #164]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001672:	f003 f8d3 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001676:	2201      	movs	r2, #1
 8001678:	2120      	movs	r1, #32
 800167a:	4827      	ldr	r0, [pc, #156]	; (8001718 <runPolarizationSequence+0x1f4>)
 800167c:	f003 f8ce 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	4824      	ldr	r0, [pc, #144]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001686:	f003 f8c9 	bl	800481c <HAL_GPIO_WritePin>
	delay_ms(5);
 800168a:	2005      	movs	r0, #5
 800168c:	f000 f908 	bl	80018a0 <delay_ms>
	//run sequnece T7 - TurnOn measure T
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001690:	2200      	movs	r2, #0
 8001692:	2102      	movs	r1, #2
 8001694:	4820      	ldr	r0, [pc, #128]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001696:	f003 f8c1 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 800169a:	2201      	movs	r2, #1
 800169c:	2104      	movs	r1, #4
 800169e:	481e      	ldr	r0, [pc, #120]	; (8001718 <runPolarizationSequence+0x1f4>)
 80016a0:	f003 f8bc 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2108      	movs	r1, #8
 80016a8:	481b      	ldr	r0, [pc, #108]	; (8001718 <runPolarizationSequence+0x1f4>)
 80016aa:	f003 f8b7 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2110      	movs	r1, #16
 80016b2:	4819      	ldr	r0, [pc, #100]	; (8001718 <runPolarizationSequence+0x1f4>)
 80016b4:	f003 f8b2 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2120      	movs	r1, #32
 80016bc:	4816      	ldr	r0, [pc, #88]	; (8001718 <runPolarizationSequence+0x1f4>)
 80016be:	f003 f8ad 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2140      	movs	r1, #64	; 0x40
 80016c6:	4814      	ldr	r0, [pc, #80]	; (8001718 <runPolarizationSequence+0x1f4>)
 80016c8:	f003 f8a8 	bl	800481c <HAL_GPIO_WritePin>
	delay_ms(5);
 80016cc:	2005      	movs	r0, #5
 80016ce:	f000 f8e7 	bl	80018a0 <delay_ms>
	//run sequnece T8 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2102      	movs	r1, #2
 80016d6:	4810      	ldr	r0, [pc, #64]	; (8001718 <runPolarizationSequence+0x1f4>)
 80016d8:	f003 f8a0 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 80016dc:	2201      	movs	r2, #1
 80016de:	2104      	movs	r1, #4
 80016e0:	480d      	ldr	r0, [pc, #52]	; (8001718 <runPolarizationSequence+0x1f4>)
 80016e2:	f003 f89b 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2108      	movs	r1, #8
 80016ea:	480b      	ldr	r0, [pc, #44]	; (8001718 <runPolarizationSequence+0x1f4>)
 80016ec:	f003 f896 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2110      	movs	r1, #16
 80016f4:	4808      	ldr	r0, [pc, #32]	; (8001718 <runPolarizationSequence+0x1f4>)
 80016f6:	f003 f891 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80016fa:	2201      	movs	r2, #1
 80016fc:	2120      	movs	r1, #32
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <runPolarizationSequence+0x1f4>)
 8001700:	f003 f88c 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2140      	movs	r1, #64	; 0x40
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <runPolarizationSequence+0x1f4>)
 800170a:	f003 f887 	bl	800481c <HAL_GPIO_WritePin>

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2002f4a8 	.word	0x2002f4a8
 8001718:	40020c00 	.word	0x40020c00
 800171c:	20000004 	.word	0x20000004

08001720 <set_LED1>:

void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
 800172a:	460b      	mov	r3, r1
 800172c:	71bb      	strb	r3, [r7, #6]
 800172e:	4613      	mov	r3, r2
 8001730:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, G);
 8001732:	79bb      	ldrb	r3, [r7, #6]
 8001734:	461a      	mov	r2, r3
 8001736:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173a:	480a      	ldr	r0, [pc, #40]	; (8001764 <set_LED1+0x44>)
 800173c:	f003 f86e 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, B);
 8001740:	797b      	ldrb	r3, [r7, #5]
 8001742:	461a      	mov	r2, r3
 8001744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001748:	4806      	ldr	r0, [pc, #24]	; (8001764 <set_LED1+0x44>)
 800174a:	f003 f867 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, R);
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	461a      	mov	r2, r3
 8001752:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001756:	4803      	ldr	r0, [pc, #12]	; (8001764 <set_LED1+0x44>)
 8001758:	f003 f860 	bl	800481c <HAL_GPIO_WritePin>
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40020c00 	.word	0x40020c00

08001768 <set_LED2>:
void set_LED2(uint8_t val) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val);
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	461a      	mov	r2, r3
 8001776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <set_LED2+0x20>)
 800177c:	f003 f84e 	bl	800481c <HAL_GPIO_WritePin>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40020c00 	.word	0x40020c00

0800178c <set_LED3>:

void set_LED3(uint8_t val) {
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, val);
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	461a      	mov	r2, r3
 800179a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800179e:	4803      	ldr	r0, [pc, #12]	; (80017ac <set_LED3+0x20>)
 80017a0:	f003 f83c 	bl	800481c <HAL_GPIO_WritePin>
}
 80017a4:	bf00      	nop
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40020c00 	.word	0x40020c00

080017b0 <set_LED4>:

void set_LED4(uint8_t val) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, val);
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	461a      	mov	r2, r3
 80017be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017c2:	4803      	ldr	r0, [pc, #12]	; (80017d0 <set_LED4+0x20>)
 80017c4:	f003 f82a 	bl	800481c <HAL_GPIO_WritePin>
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40020c00 	.word	0x40020c00

080017d4 <switchingCircuitIdle>:

void switchingCircuitIdle() {
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 80017d8:	2200      	movs	r2, #0
 80017da:	2101      	movs	r1, #1
 80017dc:	4811      	ldr	r0, [pc, #68]	; (8001824 <switchingCircuitIdle+0x50>)
 80017de:	f003 f81d 	bl	800481c <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2102      	movs	r1, #2
 80017e6:	480f      	ldr	r0, [pc, #60]	; (8001824 <switchingCircuitIdle+0x50>)
 80017e8:	f003 f818 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2104      	movs	r1, #4
 80017f0:	480c      	ldr	r0, [pc, #48]	; (8001824 <switchingCircuitIdle+0x50>)
 80017f2:	f003 f813 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80017f6:	2201      	movs	r2, #1
 80017f8:	2108      	movs	r1, #8
 80017fa:	480a      	ldr	r0, [pc, #40]	; (8001824 <switchingCircuitIdle+0x50>)
 80017fc:	f003 f80e 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001800:	2200      	movs	r2, #0
 8001802:	2110      	movs	r1, #16
 8001804:	4807      	ldr	r0, [pc, #28]	; (8001824 <switchingCircuitIdle+0x50>)
 8001806:	f003 f809 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2120      	movs	r1, #32
 800180e:	4805      	ldr	r0, [pc, #20]	; (8001824 <switchingCircuitIdle+0x50>)
 8001810:	f003 f804 	bl	800481c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001814:	2200      	movs	r2, #0
 8001816:	2140      	movs	r1, #64	; 0x40
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <switchingCircuitIdle+0x50>)
 800181a:	f002 ffff 	bl	800481c <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40020c00 	.word	0x40020c00

08001828 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d111      	bne.n	800185e <HAL_TIM_PeriodElapsedCallback+0x36>
		if (timeIndex > 0) {
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d004      	beq.n	800184c <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -= 50;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	3b32      	subs	r3, #50	; 0x32
 8001848:	4a09      	ldr	r2, [pc, #36]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x48>)
 800184a:	6013      	str	r3, [r2, #0]
		}
		if (timeToNextPolarization > 0)
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <HAL_TIM_PeriodElapsedCallback+0x36>
		{
			timeToNextPolarization -= 50;
 8001854:	4b07      	ldr	r3, [pc, #28]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3b32      	subs	r3, #50	; 0x32
 800185a:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800185c:	6013      	str	r3, [r2, #0]
		}
	}
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40000c00 	.word	0x40000c00
 8001870:	20000204 	.word	0x20000204
 8001874:	20000208 	.word	0x20000208

08001878 <delay_us>:

void delay_us(uint32_t delay_us) {
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <delay_us+0x24>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 8001886:	bf00      	nop
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <delay_us+0x24>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1fb      	bne.n	8001888 <delay_us+0x10>
		;
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	20000204 	.word	0x20000204

080018a0 <delay_ms>:

void delay_ms(uint32_t delay_us) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us * 1000;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	4a06      	ldr	r2, [pc, #24]	; (80018cc <delay_ms+0x2c>)
 80018b4:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0);
 80018b6:	bf00      	nop
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <delay_ms+0x2c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1fb      	bne.n	80018b8 <delay_ms+0x18>
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	20000204 	.word	0x20000204

080018d0 <measureWithExtADC>:

void measureWithExtADC() {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2101      	movs	r1, #1
 80018d8:	2000      	movs	r0, #0
 80018da:	f7ff ff21 	bl	8001720 <set_LED1>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_1.uint8, samplesPerPeriod);
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <measureWithExtADC+0x48>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	490d      	ldr	r1, [pc, #52]	; (800191c <measureWithExtADC+0x4c>)
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <measureWithExtADC+0x50>)
 80018ea:	f004 fa71 	bl	8005dd0 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 80018ee:	2100      	movs	r1, #0
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <measureWithExtADC+0x54>)
 80018f2:	f005 f825 	bl	8006940 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 80018f6:	2104      	movs	r1, #4
 80018f8:	480a      	ldr	r0, [pc, #40]	; (8001924 <measureWithExtADC+0x54>)
 80018fa:	f005 f821 	bl	8006940 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 80018fe:	2100      	movs	r1, #0
 8001900:	4809      	ldr	r0, [pc, #36]	; (8001928 <measureWithExtADC+0x58>)
 8001902:	f005 f81d 	bl	8006940 <HAL_TIM_PWM_Start_IT>
	set_LED2(1);
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff ff2e 	bl	8001768 <set_LED2>
	state.extAdcMeasuring = 1;
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <measureWithExtADC+0x5c>)
 800190e:	2201      	movs	r2, #1
 8001910:	719a      	strb	r2, [r3, #6]
}
 8001912:	bf00      	nop
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000
 800191c:	200451c0 	.word	0x200451c0
 8001920:	2002f7b4 	.word	0x2002f7b4
 8001924:	2002f774 	.word	0x2002f774
 8001928:	200041c8 	.word	0x200041c8
 800192c:	2002f4a8 	.word	0x2002f4a8

08001930 <measureWithIntADC>:

void measureWithIntADC() {
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2101      	movs	r1, #1
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff fef1 	bl	8001720 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_1.uint16, samplesPerPeriod);
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <measureWithIntADC+0x34>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4908      	ldr	r1, [pc, #32]	; (8001968 <measureWithIntADC+0x38>)
 8001946:	4809      	ldr	r0, [pc, #36]	; (800196c <measureWithIntADC+0x3c>)
 8001948:	f001 fd4c 	bl	80033e4 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 800194c:	4808      	ldr	r0, [pc, #32]	; (8001970 <measureWithIntADC+0x40>)
 800194e:	f004 ff77 	bl	8006840 <HAL_TIM_Base_Start_IT>
	set_LED3(1);
 8001952:	2001      	movs	r0, #1
 8001954:	f7ff ff1a 	bl	800178c <set_LED3>
	state.intAdcMeasuring = 1;
 8001958:	4b06      	ldr	r3, [pc, #24]	; (8001974 <measureWithIntADC+0x44>)
 800195a:	2201      	movs	r2, #1
 800195c:	71da      	strb	r2, [r3, #7]
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000000 	.word	0x20000000
 8001968:	2002f8d8 	.word	0x2002f8d8
 800196c:	2002f540 	.word	0x2002f540
 8001970:	2002f730 	.word	0x2002f730
 8001974:	2002f4a8 	.word	0x2002f4a8

08001978 <measureWithComp>:

void measureWithComp() {
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2101      	movs	r1, #1
 8001980:	2000      	movs	r0, #0
 8001982:	f7ff fecd 	bl	8001720 <set_LED1>
	// run the timer 4001 - 2 seconds for 2 kHz
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, buffer_comp, 4001);
 8001986:	f640 73a1 	movw	r3, #4001	; 0xfa1
 800198a:	4a06      	ldr	r2, [pc, #24]	; (80019a4 <measureWithComp+0x2c>)
 800198c:	2100      	movs	r1, #0
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <measureWithComp+0x30>)
 8001990:	f005 f926 	bl	8006be0 <HAL_TIM_IC_Start_DMA>
	set_LED4(1);
 8001994:	2001      	movs	r0, #1
 8001996:	f7ff ff0b 	bl	80017b0 <set_LED4>
	state.compMeasuring = 1;
 800199a:	4b04      	ldr	r3, [pc, #16]	; (80019ac <measureWithComp+0x34>)
 800199c:	2201      	movs	r2, #1
 800199e:	721a      	strb	r2, [r3, #8]
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000218 	.word	0x20000218
 80019a8:	2002f818 	.word	0x2002f818
 80019ac:	2002f4a8 	.word	0x2002f4a8

080019b0 <measurementWithExtAdcDone>:

void measurementWithExtAdcDone() {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0

	//stop DMA
	SPI1->CR2 &= ~SPI_CR2_RXDMAEN;
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <measurementWithExtAdcDone+0xac>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a28      	ldr	r2, [pc, #160]	; (8001a5c <measurementWithExtAdcDone+0xac>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	6053      	str	r3, [r2, #4]

	filledBuffersExtADC++;
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <measurementWithExtAdcDone+0xb0>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	3301      	adds	r3, #1
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	4b25      	ldr	r3, [pc, #148]	; (8001a60 <measurementWithExtAdcDone+0xb0>)
 80019ca:	701a      	strb	r2, [r3, #0]
	// turn off timers
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80019cc:	2100      	movs	r1, #0
 80019ce:	4825      	ldr	r0, [pc, #148]	; (8001a64 <measurementWithExtAdcDone+0xb4>)
 80019d0:	f005 f840 	bl	8006a54 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 80019d4:	2104      	movs	r1, #4
 80019d6:	4823      	ldr	r0, [pc, #140]	; (8001a64 <measurementWithExtAdcDone+0xb4>)
 80019d8:	f005 f83c 	bl	8006a54 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 80019dc:	2100      	movs	r1, #0
 80019de:	4822      	ldr	r0, [pc, #136]	; (8001a68 <measurementWithExtAdcDone+0xb8>)
 80019e0:	f005 f838 	bl	8006a54 <HAL_TIM_PWM_Stop_IT>


	//first buffer is filled
	if (filledBuffersExtADC == 1) {
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <measurementWithExtAdcDone+0xb0>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d114      	bne.n	8001a16 <measurementWithExtAdcDone+0x66>
		//start DMA again with second buffer
		HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_2.uint8, samplesPerPeriod);
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <measurementWithExtAdcDone+0xbc>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	461a      	mov	r2, r3
 80019f4:	491e      	ldr	r1, [pc, #120]	; (8001a70 <measurementWithExtAdcDone+0xc0>)
 80019f6:	481f      	ldr	r0, [pc, #124]	; (8001a74 <measurementWithExtAdcDone+0xc4>)
 80019f8:	f004 f9ea 	bl	8005dd0 <HAL_SPI_Receive_DMA>
		// turn on timers
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80019fc:	2100      	movs	r1, #0
 80019fe:	4819      	ldr	r0, [pc, #100]	; (8001a64 <measurementWithExtAdcDone+0xb4>)
 8001a00:	f004 ff9e 	bl	8006940 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8001a04:	2104      	movs	r1, #4
 8001a06:	4817      	ldr	r0, [pc, #92]	; (8001a64 <measurementWithExtAdcDone+0xb4>)
 8001a08:	f004 ff9a 	bl	8006940 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4816      	ldr	r0, [pc, #88]	; (8001a68 <measurementWithExtAdcDone+0xb8>)
 8001a10:	f004 ff96 	bl	8006940 <HAL_TIM_PWM_Start_IT>
			state.extAdcSetState = 0;
		} else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 8001a14:	e01f      	b.n	8001a56 <measurementWithExtAdcDone+0xa6>
	else if (filledBuffersExtADC == 2) {
 8001a16:	4b12      	ldr	r3, [pc, #72]	; (8001a60 <measurementWithExtAdcDone+0xb0>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d11b      	bne.n	8001a56 <measurementWithExtAdcDone+0xa6>
		set_LED2(0);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff fea2 	bl	8001768 <set_LED2>
		state.extAdcReadyToSend = 1;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <measurementWithExtAdcDone+0xc8>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
		state.extAdcMeasuring = 0;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <measurementWithExtAdcDone+0xc8>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	719a      	strb	r2, [r3, #6]
		filledBuffersExtADC = 0;
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <measurementWithExtAdcDone+0xb0>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	701a      	strb	r2, [r3, #0]
		goToIdleAfterMeasurement();
 8001a36:	f000 f899 	bl	8001b6c <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <measurementWithExtAdcDone+0xc8>)
 8001a3c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d106      	bne.n	8001a52 <measurementWithExtAdcDone+0xa2>
			state.extAdcActiveState = 0;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <measurementWithExtAdcDone+0xc8>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	70da      	strb	r2, [r3, #3]
			state.extAdcSetState = 0;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <measurementWithExtAdcDone+0xc8>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	725a      	strb	r2, [r3, #9]
}
 8001a50:	e001      	b.n	8001a56 <measurementWithExtAdcDone+0xa6>
			prepareForPolarizationPhaseIfPossible();
 8001a52:	f000 f8c5 	bl	8001be0 <prepareForPolarizationPhaseIfPossible>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40013000 	.word	0x40013000
 8001a60:	20000200 	.word	0x20000200
 8001a64:	2002f774 	.word	0x2002f774
 8001a68:	200041c8 	.word	0x200041c8
 8001a6c:	20000000 	.word	0x20000000
 8001a70:	20019ba0 	.word	0x20019ba0
 8001a74:	2002f7b4 	.word	0x2002f7b4
 8001a78:	2002f4a8 	.word	0x2002f4a8

08001a7c <measurementWithIntAdcDone>:

void measurementWithIntAdcDone() {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	//stop the ADC when in interrupt
	//if function HAL_ADC_Stop_DMA(&hadc1) would be called, it wouldn't be possible to Start DMA again.
	ADC1->CR2 &= ~ADC_CR2_DMA;
 8001a80:	4b1e      	ldr	r3, [pc, #120]	; (8001afc <measurementWithIntAdcDone+0x80>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <measurementWithIntAdcDone+0x80>)
 8001a86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a8a:	6093      	str	r3, [r2, #8]

	filledBuffersIntADC++;
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <measurementWithIntAdcDone+0x84>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b1a      	ldr	r3, [pc, #104]	; (8001b00 <measurementWithIntAdcDone+0x84>)
 8001a96:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffersIntADC == 1) {
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <measurementWithIntAdcDone+0x84>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <measurementWithIntAdcDone+0x34>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_2.uint16, samplesPerPeriod);
 8001aa0:	4b18      	ldr	r3, [pc, #96]	; (8001b04 <measurementWithIntAdcDone+0x88>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4918      	ldr	r1, [pc, #96]	; (8001b08 <measurementWithIntAdcDone+0x8c>)
 8001aa8:	4818      	ldr	r0, [pc, #96]	; (8001b0c <measurementWithIntAdcDone+0x90>)
 8001aaa:	f001 fc9b 	bl	80033e4 <HAL_ADC_Start_DMA>
		// if there are remaning
		else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 8001aae:	e022      	b.n	8001af6 <measurementWithIntAdcDone+0x7a>
	else if (filledBuffersIntADC == 2) {
 8001ab0:	4b13      	ldr	r3, [pc, #76]	; (8001b00 <measurementWithIntAdcDone+0x84>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d11e      	bne.n	8001af6 <measurementWithIntAdcDone+0x7a>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001ab8:	4815      	ldr	r0, [pc, #84]	; (8001b10 <measurementWithIntAdcDone+0x94>)
 8001aba:	f004 feeb 	bl	8006894 <HAL_TIM_Base_Stop_IT>
		set_LED3(0);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fe64 	bl	800178c <set_LED3>
		filledBuffersIntADC = 0;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <measurementWithIntAdcDone+0x84>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
		state.intAdcReadyToSend = 1;
 8001aca:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <measurementWithIntAdcDone+0x98>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	705a      	strb	r2, [r3, #1]
		state.intAdcMeasuring = 0;
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <measurementWithIntAdcDone+0x98>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	71da      	strb	r2, [r3, #7]
		goToIdleAfterMeasurement();
 8001ad6:	f000 f849 	bl	8001b6c <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 8001ada:	4b0e      	ldr	r3, [pc, #56]	; (8001b14 <measurementWithIntAdcDone+0x98>)
 8001adc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d106      	bne.n	8001af2 <measurementWithIntAdcDone+0x76>
			state.intAdcActiveState = 0;
 8001ae4:	4b0b      	ldr	r3, [pc, #44]	; (8001b14 <measurementWithIntAdcDone+0x98>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	711a      	strb	r2, [r3, #4]
			state.intAdcSetState = 0;
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <measurementWithIntAdcDone+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	729a      	strb	r2, [r3, #10]
}
 8001af0:	e001      	b.n	8001af6 <measurementWithIntAdcDone+0x7a>
			prepareForPolarizationPhaseIfPossible();
 8001af2:	f000 f875 	bl	8001be0 <prepareForPolarizationPhaseIfPossible>
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40012000 	.word	0x40012000
 8001b00:	20000201 	.word	0x20000201
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20004318 	.word	0x20004318
 8001b0c:	2002f540 	.word	0x2002f540
 8001b10:	2002f730 	.word	0x2002f730
 8001b14:	2002f4a8 	.word	0x2002f4a8

08001b18 <measurementWithCompDone>:

void measurementWithCompDone(TIM_HandleTypeDef *htim) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001b20:	2100      	movs	r1, #0
 8001b22:	4810      	ldr	r0, [pc, #64]	; (8001b64 <measurementWithCompDone+0x4c>)
 8001b24:	f005 f958 	bl	8006dd8 <HAL_TIM_IC_Stop_DMA>
	set_LED4(0);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff fe41 	bl	80017b0 <set_LED4>
	state.compReadyToSend = 1;
 8001b2e:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <measurementWithCompDone+0x50>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	709a      	strb	r2, [r3, #2]
	state.compMeasuring = 0;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <measurementWithCompDone+0x50>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	721a      	strb	r2, [r3, #8]

	goToIdleAfterMeasurement();
 8001b3a:	f000 f817 	bl	8001b6c <goToIdleAfterMeasurement>

	//if freq should be measured only once, after the measurement, go to idle state
	if (state.remainingMeasurements == 0) {
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <measurementWithCompDone+0x50>)
 8001b40:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d106      	bne.n	8001b56 <measurementWithCompDone+0x3e>
		state.compActiveState = 0;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <measurementWithCompDone+0x50>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	715a      	strb	r2, [r3, #5]
		state.compSetState = 0;
 8001b4e:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <measurementWithCompDone+0x50>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	72da      	strb	r2, [r3, #11]
	} else {
		prepareForPolarizationPhaseIfPossible();
	}
}
 8001b54:	e001      	b.n	8001b5a <measurementWithCompDone+0x42>
		prepareForPolarizationPhaseIfPossible();
 8001b56:	f000 f843 	bl	8001be0 <prepareForPolarizationPhaseIfPossible>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2002f818 	.word	0x2002f818
 8001b68:	2002f4a8 	.word	0x2002f4a8

08001b6c <goToIdleAfterMeasurement>:

void goToIdleAfterMeasurement() {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	//only if all measurements were done
	if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001b70:	4b1a      	ldr	r3, [pc, #104]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001b72:	799b      	ldrb	r3, [r3, #6]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d12f      	bne.n	8001bd8 <goToIdleAfterMeasurement+0x6c>
 8001b78:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001b7a:	79db      	ldrb	r3, [r3, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d12b      	bne.n	8001bd8 <goToIdleAfterMeasurement+0x6c>
 8001b80:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001b82:	7a1b      	ldrb	r3, [r3, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d127      	bne.n	8001bd8 <goToIdleAfterMeasurement+0x6c>
		switchingCircuitIdle();
 8001b88:	f7ff fe24 	bl	80017d4 <switchingCircuitIdle>
		// -1 indicates infinity measurements
		if (state.remainingMeasurements != -1) {
 8001b8c:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001b8e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b96:	d01f      	beq.n	8001bd8 <goToIdleAfterMeasurement+0x6c>
			state.remainingMeasurements--;
 8001b98:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001b9a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001ba8:	819a      	strh	r2, [r3, #12]
			//if this was the last measurement - set all states to 0
			if (state.remainingMeasurements == 0)
 8001baa:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001bac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d111      	bne.n	8001bd8 <goToIdleAfterMeasurement+0x6c>
			{
				state.extAdcActiveState = 0;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	70da      	strb	r2, [r3, #3]
				state.extAdcSetState = 0;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	725a      	strb	r2, [r3, #9]
				state.intAdcActiveState = 0;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	711a      	strb	r2, [r3, #4]
				state.intAdcSetState = 0;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	729a      	strb	r2, [r3, #10]
				state.compActiveState = 0;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	715a      	strb	r2, [r3, #5]
				state.compSetState = 0;
 8001bd2:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <goToIdleAfterMeasurement+0x70>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	72da      	strb	r2, [r3, #11]
			}
		}
	}
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2002f4a8 	.word	0x2002f4a8

08001be0 <prepareForPolarizationPhaseIfPossible>:

void prepareForPolarizationPhaseIfPossible() {
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
	if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001be6:	799b      	ldrb	r3, [r3, #6]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d10a      	bne.n	8001c02 <prepareForPolarizationPhaseIfPossible+0x22>
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001bee:	79db      	ldrb	r3, [r3, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d106      	bne.n	8001c02 <prepareForPolarizationPhaseIfPossible+0x22>
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001bf6:	7a1b      	ldrb	r3, [r3, #8]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <prepareForPolarizationPhaseIfPossible+0x22>
		state.preparedToRunPolarizationPhase = 1;
 8001bfc:	4b03      	ldr	r3, [pc, #12]	; (8001c0c <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	745a      	strb	r2, [r3, #17]
	}
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	2002f4a8 	.word	0x2002f4a8

08001c10 <initState>:

void initState() {
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
	state.extAdcReadyToSend = 0;
 8001c14:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <initState+0x74>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
	state.intAdcReadyToSend = 0;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <initState+0x74>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	705a      	strb	r2, [r3, #1]
	state.compReadyToSend = 0;
 8001c20:	4b18      	ldr	r3, [pc, #96]	; (8001c84 <initState+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	709a      	strb	r2, [r3, #2]

	state.extAdcActiveState = 0;
 8001c26:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <initState+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	70da      	strb	r2, [r3, #3]
	state.extAdcSetState = 0;
 8001c2c:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <initState+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	725a      	strb	r2, [r3, #9]
	state.intAdcActiveState = 0;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <initState+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	711a      	strb	r2, [r3, #4]

	state.extAdcMeasuring = 0;
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <initState+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	719a      	strb	r2, [r3, #6]
	state.intAdcMeasuring = 0;
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <initState+0x74>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	71da      	strb	r2, [r3, #7]
	state.compMeasuring = 0;
 8001c44:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <initState+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	721a      	strb	r2, [r3, #8]

	state.intAdcSetState = 0;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <initState+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	729a      	strb	r2, [r3, #10]
	state.compActiveState = 0;
 8001c50:	4b0c      	ldr	r3, [pc, #48]	; (8001c84 <initState+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	715a      	strb	r2, [r3, #5]
	state.compSetState = 0;
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <initState+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	72da      	strb	r2, [r3, #11]

	state.setMeasurements = 0;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <initState+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	81da      	strh	r2, [r3, #14]
	state.remainingMeasurements = 0;
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <initState+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	819a      	strh	r2, [r3, #12]
	state.preparedToRunPolarizationPhase = 0;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <initState+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	745a      	strb	r2, [r3, #17]
	state.measureTechniqueUpdated = 0;
 8001c6e:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <initState+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	741a      	strb	r2, [r3, #16]

	state.index = 0;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <initState+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
}
 8001c7a:	bf00      	nop
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	2002f4a8 	.word	0x2002f4a8

08001c88 <HAL_TIM_IC_CaptureCallback>:

//comparator finished measuring
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c98:	d102      	bne.n	8001ca0 <HAL_TIM_IC_CaptureCallback+0x18>
		measurementWithCompDone(htim);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff3c 	bl	8001b18 <measurementWithCompDone>
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	3708      	adds	r7, #8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_ADC_ConvCpltCallback>:

//intADC - buffer filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_ADC_ConvCpltCallback+0x20>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_ADC_ConvCpltCallback+0x16>
		measurementWithIntAdcDone();
 8001cba:	f7ff fedf 	bl	8001a7c <measurementWithIntAdcDone>
	}
}
 8001cbe:	bf00      	nop
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40012000 	.word	0x40012000

08001ccc <HAL_UART_RxCpltCallback>:

//char received with via USB
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_UART_RxCpltCallback+0x20>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d101      	bne.n	8001ce2 <HAL_UART_RxCpltCallback+0x16>
		characterReceived();
 8001cde:	f000 f807 	bl	8001cf0 <characterReceived>
	}
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40004800 	.word	0x40004800

08001cf0 <characterReceived>:

void characterReceived() {
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	490d      	ldr	r1, [pc, #52]	; (8001d2c <characterReceived+0x3c>)
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <characterReceived+0x40>)
 8001cfa:	f006 fd39 	bl	8008770 <HAL_UART_Receive_IT>
	//receivedCharIndex shouldn't exceed 100
	receivedChars[(receivedCharIndex++) % 100] = buffer_uart_rx[0];
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <characterReceived+0x44>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	1c5a      	adds	r2, r3, #1
 8001d04:	b2d1      	uxtb	r1, r2
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <characterReceived+0x44>)
 8001d08:	7011      	strb	r1, [r2, #0]
 8001d0a:	4a0b      	ldr	r2, [pc, #44]	; (8001d38 <characterReceived+0x48>)
 8001d0c:	fba2 1203 	umull	r1, r2, r2, r3
 8001d10:	0952      	lsrs	r2, r2, #5
 8001d12:	2164      	movs	r1, #100	; 0x64
 8001d14:	fb01 f202 	mul.w	r2, r1, r2
 8001d18:	1a9b      	subs	r3, r3, r2
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <characterReceived+0x3c>)
 8001d20:	7819      	ldrb	r1, [r3, #0]
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <characterReceived+0x4c>)
 8001d24:	5499      	strb	r1, [r3, r2]

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20004314 	.word	0x20004314
 8001d30:	20004248 	.word	0x20004248
 8001d34:	2002f770 	.word	0x2002f770
 8001d38:	51eb851f 	.word	0x51eb851f
 8001d3c:	2002f6cc 	.word	0x2002f6cc

08001d40 <HAL_SPI_RxCpltCallback>:

//extADC - buffer filled
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_SPI_RxCpltCallback+0x20>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d101      	bne.n	8001d56 <HAL_SPI_RxCpltCallback+0x16>
		measurementWithExtAdcDone();
 8001d52:	f7ff fe2d 	bl	80019b0 <measurementWithExtAdcDone>
	}
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40013000 	.word	0x40013000

08001d64 <parseText>:

int parseText() {
 8001d64:	b5b0      	push	{r4, r5, r7, lr}
 8001d66:	b0a6      	sub	sp, #152	; 0x98
 8001d68:	af00      	add	r7, sp, #0
	//-------------------------------------------------------------------------------------
	//check if there is two times character * indicating complete command
	//-------------------------------------------------------------------------------------
	uint8_t i, indexOfHead, indexOfTail, tailCount = 0, headCount = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8001d70:	2300      	movs	r3, #0
 8001d72:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	char msg_buffers[80];
	char receivedCommand[50];

	for (i = 0; i < strlen(receivedCommand); i++) {
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d7c:	e00c      	b.n	8001d98 <parseText+0x34>
		receivedCommand[i] = '\0';
 8001d7e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d82:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001d86:	4413      	add	r3, r2
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f803 2c98 	strb.w	r2, [r3, #-152]
	for (i = 0; i < strlen(receivedCommand); i++) {
 8001d8e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d92:	3301      	adds	r3, #1
 8001d94:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d98:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001d9c:	463b      	mov	r3, r7
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fa58 	bl	8000254 <strlen>
 8001da4:	4603      	mov	r3, r0
 8001da6:	429c      	cmp	r4, r3
 8001da8:	d3e9      	bcc.n	8001d7e <parseText+0x1a>
	}
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001daa:	2300      	movs	r3, #0
 8001dac:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001db0:	e00c      	b.n	8001dcc <parseText+0x68>
		msg_buffers[i] = '\0';
 8001db2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001db6:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001dba:	4413      	add	r3, r2
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001dc2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001dcc:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001dd0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fa3d 	bl	8000254 <strlen>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	429c      	cmp	r4, r3
 8001dde:	d3e8      	bcc.n	8001db2 <parseText+0x4e>
	}
	for (i = 0; i < strlen(receivedChars); i++) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001de6:	e023      	b.n	8001e30 <parseText+0xcc>
		//head of the message
		if (receivedChars[i] == '<') {
 8001de8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001dec:	4abc      	ldr	r2, [pc, #752]	; (80020e0 <parseText+0x37c>)
 8001dee:	5cd3      	ldrb	r3, [r2, r3]
 8001df0:	2b3c      	cmp	r3, #60	; 0x3c
 8001df2:	d109      	bne.n	8001e08 <parseText+0xa4>
			indexOfHead = i;
 8001df4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001df8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			headCount++;
 8001dfc:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001e00:	3301      	adds	r3, #1
 8001e02:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8001e06:	e00e      	b.n	8001e26 <parseText+0xc2>
		}
		//tail of the message
		else if (receivedChars[i] == '>') {
 8001e08:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e0c:	4ab4      	ldr	r2, [pc, #720]	; (80020e0 <parseText+0x37c>)
 8001e0e:	5cd3      	ldrb	r3, [r2, r3]
 8001e10:	2b3e      	cmp	r3, #62	; 0x3e
 8001e12:	d108      	bne.n	8001e26 <parseText+0xc2>
			indexOfTail = i;
 8001e14:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e18:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			tailCount++;
 8001e1c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001e20:	3301      	adds	r3, #1
 8001e22:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	for (i = 0; i < strlen(receivedChars); i++) {
 8001e26:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001e30:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001e34:	48aa      	ldr	r0, [pc, #680]	; (80020e0 <parseText+0x37c>)
 8001e36:	f7fe fa0d 	bl	8000254 <strlen>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	429c      	cmp	r4, r3
 8001e3e:	d3d3      	bcc.n	8001de8 <parseText+0x84>
		}
	}
	//received message is not complete
	if (headCount > tailCount) {
 8001e40:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001e44:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d901      	bls.n	8001e50 <parseText+0xec>
		return 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	e1c6      	b.n	80021de <parseText+0x47a>
	}
	// received message is complete ->
	else if (headCount == tailCount && headCount > 0 && tailCount > 0) {
 8001e50:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001e54:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d158      	bne.n	8001f0e <parseText+0x1aa>
 8001e5c:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d054      	beq.n	8001f0e <parseText+0x1aa>
 8001e64:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d050      	beq.n	8001f0e <parseText+0x1aa>
		sprintf(msg_buffers, "<INFO:Message accepted>\n");
 8001e6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e70:	4a9c      	ldr	r2, [pc, #624]	; (80020e4 <parseText+0x380>)
 8001e72:	461c      	mov	r4, r3
 8001e74:	4615      	mov	r5, r2
 8001e76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e7e:	c403      	stmia	r4!, {r0, r1}
 8001e80:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8001e82:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe f9e4 	bl	8000254 <strlen>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
 8001e98:	4893      	ldr	r0, [pc, #588]	; (80020e8 <parseText+0x384>)
 8001e9a:	f006 fbd7 	bl	800864c <HAL_UART_Transmit>
	}

	//-------------------------------------------------------------------------------------
	// get string between special chars (Only if specialCharCount == 2)
	//-------------------------------------------------------------------------------------
	strncpy(receivedCommand, receivedChars + indexOfHead + 1, indexOfTail - indexOfHead - 1);
 8001e9e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	4a8e      	ldr	r2, [pc, #568]	; (80020e0 <parseText+0x37c>)
 8001ea6:	1899      	adds	r1, r3, r2
 8001ea8:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001eac:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f007 fbb7 	bl	800962c <strncpy>
	receivedCommand[indexOfTail - indexOfHead - 1] = '\0';
 8001ebe:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001ec2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001ece:	4413      	add	r3, r2
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f803 2c98 	strb.w	r2, [r3, #-152]

	char *command = strtok(receivedCommand, ":");
 8001ed6:	463b      	mov	r3, r7
 8001ed8:	4984      	ldr	r1, [pc, #528]	; (80020ec <parseText+0x388>)
 8001eda:	4618      	mov	r0, r3
 8001edc:	f007 fbbc 	bl	8009658 <strtok>
 8001ee0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	char *method = strtok(NULL, ":");
 8001ee4:	4981      	ldr	r1, [pc, #516]	; (80020ec <parseText+0x388>)
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f007 fbb6 	bl	8009658 <strtok>
 8001eec:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	char *count = strtok(NULL, ":");
 8001ef0:	497e      	ldr	r1, [pc, #504]	; (80020ec <parseText+0x388>)
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f007 fbb0 	bl	8009658 <strtok>
 8001ef8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	//-------------------------------------------------------------------------------------
	// Perform action based on received message
	//-------------------------------------------------------------------------------------

	//<IDN> - identification
	if (strcmp(command, "IDN") == 0) {
 8001efc:	497c      	ldr	r1, [pc, #496]	; (80020f0 <parseText+0x38c>)
 8001efe:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f02:	f7fe f99d 	bl	8000240 <strcmp>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00c      	beq.n	8001f26 <parseText+0x1c2>
 8001f0c:	e02b      	b.n	8001f66 <parseText+0x202>
	else if ((headCount < tailCount)) {
 8001f0e:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8001f12:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d203      	bcs.n	8001f22 <parseText+0x1be>
		clearReceivedCharsBuffer(); // receivedChars needs to be cleared
 8001f1a:	f000 f971 	bl	8002200 <clearReceivedCharsBuffer>
		return 0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	e15d      	b.n	80021de <parseText+0x47a>
		return 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e15b      	b.n	80021de <parseText+0x47a>
		sprintf(msg_buffers, "<INFO:This is proton precession magnetometer - version 1>\n");
 8001f26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f2a:	4a72      	ldr	r2, [pc, #456]	; (80020f4 <parseText+0x390>)
 8001f2c:	461c      	mov	r4, r3
 8001f2e:	4615      	mov	r5, r2
 8001f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f40:	c403      	stmia	r4!, {r0, r1}
 8001f42:	8022      	strh	r2, [r4, #0]
 8001f44:	3402      	adds	r4, #2
 8001f46:	0c13      	lsrs	r3, r2, #16
 8001f48:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8001f4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7fe f980 	bl	8000254 <strlen>
 8001f54:	4603      	mov	r3, r0
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f60:	4861      	ldr	r0, [pc, #388]	; (80020e8 <parseText+0x384>)
 8001f62:	f006 fb73 	bl	800864c <HAL_UART_Transmit>
	}

	//<INIT> - initialization state
	if (strcmp(command, "INIT") == 0) {
 8001f66:	4964      	ldr	r1, [pc, #400]	; (80020f8 <parseText+0x394>)
 8001f68:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f6c:	f7fe f968 	bl	8000240 <strcmp>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <parseText+0x216>
		initState();
 8001f76:	f7ff fe4b 	bl	8001c10 <initState>
	}
	//<SET:parameter:value>
	if (strcmp(command, "SET") == 0) {
 8001f7a:	4960      	ldr	r1, [pc, #384]	; (80020fc <parseText+0x398>)
 8001f7c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f80:	f7fe f95e 	bl	8000240 <strcmp>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d127      	bne.n	8001fda <parseText+0x276>
		//polarization time
		if (strcmp(method, "polT") == 0) {
 8001f8a:	495d      	ldr	r1, [pc, #372]	; (8002100 <parseText+0x39c>)
 8001f8c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001f90:	f7fe f956 	bl	8000240 <strcmp>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 811f 	bne.w	80021da <parseText+0x476>
			//convert received string to integer
			polarizationTime = atoi(count);
 8001f9c:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001fa0:	f007 faed 	bl	800957e <atoi>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	4b56      	ldr	r3, [pc, #344]	; (8002104 <parseText+0x3a0>)
 8001faa:	601a      	str	r2, [r3, #0]

			//min = 3 seconds
			if (polarizationTime < 3000) {
 8001fac:	4b55      	ldr	r3, [pc, #340]	; (8002104 <parseText+0x3a0>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d804      	bhi.n	8001fc2 <parseText+0x25e>
				polarizationTime = 3000;
 8001fb8:	4b52      	ldr	r3, [pc, #328]	; (8002104 <parseText+0x3a0>)
 8001fba:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e10b      	b.n	80021da <parseText+0x476>
			}
			//max = 60 seconds
			else if (polarizationTime > 60000) {
 8001fc2:	4b50      	ldr	r3, [pc, #320]	; (8002104 <parseText+0x3a0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	f240 8105 	bls.w	80021da <parseText+0x476>
				polarizationTime = 60000;
 8001fd0:	4b4c      	ldr	r3, [pc, #304]	; (8002104 <parseText+0x3a0>)
 8001fd2:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	e0ff      	b.n	80021da <parseText+0x476>
			}
		}
	}
	//<MEAS:method:count>
	else if (strcmp(command, "MEAS") == 0) {
 8001fda:	494b      	ldr	r1, [pc, #300]	; (8002108 <parseText+0x3a4>)
 8001fdc:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001fe0:	f7fe f92e 	bl	8000240 <strcmp>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f040 80f7 	bne.w	80021da <parseText+0x476>
		//external ADC only
		if (strcmp(method, "extADC") == 0) {
 8001fec:	4947      	ldr	r1, [pc, #284]	; (800210c <parseText+0x3a8>)
 8001fee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001ff2:	f7fe f925 	bl	8000240 <strcmp>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10c      	bne.n	8002016 <parseText+0x2b2>
			state.extAdcSetState = 1;
 8001ffc:	4b44      	ldr	r3, [pc, #272]	; (8002110 <parseText+0x3ac>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 8002002:	4b43      	ldr	r3, [pc, #268]	; (8002110 <parseText+0x3ac>)
 8002004:	2200      	movs	r2, #0
 8002006:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8002008:	4b41      	ldr	r3, [pc, #260]	; (8002110 <parseText+0x3ac>)
 800200a:	2200      	movs	r2, #0
 800200c:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 800200e:	4b40      	ldr	r3, [pc, #256]	; (8002110 <parseText+0x3ac>)
 8002010:	2201      	movs	r2, #1
 8002012:	741a      	strb	r2, [r3, #16]
 8002014:	e0c3      	b.n	800219e <parseText+0x43a>
		}
		//internal ADC only
		else if (strcmp(method, "intADC") == 0) {
 8002016:	493f      	ldr	r1, [pc, #252]	; (8002114 <parseText+0x3b0>)
 8002018:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800201c:	f7fe f910 	bl	8000240 <strcmp>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10c      	bne.n	8002040 <parseText+0x2dc>
			state.extAdcSetState = 0;
 8002026:	4b3a      	ldr	r3, [pc, #232]	; (8002110 <parseText+0x3ac>)
 8002028:	2200      	movs	r2, #0
 800202a:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 800202c:	4b38      	ldr	r3, [pc, #224]	; (8002110 <parseText+0x3ac>)
 800202e:	2201      	movs	r2, #1
 8002030:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8002032:	4b37      	ldr	r3, [pc, #220]	; (8002110 <parseText+0x3ac>)
 8002034:	2200      	movs	r2, #0
 8002036:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8002038:	4b35      	ldr	r3, [pc, #212]	; (8002110 <parseText+0x3ac>)
 800203a:	2201      	movs	r2, #1
 800203c:	741a      	strb	r2, [r3, #16]
 800203e:	e0ae      	b.n	800219e <parseText+0x43a>
		}
		//comparator only
		else if (strcmp(method, "comp") == 0) {
 8002040:	4935      	ldr	r1, [pc, #212]	; (8002118 <parseText+0x3b4>)
 8002042:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002046:	f7fe f8fb 	bl	8000240 <strcmp>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10c      	bne.n	800206a <parseText+0x306>
			state.extAdcSetState = 0;
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <parseText+0x3ac>)
 8002052:	2200      	movs	r2, #0
 8002054:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 8002056:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <parseText+0x3ac>)
 8002058:	2200      	movs	r2, #0
 800205a:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <parseText+0x3ac>)
 800205e:	2201      	movs	r2, #1
 8002060:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8002062:	4b2b      	ldr	r3, [pc, #172]	; (8002110 <parseText+0x3ac>)
 8002064:	2201      	movs	r2, #1
 8002066:	741a      	strb	r2, [r3, #16]
 8002068:	e099      	b.n	800219e <parseText+0x43a>
		}
		//external ADC + internal ADC
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 800206a:	492c      	ldr	r1, [pc, #176]	; (800211c <parseText+0x3b8>)
 800206c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002070:	f7fe f8e6 	bl	8000240 <strcmp>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d007      	beq.n	800208a <parseText+0x326>
 800207a:	4929      	ldr	r1, [pc, #164]	; (8002120 <parseText+0x3bc>)
 800207c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002080:	f7fe f8de 	bl	8000240 <strcmp>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10c      	bne.n	80020a4 <parseText+0x340>
			state.extAdcSetState = 1;
 800208a:	4b21      	ldr	r3, [pc, #132]	; (8002110 <parseText+0x3ac>)
 800208c:	2201      	movs	r2, #1
 800208e:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8002090:	4b1f      	ldr	r3, [pc, #124]	; (8002110 <parseText+0x3ac>)
 8002092:	2201      	movs	r2, #1
 8002094:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <parseText+0x3ac>)
 8002098:	2200      	movs	r2, #0
 800209a:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 800209c:	4b1c      	ldr	r3, [pc, #112]	; (8002110 <parseText+0x3ac>)
 800209e:	2201      	movs	r2, #1
 80020a0:	741a      	strb	r2, [r3, #16]
 80020a2:	e07c      	b.n	800219e <parseText+0x43a>
		}
		//external ADC + comparator
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 80020a4:	491f      	ldr	r1, [pc, #124]	; (8002124 <parseText+0x3c0>)
 80020a6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80020aa:	f7fe f8c9 	bl	8000240 <strcmp>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <parseText+0x360>
 80020b4:	491c      	ldr	r1, [pc, #112]	; (8002128 <parseText+0x3c4>)
 80020b6:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80020ba:	f7fe f8c1 	bl	8000240 <strcmp>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d133      	bne.n	800212c <parseText+0x3c8>
			state.extAdcSetState = 1;
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <parseText+0x3ac>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <parseText+0x3ac>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <parseText+0x3ac>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <parseText+0x3ac>)
 80020d8:	2201      	movs	r2, #1
 80020da:	741a      	strb	r2, [r3, #16]
 80020dc:	e05f      	b.n	800219e <parseText+0x43a>
 80020de:	bf00      	nop
 80020e0:	2002f6cc 	.word	0x2002f6cc
 80020e4:	0800a060 	.word	0x0800a060
 80020e8:	20004248 	.word	0x20004248
 80020ec:	0800a07c 	.word	0x0800a07c
 80020f0:	0800a080 	.word	0x0800a080
 80020f4:	0800a084 	.word	0x0800a084
 80020f8:	0800a0c0 	.word	0x0800a0c0
 80020fc:	0800a0c8 	.word	0x0800a0c8
 8002100:	0800a0cc 	.word	0x0800a0cc
 8002104:	20000004 	.word	0x20000004
 8002108:	0800a0d4 	.word	0x0800a0d4
 800210c:	0800a0dc 	.word	0x0800a0dc
 8002110:	2002f4a8 	.word	0x2002f4a8
 8002114:	0800a0e4 	.word	0x0800a0e4
 8002118:	0800a0ec 	.word	0x0800a0ec
 800211c:	0800a0f4 	.word	0x0800a0f4
 8002120:	0800a104 	.word	0x0800a104
 8002124:	0800a114 	.word	0x0800a114
 8002128:	0800a120 	.word	0x0800a120
		}
		//internal ADC + comparator
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 800212c:	492e      	ldr	r1, [pc, #184]	; (80021e8 <parseText+0x484>)
 800212e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002132:	f7fe f885 	bl	8000240 <strcmp>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <parseText+0x3e8>
 800213c:	492b      	ldr	r1, [pc, #172]	; (80021ec <parseText+0x488>)
 800213e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002142:	f7fe f87d 	bl	8000240 <strcmp>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10c      	bne.n	8002166 <parseText+0x402>
			state.extAdcSetState = 0;
 800214c:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <parseText+0x48c>)
 800214e:	2200      	movs	r2, #0
 8002150:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8002152:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <parseText+0x48c>)
 8002154:	2201      	movs	r2, #1
 8002156:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <parseText+0x48c>)
 800215a:	2201      	movs	r2, #1
 800215c:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <parseText+0x48c>)
 8002160:	2201      	movs	r2, #1
 8002162:	741a      	strb	r2, [r3, #16]
 8002164:	e01b      	b.n	800219e <parseText+0x43a>
		}
		//external ADC + internal ADC + comparator
		else if ((strcmp(method, "extADC+intADC+comp") == 0) || (strcmp(method, "intADC+extADC+comp") == 0)) {
 8002166:	4923      	ldr	r1, [pc, #140]	; (80021f4 <parseText+0x490>)
 8002168:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800216c:	f7fe f868 	bl	8000240 <strcmp>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d007      	beq.n	8002186 <parseText+0x422>
 8002176:	4920      	ldr	r1, [pc, #128]	; (80021f8 <parseText+0x494>)
 8002178:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800217c:	f7fe f860 	bl	8000240 <strcmp>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10b      	bne.n	800219e <parseText+0x43a>
			state.compSetState = 1;
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <parseText+0x48c>)
 8002188:	2201      	movs	r2, #1
 800218a:	72da      	strb	r2, [r3, #11]
			state.extAdcSetState = 1;
 800218c:	4b18      	ldr	r3, [pc, #96]	; (80021f0 <parseText+0x48c>)
 800218e:	2201      	movs	r2, #1
 8002190:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <parseText+0x48c>)
 8002194:	2201      	movs	r2, #1
 8002196:	729a      	strb	r2, [r3, #10]
			state.measureTechniqueUpdated = 1;
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <parseText+0x48c>)
 800219a:	2201      	movs	r2, #1
 800219c:	741a      	strb	r2, [r3, #16]
		} else /* default: */
		{

		}
		if (strcmp(count, "INF") == 0) {
 800219e:	4917      	ldr	r1, [pc, #92]	; (80021fc <parseText+0x498>)
 80021a0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80021a4:	f7fe f84c 	bl	8000240 <strcmp>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d104      	bne.n	80021b8 <parseText+0x454>
			state.setMeasurements = -1;
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <parseText+0x48c>)
 80021b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b4:	81da      	strh	r2, [r3, #14]
 80021b6:	e010      	b.n	80021da <parseText+0x476>
		} else if (strcmp(count, "") == 0) {
 80021b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d103      	bne.n	80021ca <parseText+0x466>
			state.setMeasurements = 1;
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <parseText+0x48c>)
 80021c4:	2201      	movs	r2, #1
 80021c6:	81da      	strh	r2, [r3, #14]
 80021c8:	e007      	b.n	80021da <parseText+0x476>
		} else {
			state.setMeasurements = atoi(count);
 80021ca:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80021ce:	f007 f9d6 	bl	800957e <atoi>
 80021d2:	4603      	mov	r3, r0
 80021d4:	b21a      	sxth	r2, r3
 80021d6:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <parseText+0x48c>)
 80021d8:	81da      	strh	r2, [r3, #14]
	}
	/* more else if clauses */
	else /* default: */
	{
	}
	clearReceivedCharsBuffer();
 80021da:	f000 f811 	bl	8002200 <clearReceivedCharsBuffer>
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3798      	adds	r7, #152	; 0x98
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bdb0      	pop	{r4, r5, r7, pc}
 80021e6:	bf00      	nop
 80021e8:	0800a12c 	.word	0x0800a12c
 80021ec:	0800a138 	.word	0x0800a138
 80021f0:	2002f4a8 	.word	0x2002f4a8
 80021f4:	0800a144 	.word	0x0800a144
 80021f8:	0800a158 	.word	0x0800a158
 80021fc:	0800a16c 	.word	0x0800a16c

08002200 <clearReceivedCharsBuffer>:

void clearReceivedCharsBuffer() {
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
	int i = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
	//keep everything in range
	if (receivedCharIndex > 50) {
 800220a:	4b10      	ldr	r3, [pc, #64]	; (800224c <clearReceivedCharsBuffer+0x4c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b32      	cmp	r3, #50	; 0x32
 8002210:	d902      	bls.n	8002218 <clearReceivedCharsBuffer+0x18>
		receivedCharIndex = 50;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <clearReceivedCharsBuffer+0x4c>)
 8002214:	2232      	movs	r2, #50	; 0x32
 8002216:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < receivedCharIndex; i++) {
 8002218:	2300      	movs	r3, #0
 800221a:	607b      	str	r3, [r7, #4]
 800221c:	e007      	b.n	800222e <clearReceivedCharsBuffer+0x2e>
		receivedChars[i] = '\0';
 800221e:	4a0c      	ldr	r2, [pc, #48]	; (8002250 <clearReceivedCharsBuffer+0x50>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	2200      	movs	r2, #0
 8002226:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < receivedCharIndex; i++) {
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3301      	adds	r3, #1
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	4b07      	ldr	r3, [pc, #28]	; (800224c <clearReceivedCharsBuffer+0x4c>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4293      	cmp	r3, r2
 8002238:	dbf1      	blt.n	800221e <clearReceivedCharsBuffer+0x1e>
	}
	receivedCharIndex = 0;
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <clearReceivedCharsBuffer+0x4c>)
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	2002f770 	.word	0x2002f770
 8002250:	2002f6cc 	.word	0x2002f6cc

08002254 <sendMeasuredData>:

void sendMeasuredData() {
 8002254:	b580      	push	{r7, lr}
 8002256:	b094      	sub	sp, #80	; 0x50
 8002258:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[50];
	uint16_t adc = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int i = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	64fb      	str	r3, [r7, #76]	; 0x4c
	if ((state.extAdcReadyToSend == 1)) {
 8002264:	4bad      	ldr	r3, [pc, #692]	; (800251c <sendMeasuredData+0x2c8>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d176      	bne.n	800235a <sendMeasuredData+0x106>
		set_LED1(0, 0, 1);
 800226c:	2201      	movs	r2, #1
 800226e:	2100      	movs	r1, #0
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff fa55 	bl	8001720 <set_LED1>
		sprintf(msg_buffers, "<MEAS:%u:extADC:\n", state.index);
 8002276:	4ba9      	ldr	r3, [pc, #676]	; (800251c <sendMeasuredData+0x2c8>)
 8002278:	695a      	ldr	r2, [r3, #20]
 800227a:	463b      	mov	r3, r7
 800227c:	49a8      	ldr	r1, [pc, #672]	; (8002520 <sendMeasuredData+0x2cc>)
 800227e:	4618      	mov	r0, r3
 8002280:	f007 f9b4 	bl	80095ec <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002284:	463b      	mov	r3, r7
 8002286:	4618      	mov	r0, r3
 8002288:	f7fd ffe4 	bl	8000254 <strlen>
 800228c:	4603      	mov	r3, r0
 800228e:	b29a      	uxth	r2, r3
 8002290:	4639      	mov	r1, r7
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
 8002296:	48a3      	ldr	r0, [pc, #652]	; (8002524 <sendMeasuredData+0x2d0>)
 8002298:	f006 f9d8 	bl	800864c <HAL_UART_Transmit>

		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 800229c:	2300      	movs	r3, #0
 800229e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022a0:	e01b      	b.n	80022da <sendMeasuredData+0x86>
			adc = (buffer_extAdc_1.uint16[i]);
 80022a2:	4aa1      	ldr	r2, [pc, #644]	; (8002528 <sendMeasuredData+0x2d4>)
 80022a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022aa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 80022ae:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80022b2:	463b      	mov	r3, r7
 80022b4:	499d      	ldr	r1, [pc, #628]	; (800252c <sendMeasuredData+0x2d8>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f007 f998 	bl	80095ec <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80022bc:	463b      	mov	r3, r7
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fd ffc8 	bl	8000254 <strlen>
 80022c4:	4603      	mov	r3, r0
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	4639      	mov	r1, r7
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	4895      	ldr	r0, [pc, #596]	; (8002524 <sendMeasuredData+0x2d0>)
 80022d0:	f006 f9bc 	bl	800864c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 80022d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d6:	3301      	adds	r3, #1
 80022d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022dc:	4b94      	ldr	r3, [pc, #592]	; (8002530 <sendMeasuredData+0x2dc>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d3de      	bcc.n	80022a2 <sendMeasuredData+0x4e>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022e8:	e01b      	b.n	8002322 <sendMeasuredData+0xce>
			adc = (buffer_extAdc_2.uint16[i]);
 80022ea:	4a92      	ldr	r2, [pc, #584]	; (8002534 <sendMeasuredData+0x2e0>)
 80022ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022f2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 80022f6:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80022fa:	463b      	mov	r3, r7
 80022fc:	498b      	ldr	r1, [pc, #556]	; (800252c <sendMeasuredData+0x2d8>)
 80022fe:	4618      	mov	r0, r3
 8002300:	f007 f974 	bl	80095ec <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002304:	463b      	mov	r3, r7
 8002306:	4618      	mov	r0, r3
 8002308:	f7fd ffa4 	bl	8000254 <strlen>
 800230c:	4603      	mov	r3, r0
 800230e:	b29a      	uxth	r2, r3
 8002310:	4639      	mov	r1, r7
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	4883      	ldr	r0, [pc, #524]	; (8002524 <sendMeasuredData+0x2d0>)
 8002318:	f006 f998 	bl	800864c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 800231c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800231e:	3301      	adds	r3, #1
 8002320:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002322:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002324:	4b82      	ldr	r3, [pc, #520]	; (8002530 <sendMeasuredData+0x2dc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d3de      	bcc.n	80022ea <sendMeasuredData+0x96>
		}
		sprintf(msg_buffers, ">\n");
 800232c:	463b      	mov	r3, r7
 800232e:	4a82      	ldr	r2, [pc, #520]	; (8002538 <sendMeasuredData+0x2e4>)
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	4611      	mov	r1, r2
 8002334:	8019      	strh	r1, [r3, #0]
 8002336:	3302      	adds	r3, #2
 8002338:	0c12      	lsrs	r2, r2, #16
 800233a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800233c:	463b      	mov	r3, r7
 800233e:	4618      	mov	r0, r3
 8002340:	f7fd ff88 	bl	8000254 <strlen>
 8002344:	4603      	mov	r3, r0
 8002346:	b29a      	uxth	r2, r3
 8002348:	4639      	mov	r1, r7
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	4875      	ldr	r0, [pc, #468]	; (8002524 <sendMeasuredData+0x2d0>)
 8002350:	f006 f97c 	bl	800864c <HAL_UART_Transmit>
		state.extAdcReadyToSend = 0;
 8002354:	4b71      	ldr	r3, [pc, #452]	; (800251c <sendMeasuredData+0x2c8>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
	}

	if ((state.intAdcReadyToSend == 1)) {
 800235a:	4b70      	ldr	r3, [pc, #448]	; (800251c <sendMeasuredData+0x2c8>)
 800235c:	785b      	ldrb	r3, [r3, #1]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d176      	bne.n	8002450 <sendMeasuredData+0x1fc>
		set_LED1(0, 0, 1);
 8002362:	2201      	movs	r2, #1
 8002364:	2100      	movs	r1, #0
 8002366:	2000      	movs	r0, #0
 8002368:	f7ff f9da 	bl	8001720 <set_LED1>
		sprintf(msg_buffers, "<MEAS:%u:intADC:\n", state.index);
 800236c:	4b6b      	ldr	r3, [pc, #428]	; (800251c <sendMeasuredData+0x2c8>)
 800236e:	695a      	ldr	r2, [r3, #20]
 8002370:	463b      	mov	r3, r7
 8002372:	4972      	ldr	r1, [pc, #456]	; (800253c <sendMeasuredData+0x2e8>)
 8002374:	4618      	mov	r0, r3
 8002376:	f007 f939 	bl	80095ec <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800237a:	463b      	mov	r3, r7
 800237c:	4618      	mov	r0, r3
 800237e:	f7fd ff69 	bl	8000254 <strlen>
 8002382:	4603      	mov	r3, r0
 8002384:	b29a      	uxth	r2, r3
 8002386:	4639      	mov	r1, r7
 8002388:	f04f 33ff 	mov.w	r3, #4294967295
 800238c:	4865      	ldr	r0, [pc, #404]	; (8002524 <sendMeasuredData+0x2d0>)
 800238e:	f006 f95d 	bl	800864c <HAL_UART_Transmit>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8002392:	2300      	movs	r3, #0
 8002394:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002396:	e01b      	b.n	80023d0 <sendMeasuredData+0x17c>
			adc = (buffer_intAdc_1.uint16[i]);
 8002398:	4a69      	ldr	r2, [pc, #420]	; (8002540 <sendMeasuredData+0x2ec>)
 800239a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800239c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 80023a4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80023a8:	463b      	mov	r3, r7
 80023aa:	4960      	ldr	r1, [pc, #384]	; (800252c <sendMeasuredData+0x2d8>)
 80023ac:	4618      	mov	r0, r3
 80023ae:	f007 f91d 	bl	80095ec <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80023b2:	463b      	mov	r3, r7
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fd ff4d 	bl	8000254 <strlen>
 80023ba:	4603      	mov	r3, r0
 80023bc:	b29a      	uxth	r2, r3
 80023be:	4639      	mov	r1, r7
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
 80023c4:	4857      	ldr	r0, [pc, #348]	; (8002524 <sendMeasuredData+0x2d0>)
 80023c6:	f006 f941 	bl	800864c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 80023ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023cc:	3301      	adds	r3, #1
 80023ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80023d2:	4b57      	ldr	r3, [pc, #348]	; (8002530 <sendMeasuredData+0x2dc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d3de      	bcc.n	8002398 <sendMeasuredData+0x144>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80023da:	2300      	movs	r3, #0
 80023dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023de:	e01b      	b.n	8002418 <sendMeasuredData+0x1c4>
			adc = (buffer_intAdc_2.uint16[i]);
 80023e0:	4a58      	ldr	r2, [pc, #352]	; (8002544 <sendMeasuredData+0x2f0>)
 80023e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80023e8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 80023ec:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80023f0:	463b      	mov	r3, r7
 80023f2:	494e      	ldr	r1, [pc, #312]	; (800252c <sendMeasuredData+0x2d8>)
 80023f4:	4618      	mov	r0, r3
 80023f6:	f007 f8f9 	bl	80095ec <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80023fa:	463b      	mov	r3, r7
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fd ff29 	bl	8000254 <strlen>
 8002402:	4603      	mov	r3, r0
 8002404:	b29a      	uxth	r2, r3
 8002406:	4639      	mov	r1, r7
 8002408:	f04f 33ff 	mov.w	r3, #4294967295
 800240c:	4845      	ldr	r0, [pc, #276]	; (8002524 <sendMeasuredData+0x2d0>)
 800240e:	f006 f91d 	bl	800864c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8002412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002414:	3301      	adds	r3, #1
 8002416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002418:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800241a:	4b45      	ldr	r3, [pc, #276]	; (8002530 <sendMeasuredData+0x2dc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	429a      	cmp	r2, r3
 8002420:	d3de      	bcc.n	80023e0 <sendMeasuredData+0x18c>
		}
		sprintf(msg_buffers, ">\n");
 8002422:	463b      	mov	r3, r7
 8002424:	4a44      	ldr	r2, [pc, #272]	; (8002538 <sendMeasuredData+0x2e4>)
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	4611      	mov	r1, r2
 800242a:	8019      	strh	r1, [r3, #0]
 800242c:	3302      	adds	r3, #2
 800242e:	0c12      	lsrs	r2, r2, #16
 8002430:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002432:	463b      	mov	r3, r7
 8002434:	4618      	mov	r0, r3
 8002436:	f7fd ff0d 	bl	8000254 <strlen>
 800243a:	4603      	mov	r3, r0
 800243c:	b29a      	uxth	r2, r3
 800243e:	4639      	mov	r1, r7
 8002440:	f04f 33ff 	mov.w	r3, #4294967295
 8002444:	4837      	ldr	r0, [pc, #220]	; (8002524 <sendMeasuredData+0x2d0>)
 8002446:	f006 f901 	bl	800864c <HAL_UART_Transmit>
		state.intAdcReadyToSend = 0;
 800244a:	4b34      	ldr	r3, [pc, #208]	; (800251c <sendMeasuredData+0x2c8>)
 800244c:	2200      	movs	r2, #0
 800244e:	705a      	strb	r2, [r3, #1]
	}

	if ((state.compReadyToSend == 1)) {
 8002450:	4b32      	ldr	r3, [pc, #200]	; (800251c <sendMeasuredData+0x2c8>)
 8002452:	789b      	ldrb	r3, [r3, #2]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d15d      	bne.n	8002514 <sendMeasuredData+0x2c0>
		set_LED1(0, 0, 1);
 8002458:	2201      	movs	r2, #1
 800245a:	2100      	movs	r1, #0
 800245c:	2000      	movs	r0, #0
 800245e:	f7ff f95f 	bl	8001720 <set_LED1>
		//send frequency
		sprintf(msg_buffers, "<MEAS:%u:comp:\n", state.index);
 8002462:	4b2e      	ldr	r3, [pc, #184]	; (800251c <sendMeasuredData+0x2c8>)
 8002464:	695a      	ldr	r2, [r3, #20]
 8002466:	463b      	mov	r3, r7
 8002468:	4937      	ldr	r1, [pc, #220]	; (8002548 <sendMeasuredData+0x2f4>)
 800246a:	4618      	mov	r0, r3
 800246c:	f007 f8be 	bl	80095ec <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002470:	463b      	mov	r3, r7
 8002472:	4618      	mov	r0, r3
 8002474:	f7fd feee 	bl	8000254 <strlen>
 8002478:	4603      	mov	r3, r0
 800247a:	b29a      	uxth	r2, r3
 800247c:	4639      	mov	r1, r7
 800247e:	f04f 33ff 	mov.w	r3, #4294967295
 8002482:	4828      	ldr	r0, [pc, #160]	; (8002524 <sendMeasuredData+0x2d0>)
 8002484:	f006 f8e2 	bl	800864c <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 8002488:	2300      	movs	r3, #0
 800248a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800248c:	e022      	b.n	80024d4 <sendMeasuredData+0x280>
			uint32_t freq = buffer_comp[i + 1] - buffer_comp[i];
 800248e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002490:	3301      	adds	r3, #1
 8002492:	4a2e      	ldr	r2, [pc, #184]	; (800254c <sendMeasuredData+0x2f8>)
 8002494:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002498:	492c      	ldr	r1, [pc, #176]	; (800254c <sendMeasuredData+0x2f8>)
 800249a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	647b      	str	r3, [r7, #68]	; 0x44
			sprintf(msg_freq, "%d\n", freq);
 80024a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024aa:	4929      	ldr	r1, [pc, #164]	; (8002550 <sendMeasuredData+0x2fc>)
 80024ac:	4618      	mov	r0, r3
 80024ae:	f007 f89d 	bl	80095ec <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq), HAL_MAX_DELAY);
 80024b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fd fecc 	bl	8000254 <strlen>
 80024bc:	4603      	mov	r3, r0
 80024be:	b29a      	uxth	r2, r3
 80024c0:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80024c4:	f04f 33ff 	mov.w	r3, #4294967295
 80024c8:	4816      	ldr	r0, [pc, #88]	; (8002524 <sendMeasuredData+0x2d0>)
 80024ca:	f006 f8bf 	bl	800864c <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 80024ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d0:	3301      	adds	r3, #1
 80024d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80024da:	dbd8      	blt.n	800248e <sendMeasuredData+0x23a>
		}
		sprintf(msg_buffers, ">\n");
 80024dc:	463b      	mov	r3, r7
 80024de:	4a16      	ldr	r2, [pc, #88]	; (8002538 <sendMeasuredData+0x2e4>)
 80024e0:	6812      	ldr	r2, [r2, #0]
 80024e2:	4611      	mov	r1, r2
 80024e4:	8019      	strh	r1, [r3, #0]
 80024e6:	3302      	adds	r3, #2
 80024e8:	0c12      	lsrs	r2, r2, #16
 80024ea:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80024ec:	463b      	mov	r3, r7
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fd feb0 	bl	8000254 <strlen>
 80024f4:	4603      	mov	r3, r0
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	4639      	mov	r1, r7
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295
 80024fe:	4809      	ldr	r0, [pc, #36]	; (8002524 <sendMeasuredData+0x2d0>)
 8002500:	f006 f8a4 	bl	800864c <HAL_UART_Transmit>
		set_LED1(0, 0, 0);
 8002504:	2200      	movs	r2, #0
 8002506:	2100      	movs	r1, #0
 8002508:	2000      	movs	r0, #0
 800250a:	f7ff f909 	bl	8001720 <set_LED1>
		state.compReadyToSend = 0;
 800250e:	4b03      	ldr	r3, [pc, #12]	; (800251c <sendMeasuredData+0x2c8>)
 8002510:	2200      	movs	r2, #0
 8002512:	709a      	strb	r2, [r3, #2]
	}
}
 8002514:	bf00      	nop
 8002516:	3750      	adds	r7, #80	; 0x50
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	2002f4a8 	.word	0x2002f4a8
 8002520:	0800a170 	.word	0x0800a170
 8002524:	20004248 	.word	0x20004248
 8002528:	200451c0 	.word	0x200451c0
 800252c:	0800a184 	.word	0x0800a184
 8002530:	20000000 	.word	0x20000000
 8002534:	20019ba0 	.word	0x20019ba0
 8002538:	0800a18c 	.word	0x0800a18c
 800253c:	0800a190 	.word	0x0800a190
 8002540:	2002f8d8 	.word	0x2002f8d8
 8002544:	20004318 	.word	0x20004318
 8002548:	0800a1a4 	.word	0x0800a1a4
 800254c:	20000218 	.word	0x20000218
 8002550:	0800a1b4 	.word	0x0800a1b4

08002554 <updateState>:

void updateState() {
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
	state.remainingMeasurements = state.setMeasurements;
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <updateState+0x3c>)
 800255a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <updateState+0x3c>)
 8002560:	819a      	strh	r2, [r3, #12]
	state.extAdcActiveState = state.extAdcSetState;
 8002562:	4b0b      	ldr	r3, [pc, #44]	; (8002590 <updateState+0x3c>)
 8002564:	7a5a      	ldrb	r2, [r3, #9]
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <updateState+0x3c>)
 8002568:	70da      	strb	r2, [r3, #3]
	state.intAdcActiveState = state.intAdcSetState;
 800256a:	4b09      	ldr	r3, [pc, #36]	; (8002590 <updateState+0x3c>)
 800256c:	7a9a      	ldrb	r2, [r3, #10]
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <updateState+0x3c>)
 8002570:	711a      	strb	r2, [r3, #4]
	state.compActiveState = state.compSetState;
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <updateState+0x3c>)
 8002574:	7ada      	ldrb	r2, [r3, #11]
 8002576:	4b06      	ldr	r3, [pc, #24]	; (8002590 <updateState+0x3c>)
 8002578:	715a      	strb	r2, [r3, #5]
	state.preparedToRunPolarizationPhase = 1;
 800257a:	4b05      	ldr	r3, [pc, #20]	; (8002590 <updateState+0x3c>)
 800257c:	2201      	movs	r2, #1
 800257e:	745a      	strb	r2, [r3, #17]
	state.measureTechniqueUpdated = 0;
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <updateState+0x3c>)
 8002582:	2200      	movs	r2, #0
 8002584:	741a      	strb	r2, [r3, #16]
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	2002f4a8 	.word	0x2002f4a8

08002594 <stateCanBeUpdated>:

int stateCanBeUpdated() {
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
	return (state.measureTechniqueUpdated && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 8002598:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <stateCanBeUpdated+0x4c>)
 800259a:	7c1b      	ldrb	r3, [r3, #16]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d019      	beq.n	80025d4 <stateCanBeUpdated+0x40>
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <stateCanBeUpdated+0x4c>)
 80025a2:	799b      	ldrb	r3, [r3, #6]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d115      	bne.n	80025d4 <stateCanBeUpdated+0x40>
 80025a8:	4b0d      	ldr	r3, [pc, #52]	; (80025e0 <stateCanBeUpdated+0x4c>)
 80025aa:	79db      	ldrb	r3, [r3, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d111      	bne.n	80025d4 <stateCanBeUpdated+0x40>
 80025b0:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <stateCanBeUpdated+0x4c>)
 80025b2:	7a1b      	ldrb	r3, [r3, #8]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10d      	bne.n	80025d4 <stateCanBeUpdated+0x40>
 80025b8:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <stateCanBeUpdated+0x4c>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <stateCanBeUpdated+0x40>
 80025c0:	4b07      	ldr	r3, [pc, #28]	; (80025e0 <stateCanBeUpdated+0x4c>)
 80025c2:	785b      	ldrb	r3, [r3, #1]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d105      	bne.n	80025d4 <stateCanBeUpdated+0x40>
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <stateCanBeUpdated+0x4c>)
 80025ca:	789b      	ldrb	r3, [r3, #2]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <stateCanBeUpdated+0x40>
 80025d0:	2301      	movs	r3, #1
 80025d2:	e000      	b.n	80025d6 <stateCanBeUpdated+0x42>
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	2002f4a8 	.word	0x2002f4a8

080025e4 <measurementCanRun>:

int measurementCanRun() {
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
	return (state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <measurementCanRun+0x4c>)
 80025ea:	7c5b      	ldrb	r3, [r3, #17]
			&& !state.compReadyToSend);
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d019      	beq.n	8002624 <measurementCanRun+0x40>
	return (state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <measurementCanRun+0x4c>)
 80025f2:	799b      	ldrb	r3, [r3, #6]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d115      	bne.n	8002624 <measurementCanRun+0x40>
 80025f8:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <measurementCanRun+0x4c>)
 80025fa:	79db      	ldrb	r3, [r3, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d111      	bne.n	8002624 <measurementCanRun+0x40>
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <measurementCanRun+0x4c>)
 8002602:	7a1b      	ldrb	r3, [r3, #8]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10d      	bne.n	8002624 <measurementCanRun+0x40>
 8002608:	4b09      	ldr	r3, [pc, #36]	; (8002630 <measurementCanRun+0x4c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d109      	bne.n	8002624 <measurementCanRun+0x40>
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <measurementCanRun+0x4c>)
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d105      	bne.n	8002624 <measurementCanRun+0x40>
			&& !state.compReadyToSend);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <measurementCanRun+0x4c>)
 800261a:	789b      	ldrb	r3, [r3, #2]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <measurementCanRun+0x40>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <measurementCanRun+0x42>
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	2002f4a8 	.word	0x2002f4a8

08002634 <stateIsIdle>:

int stateIsIdle() {
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
	return (!state.extAdcActiveState && !state.intAdcActiveState && !state.compActiveState && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 8002638:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <stateIsIdle+0x44>)
 800263a:	78db      	ldrb	r3, [r3, #3]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d115      	bne.n	800266c <stateIsIdle+0x38>
 8002640:	4b0d      	ldr	r3, [pc, #52]	; (8002678 <stateIsIdle+0x44>)
 8002642:	791b      	ldrb	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d111      	bne.n	800266c <stateIsIdle+0x38>
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <stateIsIdle+0x44>)
 800264a:	795b      	ldrb	r3, [r3, #5]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10d      	bne.n	800266c <stateIsIdle+0x38>
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <stateIsIdle+0x44>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d109      	bne.n	800266c <stateIsIdle+0x38>
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <stateIsIdle+0x44>)
 800265a:	785b      	ldrb	r3, [r3, #1]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d105      	bne.n	800266c <stateIsIdle+0x38>
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <stateIsIdle+0x44>)
 8002662:	789b      	ldrb	r3, [r3, #2]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <stateIsIdle+0x38>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <stateIsIdle+0x3a>
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	2002f4a8 	.word	0x2002f4a8

0800267c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <HAL_MspInit+0x44>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <HAL_MspInit+0x44>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <HAL_MspInit+0x44>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_MspInit+0x44>)
 80026ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_MspInit+0x44>)
 80026b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026b4:	6453      	str	r3, [r2, #68]	; 0x44
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_MspInit+0x44>)
 80026b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40023800 	.word	0x40023800

080026d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2c      	ldr	r2, [pc, #176]	; (80027a4 <HAL_ADC_MspInit+0xd0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d152      	bne.n	800279c <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026f6:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_ADC_MspInit+0xd4>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fa:	4a2b      	ldr	r2, [pc, #172]	; (80027a8 <HAL_ADC_MspInit+0xd4>)
 80026fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002700:	6453      	str	r3, [r2, #68]	; 0x44
 8002702:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <HAL_ADC_MspInit+0xd4>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270e:	4b26      	ldr	r3, [pc, #152]	; (80027a8 <HAL_ADC_MspInit+0xd4>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002712:	4a25      	ldr	r2, [pc, #148]	; (80027a8 <HAL_ADC_MspInit+0xd4>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6313      	str	r3, [r2, #48]	; 0x30
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_ADC_MspInit+0xd4>)
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 8002726:	2301      	movs	r3, #1
 8002728:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800272a:	2303      	movs	r3, #3
 800272c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 0314 	add.w	r3, r7, #20
 8002736:	4619      	mov	r1, r3
 8002738:	481c      	ldr	r0, [pc, #112]	; (80027ac <HAL_ADC_MspInit+0xd8>)
 800273a:	f001 fec5 	bl	80044c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800273e:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 8002740:	4a1c      	ldr	r2, [pc, #112]	; (80027b4 <HAL_ADC_MspInit+0xe0>)
 8002742:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 8002746:	2200      	movs	r2, #0
 8002748:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 800274c:	2200      	movs	r2, #0
 800274e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 8002752:	2200      	movs	r2, #0
 8002754:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 8002758:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800275c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800275e:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 8002760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002764:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 8002768:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800276c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 8002770:	2200      	movs	r2, #0
 8002772:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 8002776:	2200      	movs	r2, #0
 8002778:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 800277c:	2200      	movs	r2, #0
 800277e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002780:	480b      	ldr	r0, [pc, #44]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 8002782:	f001 fb09 	bl	8003d98 <HAL_DMA_Init>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 800278c:	f7ff ff76 	bl	800267c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a07      	ldr	r2, [pc, #28]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
 8002796:	4a06      	ldr	r2, [pc, #24]	; (80027b0 <HAL_ADC_MspInit+0xdc>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800279c:	bf00      	nop
 800279e:	3728      	adds	r7, #40	; 0x28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	40012000 	.word	0x40012000
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020000 	.word	0x40020000
 80027b0:	2002f66c 	.word	0x2002f66c
 80027b4:	40026470 	.word	0x40026470

080027b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	; 0x30
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a3d      	ldr	r2, [pc, #244]	; (80028cc <HAL_I2C_MspInit+0x114>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d128      	bne.n	800282c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027da:	4b3d      	ldr	r3, [pc, #244]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a3c      	ldr	r2, [pc, #240]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 80027e0:	f043 0302 	orr.w	r3, r3, #2
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b3a      	ldr	r3, [pc, #232]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	61bb      	str	r3, [r7, #24]
 80027f0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027f6:	2312      	movs	r3, #18
 80027f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027fa:	2301      	movs	r3, #1
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027fe:	2303      	movs	r3, #3
 8002800:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002802:	2304      	movs	r3, #4
 8002804:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	4831      	ldr	r0, [pc, #196]	; (80028d4 <HAL_I2C_MspInit+0x11c>)
 800280e:	f001 fe5b 	bl	80044c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002812:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a2e      	ldr	r2, [pc, #184]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 8002818:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b2c      	ldr	r3, [pc, #176]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800282a:	e04a      	b.n	80028c2 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a29      	ldr	r2, [pc, #164]	; (80028d8 <HAL_I2C_MspInit+0x120>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d145      	bne.n	80028c2 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002836:	4b26      	ldr	r3, [pc, #152]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a25      	ldr	r2, [pc, #148]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b23      	ldr	r3, [pc, #140]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0304 	and.w	r3, r3, #4
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002866:	f44f 7300 	mov.w	r3, #512	; 0x200
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800286c:	2312      	movs	r3, #18
 800286e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002870:	2301      	movs	r3, #1
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002874:	2303      	movs	r3, #3
 8002876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002878:	2304      	movs	r3, #4
 800287a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	4619      	mov	r1, r3
 8002882:	4816      	ldr	r0, [pc, #88]	; (80028dc <HAL_I2C_MspInit+0x124>)
 8002884:	f001 fe20 	bl	80044c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002888:	f44f 7380 	mov.w	r3, #256	; 0x100
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800288e:	2312      	movs	r3, #18
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002892:	2301      	movs	r3, #1
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800289a:	2304      	movs	r3, #4
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	480e      	ldr	r0, [pc, #56]	; (80028e0 <HAL_I2C_MspInit+0x128>)
 80028a6:	f001 fe0f 	bl	80044c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028aa:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	4a08      	ldr	r2, [pc, #32]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 80028b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028b4:	6413      	str	r3, [r2, #64]	; 0x40
 80028b6:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <HAL_I2C_MspInit+0x118>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
}
 80028c2:	bf00      	nop
 80028c4:	3730      	adds	r7, #48	; 0x30
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40005400 	.word	0x40005400
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020400 	.word	0x40020400
 80028d8:	40005c00 	.word	0x40005c00
 80028dc:	40020800 	.word	0x40020800
 80028e0:	40020000 	.word	0x40020000

080028e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08c      	sub	sp, #48	; 0x30
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a46      	ldr	r2, [pc, #280]	; (8002a1c <HAL_SPI_MspInit+0x138>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d158      	bne.n	80029b8 <HAL_SPI_MspInit+0xd4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002906:	4b46      	ldr	r3, [pc, #280]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	4a45      	ldr	r2, [pc, #276]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 800290c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002910:	6453      	str	r3, [r2, #68]	; 0x44
 8002912:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 8002914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291e:	4b40      	ldr	r3, [pc, #256]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	4a3f      	ldr	r2, [pc, #252]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6313      	str	r3, [r2, #48]	; 0x30
 800292a:	4b3d      	ldr	r3, [pc, #244]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 8002936:	23b0      	movs	r3, #176	; 0xb0
 8002938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002942:	2303      	movs	r3, #3
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002946:	2305      	movs	r3, #5
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	f107 031c 	add.w	r3, r7, #28
 800294e:	4619      	mov	r1, r3
 8002950:	4834      	ldr	r0, [pc, #208]	; (8002a24 <HAL_SPI_MspInit+0x140>)
 8002952:	f001 fdb9 	bl	80044c8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002956:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 8002958:	4a34      	ldr	r2, [pc, #208]	; (8002a2c <HAL_SPI_MspInit+0x148>)
 800295a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800295c:	4b32      	ldr	r3, [pc, #200]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 800295e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002962:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002964:	4b30      	ldr	r3, [pc, #192]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800296a:	4b2f      	ldr	r3, [pc, #188]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 800296c:	2200      	movs	r2, #0
 800296e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002970:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 8002972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002976:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002978:	4b2b      	ldr	r3, [pc, #172]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 800297a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800297e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002980:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 8002982:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002986:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 800298a:	2200      	movs	r2, #0
 800298c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800298e:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 8002990:	2200      	movs	r2, #0
 8002992:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002994:	4b24      	ldr	r3, [pc, #144]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 8002996:	2200      	movs	r2, #0
 8002998:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800299a:	4823      	ldr	r0, [pc, #140]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 800299c:	f001 f9fc 	bl	8003d98 <HAL_DMA_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80029a6:	f7ff fe69 	bl	800267c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 80029ae:	659a      	str	r2, [r3, #88]	; 0x58
 80029b0:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <HAL_SPI_MspInit+0x144>)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80029b6:	e02c      	b.n	8002a12 <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI4)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a1c      	ldr	r2, [pc, #112]	; (8002a30 <HAL_SPI_MspInit+0x14c>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d127      	bne.n	8002a12 <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80029c2:	4b17      	ldr	r3, [pc, #92]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 80029c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029cc:	6453      	str	r3, [r2, #68]	; 0x44
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d6:	613b      	str	r3, [r7, #16]
 80029d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029da:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 80029e0:	f043 0310 	orr.w	r3, r3, #16
 80029e4:	6313      	str	r3, [r2, #48]	; 0x30
 80029e6:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_SPI_MspInit+0x13c>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80029f2:	2374      	movs	r3, #116	; 0x74
 80029f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f6:	2302      	movs	r3, #2
 80029f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029fe:	2303      	movs	r3, #3
 8002a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002a02:	2305      	movs	r3, #5
 8002a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a06:	f107 031c 	add.w	r3, r7, #28
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4809      	ldr	r0, [pc, #36]	; (8002a34 <HAL_SPI_MspInit+0x150>)
 8002a0e:	f001 fd5b 	bl	80044c8 <HAL_GPIO_Init>
}
 8002a12:	bf00      	nop
 8002a14:	3730      	adds	r7, #48	; 0x30
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40013000 	.word	0x40013000
 8002a20:	40023800 	.word	0x40023800
 8002a24:	40020000 	.word	0x40020000
 8002a28:	20045160 	.word	0x20045160
 8002a2c:	40026410 	.word	0x40026410
 8002a30:	40013400 	.word	0x40013400
 8002a34:	40021000 	.word	0x40021000

08002a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b088      	sub	sp, #32
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a45      	ldr	r2, [pc, #276]	; (8002b5c <HAL_TIM_Base_MspInit+0x124>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d11c      	bne.n	8002a84 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a4a:	4b45      	ldr	r3, [pc, #276]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	4a44      	ldr	r2, [pc, #272]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002a50:	f043 0301 	orr.w	r3, r3, #1
 8002a54:	6453      	str	r3, [r2, #68]	; 0x44
 8002a56:	4b42      	ldr	r3, [pc, #264]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
 8002a60:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	2018      	movs	r0, #24
 8002a68:	f001 f95f 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002a6c:	2018      	movs	r0, #24
 8002a6e:	f001 f978 	bl	8003d62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	2019      	movs	r0, #25
 8002a78:	f001 f957 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a7c:	2019      	movs	r0, #25
 8002a7e:	f001 f970 	bl	8003d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002a82:	e066      	b.n	8002b52 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM3)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a36      	ldr	r2, [pc, #216]	; (8002b64 <HAL_TIM_Base_MspInit+0x12c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d114      	bne.n	8002ab8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a8e:	4b34      	ldr	r3, [pc, #208]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	4a33      	ldr	r2, [pc, #204]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002a94:	f043 0302 	orr.w	r3, r3, #2
 8002a98:	6413      	str	r3, [r2, #64]	; 0x40
 8002a9a:	4b31      	ldr	r3, [pc, #196]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	201d      	movs	r0, #29
 8002aac:	f001 f93d 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ab0:	201d      	movs	r0, #29
 8002ab2:	f001 f956 	bl	8003d62 <HAL_NVIC_EnableIRQ>
}
 8002ab6:	e04c      	b.n	8002b52 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM5)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <HAL_TIM_Base_MspInit+0x130>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d114      	bne.n	8002aec <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ac2:	4b27      	ldr	r3, [pc, #156]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002ac8:	f043 0308 	orr.w	r3, r3, #8
 8002acc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ace:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2101      	movs	r1, #1
 8002ade:	2032      	movs	r0, #50	; 0x32
 8002ae0:	f001 f923 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ae4:	2032      	movs	r0, #50	; 0x32
 8002ae6:	f001 f93c 	bl	8003d62 <HAL_NVIC_EnableIRQ>
}
 8002aea:	e032      	b.n	8002b52 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM6)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1e      	ldr	r2, [pc, #120]	; (8002b6c <HAL_TIM_Base_MspInit+0x134>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d114      	bne.n	8002b20 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002af6:	4b1a      	ldr	r3, [pc, #104]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002afc:	f043 0310 	orr.w	r3, r3, #16
 8002b00:	6413      	str	r3, [r2, #64]	; 0x40
 8002b02:	4b17      	ldr	r3, [pc, #92]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	613b      	str	r3, [r7, #16]
 8002b0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2101      	movs	r1, #1
 8002b12:	2036      	movs	r0, #54	; 0x36
 8002b14:	f001 f909 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b18:	2036      	movs	r0, #54	; 0x36
 8002b1a:	f001 f922 	bl	8003d62 <HAL_NVIC_EnableIRQ>
}
 8002b1e:	e018      	b.n	8002b52 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM8)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a12      	ldr	r2, [pc, #72]	; (8002b70 <HAL_TIM_Base_MspInit+0x138>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d113      	bne.n	8002b52 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b2a:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <HAL_TIM_Base_MspInit+0x128>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8002b42:	2200      	movs	r2, #0
 8002b44:	2101      	movs	r1, #1
 8002b46:	202e      	movs	r0, #46	; 0x2e
 8002b48:	f001 f8ef 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002b4c:	202e      	movs	r0, #46	; 0x2e
 8002b4e:	f001 f908 	bl	8003d62 <HAL_NVIC_EnableIRQ>
}
 8002b52:	bf00      	nop
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	40023800 	.word	0x40023800
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40000c00 	.word	0x40000c00
 8002b6c:	40001000 	.word	0x40001000
 8002b70:	40010400 	.word	0x40010400

08002b74 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b94:	d160      	bne.n	8002c58 <HAL_TIM_IC_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b96:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <HAL_TIM_IC_MspInit+0xec>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	4a31      	ldr	r2, [pc, #196]	; (8002c60 <HAL_TIM_IC_MspInit+0xec>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	; (8002c60 <HAL_TIM_IC_MspInit+0xec>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	613b      	str	r3, [r7, #16]
 8002bac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bae:	4b2c      	ldr	r3, [pc, #176]	; (8002c60 <HAL_TIM_IC_MspInit+0xec>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	4a2b      	ldr	r2, [pc, #172]	; (8002c60 <HAL_TIM_IC_MspInit+0xec>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bba:	4b29      	ldr	r3, [pc, #164]	; (8002c60 <HAL_TIM_IC_MspInit+0xec>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8002bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	4619      	mov	r1, r3
 8002be2:	4820      	ldr	r0, [pc, #128]	; (8002c64 <HAL_TIM_IC_MspInit+0xf0>)
 8002be4:	f001 fc70 	bl	80044c8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002be8:	4b1f      	ldr	r3, [pc, #124]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002bea:	4a20      	ldr	r2, [pc, #128]	; (8002c6c <HAL_TIM_IC_MspInit+0xf8>)
 8002bec:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002bf0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002bf4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bfc:	4b1a      	ldr	r3, [pc, #104]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002c02:	4b19      	ldr	r3, [pc, #100]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c08:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002c0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c10:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002c12:	4b15      	ldr	r3, [pc, #84]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002c14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c18:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002c20:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002c2c:	480e      	ldr	r0, [pc, #56]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002c2e:	f001 f8b3 	bl	8003d98 <HAL_DMA_Init>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_TIM_IC_MspInit+0xc8>
    {
      Error_Handler();
 8002c38:	f7ff fd20 	bl	800267c <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
 8002c42:	4a09      	ldr	r2, [pc, #36]	; (8002c68 <HAL_TIM_IC_MspInit+0xf4>)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002c48:	2200      	movs	r2, #0
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	201c      	movs	r0, #28
 8002c4e:	f001 f86c 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c52:	201c      	movs	r0, #28
 8002c54:	f001 f885 	bl	8003d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c58:	bf00      	nop
 8002c5a:	3728      	adds	r7, #40	; 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020000 	.word	0x40020000
 8002c68:	200040e8 	.word	0x200040e8
 8002c6c:	40026088 	.word	0x40026088

08002c70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	; (8002cb4 <HAL_TIM_PWM_MspInit+0x44>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d113      	bne.n	8002caa <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c82:	4b0d      	ldr	r3, [pc, #52]	; (8002cb8 <HAL_TIM_PWM_MspInit+0x48>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <HAL_TIM_PWM_MspInit+0x48>)
 8002c88:	f043 0304 	orr.w	r3, r3, #4
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <HAL_TIM_PWM_MspInit+0x48>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	201e      	movs	r0, #30
 8002ca0:	f001 f843 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ca4:	201e      	movs	r0, #30
 8002ca6:	f001 f85c 	bl	8003d62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40000800 	.word	0x40000800
 8002cb8:	40023800 	.word	0x40023800

08002cbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08c      	sub	sp, #48	; 0x30
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 031c 	add.w	r3, r7, #28
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a45      	ldr	r2, [pc, #276]	; (8002df0 <HAL_TIM_MspPostInit+0x134>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d11d      	bne.n	8002d1a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cde:	4b45      	ldr	r3, [pc, #276]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	4a44      	ldr	r2, [pc, #272]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002ce4:	f043 0310 	orr.w	r3, r3, #16
 8002ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cea:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 8002cf6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	2300      	movs	r3, #0
 8002d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d0c:	f107 031c 	add.w	r3, r7, #28
 8002d10:	4619      	mov	r1, r3
 8002d12:	4839      	ldr	r0, [pc, #228]	; (8002df8 <HAL_TIM_MspPostInit+0x13c>)
 8002d14:	f001 fbd8 	bl	80044c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002d18:	e065      	b.n	8002de6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a37      	ldr	r2, [pc, #220]	; (8002dfc <HAL_TIM_MspPostInit+0x140>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d11c      	bne.n	8002d5e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d24:	4b33      	ldr	r3, [pc, #204]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4a32      	ldr	r2, [pc, #200]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002d2a:	f043 0301 	orr.w	r3, r3, #1
 8002d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d30:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 8002d3c:	2340      	movs	r3, #64	; 0x40
 8002d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d40:	2302      	movs	r3, #2
 8002d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002d50:	f107 031c 	add.w	r3, r7, #28
 8002d54:	4619      	mov	r1, r3
 8002d56:	482a      	ldr	r0, [pc, #168]	; (8002e00 <HAL_TIM_MspPostInit+0x144>)
 8002d58:	f001 fbb6 	bl	80044c8 <HAL_GPIO_Init>
}
 8002d5c:	e043      	b.n	8002de6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a28      	ldr	r2, [pc, #160]	; (8002e04 <HAL_TIM_MspPostInit+0x148>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d11d      	bne.n	8002da4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d68:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	4a21      	ldr	r2, [pc, #132]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002d6e:	f043 0308 	orr.w	r3, r3, #8
 8002d72:	6313      	str	r3, [r2, #48]	; 0x30
 8002d74:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	613b      	str	r3, [r7, #16]
 8002d7e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 8002d80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d86:	2302      	movs	r3, #2
 8002d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d92:	2302      	movs	r3, #2
 8002d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002d96:	f107 031c 	add.w	r3, r7, #28
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	481a      	ldr	r0, [pc, #104]	; (8002e08 <HAL_TIM_MspPostInit+0x14c>)
 8002d9e:	f001 fb93 	bl	80044c8 <HAL_GPIO_Init>
}
 8002da2:	e020      	b.n	8002de6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a18      	ldr	r2, [pc, #96]	; (8002e0c <HAL_TIM_MspPostInit+0x150>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d11b      	bne.n	8002de6 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	4a10      	ldr	r2, [pc, #64]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002db4:	f043 0304 	orr.w	r3, r3, #4
 8002db8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dba:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <HAL_TIM_MspPostInit+0x138>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f003 0304 	and.w	r3, r3, #4
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 8002dc6:	2340      	movs	r3, #64	; 0x40
 8002dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dca:	2302      	movs	r3, #2
 8002dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 8002dda:	f107 031c 	add.w	r3, r7, #28
 8002dde:	4619      	mov	r1, r3
 8002de0:	480b      	ldr	r0, [pc, #44]	; (8002e10 <HAL_TIM_MspPostInit+0x154>)
 8002de2:	f001 fb71 	bl	80044c8 <HAL_GPIO_Init>
}
 8002de6:	bf00      	nop
 8002de8:	3730      	adds	r7, #48	; 0x30
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40010000 	.word	0x40010000
 8002df4:	40023800 	.word	0x40023800
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40020000 	.word	0x40020000
 8002e04:	40000800 	.word	0x40000800
 8002e08:	40020c00 	.word	0x40020c00
 8002e0c:	40010400 	.word	0x40010400
 8002e10:	40020800 	.word	0x40020800

08002e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b092      	sub	sp, #72	; 0x48
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	60da      	str	r2, [r3, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a79      	ldr	r2, [pc, #484]	; (8003018 <HAL_UART_MspInit+0x204>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d129      	bne.n	8002e8a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002e36:	4b79      	ldr	r3, [pc, #484]	; (800301c <HAL_UART_MspInit+0x208>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	4a78      	ldr	r2, [pc, #480]	; (800301c <HAL_UART_MspInit+0x208>)
 8002e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e40:	6413      	str	r3, [r2, #64]	; 0x40
 8002e42:	4b76      	ldr	r3, [pc, #472]	; (800301c <HAL_UART_MspInit+0x208>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e4a:	633b      	str	r3, [r7, #48]	; 0x30
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4e:	4b73      	ldr	r3, [pc, #460]	; (800301c <HAL_UART_MspInit+0x208>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	4a72      	ldr	r2, [pc, #456]	; (800301c <HAL_UART_MspInit+0x208>)
 8002e54:	f043 0302 	orr.w	r3, r3, #2
 8002e58:	6313      	str	r3, [r2, #48]	; 0x30
 8002e5a:	4b70      	ldr	r3, [pc, #448]	; (800301c <HAL_UART_MspInit+0x208>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = UART5_RX_Pin|UART5_TX_Pin;
 8002e66:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002e6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e70:	2300      	movs	r3, #0
 8002e72:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e74:	2303      	movs	r3, #3
 8002e76:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002e78:	2308      	movs	r3, #8
 8002e7a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e80:	4619      	mov	r1, r3
 8002e82:	4867      	ldr	r0, [pc, #412]	; (8003020 <HAL_UART_MspInit+0x20c>)
 8002e84:	f001 fb20 	bl	80044c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e88:	e0c1      	b.n	800300e <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==UART7)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a65      	ldr	r2, [pc, #404]	; (8003024 <HAL_UART_MspInit+0x210>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d129      	bne.n	8002ee8 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002e94:	4b61      	ldr	r3, [pc, #388]	; (800301c <HAL_UART_MspInit+0x208>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	4a60      	ldr	r2, [pc, #384]	; (800301c <HAL_UART_MspInit+0x208>)
 8002e9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea0:	4b5e      	ldr	r3, [pc, #376]	; (800301c <HAL_UART_MspInit+0x208>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002eac:	4b5b      	ldr	r3, [pc, #364]	; (800301c <HAL_UART_MspInit+0x208>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	4a5a      	ldr	r2, [pc, #360]	; (800301c <HAL_UART_MspInit+0x208>)
 8002eb2:	f043 0310 	orr.w	r3, r3, #16
 8002eb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb8:	4b58      	ldr	r3, [pc, #352]	; (800301c <HAL_UART_MspInit+0x208>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002ec4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eda:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4851      	ldr	r0, [pc, #324]	; (8003028 <HAL_UART_MspInit+0x214>)
 8002ee2:	f001 faf1 	bl	80044c8 <HAL_GPIO_Init>
}
 8002ee6:	e092      	b.n	800300e <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a4f      	ldr	r2, [pc, #316]	; (800302c <HAL_UART_MspInit+0x218>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d129      	bne.n	8002f46 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ef2:	4b4a      	ldr	r3, [pc, #296]	; (800301c <HAL_UART_MspInit+0x208>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	4a49      	ldr	r2, [pc, #292]	; (800301c <HAL_UART_MspInit+0x208>)
 8002ef8:	f043 0310 	orr.w	r3, r3, #16
 8002efc:	6453      	str	r3, [r2, #68]	; 0x44
 8002efe:	4b47      	ldr	r3, [pc, #284]	; (800301c <HAL_UART_MspInit+0x208>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	623b      	str	r3, [r7, #32]
 8002f08:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0a:	4b44      	ldr	r3, [pc, #272]	; (800301c <HAL_UART_MspInit+0x208>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	4a43      	ldr	r2, [pc, #268]	; (800301c <HAL_UART_MspInit+0x208>)
 8002f10:	f043 0302 	orr.w	r3, r3, #2
 8002f14:	6313      	str	r3, [r2, #48]	; 0x30
 8002f16:	4b41      	ldr	r3, [pc, #260]	; (800301c <HAL_UART_MspInit+0x208>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 8002f22:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f30:	2303      	movs	r3, #3
 8002f32:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002f34:	2304      	movs	r3, #4
 8002f36:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f38:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4838      	ldr	r0, [pc, #224]	; (8003020 <HAL_UART_MspInit+0x20c>)
 8002f40:	f001 fac2 	bl	80044c8 <HAL_GPIO_Init>
}
 8002f44:	e063      	b.n	800300e <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART2)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a39      	ldr	r2, [pc, #228]	; (8003030 <HAL_UART_MspInit+0x21c>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d128      	bne.n	8002fa2 <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002f50:	4b32      	ldr	r3, [pc, #200]	; (800301c <HAL_UART_MspInit+0x208>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4a31      	ldr	r2, [pc, #196]	; (800301c <HAL_UART_MspInit+0x208>)
 8002f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5c:	4b2f      	ldr	r3, [pc, #188]	; (800301c <HAL_UART_MspInit+0x208>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f68:	4b2c      	ldr	r3, [pc, #176]	; (800301c <HAL_UART_MspInit+0x208>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	4a2b      	ldr	r2, [pc, #172]	; (800301c <HAL_UART_MspInit+0x208>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6313      	str	r3, [r2, #48]	; 0x30
 8002f74:	4b29      	ldr	r3, [pc, #164]	; (800301c <HAL_UART_MspInit+0x208>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	617b      	str	r3, [r7, #20]
 8002f7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 8002f80:	230c      	movs	r3, #12
 8002f82:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f84:	2302      	movs	r3, #2
 8002f86:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f90:	2307      	movs	r3, #7
 8002f92:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f94:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4826      	ldr	r0, [pc, #152]	; (8003034 <HAL_UART_MspInit+0x220>)
 8002f9c:	f001 fa94 	bl	80044c8 <HAL_GPIO_Init>
}
 8002fa0:	e035      	b.n	800300e <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a24      	ldr	r2, [pc, #144]	; (8003038 <HAL_UART_MspInit+0x224>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d130      	bne.n	800300e <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_UART_MspInit+0x208>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	4a1a      	ldr	r2, [pc, #104]	; (800301c <HAL_UART_MspInit+0x208>)
 8002fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb8:	4b18      	ldr	r3, [pc, #96]	; (800301c <HAL_UART_MspInit+0x208>)
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fc4:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_UART_MspInit+0x208>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	4a14      	ldr	r2, [pc, #80]	; (800301c <HAL_UART_MspInit+0x208>)
 8002fca:	f043 0302 	orr.w	r3, r3, #2
 8002fce:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd0:	4b12      	ldr	r3, [pc, #72]	; (800301c <HAL_UART_MspInit+0x208>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 8002fdc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fe0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fee:	2307      	movs	r3, #7
 8002ff0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4809      	ldr	r0, [pc, #36]	; (8003020 <HAL_UART_MspInit+0x20c>)
 8002ffa:	f001 fa65 	bl	80044c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ffe:	2200      	movs	r2, #0
 8003000:	2100      	movs	r1, #0
 8003002:	2027      	movs	r0, #39	; 0x27
 8003004:	f000 fe91 	bl	8003d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003008:	2027      	movs	r0, #39	; 0x27
 800300a:	f000 feaa 	bl	8003d62 <HAL_NVIC_EnableIRQ>
}
 800300e:	bf00      	nop
 8003010:	3748      	adds	r7, #72	; 0x48
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40005000 	.word	0x40005000
 800301c:	40023800 	.word	0x40023800
 8003020:	40020400 	.word	0x40020400
 8003024:	40007800 	.word	0x40007800
 8003028:	40021000 	.word	0x40021000
 800302c:	40011000 	.word	0x40011000
 8003030:	40004400 	.word	0x40004400
 8003034:	40020000 	.word	0x40020000
 8003038:	40004800 	.word	0x40004800

0800303c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800304a:	b480      	push	{r7}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800304e:	e7fe      	b.n	800304e <HardFault_Handler+0x4>

08003050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003054:	e7fe      	b.n	8003054 <MemManage_Handler+0x4>

08003056 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800305a:	e7fe      	b.n	800305a <BusFault_Handler+0x4>

0800305c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003060:	e7fe      	b.n	8003060 <UsageFault_Handler+0x4>

08003062 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003062:	b480      	push	{r7}
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003066:	bf00      	nop
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003090:	f000 f922 	bl	80032d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003094:	bf00      	nop
 8003096:	bd80      	pop	{r7, pc}

08003098 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <DMA1_Stream5_IRQHandler+0x10>)
 800309e:	f000 ffab 	bl	8003ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	200040e8 	.word	0x200040e8

080030ac <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030b0:	4802      	ldr	r0, [pc, #8]	; (80030bc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80030b2:	f003 ff5f 	bl	8006f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	2002f774 	.word	0x2002f774

080030c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80030c6:	f003 ff55 	bl	8006f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	2002f774 	.word	0x2002f774

080030d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <TIM2_IRQHandler+0x10>)
 80030da:	f003 ff4b 	bl	8006f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	2002f818 	.word	0x2002f818

080030e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030ec:	4802      	ldr	r0, [pc, #8]	; (80030f8 <TIM3_IRQHandler+0x10>)
 80030ee:	f003 ff41 	bl	8006f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030f2:	bf00      	nop
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	2002f468 	.word	0x2002f468

080030fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003100:	4802      	ldr	r0, [pc, #8]	; (800310c <TIM4_IRQHandler+0x10>)
 8003102:	f003 ff37 	bl	8006f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003106:	bf00      	nop
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20004208 	.word	0x20004208

08003110 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003114:	4802      	ldr	r0, [pc, #8]	; (8003120 <USART3_IRQHandler+0x10>)
 8003116:	f005 fbcd 	bl	80088b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	20004248 	.word	0x20004248

08003124 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003128:	4802      	ldr	r0, [pc, #8]	; (8003134 <TIM8_CC_IRQHandler+0x10>)
 800312a:	f003 ff23 	bl	8006f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200041c8 	.word	0x200041c8

08003138 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800313c:	4802      	ldr	r0, [pc, #8]	; (8003148 <TIM5_IRQHandler+0x10>)
 800313e:	f003 ff19 	bl	8006f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003142:	bf00      	nop
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2002f428 	.word	0x2002f428

0800314c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003150:	4802      	ldr	r0, [pc, #8]	; (800315c <TIM6_DAC_IRQHandler+0x10>)
 8003152:	f003 ff0f 	bl	8006f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003156:	bf00      	nop
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	2002f730 	.word	0x2002f730

08003160 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <DMA2_Stream0_IRQHandler+0x10>)
 8003166:	f000 ff47 	bl	8003ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20045160 	.word	0x20045160

08003174 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <DMA2_Stream4_IRQHandler+0x10>)
 800317a:	f000 ff3d 	bl	8003ff8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	2002f66c 	.word	0x2002f66c

08003188 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <_sbrk+0x50>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d102      	bne.n	800319e <_sbrk+0x16>
		heap_end = &end;
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <_sbrk+0x50>)
 800319a:	4a10      	ldr	r2, [pc, #64]	; (80031dc <_sbrk+0x54>)
 800319c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800319e:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <_sbrk+0x50>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <_sbrk+0x50>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	466a      	mov	r2, sp
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d907      	bls.n	80031c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80031b2:	f006 f9e9 	bl	8009588 <__errno>
 80031b6:	4602      	mov	r2, r0
 80031b8:	230c      	movs	r3, #12
 80031ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80031bc:	f04f 33ff 	mov.w	r3, #4294967295
 80031c0:	e006      	b.n	80031d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80031c2:	4b05      	ldr	r3, [pc, #20]	; (80031d8 <_sbrk+0x50>)
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4413      	add	r3, r2
 80031ca:	4a03      	ldr	r2, [pc, #12]	; (80031d8 <_sbrk+0x50>)
 80031cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	2000020c 	.word	0x2000020c
 80031dc:	2005aa50 	.word	0x2005aa50

080031e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e4:	4b08      	ldr	r3, [pc, #32]	; (8003208 <SystemInit+0x28>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	4a07      	ldr	r2, [pc, #28]	; (8003208 <SystemInit+0x28>)
 80031ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031f4:	4b04      	ldr	r3, [pc, #16]	; (8003208 <SystemInit+0x28>)
 80031f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031fa:	609a      	str	r2, [r3, #8]
#endif
}
 80031fc:	bf00      	nop
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800320c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003244 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003210:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003212:	e003      	b.n	800321c <LoopCopyDataInit>

08003214 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003216:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003218:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800321a:	3104      	adds	r1, #4

0800321c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800321c:	480b      	ldr	r0, [pc, #44]	; (800324c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003220:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003222:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003224:	d3f6      	bcc.n	8003214 <CopyDataInit>
  ldr  r2, =_sbss
 8003226:	4a0b      	ldr	r2, [pc, #44]	; (8003254 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003228:	e002      	b.n	8003230 <LoopFillZerobss>

0800322a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800322a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800322c:	f842 3b04 	str.w	r3, [r2], #4

08003230 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003230:	4b09      	ldr	r3, [pc, #36]	; (8003258 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003232:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003234:	d3f9      	bcc.n	800322a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003236:	f7ff ffd3 	bl	80031e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800323a:	f006 f9ab 	bl	8009594 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800323e:	f7fd f9e7 	bl	8000610 <main>
  bx  lr    
 8003242:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003244:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003248:	0800a328 	.word	0x0800a328
  ldr  r0, =_sdata
 800324c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003250:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8003254:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8003258:	2005aa50 	.word	0x2005aa50

0800325c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800325c:	e7fe      	b.n	800325c <ADC_IRQHandler>

0800325e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003262:	2003      	movs	r0, #3
 8003264:	f000 fd56 	bl	8003d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003268:	2000      	movs	r0, #0
 800326a:	f000 f805 	bl	8003278 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800326e:	f7ff fa0d 	bl	800268c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}

08003278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003280:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_InitTick+0x54>)
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_InitTick+0x58>)
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	4619      	mov	r1, r3
 800328a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800328e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003292:	fbb2 f3f3 	udiv	r3, r2, r3
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fd71 	bl	8003d7e <HAL_SYSTICK_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00e      	b.n	80032c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b0f      	cmp	r3, #15
 80032aa:	d80a      	bhi.n	80032c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ac:	2200      	movs	r2, #0
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f000 fd39 	bl	8003d2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032b8:	4a06      	ldr	r2, [pc, #24]	; (80032d4 <HAL_InitTick+0x5c>)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
 80032c0:	e000      	b.n	80032c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000008 	.word	0x20000008
 80032d0:	20000010 	.word	0x20000010
 80032d4:	2000000c 	.word	0x2000000c

080032d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032dc:	4b06      	ldr	r3, [pc, #24]	; (80032f8 <HAL_IncTick+0x20>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_IncTick+0x24>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4413      	add	r3, r2
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <HAL_IncTick+0x24>)
 80032ea:	6013      	str	r3, [r2, #0]
}
 80032ec:	bf00      	nop
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	20000010 	.word	0x20000010
 80032fc:	2005aa48 	.word	0x2005aa48

08003300 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  return uwTick;
 8003304:	4b03      	ldr	r3, [pc, #12]	; (8003314 <HAL_GetTick+0x14>)
 8003306:	681b      	ldr	r3, [r3, #0]
}
 8003308:	4618      	mov	r0, r3
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	2005aa48 	.word	0x2005aa48

08003318 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003320:	f7ff ffee 	bl	8003300 <HAL_GetTick>
 8003324:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003330:	d005      	beq.n	800333e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <HAL_Delay+0x40>)
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4413      	add	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800333e:	bf00      	nop
 8003340:	f7ff ffde 	bl	8003300 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	429a      	cmp	r2, r3
 800334e:	d8f7      	bhi.n	8003340 <HAL_Delay+0x28>
  {
  }
}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000010 	.word	0x20000010

0800335c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e031      	b.n	80033d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff f9aa 	bl	80026d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f003 0310 	and.w	r3, r3, #16
 8003396:	2b00      	cmp	r3, #0
 8003398:	d116      	bne.n	80033c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <HAL_ADC_Init+0x84>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	f043 0202 	orr.w	r2, r3, #2
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fa66 	bl	800387c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f023 0303 	bic.w	r3, r3, #3
 80033be:	f043 0201 	orr.w	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	641a      	str	r2, [r3, #64]	; 0x40
 80033c6:	e001      	b.n	80033cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	ffffeefd 	.word	0xffffeefd

080033e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_Start_DMA+0x1e>
 80033fe:	2302      	movs	r3, #2
 8003400:	e0c7      	b.n	8003592 <HAL_ADC_Start_DMA+0x1ae>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	2b01      	cmp	r3, #1
 8003416:	d018      	beq.n	800344a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0201 	orr.w	r2, r2, #1
 8003426:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003428:	4b5c      	ldr	r3, [pc, #368]	; (800359c <HAL_ADC_Start_DMA+0x1b8>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a5c      	ldr	r2, [pc, #368]	; (80035a0 <HAL_ADC_Start_DMA+0x1bc>)
 800342e:	fba2 2303 	umull	r2, r3, r2, r3
 8003432:	0c9a      	lsrs	r2, r3, #18
 8003434:	4613      	mov	r3, r2
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	4413      	add	r3, r2
 800343a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800343c:	e002      	b.n	8003444 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	3b01      	subs	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f9      	bne.n	800343e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	f040 809b 	bne.w	8003590 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800345e:	4b51      	ldr	r3, [pc, #324]	; (80035a4 <HAL_ADC_Start_DMA+0x1c0>)
 8003460:	4013      	ands	r3, r2
 8003462:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003480:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003494:	d106      	bne.n	80034a4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349a:	f023 0206 	bic.w	r2, r3, #6
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	645a      	str	r2, [r3, #68]	; 0x44
 80034a2:	e002      	b.n	80034aa <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034b6:	4a3c      	ldr	r2, [pc, #240]	; (80035a8 <HAL_ADC_Start_DMA+0x1c4>)
 80034b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	4a3b      	ldr	r2, [pc, #236]	; (80035ac <HAL_ADC_Start_DMA+0x1c8>)
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c6:	4a3a      	ldr	r2, [pc, #232]	; (80035b0 <HAL_ADC_Start_DMA+0x1cc>)
 80034c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80034d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80034e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	334c      	adds	r3, #76	; 0x4c
 80034fe:	4619      	mov	r1, r3
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f000 fcf6 	bl	8003ef4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003508:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <HAL_ADC_Start_DMA+0x1d0>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10f      	bne.n	8003534 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d136      	bne.n	8003590 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003530:	609a      	str	r2, [r3, #8]
 8003532:	e02d      	b.n	8003590 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <HAL_ADC_Start_DMA+0x1d4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d10e      	bne.n	800355c <HAL_ADC_Start_DMA+0x178>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d107      	bne.n	800355c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800355a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800355c:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <HAL_ADC_Start_DMA+0x1d0>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0310 	and.w	r3, r3, #16
 8003564:	2b00      	cmp	r3, #0
 8003566:	d113      	bne.n	8003590 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a13      	ldr	r2, [pc, #76]	; (80035bc <HAL_ADC_Start_DMA+0x1d8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10e      	bne.n	8003590 <HAL_ADC_Start_DMA+0x1ac>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d107      	bne.n	8003590 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800358e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000008 	.word	0x20000008
 80035a0:	431bde83 	.word	0x431bde83
 80035a4:	fffff8fe 	.word	0xfffff8fe
 80035a8:	08003a71 	.word	0x08003a71
 80035ac:	08003b2b 	.word	0x08003b2b
 80035b0:	08003b47 	.word	0x08003b47
 80035b4:	40012300 	.word	0x40012300
 80035b8:	40012000 	.word	0x40012000
 80035bc:	40012200 	.word	0x40012200

080035c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_ADC_ConfigChannel+0x1c>
 8003600:	2302      	movs	r3, #2
 8003602:	e12a      	b.n	800385a <HAL_ADC_ConfigChannel+0x272>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b09      	cmp	r3, #9
 8003612:	d93a      	bls.n	800368a <HAL_ADC_ConfigChannel+0xa2>
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800361c:	d035      	beq.n	800368a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68d9      	ldr	r1, [r3, #12]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	461a      	mov	r2, r3
 800362c:	4613      	mov	r3, r2
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	4413      	add	r3, r2
 8003632:	3b1e      	subs	r3, #30
 8003634:	2207      	movs	r2, #7
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43da      	mvns	r2, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	400a      	ands	r2, r1
 8003642:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a87      	ldr	r2, [pc, #540]	; (8003868 <HAL_ADC_ConfigChannel+0x280>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d10a      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68d9      	ldr	r1, [r3, #12]
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	061a      	lsls	r2, r3, #24
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003662:	e035      	b.n	80036d0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68d9      	ldr	r1, [r3, #12]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	4618      	mov	r0, r3
 8003676:	4603      	mov	r3, r0
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4403      	add	r3, r0
 800367c:	3b1e      	subs	r3, #30
 800367e:	409a      	lsls	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003688:	e022      	b.n	80036d0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6919      	ldr	r1, [r3, #16]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	b29b      	uxth	r3, r3
 8003696:	461a      	mov	r2, r3
 8003698:	4613      	mov	r3, r2
 800369a:	005b      	lsls	r3, r3, #1
 800369c:	4413      	add	r3, r2
 800369e:	2207      	movs	r2, #7
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43da      	mvns	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	400a      	ands	r2, r1
 80036ac:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	6919      	ldr	r1, [r3, #16]
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	b29b      	uxth	r3, r3
 80036be:	4618      	mov	r0, r3
 80036c0:	4603      	mov	r3, r0
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4403      	add	r3, r0
 80036c6:	409a      	lsls	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b06      	cmp	r3, #6
 80036d6:	d824      	bhi.n	8003722 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	3b05      	subs	r3, #5
 80036ea:	221f      	movs	r2, #31
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43da      	mvns	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	400a      	ands	r2, r1
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	b29b      	uxth	r3, r3
 8003706:	4618      	mov	r0, r3
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	3b05      	subs	r3, #5
 8003714:	fa00 f203 	lsl.w	r2, r0, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	635a      	str	r2, [r3, #52]	; 0x34
 8003720:	e04c      	b.n	80037bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b0c      	cmp	r3, #12
 8003728:	d824      	bhi.n	8003774 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	4413      	add	r3, r2
 800373a:	3b23      	subs	r3, #35	; 0x23
 800373c:	221f      	movs	r2, #31
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43da      	mvns	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	400a      	ands	r2, r1
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	b29b      	uxth	r3, r3
 8003758:	4618      	mov	r0, r3
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	3b23      	subs	r3, #35	; 0x23
 8003766:	fa00 f203 	lsl.w	r2, r0, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	631a      	str	r2, [r3, #48]	; 0x30
 8003772:	e023      	b.n	80037bc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	3b41      	subs	r3, #65	; 0x41
 8003786:	221f      	movs	r2, #31
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43da      	mvns	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	400a      	ands	r2, r1
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	4618      	mov	r0, r3
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	3b41      	subs	r3, #65	; 0x41
 80037b0:	fa00 f203 	lsl.w	r2, r0, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a2a      	ldr	r2, [pc, #168]	; (800386c <HAL_ADC_ConfigChannel+0x284>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d10a      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x1f4>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ce:	d105      	bne.n	80037dc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <HAL_ADC_ConfigChannel+0x288>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a26      	ldr	r2, [pc, #152]	; (8003870 <HAL_ADC_ConfigChannel+0x288>)
 80037d6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80037da:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a22      	ldr	r2, [pc, #136]	; (800386c <HAL_ADC_ConfigChannel+0x284>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d109      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x212>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b12      	cmp	r3, #18
 80037ec:	d105      	bne.n	80037fa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <HAL_ADC_ConfigChannel+0x288>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4a1f      	ldr	r2, [pc, #124]	; (8003870 <HAL_ADC_ConfigChannel+0x288>)
 80037f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037f8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a1b      	ldr	r2, [pc, #108]	; (800386c <HAL_ADC_ConfigChannel+0x284>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d125      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x268>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a17      	ldr	r2, [pc, #92]	; (8003868 <HAL_ADC_ConfigChannel+0x280>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d003      	beq.n	8003816 <HAL_ADC_ConfigChannel+0x22e>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b11      	cmp	r3, #17
 8003814:	d11c      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003816:	4b16      	ldr	r3, [pc, #88]	; (8003870 <HAL_ADC_ConfigChannel+0x288>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4a15      	ldr	r2, [pc, #84]	; (8003870 <HAL_ADC_ConfigChannel+0x288>)
 800381c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003820:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a10      	ldr	r2, [pc, #64]	; (8003868 <HAL_ADC_ConfigChannel+0x280>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d111      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_ADC_ConfigChannel+0x28c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a11      	ldr	r2, [pc, #68]	; (8003878 <HAL_ADC_ConfigChannel+0x290>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	0c9a      	lsrs	r2, r3, #18
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003842:	e002      	b.n	800384a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3b01      	subs	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1f9      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3714      	adds	r7, #20
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	10000012 	.word	0x10000012
 800386c:	40012000 	.word	0x40012000
 8003870:	40012300 	.word	0x40012300
 8003874:	20000008 	.word	0x20000008
 8003878:	431bde83 	.word	0x431bde83

0800387c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003884:	4b78      	ldr	r3, [pc, #480]	; (8003a68 <ADC_Init+0x1ec>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	4a77      	ldr	r2, [pc, #476]	; (8003a68 <ADC_Init+0x1ec>)
 800388a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800388e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003890:	4b75      	ldr	r3, [pc, #468]	; (8003a68 <ADC_Init+0x1ec>)
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4973      	ldr	r1, [pc, #460]	; (8003a68 <ADC_Init+0x1ec>)
 800389a:	4313      	orrs	r3, r2
 800389c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685a      	ldr	r2, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6859      	ldr	r1, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	021a      	lsls	r2, r3, #8
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6859      	ldr	r1, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6899      	ldr	r1, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	68da      	ldr	r2, [r3, #12]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	4a58      	ldr	r2, [pc, #352]	; (8003a6c <ADC_Init+0x1f0>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d022      	beq.n	8003956 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800391e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6899      	ldr	r1, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6899      	ldr	r1, [r3, #8]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	e00f      	b.n	8003976 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003974:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0202 	bic.w	r2, r2, #2
 8003984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6899      	ldr	r1, [r3, #8]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	005a      	lsls	r2, r3, #1
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01b      	beq.n	80039dc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	685a      	ldr	r2, [r3, #4]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	3b01      	subs	r3, #1
 80039d0:	035a      	lsls	r2, r3, #13
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
 80039da:	e007      	b.n	80039ec <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685a      	ldr	r2, [r3, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	051a      	lsls	r2, r3, #20
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6899      	ldr	r1, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a2e:	025a      	lsls	r2, r3, #9
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	689a      	ldr	r2, [r3, #8]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6899      	ldr	r1, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	029a      	lsls	r2, r3, #10
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	609a      	str	r2, [r3, #8]
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr
 8003a68:	40012300 	.word	0x40012300
 8003a6c:	0f000001 	.word	0x0f000001

08003a70 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d13c      	bne.n	8003b04 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d12b      	bne.n	8003afc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d127      	bne.n	8003afc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d006      	beq.n	8003ac8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d119      	bne.n	8003afc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0220 	bic.w	r2, r2, #32
 8003ad6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d105      	bne.n	8003afc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	f043 0201 	orr.w	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7fe f8d3 	bl	8001ca8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b02:	e00e      	b.n	8003b22 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f7ff fd5f 	bl	80035d4 <HAL_ADC_ErrorCallback>
}
 8003b16:	e004      	b.n	8003b22 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	4798      	blx	r3
}
 8003b22:	bf00      	nop
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}

08003b2a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff fd41 	bl	80035c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b3e:	bf00      	nop
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b084      	sub	sp, #16
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b52:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2240      	movs	r2, #64	; 0x40
 8003b58:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b5e:	f043 0204 	orr.w	r2, r3, #4
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f7ff fd34 	bl	80035d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f003 0307 	and.w	r3, r3, #7
 8003b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <__NVIC_SetPriorityGrouping+0x40>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b90:	4013      	ands	r3, r2
 8003b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ba2:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <__NVIC_SetPriorityGrouping+0x40>)
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	60d3      	str	r3, [r2, #12]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	e000ed00 	.word	0xe000ed00
 8003bb8:	05fa0000 	.word	0x05fa0000

08003bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bc0:	4b04      	ldr	r3, [pc, #16]	; (8003bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	0a1b      	lsrs	r3, r3, #8
 8003bc6:	f003 0307 	and.w	r3, r3, #7
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	db0b      	blt.n	8003c02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	f003 021f 	and.w	r2, r3, #31
 8003bf0:	4907      	ldr	r1, [pc, #28]	; (8003c10 <__NVIC_EnableIRQ+0x38>)
 8003bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf6:	095b      	lsrs	r3, r3, #5
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000e100 	.word	0xe000e100

08003c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db0a      	blt.n	8003c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	490c      	ldr	r1, [pc, #48]	; (8003c60 <__NVIC_SetPriority+0x4c>)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c3c:	e00a      	b.n	8003c54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4908      	ldr	r1, [pc, #32]	; (8003c64 <__NVIC_SetPriority+0x50>)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	3b04      	subs	r3, #4
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	440b      	add	r3, r1
 8003c52:	761a      	strb	r2, [r3, #24]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000e100 	.word	0xe000e100
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b089      	sub	sp, #36	; 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f1c3 0307 	rsb	r3, r3, #7
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	bf28      	it	cs
 8003c86:	2304      	movcs	r3, #4
 8003c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	d902      	bls.n	8003c98 <NVIC_EncodePriority+0x30>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3b03      	subs	r3, #3
 8003c96:	e000      	b.n	8003c9a <NVIC_EncodePriority+0x32>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	401a      	ands	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43d9      	mvns	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	4313      	orrs	r3, r2
         );
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	; 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ce0:	d301      	bcc.n	8003ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e00f      	b.n	8003d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ce6:	4a0a      	ldr	r2, [pc, #40]	; (8003d10 <SysTick_Config+0x40>)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cee:	210f      	movs	r1, #15
 8003cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf4:	f7ff ff8e 	bl	8003c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cf8:	4b05      	ldr	r3, [pc, #20]	; (8003d10 <SysTick_Config+0x40>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cfe:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <SysTick_Config+0x40>)
 8003d00:	2207      	movs	r2, #7
 8003d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	e000e010 	.word	0xe000e010

08003d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ff29 	bl	8003b74 <__NVIC_SetPriorityGrouping>
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b086      	sub	sp, #24
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	4603      	mov	r3, r0
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	607a      	str	r2, [r7, #4]
 8003d36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d3c:	f7ff ff3e 	bl	8003bbc <__NVIC_GetPriorityGrouping>
 8003d40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	68b9      	ldr	r1, [r7, #8]
 8003d46:	6978      	ldr	r0, [r7, #20]
 8003d48:	f7ff ff8e 	bl	8003c68 <NVIC_EncodePriority>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff ff5d 	bl	8003c14 <__NVIC_SetPriority>
}
 8003d5a:	bf00      	nop
 8003d5c:	3718      	adds	r7, #24
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff31 	bl	8003bd8 <__NVIC_EnableIRQ>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ffa2 	bl	8003cd0 <SysTick_Config>
 8003d8c:	4603      	mov	r3, r0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003da4:	f7ff faac 	bl	8003300 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e099      	b.n	8003ee8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dd4:	e00f      	b.n	8003df6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003dd6:	f7ff fa93 	bl	8003300 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b05      	cmp	r3, #5
 8003de2:	d908      	bls.n	8003df6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2220      	movs	r2, #32
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2203      	movs	r2, #3
 8003dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e078      	b.n	8003ee8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e8      	bne.n	8003dd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <HAL_DMA_Init+0x158>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d107      	bne.n	8003e60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f023 0307 	bic.w	r3, r3, #7
 8003e76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d117      	bne.n	8003eba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e8e:	697a      	ldr	r2, [r7, #20]
 8003e90:	4313      	orrs	r3, r2
 8003e92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00e      	beq.n	8003eba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fa99 	bl	80043d4 <DMA_CheckFifoParam>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2240      	movs	r2, #64	; 0x40
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e016      	b.n	8003ee8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fa50 	bl	8004368 <DMA_CalcBaseAndBitshift>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	223f      	movs	r2, #63	; 0x3f
 8003ed2:	409a      	lsls	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	e010803f 	.word	0xe010803f

08003ef4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
 8003f00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f02:	2300      	movs	r3, #0
 8003f04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_DMA_Start_IT+0x26>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e048      	b.n	8003fac <HAL_DMA_Start_IT+0xb8>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d137      	bne.n	8003f9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2202      	movs	r2, #2
 8003f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f000 f9e2 	bl	800430c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4c:	223f      	movs	r2, #63	; 0x3f
 8003f4e:	409a      	lsls	r2, r3
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0216 	orr.w	r2, r2, #22
 8003f62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695a      	ldr	r2, [r3, #20]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f72:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d007      	beq.n	8003f8c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f042 0208 	orr.w	r2, r2, #8
 8003f8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e005      	b.n	8003faa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2280      	movs	r2, #128	; 0x80
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e00c      	b.n	8003fec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2205      	movs	r2, #5
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004004:	4b92      	ldr	r3, [pc, #584]	; (8004250 <HAL_DMA_IRQHandler+0x258>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a92      	ldr	r2, [pc, #584]	; (8004254 <HAL_DMA_IRQHandler+0x25c>)
 800400a:	fba2 2303 	umull	r2, r3, r2, r3
 800400e:	0a9b      	lsrs	r3, r3, #10
 8004010:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004022:	2208      	movs	r2, #8
 8004024:	409a      	lsls	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4013      	ands	r3, r2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d01a      	beq.n	8004064 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0304 	and.w	r3, r3, #4
 8004038:	2b00      	cmp	r3, #0
 800403a:	d013      	beq.n	8004064 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0204 	bic.w	r2, r2, #4
 800404a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004050:	2208      	movs	r2, #8
 8004052:	409a      	lsls	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004068:	2201      	movs	r2, #1
 800406a:	409a      	lsls	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4013      	ands	r3, r2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d012      	beq.n	800409a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004086:	2201      	movs	r2, #1
 8004088:	409a      	lsls	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	f043 0202 	orr.w	r2, r3, #2
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800409e:	2204      	movs	r2, #4
 80040a0:	409a      	lsls	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4013      	ands	r3, r2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d012      	beq.n	80040d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00b      	beq.n	80040d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	2204      	movs	r2, #4
 80040be:	409a      	lsls	r2, r3
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	f043 0204 	orr.w	r2, r3, #4
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d4:	2210      	movs	r2, #16
 80040d6:	409a      	lsls	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4013      	ands	r3, r2
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d043      	beq.n	8004168 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d03c      	beq.n	8004168 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f2:	2210      	movs	r2, #16
 80040f4:	409a      	lsls	r2, r3
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d018      	beq.n	800413a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d108      	bne.n	8004128 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d024      	beq.n	8004168 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	4798      	blx	r3
 8004126:	e01f      	b.n	8004168 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01b      	beq.n	8004168 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	4798      	blx	r3
 8004138:	e016      	b.n	8004168 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004144:	2b00      	cmp	r3, #0
 8004146:	d107      	bne.n	8004158 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f022 0208 	bic.w	r2, r2, #8
 8004156:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416c:	2220      	movs	r2, #32
 800416e:	409a      	lsls	r2, r3
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 808e 	beq.w	8004296 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 8086 	beq.w	8004296 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	2220      	movs	r2, #32
 8004190:	409a      	lsls	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b05      	cmp	r3, #5
 80041a0:	d136      	bne.n	8004210 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f022 0216 	bic.w	r2, r2, #22
 80041b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	695a      	ldr	r2, [r3, #20]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d103      	bne.n	80041d2 <HAL_DMA_IRQHandler+0x1da>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0208 	bic.w	r2, r2, #8
 80041e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e6:	223f      	movs	r2, #63	; 0x3f
 80041e8:	409a      	lsls	r2, r3
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	2b00      	cmp	r3, #0
 8004204:	d07d      	beq.n	8004302 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
        }
        return;
 800420e:	e078      	b.n	8004302 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d01c      	beq.n	8004258 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d108      	bne.n	800423e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	2b00      	cmp	r3, #0
 8004232:	d030      	beq.n	8004296 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	4798      	blx	r3
 800423c:	e02b      	b.n	8004296 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d027      	beq.n	8004296 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4798      	blx	r3
 800424e:	e022      	b.n	8004296 <HAL_DMA_IRQHandler+0x29e>
 8004250:	20000008 	.word	0x20000008
 8004254:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10f      	bne.n	8004286 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 0210 	bic.w	r2, r2, #16
 8004274:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d003      	beq.n	8004296 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800429a:	2b00      	cmp	r3, #0
 800429c:	d032      	beq.n	8004304 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d022      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2205      	movs	r2, #5
 80042ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3301      	adds	r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d307      	bcc.n	80042de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1f2      	bne.n	80042c2 <HAL_DMA_IRQHandler+0x2ca>
 80042dc:	e000      	b.n	80042e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80042de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4798      	blx	r3
 8004300:	e000      	b.n	8004304 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004302:	bf00      	nop
    }
  }
}
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop

0800430c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004328:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b40      	cmp	r3, #64	; 0x40
 8004338:	d108      	bne.n	800434c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800434a:	e007      	b.n	800435c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	b2db      	uxtb	r3, r3
 8004376:	3b10      	subs	r3, #16
 8004378:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <DMA_CalcBaseAndBitshift+0x60>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	091b      	lsrs	r3, r3, #4
 8004380:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004382:	4a12      	ldr	r2, [pc, #72]	; (80043cc <DMA_CalcBaseAndBitshift+0x64>)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	461a      	mov	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b03      	cmp	r3, #3
 8004394:	d908      	bls.n	80043a8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	4b0c      	ldr	r3, [pc, #48]	; (80043d0 <DMA_CalcBaseAndBitshift+0x68>)
 800439e:	4013      	ands	r3, r2
 80043a0:	1d1a      	adds	r2, r3, #4
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	659a      	str	r2, [r3, #88]	; 0x58
 80043a6:	e006      	b.n	80043b6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <DMA_CalcBaseAndBitshift+0x68>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	aaaaaaab 	.word	0xaaaaaaab
 80043cc:	0800a1d0 	.word	0x0800a1d0
 80043d0:	fffffc00 	.word	0xfffffc00

080043d4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d11f      	bne.n	800442e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d855      	bhi.n	80044a0 <DMA_CheckFifoParam+0xcc>
 80043f4:	a201      	add	r2, pc, #4	; (adr r2, 80043fc <DMA_CheckFifoParam+0x28>)
 80043f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fa:	bf00      	nop
 80043fc:	0800440d 	.word	0x0800440d
 8004400:	0800441f 	.word	0x0800441f
 8004404:	0800440d 	.word	0x0800440d
 8004408:	080044a1 	.word	0x080044a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d045      	beq.n	80044a4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800441c:	e042      	b.n	80044a4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004426:	d13f      	bne.n	80044a8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800442c:	e03c      	b.n	80044a8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004436:	d121      	bne.n	800447c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b03      	cmp	r3, #3
 800443c:	d836      	bhi.n	80044ac <DMA_CheckFifoParam+0xd8>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <DMA_CheckFifoParam+0x70>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004455 	.word	0x08004455
 8004448:	0800445b 	.word	0x0800445b
 800444c:	08004455 	.word	0x08004455
 8004450:	0800446d 	.word	0x0800446d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	73fb      	strb	r3, [r7, #15]
      break;
 8004458:	e02f      	b.n	80044ba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d024      	beq.n	80044b0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800446a:	e021      	b.n	80044b0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004474:	d11e      	bne.n	80044b4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800447a:	e01b      	b.n	80044b4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	2b02      	cmp	r3, #2
 8004480:	d902      	bls.n	8004488 <DMA_CheckFifoParam+0xb4>
 8004482:	2b03      	cmp	r3, #3
 8004484:	d003      	beq.n	800448e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004486:	e018      	b.n	80044ba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
      break;
 800448c:	e015      	b.n	80044ba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d00e      	beq.n	80044b8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	73fb      	strb	r3, [r7, #15]
      break;
 800449e:	e00b      	b.n	80044b8 <DMA_CheckFifoParam+0xe4>
      break;
 80044a0:	bf00      	nop
 80044a2:	e00a      	b.n	80044ba <DMA_CheckFifoParam+0xe6>
      break;
 80044a4:	bf00      	nop
 80044a6:	e008      	b.n	80044ba <DMA_CheckFifoParam+0xe6>
      break;
 80044a8:	bf00      	nop
 80044aa:	e006      	b.n	80044ba <DMA_CheckFifoParam+0xe6>
      break;
 80044ac:	bf00      	nop
 80044ae:	e004      	b.n	80044ba <DMA_CheckFifoParam+0xe6>
      break;
 80044b0:	bf00      	nop
 80044b2:	e002      	b.n	80044ba <DMA_CheckFifoParam+0xe6>
      break;   
 80044b4:	bf00      	nop
 80044b6:	e000      	b.n	80044ba <DMA_CheckFifoParam+0xe6>
      break;
 80044b8:	bf00      	nop
    }
  } 
  
  return status; 
 80044ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b089      	sub	sp, #36	; 0x24
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80044de:	2300      	movs	r3, #0
 80044e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
 80044e6:	e175      	b.n	80047d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80044e8:	2201      	movs	r2, #1
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	fa02 f303 	lsl.w	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4013      	ands	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	429a      	cmp	r2, r3
 8004502:	f040 8164 	bne.w	80047ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d00b      	beq.n	8004526 <HAL_GPIO_Init+0x5e>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b02      	cmp	r3, #2
 8004514:	d007      	beq.n	8004526 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800451a:	2b11      	cmp	r3, #17
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b12      	cmp	r3, #18
 8004524:	d130      	bne.n	8004588 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	2203      	movs	r2, #3
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800455c:	2201      	movs	r2, #1
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	43db      	mvns	r3, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4013      	ands	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	091b      	lsrs	r3, r3, #4
 8004572:	f003 0201 	and.w	r2, r3, #1
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4313      	orrs	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	2203      	movs	r2, #3
 8004594:	fa02 f303 	lsl.w	r3, r2, r3
 8004598:	43db      	mvns	r3, r3
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	4013      	ands	r3, r2
 800459e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	2b02      	cmp	r3, #2
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_Init+0x100>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b12      	cmp	r3, #18
 80045c6:	d123      	bne.n	8004610 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	08da      	lsrs	r2, r3, #3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3208      	adds	r2, #8
 80045d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	f003 0307 	and.w	r3, r3, #7
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	220f      	movs	r2, #15
 80045e0:	fa02 f303 	lsl.w	r3, r2, r3
 80045e4:	43db      	mvns	r3, r3
 80045e6:	69ba      	ldr	r2, [r7, #24]
 80045e8:	4013      	ands	r3, r2
 80045ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	08da      	lsrs	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	3208      	adds	r2, #8
 800460a:	69b9      	ldr	r1, [r7, #24]
 800460c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	2203      	movs	r2, #3
 800461c:	fa02 f303 	lsl.w	r3, r2, r3
 8004620:	43db      	mvns	r3, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4013      	ands	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 0203 	and.w	r2, r3, #3
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4313      	orrs	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80be 	beq.w	80047ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004652:	4b65      	ldr	r3, [pc, #404]	; (80047e8 <HAL_GPIO_Init+0x320>)
 8004654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004656:	4a64      	ldr	r2, [pc, #400]	; (80047e8 <HAL_GPIO_Init+0x320>)
 8004658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800465c:	6453      	str	r3, [r2, #68]	; 0x44
 800465e:	4b62      	ldr	r3, [pc, #392]	; (80047e8 <HAL_GPIO_Init+0x320>)
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800466a:	4a60      	ldr	r2, [pc, #384]	; (80047ec <HAL_GPIO_Init+0x324>)
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	089b      	lsrs	r3, r3, #2
 8004670:	3302      	adds	r3, #2
 8004672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004676:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 0303 	and.w	r3, r3, #3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	220f      	movs	r2, #15
 8004682:	fa02 f303 	lsl.w	r3, r2, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4013      	ands	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a57      	ldr	r2, [pc, #348]	; (80047f0 <HAL_GPIO_Init+0x328>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d037      	beq.n	8004706 <HAL_GPIO_Init+0x23e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a56      	ldr	r2, [pc, #344]	; (80047f4 <HAL_GPIO_Init+0x32c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d031      	beq.n	8004702 <HAL_GPIO_Init+0x23a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a55      	ldr	r2, [pc, #340]	; (80047f8 <HAL_GPIO_Init+0x330>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d02b      	beq.n	80046fe <HAL_GPIO_Init+0x236>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a54      	ldr	r2, [pc, #336]	; (80047fc <HAL_GPIO_Init+0x334>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d025      	beq.n	80046fa <HAL_GPIO_Init+0x232>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a53      	ldr	r2, [pc, #332]	; (8004800 <HAL_GPIO_Init+0x338>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d01f      	beq.n	80046f6 <HAL_GPIO_Init+0x22e>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_GPIO_Init+0x33c>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d019      	beq.n	80046f2 <HAL_GPIO_Init+0x22a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a51      	ldr	r2, [pc, #324]	; (8004808 <HAL_GPIO_Init+0x340>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <HAL_GPIO_Init+0x226>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4a50      	ldr	r2, [pc, #320]	; (800480c <HAL_GPIO_Init+0x344>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00d      	beq.n	80046ea <HAL_GPIO_Init+0x222>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a4f      	ldr	r2, [pc, #316]	; (8004810 <HAL_GPIO_Init+0x348>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d007      	beq.n	80046e6 <HAL_GPIO_Init+0x21e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	4a4e      	ldr	r2, [pc, #312]	; (8004814 <HAL_GPIO_Init+0x34c>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d101      	bne.n	80046e2 <HAL_GPIO_Init+0x21a>
 80046de:	2309      	movs	r3, #9
 80046e0:	e012      	b.n	8004708 <HAL_GPIO_Init+0x240>
 80046e2:	230a      	movs	r3, #10
 80046e4:	e010      	b.n	8004708 <HAL_GPIO_Init+0x240>
 80046e6:	2308      	movs	r3, #8
 80046e8:	e00e      	b.n	8004708 <HAL_GPIO_Init+0x240>
 80046ea:	2307      	movs	r3, #7
 80046ec:	e00c      	b.n	8004708 <HAL_GPIO_Init+0x240>
 80046ee:	2306      	movs	r3, #6
 80046f0:	e00a      	b.n	8004708 <HAL_GPIO_Init+0x240>
 80046f2:	2305      	movs	r3, #5
 80046f4:	e008      	b.n	8004708 <HAL_GPIO_Init+0x240>
 80046f6:	2304      	movs	r3, #4
 80046f8:	e006      	b.n	8004708 <HAL_GPIO_Init+0x240>
 80046fa:	2303      	movs	r3, #3
 80046fc:	e004      	b.n	8004708 <HAL_GPIO_Init+0x240>
 80046fe:	2302      	movs	r3, #2
 8004700:	e002      	b.n	8004708 <HAL_GPIO_Init+0x240>
 8004702:	2301      	movs	r3, #1
 8004704:	e000      	b.n	8004708 <HAL_GPIO_Init+0x240>
 8004706:	2300      	movs	r3, #0
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	f002 0203 	and.w	r2, r2, #3
 800470e:	0092      	lsls	r2, r2, #2
 8004710:	4093      	lsls	r3, r2
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	4313      	orrs	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004718:	4934      	ldr	r1, [pc, #208]	; (80047ec <HAL_GPIO_Init+0x324>)
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	089b      	lsrs	r3, r3, #2
 800471e:	3302      	adds	r3, #2
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004726:	4b3c      	ldr	r3, [pc, #240]	; (8004818 <HAL_GPIO_Init+0x350>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800474a:	4a33      	ldr	r2, [pc, #204]	; (8004818 <HAL_GPIO_Init+0x350>)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <HAL_GPIO_Init+0x350>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004774:	4a28      	ldr	r2, [pc, #160]	; (8004818 <HAL_GPIO_Init+0x350>)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800477a:	4b27      	ldr	r3, [pc, #156]	; (8004818 <HAL_GPIO_Init+0x350>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	43db      	mvns	r3, r3
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	4013      	ands	r3, r2
 8004788:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800479e:	4a1e      	ldr	r2, [pc, #120]	; (8004818 <HAL_GPIO_Init+0x350>)
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047a4:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <HAL_GPIO_Init+0x350>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80047c8:	4a13      	ldr	r2, [pc, #76]	; (8004818 <HAL_GPIO_Init+0x350>)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	3301      	adds	r3, #1
 80047d2:	61fb      	str	r3, [r7, #28]
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	2b0f      	cmp	r3, #15
 80047d8:	f67f ae86 	bls.w	80044e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80047dc:	bf00      	nop
 80047de:	3724      	adds	r7, #36	; 0x24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40013800 	.word	0x40013800
 80047f0:	40020000 	.word	0x40020000
 80047f4:	40020400 	.word	0x40020400
 80047f8:	40020800 	.word	0x40020800
 80047fc:	40020c00 	.word	0x40020c00
 8004800:	40021000 	.word	0x40021000
 8004804:	40021400 	.word	0x40021400
 8004808:	40021800 	.word	0x40021800
 800480c:	40021c00 	.word	0x40021c00
 8004810:	40022000 	.word	0x40022000
 8004814:	40022400 	.word	0x40022400
 8004818:	40013c00 	.word	0x40013c00

0800481c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	460b      	mov	r3, r1
 8004826:	807b      	strh	r3, [r7, #2]
 8004828:	4613      	mov	r3, r2
 800482a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800482c:	787b      	ldrb	r3, [r7, #1]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d003      	beq.n	800483a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004832:	887a      	ldrh	r2, [r7, #2]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004838:	e003      	b.n	8004842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800483a:	887b      	ldrh	r3, [r7, #2]
 800483c:	041a      	lsls	r2, r3, #16
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	619a      	str	r2, [r3, #24]
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e07f      	b.n	8004962 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fd ff9e 	bl	80027b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2224      	movs	r2, #36	; 0x24
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0201 	bic.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685a      	ldr	r2, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80048a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d107      	bne.n	80048ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	e006      	b.n	80048d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689a      	ldr	r2, [r3, #8]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d104      	bne.n	80048ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6859      	ldr	r1, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	4b1d      	ldr	r3, [pc, #116]	; (800496c <HAL_I2C_Init+0x11c>)
 80048f6:	430b      	orrs	r3, r1
 80048f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004908:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	ea42 0103 	orr.w	r1, r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	021a      	lsls	r2, r3, #8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69d9      	ldr	r1, [r3, #28]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0201 	orr.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2220      	movs	r2, #32
 800494e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	02008000 	.word	0x02008000

08004970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b20      	cmp	r3, #32
 8004984:	d138      	bne.n	80049f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004990:	2302      	movs	r3, #2
 8004992:	e032      	b.n	80049fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	; 0x24
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0201 	bic.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6819      	ldr	r1, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e000      	b.n	80049fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
  }
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d139      	bne.n	8004a90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e033      	b.n	8004a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2224      	movs	r2, #36	; 0x24
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e000      	b.n	8004a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a90:	2302      	movs	r3, #2
  }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aa4:	4b05      	ldr	r3, [pc, #20]	; (8004abc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a04      	ldr	r2, [pc, #16]	; (8004abc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aae:	6013      	str	r3, [r2, #0]
}
 8004ab0:	bf00      	nop
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40007000 	.word	0x40007000

08004ac0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	4b23      	ldr	r3, [pc, #140]	; (8004b58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	4a22      	ldr	r2, [pc, #136]	; (8004b58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad6:	4b20      	ldr	r3, [pc, #128]	; (8004b58 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004ae2:	4b1e      	ldr	r3, [pc, #120]	; (8004b5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aee:	f7fe fc07 	bl	8003300 <HAL_GetTick>
 8004af2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004af4:	e009      	b.n	8004b0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004af6:	f7fe fc03 	bl	8003300 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b04:	d901      	bls.n	8004b0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e022      	b.n	8004b50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004b0a:	4b14      	ldr	r3, [pc, #80]	; (8004b5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b16:	d1ee      	bne.n	8004af6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004b18:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a0f      	ldr	r2, [pc, #60]	; (8004b5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b24:	f7fe fbec 	bl	8003300 <HAL_GetTick>
 8004b28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b2a:	e009      	b.n	8004b40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004b2c:	f7fe fbe8 	bl	8003300 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b3a:	d901      	bls.n	8004b40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e007      	b.n	8004b50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b4c:	d1ee      	bne.n	8004b2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	40007000 	.word	0x40007000

08004b60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e29b      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8087 	beq.w	8004c92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b84:	4b96      	ldr	r3, [pc, #600]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 030c 	and.w	r3, r3, #12
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d00c      	beq.n	8004baa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b90:	4b93      	ldr	r3, [pc, #588]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 030c 	and.w	r3, r3, #12
 8004b98:	2b08      	cmp	r3, #8
 8004b9a:	d112      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x62>
 8004b9c:	4b90      	ldr	r3, [pc, #576]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ba8:	d10b      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004baa:	4b8d      	ldr	r3, [pc, #564]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d06c      	beq.n	8004c90 <HAL_RCC_OscConfig+0x130>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d168      	bne.n	8004c90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e275      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bca:	d106      	bne.n	8004bda <HAL_RCC_OscConfig+0x7a>
 8004bcc:	4b84      	ldr	r3, [pc, #528]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a83      	ldr	r2, [pc, #524]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e02e      	b.n	8004c38 <HAL_RCC_OscConfig+0xd8>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCC_OscConfig+0x9c>
 8004be2:	4b7f      	ldr	r3, [pc, #508]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a7e      	ldr	r2, [pc, #504]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	4b7c      	ldr	r3, [pc, #496]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a7b      	ldr	r2, [pc, #492]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e01d      	b.n	8004c38 <HAL_RCC_OscConfig+0xd8>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCC_OscConfig+0xc0>
 8004c06:	4b76      	ldr	r3, [pc, #472]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a75      	ldr	r2, [pc, #468]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	4b73      	ldr	r3, [pc, #460]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a72      	ldr	r2, [pc, #456]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCC_OscConfig+0xd8>
 8004c20:	4b6f      	ldr	r3, [pc, #444]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a6e      	ldr	r2, [pc, #440]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	4b6c      	ldr	r3, [pc, #432]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a6b      	ldr	r2, [pc, #428]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d013      	beq.n	8004c68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fe fb5e 	bl	8003300 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fe fb5a 	bl	8003300 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e229      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b61      	ldr	r3, [pc, #388]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0xe8>
 8004c66:	e014      	b.n	8004c92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c68:	f7fe fb4a 	bl	8003300 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c70:	f7fe fb46 	bl	8003300 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	; 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e215      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c82:	4b57      	ldr	r3, [pc, #348]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x110>
 8004c8e:	e000      	b.n	8004c92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d069      	beq.n	8004d72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c9e:	4b50      	ldr	r3, [pc, #320]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004caa:	4b4d      	ldr	r3, [pc, #308]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d11c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x190>
 8004cb6:	4b4a      	ldr	r3, [pc, #296]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc2:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_RCC_OscConfig+0x17a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d001      	beq.n	8004cda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e1e9      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cda:	4b41      	ldr	r3, [pc, #260]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	493d      	ldr	r1, [pc, #244]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cee:	e040      	b.n	8004d72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d023      	beq.n	8004d40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf8:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a38      	ldr	r2, [pc, #224]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fe fafc 	bl	8003300 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d0c:	f7fe faf8 	bl	8003300 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e1c7      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d1e:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2a:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	00db      	lsls	r3, r3, #3
 8004d38:	4929      	ldr	r1, [pc, #164]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	600b      	str	r3, [r1, #0]
 8004d3e:	e018      	b.n	8004d72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d40:	4b27      	ldr	r3, [pc, #156]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a26      	ldr	r2, [pc, #152]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7fe fad8 	bl	8003300 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d54:	f7fe fad4 	bl	8003300 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e1a3      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d66:	4b1e      	ldr	r3, [pc, #120]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d038      	beq.n	8004df0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d019      	beq.n	8004dba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d86:	4b16      	ldr	r3, [pc, #88]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d8a:	4a15      	ldr	r2, [pc, #84]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004d8c:	f043 0301 	orr.w	r3, r3, #1
 8004d90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d92:	f7fe fab5 	bl	8003300 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9a:	f7fe fab1 	bl	8003300 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e180      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dac:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0f0      	beq.n	8004d9a <HAL_RCC_OscConfig+0x23a>
 8004db8:	e01a      	b.n	8004df0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dba:	4b09      	ldr	r3, [pc, #36]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbe:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <HAL_RCC_OscConfig+0x280>)
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc6:	f7fe fa9b 	bl	8003300 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dce:	f7fe fa97 	bl	8003300 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d903      	bls.n	8004de4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e166      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
 8004de0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de4:	4b92      	ldr	r3, [pc, #584]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1ee      	bne.n	8004dce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80a4 	beq.w	8004f46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dfe:	4b8c      	ldr	r3, [pc, #560]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10d      	bne.n	8004e26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e0a:	4b89      	ldr	r3, [pc, #548]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	4a88      	ldr	r2, [pc, #544]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e14:	6413      	str	r3, [r2, #64]	; 0x40
 8004e16:	4b86      	ldr	r3, [pc, #536]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1e:	60bb      	str	r3, [r7, #8]
 8004e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e22:	2301      	movs	r3, #1
 8004e24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e26:	4b83      	ldr	r3, [pc, #524]	; (8005034 <HAL_RCC_OscConfig+0x4d4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d118      	bne.n	8004e64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004e32:	4b80      	ldr	r3, [pc, #512]	; (8005034 <HAL_RCC_OscConfig+0x4d4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a7f      	ldr	r2, [pc, #508]	; (8005034 <HAL_RCC_OscConfig+0x4d4>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e3e:	f7fe fa5f 	bl	8003300 <HAL_GetTick>
 8004e42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e44:	e008      	b.n	8004e58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e46:	f7fe fa5b 	bl	8003300 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b64      	cmp	r3, #100	; 0x64
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e12a      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e58:	4b76      	ldr	r3, [pc, #472]	; (8005034 <HAL_RCC_OscConfig+0x4d4>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0f0      	beq.n	8004e46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d106      	bne.n	8004e7a <HAL_RCC_OscConfig+0x31a>
 8004e6c:	4b70      	ldr	r3, [pc, #448]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	4a6f      	ldr	r2, [pc, #444]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004e72:	f043 0301 	orr.w	r3, r3, #1
 8004e76:	6713      	str	r3, [r2, #112]	; 0x70
 8004e78:	e02d      	b.n	8004ed6 <HAL_RCC_OscConfig+0x376>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x33c>
 8004e82:	4b6b      	ldr	r3, [pc, #428]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e86:	4a6a      	ldr	r2, [pc, #424]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e8e:	4b68      	ldr	r3, [pc, #416]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a67      	ldr	r2, [pc, #412]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004e94:	f023 0304 	bic.w	r3, r3, #4
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9a:	e01c      	b.n	8004ed6 <HAL_RCC_OscConfig+0x376>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	2b05      	cmp	r3, #5
 8004ea2:	d10c      	bne.n	8004ebe <HAL_RCC_OscConfig+0x35e>
 8004ea4:	4b62      	ldr	r3, [pc, #392]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	4a61      	ldr	r2, [pc, #388]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004eaa:	f043 0304 	orr.w	r3, r3, #4
 8004eae:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb0:	4b5f      	ldr	r3, [pc, #380]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	4a5e      	ldr	r2, [pc, #376]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	6713      	str	r3, [r2, #112]	; 0x70
 8004ebc:	e00b      	b.n	8004ed6 <HAL_RCC_OscConfig+0x376>
 8004ebe:	4b5c      	ldr	r3, [pc, #368]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	4a5b      	ldr	r2, [pc, #364]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004ec4:	f023 0301 	bic.w	r3, r3, #1
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eca:	4b59      	ldr	r3, [pc, #356]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	4a58      	ldr	r2, [pc, #352]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004ed0:	f023 0304 	bic.w	r3, r3, #4
 8004ed4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d015      	beq.n	8004f0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ede:	f7fe fa0f 	bl	8003300 <HAL_GetTick>
 8004ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee4:	e00a      	b.n	8004efc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee6:	f7fe fa0b 	bl	8003300 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e0d8      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004efc:	4b4c      	ldr	r3, [pc, #304]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0ee      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x386>
 8004f08:	e014      	b.n	8004f34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0a:	f7fe f9f9 	bl	8003300 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f10:	e00a      	b.n	8004f28 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f12:	f7fe f9f5 	bl	8003300 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e0c2      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f28:	4b41      	ldr	r3, [pc, #260]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1ee      	bne.n	8004f12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f34:	7dfb      	ldrb	r3, [r7, #23]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d105      	bne.n	8004f46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f3a:	4b3d      	ldr	r3, [pc, #244]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	4a3c      	ldr	r2, [pc, #240]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 80ae 	beq.w	80050ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f50:	4b37      	ldr	r3, [pc, #220]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f003 030c 	and.w	r3, r3, #12
 8004f58:	2b08      	cmp	r3, #8
 8004f5a:	d06d      	beq.n	8005038 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d14b      	bne.n	8004ffc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f64:	4b32      	ldr	r3, [pc, #200]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a31      	ldr	r2, [pc, #196]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004f6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f70:	f7fe f9c6 	bl	8003300 <HAL_GetTick>
 8004f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f76:	e008      	b.n	8004f8a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f78:	f7fe f9c2 	bl	8003300 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d901      	bls.n	8004f8a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e091      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8a:	4b29      	ldr	r3, [pc, #164]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f0      	bne.n	8004f78 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	69da      	ldr	r2, [r3, #28]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa4:	019b      	lsls	r3, r3, #6
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fac:	085b      	lsrs	r3, r3, #1
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	041b      	lsls	r3, r3, #16
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	061b      	lsls	r3, r3, #24
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	071b      	lsls	r3, r3, #28
 8004fc2:	491b      	ldr	r1, [pc, #108]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc8:	4b19      	ldr	r3, [pc, #100]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a18      	ldr	r2, [pc, #96]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004fce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd4:	f7fe f994 	bl	8003300 <HAL_GetTick>
 8004fd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7fe f990 	bl	8003300 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e05f      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fee:	4b10      	ldr	r3, [pc, #64]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x47c>
 8004ffa:	e057      	b.n	80050ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffc:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a0b      	ldr	r2, [pc, #44]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8005002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005006:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7fe f97a 	bl	8003300 <HAL_GetTick>
 800500c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800500e:	e008      	b.n	8005022 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005010:	f7fe f976 	bl	8003300 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e045      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005022:	4b03      	ldr	r3, [pc, #12]	; (8005030 <HAL_RCC_OscConfig+0x4d0>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d1f0      	bne.n	8005010 <HAL_RCC_OscConfig+0x4b0>
 800502e:	e03d      	b.n	80050ac <HAL_RCC_OscConfig+0x54c>
 8005030:	40023800 	.word	0x40023800
 8005034:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005038:	4b1f      	ldr	r3, [pc, #124]	; (80050b8 <HAL_RCC_OscConfig+0x558>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d030      	beq.n	80050a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d129      	bne.n	80050a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505e:	429a      	cmp	r2, r3
 8005060:	d122      	bne.n	80050a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800506e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005070:	4293      	cmp	r3, r2
 8005072:	d119      	bne.n	80050a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	3b01      	subs	r3, #1
 8005082:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d10f      	bne.n	80050a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d107      	bne.n	80050a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e000      	b.n	80050ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3718      	adds	r7, #24
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40023800 	.word	0x40023800

080050bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e0d0      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050d4:	4b6a      	ldr	r3, [pc, #424]	; (8005280 <HAL_RCC_ClockConfig+0x1c4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 030f 	and.w	r3, r3, #15
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d910      	bls.n	8005104 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e2:	4b67      	ldr	r3, [pc, #412]	; (8005280 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f023 020f 	bic.w	r2, r3, #15
 80050ea:	4965      	ldr	r1, [pc, #404]	; (8005280 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	4b63      	ldr	r3, [pc, #396]	; (8005280 <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e0b8      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d020      	beq.n	8005152 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800511c:	4b59      	ldr	r3, [pc, #356]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	4a58      	ldr	r2, [pc, #352]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 8005122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005126:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005134:	4b53      	ldr	r3, [pc, #332]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	4a52      	ldr	r2, [pc, #328]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 800513a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800513e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005140:	4b50      	ldr	r3, [pc, #320]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	494d      	ldr	r1, [pc, #308]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d040      	beq.n	80051e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d107      	bne.n	8005176 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005166:	4b47      	ldr	r3, [pc, #284]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d115      	bne.n	800519e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e07f      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d107      	bne.n	800518e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800517e:	4b41      	ldr	r3, [pc, #260]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d109      	bne.n	800519e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e073      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518e:	4b3d      	ldr	r3, [pc, #244]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e06b      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800519e:	4b39      	ldr	r3, [pc, #228]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f023 0203 	bic.w	r2, r3, #3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	4936      	ldr	r1, [pc, #216]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051b0:	f7fe f8a6 	bl	8003300 <HAL_GetTick>
 80051b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b6:	e00a      	b.n	80051ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b8:	f7fe f8a2 	bl	8003300 <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e053      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ce:	4b2d      	ldr	r3, [pc, #180]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	f003 020c 	and.w	r2, r3, #12
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	429a      	cmp	r2, r3
 80051de:	d1eb      	bne.n	80051b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051e0:	4b27      	ldr	r3, [pc, #156]	; (8005280 <HAL_RCC_ClockConfig+0x1c4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d210      	bcs.n	8005210 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ee:	4b24      	ldr	r3, [pc, #144]	; (8005280 <HAL_RCC_ClockConfig+0x1c4>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f023 020f 	bic.w	r2, r3, #15
 80051f6:	4922      	ldr	r1, [pc, #136]	; (8005280 <HAL_RCC_ClockConfig+0x1c4>)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fe:	4b20      	ldr	r3, [pc, #128]	; (8005280 <HAL_RCC_ClockConfig+0x1c4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d001      	beq.n	8005210 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e032      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800521c:	4b19      	ldr	r3, [pc, #100]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4916      	ldr	r1, [pc, #88]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 800522a:	4313      	orrs	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	490e      	ldr	r1, [pc, #56]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800524e:	f000 f821 	bl	8005294 <HAL_RCC_GetSysClockFreq>
 8005252:	4601      	mov	r1, r0
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <HAL_RCC_ClockConfig+0x1cc>)
 8005260:	5cd3      	ldrb	r3, [r2, r3]
 8005262:	fa21 f303 	lsr.w	r3, r1, r3
 8005266:	4a09      	ldr	r2, [pc, #36]	; (800528c <HAL_RCC_ClockConfig+0x1d0>)
 8005268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <HAL_RCC_ClockConfig+0x1d4>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe f802 	bl	8003278 <HAL_InitTick>

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40023c00 	.word	0x40023c00
 8005284:	40023800 	.word	0x40023800
 8005288:	0800a1b8 	.word	0x0800a1b8
 800528c:	20000008 	.word	0x20000008
 8005290:	2000000c 	.word	0x2000000c

08005294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800529a:	2300      	movs	r3, #0
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	2300      	movs	r3, #0
 80052a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052aa:	4b50      	ldr	r3, [pc, #320]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d007      	beq.n	80052c6 <HAL_RCC_GetSysClockFreq+0x32>
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d008      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0x38>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 808d 	bne.w	80053da <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052c0:	4b4b      	ldr	r3, [pc, #300]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80052c2:	60bb      	str	r3, [r7, #8]
      break;
 80052c4:	e08c      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052c6:	4b4b      	ldr	r3, [pc, #300]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80052c8:	60bb      	str	r3, [r7, #8]
      break;
 80052ca:	e089      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052cc:	4b47      	ldr	r3, [pc, #284]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80052d6:	4b45      	ldr	r3, [pc, #276]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d023      	beq.n	800532a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e2:	4b42      	ldr	r3, [pc, #264]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	099b      	lsrs	r3, r3, #6
 80052e8:	f04f 0400 	mov.w	r4, #0
 80052ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	ea03 0501 	and.w	r5, r3, r1
 80052f8:	ea04 0602 	and.w	r6, r4, r2
 80052fc:	4a3d      	ldr	r2, [pc, #244]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80052fe:	fb02 f106 	mul.w	r1, r2, r6
 8005302:	2200      	movs	r2, #0
 8005304:	fb02 f205 	mul.w	r2, r2, r5
 8005308:	440a      	add	r2, r1
 800530a:	493a      	ldr	r1, [pc, #232]	; (80053f4 <HAL_RCC_GetSysClockFreq+0x160>)
 800530c:	fba5 0101 	umull	r0, r1, r5, r1
 8005310:	1853      	adds	r3, r2, r1
 8005312:	4619      	mov	r1, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f04f 0400 	mov.w	r4, #0
 800531a:	461a      	mov	r2, r3
 800531c:	4623      	mov	r3, r4
 800531e:	f7fa fff7 	bl	8000310 <__aeabi_uldivmod>
 8005322:	4603      	mov	r3, r0
 8005324:	460c      	mov	r4, r1
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	e049      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800532a:	4b30      	ldr	r3, [pc, #192]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	099b      	lsrs	r3, r3, #6
 8005330:	f04f 0400 	mov.w	r4, #0
 8005334:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	ea03 0501 	and.w	r5, r3, r1
 8005340:	ea04 0602 	and.w	r6, r4, r2
 8005344:	4629      	mov	r1, r5
 8005346:	4632      	mov	r2, r6
 8005348:	f04f 0300 	mov.w	r3, #0
 800534c:	f04f 0400 	mov.w	r4, #0
 8005350:	0154      	lsls	r4, r2, #5
 8005352:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005356:	014b      	lsls	r3, r1, #5
 8005358:	4619      	mov	r1, r3
 800535a:	4622      	mov	r2, r4
 800535c:	1b49      	subs	r1, r1, r5
 800535e:	eb62 0206 	sbc.w	r2, r2, r6
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	f04f 0400 	mov.w	r4, #0
 800536a:	0194      	lsls	r4, r2, #6
 800536c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005370:	018b      	lsls	r3, r1, #6
 8005372:	1a5b      	subs	r3, r3, r1
 8005374:	eb64 0402 	sbc.w	r4, r4, r2
 8005378:	f04f 0100 	mov.w	r1, #0
 800537c:	f04f 0200 	mov.w	r2, #0
 8005380:	00e2      	lsls	r2, r4, #3
 8005382:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005386:	00d9      	lsls	r1, r3, #3
 8005388:	460b      	mov	r3, r1
 800538a:	4614      	mov	r4, r2
 800538c:	195b      	adds	r3, r3, r5
 800538e:	eb44 0406 	adc.w	r4, r4, r6
 8005392:	f04f 0100 	mov.w	r1, #0
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	02a2      	lsls	r2, r4, #10
 800539c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053a0:	0299      	lsls	r1, r3, #10
 80053a2:	460b      	mov	r3, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	4618      	mov	r0, r3
 80053a8:	4621      	mov	r1, r4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f04f 0400 	mov.w	r4, #0
 80053b0:	461a      	mov	r2, r3
 80053b2:	4623      	mov	r3, r4
 80053b4:	f7fa ffac 	bl	8000310 <__aeabi_uldivmod>
 80053b8:	4603      	mov	r3, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCC_GetSysClockFreq+0x158>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	0c1b      	lsrs	r3, r3, #16
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	3301      	adds	r3, #1
 80053ca:	005b      	lsls	r3, r3, #1
 80053cc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80053d6:	60bb      	str	r3, [r7, #8]
      break;
 80053d8:	e002      	b.n	80053e0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053da:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80053dc:	60bb      	str	r3, [r7, #8]
      break;
 80053de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053e0:	68bb      	ldr	r3, [r7, #8]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ea:	bf00      	nop
 80053ec:	40023800 	.word	0x40023800
 80053f0:	00f42400 	.word	0x00f42400
 80053f4:	00989680 	.word	0x00989680

080053f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053f8:	b480      	push	{r7}
 80053fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053fc:	4b03      	ldr	r3, [pc, #12]	; (800540c <HAL_RCC_GetHCLKFreq+0x14>)
 80053fe:	681b      	ldr	r3, [r3, #0]
}
 8005400:	4618      	mov	r0, r3
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	20000008 	.word	0x20000008

08005410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005414:	f7ff fff0 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005418:	4601      	mov	r1, r0
 800541a:	4b05      	ldr	r3, [pc, #20]	; (8005430 <HAL_RCC_GetPCLK1Freq+0x20>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	0a9b      	lsrs	r3, r3, #10
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4a03      	ldr	r2, [pc, #12]	; (8005434 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005426:	5cd3      	ldrb	r3, [r2, r3]
 8005428:	fa21 f303 	lsr.w	r3, r1, r3
}
 800542c:	4618      	mov	r0, r3
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40023800 	.word	0x40023800
 8005434:	0800a1c8 	.word	0x0800a1c8

08005438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800543c:	f7ff ffdc 	bl	80053f8 <HAL_RCC_GetHCLKFreq>
 8005440:	4601      	mov	r1, r0
 8005442:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0b5b      	lsrs	r3, r3, #13
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	4a03      	ldr	r2, [pc, #12]	; (800545c <HAL_RCC_GetPCLK2Freq+0x24>)
 800544e:	5cd3      	ldrb	r3, [r2, r3]
 8005450:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005454:	4618      	mov	r0, r3
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40023800 	.word	0x40023800
 800545c:	0800a1c8 	.word	0x0800a1c8

08005460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800546c:	2300      	movs	r3, #0
 800546e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d012      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005488:	4b69      	ldr	r3, [pc, #420]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	4a68      	ldr	r2, [pc, #416]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005492:	6093      	str	r3, [r2, #8]
 8005494:	4b66      	ldr	r3, [pc, #408]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800549c:	4964      	ldr	r1, [pc, #400]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80054aa:	2301      	movs	r3, #1
 80054ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d017      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054ba:	4b5d      	ldr	r3, [pc, #372]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	4959      	ldr	r1, [pc, #356]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054d8:	d101      	bne.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80054da:	2301      	movs	r3, #1
 80054dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80054e6:	2301      	movs	r3, #1
 80054e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d017      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054f6:	4b4e      	ldr	r3, [pc, #312]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	494a      	ldr	r1, [pc, #296]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005506:	4313      	orrs	r3, r2
 8005508:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005514:	d101      	bne.n	800551a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005516:	2301      	movs	r3, #1
 8005518:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005522:	2301      	movs	r3, #1
 8005524:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005532:	2301      	movs	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 808b 	beq.w	800565a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005544:	4b3a      	ldr	r3, [pc, #232]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005548:	4a39      	ldr	r2, [pc, #228]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800554e:	6413      	str	r3, [r2, #64]	; 0x40
 8005550:	4b37      	ldr	r3, [pc, #220]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800555c:	4b35      	ldr	r3, [pc, #212]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a34      	ldr	r2, [pc, #208]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005566:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005568:	f7fd feca 	bl	8003300 <HAL_GetTick>
 800556c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005570:	f7fd fec6 	bl	8003300 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	; 0x64
 800557c:	d901      	bls.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e38d      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005582:	4b2c      	ldr	r3, [pc, #176]	; (8005634 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800558e:	4b28      	ldr	r3, [pc, #160]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005596:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d035      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055a6:	693a      	ldr	r2, [r7, #16]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d02e      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055ac:	4b20      	ldr	r3, [pc, #128]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055b6:	4b1e      	ldr	r3, [pc, #120]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ba:	4a1d      	ldr	r2, [pc, #116]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055c2:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c6:	4a1a      	ldr	r2, [pc, #104]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80055ce:	4a18      	ldr	r2, [pc, #96]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055d4:	4b16      	ldr	r3, [pc, #88]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d114      	bne.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055e0:	f7fd fe8e 	bl	8003300 <HAL_GetTick>
 80055e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e6:	e00a      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055e8:	f7fd fe8a 	bl	8003300 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e34f      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d0ee      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800560e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005612:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005616:	d111      	bne.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005618:	4b05      	ldr	r3, [pc, #20]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005626:	400b      	ands	r3, r1
 8005628:	4901      	ldr	r1, [pc, #4]	; (8005630 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800562a:	4313      	orrs	r3, r2
 800562c:	608b      	str	r3, [r1, #8]
 800562e:	e00b      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005630:	40023800 	.word	0x40023800
 8005634:	40007000 	.word	0x40007000
 8005638:	0ffffcff 	.word	0x0ffffcff
 800563c:	4bb3      	ldr	r3, [pc, #716]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	4ab2      	ldr	r2, [pc, #712]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005642:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005646:	6093      	str	r3, [r2, #8]
 8005648:	4bb0      	ldr	r3, [pc, #704]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800564a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005654:	49ad      	ldr	r1, [pc, #692]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005656:	4313      	orrs	r3, r2
 8005658:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b00      	cmp	r3, #0
 8005664:	d010      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005666:	4ba9      	ldr	r3, [pc, #676]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800566c:	4aa7      	ldr	r2, [pc, #668]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800566e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005672:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005676:	4ba5      	ldr	r3, [pc, #660]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005678:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	49a2      	ldr	r1, [pc, #648]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005694:	4b9d      	ldr	r3, [pc, #628]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056a2:	499a      	ldr	r1, [pc, #616]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056b6:	4b95      	ldr	r3, [pc, #596]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056c4:	4991      	ldr	r1, [pc, #580]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056d8:	4b8c      	ldr	r3, [pc, #560]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e6:	4989      	ldr	r1, [pc, #548]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056fa:	4b84      	ldr	r3, [pc, #528]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005700:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005708:	4980      	ldr	r1, [pc, #512]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800571c:	4b7b      	ldr	r3, [pc, #492]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800571e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005722:	f023 0203 	bic.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800572a:	4978      	ldr	r1, [pc, #480]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800573e:	4b73      	ldr	r3, [pc, #460]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005740:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005744:	f023 020c 	bic.w	r2, r3, #12
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800574c:	496f      	ldr	r1, [pc, #444]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005760:	4b6a      	ldr	r3, [pc, #424]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005766:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800576e:	4967      	ldr	r1, [pc, #412]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005782:	4b62      	ldr	r3, [pc, #392]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005788:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	495e      	ldr	r1, [pc, #376]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00a      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80057a4:	4b59      	ldr	r3, [pc, #356]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b2:	4956      	ldr	r1, [pc, #344]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00a      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80057c6:	4b51      	ldr	r3, [pc, #324]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d4:	494d      	ldr	r1, [pc, #308]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00a      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057e8:	4b48      	ldr	r3, [pc, #288]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f6:	4945      	ldr	r1, [pc, #276]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800580a:	4b40      	ldr	r3, [pc, #256]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005810:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005818:	493c      	ldr	r1, [pc, #240]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800582c:	4b37      	ldr	r3, [pc, #220]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800583a:	4934      	ldr	r1, [pc, #208]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d011      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800584e:	4b2f      	ldr	r3, [pc, #188]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005854:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800585c:	492b      	ldr	r1, [pc, #172]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005868:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800586c:	d101      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800586e:	2301      	movs	r3, #1
 8005870:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f003 0308 	and.w	r3, r3, #8
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800587e:	2301      	movs	r3, #1
 8005880:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800588e:	4b1f      	ldr	r3, [pc, #124]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005894:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800589c:	491b      	ldr	r1, [pc, #108]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058c0:	4912      	ldr	r1, [pc, #72]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00b      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80058d4:	4b0d      	ldr	r3, [pc, #52]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e4:	4909      	ldr	r1, [pc, #36]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00f      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80058f8:	4b04      	ldr	r3, [pc, #16]	; (800590c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	e002      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800590a:	bf00      	nop
 800590c:	40023800 	.word	0x40023800
 8005910:	4985      	ldr	r1, [pc, #532]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005924:	4b80      	ldr	r3, [pc, #512]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800592a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005934:	497c      	ldr	r1, [pc, #496]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d005      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800594a:	f040 80d6 	bne.w	8005afa <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800594e:	4b76      	ldr	r3, [pc, #472]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a75      	ldr	r2, [pc, #468]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005954:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800595a:	f7fd fcd1 	bl	8003300 <HAL_GetTick>
 800595e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005960:	e008      	b.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005962:	f7fd fccd 	bl	8003300 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	2b64      	cmp	r3, #100	; 0x64
 800596e:	d901      	bls.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e194      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005974:	4b6c      	ldr	r3, [pc, #432]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1f0      	bne.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	2b00      	cmp	r3, #0
 800598a:	d021      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005990:	2b00      	cmp	r3, #0
 8005992:	d11d      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005994:	4b64      	ldr	r3, [pc, #400]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800599a:	0c1b      	lsrs	r3, r3, #16
 800599c:	f003 0303 	and.w	r3, r3, #3
 80059a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059a2:	4b61      	ldr	r3, [pc, #388]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059a8:	0e1b      	lsrs	r3, r3, #24
 80059aa:	f003 030f 	and.w	r3, r3, #15
 80059ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	019a      	lsls	r2, r3, #6
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	431a      	orrs	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	061b      	lsls	r3, r3, #24
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	071b      	lsls	r3, r3, #28
 80059c8:	4957      	ldr	r1, [pc, #348]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d004      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80059e4:	d00a      	beq.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d02e      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059fa:	d129      	bne.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80059fc:	4b4a      	ldr	r3, [pc, #296]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a02:	0c1b      	lsrs	r3, r3, #16
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a0a:	4b47      	ldr	r3, [pc, #284]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a10:	0f1b      	lsrs	r3, r3, #28
 8005a12:	f003 0307 	and.w	r3, r3, #7
 8005a16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	019a      	lsls	r2, r3, #6
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	041b      	lsls	r3, r3, #16
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	061b      	lsls	r3, r3, #24
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	071b      	lsls	r3, r3, #28
 8005a30:	493d      	ldr	r1, [pc, #244]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005a38:	4b3b      	ldr	r3, [pc, #236]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3e:	f023 021f 	bic.w	r2, r3, #31
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a46:	3b01      	subs	r3, #1
 8005a48:	4937      	ldr	r1, [pc, #220]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01d      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005a5c:	4b32      	ldr	r3, [pc, #200]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a62:	0e1b      	lsrs	r3, r3, #24
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005a6a:	4b2f      	ldr	r3, [pc, #188]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a70:	0f1b      	lsrs	r3, r3, #28
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	019a      	lsls	r2, r3, #6
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	041b      	lsls	r3, r3, #16
 8005a84:	431a      	orrs	r2, r3
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	061b      	lsls	r3, r3, #24
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	071b      	lsls	r3, r3, #28
 8005a90:	4925      	ldr	r1, [pc, #148]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d011      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	019a      	lsls	r2, r3, #6
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	041b      	lsls	r3, r3, #16
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68db      	ldr	r3, [r3, #12]
 8005ab6:	061b      	lsls	r3, r3, #24
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	071b      	lsls	r3, r3, #28
 8005ac0:	4919      	ldr	r1, [pc, #100]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005ac8:	4b17      	ldr	r3, [pc, #92]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a16      	ldr	r2, [pc, #88]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ace:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ad2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad4:	f7fd fc14 	bl	8003300 <HAL_GetTick>
 8005ad8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005adc:	f7fd fc10 	bl	8003300 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b64      	cmp	r3, #100	; 0x64
 8005ae8:	d901      	bls.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e0d7      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005aee:	4b0e      	ldr	r3, [pc, #56]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f0      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005afa:	69bb      	ldr	r3, [r7, #24]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	f040 80cd 	bne.w	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005b02:	4b09      	ldr	r3, [pc, #36]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a08      	ldr	r2, [pc, #32]	; (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005b08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b0e:	f7fd fbf7 	bl	8003300 <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b14:	e00a      	b.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b16:	f7fd fbf3 	bl	8003300 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b64      	cmp	r3, #100	; 0x64
 8005b22:	d903      	bls.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e0ba      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005b28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005b2c:	4b5e      	ldr	r3, [pc, #376]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b38:	d0ed      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d009      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d02e      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d12a      	bne.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b62:	4b51      	ldr	r3, [pc, #324]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b68:	0c1b      	lsrs	r3, r3, #16
 8005b6a:	f003 0303 	and.w	r3, r3, #3
 8005b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b70:	4b4d      	ldr	r3, [pc, #308]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	0f1b      	lsrs	r3, r3, #28
 8005b78:	f003 0307 	and.w	r3, r3, #7
 8005b7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	019a      	lsls	r2, r3, #6
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	041b      	lsls	r3, r3, #16
 8005b88:	431a      	orrs	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	061b      	lsls	r3, r3, #24
 8005b90:	431a      	orrs	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	071b      	lsls	r3, r3, #28
 8005b96:	4944      	ldr	r1, [pc, #272]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b9e:	4b42      	ldr	r3, [pc, #264]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bac:	3b01      	subs	r3, #1
 8005bae:	021b      	lsls	r3, r3, #8
 8005bb0:	493d      	ldr	r1, [pc, #244]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d022      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bcc:	d11d      	bne.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005bce:	4b36      	ldr	r3, [pc, #216]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd4:	0e1b      	lsrs	r3, r3, #24
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005bdc:	4b32      	ldr	r3, [pc, #200]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be2:	0f1b      	lsrs	r3, r3, #28
 8005be4:	f003 0307 	and.w	r3, r3, #7
 8005be8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	019a      	lsls	r2, r3, #6
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	041b      	lsls	r3, r3, #16
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	061b      	lsls	r3, r3, #24
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	071b      	lsls	r3, r3, #28
 8005c02:	4929      	ldr	r1, [pc, #164]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d028      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005c16:	4b24      	ldr	r3, [pc, #144]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1c:	0e1b      	lsrs	r3, r3, #24
 8005c1e:	f003 030f 	and.w	r3, r3, #15
 8005c22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c24:	4b20      	ldr	r3, [pc, #128]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	695b      	ldr	r3, [r3, #20]
 8005c36:	019a      	lsls	r2, r3, #6
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	041b      	lsls	r3, r3, #16
 8005c3c:	431a      	orrs	r2, r3
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	061b      	lsls	r3, r3, #24
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	69db      	ldr	r3, [r3, #28]
 8005c48:	071b      	lsls	r3, r3, #28
 8005c4a:	4917      	ldr	r1, [pc, #92]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005c52:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c60:	4911      	ldr	r1, [pc, #68]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005c68:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a0e      	ldr	r2, [pc, #56]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c74:	f7fd fb44 	bl	8003300 <HAL_GetTick>
 8005c78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c7c:	f7fd fb40 	bl	8003300 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b64      	cmp	r3, #100	; 0x64
 8005c88:	d901      	bls.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e007      	b.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005c8e:	4b06      	ldr	r3, [pc, #24]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c9a:	d1ef      	bne.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3720      	adds	r7, #32
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	40023800 	.word	0x40023800

08005cac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e084      	b.n	8005dc8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7fc fe03 	bl	80028e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cf4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cfe:	d902      	bls.n	8005d06 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e002      	b.n	8005d0c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005d0a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005d14:	d007      	beq.n	8005d26 <HAL_SPI_Init+0x7a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d1e:	d002      	beq.n	8005d26 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10b      	bne.n	8005d46 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d36:	d903      	bls.n	8005d40 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8005d3e:	e002      	b.n	8005d46 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	699b      	ldr	r3, [r3, #24]
 8005d60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	ea42 0103 	orr.w	r1, r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	f003 0204 	and.w	r2, r3, #4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	431a      	orrs	r2, r3
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d94:	431a      	orrs	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	ea42 0103 	orr.w	r1, r2, r3
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69da      	ldr	r2, [r3, #28]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005db6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dde:	2300      	movs	r3, #0
 8005de0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d110      	bne.n	8005e0c <HAL_SPI_Receive_DMA+0x3c>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005df2:	d10b      	bne.n	8005e0c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2204      	movs	r2, #4
 8005df8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005dfc:	88fb      	ldrh	r3, [r7, #6]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	68b9      	ldr	r1, [r7, #8]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 f900 	bl	8006008 <HAL_SPI_TransmitReceive_DMA>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	e0f3      	b.n	8005ff4 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_SPI_Receive_DMA+0x4a>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e0ec      	b.n	8005ff4 <HAL_SPI_Receive_DMA+0x224>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d002      	beq.n	8005e34 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005e2e:	2302      	movs	r3, #2
 8005e30:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e32:	e0da      	b.n	8005fea <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d002      	beq.n	8005e40 <HAL_SPI_Receive_DMA+0x70>
 8005e3a:	88fb      	ldrh	r3, [r7, #6]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d102      	bne.n	8005e46 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005e44:	e0d1      	b.n	8005fea <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2204      	movs	r2, #4
 8005e4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	88fa      	ldrh	r2, [r7, #6]
 8005e5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	88fa      	ldrh	r2, [r7, #6]
 8005e66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e8a:	d107      	bne.n	8005e9c <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eaa:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005eb4:	d908      	bls.n	8005ec8 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	e042      	b.n	8005f4e <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ed6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee2:	d134      	bne.n	8005f4e <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005ef2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	f003 0301 	and.w	r3, r3, #1
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d111      	bne.n	8005f28 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f12:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	085b      	lsrs	r3, r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005f26:	e012      	b.n	8005f4e <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f36:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	3301      	adds	r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f52:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <HAL_SPI_Receive_DMA+0x22c>)
 8005f54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5a:	4a29      	ldr	r2, [pc, #164]	; (8006000 <HAL_SPI_Receive_DMA+0x230>)
 8005f5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f62:	4a28      	ldr	r2, [pc, #160]	; (8006004 <HAL_SPI_Receive_DMA+0x234>)
 8005f64:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	330c      	adds	r3, #12
 8005f78:	4619      	mov	r1, r3
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	461a      	mov	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	f7fd ffb4 	bl	8003ef4 <HAL_DMA_Start_IT>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00c      	beq.n	8005fac <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f96:	f043 0210 	orr.w	r2, r3, #16
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005faa:	e01e      	b.n	8005fea <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb6:	2b40      	cmp	r3, #64	; 0x40
 8005fb8:	d007      	beq.n	8005fca <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fc8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685a      	ldr	r2, [r3, #4]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0220 	orr.w	r2, r2, #32
 8005fd8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f042 0201 	orr.w	r2, r2, #1
 8005fe8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}
 8005ffc:	08006489 	.word	0x08006489
 8006000:	08006371 	.word	0x08006371
 8006004:	080064c1 	.word	0x080064c1

08006008 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006024:	2302      	movs	r3, #2
 8006026:	e16c      	b.n	8006302 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006036:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800603e:	7dbb      	ldrb	r3, [r7, #22]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d00d      	beq.n	8006060 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800604a:	d106      	bne.n	800605a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d102      	bne.n	800605a <HAL_SPI_TransmitReceive_DMA+0x52>
 8006054:	7dbb      	ldrb	r3, [r7, #22]
 8006056:	2b04      	cmp	r3, #4
 8006058:	d002      	beq.n	8006060 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800605a:	2302      	movs	r3, #2
 800605c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800605e:	e14b      	b.n	80062f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d002      	beq.n	8006072 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800606c:	887b      	ldrh	r3, [r7, #2]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d102      	bne.n	8006078 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006076:	e13f      	b.n	80062f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b04      	cmp	r3, #4
 8006082:	d003      	beq.n	800608c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2205      	movs	r2, #5
 8006088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	68ba      	ldr	r2, [r7, #8]
 8006096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	887a      	ldrh	r2, [r7, #2]
 800609c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	887a      	ldrh	r2, [r7, #2]
 80060a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	887a      	ldrh	r2, [r7, #2]
 80060ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	887a      	ldrh	r2, [r7, #2]
 80060b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2200      	movs	r2, #0
 80060c4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80060d4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060de:	d908      	bls.n	80060f2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060ee:	605a      	str	r2, [r3, #4]
 80060f0:	e06f      	b.n	80061d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006100:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800610c:	d126      	bne.n	800615c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006112:	f003 0301 	and.w	r3, r3, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10f      	bne.n	800613a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006128:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612e:	b29b      	uxth	r3, r3
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006138:	e010      	b.n	800615c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006148:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800614e:	b29b      	uxth	r3, r3
 8006150:	085b      	lsrs	r3, r3, #1
 8006152:	b29b      	uxth	r3, r3
 8006154:	3301      	adds	r3, #1
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006166:	d134      	bne.n	80061d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006176:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800617e:	b29b      	uxth	r3, r3
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	2b00      	cmp	r3, #0
 8006186:	d111      	bne.n	80061ac <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006196:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800619e:	b29b      	uxth	r3, r3
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80061aa:	e012      	b.n	80061d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061ba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	3301      	adds	r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b04      	cmp	r3, #4
 80061dc:	d108      	bne.n	80061f0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e2:	4a4a      	ldr	r2, [pc, #296]	; (800630c <HAL_SPI_TransmitReceive_DMA+0x304>)
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ea:	4a49      	ldr	r2, [pc, #292]	; (8006310 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80061ec:	63da      	str	r2, [r3, #60]	; 0x3c
 80061ee:	e007      	b.n	8006200 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f4:	4a47      	ldr	r2, [pc, #284]	; (8006314 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80061f6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061fc:	4a46      	ldr	r2, [pc, #280]	; (8006318 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80061fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006204:	4a45      	ldr	r2, [pc, #276]	; (800631c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8006206:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620c:	2200      	movs	r2, #0
 800620e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	330c      	adds	r3, #12
 800621a:	4619      	mov	r1, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	461a      	mov	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006228:	b29b      	uxth	r3, r3
 800622a:	f7fd fe63 	bl	8003ef4 <HAL_DMA_Start_IT>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00c      	beq.n	800624e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006238:	f043 0210 	orr.w	r2, r3, #16
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800624c:	e054      	b.n	80062f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006262:	2200      	movs	r2, #0
 8006264:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626a:	2200      	movs	r2, #0
 800626c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006272:	2200      	movs	r2, #0
 8006274:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800627a:	2200      	movs	r2, #0
 800627c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006286:	4619      	mov	r1, r3
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	330c      	adds	r3, #12
 800628e:	461a      	mov	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006294:	b29b      	uxth	r3, r3
 8006296:	f7fd fe2d 	bl	8003ef4 <HAL_DMA_Start_IT>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00c      	beq.n	80062ba <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a4:	f043 0210 	orr.w	r2, r3, #16
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80062b8:	e01e      	b.n	80062f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d007      	beq.n	80062d8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0220 	orr.w	r2, r2, #32
 80062e6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f042 0202 	orr.w	r2, r2, #2
 80062f6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006300:	7dfb      	ldrb	r3, [r7, #23]
}
 8006302:	4618      	mov	r0, r3
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	08006489 	.word	0x08006489
 8006310:	08006371 	.word	0x08006371
 8006314:	080064a5 	.word	0x080064a5
 8006318:	080063f7 	.word	0x080063f7
 800631c:	080064c1 	.word	0x080064c1

08006320 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800637e:	f7fc ffbf 	bl	8003300 <HAL_GetTick>
 8006382:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006392:	d02a      	beq.n	80063ea <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 0220 	bic.w	r2, r2, #32
 80063a2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 0203 	bic.w	r2, r2, #3
 80063b2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	2164      	movs	r1, #100	; 0x64
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f978 	bl	80066ae <SPI_EndRxTransaction>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d002      	beq.n	80063ca <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2220      	movs	r2, #32
 80063c8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	f7ff ffba 	bl	800635c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80063e8:	e002      	b.n	80063f0 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7fb fca8 	bl	8001d40 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80063f6:	b580      	push	{r7, lr}
 80063f8:	b084      	sub	sp, #16
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006402:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006404:	f7fc ff7c 	bl	8003300 <HAL_GetTick>
 8006408:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006418:	d030      	beq.n	800647c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	685a      	ldr	r2, [r3, #4]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f022 0220 	bic.w	r2, r2, #32
 8006428:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	2164      	movs	r1, #100	; 0x64
 800642e:	68f8      	ldr	r0, [r7, #12]
 8006430:	f000 f995 	bl	800675e <SPI_EndRxTxTransaction>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d005      	beq.n	8006446 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800643e:	f043 0220 	orr.w	r2, r3, #32
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0203 	bic.w	r2, r2, #3
 8006454:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f7ff ff71 	bl	800635c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800647a:	e002      	b.n	8006482 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f7ff ff4f 	bl	8006320 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7ff ff4c 	bl	8006334 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800649c:	bf00      	nop
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80064b2:	68f8      	ldr	r0, [r7, #12]
 80064b4:	f7ff ff48 	bl	8006348 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b084      	sub	sp, #16
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 0203 	bic.w	r2, r2, #3
 80064dc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e2:	f043 0210 	orr.w	r2, r3, #16
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	f7ff ff32 	bl	800635c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80064f8:	bf00      	nop
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006510:	e04c      	b.n	80065ac <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006518:	d048      	beq.n	80065ac <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800651a:	f7fc fef1 	bl	8003300 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d902      	bls.n	8006530 <SPI_WaitFlagStateUntilTimeout+0x30>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d13d      	bne.n	80065ac <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800653e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006548:	d111      	bne.n	800656e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006552:	d004      	beq.n	800655e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800655c:	d107      	bne.n	800656e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800656c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006572:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006576:	d10f      	bne.n	8006598 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006586:	601a      	str	r2, [r3, #0]
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006596:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2200      	movs	r2, #0
 80065a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e00f      	b.n	80065cc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689a      	ldr	r2, [r3, #8]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4013      	ands	r3, r2
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	bf0c      	ite	eq
 80065bc:	2301      	moveq	r3, #1
 80065be:	2300      	movne	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d1a3      	bne.n	8006512 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80065e2:	e057      	b.n	8006694 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80065ea:	d106      	bne.n	80065fa <SPI_WaitFifoStateUntilTimeout+0x26>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d103      	bne.n	80065fa <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006600:	d048      	beq.n	8006694 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006602:	f7fc fe7d 	bl	8003300 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d902      	bls.n	8006618 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d13d      	bne.n	8006694 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685a      	ldr	r2, [r3, #4]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006626:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006630:	d111      	bne.n	8006656 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800663a:	d004      	beq.n	8006646 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006644:	d107      	bne.n	8006656 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006654:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800665e:	d10f      	bne.n	8006680 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800666e:	601a      	str	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800667e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006690:	2303      	movs	r3, #3
 8006692:	e008      	b.n	80066a6 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	4013      	ands	r3, r2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d19f      	bne.n	80065e4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b086      	sub	sp, #24
 80066b2:	af02      	add	r7, sp, #8
 80066b4:	60f8      	str	r0, [r7, #12]
 80066b6:	60b9      	str	r1, [r7, #8]
 80066b8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066c2:	d111      	bne.n	80066e8 <SPI_EndRxTransaction+0x3a>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066cc:	d004      	beq.n	80066d8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d6:	d107      	bne.n	80066e8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	2200      	movs	r2, #0
 80066f0:	2180      	movs	r1, #128	; 0x80
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ff04 	bl	8006500 <SPI_WaitFlagStateUntilTimeout>
 80066f8:	4603      	mov	r3, r0
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d007      	beq.n	800670e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006702:	f043 0220 	orr.w	r2, r3, #32
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800670a:	2303      	movs	r3, #3
 800670c:	e023      	b.n	8006756 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006716:	d11d      	bne.n	8006754 <SPI_EndRxTransaction+0xa6>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006720:	d004      	beq.n	800672c <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672a:	d113      	bne.n	8006754 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2200      	movs	r2, #0
 8006734:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff ff4b 	bl	80065d4 <SPI_WaitFifoStateUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d007      	beq.n	8006754 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006748:	f043 0220 	orr.w	r2, r3, #32
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e000      	b.n	8006756 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b086      	sub	sp, #24
 8006762:	af02      	add	r7, sp, #8
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2200      	movs	r2, #0
 8006772:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff ff2c 	bl	80065d4 <SPI_WaitFifoStateUntilTimeout>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d007      	beq.n	8006792 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006786:	f043 0220 	orr.w	r2, r3, #32
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e027      	b.n	80067e2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	9300      	str	r3, [sp, #0]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2200      	movs	r2, #0
 800679a:	2180      	movs	r1, #128	; 0x80
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7ff feaf 	bl	8006500 <SPI_WaitFlagStateUntilTimeout>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d007      	beq.n	80067b8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067ac:	f043 0220 	orr.w	r2, r3, #32
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	e014      	b.n	80067e2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	9300      	str	r3, [sp, #0]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2200      	movs	r2, #0
 80067c0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f7ff ff05 	bl	80065d4 <SPI_WaitFifoStateUntilTimeout>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d4:	f043 0220 	orr.w	r2, r3, #32
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e000      	b.n	80067e2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b082      	sub	sp, #8
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e01d      	b.n	8006838 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d106      	bne.n	8006816 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7fc f911 	bl	8002a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2202      	movs	r2, #2
 800681a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3304      	adds	r3, #4
 8006826:	4619      	mov	r1, r3
 8006828:	4610      	mov	r0, r2
 800682a:	f001 f827 	bl	800787c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3708      	adds	r7, #8
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006840:	b480      	push	{r7}
 8006842:	b085      	sub	sp, #20
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68da      	ldr	r2, [r3, #12]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <HAL_TIM_Base_Start_IT+0x50>)
 8006860:	4013      	ands	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2b06      	cmp	r3, #6
 8006868:	d00b      	beq.n	8006882 <HAL_TIM_Base_Start_IT+0x42>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006870:	d007      	beq.n	8006882 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0201 	orr.w	r2, r2, #1
 8006880:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	00010007 	.word	0x00010007

08006894 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0201 	bic.w	r2, r2, #1
 80068aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6a1a      	ldr	r2, [r3, #32]
 80068b2:	f241 1311 	movw	r3, #4369	; 0x1111
 80068b6:	4013      	ands	r3, r2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10f      	bne.n	80068dc <HAL_TIM_Base_Stop_IT+0x48>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	6a1a      	ldr	r2, [r3, #32]
 80068c2:	f240 4344 	movw	r3, #1092	; 0x444
 80068c6:	4013      	ands	r3, r2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d107      	bne.n	80068dc <HAL_TIM_Base_Stop_IT+0x48>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 0201 	bic.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e01d      	b.n	8006938 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d106      	bne.n	8006916 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7fc f9ad 	bl	8002c70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3304      	adds	r3, #4
 8006926:	4619      	mov	r1, r3
 8006928:	4610      	mov	r0, r2
 800692a:	f000 ffa7 	bl	800787c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	2b0c      	cmp	r3, #12
 800694e:	d841      	bhi.n	80069d4 <HAL_TIM_PWM_Start_IT+0x94>
 8006950:	a201      	add	r2, pc, #4	; (adr r2, 8006958 <HAL_TIM_PWM_Start_IT+0x18>)
 8006952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006956:	bf00      	nop
 8006958:	0800698d 	.word	0x0800698d
 800695c:	080069d5 	.word	0x080069d5
 8006960:	080069d5 	.word	0x080069d5
 8006964:	080069d5 	.word	0x080069d5
 8006968:	0800699f 	.word	0x0800699f
 800696c:	080069d5 	.word	0x080069d5
 8006970:	080069d5 	.word	0x080069d5
 8006974:	080069d5 	.word	0x080069d5
 8006978:	080069b1 	.word	0x080069b1
 800697c:	080069d5 	.word	0x080069d5
 8006980:	080069d5 	.word	0x080069d5
 8006984:	080069d5 	.word	0x080069d5
 8006988:	080069c3 	.word	0x080069c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f042 0202 	orr.w	r2, r2, #2
 800699a:	60da      	str	r2, [r3, #12]
      break;
 800699c:	e01b      	b.n	80069d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f042 0204 	orr.w	r2, r2, #4
 80069ac:	60da      	str	r2, [r3, #12]
      break;
 80069ae:	e012      	b.n	80069d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68da      	ldr	r2, [r3, #12]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0208 	orr.w	r2, r2, #8
 80069be:	60da      	str	r2, [r3, #12]
      break;
 80069c0:	e009      	b.n	80069d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f042 0210 	orr.w	r2, r2, #16
 80069d0:	60da      	str	r2, [r3, #12]
      break;
 80069d2:	e000      	b.n	80069d6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80069d4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2201      	movs	r2, #1
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	4618      	mov	r0, r3
 80069e0:	f001 fc96 	bl	8008310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a17      	ldr	r2, [pc, #92]	; (8006a48 <HAL_TIM_PWM_Start_IT+0x108>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d004      	beq.n	80069f8 <HAL_TIM_PWM_Start_IT+0xb8>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a16      	ldr	r2, [pc, #88]	; (8006a4c <HAL_TIM_PWM_Start_IT+0x10c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d101      	bne.n	80069fc <HAL_TIM_PWM_Start_IT+0xbc>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e000      	b.n	80069fe <HAL_TIM_PWM_Start_IT+0xbe>
 80069fc:	2300      	movs	r3, #0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d007      	beq.n	8006a12 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <HAL_TIM_PWM_Start_IT+0x110>)
 8006a1a:	4013      	ands	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2b06      	cmp	r3, #6
 8006a22:	d00b      	beq.n	8006a3c <HAL_TIM_PWM_Start_IT+0xfc>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2a:	d007      	beq.n	8006a3c <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f042 0201 	orr.w	r2, r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	40010000 	.word	0x40010000
 8006a4c:	40010400 	.word	0x40010400
 8006a50:	00010007 	.word	0x00010007

08006a54 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b0c      	cmp	r3, #12
 8006a62:	d841      	bhi.n	8006ae8 <HAL_TIM_PWM_Stop_IT+0x94>
 8006a64:	a201      	add	r2, pc, #4	; (adr r2, 8006a6c <HAL_TIM_PWM_Stop_IT+0x18>)
 8006a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6a:	bf00      	nop
 8006a6c:	08006aa1 	.word	0x08006aa1
 8006a70:	08006ae9 	.word	0x08006ae9
 8006a74:	08006ae9 	.word	0x08006ae9
 8006a78:	08006ae9 	.word	0x08006ae9
 8006a7c:	08006ab3 	.word	0x08006ab3
 8006a80:	08006ae9 	.word	0x08006ae9
 8006a84:	08006ae9 	.word	0x08006ae9
 8006a88:	08006ae9 	.word	0x08006ae9
 8006a8c:	08006ac5 	.word	0x08006ac5
 8006a90:	08006ae9 	.word	0x08006ae9
 8006a94:	08006ae9 	.word	0x08006ae9
 8006a98:	08006ae9 	.word	0x08006ae9
 8006a9c:	08006ad7 	.word	0x08006ad7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68da      	ldr	r2, [r3, #12]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f022 0202 	bic.w	r2, r2, #2
 8006aae:	60da      	str	r2, [r3, #12]
      break;
 8006ab0:	e01b      	b.n	8006aea <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68da      	ldr	r2, [r3, #12]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0204 	bic.w	r2, r2, #4
 8006ac0:	60da      	str	r2, [r3, #12]
      break;
 8006ac2:	e012      	b.n	8006aea <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68da      	ldr	r2, [r3, #12]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f022 0208 	bic.w	r2, r2, #8
 8006ad2:	60da      	str	r2, [r3, #12]
      break;
 8006ad4:	e009      	b.n	8006aea <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f022 0210 	bic.w	r2, r2, #16
 8006ae4:	60da      	str	r2, [r3, #12]
      break;
 8006ae6:	e000      	b.n	8006aea <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8006ae8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2200      	movs	r2, #0
 8006af0:	6839      	ldr	r1, [r7, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f001 fc0c 	bl	8008310 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a20      	ldr	r2, [pc, #128]	; (8006b80 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d004      	beq.n	8006b0c <HAL_TIM_PWM_Stop_IT+0xb8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1f      	ldr	r2, [pc, #124]	; (8006b84 <HAL_TIM_PWM_Stop_IT+0x130>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d101      	bne.n	8006b10 <HAL_TIM_PWM_Stop_IT+0xbc>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e000      	b.n	8006b12 <HAL_TIM_PWM_Stop_IT+0xbe>
 8006b10:	2300      	movs	r3, #0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d017      	beq.n	8006b46 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6a1a      	ldr	r2, [r3, #32]
 8006b1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b20:	4013      	ands	r3, r2
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10f      	bne.n	8006b46 <HAL_TIM_PWM_Stop_IT+0xf2>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6a1a      	ldr	r2, [r3, #32]
 8006b2c:	f240 4344 	movw	r3, #1092	; 0x444
 8006b30:	4013      	ands	r3, r2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d107      	bne.n	8006b46 <HAL_TIM_PWM_Stop_IT+0xf2>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6a1a      	ldr	r2, [r3, #32]
 8006b4c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006b50:	4013      	ands	r3, r2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10f      	bne.n	8006b76 <HAL_TIM_PWM_Stop_IT+0x122>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6a1a      	ldr	r2, [r3, #32]
 8006b5c:	f240 4344 	movw	r3, #1092	; 0x444
 8006b60:	4013      	ands	r3, r2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d107      	bne.n	8006b76 <HAL_TIM_PWM_Stop_IT+0x122>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0201 	bic.w	r2, r2, #1
 8006b74:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	40010000 	.word	0x40010000
 8006b84:	40010400 	.word	0x40010400

08006b88 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e01d      	b.n	8006bd6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d106      	bne.n	8006bb4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7fb ffe0 	bl	8002b74 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3304      	adds	r3, #4
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4610      	mov	r0, r2
 8006bc8:	f000 fe58 	bl	800787c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
 8006bec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b02      	cmp	r3, #2
 8006bf8:	d101      	bne.n	8006bfe <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	e0e0      	b.n	8006dc0 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d10b      	bne.n	8006c22 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <HAL_TIM_IC_Start_DMA+0x3a>
 8006c10:	887b      	ldrh	r3, [r7, #2]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e0d2      	b.n	8006dc0 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2202      	movs	r2, #2
 8006c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b0c      	cmp	r3, #12
 8006c26:	f200 80ad 	bhi.w	8006d84 <HAL_TIM_IC_Start_DMA+0x1a4>
 8006c2a:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <HAL_TIM_IC_Start_DMA+0x50>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c65 	.word	0x08006c65
 8006c34:	08006d85 	.word	0x08006d85
 8006c38:	08006d85 	.word	0x08006d85
 8006c3c:	08006d85 	.word	0x08006d85
 8006c40:	08006cad 	.word	0x08006cad
 8006c44:	08006d85 	.word	0x08006d85
 8006c48:	08006d85 	.word	0x08006d85
 8006c4c:	08006d85 	.word	0x08006d85
 8006c50:	08006cf5 	.word	0x08006cf5
 8006c54:	08006d85 	.word	0x08006d85
 8006c58:	08006d85 	.word	0x08006d85
 8006c5c:	08006d85 	.word	0x08006d85
 8006c60:	08006d3d 	.word	0x08006d3d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c68:	4a57      	ldr	r2, [pc, #348]	; (8006dc8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006c6a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c70:	4a56      	ldr	r2, [pc, #344]	; (8006dcc <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006c72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	4a55      	ldr	r2, [pc, #340]	; (8006dd0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006c7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3334      	adds	r3, #52	; 0x34
 8006c86:	4619      	mov	r1, r3
 8006c88:	687a      	ldr	r2, [r7, #4]
 8006c8a:	887b      	ldrh	r3, [r7, #2]
 8006c8c:	f7fd f932 	bl	8003ef4 <HAL_DMA_Start_IT>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e092      	b.n	8006dc0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ca8:	60da      	str	r2, [r3, #12]
      break;
 8006caa:	e06c      	b.n	8006d86 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb0:	4a45      	ldr	r2, [pc, #276]	; (8006dc8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006cb2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	4a44      	ldr	r2, [pc, #272]	; (8006dcc <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc0:	4a43      	ldr	r2, [pc, #268]	; (8006dd0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006cc2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3338      	adds	r3, #56	; 0x38
 8006cce:	4619      	mov	r1, r3
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	887b      	ldrh	r3, [r7, #2]
 8006cd4:	f7fd f90e 	bl	8003ef4 <HAL_DMA_Start_IT>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e06e      	b.n	8006dc0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68da      	ldr	r2, [r3, #12]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cf0:	60da      	str	r2, [r3, #12]
      break;
 8006cf2:	e048      	b.n	8006d86 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf8:	4a33      	ldr	r2, [pc, #204]	; (8006dc8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006cfa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	4a32      	ldr	r2, [pc, #200]	; (8006dcc <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006d02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	4a31      	ldr	r2, [pc, #196]	; (8006dd0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006d0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	333c      	adds	r3, #60	; 0x3c
 8006d16:	4619      	mov	r1, r3
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	887b      	ldrh	r3, [r7, #2]
 8006d1c:	f7fd f8ea 	bl	8003ef4 <HAL_DMA_Start_IT>
 8006d20:	4603      	mov	r3, r0
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d001      	beq.n	8006d2a <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e04a      	b.n	8006dc0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	68da      	ldr	r2, [r3, #12]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d38:	60da      	str	r2, [r3, #12]
      break;
 8006d3a:	e024      	b.n	8006d86 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d40:	4a21      	ldr	r2, [pc, #132]	; (8006dc8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006d42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	4a20      	ldr	r2, [pc, #128]	; (8006dcc <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006d4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d50:	4a1f      	ldr	r2, [pc, #124]	; (8006dd0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006d52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3340      	adds	r3, #64	; 0x40
 8006d5e:	4619      	mov	r1, r3
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	887b      	ldrh	r3, [r7, #2]
 8006d64:	f7fd f8c6 	bl	8003ef4 <HAL_DMA_Start_IT>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e026      	b.n	8006dc0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d80:	60da      	str	r2, [r3, #12]
      break;
 8006d82:	e000      	b.n	8006d86 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8006d84:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f001 fabe 	bl	8008310 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	689a      	ldr	r2, [r3, #8]
 8006d9a:	4b0e      	ldr	r3, [pc, #56]	; (8006dd4 <HAL_TIM_IC_Start_DMA+0x1f4>)
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b06      	cmp	r3, #6
 8006da4:	d00b      	beq.n	8006dbe <HAL_TIM_IC_Start_DMA+0x1de>
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dac:	d007      	beq.n	8006dbe <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0201 	orr.w	r2, r2, #1
 8006dbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	0800779d 	.word	0x0800779d
 8006dcc:	0800780d 	.word	0x0800780d
 8006dd0:	08007779 	.word	0x08007779
 8006dd4:	00010007 	.word	0x00010007

08006dd8 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	2b0c      	cmp	r3, #12
 8006de6:	d855      	bhi.n	8006e94 <HAL_TIM_IC_Stop_DMA+0xbc>
 8006de8:	a201      	add	r2, pc, #4	; (adr r2, 8006df0 <HAL_TIM_IC_Stop_DMA+0x18>)
 8006dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dee:	bf00      	nop
 8006df0:	08006e25 	.word	0x08006e25
 8006df4:	08006e95 	.word	0x08006e95
 8006df8:	08006e95 	.word	0x08006e95
 8006dfc:	08006e95 	.word	0x08006e95
 8006e00:	08006e41 	.word	0x08006e41
 8006e04:	08006e95 	.word	0x08006e95
 8006e08:	08006e95 	.word	0x08006e95
 8006e0c:	08006e95 	.word	0x08006e95
 8006e10:	08006e5d 	.word	0x08006e5d
 8006e14:	08006e95 	.word	0x08006e95
 8006e18:	08006e95 	.word	0x08006e95
 8006e1c:	08006e95 	.word	0x08006e95
 8006e20:	08006e79 	.word	0x08006e79
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68da      	ldr	r2, [r3, #12]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006e32:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7fd f8bb 	bl	8003fb4 <HAL_DMA_Abort_IT>
      break;
 8006e3e:	e02a      	b.n	8006e96 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e4e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e54:	4618      	mov	r0, r3
 8006e56:	f7fd f8ad 	bl	8003fb4 <HAL_DMA_Abort_IT>
      break;
 8006e5a:	e01c      	b.n	8006e96 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006e6a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fd f89f 	bl	8003fb4 <HAL_DMA_Abort_IT>
      break;
 8006e76:	e00e      	b.n	8006e96 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	68da      	ldr	r2, [r3, #12]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e86:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fd f891 	bl	8003fb4 <HAL_DMA_Abort_IT>
      break;
 8006e92:	e000      	b.n	8006e96 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 8006e94:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f001 fa36 	bl	8008310 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	6a1a      	ldr	r2, [r3, #32]
 8006eaa:	f241 1311 	movw	r3, #4369	; 0x1111
 8006eae:	4013      	ands	r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10f      	bne.n	8006ed4 <HAL_TIM_IC_Stop_DMA+0xfc>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	6a1a      	ldr	r2, [r3, #32]
 8006eba:	f240 4344 	movw	r3, #1092	; 0x444
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d107      	bne.n	8006ed4 <HAL_TIM_IC_Stop_DMA+0xfc>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0201 	bic.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop

08006ee8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e02d      	b.n	8006f58 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d106      	bne.n	8006f16 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f825 	bl	8006f60 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	3304      	adds	r3, #4
 8006f26:	4619      	mov	r1, r3
 8006f28:	4610      	mov	r0, r2
 8006f2a:	f000 fca7 	bl	800787c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f022 0208 	bic.w	r2, r2, #8
 8006f3c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6819      	ldr	r1, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b082      	sub	sp, #8
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d122      	bne.n	8006fd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f003 0302 	and.w	r3, r3, #2
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d11b      	bne.n	8006fd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f06f 0202 	mvn.w	r2, #2
 8006fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699b      	ldr	r3, [r3, #24]
 8006fae:	f003 0303 	and.w	r3, r3, #3
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d003      	beq.n	8006fbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fa fe66 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8006fbc:	e005      	b.n	8006fca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fba8 	bl	8007714 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 fbb9 	bl	800773c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	f003 0304 	and.w	r3, r3, #4
 8006fda:	2b04      	cmp	r3, #4
 8006fdc:	d122      	bne.n	8007024 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d11b      	bne.n	8007024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f06f 0204 	mvn.w	r2, #4
 8006ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	699b      	ldr	r3, [r3, #24]
 8007002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f7fa fe3c 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8007010:	e005      	b.n	800701e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fb7e 	bl	8007714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fb8f 	bl	800773c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	f003 0308 	and.w	r3, r3, #8
 800702e:	2b08      	cmp	r3, #8
 8007030:	d122      	bne.n	8007078 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b08      	cmp	r3, #8
 800703e:	d11b      	bne.n	8007078 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f06f 0208 	mvn.w	r2, #8
 8007048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2204      	movs	r2, #4
 800704e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	f003 0303 	and.w	r3, r3, #3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d003      	beq.n	8007066 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fa fe12 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8007064:	e005      	b.n	8007072 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fb54 	bl	8007714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fb65 	bl	800773c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	f003 0310 	and.w	r3, r3, #16
 8007082:	2b10      	cmp	r3, #16
 8007084:	d122      	bne.n	80070cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b10      	cmp	r3, #16
 8007092:	d11b      	bne.n	80070cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f06f 0210 	mvn.w	r2, #16
 800709c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2208      	movs	r2, #8
 80070a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d003      	beq.n	80070ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fa fde8 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 80070b8:	e005      	b.n	80070c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fb2a 	bl	8007714 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fb3b 	bl	800773c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d10e      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d107      	bne.n	80070f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f06f 0201 	mvn.w	r2, #1
 80070f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fa fb98 	bl	8001828 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007102:	2b80      	cmp	r3, #128	; 0x80
 8007104:	d10e      	bne.n	8007124 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007110:	2b80      	cmp	r3, #128	; 0x80
 8007112:	d107      	bne.n	8007124 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800711c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f001 fa32 	bl	8008588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007132:	d10e      	bne.n	8007152 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800713e:	2b80      	cmp	r3, #128	; 0x80
 8007140:	d107      	bne.n	8007152 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800714a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 fa25 	bl	800859c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715c:	2b40      	cmp	r3, #64	; 0x40
 800715e:	d10e      	bne.n	800717e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716a:	2b40      	cmp	r3, #64	; 0x40
 800716c:	d107      	bne.n	800717e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fae9 	bl	8007750 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	f003 0320 	and.w	r3, r3, #32
 8007188:	2b20      	cmp	r3, #32
 800718a:	d10e      	bne.n	80071aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f003 0320 	and.w	r3, r3, #32
 8007196:	2b20      	cmp	r3, #32
 8007198:	d107      	bne.n	80071aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f06f 0220 	mvn.w	r2, #32
 80071a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 f9e5 	bl	8008574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071aa:	bf00      	nop
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	60f8      	str	r0, [r7, #12]
 80071ba:	60b9      	str	r1, [r7, #8]
 80071bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d101      	bne.n	80071cc <HAL_TIM_IC_ConfigChannel+0x1a>
 80071c8:	2302      	movs	r3, #2
 80071ca:	e08a      	b.n	80072e2 <HAL_TIM_IC_ConfigChannel+0x130>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d11b      	bne.n	800721a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6818      	ldr	r0, [r3, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	6819      	ldr	r1, [r3, #0]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f000 fec9 	bl	8007f88 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699a      	ldr	r2, [r3, #24]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 020c 	bic.w	r2, r2, #12
 8007204:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6999      	ldr	r1, [r3, #24]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	689a      	ldr	r2, [r3, #8]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	619a      	str	r2, [r3, #24]
 8007218:	e05a      	b.n	80072d0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2b04      	cmp	r3, #4
 800721e:	d11c      	bne.n	800725a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6818      	ldr	r0, [r3, #0]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	6819      	ldr	r1, [r3, #0]
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	685a      	ldr	r2, [r3, #4]
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	68db      	ldr	r3, [r3, #12]
 8007230:	f000 ff4d 	bl	80080ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	699a      	ldr	r2, [r3, #24]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007242:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6999      	ldr	r1, [r3, #24]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	021a      	lsls	r2, r3, #8
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	619a      	str	r2, [r3, #24]
 8007258:	e03a      	b.n	80072d0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b08      	cmp	r3, #8
 800725e:	d11b      	bne.n	8007298 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	6819      	ldr	r1, [r3, #0]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f000 ff9a 	bl	80081a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	69da      	ldr	r2, [r3, #28]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 020c 	bic.w	r2, r2, #12
 8007282:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69d9      	ldr	r1, [r3, #28]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	689a      	ldr	r2, [r3, #8]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	61da      	str	r2, [r3, #28]
 8007296:	e01b      	b.n	80072d0 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6818      	ldr	r0, [r3, #0]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	6819      	ldr	r1, [r3, #0]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	68db      	ldr	r3, [r3, #12]
 80072a8:	f000 ffba 	bl	8008220 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	69da      	ldr	r2, [r3, #28]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80072ba:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	69d9      	ldr	r1, [r3, #28]
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	021a      	lsls	r2, r3, #8
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
	...

080072ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b084      	sub	sp, #16
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072fe:	2b01      	cmp	r3, #1
 8007300:	d101      	bne.n	8007306 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007302:	2302      	movs	r3, #2
 8007304:	e105      	b.n	8007512 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2202      	movs	r2, #2
 8007312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b14      	cmp	r3, #20
 800731a:	f200 80f0 	bhi.w	80074fe <HAL_TIM_PWM_ConfigChannel+0x212>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007379 	.word	0x08007379
 8007328:	080074ff 	.word	0x080074ff
 800732c:	080074ff 	.word	0x080074ff
 8007330:	080074ff 	.word	0x080074ff
 8007334:	080073b9 	.word	0x080073b9
 8007338:	080074ff 	.word	0x080074ff
 800733c:	080074ff 	.word	0x080074ff
 8007340:	080074ff 	.word	0x080074ff
 8007344:	080073fb 	.word	0x080073fb
 8007348:	080074ff 	.word	0x080074ff
 800734c:	080074ff 	.word	0x080074ff
 8007350:	080074ff 	.word	0x080074ff
 8007354:	0800743b 	.word	0x0800743b
 8007358:	080074ff 	.word	0x080074ff
 800735c:	080074ff 	.word	0x080074ff
 8007360:	080074ff 	.word	0x080074ff
 8007364:	0800747d 	.word	0x0800747d
 8007368:	080074ff 	.word	0x080074ff
 800736c:	080074ff 	.word	0x080074ff
 8007370:	080074ff 	.word	0x080074ff
 8007374:	080074bd 	.word	0x080074bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68b9      	ldr	r1, [r7, #8]
 800737e:	4618      	mov	r0, r3
 8007380:	f000 fb1c 	bl	80079bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0208 	orr.w	r2, r2, #8
 8007392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0204 	bic.w	r2, r2, #4
 80073a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	6999      	ldr	r1, [r3, #24]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	691a      	ldr	r2, [r3, #16]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	619a      	str	r2, [r3, #24]
      break;
 80073b6:	e0a3      	b.n	8007500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68b9      	ldr	r1, [r7, #8]
 80073be:	4618      	mov	r0, r3
 80073c0:	f000 fb6e 	bl	8007aa0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6999      	ldr	r1, [r3, #24]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	691b      	ldr	r3, [r3, #16]
 80073ee:	021a      	lsls	r2, r3, #8
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	430a      	orrs	r2, r1
 80073f6:	619a      	str	r2, [r3, #24]
      break;
 80073f8:	e082      	b.n	8007500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	4618      	mov	r0, r3
 8007402:	f000 fbc5 	bl	8007b90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69da      	ldr	r2, [r3, #28]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f042 0208 	orr.w	r2, r2, #8
 8007414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	69da      	ldr	r2, [r3, #28]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 0204 	bic.w	r2, r2, #4
 8007424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69d9      	ldr	r1, [r3, #28]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	691a      	ldr	r2, [r3, #16]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	61da      	str	r2, [r3, #28]
      break;
 8007438:	e062      	b.n	8007500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68b9      	ldr	r1, [r7, #8]
 8007440:	4618      	mov	r0, r3
 8007442:	f000 fc1b 	bl	8007c7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69da      	ldr	r2, [r3, #28]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69da      	ldr	r2, [r3, #28]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69d9      	ldr	r1, [r3, #28]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	021a      	lsls	r2, r3, #8
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	61da      	str	r2, [r3, #28]
      break;
 800747a:	e041      	b.n	8007500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68b9      	ldr	r1, [r7, #8]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fc52 	bl	8007d2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f042 0208 	orr.w	r2, r2, #8
 8007496:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0204 	bic.w	r2, r2, #4
 80074a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	691a      	ldr	r2, [r3, #16]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	430a      	orrs	r2, r1
 80074b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074ba:	e021      	b.n	8007500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68b9      	ldr	r1, [r7, #8]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f000 fc84 	bl	8007dd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80074d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	691b      	ldr	r3, [r3, #16]
 80074f2:	021a      	lsls	r2, r3, #8
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	430a      	orrs	r2, r1
 80074fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80074fc:	e000      	b.n	8007500 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80074fe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3710      	adds	r7, #16
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop

0800751c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <HAL_TIM_ConfigClockSource+0x18>
 8007530:	2302      	movs	r3, #2
 8007532:	e0a6      	b.n	8007682 <HAL_TIM_ConfigClockSource+0x166>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2202      	movs	r2, #2
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	4b4f      	ldr	r3, [pc, #316]	; (800768c <HAL_TIM_ConfigClockSource+0x170>)
 8007550:	4013      	ands	r3, r2
 8007552:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800755a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68fa      	ldr	r2, [r7, #12]
 8007562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b40      	cmp	r3, #64	; 0x40
 800756a:	d067      	beq.n	800763c <HAL_TIM_ConfigClockSource+0x120>
 800756c:	2b40      	cmp	r3, #64	; 0x40
 800756e:	d80b      	bhi.n	8007588 <HAL_TIM_ConfigClockSource+0x6c>
 8007570:	2b10      	cmp	r3, #16
 8007572:	d073      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x140>
 8007574:	2b10      	cmp	r3, #16
 8007576:	d802      	bhi.n	800757e <HAL_TIM_ConfigClockSource+0x62>
 8007578:	2b00      	cmp	r3, #0
 800757a:	d06f      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800757c:	e078      	b.n	8007670 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800757e:	2b20      	cmp	r3, #32
 8007580:	d06c      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x140>
 8007582:	2b30      	cmp	r3, #48	; 0x30
 8007584:	d06a      	beq.n	800765c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007586:	e073      	b.n	8007670 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007588:	2b70      	cmp	r3, #112	; 0x70
 800758a:	d00d      	beq.n	80075a8 <HAL_TIM_ConfigClockSource+0x8c>
 800758c:	2b70      	cmp	r3, #112	; 0x70
 800758e:	d804      	bhi.n	800759a <HAL_TIM_ConfigClockSource+0x7e>
 8007590:	2b50      	cmp	r3, #80	; 0x50
 8007592:	d033      	beq.n	80075fc <HAL_TIM_ConfigClockSource+0xe0>
 8007594:	2b60      	cmp	r3, #96	; 0x60
 8007596:	d041      	beq.n	800761c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007598:	e06a      	b.n	8007670 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800759a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800759e:	d066      	beq.n	800766e <HAL_TIM_ConfigClockSource+0x152>
 80075a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075a4:	d017      	beq.n	80075d6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80075a6:	e063      	b.n	8007670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	6899      	ldr	r1, [r3, #8]
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f000 fe8a 	bl	80082d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	689b      	ldr	r3, [r3, #8]
 80075c2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075ca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	609a      	str	r2, [r3, #8]
      break;
 80075d4:	e04c      	b.n	8007670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	6899      	ldr	r1, [r3, #8]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f000 fe73 	bl	80082d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075f8:	609a      	str	r2, [r3, #8]
      break;
 80075fa:	e039      	b.n	8007670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6818      	ldr	r0, [r3, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	6859      	ldr	r1, [r3, #4]
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	461a      	mov	r2, r3
 800760a:	f000 fd31 	bl	8008070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2150      	movs	r1, #80	; 0x50
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fe40 	bl	800829a <TIM_ITRx_SetConfig>
      break;
 800761a:	e029      	b.n	8007670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	6859      	ldr	r1, [r3, #4]
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	461a      	mov	r2, r3
 800762a:	f000 fd8d 	bl	8008148 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2160      	movs	r1, #96	; 0x60
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fe30 	bl	800829a <TIM_ITRx_SetConfig>
      break;
 800763a:	e019      	b.n	8007670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	6859      	ldr	r1, [r3, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	461a      	mov	r2, r3
 800764a:	f000 fd11 	bl	8008070 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	2140      	movs	r1, #64	; 0x40
 8007654:	4618      	mov	r0, r3
 8007656:	f000 fe20 	bl	800829a <TIM_ITRx_SetConfig>
      break;
 800765a:	e009      	b.n	8007670 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f000 fe17 	bl	800829a <TIM_ITRx_SetConfig>
      break;
 800766c:	e000      	b.n	8007670 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800766e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	fffeff88 	.word	0xfffeff88

08007690 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d101      	bne.n	80076a8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80076a4:	2302      	movs	r3, #2
 80076a6:	e031      	b.n	800770c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80076b8:	6839      	ldr	r1, [r7, #0]
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fbdc 	bl	8007e78 <TIM_SlaveTimer_SetConfig>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d009      	beq.n	80076da <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e018      	b.n	800770c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076e8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80076f8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800770a:	2300      	movs	r3, #0
}
 800770c:	4618      	mov	r0, r3
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800778e:	68f8      	ldr	r0, [r7, #12]
 8007790:	f7ff ffe8 	bl	8007764 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007794:	bf00      	nop
 8007796:	3710      	adds	r7, #16
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d103      	bne.n	80077c4 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2201      	movs	r2, #1
 80077c0:	771a      	strb	r2, [r3, #28]
 80077c2:	e019      	b.n	80077f8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d103      	bne.n	80077d6 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2202      	movs	r2, #2
 80077d2:	771a      	strb	r2, [r3, #28]
 80077d4:	e010      	b.n	80077f8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	429a      	cmp	r2, r3
 80077de:	d103      	bne.n	80077e8 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2204      	movs	r2, #4
 80077e4:	771a      	strb	r2, [r3, #28]
 80077e6:	e007      	b.n	80077f8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d102      	bne.n	80077f8 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2208      	movs	r2, #8
 80077f6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f7fa fa45 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2200      	movs	r2, #0
 8007802:	771a      	strb	r2, [r3, #28]
}
 8007804:	bf00      	nop
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007818:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2201      	movs	r2, #1
 800781e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	429a      	cmp	r2, r3
 800782a:	d103      	bne.n	8007834 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2201      	movs	r2, #1
 8007830:	771a      	strb	r2, [r3, #28]
 8007832:	e019      	b.n	8007868 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	429a      	cmp	r2, r3
 800783c:	d103      	bne.n	8007846 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2202      	movs	r2, #2
 8007842:	771a      	strb	r2, [r3, #28]
 8007844:	e010      	b.n	8007868 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	d103      	bne.n	8007858 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2204      	movs	r2, #4
 8007854:	771a      	strb	r2, [r3, #28]
 8007856:	e007      	b.n	8007868 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	429a      	cmp	r2, r3
 8007860:	d102      	bne.n	8007868 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2208      	movs	r2, #8
 8007866:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f7ff ff5d 	bl	8007728 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	771a      	strb	r2, [r3, #28]
}
 8007874:	bf00      	nop
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a40      	ldr	r2, [pc, #256]	; (8007990 <TIM_Base_SetConfig+0x114>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d013      	beq.n	80078bc <TIM_Base_SetConfig+0x40>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789a:	d00f      	beq.n	80078bc <TIM_Base_SetConfig+0x40>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a3d      	ldr	r2, [pc, #244]	; (8007994 <TIM_Base_SetConfig+0x118>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d00b      	beq.n	80078bc <TIM_Base_SetConfig+0x40>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4a3c      	ldr	r2, [pc, #240]	; (8007998 <TIM_Base_SetConfig+0x11c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d007      	beq.n	80078bc <TIM_Base_SetConfig+0x40>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	4a3b      	ldr	r2, [pc, #236]	; (800799c <TIM_Base_SetConfig+0x120>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d003      	beq.n	80078bc <TIM_Base_SetConfig+0x40>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	4a3a      	ldr	r2, [pc, #232]	; (80079a0 <TIM_Base_SetConfig+0x124>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d108      	bne.n	80078ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2f      	ldr	r2, [pc, #188]	; (8007990 <TIM_Base_SetConfig+0x114>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d02b      	beq.n	800792e <TIM_Base_SetConfig+0xb2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078dc:	d027      	beq.n	800792e <TIM_Base_SetConfig+0xb2>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a2c      	ldr	r2, [pc, #176]	; (8007994 <TIM_Base_SetConfig+0x118>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d023      	beq.n	800792e <TIM_Base_SetConfig+0xb2>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4a2b      	ldr	r2, [pc, #172]	; (8007998 <TIM_Base_SetConfig+0x11c>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d01f      	beq.n	800792e <TIM_Base_SetConfig+0xb2>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4a2a      	ldr	r2, [pc, #168]	; (800799c <TIM_Base_SetConfig+0x120>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d01b      	beq.n	800792e <TIM_Base_SetConfig+0xb2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	4a29      	ldr	r2, [pc, #164]	; (80079a0 <TIM_Base_SetConfig+0x124>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d017      	beq.n	800792e <TIM_Base_SetConfig+0xb2>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	4a28      	ldr	r2, [pc, #160]	; (80079a4 <TIM_Base_SetConfig+0x128>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d013      	beq.n	800792e <TIM_Base_SetConfig+0xb2>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4a27      	ldr	r2, [pc, #156]	; (80079a8 <TIM_Base_SetConfig+0x12c>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d00f      	beq.n	800792e <TIM_Base_SetConfig+0xb2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	4a26      	ldr	r2, [pc, #152]	; (80079ac <TIM_Base_SetConfig+0x130>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00b      	beq.n	800792e <TIM_Base_SetConfig+0xb2>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	4a25      	ldr	r2, [pc, #148]	; (80079b0 <TIM_Base_SetConfig+0x134>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d007      	beq.n	800792e <TIM_Base_SetConfig+0xb2>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	4a24      	ldr	r2, [pc, #144]	; (80079b4 <TIM_Base_SetConfig+0x138>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d003      	beq.n	800792e <TIM_Base_SetConfig+0xb2>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a23      	ldr	r2, [pc, #140]	; (80079b8 <TIM_Base_SetConfig+0x13c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d108      	bne.n	8007940 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	4313      	orrs	r3, r2
 800794c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	4a0a      	ldr	r2, [pc, #40]	; (8007990 <TIM_Base_SetConfig+0x114>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d003      	beq.n	8007974 <TIM_Base_SetConfig+0xf8>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a0c      	ldr	r2, [pc, #48]	; (80079a0 <TIM_Base_SetConfig+0x124>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d103      	bne.n	800797c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	615a      	str	r2, [r3, #20]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	40010000 	.word	0x40010000
 8007994:	40000400 	.word	0x40000400
 8007998:	40000800 	.word	0x40000800
 800799c:	40000c00 	.word	0x40000c00
 80079a0:	40010400 	.word	0x40010400
 80079a4:	40014000 	.word	0x40014000
 80079a8:	40014400 	.word	0x40014400
 80079ac:	40014800 	.word	0x40014800
 80079b0:	40001800 	.word	0x40001800
 80079b4:	40001c00 	.word	0x40001c00
 80079b8:	40002000 	.word	0x40002000

080079bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	f023 0201 	bic.w	r2, r3, #1
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	4b2b      	ldr	r3, [pc, #172]	; (8007a94 <TIM_OC1_SetConfig+0xd8>)
 80079e8:	4013      	ands	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68fa      	ldr	r2, [r7, #12]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f023 0302 	bic.w	r3, r3, #2
 8007a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a21      	ldr	r2, [pc, #132]	; (8007a98 <TIM_OC1_SetConfig+0xdc>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d003      	beq.n	8007a20 <TIM_OC1_SetConfig+0x64>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	4a20      	ldr	r2, [pc, #128]	; (8007a9c <TIM_OC1_SetConfig+0xe0>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d10c      	bne.n	8007a3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f023 0308 	bic.w	r3, r3, #8
 8007a26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	4313      	orrs	r3, r2
 8007a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	f023 0304 	bic.w	r3, r3, #4
 8007a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a16      	ldr	r2, [pc, #88]	; (8007a98 <TIM_OC1_SetConfig+0xdc>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_OC1_SetConfig+0x8e>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a15      	ldr	r2, [pc, #84]	; (8007a9c <TIM_OC1_SetConfig+0xe0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d111      	bne.n	8007a6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	695b      	ldr	r3, [r3, #20]
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	699b      	ldr	r3, [r3, #24]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	693a      	ldr	r2, [r7, #16]
 8007a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	685a      	ldr	r2, [r3, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	621a      	str	r2, [r3, #32]
}
 8007a88:	bf00      	nop
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	fffeff8f 	.word	0xfffeff8f
 8007a98:	40010000 	.word	0x40010000
 8007a9c:	40010400 	.word	0x40010400

08007aa0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	f023 0210 	bic.w	r2, r3, #16
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a1b      	ldr	r3, [r3, #32]
 8007aba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4b2e      	ldr	r3, [pc, #184]	; (8007b84 <TIM_OC2_SetConfig+0xe4>)
 8007acc:	4013      	ands	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f023 0320 	bic.w	r3, r3, #32
 8007aea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	011b      	lsls	r3, r3, #4
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	4a23      	ldr	r2, [pc, #140]	; (8007b88 <TIM_OC2_SetConfig+0xe8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d003      	beq.n	8007b08 <TIM_OC2_SetConfig+0x68>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a22      	ldr	r2, [pc, #136]	; (8007b8c <TIM_OC2_SetConfig+0xec>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d10d      	bne.n	8007b24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a18      	ldr	r2, [pc, #96]	; (8007b88 <TIM_OC2_SetConfig+0xe8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <TIM_OC2_SetConfig+0x94>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a17      	ldr	r2, [pc, #92]	; (8007b8c <TIM_OC2_SetConfig+0xec>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d113      	bne.n	8007b5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	695b      	ldr	r3, [r3, #20]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	693a      	ldr	r2, [r7, #16]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68fa      	ldr	r2, [r7, #12]
 8007b66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	697a      	ldr	r2, [r7, #20]
 8007b74:	621a      	str	r2, [r3, #32]
}
 8007b76:	bf00      	nop
 8007b78:	371c      	adds	r7, #28
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	feff8fff 	.word	0xfeff8fff
 8007b88:	40010000 	.word	0x40010000
 8007b8c:	40010400 	.word	0x40010400

08007b90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
 8007b9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4b2d      	ldr	r3, [pc, #180]	; (8007c70 <TIM_OC3_SetConfig+0xe0>)
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0303 	bic.w	r3, r3, #3
 8007bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68fa      	ldr	r2, [r7, #12]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	021b      	lsls	r3, r3, #8
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a22      	ldr	r2, [pc, #136]	; (8007c74 <TIM_OC3_SetConfig+0xe4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d003      	beq.n	8007bf6 <TIM_OC3_SetConfig+0x66>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a21      	ldr	r2, [pc, #132]	; (8007c78 <TIM_OC3_SetConfig+0xe8>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d10d      	bne.n	8007c12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	021b      	lsls	r3, r3, #8
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4a17      	ldr	r2, [pc, #92]	; (8007c74 <TIM_OC3_SetConfig+0xe4>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d003      	beq.n	8007c22 <TIM_OC3_SetConfig+0x92>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	4a16      	ldr	r2, [pc, #88]	; (8007c78 <TIM_OC3_SetConfig+0xe8>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d113      	bne.n	8007c4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	011b      	lsls	r3, r3, #4
 8007c38:	693a      	ldr	r2, [r7, #16]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	697a      	ldr	r2, [r7, #20]
 8007c62:	621a      	str	r2, [r3, #32]
}
 8007c64:	bf00      	nop
 8007c66:	371c      	adds	r7, #28
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	fffeff8f 	.word	0xfffeff8f
 8007c74:	40010000 	.word	0x40010000
 8007c78:	40010400 	.word	0x40010400

08007c7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b087      	sub	sp, #28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4b1e      	ldr	r3, [pc, #120]	; (8007d20 <TIM_OC4_SetConfig+0xa4>)
 8007ca8:	4013      	ands	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	021b      	lsls	r3, r3, #8
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	031b      	lsls	r3, r3, #12
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4a13      	ldr	r2, [pc, #76]	; (8007d24 <TIM_OC4_SetConfig+0xa8>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d003      	beq.n	8007ce4 <TIM_OC4_SetConfig+0x68>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a12      	ldr	r2, [pc, #72]	; (8007d28 <TIM_OC4_SetConfig+0xac>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d109      	bne.n	8007cf8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	019b      	lsls	r3, r3, #6
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	685a      	ldr	r2, [r3, #4]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	621a      	str	r2, [r3, #32]
}
 8007d12:	bf00      	nop
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	feff8fff 	.word	0xfeff8fff
 8007d24:	40010000 	.word	0x40010000
 8007d28:	40010400 	.word	0x40010400

08007d2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b087      	sub	sp, #28
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a1b      	ldr	r3, [r3, #32]
 8007d3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6a1b      	ldr	r3, [r3, #32]
 8007d46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	4b1b      	ldr	r3, [pc, #108]	; (8007dc4 <TIM_OC5_SetConfig+0x98>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007d6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	689b      	ldr	r3, [r3, #8]
 8007d72:	041b      	lsls	r3, r3, #16
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a12      	ldr	r2, [pc, #72]	; (8007dc8 <TIM_OC5_SetConfig+0x9c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d003      	beq.n	8007d8a <TIM_OC5_SetConfig+0x5e>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a11      	ldr	r2, [pc, #68]	; (8007dcc <TIM_OC5_SetConfig+0xa0>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d109      	bne.n	8007d9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	021b      	lsls	r3, r3, #8
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	697a      	ldr	r2, [r7, #20]
 8007da2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	621a      	str	r2, [r3, #32]
}
 8007db8:	bf00      	nop
 8007dba:	371c      	adds	r7, #28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr
 8007dc4:	fffeff8f 	.word	0xfffeff8f
 8007dc8:	40010000 	.word	0x40010000
 8007dcc:	40010400 	.word	0x40010400

08007dd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b087      	sub	sp, #28
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a1b      	ldr	r3, [r3, #32]
 8007dea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	685b      	ldr	r3, [r3, #4]
 8007df0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	4b1c      	ldr	r3, [pc, #112]	; (8007e6c <TIM_OC6_SetConfig+0x9c>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	021b      	lsls	r3, r3, #8
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	051b      	lsls	r3, r3, #20
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a13      	ldr	r2, [pc, #76]	; (8007e70 <TIM_OC6_SetConfig+0xa0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_OC6_SetConfig+0x60>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a12      	ldr	r2, [pc, #72]	; (8007e74 <TIM_OC6_SetConfig+0xa4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d109      	bne.n	8007e44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	029b      	lsls	r3, r3, #10
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	621a      	str	r2, [r3, #32]
}
 8007e5e:	bf00      	nop
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	feff8fff 	.word	0xfeff8fff
 8007e70:	40010000 	.word	0x40010000
 8007e74:	40010400 	.word	0x40010400

08007e78 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b086      	sub	sp, #24
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e90:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	4b39      	ldr	r3, [pc, #228]	; (8007f84 <TIM_SlaveTimer_SetConfig+0x10c>)
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	697a      	ldr	r2, [r7, #20]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	697a      	ldr	r2, [r7, #20]
 8007eb4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	2b30      	cmp	r3, #48	; 0x30
 8007ebc:	d05c      	beq.n	8007f78 <TIM_SlaveTimer_SetConfig+0x100>
 8007ebe:	2b30      	cmp	r3, #48	; 0x30
 8007ec0:	d806      	bhi.n	8007ed0 <TIM_SlaveTimer_SetConfig+0x58>
 8007ec2:	2b10      	cmp	r3, #16
 8007ec4:	d058      	beq.n	8007f78 <TIM_SlaveTimer_SetConfig+0x100>
 8007ec6:	2b20      	cmp	r3, #32
 8007ec8:	d056      	beq.n	8007f78 <TIM_SlaveTimer_SetConfig+0x100>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d054      	beq.n	8007f78 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8007ece:	e054      	b.n	8007f7a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007ed0:	2b50      	cmp	r3, #80	; 0x50
 8007ed2:	d03d      	beq.n	8007f50 <TIM_SlaveTimer_SetConfig+0xd8>
 8007ed4:	2b50      	cmp	r3, #80	; 0x50
 8007ed6:	d802      	bhi.n	8007ede <TIM_SlaveTimer_SetConfig+0x66>
 8007ed8:	2b40      	cmp	r3, #64	; 0x40
 8007eda:	d010      	beq.n	8007efe <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8007edc:	e04d      	b.n	8007f7a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007ede:	2b60      	cmp	r3, #96	; 0x60
 8007ee0:	d040      	beq.n	8007f64 <TIM_SlaveTimer_SetConfig+0xec>
 8007ee2:	2b70      	cmp	r3, #112	; 0x70
 8007ee4:	d000      	beq.n	8007ee8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8007ee6:	e048      	b.n	8007f7a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	68d9      	ldr	r1, [r3, #12]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	689a      	ldr	r2, [r3, #8]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	f000 f9ea 	bl	80082d0 <TIM_ETR_SetConfig>
      break;
 8007efc:	e03d      	b.n	8007f7a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d101      	bne.n	8007f0a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	e038      	b.n	8007f7c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6a1a      	ldr	r2, [r3, #32]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0201 	bic.w	r2, r2, #1
 8007f20:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f30:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	011b      	lsls	r3, r3, #4
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	693a      	ldr	r2, [r7, #16]
 8007f4c:	621a      	str	r2, [r3, #32]
      break;
 8007f4e:	e014      	b.n	8007f7a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	6899      	ldr	r1, [r3, #8]
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	f000 f887 	bl	8008070 <TIM_TI1_ConfigInputStage>
      break;
 8007f62:	e00a      	b.n	8007f7a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6818      	ldr	r0, [r3, #0]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	6899      	ldr	r1, [r3, #8]
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	461a      	mov	r2, r3
 8007f72:	f000 f8e9 	bl	8008148 <TIM_TI2_ConfigInputStage>
      break;
 8007f76:	e000      	b.n	8007f7a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8007f78:	bf00      	nop
  }
  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	fffefff8 	.word	0xfffefff8

08007f88 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
 8007f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	f023 0201 	bic.w	r2, r3, #1
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	4a28      	ldr	r2, [pc, #160]	; (8008054 <TIM_TI1_SetConfig+0xcc>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d01b      	beq.n	8007fee <TIM_TI1_SetConfig+0x66>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fbc:	d017      	beq.n	8007fee <TIM_TI1_SetConfig+0x66>
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	4a25      	ldr	r2, [pc, #148]	; (8008058 <TIM_TI1_SetConfig+0xd0>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d013      	beq.n	8007fee <TIM_TI1_SetConfig+0x66>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	4a24      	ldr	r2, [pc, #144]	; (800805c <TIM_TI1_SetConfig+0xd4>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d00f      	beq.n	8007fee <TIM_TI1_SetConfig+0x66>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4a23      	ldr	r2, [pc, #140]	; (8008060 <TIM_TI1_SetConfig+0xd8>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d00b      	beq.n	8007fee <TIM_TI1_SetConfig+0x66>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4a22      	ldr	r2, [pc, #136]	; (8008064 <TIM_TI1_SetConfig+0xdc>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d007      	beq.n	8007fee <TIM_TI1_SetConfig+0x66>
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4a21      	ldr	r2, [pc, #132]	; (8008068 <TIM_TI1_SetConfig+0xe0>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d003      	beq.n	8007fee <TIM_TI1_SetConfig+0x66>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4a20      	ldr	r2, [pc, #128]	; (800806c <TIM_TI1_SetConfig+0xe4>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d101      	bne.n	8007ff2 <TIM_TI1_SetConfig+0x6a>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e000      	b.n	8007ff4 <TIM_TI1_SetConfig+0x6c>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d008      	beq.n	800800a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	f023 0303 	bic.w	r3, r3, #3
 8007ffe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]
 8008008:	e003      	b.n	8008012 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	f043 0301 	orr.w	r3, r3, #1
 8008010:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	011b      	lsls	r3, r3, #4
 800801e:	b2db      	uxtb	r3, r3
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	4313      	orrs	r3, r2
 8008024:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	f023 030a 	bic.w	r3, r3, #10
 800802c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f003 030a 	and.w	r3, r3, #10
 8008034:	693a      	ldr	r2, [r7, #16]
 8008036:	4313      	orrs	r3, r2
 8008038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	697a      	ldr	r2, [r7, #20]
 800803e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	621a      	str	r2, [r3, #32]
}
 8008046:	bf00      	nop
 8008048:	371c      	adds	r7, #28
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr
 8008052:	bf00      	nop
 8008054:	40010000 	.word	0x40010000
 8008058:	40000400 	.word	0x40000400
 800805c:	40000800 	.word	0x40000800
 8008060:	40000c00 	.word	0x40000c00
 8008064:	40010400 	.word	0x40010400
 8008068:	40014000 	.word	0x40014000
 800806c:	40001800 	.word	0x40001800

08008070 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008070:	b480      	push	{r7}
 8008072:	b087      	sub	sp, #28
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	f023 0201 	bic.w	r2, r3, #1
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800809a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	011b      	lsls	r3, r3, #4
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	4313      	orrs	r3, r2
 80080a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f023 030a 	bic.w	r3, r3, #10
 80080ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	621a      	str	r2, [r3, #32]
}
 80080c2:	bf00      	nop
 80080c4:	371c      	adds	r7, #28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b087      	sub	sp, #28
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	60b9      	str	r1, [r7, #8]
 80080d8:	607a      	str	r2, [r7, #4]
 80080da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	f023 0210 	bic.w	r2, r3, #16
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	021b      	lsls	r3, r3, #8
 8008100:	697a      	ldr	r2, [r7, #20]
 8008102:	4313      	orrs	r3, r2
 8008104:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800810c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	031b      	lsls	r3, r3, #12
 8008112:	b29b      	uxth	r3, r3
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	4313      	orrs	r3, r2
 8008118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008120:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	011b      	lsls	r3, r3, #4
 8008126:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	621a      	str	r2, [r3, #32]
}
 800813c:	bf00      	nop
 800813e:	371c      	adds	r7, #28
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008148:	b480      	push	{r7}
 800814a:	b087      	sub	sp, #28
 800814c:	af00      	add	r7, sp, #0
 800814e:	60f8      	str	r0, [r7, #12]
 8008150:	60b9      	str	r1, [r7, #8]
 8008152:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	f023 0210 	bic.w	r2, r3, #16
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	699b      	ldr	r3, [r3, #24]
 8008164:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6a1b      	ldr	r3, [r3, #32]
 800816a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800816c:	697b      	ldr	r3, [r7, #20]
 800816e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008172:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	031b      	lsls	r3, r3, #12
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008184:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	011b      	lsls	r3, r3, #4
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	621a      	str	r2, [r3, #32]
}
 800819c:	bf00      	nop
 800819e:	371c      	adds	r7, #28
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b087      	sub	sp, #28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f023 0303 	bic.w	r3, r3, #3
 80081d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80081d6:	697a      	ldr	r2, [r7, #20]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4313      	orrs	r3, r2
 80081dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	011b      	lsls	r3, r3, #4
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	4313      	orrs	r3, r2
 80081f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80081f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4313      	orrs	r3, r2
 8008206:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	621a      	str	r2, [r3, #32]
}
 8008214:	bf00      	nop
 8008216:	371c      	adds	r7, #28
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008220:	b480      	push	{r7}
 8008222:	b087      	sub	sp, #28
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	6a1b      	ldr	r3, [r3, #32]
 8008232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	69db      	ldr	r3, [r3, #28]
 800823e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6a1b      	ldr	r3, [r3, #32]
 8008244:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800824c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	021b      	lsls	r3, r3, #8
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	4313      	orrs	r3, r2
 8008256:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800825e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	031b      	lsls	r3, r3, #12
 8008264:	b29b      	uxth	r3, r3
 8008266:	697a      	ldr	r2, [r7, #20]
 8008268:	4313      	orrs	r3, r2
 800826a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008272:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	031b      	lsls	r3, r3, #12
 8008278:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	4313      	orrs	r3, r2
 8008280:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	621a      	str	r2, [r3, #32]
}
 800828e:	bf00      	nop
 8008290:	371c      	adds	r7, #28
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr

0800829a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800829a:	b480      	push	{r7}
 800829c:	b085      	sub	sp, #20
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	689b      	ldr	r3, [r3, #8]
 80082a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	f043 0307 	orr.w	r3, r3, #7
 80082bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	609a      	str	r2, [r3, #8]
}
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	689b      	ldr	r3, [r3, #8]
 80082e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	021a      	lsls	r2, r3, #8
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	431a      	orrs	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	697a      	ldr	r2, [r7, #20]
 80082fa:	4313      	orrs	r3, r2
 80082fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	609a      	str	r2, [r3, #8]
}
 8008304:	bf00      	nop
 8008306:	371c      	adds	r7, #28
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008310:	b480      	push	{r7}
 8008312:	b087      	sub	sp, #28
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	f003 031f 	and.w	r3, r3, #31
 8008322:	2201      	movs	r2, #1
 8008324:	fa02 f303 	lsl.w	r3, r2, r3
 8008328:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6a1a      	ldr	r2, [r3, #32]
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	43db      	mvns	r3, r3
 8008332:	401a      	ands	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6a1a      	ldr	r2, [r3, #32]
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	f003 031f 	and.w	r3, r3, #31
 8008342:	6879      	ldr	r1, [r7, #4]
 8008344:	fa01 f303 	lsl.w	r3, r1, r3
 8008348:	431a      	orrs	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	621a      	str	r2, [r3, #32]
}
 800834e:	bf00      	nop
 8008350:	371c      	adds	r7, #28
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
	...

0800835c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800836c:	2b01      	cmp	r3, #1
 800836e:	d101      	bne.n	8008374 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008370:	2302      	movs	r3, #2
 8008372:	e06d      	b.n	8008450 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a30      	ldr	r2, [pc, #192]	; (800845c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d004      	beq.n	80083a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a2f      	ldr	r2, [pc, #188]	; (8008460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d108      	bne.n	80083ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80083ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	4313      	orrs	r3, r2
 80083ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a20      	ldr	r2, [pc, #128]	; (800845c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d022      	beq.n	8008424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e6:	d01d      	beq.n	8008424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a1d      	ldr	r2, [pc, #116]	; (8008464 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d018      	beq.n	8008424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a1c      	ldr	r2, [pc, #112]	; (8008468 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d013      	beq.n	8008424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a1a      	ldr	r2, [pc, #104]	; (800846c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d00e      	beq.n	8008424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a15      	ldr	r2, [pc, #84]	; (8008460 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d009      	beq.n	8008424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a16      	ldr	r2, [pc, #88]	; (8008470 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d004      	beq.n	8008424 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a15      	ldr	r2, [pc, #84]	; (8008474 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d10c      	bne.n	800843e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800842a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	4313      	orrs	r3, r2
 8008434:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	40010000 	.word	0x40010000
 8008460:	40010400 	.word	0x40010400
 8008464:	40000400 	.word	0x40000400
 8008468:	40000800 	.word	0x40000800
 800846c:	40000c00 	.word	0x40000c00
 8008470:	40014000 	.word	0x40014000
 8008474:	40001800 	.word	0x40001800

08008478 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800848c:	2b01      	cmp	r3, #1
 800848e:	d101      	bne.n	8008494 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008490:	2302      	movs	r3, #2
 8008492:	e065      	b.n	8008560 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	691b      	ldr	r3, [r3, #16]
 80084de:	4313      	orrs	r3, r2
 80084e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fa:	4313      	orrs	r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	041b      	lsls	r3, r3, #16
 800850a:	4313      	orrs	r3, r2
 800850c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a16      	ldr	r2, [pc, #88]	; (800856c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d004      	beq.n	8008522 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a14      	ldr	r2, [pc, #80]	; (8008570 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d115      	bne.n	800854e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852c:	051b      	lsls	r3, r3, #20
 800852e:	4313      	orrs	r3, r2
 8008530:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	69db      	ldr	r3, [r3, #28]
 800853c:	4313      	orrs	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	4313      	orrs	r3, r2
 800854c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	68fa      	ldr	r2, [r7, #12]
 8008554:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	40010000 	.word	0x40010000
 8008570:	40010400 	.word	0x40010400

08008574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800859c:	b480      	push	{r7}
 800859e:	b083      	sub	sp, #12
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085a4:	bf00      	nop
 80085a6:	370c      	adds	r7, #12
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d101      	bne.n	80085c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e040      	b.n	8008644 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d106      	bne.n	80085d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7fa fc1e 	bl	8002e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2224      	movs	r2, #36	; 0x24
 80085dc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 0201 	bic.w	r2, r2, #1
 80085ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fac4 	bl	8008b7c <UART_SetConfig>
 80085f4:	4603      	mov	r3, r0
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d101      	bne.n	80085fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80085fa:	2301      	movs	r3, #1
 80085fc:	e022      	b.n	8008644 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	f000 fd62 	bl	80090d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685a      	ldr	r2, [r3, #4]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800861a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	689a      	ldr	r2, [r3, #8]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800862a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	681a      	ldr	r2, [r3, #0]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f042 0201 	orr.w	r2, r2, #1
 800863a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 fde9 	bl	8009214 <UART_CheckIdleState>
 8008642:	4603      	mov	r3, r0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08a      	sub	sp, #40	; 0x28
 8008650:	af02      	add	r7, sp, #8
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	4613      	mov	r3, r2
 800865a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008660:	2b20      	cmp	r3, #32
 8008662:	d17f      	bne.n	8008764 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <HAL_UART_Transmit+0x24>
 800866a:	88fb      	ldrh	r3, [r7, #6]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e078      	b.n	8008766 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800867a:	2b01      	cmp	r3, #1
 800867c:	d101      	bne.n	8008682 <HAL_UART_Transmit+0x36>
 800867e:	2302      	movs	r3, #2
 8008680:	e071      	b.n	8008766 <HAL_UART_Transmit+0x11a>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2221      	movs	r2, #33	; 0x21
 8008694:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008696:	f7fa fe33 	bl	8003300 <HAL_GetTick>
 800869a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	88fa      	ldrh	r2, [r7, #6]
 80086a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	88fa      	ldrh	r2, [r7, #6]
 80086a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b4:	d108      	bne.n	80086c8 <HAL_UART_Transmit+0x7c>
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d104      	bne.n	80086c8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80086be:	2300      	movs	r3, #0
 80086c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	61bb      	str	r3, [r7, #24]
 80086c6:	e003      	b.n	80086d0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80086d8:	e02c      	b.n	8008734 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	9300      	str	r3, [sp, #0]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2200      	movs	r2, #0
 80086e2:	2180      	movs	r1, #128	; 0x80
 80086e4:	68f8      	ldr	r0, [r7, #12]
 80086e6:	f000 fdda 	bl	800929e <UART_WaitOnFlagUntilTimeout>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d001      	beq.n	80086f4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e038      	b.n	8008766 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10b      	bne.n	8008712 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	881b      	ldrh	r3, [r3, #0]
 80086fe:	461a      	mov	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008708:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	3302      	adds	r3, #2
 800870e:	61bb      	str	r3, [r7, #24]
 8008710:	e007      	b.n	8008722 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	781a      	ldrb	r2, [r3, #0]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	3301      	adds	r3, #1
 8008720:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008728:	b29b      	uxth	r3, r3
 800872a:	3b01      	subs	r3, #1
 800872c:	b29a      	uxth	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800873a:	b29b      	uxth	r3, r3
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1cc      	bne.n	80086da <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2200      	movs	r2, #0
 8008748:	2140      	movs	r1, #64	; 0x40
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	f000 fda7 	bl	800929e <UART_WaitOnFlagUntilTimeout>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d001      	beq.n	800875a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e005      	b.n	8008766 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2220      	movs	r2, #32
 800875e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	e000      	b.n	8008766 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008764:	2302      	movs	r3, #2
  }
}
 8008766:	4618      	mov	r0, r3
 8008768:	3720      	adds	r7, #32
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}
	...

08008770 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	4613      	mov	r3, r2
 800877c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008782:	2b20      	cmp	r3, #32
 8008784:	f040 808a 	bne.w	800889c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d002      	beq.n	8008794 <HAL_UART_Receive_IT+0x24>
 800878e:	88fb      	ldrh	r3, [r7, #6]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008794:	2301      	movs	r3, #1
 8008796:	e082      	b.n	800889e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d101      	bne.n	80087a6 <HAL_UART_Receive_IT+0x36>
 80087a2:	2302      	movs	r3, #2
 80087a4:	e07b      	b.n	800889e <HAL_UART_Receive_IT+0x12e>
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	88fa      	ldrh	r2, [r7, #6]
 80087b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	88fa      	ldrh	r2, [r7, #6]
 80087c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2200      	movs	r2, #0
 80087c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087d2:	d10e      	bne.n	80087f2 <HAL_UART_Receive_IT+0x82>
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d105      	bne.n	80087e8 <HAL_UART_Receive_IT+0x78>
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80087e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087e6:	e02d      	b.n	8008844 <HAL_UART_Receive_IT+0xd4>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	22ff      	movs	r2, #255	; 0xff
 80087ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80087f0:	e028      	b.n	8008844 <HAL_UART_Receive_IT+0xd4>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10d      	bne.n	8008816 <HAL_UART_Receive_IT+0xa6>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d104      	bne.n	800880c <HAL_UART_Receive_IT+0x9c>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	22ff      	movs	r2, #255	; 0xff
 8008806:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800880a:	e01b      	b.n	8008844 <HAL_UART_Receive_IT+0xd4>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	227f      	movs	r2, #127	; 0x7f
 8008810:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008814:	e016      	b.n	8008844 <HAL_UART_Receive_IT+0xd4>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800881e:	d10d      	bne.n	800883c <HAL_UART_Receive_IT+0xcc>
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	691b      	ldr	r3, [r3, #16]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d104      	bne.n	8008832 <HAL_UART_Receive_IT+0xc2>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	227f      	movs	r2, #127	; 0x7f
 800882c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008830:	e008      	b.n	8008844 <HAL_UART_Receive_IT+0xd4>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	223f      	movs	r2, #63	; 0x3f
 8008836:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800883a:	e003      	b.n	8008844 <HAL_UART_Receive_IT+0xd4>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2222      	movs	r2, #34	; 0x22
 800884e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689a      	ldr	r2, [r3, #8]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f042 0201 	orr.w	r2, r2, #1
 800885e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008868:	d107      	bne.n	800887a <HAL_UART_Receive_IT+0x10a>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d103      	bne.n	800887a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4a0d      	ldr	r2, [pc, #52]	; (80088ac <HAL_UART_Receive_IT+0x13c>)
 8008876:	661a      	str	r2, [r3, #96]	; 0x60
 8008878:	e002      	b.n	8008880 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4a0c      	ldr	r2, [pc, #48]	; (80088b0 <HAL_UART_Receive_IT+0x140>)
 800887e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2200      	movs	r2, #0
 8008884:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008896:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008898:	2300      	movs	r3, #0
 800889a:	e000      	b.n	800889e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800889c:	2302      	movs	r3, #2
  }
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3714      	adds	r7, #20
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
 80088aa:	bf00      	nop
 80088ac:	080094d9 	.word	0x080094d9
 80088b0:	08009433 	.word	0x08009433

080088b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	69db      	ldr	r3, [r3, #28]
 80088c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	f640 030f 	movw	r3, #2063	; 0x80f
 80088da:	4013      	ands	r3, r2
 80088dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d113      	bne.n	800890c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	f003 0320 	and.w	r3, r3, #32
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00e      	beq.n	800890c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	f003 0320 	and.w	r3, r3, #32
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d009      	beq.n	800890c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 8114 	beq.w	8008b2a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
      }
      return;
 800890a:	e10e      	b.n	8008b2a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 80d6 	beq.w	8008ac0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d105      	bne.n	800892a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 80cb 	beq.w	8008ac0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00e      	beq.n	8008952 <HAL_UART_IRQHandler+0x9e>
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2201      	movs	r2, #1
 8008944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800894a:	f043 0201 	orr.w	r2, r3, #1
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00e      	beq.n	800897a <HAL_UART_IRQHandler+0xc6>
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	f003 0301 	and.w	r3, r3, #1
 8008962:	2b00      	cmp	r3, #0
 8008964:	d009      	beq.n	800897a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2202      	movs	r2, #2
 800896c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008972:	f043 0204 	orr.w	r2, r3, #4
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	f003 0304 	and.w	r3, r3, #4
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00e      	beq.n	80089a2 <HAL_UART_IRQHandler+0xee>
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f003 0301 	and.w	r3, r3, #1
 800898a:	2b00      	cmp	r3, #0
 800898c:	d009      	beq.n	80089a2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2204      	movs	r2, #4
 8008994:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800899a:	f043 0202 	orr.w	r2, r3, #2
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	f003 0308 	and.w	r3, r3, #8
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d013      	beq.n	80089d4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80089ac:	69bb      	ldr	r3, [r7, #24]
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d104      	bne.n	80089c0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2208      	movs	r2, #8
 80089c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089cc:	f043 0208 	orr.w	r2, r3, #8
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00f      	beq.n	80089fe <HAL_UART_IRQHandler+0x14a>
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00a      	beq.n	80089fe <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089f6:	f043 0220 	orr.w	r2, r3, #32
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 8093 	beq.w	8008b2e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	f003 0320 	and.w	r3, r3, #32
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00c      	beq.n	8008a2c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d007      	beq.n	8008a2c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d003      	beq.n	8008a2c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a30:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3c:	2b40      	cmp	r3, #64	; 0x40
 8008a3e:	d004      	beq.n	8008a4a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d031      	beq.n	8008aae <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fca2 	bl	8009394 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a5a:	2b40      	cmp	r3, #64	; 0x40
 8008a5c:	d123      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	689a      	ldr	r2, [r3, #8]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a6c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d013      	beq.n	8008a9e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a7a:	4a30      	ldr	r2, [pc, #192]	; (8008b3c <HAL_UART_IRQHandler+0x288>)
 8008a7c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7fb fa96 	bl	8003fb4 <HAL_DMA_Abort_IT>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d016      	beq.n	8008abc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a9c:	e00e      	b.n	8008abc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 f858 	bl	8008b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aa4:	e00a      	b.n	8008abc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 f854 	bl	8008b54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008aac:	e006      	b.n	8008abc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f850 	bl	8008b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008aba:	e038      	b.n	8008b2e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008abc:	bf00      	nop
    return;
 8008abe:	e036      	b.n	8008b2e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00d      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x232>
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d008      	beq.n	8008ae6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008adc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 f842 	bl	8008b68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008ae4:	e026      	b.n	8008b34 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00d      	beq.n	8008b0c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d008      	beq.n	8008b0c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d017      	beq.n	8008b32 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	4798      	blx	r3
    }
    return;
 8008b0a:	e012      	b.n	8008b32 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00e      	beq.n	8008b34 <HAL_UART_IRQHandler+0x280>
 8008b16:	69bb      	ldr	r3, [r7, #24]
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d009      	beq.n	8008b34 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fc6d 	bl	8009400 <UART_EndTransmit_IT>
    return;
 8008b26:	bf00      	nop
 8008b28:	e004      	b.n	8008b34 <HAL_UART_IRQHandler+0x280>
      return;
 8008b2a:	bf00      	nop
 8008b2c:	e002      	b.n	8008b34 <HAL_UART_IRQHandler+0x280>
    return;
 8008b2e:	bf00      	nop
 8008b30:	e000      	b.n	8008b34 <HAL_UART_IRQHandler+0x280>
    return;
 8008b32:	bf00      	nop
  }

}
 8008b34:	3720      	adds	r7, #32
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	080093d5 	.word	0x080093d5

08008b40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b70:	bf00      	nop
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b088      	sub	sp, #32
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008b84:	2300      	movs	r3, #0
 8008b86:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	431a      	orrs	r2, r3
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	431a      	orrs	r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	681a      	ldr	r2, [r3, #0]
 8008baa:	4bb1      	ldr	r3, [pc, #708]	; (8008e70 <UART_SetConfig+0x2f4>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	6812      	ldr	r2, [r2, #0]
 8008bb2:	6939      	ldr	r1, [r7, #16]
 8008bb4:	430b      	orrs	r3, r1
 8008bb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	685b      	ldr	r3, [r3, #4]
 8008bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	68da      	ldr	r2, [r3, #12]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	430a      	orrs	r2, r1
 8008bcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	699b      	ldr	r3, [r3, #24]
 8008bd2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	689b      	ldr	r3, [r3, #8]
 8008be4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	430a      	orrs	r2, r1
 8008bf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a9f      	ldr	r2, [pc, #636]	; (8008e74 <UART_SetConfig+0x2f8>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d121      	bne.n	8008c40 <UART_SetConfig+0xc4>
 8008bfc:	4b9e      	ldr	r3, [pc, #632]	; (8008e78 <UART_SetConfig+0x2fc>)
 8008bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c02:	f003 0303 	and.w	r3, r3, #3
 8008c06:	2b03      	cmp	r3, #3
 8008c08:	d816      	bhi.n	8008c38 <UART_SetConfig+0xbc>
 8008c0a:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <UART_SetConfig+0x94>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c2d 	.word	0x08008c2d
 8008c18:	08008c27 	.word	0x08008c27
 8008c1c:	08008c33 	.word	0x08008c33
 8008c20:	2301      	movs	r3, #1
 8008c22:	77fb      	strb	r3, [r7, #31]
 8008c24:	e151      	b.n	8008eca <UART_SetConfig+0x34e>
 8008c26:	2302      	movs	r3, #2
 8008c28:	77fb      	strb	r3, [r7, #31]
 8008c2a:	e14e      	b.n	8008eca <UART_SetConfig+0x34e>
 8008c2c:	2304      	movs	r3, #4
 8008c2e:	77fb      	strb	r3, [r7, #31]
 8008c30:	e14b      	b.n	8008eca <UART_SetConfig+0x34e>
 8008c32:	2308      	movs	r3, #8
 8008c34:	77fb      	strb	r3, [r7, #31]
 8008c36:	e148      	b.n	8008eca <UART_SetConfig+0x34e>
 8008c38:	2310      	movs	r3, #16
 8008c3a:	77fb      	strb	r3, [r7, #31]
 8008c3c:	bf00      	nop
 8008c3e:	e144      	b.n	8008eca <UART_SetConfig+0x34e>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a8d      	ldr	r2, [pc, #564]	; (8008e7c <UART_SetConfig+0x300>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d134      	bne.n	8008cb4 <UART_SetConfig+0x138>
 8008c4a:	4b8b      	ldr	r3, [pc, #556]	; (8008e78 <UART_SetConfig+0x2fc>)
 8008c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c50:	f003 030c 	and.w	r3, r3, #12
 8008c54:	2b0c      	cmp	r3, #12
 8008c56:	d829      	bhi.n	8008cac <UART_SetConfig+0x130>
 8008c58:	a201      	add	r2, pc, #4	; (adr r2, 8008c60 <UART_SetConfig+0xe4>)
 8008c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5e:	bf00      	nop
 8008c60:	08008c95 	.word	0x08008c95
 8008c64:	08008cad 	.word	0x08008cad
 8008c68:	08008cad 	.word	0x08008cad
 8008c6c:	08008cad 	.word	0x08008cad
 8008c70:	08008ca1 	.word	0x08008ca1
 8008c74:	08008cad 	.word	0x08008cad
 8008c78:	08008cad 	.word	0x08008cad
 8008c7c:	08008cad 	.word	0x08008cad
 8008c80:	08008c9b 	.word	0x08008c9b
 8008c84:	08008cad 	.word	0x08008cad
 8008c88:	08008cad 	.word	0x08008cad
 8008c8c:	08008cad 	.word	0x08008cad
 8008c90:	08008ca7 	.word	0x08008ca7
 8008c94:	2300      	movs	r3, #0
 8008c96:	77fb      	strb	r3, [r7, #31]
 8008c98:	e117      	b.n	8008eca <UART_SetConfig+0x34e>
 8008c9a:	2302      	movs	r3, #2
 8008c9c:	77fb      	strb	r3, [r7, #31]
 8008c9e:	e114      	b.n	8008eca <UART_SetConfig+0x34e>
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	77fb      	strb	r3, [r7, #31]
 8008ca4:	e111      	b.n	8008eca <UART_SetConfig+0x34e>
 8008ca6:	2308      	movs	r3, #8
 8008ca8:	77fb      	strb	r3, [r7, #31]
 8008caa:	e10e      	b.n	8008eca <UART_SetConfig+0x34e>
 8008cac:	2310      	movs	r3, #16
 8008cae:	77fb      	strb	r3, [r7, #31]
 8008cb0:	bf00      	nop
 8008cb2:	e10a      	b.n	8008eca <UART_SetConfig+0x34e>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a71      	ldr	r2, [pc, #452]	; (8008e80 <UART_SetConfig+0x304>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d120      	bne.n	8008d00 <UART_SetConfig+0x184>
 8008cbe:	4b6e      	ldr	r3, [pc, #440]	; (8008e78 <UART_SetConfig+0x2fc>)
 8008cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cc4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008cc8:	2b10      	cmp	r3, #16
 8008cca:	d00f      	beq.n	8008cec <UART_SetConfig+0x170>
 8008ccc:	2b10      	cmp	r3, #16
 8008cce:	d802      	bhi.n	8008cd6 <UART_SetConfig+0x15a>
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d005      	beq.n	8008ce0 <UART_SetConfig+0x164>
 8008cd4:	e010      	b.n	8008cf8 <UART_SetConfig+0x17c>
 8008cd6:	2b20      	cmp	r3, #32
 8008cd8:	d005      	beq.n	8008ce6 <UART_SetConfig+0x16a>
 8008cda:	2b30      	cmp	r3, #48	; 0x30
 8008cdc:	d009      	beq.n	8008cf2 <UART_SetConfig+0x176>
 8008cde:	e00b      	b.n	8008cf8 <UART_SetConfig+0x17c>
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	77fb      	strb	r3, [r7, #31]
 8008ce4:	e0f1      	b.n	8008eca <UART_SetConfig+0x34e>
 8008ce6:	2302      	movs	r3, #2
 8008ce8:	77fb      	strb	r3, [r7, #31]
 8008cea:	e0ee      	b.n	8008eca <UART_SetConfig+0x34e>
 8008cec:	2304      	movs	r3, #4
 8008cee:	77fb      	strb	r3, [r7, #31]
 8008cf0:	e0eb      	b.n	8008eca <UART_SetConfig+0x34e>
 8008cf2:	2308      	movs	r3, #8
 8008cf4:	77fb      	strb	r3, [r7, #31]
 8008cf6:	e0e8      	b.n	8008eca <UART_SetConfig+0x34e>
 8008cf8:	2310      	movs	r3, #16
 8008cfa:	77fb      	strb	r3, [r7, #31]
 8008cfc:	bf00      	nop
 8008cfe:	e0e4      	b.n	8008eca <UART_SetConfig+0x34e>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a5f      	ldr	r2, [pc, #380]	; (8008e84 <UART_SetConfig+0x308>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d120      	bne.n	8008d4c <UART_SetConfig+0x1d0>
 8008d0a:	4b5b      	ldr	r3, [pc, #364]	; (8008e78 <UART_SetConfig+0x2fc>)
 8008d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d10:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008d14:	2b40      	cmp	r3, #64	; 0x40
 8008d16:	d00f      	beq.n	8008d38 <UART_SetConfig+0x1bc>
 8008d18:	2b40      	cmp	r3, #64	; 0x40
 8008d1a:	d802      	bhi.n	8008d22 <UART_SetConfig+0x1a6>
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d005      	beq.n	8008d2c <UART_SetConfig+0x1b0>
 8008d20:	e010      	b.n	8008d44 <UART_SetConfig+0x1c8>
 8008d22:	2b80      	cmp	r3, #128	; 0x80
 8008d24:	d005      	beq.n	8008d32 <UART_SetConfig+0x1b6>
 8008d26:	2bc0      	cmp	r3, #192	; 0xc0
 8008d28:	d009      	beq.n	8008d3e <UART_SetConfig+0x1c2>
 8008d2a:	e00b      	b.n	8008d44 <UART_SetConfig+0x1c8>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	77fb      	strb	r3, [r7, #31]
 8008d30:	e0cb      	b.n	8008eca <UART_SetConfig+0x34e>
 8008d32:	2302      	movs	r3, #2
 8008d34:	77fb      	strb	r3, [r7, #31]
 8008d36:	e0c8      	b.n	8008eca <UART_SetConfig+0x34e>
 8008d38:	2304      	movs	r3, #4
 8008d3a:	77fb      	strb	r3, [r7, #31]
 8008d3c:	e0c5      	b.n	8008eca <UART_SetConfig+0x34e>
 8008d3e:	2308      	movs	r3, #8
 8008d40:	77fb      	strb	r3, [r7, #31]
 8008d42:	e0c2      	b.n	8008eca <UART_SetConfig+0x34e>
 8008d44:	2310      	movs	r3, #16
 8008d46:	77fb      	strb	r3, [r7, #31]
 8008d48:	bf00      	nop
 8008d4a:	e0be      	b.n	8008eca <UART_SetConfig+0x34e>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a4d      	ldr	r2, [pc, #308]	; (8008e88 <UART_SetConfig+0x30c>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d124      	bne.n	8008da0 <UART_SetConfig+0x224>
 8008d56:	4b48      	ldr	r3, [pc, #288]	; (8008e78 <UART_SetConfig+0x2fc>)
 8008d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d64:	d012      	beq.n	8008d8c <UART_SetConfig+0x210>
 8008d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6a:	d802      	bhi.n	8008d72 <UART_SetConfig+0x1f6>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d007      	beq.n	8008d80 <UART_SetConfig+0x204>
 8008d70:	e012      	b.n	8008d98 <UART_SetConfig+0x21c>
 8008d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d76:	d006      	beq.n	8008d86 <UART_SetConfig+0x20a>
 8008d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d7c:	d009      	beq.n	8008d92 <UART_SetConfig+0x216>
 8008d7e:	e00b      	b.n	8008d98 <UART_SetConfig+0x21c>
 8008d80:	2300      	movs	r3, #0
 8008d82:	77fb      	strb	r3, [r7, #31]
 8008d84:	e0a1      	b.n	8008eca <UART_SetConfig+0x34e>
 8008d86:	2302      	movs	r3, #2
 8008d88:	77fb      	strb	r3, [r7, #31]
 8008d8a:	e09e      	b.n	8008eca <UART_SetConfig+0x34e>
 8008d8c:	2304      	movs	r3, #4
 8008d8e:	77fb      	strb	r3, [r7, #31]
 8008d90:	e09b      	b.n	8008eca <UART_SetConfig+0x34e>
 8008d92:	2308      	movs	r3, #8
 8008d94:	77fb      	strb	r3, [r7, #31]
 8008d96:	e098      	b.n	8008eca <UART_SetConfig+0x34e>
 8008d98:	2310      	movs	r3, #16
 8008d9a:	77fb      	strb	r3, [r7, #31]
 8008d9c:	bf00      	nop
 8008d9e:	e094      	b.n	8008eca <UART_SetConfig+0x34e>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a39      	ldr	r2, [pc, #228]	; (8008e8c <UART_SetConfig+0x310>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d124      	bne.n	8008df4 <UART_SetConfig+0x278>
 8008daa:	4b33      	ldr	r3, [pc, #204]	; (8008e78 <UART_SetConfig+0x2fc>)
 8008dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008db8:	d012      	beq.n	8008de0 <UART_SetConfig+0x264>
 8008dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dbe:	d802      	bhi.n	8008dc6 <UART_SetConfig+0x24a>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d007      	beq.n	8008dd4 <UART_SetConfig+0x258>
 8008dc4:	e012      	b.n	8008dec <UART_SetConfig+0x270>
 8008dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008dca:	d006      	beq.n	8008dda <UART_SetConfig+0x25e>
 8008dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008dd0:	d009      	beq.n	8008de6 <UART_SetConfig+0x26a>
 8008dd2:	e00b      	b.n	8008dec <UART_SetConfig+0x270>
 8008dd4:	2301      	movs	r3, #1
 8008dd6:	77fb      	strb	r3, [r7, #31]
 8008dd8:	e077      	b.n	8008eca <UART_SetConfig+0x34e>
 8008dda:	2302      	movs	r3, #2
 8008ddc:	77fb      	strb	r3, [r7, #31]
 8008dde:	e074      	b.n	8008eca <UART_SetConfig+0x34e>
 8008de0:	2304      	movs	r3, #4
 8008de2:	77fb      	strb	r3, [r7, #31]
 8008de4:	e071      	b.n	8008eca <UART_SetConfig+0x34e>
 8008de6:	2308      	movs	r3, #8
 8008de8:	77fb      	strb	r3, [r7, #31]
 8008dea:	e06e      	b.n	8008eca <UART_SetConfig+0x34e>
 8008dec:	2310      	movs	r3, #16
 8008dee:	77fb      	strb	r3, [r7, #31]
 8008df0:	bf00      	nop
 8008df2:	e06a      	b.n	8008eca <UART_SetConfig+0x34e>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a25      	ldr	r2, [pc, #148]	; (8008e90 <UART_SetConfig+0x314>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d124      	bne.n	8008e48 <UART_SetConfig+0x2cc>
 8008dfe:	4b1e      	ldr	r3, [pc, #120]	; (8008e78 <UART_SetConfig+0x2fc>)
 8008e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e04:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008e08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e0c:	d012      	beq.n	8008e34 <UART_SetConfig+0x2b8>
 8008e0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e12:	d802      	bhi.n	8008e1a <UART_SetConfig+0x29e>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d007      	beq.n	8008e28 <UART_SetConfig+0x2ac>
 8008e18:	e012      	b.n	8008e40 <UART_SetConfig+0x2c4>
 8008e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e1e:	d006      	beq.n	8008e2e <UART_SetConfig+0x2b2>
 8008e20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e24:	d009      	beq.n	8008e3a <UART_SetConfig+0x2be>
 8008e26:	e00b      	b.n	8008e40 <UART_SetConfig+0x2c4>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	77fb      	strb	r3, [r7, #31]
 8008e2c:	e04d      	b.n	8008eca <UART_SetConfig+0x34e>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	77fb      	strb	r3, [r7, #31]
 8008e32:	e04a      	b.n	8008eca <UART_SetConfig+0x34e>
 8008e34:	2304      	movs	r3, #4
 8008e36:	77fb      	strb	r3, [r7, #31]
 8008e38:	e047      	b.n	8008eca <UART_SetConfig+0x34e>
 8008e3a:	2308      	movs	r3, #8
 8008e3c:	77fb      	strb	r3, [r7, #31]
 8008e3e:	e044      	b.n	8008eca <UART_SetConfig+0x34e>
 8008e40:	2310      	movs	r3, #16
 8008e42:	77fb      	strb	r3, [r7, #31]
 8008e44:	bf00      	nop
 8008e46:	e040      	b.n	8008eca <UART_SetConfig+0x34e>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a11      	ldr	r2, [pc, #68]	; (8008e94 <UART_SetConfig+0x318>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d139      	bne.n	8008ec6 <UART_SetConfig+0x34a>
 8008e52:	4b09      	ldr	r3, [pc, #36]	; (8008e78 <UART_SetConfig+0x2fc>)
 8008e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008e5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e60:	d027      	beq.n	8008eb2 <UART_SetConfig+0x336>
 8008e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008e66:	d817      	bhi.n	8008e98 <UART_SetConfig+0x31c>
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01c      	beq.n	8008ea6 <UART_SetConfig+0x32a>
 8008e6c:	e027      	b.n	8008ebe <UART_SetConfig+0x342>
 8008e6e:	bf00      	nop
 8008e70:	efff69f3 	.word	0xefff69f3
 8008e74:	40011000 	.word	0x40011000
 8008e78:	40023800 	.word	0x40023800
 8008e7c:	40004400 	.word	0x40004400
 8008e80:	40004800 	.word	0x40004800
 8008e84:	40004c00 	.word	0x40004c00
 8008e88:	40005000 	.word	0x40005000
 8008e8c:	40011400 	.word	0x40011400
 8008e90:	40007800 	.word	0x40007800
 8008e94:	40007c00 	.word	0x40007c00
 8008e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e9c:	d006      	beq.n	8008eac <UART_SetConfig+0x330>
 8008e9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008ea2:	d009      	beq.n	8008eb8 <UART_SetConfig+0x33c>
 8008ea4:	e00b      	b.n	8008ebe <UART_SetConfig+0x342>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	77fb      	strb	r3, [r7, #31]
 8008eaa:	e00e      	b.n	8008eca <UART_SetConfig+0x34e>
 8008eac:	2302      	movs	r3, #2
 8008eae:	77fb      	strb	r3, [r7, #31]
 8008eb0:	e00b      	b.n	8008eca <UART_SetConfig+0x34e>
 8008eb2:	2304      	movs	r3, #4
 8008eb4:	77fb      	strb	r3, [r7, #31]
 8008eb6:	e008      	b.n	8008eca <UART_SetConfig+0x34e>
 8008eb8:	2308      	movs	r3, #8
 8008eba:	77fb      	strb	r3, [r7, #31]
 8008ebc:	e005      	b.n	8008eca <UART_SetConfig+0x34e>
 8008ebe:	2310      	movs	r3, #16
 8008ec0:	77fb      	strb	r3, [r7, #31]
 8008ec2:	bf00      	nop
 8008ec4:	e001      	b.n	8008eca <UART_SetConfig+0x34e>
 8008ec6:	2310      	movs	r3, #16
 8008ec8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	69db      	ldr	r3, [r3, #28]
 8008ece:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ed2:	d17f      	bne.n	8008fd4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008ed4:	7ffb      	ldrb	r3, [r7, #31]
 8008ed6:	2b08      	cmp	r3, #8
 8008ed8:	d85c      	bhi.n	8008f94 <UART_SetConfig+0x418>
 8008eda:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <UART_SetConfig+0x364>)
 8008edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee0:	08008f05 	.word	0x08008f05
 8008ee4:	08008f25 	.word	0x08008f25
 8008ee8:	08008f45 	.word	0x08008f45
 8008eec:	08008f95 	.word	0x08008f95
 8008ef0:	08008f5d 	.word	0x08008f5d
 8008ef4:	08008f95 	.word	0x08008f95
 8008ef8:	08008f95 	.word	0x08008f95
 8008efc:	08008f95 	.word	0x08008f95
 8008f00:	08008f7d 	.word	0x08008f7d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f04:	f7fc fa84 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8008f08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	005a      	lsls	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	441a      	add	r2, r3
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	61bb      	str	r3, [r7, #24]
        break;
 8008f22:	e03a      	b.n	8008f9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f24:	f7fc fa88 	bl	8005438 <HAL_RCC_GetPCLK2Freq>
 8008f28:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	005a      	lsls	r2, r3, #1
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	085b      	lsrs	r3, r3, #1
 8008f34:	441a      	add	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	61bb      	str	r3, [r7, #24]
        break;
 8008f42:	e02a      	b.n	8008f9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	685b      	ldr	r3, [r3, #4]
 8008f48:	085a      	lsrs	r2, r3, #1
 8008f4a:	4b5f      	ldr	r3, [pc, #380]	; (80090c8 <UART_SetConfig+0x54c>)
 8008f4c:	4413      	add	r3, r2
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	6852      	ldr	r2, [r2, #4]
 8008f52:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	61bb      	str	r3, [r7, #24]
        break;
 8008f5a:	e01e      	b.n	8008f9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f5c:	f7fc f99a 	bl	8005294 <HAL_RCC_GetSysClockFreq>
 8008f60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	005a      	lsls	r2, r3, #1
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	085b      	lsrs	r3, r3, #1
 8008f6c:	441a      	add	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	61bb      	str	r3, [r7, #24]
        break;
 8008f7a:	e00e      	b.n	8008f9a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	085b      	lsrs	r3, r3, #1
 8008f82:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	61bb      	str	r3, [r7, #24]
        break;
 8008f92:	e002      	b.n	8008f9a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	75fb      	strb	r3, [r7, #23]
        break;
 8008f98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	2b0f      	cmp	r3, #15
 8008f9e:	d916      	bls.n	8008fce <UART_SetConfig+0x452>
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fa6:	d212      	bcs.n	8008fce <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	f023 030f 	bic.w	r3, r3, #15
 8008fb0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	085b      	lsrs	r3, r3, #1
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	f003 0307 	and.w	r3, r3, #7
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	897b      	ldrh	r3, [r7, #10]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	897a      	ldrh	r2, [r7, #10]
 8008fca:	60da      	str	r2, [r3, #12]
 8008fcc:	e070      	b.n	80090b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008fce:	2301      	movs	r3, #1
 8008fd0:	75fb      	strb	r3, [r7, #23]
 8008fd2:	e06d      	b.n	80090b0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008fd4:	7ffb      	ldrb	r3, [r7, #31]
 8008fd6:	2b08      	cmp	r3, #8
 8008fd8:	d859      	bhi.n	800908e <UART_SetConfig+0x512>
 8008fda:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <UART_SetConfig+0x464>)
 8008fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe0:	08009005 	.word	0x08009005
 8008fe4:	08009023 	.word	0x08009023
 8008fe8:	08009041 	.word	0x08009041
 8008fec:	0800908f 	.word	0x0800908f
 8008ff0:	08009059 	.word	0x08009059
 8008ff4:	0800908f 	.word	0x0800908f
 8008ff8:	0800908f 	.word	0x0800908f
 8008ffc:	0800908f 	.word	0x0800908f
 8009000:	08009077 	.word	0x08009077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009004:	f7fc fa04 	bl	8005410 <HAL_RCC_GetPCLK1Freq>
 8009008:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	085a      	lsrs	r2, r3, #1
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	441a      	add	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	fbb2 f3f3 	udiv	r3, r2, r3
 800901c:	b29b      	uxth	r3, r3
 800901e:	61bb      	str	r3, [r7, #24]
        break;
 8009020:	e038      	b.n	8009094 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009022:	f7fc fa09 	bl	8005438 <HAL_RCC_GetPCLK2Freq>
 8009026:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	085a      	lsrs	r2, r3, #1
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	441a      	add	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	fbb2 f3f3 	udiv	r3, r2, r3
 800903a:	b29b      	uxth	r3, r3
 800903c:	61bb      	str	r3, [r7, #24]
        break;
 800903e:	e029      	b.n	8009094 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	085a      	lsrs	r2, r3, #1
 8009046:	4b21      	ldr	r3, [pc, #132]	; (80090cc <UART_SetConfig+0x550>)
 8009048:	4413      	add	r3, r2
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	6852      	ldr	r2, [r2, #4]
 800904e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009052:	b29b      	uxth	r3, r3
 8009054:	61bb      	str	r3, [r7, #24]
        break;
 8009056:	e01d      	b.n	8009094 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009058:	f7fc f91c 	bl	8005294 <HAL_RCC_GetSysClockFreq>
 800905c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	085a      	lsrs	r2, r3, #1
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	441a      	add	r2, r3
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009070:	b29b      	uxth	r3, r3
 8009072:	61bb      	str	r3, [r7, #24]
        break;
 8009074:	e00e      	b.n	8009094 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	685b      	ldr	r3, [r3, #4]
 800907a:	085b      	lsrs	r3, r3, #1
 800907c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	fbb2 f3f3 	udiv	r3, r2, r3
 8009088:	b29b      	uxth	r3, r3
 800908a:	61bb      	str	r3, [r7, #24]
        break;
 800908c:	e002      	b.n	8009094 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	75fb      	strb	r3, [r7, #23]
        break;
 8009092:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	2b0f      	cmp	r3, #15
 8009098:	d908      	bls.n	80090ac <UART_SetConfig+0x530>
 800909a:	69bb      	ldr	r3, [r7, #24]
 800909c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090a0:	d204      	bcs.n	80090ac <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	69ba      	ldr	r2, [r7, #24]
 80090a8:	60da      	str	r2, [r3, #12]
 80090aa:	e001      	b.n	80090b0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2200      	movs	r2, #0
 80090b4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80090bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3720      	adds	r7, #32
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	01e84800 	.word	0x01e84800
 80090cc:	00f42400 	.word	0x00f42400

080090d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	f003 0301 	and.w	r3, r3, #1
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00a      	beq.n	80090fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	430a      	orrs	r2, r1
 80090f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	f003 0302 	and.w	r3, r3, #2
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00a      	beq.n	800911c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	430a      	orrs	r2, r1
 800911a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00a      	beq.n	800913e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	430a      	orrs	r2, r1
 800913c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	f003 0308 	and.w	r3, r3, #8
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00a      	beq.n	8009160 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	430a      	orrs	r2, r1
 800915e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009164:	f003 0310 	and.w	r3, r3, #16
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	430a      	orrs	r2, r1
 8009180:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009186:	f003 0320 	and.w	r3, r3, #32
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00a      	beq.n	80091a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	430a      	orrs	r2, r1
 80091a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01a      	beq.n	80091e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091ce:	d10a      	bne.n	80091e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	430a      	orrs	r2, r1
 80091e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00a      	beq.n	8009208 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	605a      	str	r2, [r3, #4]
  }
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b086      	sub	sp, #24
 8009218:	af02      	add	r7, sp, #8
 800921a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2200      	movs	r2, #0
 8009220:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009222:	f7fa f86d 	bl	8003300 <HAL_GetTick>
 8009226:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0308 	and.w	r3, r3, #8
 8009232:	2b08      	cmp	r3, #8
 8009234:	d10e      	bne.n	8009254 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009236:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	2200      	movs	r2, #0
 8009240:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f82a 	bl	800929e <UART_WaitOnFlagUntilTimeout>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d001      	beq.n	8009254 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009250:	2303      	movs	r3, #3
 8009252:	e020      	b.n	8009296 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 0304 	and.w	r3, r3, #4
 800925e:	2b04      	cmp	r3, #4
 8009260:	d10e      	bne.n	8009280 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009262:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f814 	bl	800929e <UART_WaitOnFlagUntilTimeout>
 8009276:	4603      	mov	r3, r0
 8009278:	2b00      	cmp	r3, #0
 800927a:	d001      	beq.n	8009280 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e00a      	b.n	8009296 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2220      	movs	r2, #32
 8009284:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2220      	movs	r2, #32
 800928a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3710      	adds	r7, #16
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b084      	sub	sp, #16
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	603b      	str	r3, [r7, #0]
 80092aa:	4613      	mov	r3, r2
 80092ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092ae:	e05d      	b.n	800936c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b6:	d059      	beq.n	800936c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092b8:	f7fa f822 	bl	8003300 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	69ba      	ldr	r2, [r7, #24]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d302      	bcc.n	80092ce <UART_WaitOnFlagUntilTimeout+0x30>
 80092c8:	69bb      	ldr	r3, [r7, #24]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d11b      	bne.n	8009306 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80092dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f022 0201 	bic.w	r2, r2, #1
 80092ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2220      	movs	r2, #32
 80092f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2220      	movs	r2, #32
 80092f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	e042      	b.n	800938c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0304 	and.w	r3, r3, #4
 8009310:	2b00      	cmp	r3, #0
 8009312:	d02b      	beq.n	800936c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	69db      	ldr	r3, [r3, #28]
 800931a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800931e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009322:	d123      	bne.n	800936c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800932c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681a      	ldr	r2, [r3, #0]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800933c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689a      	ldr	r2, [r3, #8]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 0201 	bic.w	r2, r2, #1
 800934c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2220      	movs	r2, #32
 8009352:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2220      	movs	r2, #32
 8009358:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2220      	movs	r2, #32
 800935e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e00f      	b.n	800938c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	69da      	ldr	r2, [r3, #28]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	4013      	ands	r3, r2
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	429a      	cmp	r2, r3
 800937a:	bf0c      	ite	eq
 800937c:	2301      	moveq	r3, #1
 800937e:	2300      	movne	r3, #0
 8009380:	b2db      	uxtb	r3, r3
 8009382:	461a      	mov	r2, r3
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	429a      	cmp	r2, r3
 8009388:	d092      	beq.n	80092b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80093aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689a      	ldr	r2, [r3, #8]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0201 	bic.w	r2, r2, #1
 80093ba:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2220      	movs	r2, #32
 80093c0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2200      	movs	r2, #0
 80093e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093f2:	68f8      	ldr	r0, [r7, #12]
 80093f4:	f7ff fbae 	bl	8008b54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009416:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2220      	movs	r2, #32
 800941c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7ff fb8b 	bl	8008b40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009440:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009446:	2b22      	cmp	r3, #34	; 0x22
 8009448:	d13a      	bne.n	80094c0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009452:	89bb      	ldrh	r3, [r7, #12]
 8009454:	b2d9      	uxtb	r1, r3
 8009456:	89fb      	ldrh	r3, [r7, #14]
 8009458:	b2da      	uxtb	r2, r3
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800945e:	400a      	ands	r2, r1
 8009460:	b2d2      	uxtb	r2, r2
 8009462:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009474:	b29b      	uxth	r3, r3
 8009476:	3b01      	subs	r3, #1
 8009478:	b29a      	uxth	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009486:	b29b      	uxth	r3, r3
 8009488:	2b00      	cmp	r3, #0
 800948a:	d121      	bne.n	80094d0 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	681a      	ldr	r2, [r3, #0]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800949a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	689a      	ldr	r2, [r3, #8]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f022 0201 	bic.w	r2, r2, #1
 80094aa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2220      	movs	r2, #32
 80094b0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7f8 fc07 	bl	8001ccc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094be:	e007      	b.n	80094d0 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f042 0208 	orr.w	r2, r2, #8
 80094ce:	619a      	str	r2, [r3, #24]
}
 80094d0:	bf00      	nop
 80094d2:	3710      	adds	r7, #16
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}

080094d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b084      	sub	sp, #16
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80094e6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094ec:	2b22      	cmp	r3, #34	; 0x22
 80094ee:	d13a      	bne.n	8009566 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094fc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80094fe:	89ba      	ldrh	r2, [r7, #12]
 8009500:	89fb      	ldrh	r3, [r7, #14]
 8009502:	4013      	ands	r3, r2
 8009504:	b29a      	uxth	r2, r3
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950e:	1c9a      	adds	r2, r3, #2
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800951a:	b29b      	uxth	r3, r3
 800951c:	3b01      	subs	r3, #1
 800951e:	b29a      	uxth	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800952c:	b29b      	uxth	r3, r3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d121      	bne.n	8009576 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009540:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689a      	ldr	r2, [r3, #8]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	f022 0201 	bic.w	r2, r2, #1
 8009550:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2220      	movs	r2, #32
 8009556:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f7f8 fbb4 	bl	8001ccc <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009564:	e007      	b.n	8009576 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	699a      	ldr	r2, [r3, #24]
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	f042 0208 	orr.w	r2, r2, #8
 8009574:	619a      	str	r2, [r3, #24]
}
 8009576:	bf00      	nop
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}

0800957e <atoi>:
 800957e:	220a      	movs	r2, #10
 8009580:	2100      	movs	r1, #0
 8009582:	f000 b939 	b.w	80097f8 <strtol>
	...

08009588 <__errno>:
 8009588:	4b01      	ldr	r3, [pc, #4]	; (8009590 <__errno+0x8>)
 800958a:	6818      	ldr	r0, [r3, #0]
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	20000014 	.word	0x20000014

08009594 <__libc_init_array>:
 8009594:	b570      	push	{r4, r5, r6, lr}
 8009596:	4e0d      	ldr	r6, [pc, #52]	; (80095cc <__libc_init_array+0x38>)
 8009598:	4c0d      	ldr	r4, [pc, #52]	; (80095d0 <__libc_init_array+0x3c>)
 800959a:	1ba4      	subs	r4, r4, r6
 800959c:	10a4      	asrs	r4, r4, #2
 800959e:	2500      	movs	r5, #0
 80095a0:	42a5      	cmp	r5, r4
 80095a2:	d109      	bne.n	80095b8 <__libc_init_array+0x24>
 80095a4:	4e0b      	ldr	r6, [pc, #44]	; (80095d4 <__libc_init_array+0x40>)
 80095a6:	4c0c      	ldr	r4, [pc, #48]	; (80095d8 <__libc_init_array+0x44>)
 80095a8:	f000 fd4e 	bl	800a048 <_init>
 80095ac:	1ba4      	subs	r4, r4, r6
 80095ae:	10a4      	asrs	r4, r4, #2
 80095b0:	2500      	movs	r5, #0
 80095b2:	42a5      	cmp	r5, r4
 80095b4:	d105      	bne.n	80095c2 <__libc_init_array+0x2e>
 80095b6:	bd70      	pop	{r4, r5, r6, pc}
 80095b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095bc:	4798      	blx	r3
 80095be:	3501      	adds	r5, #1
 80095c0:	e7ee      	b.n	80095a0 <__libc_init_array+0xc>
 80095c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80095c6:	4798      	blx	r3
 80095c8:	3501      	adds	r5, #1
 80095ca:	e7f2      	b.n	80095b2 <__libc_init_array+0x1e>
 80095cc:	0800a320 	.word	0x0800a320
 80095d0:	0800a320 	.word	0x0800a320
 80095d4:	0800a320 	.word	0x0800a320
 80095d8:	0800a324 	.word	0x0800a324

080095dc <memset>:
 80095dc:	4402      	add	r2, r0
 80095de:	4603      	mov	r3, r0
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d100      	bne.n	80095e6 <memset+0xa>
 80095e4:	4770      	bx	lr
 80095e6:	f803 1b01 	strb.w	r1, [r3], #1
 80095ea:	e7f9      	b.n	80095e0 <memset+0x4>

080095ec <siprintf>:
 80095ec:	b40e      	push	{r1, r2, r3}
 80095ee:	b500      	push	{lr}
 80095f0:	b09c      	sub	sp, #112	; 0x70
 80095f2:	ab1d      	add	r3, sp, #116	; 0x74
 80095f4:	9002      	str	r0, [sp, #8]
 80095f6:	9006      	str	r0, [sp, #24]
 80095f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095fc:	4809      	ldr	r0, [pc, #36]	; (8009624 <siprintf+0x38>)
 80095fe:	9107      	str	r1, [sp, #28]
 8009600:	9104      	str	r1, [sp, #16]
 8009602:	4909      	ldr	r1, [pc, #36]	; (8009628 <siprintf+0x3c>)
 8009604:	f853 2b04 	ldr.w	r2, [r3], #4
 8009608:	9105      	str	r1, [sp, #20]
 800960a:	6800      	ldr	r0, [r0, #0]
 800960c:	9301      	str	r3, [sp, #4]
 800960e:	a902      	add	r1, sp, #8
 8009610:	f000 fa28 	bl	8009a64 <_svfiprintf_r>
 8009614:	9b02      	ldr	r3, [sp, #8]
 8009616:	2200      	movs	r2, #0
 8009618:	701a      	strb	r2, [r3, #0]
 800961a:	b01c      	add	sp, #112	; 0x70
 800961c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009620:	b003      	add	sp, #12
 8009622:	4770      	bx	lr
 8009624:	20000014 	.word	0x20000014
 8009628:	ffff0208 	.word	0xffff0208

0800962c <strncpy>:
 800962c:	b570      	push	{r4, r5, r6, lr}
 800962e:	3901      	subs	r1, #1
 8009630:	4604      	mov	r4, r0
 8009632:	b902      	cbnz	r2, 8009636 <strncpy+0xa>
 8009634:	bd70      	pop	{r4, r5, r6, pc}
 8009636:	4623      	mov	r3, r4
 8009638:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800963c:	f803 5b01 	strb.w	r5, [r3], #1
 8009640:	1e56      	subs	r6, r2, #1
 8009642:	b92d      	cbnz	r5, 8009650 <strncpy+0x24>
 8009644:	4414      	add	r4, r2
 8009646:	42a3      	cmp	r3, r4
 8009648:	d0f4      	beq.n	8009634 <strncpy+0x8>
 800964a:	f803 5b01 	strb.w	r5, [r3], #1
 800964e:	e7fa      	b.n	8009646 <strncpy+0x1a>
 8009650:	461c      	mov	r4, r3
 8009652:	4632      	mov	r2, r6
 8009654:	e7ed      	b.n	8009632 <strncpy+0x6>
	...

08009658 <strtok>:
 8009658:	4b13      	ldr	r3, [pc, #76]	; (80096a8 <strtok+0x50>)
 800965a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800965e:	681d      	ldr	r5, [r3, #0]
 8009660:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009662:	4606      	mov	r6, r0
 8009664:	460f      	mov	r7, r1
 8009666:	b9b4      	cbnz	r4, 8009696 <strtok+0x3e>
 8009668:	2050      	movs	r0, #80	; 0x50
 800966a:	f000 f8df 	bl	800982c <malloc>
 800966e:	65a8      	str	r0, [r5, #88]	; 0x58
 8009670:	e9c0 4400 	strd	r4, r4, [r0]
 8009674:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009678:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800967c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009680:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009684:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009688:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800968c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009690:	6184      	str	r4, [r0, #24]
 8009692:	7704      	strb	r4, [r0, #28]
 8009694:	6244      	str	r4, [r0, #36]	; 0x24
 8009696:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009698:	4639      	mov	r1, r7
 800969a:	4630      	mov	r0, r6
 800969c:	2301      	movs	r3, #1
 800969e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096a2:	f000 b803 	b.w	80096ac <__strtok_r>
 80096a6:	bf00      	nop
 80096a8:	20000014 	.word	0x20000014

080096ac <__strtok_r>:
 80096ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096ae:	b918      	cbnz	r0, 80096b8 <__strtok_r+0xc>
 80096b0:	6810      	ldr	r0, [r2, #0]
 80096b2:	b908      	cbnz	r0, 80096b8 <__strtok_r+0xc>
 80096b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096b6:	4620      	mov	r0, r4
 80096b8:	4604      	mov	r4, r0
 80096ba:	460f      	mov	r7, r1
 80096bc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80096c0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80096c4:	b91e      	cbnz	r6, 80096ce <__strtok_r+0x22>
 80096c6:	b96d      	cbnz	r5, 80096e4 <__strtok_r+0x38>
 80096c8:	6015      	str	r5, [r2, #0]
 80096ca:	4628      	mov	r0, r5
 80096cc:	e7f2      	b.n	80096b4 <__strtok_r+0x8>
 80096ce:	42b5      	cmp	r5, r6
 80096d0:	d1f6      	bne.n	80096c0 <__strtok_r+0x14>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d1ef      	bne.n	80096b6 <__strtok_r+0xa>
 80096d6:	6014      	str	r4, [r2, #0]
 80096d8:	7003      	strb	r3, [r0, #0]
 80096da:	e7eb      	b.n	80096b4 <__strtok_r+0x8>
 80096dc:	462b      	mov	r3, r5
 80096de:	e00d      	b.n	80096fc <__strtok_r+0x50>
 80096e0:	b926      	cbnz	r6, 80096ec <__strtok_r+0x40>
 80096e2:	461c      	mov	r4, r3
 80096e4:	4623      	mov	r3, r4
 80096e6:	460f      	mov	r7, r1
 80096e8:	f813 5b01 	ldrb.w	r5, [r3], #1
 80096ec:	f817 6b01 	ldrb.w	r6, [r7], #1
 80096f0:	42b5      	cmp	r5, r6
 80096f2:	d1f5      	bne.n	80096e0 <__strtok_r+0x34>
 80096f4:	2d00      	cmp	r5, #0
 80096f6:	d0f1      	beq.n	80096dc <__strtok_r+0x30>
 80096f8:	2100      	movs	r1, #0
 80096fa:	7021      	strb	r1, [r4, #0]
 80096fc:	6013      	str	r3, [r2, #0]
 80096fe:	e7d9      	b.n	80096b4 <__strtok_r+0x8>

08009700 <_strtol_l.isra.0>:
 8009700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009704:	4680      	mov	r8, r0
 8009706:	4689      	mov	r9, r1
 8009708:	4692      	mov	sl, r2
 800970a:	461e      	mov	r6, r3
 800970c:	460f      	mov	r7, r1
 800970e:	463d      	mov	r5, r7
 8009710:	9808      	ldr	r0, [sp, #32]
 8009712:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009716:	f000 f885 	bl	8009824 <__locale_ctype_ptr_l>
 800971a:	4420      	add	r0, r4
 800971c:	7843      	ldrb	r3, [r0, #1]
 800971e:	f013 0308 	ands.w	r3, r3, #8
 8009722:	d132      	bne.n	800978a <_strtol_l.isra.0+0x8a>
 8009724:	2c2d      	cmp	r4, #45	; 0x2d
 8009726:	d132      	bne.n	800978e <_strtol_l.isra.0+0x8e>
 8009728:	787c      	ldrb	r4, [r7, #1]
 800972a:	1cbd      	adds	r5, r7, #2
 800972c:	2201      	movs	r2, #1
 800972e:	2e00      	cmp	r6, #0
 8009730:	d05d      	beq.n	80097ee <_strtol_l.isra.0+0xee>
 8009732:	2e10      	cmp	r6, #16
 8009734:	d109      	bne.n	800974a <_strtol_l.isra.0+0x4a>
 8009736:	2c30      	cmp	r4, #48	; 0x30
 8009738:	d107      	bne.n	800974a <_strtol_l.isra.0+0x4a>
 800973a:	782b      	ldrb	r3, [r5, #0]
 800973c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009740:	2b58      	cmp	r3, #88	; 0x58
 8009742:	d14f      	bne.n	80097e4 <_strtol_l.isra.0+0xe4>
 8009744:	786c      	ldrb	r4, [r5, #1]
 8009746:	2610      	movs	r6, #16
 8009748:	3502      	adds	r5, #2
 800974a:	2a00      	cmp	r2, #0
 800974c:	bf14      	ite	ne
 800974e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009752:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009756:	2700      	movs	r7, #0
 8009758:	fbb1 fcf6 	udiv	ip, r1, r6
 800975c:	4638      	mov	r0, r7
 800975e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009762:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009766:	2b09      	cmp	r3, #9
 8009768:	d817      	bhi.n	800979a <_strtol_l.isra.0+0x9a>
 800976a:	461c      	mov	r4, r3
 800976c:	42a6      	cmp	r6, r4
 800976e:	dd23      	ble.n	80097b8 <_strtol_l.isra.0+0xb8>
 8009770:	1c7b      	adds	r3, r7, #1
 8009772:	d007      	beq.n	8009784 <_strtol_l.isra.0+0x84>
 8009774:	4584      	cmp	ip, r0
 8009776:	d31c      	bcc.n	80097b2 <_strtol_l.isra.0+0xb2>
 8009778:	d101      	bne.n	800977e <_strtol_l.isra.0+0x7e>
 800977a:	45a6      	cmp	lr, r4
 800977c:	db19      	blt.n	80097b2 <_strtol_l.isra.0+0xb2>
 800977e:	fb00 4006 	mla	r0, r0, r6, r4
 8009782:	2701      	movs	r7, #1
 8009784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009788:	e7eb      	b.n	8009762 <_strtol_l.isra.0+0x62>
 800978a:	462f      	mov	r7, r5
 800978c:	e7bf      	b.n	800970e <_strtol_l.isra.0+0xe>
 800978e:	2c2b      	cmp	r4, #43	; 0x2b
 8009790:	bf04      	itt	eq
 8009792:	1cbd      	addeq	r5, r7, #2
 8009794:	787c      	ldrbeq	r4, [r7, #1]
 8009796:	461a      	mov	r2, r3
 8009798:	e7c9      	b.n	800972e <_strtol_l.isra.0+0x2e>
 800979a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800979e:	2b19      	cmp	r3, #25
 80097a0:	d801      	bhi.n	80097a6 <_strtol_l.isra.0+0xa6>
 80097a2:	3c37      	subs	r4, #55	; 0x37
 80097a4:	e7e2      	b.n	800976c <_strtol_l.isra.0+0x6c>
 80097a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80097aa:	2b19      	cmp	r3, #25
 80097ac:	d804      	bhi.n	80097b8 <_strtol_l.isra.0+0xb8>
 80097ae:	3c57      	subs	r4, #87	; 0x57
 80097b0:	e7dc      	b.n	800976c <_strtol_l.isra.0+0x6c>
 80097b2:	f04f 37ff 	mov.w	r7, #4294967295
 80097b6:	e7e5      	b.n	8009784 <_strtol_l.isra.0+0x84>
 80097b8:	1c7b      	adds	r3, r7, #1
 80097ba:	d108      	bne.n	80097ce <_strtol_l.isra.0+0xce>
 80097bc:	2322      	movs	r3, #34	; 0x22
 80097be:	f8c8 3000 	str.w	r3, [r8]
 80097c2:	4608      	mov	r0, r1
 80097c4:	f1ba 0f00 	cmp.w	sl, #0
 80097c8:	d107      	bne.n	80097da <_strtol_l.isra.0+0xda>
 80097ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097ce:	b102      	cbz	r2, 80097d2 <_strtol_l.isra.0+0xd2>
 80097d0:	4240      	negs	r0, r0
 80097d2:	f1ba 0f00 	cmp.w	sl, #0
 80097d6:	d0f8      	beq.n	80097ca <_strtol_l.isra.0+0xca>
 80097d8:	b10f      	cbz	r7, 80097de <_strtol_l.isra.0+0xde>
 80097da:	f105 39ff 	add.w	r9, r5, #4294967295
 80097de:	f8ca 9000 	str.w	r9, [sl]
 80097e2:	e7f2      	b.n	80097ca <_strtol_l.isra.0+0xca>
 80097e4:	2430      	movs	r4, #48	; 0x30
 80097e6:	2e00      	cmp	r6, #0
 80097e8:	d1af      	bne.n	800974a <_strtol_l.isra.0+0x4a>
 80097ea:	2608      	movs	r6, #8
 80097ec:	e7ad      	b.n	800974a <_strtol_l.isra.0+0x4a>
 80097ee:	2c30      	cmp	r4, #48	; 0x30
 80097f0:	d0a3      	beq.n	800973a <_strtol_l.isra.0+0x3a>
 80097f2:	260a      	movs	r6, #10
 80097f4:	e7a9      	b.n	800974a <_strtol_l.isra.0+0x4a>
	...

080097f8 <strtol>:
 80097f8:	4b08      	ldr	r3, [pc, #32]	; (800981c <strtol+0x24>)
 80097fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097fc:	681c      	ldr	r4, [r3, #0]
 80097fe:	4d08      	ldr	r5, [pc, #32]	; (8009820 <strtol+0x28>)
 8009800:	6a23      	ldr	r3, [r4, #32]
 8009802:	2b00      	cmp	r3, #0
 8009804:	bf08      	it	eq
 8009806:	462b      	moveq	r3, r5
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	4613      	mov	r3, r2
 800980c:	460a      	mov	r2, r1
 800980e:	4601      	mov	r1, r0
 8009810:	4620      	mov	r0, r4
 8009812:	f7ff ff75 	bl	8009700 <_strtol_l.isra.0>
 8009816:	b003      	add	sp, #12
 8009818:	bd30      	pop	{r4, r5, pc}
 800981a:	bf00      	nop
 800981c:	20000014 	.word	0x20000014
 8009820:	20000078 	.word	0x20000078

08009824 <__locale_ctype_ptr_l>:
 8009824:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009828:	4770      	bx	lr
	...

0800982c <malloc>:
 800982c:	4b02      	ldr	r3, [pc, #8]	; (8009838 <malloc+0xc>)
 800982e:	4601      	mov	r1, r0
 8009830:	6818      	ldr	r0, [r3, #0]
 8009832:	f000 b863 	b.w	80098fc <_malloc_r>
 8009836:	bf00      	nop
 8009838:	20000014 	.word	0x20000014

0800983c <__ascii_mbtowc>:
 800983c:	b082      	sub	sp, #8
 800983e:	b901      	cbnz	r1, 8009842 <__ascii_mbtowc+0x6>
 8009840:	a901      	add	r1, sp, #4
 8009842:	b142      	cbz	r2, 8009856 <__ascii_mbtowc+0x1a>
 8009844:	b14b      	cbz	r3, 800985a <__ascii_mbtowc+0x1e>
 8009846:	7813      	ldrb	r3, [r2, #0]
 8009848:	600b      	str	r3, [r1, #0]
 800984a:	7812      	ldrb	r2, [r2, #0]
 800984c:	1c10      	adds	r0, r2, #0
 800984e:	bf18      	it	ne
 8009850:	2001      	movne	r0, #1
 8009852:	b002      	add	sp, #8
 8009854:	4770      	bx	lr
 8009856:	4610      	mov	r0, r2
 8009858:	e7fb      	b.n	8009852 <__ascii_mbtowc+0x16>
 800985a:	f06f 0001 	mvn.w	r0, #1
 800985e:	e7f8      	b.n	8009852 <__ascii_mbtowc+0x16>

08009860 <_free_r>:
 8009860:	b538      	push	{r3, r4, r5, lr}
 8009862:	4605      	mov	r5, r0
 8009864:	2900      	cmp	r1, #0
 8009866:	d045      	beq.n	80098f4 <_free_r+0x94>
 8009868:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800986c:	1f0c      	subs	r4, r1, #4
 800986e:	2b00      	cmp	r3, #0
 8009870:	bfb8      	it	lt
 8009872:	18e4      	addlt	r4, r4, r3
 8009874:	f000 fbb7 	bl	8009fe6 <__malloc_lock>
 8009878:	4a1f      	ldr	r2, [pc, #124]	; (80098f8 <_free_r+0x98>)
 800987a:	6813      	ldr	r3, [r2, #0]
 800987c:	4610      	mov	r0, r2
 800987e:	b933      	cbnz	r3, 800988e <_free_r+0x2e>
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	6014      	str	r4, [r2, #0]
 8009884:	4628      	mov	r0, r5
 8009886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800988a:	f000 bbad 	b.w	8009fe8 <__malloc_unlock>
 800988e:	42a3      	cmp	r3, r4
 8009890:	d90c      	bls.n	80098ac <_free_r+0x4c>
 8009892:	6821      	ldr	r1, [r4, #0]
 8009894:	1862      	adds	r2, r4, r1
 8009896:	4293      	cmp	r3, r2
 8009898:	bf04      	itt	eq
 800989a:	681a      	ldreq	r2, [r3, #0]
 800989c:	685b      	ldreq	r3, [r3, #4]
 800989e:	6063      	str	r3, [r4, #4]
 80098a0:	bf04      	itt	eq
 80098a2:	1852      	addeq	r2, r2, r1
 80098a4:	6022      	streq	r2, [r4, #0]
 80098a6:	6004      	str	r4, [r0, #0]
 80098a8:	e7ec      	b.n	8009884 <_free_r+0x24>
 80098aa:	4613      	mov	r3, r2
 80098ac:	685a      	ldr	r2, [r3, #4]
 80098ae:	b10a      	cbz	r2, 80098b4 <_free_r+0x54>
 80098b0:	42a2      	cmp	r2, r4
 80098b2:	d9fa      	bls.n	80098aa <_free_r+0x4a>
 80098b4:	6819      	ldr	r1, [r3, #0]
 80098b6:	1858      	adds	r0, r3, r1
 80098b8:	42a0      	cmp	r0, r4
 80098ba:	d10b      	bne.n	80098d4 <_free_r+0x74>
 80098bc:	6820      	ldr	r0, [r4, #0]
 80098be:	4401      	add	r1, r0
 80098c0:	1858      	adds	r0, r3, r1
 80098c2:	4282      	cmp	r2, r0
 80098c4:	6019      	str	r1, [r3, #0]
 80098c6:	d1dd      	bne.n	8009884 <_free_r+0x24>
 80098c8:	6810      	ldr	r0, [r2, #0]
 80098ca:	6852      	ldr	r2, [r2, #4]
 80098cc:	605a      	str	r2, [r3, #4]
 80098ce:	4401      	add	r1, r0
 80098d0:	6019      	str	r1, [r3, #0]
 80098d2:	e7d7      	b.n	8009884 <_free_r+0x24>
 80098d4:	d902      	bls.n	80098dc <_free_r+0x7c>
 80098d6:	230c      	movs	r3, #12
 80098d8:	602b      	str	r3, [r5, #0]
 80098da:	e7d3      	b.n	8009884 <_free_r+0x24>
 80098dc:	6820      	ldr	r0, [r4, #0]
 80098de:	1821      	adds	r1, r4, r0
 80098e0:	428a      	cmp	r2, r1
 80098e2:	bf04      	itt	eq
 80098e4:	6811      	ldreq	r1, [r2, #0]
 80098e6:	6852      	ldreq	r2, [r2, #4]
 80098e8:	6062      	str	r2, [r4, #4]
 80098ea:	bf04      	itt	eq
 80098ec:	1809      	addeq	r1, r1, r0
 80098ee:	6021      	streq	r1, [r4, #0]
 80098f0:	605c      	str	r4, [r3, #4]
 80098f2:	e7c7      	b.n	8009884 <_free_r+0x24>
 80098f4:	bd38      	pop	{r3, r4, r5, pc}
 80098f6:	bf00      	nop
 80098f8:	20000210 	.word	0x20000210

080098fc <_malloc_r>:
 80098fc:	b570      	push	{r4, r5, r6, lr}
 80098fe:	1ccd      	adds	r5, r1, #3
 8009900:	f025 0503 	bic.w	r5, r5, #3
 8009904:	3508      	adds	r5, #8
 8009906:	2d0c      	cmp	r5, #12
 8009908:	bf38      	it	cc
 800990a:	250c      	movcc	r5, #12
 800990c:	2d00      	cmp	r5, #0
 800990e:	4606      	mov	r6, r0
 8009910:	db01      	blt.n	8009916 <_malloc_r+0x1a>
 8009912:	42a9      	cmp	r1, r5
 8009914:	d903      	bls.n	800991e <_malloc_r+0x22>
 8009916:	230c      	movs	r3, #12
 8009918:	6033      	str	r3, [r6, #0]
 800991a:	2000      	movs	r0, #0
 800991c:	bd70      	pop	{r4, r5, r6, pc}
 800991e:	f000 fb62 	bl	8009fe6 <__malloc_lock>
 8009922:	4a21      	ldr	r2, [pc, #132]	; (80099a8 <_malloc_r+0xac>)
 8009924:	6814      	ldr	r4, [r2, #0]
 8009926:	4621      	mov	r1, r4
 8009928:	b991      	cbnz	r1, 8009950 <_malloc_r+0x54>
 800992a:	4c20      	ldr	r4, [pc, #128]	; (80099ac <_malloc_r+0xb0>)
 800992c:	6823      	ldr	r3, [r4, #0]
 800992e:	b91b      	cbnz	r3, 8009938 <_malloc_r+0x3c>
 8009930:	4630      	mov	r0, r6
 8009932:	f000 fb17 	bl	8009f64 <_sbrk_r>
 8009936:	6020      	str	r0, [r4, #0]
 8009938:	4629      	mov	r1, r5
 800993a:	4630      	mov	r0, r6
 800993c:	f000 fb12 	bl	8009f64 <_sbrk_r>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d124      	bne.n	800998e <_malloc_r+0x92>
 8009944:	230c      	movs	r3, #12
 8009946:	6033      	str	r3, [r6, #0]
 8009948:	4630      	mov	r0, r6
 800994a:	f000 fb4d 	bl	8009fe8 <__malloc_unlock>
 800994e:	e7e4      	b.n	800991a <_malloc_r+0x1e>
 8009950:	680b      	ldr	r3, [r1, #0]
 8009952:	1b5b      	subs	r3, r3, r5
 8009954:	d418      	bmi.n	8009988 <_malloc_r+0x8c>
 8009956:	2b0b      	cmp	r3, #11
 8009958:	d90f      	bls.n	800997a <_malloc_r+0x7e>
 800995a:	600b      	str	r3, [r1, #0]
 800995c:	50cd      	str	r5, [r1, r3]
 800995e:	18cc      	adds	r4, r1, r3
 8009960:	4630      	mov	r0, r6
 8009962:	f000 fb41 	bl	8009fe8 <__malloc_unlock>
 8009966:	f104 000b 	add.w	r0, r4, #11
 800996a:	1d23      	adds	r3, r4, #4
 800996c:	f020 0007 	bic.w	r0, r0, #7
 8009970:	1ac3      	subs	r3, r0, r3
 8009972:	d0d3      	beq.n	800991c <_malloc_r+0x20>
 8009974:	425a      	negs	r2, r3
 8009976:	50e2      	str	r2, [r4, r3]
 8009978:	e7d0      	b.n	800991c <_malloc_r+0x20>
 800997a:	428c      	cmp	r4, r1
 800997c:	684b      	ldr	r3, [r1, #4]
 800997e:	bf16      	itet	ne
 8009980:	6063      	strne	r3, [r4, #4]
 8009982:	6013      	streq	r3, [r2, #0]
 8009984:	460c      	movne	r4, r1
 8009986:	e7eb      	b.n	8009960 <_malloc_r+0x64>
 8009988:	460c      	mov	r4, r1
 800998a:	6849      	ldr	r1, [r1, #4]
 800998c:	e7cc      	b.n	8009928 <_malloc_r+0x2c>
 800998e:	1cc4      	adds	r4, r0, #3
 8009990:	f024 0403 	bic.w	r4, r4, #3
 8009994:	42a0      	cmp	r0, r4
 8009996:	d005      	beq.n	80099a4 <_malloc_r+0xa8>
 8009998:	1a21      	subs	r1, r4, r0
 800999a:	4630      	mov	r0, r6
 800999c:	f000 fae2 	bl	8009f64 <_sbrk_r>
 80099a0:	3001      	adds	r0, #1
 80099a2:	d0cf      	beq.n	8009944 <_malloc_r+0x48>
 80099a4:	6025      	str	r5, [r4, #0]
 80099a6:	e7db      	b.n	8009960 <_malloc_r+0x64>
 80099a8:	20000210 	.word	0x20000210
 80099ac:	20000214 	.word	0x20000214

080099b0 <__ssputs_r>:
 80099b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099b4:	688e      	ldr	r6, [r1, #8]
 80099b6:	429e      	cmp	r6, r3
 80099b8:	4682      	mov	sl, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	4690      	mov	r8, r2
 80099be:	4699      	mov	r9, r3
 80099c0:	d837      	bhi.n	8009a32 <__ssputs_r+0x82>
 80099c2:	898a      	ldrh	r2, [r1, #12]
 80099c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099c8:	d031      	beq.n	8009a2e <__ssputs_r+0x7e>
 80099ca:	6825      	ldr	r5, [r4, #0]
 80099cc:	6909      	ldr	r1, [r1, #16]
 80099ce:	1a6f      	subs	r7, r5, r1
 80099d0:	6965      	ldr	r5, [r4, #20]
 80099d2:	2302      	movs	r3, #2
 80099d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099d8:	fb95 f5f3 	sdiv	r5, r5, r3
 80099dc:	f109 0301 	add.w	r3, r9, #1
 80099e0:	443b      	add	r3, r7
 80099e2:	429d      	cmp	r5, r3
 80099e4:	bf38      	it	cc
 80099e6:	461d      	movcc	r5, r3
 80099e8:	0553      	lsls	r3, r2, #21
 80099ea:	d530      	bpl.n	8009a4e <__ssputs_r+0x9e>
 80099ec:	4629      	mov	r1, r5
 80099ee:	f7ff ff85 	bl	80098fc <_malloc_r>
 80099f2:	4606      	mov	r6, r0
 80099f4:	b950      	cbnz	r0, 8009a0c <__ssputs_r+0x5c>
 80099f6:	230c      	movs	r3, #12
 80099f8:	f8ca 3000 	str.w	r3, [sl]
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a02:	81a3      	strh	r3, [r4, #12]
 8009a04:	f04f 30ff 	mov.w	r0, #4294967295
 8009a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a0c:	463a      	mov	r2, r7
 8009a0e:	6921      	ldr	r1, [r4, #16]
 8009a10:	f000 fac5 	bl	8009f9e <memcpy>
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a1e:	81a3      	strh	r3, [r4, #12]
 8009a20:	6126      	str	r6, [r4, #16]
 8009a22:	6165      	str	r5, [r4, #20]
 8009a24:	443e      	add	r6, r7
 8009a26:	1bed      	subs	r5, r5, r7
 8009a28:	6026      	str	r6, [r4, #0]
 8009a2a:	60a5      	str	r5, [r4, #8]
 8009a2c:	464e      	mov	r6, r9
 8009a2e:	454e      	cmp	r6, r9
 8009a30:	d900      	bls.n	8009a34 <__ssputs_r+0x84>
 8009a32:	464e      	mov	r6, r9
 8009a34:	4632      	mov	r2, r6
 8009a36:	4641      	mov	r1, r8
 8009a38:	6820      	ldr	r0, [r4, #0]
 8009a3a:	f000 fabb 	bl	8009fb4 <memmove>
 8009a3e:	68a3      	ldr	r3, [r4, #8]
 8009a40:	1b9b      	subs	r3, r3, r6
 8009a42:	60a3      	str	r3, [r4, #8]
 8009a44:	6823      	ldr	r3, [r4, #0]
 8009a46:	441e      	add	r6, r3
 8009a48:	6026      	str	r6, [r4, #0]
 8009a4a:	2000      	movs	r0, #0
 8009a4c:	e7dc      	b.n	8009a08 <__ssputs_r+0x58>
 8009a4e:	462a      	mov	r2, r5
 8009a50:	f000 facb 	bl	8009fea <_realloc_r>
 8009a54:	4606      	mov	r6, r0
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d1e2      	bne.n	8009a20 <__ssputs_r+0x70>
 8009a5a:	6921      	ldr	r1, [r4, #16]
 8009a5c:	4650      	mov	r0, sl
 8009a5e:	f7ff feff 	bl	8009860 <_free_r>
 8009a62:	e7c8      	b.n	80099f6 <__ssputs_r+0x46>

08009a64 <_svfiprintf_r>:
 8009a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a68:	461d      	mov	r5, r3
 8009a6a:	898b      	ldrh	r3, [r1, #12]
 8009a6c:	061f      	lsls	r7, r3, #24
 8009a6e:	b09d      	sub	sp, #116	; 0x74
 8009a70:	4680      	mov	r8, r0
 8009a72:	460c      	mov	r4, r1
 8009a74:	4616      	mov	r6, r2
 8009a76:	d50f      	bpl.n	8009a98 <_svfiprintf_r+0x34>
 8009a78:	690b      	ldr	r3, [r1, #16]
 8009a7a:	b96b      	cbnz	r3, 8009a98 <_svfiprintf_r+0x34>
 8009a7c:	2140      	movs	r1, #64	; 0x40
 8009a7e:	f7ff ff3d 	bl	80098fc <_malloc_r>
 8009a82:	6020      	str	r0, [r4, #0]
 8009a84:	6120      	str	r0, [r4, #16]
 8009a86:	b928      	cbnz	r0, 8009a94 <_svfiprintf_r+0x30>
 8009a88:	230c      	movs	r3, #12
 8009a8a:	f8c8 3000 	str.w	r3, [r8]
 8009a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a92:	e0c8      	b.n	8009c26 <_svfiprintf_r+0x1c2>
 8009a94:	2340      	movs	r3, #64	; 0x40
 8009a96:	6163      	str	r3, [r4, #20]
 8009a98:	2300      	movs	r3, #0
 8009a9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9c:	2320      	movs	r3, #32
 8009a9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aa2:	2330      	movs	r3, #48	; 0x30
 8009aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009aa8:	9503      	str	r5, [sp, #12]
 8009aaa:	f04f 0b01 	mov.w	fp, #1
 8009aae:	4637      	mov	r7, r6
 8009ab0:	463d      	mov	r5, r7
 8009ab2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ab6:	b10b      	cbz	r3, 8009abc <_svfiprintf_r+0x58>
 8009ab8:	2b25      	cmp	r3, #37	; 0x25
 8009aba:	d13e      	bne.n	8009b3a <_svfiprintf_r+0xd6>
 8009abc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009ac0:	d00b      	beq.n	8009ada <_svfiprintf_r+0x76>
 8009ac2:	4653      	mov	r3, sl
 8009ac4:	4632      	mov	r2, r6
 8009ac6:	4621      	mov	r1, r4
 8009ac8:	4640      	mov	r0, r8
 8009aca:	f7ff ff71 	bl	80099b0 <__ssputs_r>
 8009ace:	3001      	adds	r0, #1
 8009ad0:	f000 80a4 	beq.w	8009c1c <_svfiprintf_r+0x1b8>
 8009ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad6:	4453      	add	r3, sl
 8009ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8009ada:	783b      	ldrb	r3, [r7, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 809d 	beq.w	8009c1c <_svfiprintf_r+0x1b8>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aec:	9304      	str	r3, [sp, #16]
 8009aee:	9307      	str	r3, [sp, #28]
 8009af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009af4:	931a      	str	r3, [sp, #104]	; 0x68
 8009af6:	462f      	mov	r7, r5
 8009af8:	2205      	movs	r2, #5
 8009afa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009afe:	4850      	ldr	r0, [pc, #320]	; (8009c40 <_svfiprintf_r+0x1dc>)
 8009b00:	f7f6 fbb6 	bl	8000270 <memchr>
 8009b04:	9b04      	ldr	r3, [sp, #16]
 8009b06:	b9d0      	cbnz	r0, 8009b3e <_svfiprintf_r+0xda>
 8009b08:	06d9      	lsls	r1, r3, #27
 8009b0a:	bf44      	itt	mi
 8009b0c:	2220      	movmi	r2, #32
 8009b0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b12:	071a      	lsls	r2, r3, #28
 8009b14:	bf44      	itt	mi
 8009b16:	222b      	movmi	r2, #43	; 0x2b
 8009b18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b1c:	782a      	ldrb	r2, [r5, #0]
 8009b1e:	2a2a      	cmp	r2, #42	; 0x2a
 8009b20:	d015      	beq.n	8009b4e <_svfiprintf_r+0xea>
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	462f      	mov	r7, r5
 8009b26:	2000      	movs	r0, #0
 8009b28:	250a      	movs	r5, #10
 8009b2a:	4639      	mov	r1, r7
 8009b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b30:	3b30      	subs	r3, #48	; 0x30
 8009b32:	2b09      	cmp	r3, #9
 8009b34:	d94d      	bls.n	8009bd2 <_svfiprintf_r+0x16e>
 8009b36:	b1b8      	cbz	r0, 8009b68 <_svfiprintf_r+0x104>
 8009b38:	e00f      	b.n	8009b5a <_svfiprintf_r+0xf6>
 8009b3a:	462f      	mov	r7, r5
 8009b3c:	e7b8      	b.n	8009ab0 <_svfiprintf_r+0x4c>
 8009b3e:	4a40      	ldr	r2, [pc, #256]	; (8009c40 <_svfiprintf_r+0x1dc>)
 8009b40:	1a80      	subs	r0, r0, r2
 8009b42:	fa0b f000 	lsl.w	r0, fp, r0
 8009b46:	4318      	orrs	r0, r3
 8009b48:	9004      	str	r0, [sp, #16]
 8009b4a:	463d      	mov	r5, r7
 8009b4c:	e7d3      	b.n	8009af6 <_svfiprintf_r+0x92>
 8009b4e:	9a03      	ldr	r2, [sp, #12]
 8009b50:	1d11      	adds	r1, r2, #4
 8009b52:	6812      	ldr	r2, [r2, #0]
 8009b54:	9103      	str	r1, [sp, #12]
 8009b56:	2a00      	cmp	r2, #0
 8009b58:	db01      	blt.n	8009b5e <_svfiprintf_r+0xfa>
 8009b5a:	9207      	str	r2, [sp, #28]
 8009b5c:	e004      	b.n	8009b68 <_svfiprintf_r+0x104>
 8009b5e:	4252      	negs	r2, r2
 8009b60:	f043 0302 	orr.w	r3, r3, #2
 8009b64:	9207      	str	r2, [sp, #28]
 8009b66:	9304      	str	r3, [sp, #16]
 8009b68:	783b      	ldrb	r3, [r7, #0]
 8009b6a:	2b2e      	cmp	r3, #46	; 0x2e
 8009b6c:	d10c      	bne.n	8009b88 <_svfiprintf_r+0x124>
 8009b6e:	787b      	ldrb	r3, [r7, #1]
 8009b70:	2b2a      	cmp	r3, #42	; 0x2a
 8009b72:	d133      	bne.n	8009bdc <_svfiprintf_r+0x178>
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	1d1a      	adds	r2, r3, #4
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	9203      	str	r2, [sp, #12]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	bfb8      	it	lt
 8009b80:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b84:	3702      	adds	r7, #2
 8009b86:	9305      	str	r3, [sp, #20]
 8009b88:	4d2e      	ldr	r5, [pc, #184]	; (8009c44 <_svfiprintf_r+0x1e0>)
 8009b8a:	7839      	ldrb	r1, [r7, #0]
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	4628      	mov	r0, r5
 8009b90:	f7f6 fb6e 	bl	8000270 <memchr>
 8009b94:	b138      	cbz	r0, 8009ba6 <_svfiprintf_r+0x142>
 8009b96:	2340      	movs	r3, #64	; 0x40
 8009b98:	1b40      	subs	r0, r0, r5
 8009b9a:	fa03 f000 	lsl.w	r0, r3, r0
 8009b9e:	9b04      	ldr	r3, [sp, #16]
 8009ba0:	4303      	orrs	r3, r0
 8009ba2:	3701      	adds	r7, #1
 8009ba4:	9304      	str	r3, [sp, #16]
 8009ba6:	7839      	ldrb	r1, [r7, #0]
 8009ba8:	4827      	ldr	r0, [pc, #156]	; (8009c48 <_svfiprintf_r+0x1e4>)
 8009baa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bae:	2206      	movs	r2, #6
 8009bb0:	1c7e      	adds	r6, r7, #1
 8009bb2:	f7f6 fb5d 	bl	8000270 <memchr>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d038      	beq.n	8009c2c <_svfiprintf_r+0x1c8>
 8009bba:	4b24      	ldr	r3, [pc, #144]	; (8009c4c <_svfiprintf_r+0x1e8>)
 8009bbc:	bb13      	cbnz	r3, 8009c04 <_svfiprintf_r+0x1a0>
 8009bbe:	9b03      	ldr	r3, [sp, #12]
 8009bc0:	3307      	adds	r3, #7
 8009bc2:	f023 0307 	bic.w	r3, r3, #7
 8009bc6:	3308      	adds	r3, #8
 8009bc8:	9303      	str	r3, [sp, #12]
 8009bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bcc:	444b      	add	r3, r9
 8009bce:	9309      	str	r3, [sp, #36]	; 0x24
 8009bd0:	e76d      	b.n	8009aae <_svfiprintf_r+0x4a>
 8009bd2:	fb05 3202 	mla	r2, r5, r2, r3
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	460f      	mov	r7, r1
 8009bda:	e7a6      	b.n	8009b2a <_svfiprintf_r+0xc6>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	3701      	adds	r7, #1
 8009be0:	9305      	str	r3, [sp, #20]
 8009be2:	4619      	mov	r1, r3
 8009be4:	250a      	movs	r5, #10
 8009be6:	4638      	mov	r0, r7
 8009be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bec:	3a30      	subs	r2, #48	; 0x30
 8009bee:	2a09      	cmp	r2, #9
 8009bf0:	d903      	bls.n	8009bfa <_svfiprintf_r+0x196>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0c8      	beq.n	8009b88 <_svfiprintf_r+0x124>
 8009bf6:	9105      	str	r1, [sp, #20]
 8009bf8:	e7c6      	b.n	8009b88 <_svfiprintf_r+0x124>
 8009bfa:	fb05 2101 	mla	r1, r5, r1, r2
 8009bfe:	2301      	movs	r3, #1
 8009c00:	4607      	mov	r7, r0
 8009c02:	e7f0      	b.n	8009be6 <_svfiprintf_r+0x182>
 8009c04:	ab03      	add	r3, sp, #12
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	4622      	mov	r2, r4
 8009c0a:	4b11      	ldr	r3, [pc, #68]	; (8009c50 <_svfiprintf_r+0x1ec>)
 8009c0c:	a904      	add	r1, sp, #16
 8009c0e:	4640      	mov	r0, r8
 8009c10:	f3af 8000 	nop.w
 8009c14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c18:	4681      	mov	r9, r0
 8009c1a:	d1d6      	bne.n	8009bca <_svfiprintf_r+0x166>
 8009c1c:	89a3      	ldrh	r3, [r4, #12]
 8009c1e:	065b      	lsls	r3, r3, #25
 8009c20:	f53f af35 	bmi.w	8009a8e <_svfiprintf_r+0x2a>
 8009c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c26:	b01d      	add	sp, #116	; 0x74
 8009c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2c:	ab03      	add	r3, sp, #12
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	4622      	mov	r2, r4
 8009c32:	4b07      	ldr	r3, [pc, #28]	; (8009c50 <_svfiprintf_r+0x1ec>)
 8009c34:	a904      	add	r1, sp, #16
 8009c36:	4640      	mov	r0, r8
 8009c38:	f000 f882 	bl	8009d40 <_printf_i>
 8009c3c:	e7ea      	b.n	8009c14 <_svfiprintf_r+0x1b0>
 8009c3e:	bf00      	nop
 8009c40:	0800a1e2 	.word	0x0800a1e2
 8009c44:	0800a1e8 	.word	0x0800a1e8
 8009c48:	0800a1ec 	.word	0x0800a1ec
 8009c4c:	00000000 	.word	0x00000000
 8009c50:	080099b1 	.word	0x080099b1

08009c54 <_printf_common>:
 8009c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c58:	4691      	mov	r9, r2
 8009c5a:	461f      	mov	r7, r3
 8009c5c:	688a      	ldr	r2, [r1, #8]
 8009c5e:	690b      	ldr	r3, [r1, #16]
 8009c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c64:	4293      	cmp	r3, r2
 8009c66:	bfb8      	it	lt
 8009c68:	4613      	movlt	r3, r2
 8009c6a:	f8c9 3000 	str.w	r3, [r9]
 8009c6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c72:	4606      	mov	r6, r0
 8009c74:	460c      	mov	r4, r1
 8009c76:	b112      	cbz	r2, 8009c7e <_printf_common+0x2a>
 8009c78:	3301      	adds	r3, #1
 8009c7a:	f8c9 3000 	str.w	r3, [r9]
 8009c7e:	6823      	ldr	r3, [r4, #0]
 8009c80:	0699      	lsls	r1, r3, #26
 8009c82:	bf42      	ittt	mi
 8009c84:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009c88:	3302      	addmi	r3, #2
 8009c8a:	f8c9 3000 	strmi.w	r3, [r9]
 8009c8e:	6825      	ldr	r5, [r4, #0]
 8009c90:	f015 0506 	ands.w	r5, r5, #6
 8009c94:	d107      	bne.n	8009ca6 <_printf_common+0x52>
 8009c96:	f104 0a19 	add.w	sl, r4, #25
 8009c9a:	68e3      	ldr	r3, [r4, #12]
 8009c9c:	f8d9 2000 	ldr.w	r2, [r9]
 8009ca0:	1a9b      	subs	r3, r3, r2
 8009ca2:	42ab      	cmp	r3, r5
 8009ca4:	dc28      	bgt.n	8009cf8 <_printf_common+0xa4>
 8009ca6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009caa:	6822      	ldr	r2, [r4, #0]
 8009cac:	3300      	adds	r3, #0
 8009cae:	bf18      	it	ne
 8009cb0:	2301      	movne	r3, #1
 8009cb2:	0692      	lsls	r2, r2, #26
 8009cb4:	d42d      	bmi.n	8009d12 <_printf_common+0xbe>
 8009cb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cba:	4639      	mov	r1, r7
 8009cbc:	4630      	mov	r0, r6
 8009cbe:	47c0      	blx	r8
 8009cc0:	3001      	adds	r0, #1
 8009cc2:	d020      	beq.n	8009d06 <_printf_common+0xb2>
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	68e5      	ldr	r5, [r4, #12]
 8009cc8:	f8d9 2000 	ldr.w	r2, [r9]
 8009ccc:	f003 0306 	and.w	r3, r3, #6
 8009cd0:	2b04      	cmp	r3, #4
 8009cd2:	bf08      	it	eq
 8009cd4:	1aad      	subeq	r5, r5, r2
 8009cd6:	68a3      	ldr	r3, [r4, #8]
 8009cd8:	6922      	ldr	r2, [r4, #16]
 8009cda:	bf0c      	ite	eq
 8009cdc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ce0:	2500      	movne	r5, #0
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	bfc4      	itt	gt
 8009ce6:	1a9b      	subgt	r3, r3, r2
 8009ce8:	18ed      	addgt	r5, r5, r3
 8009cea:	f04f 0900 	mov.w	r9, #0
 8009cee:	341a      	adds	r4, #26
 8009cf0:	454d      	cmp	r5, r9
 8009cf2:	d11a      	bne.n	8009d2a <_printf_common+0xd6>
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	e008      	b.n	8009d0a <_printf_common+0xb6>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	4652      	mov	r2, sl
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	4630      	mov	r0, r6
 8009d00:	47c0      	blx	r8
 8009d02:	3001      	adds	r0, #1
 8009d04:	d103      	bne.n	8009d0e <_printf_common+0xba>
 8009d06:	f04f 30ff 	mov.w	r0, #4294967295
 8009d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0e:	3501      	adds	r5, #1
 8009d10:	e7c3      	b.n	8009c9a <_printf_common+0x46>
 8009d12:	18e1      	adds	r1, r4, r3
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	2030      	movs	r0, #48	; 0x30
 8009d18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d1c:	4422      	add	r2, r4
 8009d1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d26:	3302      	adds	r3, #2
 8009d28:	e7c5      	b.n	8009cb6 <_printf_common+0x62>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4622      	mov	r2, r4
 8009d2e:	4639      	mov	r1, r7
 8009d30:	4630      	mov	r0, r6
 8009d32:	47c0      	blx	r8
 8009d34:	3001      	adds	r0, #1
 8009d36:	d0e6      	beq.n	8009d06 <_printf_common+0xb2>
 8009d38:	f109 0901 	add.w	r9, r9, #1
 8009d3c:	e7d8      	b.n	8009cf0 <_printf_common+0x9c>
	...

08009d40 <_printf_i>:
 8009d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009d44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009d48:	460c      	mov	r4, r1
 8009d4a:	7e09      	ldrb	r1, [r1, #24]
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	296e      	cmp	r1, #110	; 0x6e
 8009d50:	4617      	mov	r7, r2
 8009d52:	4606      	mov	r6, r0
 8009d54:	4698      	mov	r8, r3
 8009d56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009d58:	f000 80b3 	beq.w	8009ec2 <_printf_i+0x182>
 8009d5c:	d822      	bhi.n	8009da4 <_printf_i+0x64>
 8009d5e:	2963      	cmp	r1, #99	; 0x63
 8009d60:	d036      	beq.n	8009dd0 <_printf_i+0x90>
 8009d62:	d80a      	bhi.n	8009d7a <_printf_i+0x3a>
 8009d64:	2900      	cmp	r1, #0
 8009d66:	f000 80b9 	beq.w	8009edc <_printf_i+0x19c>
 8009d6a:	2958      	cmp	r1, #88	; 0x58
 8009d6c:	f000 8083 	beq.w	8009e76 <_printf_i+0x136>
 8009d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009d78:	e032      	b.n	8009de0 <_printf_i+0xa0>
 8009d7a:	2964      	cmp	r1, #100	; 0x64
 8009d7c:	d001      	beq.n	8009d82 <_printf_i+0x42>
 8009d7e:	2969      	cmp	r1, #105	; 0x69
 8009d80:	d1f6      	bne.n	8009d70 <_printf_i+0x30>
 8009d82:	6820      	ldr	r0, [r4, #0]
 8009d84:	6813      	ldr	r3, [r2, #0]
 8009d86:	0605      	lsls	r5, r0, #24
 8009d88:	f103 0104 	add.w	r1, r3, #4
 8009d8c:	d52a      	bpl.n	8009de4 <_printf_i+0xa4>
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6011      	str	r1, [r2, #0]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da03      	bge.n	8009d9e <_printf_i+0x5e>
 8009d96:	222d      	movs	r2, #45	; 0x2d
 8009d98:	425b      	negs	r3, r3
 8009d9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009d9e:	486f      	ldr	r0, [pc, #444]	; (8009f5c <_printf_i+0x21c>)
 8009da0:	220a      	movs	r2, #10
 8009da2:	e039      	b.n	8009e18 <_printf_i+0xd8>
 8009da4:	2973      	cmp	r1, #115	; 0x73
 8009da6:	f000 809d 	beq.w	8009ee4 <_printf_i+0x1a4>
 8009daa:	d808      	bhi.n	8009dbe <_printf_i+0x7e>
 8009dac:	296f      	cmp	r1, #111	; 0x6f
 8009dae:	d020      	beq.n	8009df2 <_printf_i+0xb2>
 8009db0:	2970      	cmp	r1, #112	; 0x70
 8009db2:	d1dd      	bne.n	8009d70 <_printf_i+0x30>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	f043 0320 	orr.w	r3, r3, #32
 8009dba:	6023      	str	r3, [r4, #0]
 8009dbc:	e003      	b.n	8009dc6 <_printf_i+0x86>
 8009dbe:	2975      	cmp	r1, #117	; 0x75
 8009dc0:	d017      	beq.n	8009df2 <_printf_i+0xb2>
 8009dc2:	2978      	cmp	r1, #120	; 0x78
 8009dc4:	d1d4      	bne.n	8009d70 <_printf_i+0x30>
 8009dc6:	2378      	movs	r3, #120	; 0x78
 8009dc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dcc:	4864      	ldr	r0, [pc, #400]	; (8009f60 <_printf_i+0x220>)
 8009dce:	e055      	b.n	8009e7c <_printf_i+0x13c>
 8009dd0:	6813      	ldr	r3, [r2, #0]
 8009dd2:	1d19      	adds	r1, r3, #4
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	6011      	str	r1, [r2, #0]
 8009dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009de0:	2301      	movs	r3, #1
 8009de2:	e08c      	b.n	8009efe <_printf_i+0x1be>
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	6011      	str	r1, [r2, #0]
 8009de8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009dec:	bf18      	it	ne
 8009dee:	b21b      	sxthne	r3, r3
 8009df0:	e7cf      	b.n	8009d92 <_printf_i+0x52>
 8009df2:	6813      	ldr	r3, [r2, #0]
 8009df4:	6825      	ldr	r5, [r4, #0]
 8009df6:	1d18      	adds	r0, r3, #4
 8009df8:	6010      	str	r0, [r2, #0]
 8009dfa:	0628      	lsls	r0, r5, #24
 8009dfc:	d501      	bpl.n	8009e02 <_printf_i+0xc2>
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	e002      	b.n	8009e08 <_printf_i+0xc8>
 8009e02:	0668      	lsls	r0, r5, #25
 8009e04:	d5fb      	bpl.n	8009dfe <_printf_i+0xbe>
 8009e06:	881b      	ldrh	r3, [r3, #0]
 8009e08:	4854      	ldr	r0, [pc, #336]	; (8009f5c <_printf_i+0x21c>)
 8009e0a:	296f      	cmp	r1, #111	; 0x6f
 8009e0c:	bf14      	ite	ne
 8009e0e:	220a      	movne	r2, #10
 8009e10:	2208      	moveq	r2, #8
 8009e12:	2100      	movs	r1, #0
 8009e14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e18:	6865      	ldr	r5, [r4, #4]
 8009e1a:	60a5      	str	r5, [r4, #8]
 8009e1c:	2d00      	cmp	r5, #0
 8009e1e:	f2c0 8095 	blt.w	8009f4c <_printf_i+0x20c>
 8009e22:	6821      	ldr	r1, [r4, #0]
 8009e24:	f021 0104 	bic.w	r1, r1, #4
 8009e28:	6021      	str	r1, [r4, #0]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d13d      	bne.n	8009eaa <_printf_i+0x16a>
 8009e2e:	2d00      	cmp	r5, #0
 8009e30:	f040 808e 	bne.w	8009f50 <_printf_i+0x210>
 8009e34:	4665      	mov	r5, ip
 8009e36:	2a08      	cmp	r2, #8
 8009e38:	d10b      	bne.n	8009e52 <_printf_i+0x112>
 8009e3a:	6823      	ldr	r3, [r4, #0]
 8009e3c:	07db      	lsls	r3, r3, #31
 8009e3e:	d508      	bpl.n	8009e52 <_printf_i+0x112>
 8009e40:	6923      	ldr	r3, [r4, #16]
 8009e42:	6862      	ldr	r2, [r4, #4]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	bfde      	ittt	le
 8009e48:	2330      	movle	r3, #48	; 0x30
 8009e4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e52:	ebac 0305 	sub.w	r3, ip, r5
 8009e56:	6123      	str	r3, [r4, #16]
 8009e58:	f8cd 8000 	str.w	r8, [sp]
 8009e5c:	463b      	mov	r3, r7
 8009e5e:	aa03      	add	r2, sp, #12
 8009e60:	4621      	mov	r1, r4
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7ff fef6 	bl	8009c54 <_printf_common>
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d14d      	bne.n	8009f08 <_printf_i+0x1c8>
 8009e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e70:	b005      	add	sp, #20
 8009e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e76:	4839      	ldr	r0, [pc, #228]	; (8009f5c <_printf_i+0x21c>)
 8009e78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009e7c:	6813      	ldr	r3, [r2, #0]
 8009e7e:	6821      	ldr	r1, [r4, #0]
 8009e80:	1d1d      	adds	r5, r3, #4
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6015      	str	r5, [r2, #0]
 8009e86:	060a      	lsls	r2, r1, #24
 8009e88:	d50b      	bpl.n	8009ea2 <_printf_i+0x162>
 8009e8a:	07ca      	lsls	r2, r1, #31
 8009e8c:	bf44      	itt	mi
 8009e8e:	f041 0120 	orrmi.w	r1, r1, #32
 8009e92:	6021      	strmi	r1, [r4, #0]
 8009e94:	b91b      	cbnz	r3, 8009e9e <_printf_i+0x15e>
 8009e96:	6822      	ldr	r2, [r4, #0]
 8009e98:	f022 0220 	bic.w	r2, r2, #32
 8009e9c:	6022      	str	r2, [r4, #0]
 8009e9e:	2210      	movs	r2, #16
 8009ea0:	e7b7      	b.n	8009e12 <_printf_i+0xd2>
 8009ea2:	064d      	lsls	r5, r1, #25
 8009ea4:	bf48      	it	mi
 8009ea6:	b29b      	uxthmi	r3, r3
 8009ea8:	e7ef      	b.n	8009e8a <_printf_i+0x14a>
 8009eaa:	4665      	mov	r5, ip
 8009eac:	fbb3 f1f2 	udiv	r1, r3, r2
 8009eb0:	fb02 3311 	mls	r3, r2, r1, r3
 8009eb4:	5cc3      	ldrb	r3, [r0, r3]
 8009eb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009eba:	460b      	mov	r3, r1
 8009ebc:	2900      	cmp	r1, #0
 8009ebe:	d1f5      	bne.n	8009eac <_printf_i+0x16c>
 8009ec0:	e7b9      	b.n	8009e36 <_printf_i+0xf6>
 8009ec2:	6813      	ldr	r3, [r2, #0]
 8009ec4:	6825      	ldr	r5, [r4, #0]
 8009ec6:	6961      	ldr	r1, [r4, #20]
 8009ec8:	1d18      	adds	r0, r3, #4
 8009eca:	6010      	str	r0, [r2, #0]
 8009ecc:	0628      	lsls	r0, r5, #24
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	d501      	bpl.n	8009ed6 <_printf_i+0x196>
 8009ed2:	6019      	str	r1, [r3, #0]
 8009ed4:	e002      	b.n	8009edc <_printf_i+0x19c>
 8009ed6:	066a      	lsls	r2, r5, #25
 8009ed8:	d5fb      	bpl.n	8009ed2 <_printf_i+0x192>
 8009eda:	8019      	strh	r1, [r3, #0]
 8009edc:	2300      	movs	r3, #0
 8009ede:	6123      	str	r3, [r4, #16]
 8009ee0:	4665      	mov	r5, ip
 8009ee2:	e7b9      	b.n	8009e58 <_printf_i+0x118>
 8009ee4:	6813      	ldr	r3, [r2, #0]
 8009ee6:	1d19      	adds	r1, r3, #4
 8009ee8:	6011      	str	r1, [r2, #0]
 8009eea:	681d      	ldr	r5, [r3, #0]
 8009eec:	6862      	ldr	r2, [r4, #4]
 8009eee:	2100      	movs	r1, #0
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	f7f6 f9bd 	bl	8000270 <memchr>
 8009ef6:	b108      	cbz	r0, 8009efc <_printf_i+0x1bc>
 8009ef8:	1b40      	subs	r0, r0, r5
 8009efa:	6060      	str	r0, [r4, #4]
 8009efc:	6863      	ldr	r3, [r4, #4]
 8009efe:	6123      	str	r3, [r4, #16]
 8009f00:	2300      	movs	r3, #0
 8009f02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f06:	e7a7      	b.n	8009e58 <_printf_i+0x118>
 8009f08:	6923      	ldr	r3, [r4, #16]
 8009f0a:	462a      	mov	r2, r5
 8009f0c:	4639      	mov	r1, r7
 8009f0e:	4630      	mov	r0, r6
 8009f10:	47c0      	blx	r8
 8009f12:	3001      	adds	r0, #1
 8009f14:	d0aa      	beq.n	8009e6c <_printf_i+0x12c>
 8009f16:	6823      	ldr	r3, [r4, #0]
 8009f18:	079b      	lsls	r3, r3, #30
 8009f1a:	d413      	bmi.n	8009f44 <_printf_i+0x204>
 8009f1c:	68e0      	ldr	r0, [r4, #12]
 8009f1e:	9b03      	ldr	r3, [sp, #12]
 8009f20:	4298      	cmp	r0, r3
 8009f22:	bfb8      	it	lt
 8009f24:	4618      	movlt	r0, r3
 8009f26:	e7a3      	b.n	8009e70 <_printf_i+0x130>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	464a      	mov	r2, r9
 8009f2c:	4639      	mov	r1, r7
 8009f2e:	4630      	mov	r0, r6
 8009f30:	47c0      	blx	r8
 8009f32:	3001      	adds	r0, #1
 8009f34:	d09a      	beq.n	8009e6c <_printf_i+0x12c>
 8009f36:	3501      	adds	r5, #1
 8009f38:	68e3      	ldr	r3, [r4, #12]
 8009f3a:	9a03      	ldr	r2, [sp, #12]
 8009f3c:	1a9b      	subs	r3, r3, r2
 8009f3e:	42ab      	cmp	r3, r5
 8009f40:	dcf2      	bgt.n	8009f28 <_printf_i+0x1e8>
 8009f42:	e7eb      	b.n	8009f1c <_printf_i+0x1dc>
 8009f44:	2500      	movs	r5, #0
 8009f46:	f104 0919 	add.w	r9, r4, #25
 8009f4a:	e7f5      	b.n	8009f38 <_printf_i+0x1f8>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1ac      	bne.n	8009eaa <_printf_i+0x16a>
 8009f50:	7803      	ldrb	r3, [r0, #0]
 8009f52:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f5a:	e76c      	b.n	8009e36 <_printf_i+0xf6>
 8009f5c:	0800a1f3 	.word	0x0800a1f3
 8009f60:	0800a204 	.word	0x0800a204

08009f64 <_sbrk_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4c06      	ldr	r4, [pc, #24]	; (8009f80 <_sbrk_r+0x1c>)
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4605      	mov	r5, r0
 8009f6c:	4608      	mov	r0, r1
 8009f6e:	6023      	str	r3, [r4, #0]
 8009f70:	f7f9 f90a 	bl	8003188 <_sbrk>
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	d102      	bne.n	8009f7e <_sbrk_r+0x1a>
 8009f78:	6823      	ldr	r3, [r4, #0]
 8009f7a:	b103      	cbz	r3, 8009f7e <_sbrk_r+0x1a>
 8009f7c:	602b      	str	r3, [r5, #0]
 8009f7e:	bd38      	pop	{r3, r4, r5, pc}
 8009f80:	2005aa4c 	.word	0x2005aa4c

08009f84 <__ascii_wctomb>:
 8009f84:	b149      	cbz	r1, 8009f9a <__ascii_wctomb+0x16>
 8009f86:	2aff      	cmp	r2, #255	; 0xff
 8009f88:	bf85      	ittet	hi
 8009f8a:	238a      	movhi	r3, #138	; 0x8a
 8009f8c:	6003      	strhi	r3, [r0, #0]
 8009f8e:	700a      	strbls	r2, [r1, #0]
 8009f90:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f94:	bf98      	it	ls
 8009f96:	2001      	movls	r0, #1
 8009f98:	4770      	bx	lr
 8009f9a:	4608      	mov	r0, r1
 8009f9c:	4770      	bx	lr

08009f9e <memcpy>:
 8009f9e:	b510      	push	{r4, lr}
 8009fa0:	1e43      	subs	r3, r0, #1
 8009fa2:	440a      	add	r2, r1
 8009fa4:	4291      	cmp	r1, r2
 8009fa6:	d100      	bne.n	8009faa <memcpy+0xc>
 8009fa8:	bd10      	pop	{r4, pc}
 8009faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009fb2:	e7f7      	b.n	8009fa4 <memcpy+0x6>

08009fb4 <memmove>:
 8009fb4:	4288      	cmp	r0, r1
 8009fb6:	b510      	push	{r4, lr}
 8009fb8:	eb01 0302 	add.w	r3, r1, r2
 8009fbc:	d807      	bhi.n	8009fce <memmove+0x1a>
 8009fbe:	1e42      	subs	r2, r0, #1
 8009fc0:	4299      	cmp	r1, r3
 8009fc2:	d00a      	beq.n	8009fda <memmove+0x26>
 8009fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009fc8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009fcc:	e7f8      	b.n	8009fc0 <memmove+0xc>
 8009fce:	4283      	cmp	r3, r0
 8009fd0:	d9f5      	bls.n	8009fbe <memmove+0xa>
 8009fd2:	1881      	adds	r1, r0, r2
 8009fd4:	1ad2      	subs	r2, r2, r3
 8009fd6:	42d3      	cmn	r3, r2
 8009fd8:	d100      	bne.n	8009fdc <memmove+0x28>
 8009fda:	bd10      	pop	{r4, pc}
 8009fdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fe0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009fe4:	e7f7      	b.n	8009fd6 <memmove+0x22>

08009fe6 <__malloc_lock>:
 8009fe6:	4770      	bx	lr

08009fe8 <__malloc_unlock>:
 8009fe8:	4770      	bx	lr

08009fea <_realloc_r>:
 8009fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fec:	4607      	mov	r7, r0
 8009fee:	4614      	mov	r4, r2
 8009ff0:	460e      	mov	r6, r1
 8009ff2:	b921      	cbnz	r1, 8009ffe <_realloc_r+0x14>
 8009ff4:	4611      	mov	r1, r2
 8009ff6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009ffa:	f7ff bc7f 	b.w	80098fc <_malloc_r>
 8009ffe:	b922      	cbnz	r2, 800a00a <_realloc_r+0x20>
 800a000:	f7ff fc2e 	bl	8009860 <_free_r>
 800a004:	4625      	mov	r5, r4
 800a006:	4628      	mov	r0, r5
 800a008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a00a:	f000 f814 	bl	800a036 <_malloc_usable_size_r>
 800a00e:	42a0      	cmp	r0, r4
 800a010:	d20f      	bcs.n	800a032 <_realloc_r+0x48>
 800a012:	4621      	mov	r1, r4
 800a014:	4638      	mov	r0, r7
 800a016:	f7ff fc71 	bl	80098fc <_malloc_r>
 800a01a:	4605      	mov	r5, r0
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d0f2      	beq.n	800a006 <_realloc_r+0x1c>
 800a020:	4631      	mov	r1, r6
 800a022:	4622      	mov	r2, r4
 800a024:	f7ff ffbb 	bl	8009f9e <memcpy>
 800a028:	4631      	mov	r1, r6
 800a02a:	4638      	mov	r0, r7
 800a02c:	f7ff fc18 	bl	8009860 <_free_r>
 800a030:	e7e9      	b.n	800a006 <_realloc_r+0x1c>
 800a032:	4635      	mov	r5, r6
 800a034:	e7e7      	b.n	800a006 <_realloc_r+0x1c>

0800a036 <_malloc_usable_size_r>:
 800a036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a03a:	1f18      	subs	r0, r3, #4
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	bfbc      	itt	lt
 800a040:	580b      	ldrlt	r3, [r1, r0]
 800a042:	18c0      	addlt	r0, r0, r3
 800a044:	4770      	bx	lr
	...

0800a048 <_init>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	bf00      	nop
 800a04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04e:	bc08      	pop	{r3}
 800a050:	469e      	mov	lr, r3
 800a052:	4770      	bx	lr

0800a054 <_fini>:
 800a054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a056:	bf00      	nop
 800a058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a05a:	bc08      	pop	{r3}
 800a05c:	469e      	mov	lr, r3
 800a05e:	4770      	bx	lr
