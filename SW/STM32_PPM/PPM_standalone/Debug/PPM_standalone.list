
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d40  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1d8  0800a1d8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1d8  0800a1d8  0001a1d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1e0  0800a1e0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1e0  0800a1e0  0001a1e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1e4  0800a1e4  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a1e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005a834  200001e4  0800a3cc  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2005aa18  0800a3cc  0002aa18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000159f6  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000028b8  00000000  00000000  00035c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001548  00000000  00000000  000384c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001430  00000000  00000000  00039a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029847  00000000  00000000  0003ae38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fa19  00000000  00000000  0006467f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001039ce  00000000  00000000  00074098  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00177a66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fdc  00000000  00000000  00177ae4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009f28 	.word	0x08009f28

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	08009f28 	.word	0x08009f28

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000616:	f002 fd92 	bl	800313e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800061a:	f000 f861 	bl	80006e0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800061e:	f000 feab 	bl	8001378 <MX_GPIO_Init>
	MX_DMA_Init();
 8000622:	f000 fe6f 	bl	8001304 <MX_DMA_Init>
	MX_ADC1_Init();
 8000626:	f000 f8fd 	bl	8000824 <MX_ADC1_Init>
	MX_SPI1_Init();
 800062a:	f000 f9cd 	bl	80009c8 <MX_SPI1_Init>
	MX_TIM1_Init();
 800062e:	f000 fa43 	bl	8000ab8 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000632:	f000 fb01 	bl	8000c38 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000636:	f000 fb53 	bl	8000ce0 <MX_TIM3_Init>
	MX_TIM4_Init();
 800063a:	f000 fbc9 	bl	8000dd0 <MX_TIM4_Init>
	MX_TIM8_Init();
 800063e:	f000 fca5 	bl	8000f8c <MX_TIM8_Init>
	MX_UART5_Init();
 8000642:	f000 fd6f 	bl	8001124 <MX_UART5_Init>
	MX_USART1_UART_Init();
 8000646:	f000 fdcd 	bl	80011e4 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800064a:	f000 fdfb 	bl	8001244 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800064e:	f000 fe29 	bl	80012a4 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8000652:	f000 f939 	bl	80008c8 <MX_I2C1_Init>
	MX_I2C3_Init();
 8000656:	f000 f977 	bl	8000948 <MX_I2C3_Init>
	MX_SPI4_Init();
 800065a:	f000 f9ef 	bl	8000a3c <MX_SPI4_Init>
	MX_TIM5_Init();
 800065e:	f000 fc11 	bl	8000e84 <MX_TIM5_Init>
	MX_UART7_Init();
 8000662:	f000 fd8f 	bl	8001184 <MX_UART7_Init>
	MX_TIM6_Init();
 8000666:	f000 fc5b 	bl	8000f20 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	4919      	ldr	r1, [pc, #100]	; (80006d4 <main+0xc4>)
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <main+0xc8>)
 8000670:	f007 ffee 	bl	8008650 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000674:	4819      	ldr	r0, [pc, #100]	; (80006dc <main+0xcc>)
 8000676:	f006 f853 	bl	8006720 <HAL_TIM_Base_Start_IT>
	char msg_buffers[25];
	uint16_t index = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	83fb      	strh	r3, [r7, #30]
	switchingCircuitIdle();
 800067e:	f001 f871 	bl	8001764 <switchingCircuitIdle>
	// visualise
	set_LED1(0, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f001 f812 	bl	80016b0 <set_LED1>
	HAL_Delay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f002 fdb2 	bl	80031f8 <HAL_Delay>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		parseText();
 8000694:	f001 fb10 	bl	8001cb8 <parseText>

		// if new measurement technique was updated - change state regarding to the update
		if (stateCanBeUpdated()) {
 8000698:	f001 fefe 	bl	8002498 <stateCanBeUpdated>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <main+0x96>
			updateState();
 80006a2:	f001 fed9 	bl	8002458 <updateState>
		}
		//
		if (measurementCanRun()) {
 80006a6:	f001 ff1f 	bl	80024e8 <measurementCanRun>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <main+0xa6>
			runMeasurementMethod();
 80006b0:	f000 fef4 	bl	800149c <runMeasurementMethod>
 80006b4:	e7ee      	b.n	8000694 <main+0x84>
		}
		// idle state - if no method is active and there are no data to be sent
		else if (stateIsIdle()) {
 80006b6:	f001 ff3f 	bl	8002538 <stateIsIdle>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <main+0xbc>
			set_LED1(0, 0, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 fff3 	bl	80016b0 <set_LED1>
 80006ca:	e7e3      	b.n	8000694 <main+0x84>
		} else {
			sendMeasuredData();
 80006cc:	f001 fd52 	bl	8002174 <sendMeasuredData>
	while (1) {
 80006d0:	e7e0      	b.n	8000694 <main+0x84>
 80006d2:	bf00      	nop
 80006d4:	20004310 	.word	0x20004310
 80006d8:	20004244 	.word	0x20004244
 80006dc:	2002f424 	.word	0x2002f424

080006e0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b0b8      	sub	sp, #224	; 0xe0
 80006e4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006ea:	2234      	movs	r2, #52	; 0x34
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f008 fee4 	bl	80094bc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
 80006fc:	605a      	str	r2, [r3, #4]
 80006fe:	609a      	str	r2, [r3, #8]
 8000700:	60da      	str	r2, [r3, #12]
 8000702:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2290      	movs	r2, #144	; 0x90
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f008 fed5 	bl	80094bc <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000712:	f004 f935 	bl	8004980 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000716:	4b40      	ldr	r3, [pc, #256]	; (8000818 <SystemClock_Config+0x138>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	4a3f      	ldr	r2, [pc, #252]	; (8000818 <SystemClock_Config+0x138>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	6413      	str	r3, [r2, #64]	; 0x40
 8000722:	4b3d      	ldr	r3, [pc, #244]	; (8000818 <SystemClock_Config+0x138>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800072e:	4b3b      	ldr	r3, [pc, #236]	; (800081c <SystemClock_Config+0x13c>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a3a      	ldr	r2, [pc, #232]	; (800081c <SystemClock_Config+0x13c>)
 8000734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000738:	6013      	str	r3, [r2, #0]
 800073a:	4b38      	ldr	r3, [pc, #224]	; (800081c <SystemClock_Config+0x13c>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000746:	2301      	movs	r3, #1
 8000748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 5;
 8000762:	2305      	movs	r3, #5
 8000764:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000768:	23d8      	movs	r3, #216	; 0xd8
 800076a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000774:	2302      	movs	r3, #2
 8000776:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800077a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800077e:	4618      	mov	r0, r3
 8000780:	f004 f95e 	bl	8004a40 <HAL_RCC_OscConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xae>
		Error_Handler();
 800078a:	f001 fef9 	bl	8002580 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800078e:	f004 f907 	bl	80049a0 <HAL_PWREx_EnableOverDrive>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xbc>
		Error_Handler();
 8000798:	f001 fef2 	bl	8002580 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800079c:	230f      	movs	r3, #15
 800079e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80007be:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007c2:	2107      	movs	r1, #7
 80007c4:	4618      	mov	r0, r3
 80007c6:	f004 fbe9 	bl	8004f9c <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xf4>
		Error_Handler();
 80007d0:	f001 fed6 	bl	8002580 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART5 | RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_I2C1
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <SystemClock_Config+0x140>)
 80007d6:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007d8:	2300      	movs	r3, #0
 80007da:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007dc:	2300      	movs	r3, #0
 80007de:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80007f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80007f8:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80007fa:	f107 0308 	add.w	r3, r7, #8
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 fd9e 	bl	8005340 <HAL_RCCEx_PeriphCLKConfig>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <SystemClock_Config+0x12e>
		Error_Handler();
 800080a:	f001 feb9 	bl	8002580 <Error_Handler>
	}
}
 800080e:	bf00      	nop
 8000810:	37e0      	adds	r7, #224	; 0xe0
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800
 800081c:	40007000 	.word	0x40007000
 8000820:	000155d0 	.word	0x000155d0

08000824 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800082a:	463b      	mov	r3, r7
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000836:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000838:	4a22      	ldr	r2, [pc, #136]	; (80008c4 <MX_ADC1_Init+0xa0>)
 800083a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800083c:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_ADC1_Init+0x9c>)
 800083e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000842:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <MX_ADC1_Init+0x9c>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000858:	2200      	movs	r2, #0
 800085a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000868:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 800086c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000876:	2201      	movs	r2, #1
 8000878:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800087a:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <MX_ADC1_Init+0x9c>)
 800087c:	2200      	movs	r2, #0
 800087e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <MX_ADC1_Init+0x9c>)
 8000884:	2201      	movs	r2, #1
 8000886:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <MX_ADC1_Init+0x9c>)
 800088a:	f002 fcd7 	bl	800323c <HAL_ADC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0x74>
		Error_Handler();
 8000894:	f001 fe74 	bl	8002580 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000898:	2300      	movs	r3, #0
 800089a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800089c:	2301      	movs	r3, #1
 800089e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008a0:	2301      	movs	r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80008a4:	463b      	mov	r3, r7
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	; (80008c0 <MX_ADC1_Init+0x9c>)
 80008aa:	f002 fe0d 	bl	80034c8 <HAL_ADC_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_ADC1_Init+0x94>
		Error_Handler();
 80008b4:	f001 fe64 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2002f538 	.word	0x2002f538
 80008c4:	40012000 	.word	0x40012000

080008c8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	; (800093c <MX_I2C1_Init+0x74>)
 80008ce:	4a1c      	ldr	r2, [pc, #112]	; (8000940 <MX_I2C1_Init+0x78>)
 80008d0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20404768;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_I2C1_Init+0x74>)
 80008d4:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <MX_I2C1_Init+0x7c>)
 80008d6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_I2C1_Init+0x74>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_I2C1_Init+0x74>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_I2C1_Init+0x74>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_I2C1_Init+0x74>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_I2C1_Init+0x74>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2C1_Init+0x74>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <MX_I2C1_Init+0x74>)
 8000904:	f003 ff14 	bl	8004730 <HAL_I2C_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x4a>
		Error_Handler();
 800090e:	f001 fe37 	bl	8002580 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000912:	2100      	movs	r1, #0
 8000914:	4809      	ldr	r0, [pc, #36]	; (800093c <MX_I2C1_Init+0x74>)
 8000916:	f003 ff9b 	bl	8004850 <HAL_I2CEx_ConfigAnalogFilter>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_I2C1_Init+0x5c>
		Error_Handler();
 8000920:	f001 fe2e 	bl	8002580 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000924:	2100      	movs	r1, #0
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_I2C1_Init+0x74>)
 8000928:	f003 ffdd 	bl	80048e6 <HAL_I2CEx_ConfigDigitalFilter>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000932:	f001 fe25 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200042c4 	.word	0x200042c4
 8000940:	40005400 	.word	0x40005400
 8000944:	20404768 	.word	0x20404768

08000948 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 800094c:	4b1b      	ldr	r3, [pc, #108]	; (80009bc <MX_I2C3_Init+0x74>)
 800094e:	4a1c      	ldr	r2, [pc, #112]	; (80009c0 <MX_I2C3_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x20404768;
 8000952:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <MX_I2C3_Init+0x74>)
 8000954:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <MX_I2C3_Init+0x7c>)
 8000956:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000958:	4b18      	ldr	r3, [pc, #96]	; (80009bc <MX_I2C3_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_I2C3_Init+0x74>)
 8000960:	2201      	movs	r2, #1
 8000962:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000964:	4b15      	ldr	r3, [pc, #84]	; (80009bc <MX_I2C3_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_I2C3_Init+0x74>)
 800096c:	2200      	movs	r2, #0
 800096e:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_I2C3_Init+0x74>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_I2C3_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_I2C3_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000982:	480e      	ldr	r0, [pc, #56]	; (80009bc <MX_I2C3_Init+0x74>)
 8000984:	f003 fed4 	bl	8004730 <HAL_I2C_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C3_Init+0x4a>
		Error_Handler();
 800098e:	f001 fdf7 	bl	8002580 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000992:	2100      	movs	r1, #0
 8000994:	4809      	ldr	r0, [pc, #36]	; (80009bc <MX_I2C3_Init+0x74>)
 8000996:	f003 ff5b 	bl	8004850 <HAL_I2CEx_ConfigAnalogFilter>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_I2C3_Init+0x5c>
		Error_Handler();
 80009a0:	f001 fdee 	bl	8002580 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 80009a4:	2100      	movs	r1, #0
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_I2C3_Init+0x74>)
 80009a8:	f003 ff9d 	bl	80048e6 <HAL_I2CEx_ConfigDigitalFilter>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C3_Init+0x6e>
		Error_Handler();
 80009b2:	f001 fde5 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20004098 	.word	0x20004098
 80009c0:	40005c00 	.word	0x40005c00
 80009c4:	20404768 	.word	0x20404768

080009c8 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009ce:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <MX_SPI1_Init+0x70>)
 80009d0:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009d2:	4b18      	ldr	r3, [pc, #96]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009d8:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009de:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009e2:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80009e6:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_SPI1_Init+0x6c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a0e:	2207      	movs	r2, #7
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_SPI1_Init+0x6c>)
 8000a20:	f005 f8b4 	bl	8005b8c <HAL_SPI_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SPI1_Init+0x66>
		Error_Handler();
 8000a2a:	f001 fda9 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2002f77c 	.word	0x2002f77c
 8000a38:	40013000 	.word	0x40013000

08000a3c <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8000a40:	4b1b      	ldr	r3, [pc, #108]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <MX_SPI4_Init+0x78>)
 8000a44:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a4c:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a56:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a5a:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a6a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a6e:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 7;
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a8a:	2207      	movs	r2, #7
 8000a8c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	631a      	str	r2, [r3, #48]	; 0x30
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a96:	2208      	movs	r2, #8
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8000a9a:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_SPI4_Init+0x74>)
 8000a9c:	f005 f876 	bl	8005b8c <HAL_SPI_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_SPI4_Init+0x6e>
		Error_Handler();
 8000aa6:	f001 fd6b 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2002f600 	.word	0x2002f600
 8000ab4:	40013400 	.word	0x40013400

08000ab8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b09a      	sub	sp, #104	; 0x68
 8000abc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000abe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000acc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000ad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	615a      	str	r2, [r3, #20]
 8000aea:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	222c      	movs	r2, #44	; 0x2c
 8000af0:	2100      	movs	r1, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f008 fce2 	bl	80094bc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000af8:	4b4d      	ldr	r3, [pc, #308]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000afa:	4a4e      	ldr	r2, [pc, #312]	; (8000c34 <MX_TIM1_Init+0x17c>)
 8000afc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000afe:	4b4c      	ldr	r3, [pc, #304]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b04:	4b4a      	ldr	r3, [pc, #296]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4898 - 1;
 8000b0a:	4b49      	ldr	r3, [pc, #292]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b0c:	f241 3221 	movw	r2, #4897	; 0x1321
 8000b10:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b12:	4b47      	ldr	r3, [pc, #284]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b18:	4b45      	ldr	r3, [pc, #276]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1e:	4b44      	ldr	r3, [pc, #272]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000b24:	4842      	ldr	r0, [pc, #264]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b26:	f005 fdd0 	bl	80066ca <HAL_TIM_Base_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000b30:	f001 fd26 	bl	8002580 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b38:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b3e:	4619      	mov	r1, r3
 8000b40:	483b      	ldr	r0, [pc, #236]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b42:	f006 fc5b 	bl	80073fc <HAL_TIM_ConfigClockSource>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM1_Init+0x98>
		Error_Handler();
 8000b4c:	f001 fd18 	bl	8002580 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000b50:	4837      	ldr	r0, [pc, #220]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b52:	f005 fe3a 	bl	80067ca <HAL_TIM_PWM_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8000b5c:	f001 fd10 	bl	8002580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b60:	2320      	movs	r3, #32
 8000b62:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000b6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b70:	4619      	mov	r1, r3
 8000b72:	482f      	ldr	r0, [pc, #188]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000b74:	f007 fb62 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0xca>
		Error_Handler();
 8000b7e:	f001 fcff 	bl	8002580 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b82:	2370      	movs	r3, #112	; 0x70
 8000b84:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 864 + 10;
 8000b86:	f240 336a 	movw	r3, #874	; 0x36a
 8000b8a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9c:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000ba2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4821      	ldr	r0, [pc, #132]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000bac:	f006 fb0e 	bl	80071cc <HAL_TIM_PWM_ConfigChannel>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0x102>
		Error_Handler();
 8000bb6:	f001 fce3 	bl	8002580 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bba:	2360      	movs	r3, #96	; 0x60
 8000bbc:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 3000;
 8000bbe:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000bc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc8:	2204      	movs	r2, #4
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4818      	ldr	r0, [pc, #96]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000bce:	f006 fafd 	bl	80071cc <HAL_TIM_PWM_ConfigChannel>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM1_Init+0x124>
		Error_Handler();
 8000bd8:	f001 fcd2 	bl	8002580 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4807      	ldr	r0, [pc, #28]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000c12:	f007 fba1 	bl	8008358 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM1_Init+0x168>
		Error_Handler();
 8000c1c:	f001 fcb0 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <MX_TIM1_Init+0x178>)
 8000c22:	f001 ffc5 	bl	8002bb0 <HAL_TIM_MspPostInit>

}
 8000c26:	bf00      	nop
 8000c28:	3768      	adds	r7, #104	; 0x68
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2002f73c 	.word	0x2002f73c
 8000c34:	40010000 	.word	0x40010000

08000c38 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000c5e:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c64:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c70:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c72:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8000c7e:	4817      	ldr	r0, [pc, #92]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c80:	f005 fef2 	bl	8006a68 <HAL_TIM_IC_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_TIM2_Init+0x56>
		Error_Handler();
 8000c8a:	f001 fc79 	bl	8002580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000c9e:	f007 facd 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0x74>
		Error_Handler();
 8000ca8:	f001 fc6a 	bl	8002580 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cac:	2300      	movs	r3, #0
 8000cae:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM2_Init+0xa4>)
 8000cc4:	f006 f9e5 	bl	8007092 <HAL_TIM_IC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0x9a>
		Error_Handler();
 8000cce:	f001 fc57 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2002f7e0 	.word	0x2002f7e0

08000ce0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b090      	sub	sp, #64	; 0x40
 8000ce4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000ce6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cf6:	f107 0320 	add.w	r3, r7, #32
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
 8000d10:	615a      	str	r2, [r3, #20]
 8000d12:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000d14:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d16:	4a2d      	ldr	r2, [pc, #180]	; (8000dcc <MX_TIM3_Init+0xec>)
 8000d18:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000d1a:	4b2b      	ldr	r3, [pc, #172]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b29      	ldr	r3, [pc, #164]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0;
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b25      	ldr	r3, [pc, #148]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000d38:	4823      	ldr	r0, [pc, #140]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d3a:	f005 fcc6 	bl	80066ca <HAL_TIM_Base_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM3_Init+0x68>
		Error_Handler();
 8000d44:	f001 fc1c 	bl	8002580 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000d48:	481f      	ldr	r0, [pc, #124]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d4a:	f005 fd3e 	bl	80067ca <HAL_TIM_PWM_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0x78>
		Error_Handler();
 8000d54:	f001 fc14 	bl	8002580 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 8000d60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d64:	4619      	mov	r1, r3
 8000d66:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d68:	f006 fc02 	bl	8007570 <HAL_TIM_SlaveConfigSynchro>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM3_Init+0x96>
		Error_Handler();
 8000d72:	f001 fc05 	bl	8002580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8000d7e:	f107 0320 	add.w	r3, r7, #32
 8000d82:	4619      	mov	r1, r3
 8000d84:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000d86:	f007 fa59 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0xb4>
		Error_Handler();
 8000d90:	f001 fbf6 	bl	8002580 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d94:	2360      	movs	r3, #96	; 0x60
 8000d96:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	4807      	ldr	r0, [pc, #28]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000dac:	f006 fa0e 	bl	80071cc <HAL_TIM_PWM_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM3_Init+0xda>
		Error_Handler();
 8000db6:	f001 fbe3 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000dba:	4803      	ldr	r0, [pc, #12]	; (8000dc8 <MX_TIM3_Init+0xe8>)
 8000dbc:	f001 fef8 	bl	8002bb0 <HAL_TIM_MspPostInit>

}
 8000dc0:	bf00      	nop
 8000dc2:	3740      	adds	r7, #64	; 0x40
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	2002f464 	.word	0x2002f464
 8000dcc:	40000400 	.word	0x40000400

08000dd0 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000de2:	463b      	mov	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
 8000df0:	615a      	str	r2, [r3, #20]
 8000df2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000df4:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000df6:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <MX_TIM4_Init+0xb0>)
 8000df8:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000dfa:	4b20      	ldr	r3, [pc, #128]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000e18:	4818      	ldr	r0, [pc, #96]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e1a:	f005 fcd6 	bl	80067ca <HAL_TIM_PWM_Init>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM4_Init+0x58>
		Error_Handler();
 8000e24:	f001 fbac 	bl	8002580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e28:	2320      	movs	r3, #32
 8000e2a:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e38:	f007 fa00 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM4_Init+0x76>
		Error_Handler();
 8000e42:	f001 fb9d 	bl	8002580 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e46:	2360      	movs	r3, #96	; 0x60
 8000e48:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4807      	ldr	r0, [pc, #28]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e5e:	f006 f9b5 	bl	80071cc <HAL_TIM_PWM_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM4_Init+0x9c>
		Error_Handler();
 8000e68:	f001 fb8a 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <MX_TIM4_Init+0xac>)
 8000e6e:	f001 fe9f 	bl	8002bb0 <HAL_TIM_MspPostInit>

}
 8000e72:	bf00      	nop
 8000e74:	3728      	adds	r7, #40	; 0x28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20004204 	.word	0x20004204
 8000e80:	40000800 	.word	0x40000800

08000e84 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ea4:	4a1d      	ldr	r2, [pc, #116]	; (8000f1c <MX_TIM5_Init+0x98>)
 8000ea6:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 2160 - 1;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eb6:	f640 026f 	movw	r2, #2159	; 0x86f
 8000eba:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebc:	4b16      	ldr	r3, [pc, #88]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000eca:	f005 fbfe 	bl	80066ca <HAL_TIM_Base_Init>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_TIM5_Init+0x54>
		Error_Handler();
 8000ed4:	f001 fb54 	bl	8002580 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000edc:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000ee6:	f006 fa89 	bl	80073fc <HAL_TIM_ConfigClockSource>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM5_Init+0x70>
		Error_Handler();
 8000ef0:	f001 fb46 	bl	8002580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_TIM5_Init+0x94>)
 8000f02:	f007 f99b 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM5_Init+0x8c>
		Error_Handler();
 8000f0c:	f001 fb38 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	3720      	adds	r7, #32
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2002f424 	.word	0x2002f424
 8000f1c:	40000c00 	.word	0x40000c00

08000f20 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8000f30:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f32:	4a15      	ldr	r2, [pc, #84]	; (8000f88 <MX_TIM6_Init+0x68>)
 8000f34:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 4898 - 1;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f44:	f241 3221 	movw	r2, #4897	; 0x1321
 8000f48:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8000f50:	480c      	ldr	r0, [pc, #48]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f52:	f005 fbba 	bl	80066ca <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM6_Init+0x40>
		Error_Handler();
 8000f5c:	f001 fb10 	bl	8002580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f60:	2320      	movs	r3, #32
 8000f62:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	; (8000f84 <MX_TIM6_Init+0x64>)
 8000f6e:	f007 f965 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM6_Init+0x5c>
		Error_Handler();
 8000f78:	f001 fb02 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2002f6f8 	.word	0x2002f6f8
 8000f88:	40001000 	.word	0x40001000

08000f8c <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09e      	sub	sp, #120	; 0x78
 8000f90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000fa0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000fb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000fbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	222c      	movs	r2, #44	; 0x2c
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f008 fa70 	bl	80094bc <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000fdc:	4b4f      	ldr	r3, [pc, #316]	; (800111c <MX_TIM8_Init+0x190>)
 8000fde:	4a50      	ldr	r2, [pc, #320]	; (8001120 <MX_TIM8_Init+0x194>)
 8000fe0:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8000fe2:	4b4e      	ldr	r3, [pc, #312]	; (800111c <MX_TIM8_Init+0x190>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b4c      	ldr	r3, [pc, #304]	; (800111c <MX_TIM8_Init+0x190>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 108 - 1;
 8000fee:	4b4b      	ldr	r3, [pc, #300]	; (800111c <MX_TIM8_Init+0x190>)
 8000ff0:	226b      	movs	r2, #107	; 0x6b
 8000ff2:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff4:	4b49      	ldr	r3, [pc, #292]	; (800111c <MX_TIM8_Init+0x190>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 24;
 8000ffa:	4b48      	ldr	r3, [pc, #288]	; (800111c <MX_TIM8_Init+0x190>)
 8000ffc:	2218      	movs	r2, #24
 8000ffe:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b46      	ldr	r3, [pc, #280]	; (800111c <MX_TIM8_Init+0x190>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8001006:	4845      	ldr	r0, [pc, #276]	; (800111c <MX_TIM8_Init+0x190>)
 8001008:	f005 fb5f 	bl	80066ca <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM8_Init+0x8a>
		Error_Handler();
 8001012:	f001 fab5 	bl	8002580 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 800101c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001020:	4619      	mov	r1, r3
 8001022:	483e      	ldr	r0, [pc, #248]	; (800111c <MX_TIM8_Init+0x190>)
 8001024:	f006 f9ea 	bl	80073fc <HAL_TIM_ConfigClockSource>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM8_Init+0xa6>
		Error_Handler();
 800102e:	f001 faa7 	bl	8002580 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001032:	483a      	ldr	r0, [pc, #232]	; (800111c <MX_TIM8_Init+0x190>)
 8001034:	f005 fbc9 	bl	80067ca <HAL_TIM_PWM_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM8_Init+0xb6>
		Error_Handler();
 800103e:	f001 fa9f 	bl	8002580 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK) {
 8001042:	2108      	movs	r1, #8
 8001044:	4835      	ldr	r0, [pc, #212]	; (800111c <MX_TIM8_Init+0x190>)
 8001046:	f005 febf 	bl	8006dc8 <HAL_TIM_OnePulse_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM8_Init+0xc8>
		Error_Handler();
 8001050:	f001 fa96 	bl	8002580 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001054:	2306      	movs	r3, #6
 8001056:	657b      	str	r3, [r7, #84]	; 0x54
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001058:	2300      	movs	r3, #0
 800105a:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK) {
 800105c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001060:	4619      	mov	r1, r3
 8001062:	482e      	ldr	r0, [pc, #184]	; (800111c <MX_TIM8_Init+0x190>)
 8001064:	f006 fa84 	bl	8007570 <HAL_TIM_SlaveConfigSynchro>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM8_Init+0xe6>
		Error_Handler();
 800106e:	f001 fa87 	bl	8002580 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	64bb      	str	r3, [r7, #72]	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 800107e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001082:	4619      	mov	r1, r3
 8001084:	4825      	ldr	r0, [pc, #148]	; (800111c <MX_TIM8_Init+0x190>)
 8001086:	f007 f8d9 	bl	800823c <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM8_Init+0x108>
		Error_Handler();
 8001090:	f001 fa76 	bl	8002580 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001094:	2370      	movs	r3, #112	; 0x70
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 54;
 8001098:	2336      	movs	r3, #54	; 0x36
 800109a:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109c:	2300      	movs	r3, #0
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80010b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	4818      	ldr	r0, [pc, #96]	; (800111c <MX_TIM8_Init+0x190>)
 80010ba:	f006 f887 	bl	80071cc <HAL_TIM_PWM_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM8_Init+0x13c>
		Error_Handler();
 80010c4:	f001 fa5c 	bl	8002580 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e0:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ee:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Filter = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 80010f8:	463b      	mov	r3, r7
 80010fa:	4619      	mov	r1, r3
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <MX_TIM8_Init+0x190>)
 80010fe:	f007 f92b 	bl	8008358 <HAL_TIMEx_ConfigBreakDeadTime>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM8_Init+0x180>
		Error_Handler();
 8001108:	f001 fa3a 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <MX_TIM8_Init+0x190>)
 800110e:	f001 fd4f 	bl	8002bb0 <HAL_TIM_MspPostInit>

}
 8001112:	bf00      	nop
 8001114:	3778      	adds	r7, #120	; 0x78
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200041c4 	.word	0x200041c4
 8001120:	40010400 	.word	0x40010400

08001124 <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_UART5_Init+0x58>)
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <MX_UART5_Init+0x5c>)
 800112c:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 800112e:	4b13      	ldr	r3, [pc, #76]	; (800117c <MX_UART5_Init+0x58>)
 8001130:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001134:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_UART5_Init+0x58>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_UART5_Init+0x58>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_UART5_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_UART5_Init+0x58>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_UART5_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_UART5_Init+0x58>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_UART5_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_UART5_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_UART5_Init+0x58>)
 8001168:	f007 f992 	bl	8008490 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_UART5_Init+0x52>
		Error_Handler();
 8001172:	f001 fa05 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2002f4b8 	.word	0x2002f4b8
 8001180:	40005000 	.word	0x40005000

08001184 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_UART7_Init+0x58>)
 800118a:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <MX_UART7_Init+0x5c>)
 800118c:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_UART7_Init+0x58>)
 8001190:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001194:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_UART7_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_UART7_Init+0x58>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <MX_UART7_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <MX_UART7_Init+0x58>)
 80011aa:	220c      	movs	r2, #12
 80011ac:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <MX_UART7_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <MX_UART7_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <MX_UART7_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <MX_UART7_Init+0x58>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 80011c6:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_UART7_Init+0x58>)
 80011c8:	f007 f962 	bl	8008490 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_UART7_Init+0x52>
		Error_Handler();
 80011d2:	f001 f9d5 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20004144 	.word	0x20004144
 80011e0:	40007800 	.word	0x40007800

080011e4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_USART1_UART_Init+0x58>)
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <MX_USART1_UART_Init+0x5c>)
 80011ec:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_USART1_UART_Init+0x58>)
 80011f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_USART1_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_USART1_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_USART1_UART_Init+0x58>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_USART1_UART_Init+0x58>)
 800120a:	220c      	movs	r2, #12
 800120c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_USART1_UART_Init+0x58>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_USART1_UART_Init+0x58>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_USART1_UART_Init+0x58>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_USART1_UART_Init+0x58>)
 8001222:	2200      	movs	r2, #0
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_USART1_UART_Init+0x58>)
 8001228:	f007 f932 	bl	8008490 <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001232:	f001 f9a5 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2002f580 	.word	0x2002f580
 8001240:	40011000 	.word	0x40011000

08001244 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USART2_UART_Init+0x58>)
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <MX_USART2_UART_Init+0x5c>)
 800124c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_USART2_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART2_UART_Init+0x58>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART2_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001288:	f007 f902 	bl	8008490 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001292:	f001 f975 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2002f820 	.word	0x2002f820
 80012a0:	40004400 	.word	0x40004400

080012a4 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012aa:	4a14      	ldr	r2, [pc, #80]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012ac:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 2000000;
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012b0:	4a13      	ldr	r2, [pc, #76]	; (8001300 <MX_USART3_UART_Init+0x5c>)
 80012b2:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012b4:	4b10      	ldr	r3, [pc, #64]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012c8:	220c      	movs	r2, #12
 80012ca:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012cc:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012d8:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <MX_USART3_UART_Init+0x54>)
 80012e6:	f007 f8d3 	bl	8008490 <HAL_UART_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_USART3_UART_Init+0x50>
		Error_Handler();
 80012f0:	f001 f946 	bl	8002580 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20004244 	.word	0x20004244
 80012fc:	40004800 	.word	0x40004800
 8001300:	001e8480 	.word	0x001e8480

08001304 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800130a:	4b1a      	ldr	r3, [pc, #104]	; (8001374 <MX_DMA_Init+0x70>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a19      	ldr	r2, [pc, #100]	; (8001374 <MX_DMA_Init+0x70>)
 8001310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <MX_DMA_Init+0x70>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001322:	4b14      	ldr	r3, [pc, #80]	; (8001374 <MX_DMA_Init+0x70>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a13      	ldr	r2, [pc, #76]	; (8001374 <MX_DMA_Init+0x70>)
 8001328:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b11      	ldr	r3, [pc, #68]	; (8001374 <MX_DMA_Init+0x70>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2010      	movs	r0, #16
 8001340:	f002 fc63 	bl	8003c0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001344:	2010      	movs	r0, #16
 8001346:	f002 fc7c 	bl	8003c42 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	2038      	movs	r0, #56	; 0x38
 8001350:	f002 fc5b 	bl	8003c0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001354:	2038      	movs	r0, #56	; 0x38
 8001356:	f002 fc74 	bl	8003c42 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2100      	movs	r1, #0
 800135e:	203c      	movs	r0, #60	; 0x3c
 8001360:	f002 fc53 	bl	8003c0a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001364:	203c      	movs	r0, #60	; 0x3c
 8001366:	f002 fc6c 	bl	8003c42 <HAL_NVIC_EnableIRQ>

}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800

08001378 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800138e:	4b40      	ldr	r3, [pc, #256]	; (8001490 <MX_GPIO_Init+0x118>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a3f      	ldr	r2, [pc, #252]	; (8001490 <MX_GPIO_Init+0x118>)
 8001394:	f043 0310 	orr.w	r3, r3, #16
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <MX_GPIO_Init+0x118>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0310 	and.w	r3, r3, #16
 80013a2:	61bb      	str	r3, [r7, #24]
 80013a4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80013a6:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <MX_GPIO_Init+0x118>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a39      	ldr	r2, [pc, #228]	; (8001490 <MX_GPIO_Init+0x118>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b37      	ldr	r3, [pc, #220]	; (8001490 <MX_GPIO_Init+0x118>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80013be:	4b34      	ldr	r3, [pc, #208]	; (8001490 <MX_GPIO_Init+0x118>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a33      	ldr	r2, [pc, #204]	; (8001490 <MX_GPIO_Init+0x118>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <MX_GPIO_Init+0x118>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	613b      	str	r3, [r7, #16]
 80013d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <MX_GPIO_Init+0x118>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a2d      	ldr	r2, [pc, #180]	; (8001490 <MX_GPIO_Init+0x118>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b2b      	ldr	r3, [pc, #172]	; (8001490 <MX_GPIO_Init+0x118>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b28      	ldr	r3, [pc, #160]	; (8001490 <MX_GPIO_Init+0x118>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a27      	ldr	r2, [pc, #156]	; (8001490 <MX_GPIO_Init+0x118>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b25      	ldr	r3, [pc, #148]	; (8001490 <MX_GPIO_Init+0x118>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60bb      	str	r3, [r7, #8]
 8001404:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001406:	4b22      	ldr	r3, [pc, #136]	; (8001490 <MX_GPIO_Init+0x118>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a21      	ldr	r2, [pc, #132]	; (8001490 <MX_GPIO_Init+0x118>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_GPIO_Init+0x118>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2108      	movs	r1, #8
 8001422:	481c      	ldr	r0, [pc, #112]	; (8001494 <MX_GPIO_Init+0x11c>)
 8001424:	f003 f96a 	bl	80046fc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001428:	2200      	movs	r2, #0
 800142a:	f64e 717f 	movw	r1, #61311	; 0xef7f
 800142e:	481a      	ldr	r0, [pc, #104]	; (8001498 <MX_GPIO_Init+0x120>)
 8001430:	f003 f964 	bl	80046fc <HAL_GPIO_WritePin>
	LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : SN6505_EN_Pin */
	GPIO_InitStruct.Pin = SN6505_EN_Pin;
 8001434:	2308      	movs	r3, #8
 8001436:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	4812      	ldr	r0, [pc, #72]	; (8001494 <MX_GPIO_Init+0x11c>)
 800144c:	f002 ffac 	bl	80043a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin
	 LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin
	 S1_Pin S2_Pin S3_Pin S4_Pin
	 S5_Pin S6_Pin */
	GPIO_InitStruct.Pin = LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin;
 8001450:	f64e 737f 	movw	r3, #61311	; 0xef7f
 8001454:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4619      	mov	r1, r3
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <MX_GPIO_Init+0x120>)
 800146a:	f002 ff9d 	bl	80043a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin;
 800146e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001472:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800147c:	f107 031c 	add.w	r3, r7, #28
 8001480:	4619      	mov	r1, r3
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_GPIO_Init+0x11c>)
 8001484:	f002 ff90 	bl	80043a8 <HAL_GPIO_Init>

}
 8001488:	bf00      	nop
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	40020800 	.word	0x40020800
 8001498:	40020c00 	.word	0x40020c00

0800149c <runMeasurementMethod>:

/* USER CODE BEGIN 4 */

void runMeasurementMethod() {
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

	//if measurement method is set, run the polarization sequence
	if ((state.remainingMeasurements > 0) || (state.remainingMeasurements == -1) && ((state.extAdcActiveState == 1) || (state.intAdcActiveState == 1) || (state.compActiveState == 1))) {
 80014a0:	4b16      	ldr	r3, [pc, #88]	; (80014fc <runMeasurementMethod+0x60>)
 80014a2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	dc11      	bgt.n	80014ce <runMeasurementMethod+0x32>
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <runMeasurementMethod+0x60>)
 80014ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d11f      	bne.n	80014f6 <runMeasurementMethod+0x5a>
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <runMeasurementMethod+0x60>)
 80014b8:	78db      	ldrb	r3, [r3, #3]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d007      	beq.n	80014ce <runMeasurementMethod+0x32>
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <runMeasurementMethod+0x60>)
 80014c0:	791b      	ldrb	r3, [r3, #4]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d003      	beq.n	80014ce <runMeasurementMethod+0x32>
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <runMeasurementMethod+0x60>)
 80014c8:	795b      	ldrb	r3, [r3, #5]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d113      	bne.n	80014f6 <runMeasurementMethod+0x5a>
		runPolarizationSequence();
 80014ce:	f000 f817 	bl	8001500 <runPolarizationSequence>

		if (state.intAdcActiveState == 1) {
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <runMeasurementMethod+0x60>)
 80014d4:	791b      	ldrb	r3, [r3, #4]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <runMeasurementMethod+0x42>
			measureWithIntADC();
 80014da:	f000 f9e5 	bl	80018a8 <measureWithIntADC>
		}
		if (state.extAdcActiveState == 1) {
 80014de:	4b07      	ldr	r3, [pc, #28]	; (80014fc <runMeasurementMethod+0x60>)
 80014e0:	78db      	ldrb	r3, [r3, #3]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d101      	bne.n	80014ea <runMeasurementMethod+0x4e>
			measureWithExtADC();
 80014e6:	f000 f9af 	bl	8001848 <measureWithExtADC>
		}
		if (state.compActiveState == 1) {
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <runMeasurementMethod+0x60>)
 80014ec:	795b      	ldrb	r3, [r3, #5]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <runMeasurementMethod+0x5a>
			measureWithComp();
 80014f2:	f000 f9fd 	bl	80018f0 <measureWithComp>
		}
	}
}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	2002f4a4 	.word	0x2002f4a4

08001500 <runPolarizationSequence>:

void runPolarizationSequence() {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 8001504:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <runPolarizationSequence+0x1a4>)
 8001506:	2200      	movs	r2, #0
 8001508:	745a      	strb	r2, [r3, #17]
	// visualise
	set_LED1(1, 1, 1);
 800150a:	2201      	movs	r2, #1
 800150c:	2101      	movs	r1, #1
 800150e:	2001      	movs	r0, #1
 8001510:	f000 f8ce 	bl	80016b0 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	2102      	movs	r1, #2
 8001518:	4863      	ldr	r0, [pc, #396]	; (80016a8 <runPolarizationSequence+0x1a8>)
 800151a:	f003 f8ef 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2104      	movs	r1, #4
 8001522:	4861      	ldr	r0, [pc, #388]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001524:	f003 f8ea 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001528:	2201      	movs	r2, #1
 800152a:	2108      	movs	r1, #8
 800152c:	485e      	ldr	r0, [pc, #376]	; (80016a8 <runPolarizationSequence+0x1a8>)
 800152e:	f003 f8e5 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001532:	2200      	movs	r2, #0
 8001534:	2110      	movs	r1, #16
 8001536:	485c      	ldr	r0, [pc, #368]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001538:	f003 f8e0 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2120      	movs	r1, #32
 8001540:	4859      	ldr	r0, [pc, #356]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001542:	f003 f8db 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001546:	2201      	movs	r2, #1
 8001548:	2140      	movs	r1, #64	; 0x40
 800154a:	4857      	ldr	r0, [pc, #348]	; (80016a8 <runPolarizationSequence+0x1a8>)
 800154c:	f003 f8d6 	bl	80046fc <HAL_GPIO_WritePin>
	delay_ms(5);
 8001550:	2005      	movs	r0, #5
 8001552:	f000 f961 	bl	8001818 <delay_ms>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001556:	2201      	movs	r2, #1
 8001558:	2102      	movs	r1, #2
 800155a:	4853      	ldr	r0, [pc, #332]	; (80016a8 <runPolarizationSequence+0x1a8>)
 800155c:	f003 f8ce 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2104      	movs	r1, #4
 8001564:	4850      	ldr	r0, [pc, #320]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001566:	f003 f8c9 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800156a:	2201      	movs	r2, #1
 800156c:	2108      	movs	r1, #8
 800156e:	484e      	ldr	r0, [pc, #312]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001570:	f003 f8c4 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 8001574:	2201      	movs	r2, #1
 8001576:	2110      	movs	r1, #16
 8001578:	484b      	ldr	r0, [pc, #300]	; (80016a8 <runPolarizationSequence+0x1a8>)
 800157a:	f003 f8bf 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	2120      	movs	r1, #32
 8001582:	4849      	ldr	r0, [pc, #292]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001584:	f003 f8ba 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	2140      	movs	r1, #64	; 0x40
 800158c:	4846      	ldr	r0, [pc, #280]	; (80016a8 <runPolarizationSequence+0x1a8>)
 800158e:	f003 f8b5 	bl	80046fc <HAL_GPIO_WritePin>
	delay_ms(polarizationTime);
 8001592:	4b46      	ldr	r3, [pc, #280]	; (80016ac <runPolarizationSequence+0x1ac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f93e 	bl	8001818 <delay_ms>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800159c:	2200      	movs	r2, #0
 800159e:	2102      	movs	r1, #2
 80015a0:	4841      	ldr	r0, [pc, #260]	; (80016a8 <runPolarizationSequence+0x1a8>)
 80015a2:	f003 f8ab 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2104      	movs	r1, #4
 80015aa:	483f      	ldr	r0, [pc, #252]	; (80016a8 <runPolarizationSequence+0x1a8>)
 80015ac:	f003 f8a6 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2108      	movs	r1, #8
 80015b4:	483c      	ldr	r0, [pc, #240]	; (80016a8 <runPolarizationSequence+0x1a8>)
 80015b6:	f003 f8a1 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2110      	movs	r1, #16
 80015be:	483a      	ldr	r0, [pc, #232]	; (80016a8 <runPolarizationSequence+0x1a8>)
 80015c0:	f003 f89c 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2120      	movs	r1, #32
 80015c8:	4837      	ldr	r0, [pc, #220]	; (80016a8 <runPolarizationSequence+0x1a8>)
 80015ca:	f003 f897 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80015ce:	2201      	movs	r2, #1
 80015d0:	2140      	movs	r1, #64	; 0x40
 80015d2:	4835      	ldr	r0, [pc, #212]	; (80016a8 <runPolarizationSequence+0x1a8>)
 80015d4:	f003 f892 	bl	80046fc <HAL_GPIO_WritePin>
	delay_us(200);
 80015d8:	20c8      	movs	r0, #200	; 0xc8
 80015da:	f000 f909 	bl	80017f0 <delay_us>

	//run sequnece T5 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2102      	movs	r1, #2
 80015e2:	4831      	ldr	r0, [pc, #196]	; (80016a8 <runPolarizationSequence+0x1a8>)
 80015e4:	f003 f88a 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2104      	movs	r1, #4
 80015ec:	482e      	ldr	r0, [pc, #184]	; (80016a8 <runPolarizationSequence+0x1a8>)
 80015ee:	f003 f885 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2108      	movs	r1, #8
 80015f6:	482c      	ldr	r0, [pc, #176]	; (80016a8 <runPolarizationSequence+0x1a8>)
 80015f8:	f003 f880 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2110      	movs	r1, #16
 8001600:	4829      	ldr	r0, [pc, #164]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001602:	f003 f87b 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001606:	2201      	movs	r2, #1
 8001608:	2120      	movs	r1, #32
 800160a:	4827      	ldr	r0, [pc, #156]	; (80016a8 <runPolarizationSequence+0x1a8>)
 800160c:	f003 f876 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001610:	2201      	movs	r2, #1
 8001612:	2140      	movs	r1, #64	; 0x40
 8001614:	4824      	ldr	r0, [pc, #144]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001616:	f003 f871 	bl	80046fc <HAL_GPIO_WritePin>
	delay_ms(10);
 800161a:	200a      	movs	r0, #10
 800161c:	f000 f8fc 	bl	8001818 <delay_ms>

	//run sequnece T6 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001620:	2200      	movs	r2, #0
 8001622:	2102      	movs	r1, #2
 8001624:	4820      	ldr	r0, [pc, #128]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001626:	f003 f869 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2104      	movs	r1, #4
 800162e:	481e      	ldr	r0, [pc, #120]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001630:	f003 f864 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	2108      	movs	r1, #8
 8001638:	481b      	ldr	r0, [pc, #108]	; (80016a8 <runPolarizationSequence+0x1a8>)
 800163a:	f003 f85f 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2110      	movs	r1, #16
 8001642:	4819      	ldr	r0, [pc, #100]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001644:	f003 f85a 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001648:	2201      	movs	r2, #1
 800164a:	2120      	movs	r1, #32
 800164c:	4816      	ldr	r0, [pc, #88]	; (80016a8 <runPolarizationSequence+0x1a8>)
 800164e:	f003 f855 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2140      	movs	r1, #64	; 0x40
 8001656:	4814      	ldr	r0, [pc, #80]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001658:	f003 f850 	bl	80046fc <HAL_GPIO_WritePin>
	delay_ms(5);
 800165c:	2005      	movs	r0, #5
 800165e:	f000 f8db 	bl	8001818 <delay_ms>
	//run sequnece T7 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	2102      	movs	r1, #2
 8001666:	4810      	ldr	r0, [pc, #64]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001668:	f003 f848 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	2104      	movs	r1, #4
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001672:	f003 f843 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2108      	movs	r1, #8
 800167a:	480b      	ldr	r0, [pc, #44]	; (80016a8 <runPolarizationSequence+0x1a8>)
 800167c:	f003 f83e 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2110      	movs	r1, #16
 8001684:	4808      	ldr	r0, [pc, #32]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001686:	f003 f839 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 800168a:	2201      	movs	r2, #1
 800168c:	2120      	movs	r1, #32
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <runPolarizationSequence+0x1a8>)
 8001690:	f003 f834 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2140      	movs	r1, #64	; 0x40
 8001698:	4803      	ldr	r0, [pc, #12]	; (80016a8 <runPolarizationSequence+0x1a8>)
 800169a:	f003 f82f 	bl	80046fc <HAL_GPIO_WritePin>

}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2002f4a4 	.word	0x2002f4a4
 80016a8:	40020c00 	.word	0x40020c00
 80016ac:	20000004 	.word	0x20000004

080016b0 <set_LED1>:

void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	460b      	mov	r3, r1
 80016bc:	71bb      	strb	r3, [r7, #6]
 80016be:	4613      	mov	r3, r2
 80016c0:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, G);
 80016c2:	79bb      	ldrb	r3, [r7, #6]
 80016c4:	461a      	mov	r2, r3
 80016c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ca:	480a      	ldr	r0, [pc, #40]	; (80016f4 <set_LED1+0x44>)
 80016cc:	f003 f816 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, B);
 80016d0:	797b      	ldrb	r3, [r7, #5]
 80016d2:	461a      	mov	r2, r3
 80016d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016d8:	4806      	ldr	r0, [pc, #24]	; (80016f4 <set_LED1+0x44>)
 80016da:	f003 f80f 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, R);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	461a      	mov	r2, r3
 80016e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e6:	4803      	ldr	r0, [pc, #12]	; (80016f4 <set_LED1+0x44>)
 80016e8:	f003 f808 	bl	80046fc <HAL_GPIO_WritePin>
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40020c00 	.word	0x40020c00

080016f8 <set_LED2>:
void set_LED2(uint8_t val) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val);
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	461a      	mov	r2, r3
 8001706:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800170a:	4803      	ldr	r0, [pc, #12]	; (8001718 <set_LED2+0x20>)
 800170c:	f002 fff6 	bl	80046fc <HAL_GPIO_WritePin>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40020c00 	.word	0x40020c00

0800171c <set_LED3>:

void set_LED3(uint8_t val) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, val);
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	461a      	mov	r2, r3
 800172a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800172e:	4803      	ldr	r0, [pc, #12]	; (800173c <set_LED3+0x20>)
 8001730:	f002 ffe4 	bl	80046fc <HAL_GPIO_WritePin>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020c00 	.word	0x40020c00

08001740 <set_LED4>:

void set_LED4(uint8_t val) {
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, val);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	461a      	mov	r2, r3
 800174e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001752:	4803      	ldr	r0, [pc, #12]	; (8001760 <set_LED4+0x20>)
 8001754:	f002 ffd2 	bl	80046fc <HAL_GPIO_WritePin>
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40020c00 	.word	0x40020c00

08001764 <switchingCircuitIdle>:

void switchingCircuitIdle() {
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 8001768:	2200      	movs	r2, #0
 800176a:	2101      	movs	r1, #1
 800176c:	4811      	ldr	r0, [pc, #68]	; (80017b4 <switchingCircuitIdle+0x50>)
 800176e:	f002 ffc5 	bl	80046fc <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2102      	movs	r1, #2
 8001776:	480f      	ldr	r0, [pc, #60]	; (80017b4 <switchingCircuitIdle+0x50>)
 8001778:	f002 ffc0 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2104      	movs	r1, #4
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <switchingCircuitIdle+0x50>)
 8001782:	f002 ffbb 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001786:	2201      	movs	r2, #1
 8001788:	2108      	movs	r1, #8
 800178a:	480a      	ldr	r0, [pc, #40]	; (80017b4 <switchingCircuitIdle+0x50>)
 800178c:	f002 ffb6 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2110      	movs	r1, #16
 8001794:	4807      	ldr	r0, [pc, #28]	; (80017b4 <switchingCircuitIdle+0x50>)
 8001796:	f002 ffb1 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2120      	movs	r1, #32
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <switchingCircuitIdle+0x50>)
 80017a0:	f002 ffac 	bl	80046fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2140      	movs	r1, #64	; 0x40
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <switchingCircuitIdle+0x50>)
 80017aa:	f002 ffa7 	bl	80046fc <HAL_GPIO_WritePin>
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40020c00 	.word	0x40020c00

080017b8 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a08      	ldr	r2, [pc, #32]	; (80017e8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d108      	bne.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x24>
		if (timeIndex > 0) {
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d004      	beq.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -= 10;
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	3b0a      	subs	r3, #10
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <HAL_TIM_PeriodElapsedCallback+0x34>)
 80017da:	6013      	str	r3, [r2, #0]
		}
	}
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40000c00 	.word	0x40000c00
 80017ec:	20000204 	.word	0x20000204

080017f0 <delay_us>:

void delay_us(uint32_t delay_us) {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <delay_us+0x24>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 80017fe:	bf00      	nop
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <delay_us+0x24>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1fb      	bne.n	8001800 <delay_us+0x10>
		;
}
 8001808:	bf00      	nop
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	20000204 	.word	0x20000204

08001818 <delay_ms>:

void delay_ms(uint32_t delay_us) {
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us * 1000;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	4a06      	ldr	r2, [pc, #24]	; (8001844 <delay_ms+0x2c>)
 800182c:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 800182e:	bf00      	nop
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <delay_ms+0x2c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1fb      	bne.n	8001830 <delay_ms+0x18>
		;
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	20000204 	.word	0x20000204

08001848 <measureWithExtADC>:

void measureWithExtADC() {
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2101      	movs	r1, #1
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff ff2d 	bl	80016b0 <set_LED1>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_1.uint8, samplesPerPeriod);
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <measureWithExtADC+0x48>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	b29b      	uxth	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	490d      	ldr	r1, [pc, #52]	; (8001894 <measureWithExtADC+0x4c>)
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <measureWithExtADC+0x50>)
 8001862:	f004 fa25 	bl	8005cb0 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 8001866:	2100      	movs	r1, #0
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <measureWithExtADC+0x54>)
 800186a:	f004 ffd9 	bl	8006820 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 800186e:	2104      	movs	r1, #4
 8001870:	480a      	ldr	r0, [pc, #40]	; (800189c <measureWithExtADC+0x54>)
 8001872:	f004 ffd5 	bl	8006820 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 8001876:	2100      	movs	r1, #0
 8001878:	4809      	ldr	r0, [pc, #36]	; (80018a0 <measureWithExtADC+0x58>)
 800187a:	f004 ffd1 	bl	8006820 <HAL_TIM_PWM_Start_IT>
	set_LED2(1);
 800187e:	2001      	movs	r0, #1
 8001880:	f7ff ff3a 	bl	80016f8 <set_LED2>
	state.extAdcMeasuring = 1;
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <measureWithExtADC+0x5c>)
 8001886:	2201      	movs	r2, #1
 8001888:	719a      	strb	r2, [r3, #6]
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000000 	.word	0x20000000
 8001894:	20045188 	.word	0x20045188
 8001898:	2002f77c 	.word	0x2002f77c
 800189c:	2002f73c 	.word	0x2002f73c
 80018a0:	200041c4 	.word	0x200041c4
 80018a4:	2002f4a4 	.word	0x2002f4a4

080018a8 <measureWithIntADC>:

void measureWithIntADC() {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2101      	movs	r1, #1
 80018b0:	2000      	movs	r0, #0
 80018b2:	f7ff fefd 	bl	80016b0 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_1.uint16, samplesPerPeriod);
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <measureWithIntADC+0x34>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	461a      	mov	r2, r3
 80018bc:	4908      	ldr	r1, [pc, #32]	; (80018e0 <measureWithIntADC+0x38>)
 80018be:	4809      	ldr	r0, [pc, #36]	; (80018e4 <measureWithIntADC+0x3c>)
 80018c0:	f001 fd00 	bl	80032c4 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 80018c4:	4808      	ldr	r0, [pc, #32]	; (80018e8 <measureWithIntADC+0x40>)
 80018c6:	f004 ff2b 	bl	8006720 <HAL_TIM_Base_Start_IT>
	set_LED3(1);
 80018ca:	2001      	movs	r0, #1
 80018cc:	f7ff ff26 	bl	800171c <set_LED3>
	state.intAdcMeasuring = 1;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <measureWithIntADC+0x44>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	71da      	strb	r2, [r3, #7]
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000000 	.word	0x20000000
 80018e0:	2002f8a0 	.word	0x2002f8a0
 80018e4:	2002f538 	.word	0x2002f538
 80018e8:	2002f6f8 	.word	0x2002f6f8
 80018ec:	2002f4a4 	.word	0x2002f4a4

080018f0 <measureWithComp>:

void measureWithComp() {
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2101      	movs	r1, #1
 80018f8:	2000      	movs	r0, #0
 80018fa:	f7ff fed9 	bl	80016b0 <set_LED1>
	// run the timer 4001 - 2 seconds for 2 kHz
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, buffer_comp, 4001);
 80018fe:	f640 73a1 	movw	r3, #4001	; 0xfa1
 8001902:	4a06      	ldr	r2, [pc, #24]	; (800191c <measureWithComp+0x2c>)
 8001904:	2100      	movs	r1, #0
 8001906:	4806      	ldr	r0, [pc, #24]	; (8001920 <measureWithComp+0x30>)
 8001908:	f005 f8da 	bl	8006ac0 <HAL_TIM_IC_Start_DMA>
	set_LED4(1);
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff ff17 	bl	8001740 <set_LED4>
	state.compMeasuring = 1;
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <measureWithComp+0x34>)
 8001914:	2201      	movs	r2, #1
 8001916:	721a      	strb	r2, [r3, #8]
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000214 	.word	0x20000214
 8001920:	2002f7e0 	.word	0x2002f7e0
 8001924:	2002f4a4 	.word	0x2002f4a4

08001928 <measurementWithExtAdcDone>:

void measurementWithExtAdcDone() {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0

	filledBuffersExtADC++;
 800192c:	4b29      	ldr	r3, [pc, #164]	; (80019d4 <measurementWithExtAdcDone+0xac>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b27      	ldr	r3, [pc, #156]	; (80019d4 <measurementWithExtAdcDone+0xac>)
 8001936:	701a      	strb	r2, [r3, #0]

	// turn off timers
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001938:	2100      	movs	r1, #0
 800193a:	4827      	ldr	r0, [pc, #156]	; (80019d8 <measurementWithExtAdcDone+0xb0>)
 800193c:	f004 fffa 	bl	8006934 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001940:	2104      	movs	r1, #4
 8001942:	4825      	ldr	r0, [pc, #148]	; (80019d8 <measurementWithExtAdcDone+0xb0>)
 8001944:	f004 fff6 	bl	8006934 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8001948:	2100      	movs	r1, #0
 800194a:	4824      	ldr	r0, [pc, #144]	; (80019dc <measurementWithExtAdcDone+0xb4>)
 800194c:	f004 fff2 	bl	8006934 <HAL_TIM_PWM_Stop_IT>

	//stop DMA
	SPI1->CR2 &= ~SPI_CR2_RXDMAEN;
 8001950:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <measurementWithExtAdcDone+0xb8>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <measurementWithExtAdcDone+0xb8>)
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	6053      	str	r3, [r2, #4]

	//first buffer is filled
	if (filledBuffersExtADC == 1) {
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <measurementWithExtAdcDone+0xac>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d114      	bne.n	800198e <measurementWithExtAdcDone+0x66>
		//start DMA again with second buffer
		HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_2.uint8, samplesPerPeriod);
 8001964:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <measurementWithExtAdcDone+0xbc>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	b29b      	uxth	r3, r3
 800196a:	461a      	mov	r2, r3
 800196c:	491e      	ldr	r1, [pc, #120]	; (80019e8 <measurementWithExtAdcDone+0xc0>)
 800196e:	481f      	ldr	r0, [pc, #124]	; (80019ec <measurementWithExtAdcDone+0xc4>)
 8001970:	f004 f99e 	bl	8005cb0 <HAL_SPI_Receive_DMA>
		// turn on timers
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001974:	2100      	movs	r1, #0
 8001976:	4818      	ldr	r0, [pc, #96]	; (80019d8 <measurementWithExtAdcDone+0xb0>)
 8001978:	f004 ff52 	bl	8006820 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 800197c:	2104      	movs	r1, #4
 800197e:	4816      	ldr	r0, [pc, #88]	; (80019d8 <measurementWithExtAdcDone+0xb0>)
 8001980:	f004 ff4e 	bl	8006820 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8001984:	2100      	movs	r1, #0
 8001986:	4815      	ldr	r0, [pc, #84]	; (80019dc <measurementWithExtAdcDone+0xb4>)
 8001988:	f004 ff4a 	bl	8006820 <HAL_TIM_PWM_Start_IT>
			state.extAdcSetState = 0;
		} else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 800198c:	e01f      	b.n	80019ce <measurementWithExtAdcDone+0xa6>
	else if (filledBuffersExtADC == 2) {
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <measurementWithExtAdcDone+0xac>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d11b      	bne.n	80019ce <measurementWithExtAdcDone+0xa6>
		set_LED2(0);
 8001996:	2000      	movs	r0, #0
 8001998:	f7ff feae 	bl	80016f8 <set_LED2>
		state.extAdcReadyToSend = 1;
 800199c:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <measurementWithExtAdcDone+0xc8>)
 800199e:	2201      	movs	r2, #1
 80019a0:	701a      	strb	r2, [r3, #0]
		state.extAdcMeasuring = 0;
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <measurementWithExtAdcDone+0xc8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	719a      	strb	r2, [r3, #6]
		filledBuffersExtADC = 0;
 80019a8:	4b0a      	ldr	r3, [pc, #40]	; (80019d4 <measurementWithExtAdcDone+0xac>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
		goToIdleAfterMeasurement();
 80019ae:	f000 f899 	bl	8001ae4 <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <measurementWithExtAdcDone+0xc8>)
 80019b4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d106      	bne.n	80019ca <measurementWithExtAdcDone+0xa2>
			state.extAdcActiveState = 0;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <measurementWithExtAdcDone+0xc8>)
 80019be:	2200      	movs	r2, #0
 80019c0:	70da      	strb	r2, [r3, #3]
			state.extAdcSetState = 0;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <measurementWithExtAdcDone+0xc8>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	725a      	strb	r2, [r3, #9]
}
 80019c8:	e001      	b.n	80019ce <measurementWithExtAdcDone+0xa6>
			prepareForPolarizationPhaseIfPossible();
 80019ca:	f000 f8af 	bl	8001b2c <prepareForPolarizationPhaseIfPossible>
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000200 	.word	0x20000200
 80019d8:	2002f73c 	.word	0x2002f73c
 80019dc:	200041c4 	.word	0x200041c4
 80019e0:	40013000 	.word	0x40013000
 80019e4:	20000000 	.word	0x20000000
 80019e8:	20019b9c 	.word	0x20019b9c
 80019ec:	2002f77c 	.word	0x2002f77c
 80019f0:	2002f4a4 	.word	0x2002f4a4

080019f4 <measurementWithIntAdcDone>:

void measurementWithIntAdcDone() {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
	//stop the ADC when in interrupt
	//if function HAL_ADC_Stop_DMA(&hadc1) would be called, it wouldn't be possible to Start DMA again.
	ADC1->CR2 &= ~ADC_CR2_DMA;
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <measurementWithIntAdcDone+0x80>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	4a1d      	ldr	r2, [pc, #116]	; (8001a74 <measurementWithIntAdcDone+0x80>)
 80019fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a02:	6093      	str	r3, [r2, #8]

	filledBuffersIntADC++;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <measurementWithIntAdcDone+0x84>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <measurementWithIntAdcDone+0x84>)
 8001a0e:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffersIntADC == 1) {
 8001a10:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <measurementWithIntAdcDone+0x84>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d107      	bne.n	8001a28 <measurementWithIntAdcDone+0x34>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_2.uint16, samplesPerPeriod);
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <measurementWithIntAdcDone+0x88>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4918      	ldr	r1, [pc, #96]	; (8001a80 <measurementWithIntAdcDone+0x8c>)
 8001a20:	4818      	ldr	r0, [pc, #96]	; (8001a84 <measurementWithIntAdcDone+0x90>)
 8001a22:	f001 fc4f 	bl	80032c4 <HAL_ADC_Start_DMA>
		// if there are remaning
		else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 8001a26:	e022      	b.n	8001a6e <measurementWithIntAdcDone+0x7a>
	else if (filledBuffersIntADC == 2) {
 8001a28:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <measurementWithIntAdcDone+0x84>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d11e      	bne.n	8001a6e <measurementWithIntAdcDone+0x7a>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001a30:	4815      	ldr	r0, [pc, #84]	; (8001a88 <measurementWithIntAdcDone+0x94>)
 8001a32:	f004 fe9f 	bl	8006774 <HAL_TIM_Base_Stop_IT>
		set_LED3(0);
 8001a36:	2000      	movs	r0, #0
 8001a38:	f7ff fe70 	bl	800171c <set_LED3>
		filledBuffersIntADC = 0;
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <measurementWithIntAdcDone+0x84>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
		state.intAdcReadyToSend = 1;
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <measurementWithIntAdcDone+0x98>)
 8001a44:	2201      	movs	r2, #1
 8001a46:	705a      	strb	r2, [r3, #1]
		state.intAdcMeasuring = 0;
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <measurementWithIntAdcDone+0x98>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	71da      	strb	r2, [r3, #7]
		goToIdleAfterMeasurement();
 8001a4e:	f000 f849 	bl	8001ae4 <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <measurementWithIntAdcDone+0x98>)
 8001a54:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d106      	bne.n	8001a6a <measurementWithIntAdcDone+0x76>
			state.intAdcActiveState = 0;
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <measurementWithIntAdcDone+0x98>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	711a      	strb	r2, [r3, #4]
			state.intAdcSetState = 0;
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <measurementWithIntAdcDone+0x98>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	729a      	strb	r2, [r3, #10]
}
 8001a68:	e001      	b.n	8001a6e <measurementWithIntAdcDone+0x7a>
			prepareForPolarizationPhaseIfPossible();
 8001a6a:	f000 f85f 	bl	8001b2c <prepareForPolarizationPhaseIfPossible>
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40012000 	.word	0x40012000
 8001a78:	20000201 	.word	0x20000201
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20004314 	.word	0x20004314
 8001a84:	2002f538 	.word	0x2002f538
 8001a88:	2002f6f8 	.word	0x2002f6f8
 8001a8c:	2002f4a4 	.word	0x2002f4a4

08001a90 <measurementWithCompDone>:

void measurementWithCompDone(TIM_HandleTypeDef *htim) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4810      	ldr	r0, [pc, #64]	; (8001adc <measurementWithCompDone+0x4c>)
 8001a9c:	f005 f90c 	bl	8006cb8 <HAL_TIM_IC_Stop_DMA>
	set_LED4(0);
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f7ff fe4d 	bl	8001740 <set_LED4>
	state.compReadyToSend = 1;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <measurementWithCompDone+0x50>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	709a      	strb	r2, [r3, #2]
	state.compMeasuring = 0;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <measurementWithCompDone+0x50>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	721a      	strb	r2, [r3, #8]

	goToIdleAfterMeasurement();
 8001ab2:	f000 f817 	bl	8001ae4 <goToIdleAfterMeasurement>

	//if freq should be measured only once, after the measurement, go to idle state
	if (state.remainingMeasurements == 0) {
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <measurementWithCompDone+0x50>)
 8001ab8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d106      	bne.n	8001ace <measurementWithCompDone+0x3e>
		state.compActiveState = 0;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <measurementWithCompDone+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	715a      	strb	r2, [r3, #5]
		state.compSetState = 0;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <measurementWithCompDone+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	72da      	strb	r2, [r3, #11]
	} else {
		prepareForPolarizationPhaseIfPossible();
	}
}
 8001acc:	e001      	b.n	8001ad2 <measurementWithCompDone+0x42>
		prepareForPolarizationPhaseIfPossible();
 8001ace:	f000 f82d 	bl	8001b2c <prepareForPolarizationPhaseIfPossible>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2002f7e0 	.word	0x2002f7e0
 8001ae0:	2002f4a4 	.word	0x2002f4a4

08001ae4 <goToIdleAfterMeasurement>:

void goToIdleAfterMeasurement() {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	//only if all measurements were done
	if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001ae8:	4b0f      	ldr	r3, [pc, #60]	; (8001b28 <goToIdleAfterMeasurement+0x44>)
 8001aea:	799b      	ldrb	r3, [r3, #6]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d118      	bne.n	8001b22 <goToIdleAfterMeasurement+0x3e>
 8001af0:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <goToIdleAfterMeasurement+0x44>)
 8001af2:	79db      	ldrb	r3, [r3, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d114      	bne.n	8001b22 <goToIdleAfterMeasurement+0x3e>
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <goToIdleAfterMeasurement+0x44>)
 8001afa:	7a1b      	ldrb	r3, [r3, #8]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d110      	bne.n	8001b22 <goToIdleAfterMeasurement+0x3e>
		switchingCircuitIdle();
 8001b00:	f7ff fe30 	bl	8001764 <switchingCircuitIdle>
		// -1 indicates infinity measurements
		if (state.remainingMeasurements != -1) {
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <goToIdleAfterMeasurement+0x44>)
 8001b06:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0e:	d008      	beq.n	8001b22 <goToIdleAfterMeasurement+0x3e>
			state.remainingMeasurements--;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <goToIdleAfterMeasurement+0x44>)
 8001b12:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	3b01      	subs	r3, #1
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	b21a      	sxth	r2, r3
 8001b1e:	4b02      	ldr	r3, [pc, #8]	; (8001b28 <goToIdleAfterMeasurement+0x44>)
 8001b20:	819a      	strh	r2, [r3, #12]
		}
	}
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	2002f4a4 	.word	0x2002f4a4

08001b2c <prepareForPolarizationPhaseIfPossible>:

void prepareForPolarizationPhaseIfPossible() {
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
	if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001b32:	799b      	ldrb	r3, [r3, #6]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10a      	bne.n	8001b4e <prepareForPolarizationPhaseIfPossible+0x22>
 8001b38:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001b3a:	79db      	ldrb	r3, [r3, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d106      	bne.n	8001b4e <prepareForPolarizationPhaseIfPossible+0x22>
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001b42:	7a1b      	ldrb	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <prepareForPolarizationPhaseIfPossible+0x22>
		state.preparedToRunPolarizationPhase = 1;
 8001b48:	4b03      	ldr	r3, [pc, #12]	; (8001b58 <prepareForPolarizationPhaseIfPossible+0x2c>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	745a      	strb	r2, [r3, #17]
	}
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	2002f4a4 	.word	0x2002f4a4

08001b5c <initState>:

void initState() {
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
	state.extAdcReadyToSend = 0;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <initState+0x74>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
	state.intAdcReadyToSend = 0;
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <initState+0x74>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	705a      	strb	r2, [r3, #1]
	state.compReadyToSend = 0;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <initState+0x74>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	709a      	strb	r2, [r3, #2]

	state.extAdcActiveState = 0;
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <initState+0x74>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	70da      	strb	r2, [r3, #3]
	state.extAdcSetState = 0;
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <initState+0x74>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	725a      	strb	r2, [r3, #9]
	state.intAdcActiveState = 0;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <initState+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	711a      	strb	r2, [r3, #4]


	state.extAdcMeasuring = 0;
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <initState+0x74>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	719a      	strb	r2, [r3, #6]
	state.intAdcMeasuring = 0;
 8001b8a:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <initState+0x74>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	71da      	strb	r2, [r3, #7]
	state.compMeasuring = 0;
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <initState+0x74>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	721a      	strb	r2, [r3, #8]

	state.intAdcSetState = 0;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <initState+0x74>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	729a      	strb	r2, [r3, #10]
	state.compActiveState = 0;
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <initState+0x74>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	715a      	strb	r2, [r3, #5]
	state.compSetState = 0;
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <initState+0x74>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	72da      	strb	r2, [r3, #11]

	state.setMeasurements = 0;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	; (8001bd0 <initState+0x74>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	81da      	strh	r2, [r3, #14]
	state.remainingMeasurements = 0;
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <initState+0x74>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	819a      	strh	r2, [r3, #12]
	state.preparedToRunPolarizationPhase = 0;
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <initState+0x74>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	745a      	strb	r2, [r3, #17]
	state.measureTechniqueUpdated = 0;
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <initState+0x74>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	741a      	strb	r2, [r3, #16]

	state.index = 0;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <initState+0x74>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	825a      	strh	r2, [r3, #18]
}
 8001bc6:	bf00      	nop
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	2002f4a4 	.word	0x2002f4a4

08001bd4 <HAL_TIM_IC_CaptureCallback>:

//comparator finished measuring
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be4:	d102      	bne.n	8001bec <HAL_TIM_IC_CaptureCallback+0x18>
		measurementWithCompDone(htim);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ff52 	bl	8001a90 <measurementWithCompDone>
	}
}
 8001bec:	bf00      	nop
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_ADC_ConvCpltCallback>:

//intADC - buffer filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_ADC_ConvCpltCallback+0x20>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_ConvCpltCallback+0x16>
		measurementWithIntAdcDone();
 8001c06:	f7ff fef5 	bl	80019f4 <measurementWithIntAdcDone>
	}
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40012000 	.word	0x40012000

08001c18 <HAL_UART_RxCpltCallback>:

//char received with via USB
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a04      	ldr	r2, [pc, #16]	; (8001c38 <HAL_UART_RxCpltCallback+0x20>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_UART_RxCpltCallback+0x16>
		characterReceived();
 8001c2a:	f000 f807 	bl	8001c3c <characterReceived>
	}
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40004800 	.word	0x40004800

08001c3c <characterReceived>:

void characterReceived() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 8001c40:	2201      	movs	r2, #1
 8001c42:	490e      	ldr	r1, [pc, #56]	; (8001c7c <characterReceived+0x40>)
 8001c44:	480e      	ldr	r0, [pc, #56]	; (8001c80 <characterReceived+0x44>)
 8001c46:	f006 fd03 	bl	8008650 <HAL_UART_Receive_IT>
	state.measureTechniqueUpdated = 1;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <characterReceived+0x48>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	741a      	strb	r2, [r3, #16]
	//receivedCharIndex shouldn't exceed 50
	receivedChars[(receivedCharIndex++) % 50] = buffer_uart_rx[0];
 8001c50:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <characterReceived+0x4c>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	1c5a      	adds	r2, r3, #1
 8001c56:	b2d1      	uxtb	r1, r2
 8001c58:	4a0b      	ldr	r2, [pc, #44]	; (8001c88 <characterReceived+0x4c>)
 8001c5a:	7011      	strb	r1, [r2, #0]
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <characterReceived+0x50>)
 8001c5e:	fba2 1203 	umull	r1, r2, r2, r3
 8001c62:	0912      	lsrs	r2, r2, #4
 8001c64:	2132      	movs	r1, #50	; 0x32
 8001c66:	fb01 f202 	mul.w	r2, r1, r2
 8001c6a:	1a9b      	subs	r3, r3, r2
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b02      	ldr	r3, [pc, #8]	; (8001c7c <characterReceived+0x40>)
 8001c72:	7819      	ldrb	r1, [r3, #0]
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <characterReceived+0x54>)
 8001c76:	5499      	strb	r1, [r3, r2]

}
 8001c78:	bf00      	nop
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20004310 	.word	0x20004310
 8001c80:	20004244 	.word	0x20004244
 8001c84:	2002f4a4 	.word	0x2002f4a4
 8001c88:	2002f738 	.word	0x2002f738
 8001c8c:	51eb851f 	.word	0x51eb851f
 8001c90:	2002f6c4 	.word	0x2002f6c4

08001c94 <HAL_SPI_RxCpltCallback>:

//extADC - buffer filled
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <HAL_SPI_RxCpltCallback+0x20>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d101      	bne.n	8001caa <HAL_SPI_RxCpltCallback+0x16>
		measurementWithExtAdcDone();
 8001ca6:	f7ff fe3f 	bl	8001928 <measurementWithExtAdcDone>
	}
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40013000 	.word	0x40013000

08001cb8 <parseText>:

int parseText() {
 8001cb8:	b5b0      	push	{r4, r5, r7, lr}
 8001cba:	b0a6      	sub	sp, #152	; 0x98
 8001cbc:	af00      	add	r7, sp, #0
	//-------------------------------------------------------------------------------------
	//check if there is two times character * indicating complete command
	//-------------------------------------------------------------------------------------
	uint8_t i, indexOfFirstSpecialChar, indexOfSecondSpecialChar, specialCharCount = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	char msg_buffers[80];
	char receivedCommand[50];

	for (i = 0; i < strlen(receivedCommand); i++) {
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001cca:	e00c      	b.n	8001ce6 <parseText+0x2e>
		receivedCommand[i] = '\0';
 8001ccc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001cd0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001cd4:	4413      	add	r3, r2
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f803 2c94 	strb.w	r2, [r3, #-148]
	for (i = 0; i < strlen(receivedCommand); i++) {
 8001cdc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001ce6:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001cea:	1d3b      	adds	r3, r7, #4
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fab1 	bl	8000254 <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	429c      	cmp	r4, r3
 8001cf6:	d3e9      	bcc.n	8001ccc <parseText+0x14>
	}
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001cfe:	e00c      	b.n	8001d1a <parseText+0x62>
		msg_buffers[i] = '\0';
 8001d00:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d04:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001d08:	4413      	add	r3, r2
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f803 2c60 	strb.w	r2, [r3, #-96]
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001d10:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d14:	3301      	adds	r3, #1
 8001d16:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d1a:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001d1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7fe fa96 	bl	8000254 <strlen>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	429c      	cmp	r4, r3
 8001d2c:	d3e8      	bcc.n	8001d00 <parseText+0x48>
	}
	for (i = 0; i < strlen(receivedChars); i++) {
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d34:	e020      	b.n	8001d78 <parseText+0xc0>
		if (receivedChars[i] == '*') {
 8001d36:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d3a:	4ac0      	ldr	r2, [pc, #768]	; (800203c <parseText+0x384>)
 8001d3c:	5cd3      	ldrb	r3, [r2, r3]
 8001d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8001d40:	d115      	bne.n	8001d6e <parseText+0xb6>
			if (specialCharCount == 0) {
 8001d42:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d104      	bne.n	8001d54 <parseText+0x9c>
				indexOfFirstSpecialChar = i;
 8001d4a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d4e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001d52:	e007      	b.n	8001d64 <parseText+0xac>
			} else if (specialCharCount == 1) {
 8001d54:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d103      	bne.n	8001d64 <parseText+0xac>
				indexOfSecondSpecialChar = i;
 8001d5c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d60:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			}
			specialCharCount++;
 8001d64:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	for (i = 0; i < strlen(receivedChars); i++) {
 8001d6e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d72:	3301      	adds	r3, #1
 8001d74:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d78:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001d7c:	48af      	ldr	r0, [pc, #700]	; (800203c <parseText+0x384>)
 8001d7e:	f7fe fa69 	bl	8000254 <strlen>
 8001d82:	4603      	mov	r3, r0
 8001d84:	429c      	cmp	r4, r3
 8001d86:	d3d6      	bcc.n	8001d36 <parseText+0x7e>
		}
	}
	//received message is not complete
	if (specialCharCount == 1) {
 8001d88:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <parseText+0xdc>
		return 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e1b9      	b.n	8002108 <parseText+0x450>
	}
	// received message is complete ->
	else if (specialCharCount == 2) {
 8001d94:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d150      	bne.n	8001e3e <parseText+0x186>
		sprintf(msg_buffers, "*INFO:Message accepted*\n");
 8001d9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001da0:	4aa7      	ldr	r2, [pc, #668]	; (8002040 <parseText+0x388>)
 8001da2:	461c      	mov	r4, r3
 8001da4:	4615      	mov	r5, r2
 8001da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001daa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001dae:	c403      	stmia	r4!, {r0, r1}
 8001db0:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8001db2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fa4c 	bl	8000254 <strlen>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	489e      	ldr	r0, [pc, #632]	; (8002044 <parseText+0x38c>)
 8001dca:	f006 fbaf 	bl	800852c <HAL_UART_Transmit>
	}

	//-------------------------------------------------------------------------------------
	// get string between special chars (Only if specialCharCount == 2)
	//-------------------------------------------------------------------------------------
	strncpy(receivedCommand, receivedChars + indexOfFirstSpecialChar + 1, indexOfSecondSpecialChar - indexOfFirstSpecialChar - 1);
 8001dce:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	4a99      	ldr	r2, [pc, #612]	; (800203c <parseText+0x384>)
 8001dd6:	1899      	adds	r1, r3, r2
 8001dd8:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001ddc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	3b01      	subs	r3, #1
 8001de4:	461a      	mov	r2, r3
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	4618      	mov	r0, r3
 8001dea:	f007 fb8f 	bl	800950c <strncpy>
	receivedCommand[indexOfSecondSpecialChar - indexOfFirstSpecialChar - 1] = '\0';
 8001dee:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001df2:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001dfe:	4413      	add	r3, r2
 8001e00:	2200      	movs	r2, #0
 8001e02:	f803 2c94 	strb.w	r2, [r3, #-148]

	char *command = strtok(receivedCommand, ":");
 8001e06:	1d3b      	adds	r3, r7, #4
 8001e08:	498f      	ldr	r1, [pc, #572]	; (8002048 <parseText+0x390>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f007 fb94 	bl	8009538 <strtok>
 8001e10:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	char *method = strtok(NULL, ":");
 8001e14:	498c      	ldr	r1, [pc, #560]	; (8002048 <parseText+0x390>)
 8001e16:	2000      	movs	r0, #0
 8001e18:	f007 fb8e 	bl	8009538 <strtok>
 8001e1c:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	char *count = strtok(NULL, ":");
 8001e20:	4989      	ldr	r1, [pc, #548]	; (8002048 <parseText+0x390>)
 8001e22:	2000      	movs	r0, #0
 8001e24:	f007 fb88 	bl	8009538 <strtok>
 8001e28:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	//-------------------------------------------------------------------------------------
	// Perform action based on received message
	//-------------------------------------------------------------------------------------

	//*IDN*
	if (strcmp(command, "IDN") == 0) {
 8001e2c:	4987      	ldr	r1, [pc, #540]	; (800204c <parseText+0x394>)
 8001e2e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001e32:	f7fe fa05 	bl	8000240 <strcmp>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d125      	bne.n	8001e88 <parseText+0x1d0>
 8001e3c:	e009      	b.n	8001e52 <parseText+0x19a>
	else if (specialCharCount > 2) {
 8001e3e:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d903      	bls.n	8001e4e <parseText+0x196>
		clearReceivedCharsBuffer(); // receivedChars needs to be cleared
 8001e46:	f000 f96b 	bl	8002120 <clearReceivedCharsBuffer>
		return 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e15c      	b.n	8002108 <parseText+0x450>
		return 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e15a      	b.n	8002108 <parseText+0x450>
		sprintf(msg_buffers, "This is proton precession magnetometer - version 1\n");
 8001e52:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e56:	4a7e      	ldr	r2, [pc, #504]	; (8002050 <parseText+0x398>)
 8001e58:	461c      	mov	r4, r3
 8001e5a:	4615      	mov	r5, r2
 8001e5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e68:	682b      	ldr	r3, [r5, #0]
 8001e6a:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8001e6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe f9ef 	bl	8000254 <strlen>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e82:	4870      	ldr	r0, [pc, #448]	; (8002044 <parseText+0x38c>)
 8001e84:	f006 fb52 	bl	800852c <HAL_UART_Transmit>
		HAL_MAX_DELAY);
	}

	//*STOP*
	if (strcmp(command, "STOP") == 0) {
 8001e88:	4972      	ldr	r1, [pc, #456]	; (8002054 <parseText+0x39c>)
 8001e8a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001e8e:	f7fe f9d7 	bl	8000240 <strcmp>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d101      	bne.n	8001e9c <parseText+0x1e4>
		initState();
 8001e98:	f7ff fe60 	bl	8001b5c <initState>
	}
	//*SET:parameter:value*
	if (strcmp(command, "SET") == 0) {
 8001e9c:	496e      	ldr	r1, [pc, #440]	; (8002058 <parseText+0x3a0>)
 8001e9e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001ea2:	f7fe f9cd 	bl	8000240 <strcmp>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d127      	bne.n	8001efc <parseText+0x244>
		//polarization time
		if (strcmp(method, "polT") == 0) {
 8001eac:	496b      	ldr	r1, [pc, #428]	; (800205c <parseText+0x3a4>)
 8001eae:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001eb2:	f7fe f9c5 	bl	8000240 <strcmp>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f040 8123 	bne.w	8002104 <parseText+0x44c>
			//convert received string to integer
			polarizationTime = atoi(count);
 8001ebe:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001ec2:	f007 facc 	bl	800945e <atoi>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461a      	mov	r2, r3
 8001eca:	4b65      	ldr	r3, [pc, #404]	; (8002060 <parseText+0x3a8>)
 8001ecc:	601a      	str	r2, [r3, #0]

			//min = 5 seconds
			if (polarizationTime < 5000) {
 8001ece:	4b64      	ldr	r3, [pc, #400]	; (8002060 <parseText+0x3a8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f241 3287 	movw	r2, #4999	; 0x1387
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d804      	bhi.n	8001ee4 <parseText+0x22c>
				polarizationTime = 5000;
 8001eda:	4b61      	ldr	r3, [pc, #388]	; (8002060 <parseText+0x3a8>)
 8001edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e10f      	b.n	8002104 <parseText+0x44c>
			}
			//max = 60 seconds
			else if (polarizationTime > 60000) {
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <parseText+0x3a8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001eec:	4293      	cmp	r3, r2
 8001eee:	f240 8109 	bls.w	8002104 <parseText+0x44c>
				polarizationTime = 60000;
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <parseText+0x3a8>)
 8001ef4:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e103      	b.n	8002104 <parseText+0x44c>
			}
		}
	}
	//*MEAS:method:count*
	else if (strcmp(command, "MEAS") == 0) {
 8001efc:	4959      	ldr	r1, [pc, #356]	; (8002064 <parseText+0x3ac>)
 8001efe:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001f02:	f7fe f99d 	bl	8000240 <strcmp>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f040 80fb 	bne.w	8002104 <parseText+0x44c>
		//external ADC only
		if (strcmp(method, "extADC") == 0) {
 8001f0e:	4956      	ldr	r1, [pc, #344]	; (8002068 <parseText+0x3b0>)
 8001f10:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f14:	f7fe f994 	bl	8000240 <strcmp>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10c      	bne.n	8001f38 <parseText+0x280>
			state.extAdcSetState = 1;
 8001f1e:	4b53      	ldr	r3, [pc, #332]	; (800206c <parseText+0x3b4>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 8001f24:	4b51      	ldr	r3, [pc, #324]	; (800206c <parseText+0x3b4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8001f2a:	4b50      	ldr	r3, [pc, #320]	; (800206c <parseText+0x3b4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001f30:	4b4e      	ldr	r3, [pc, #312]	; (800206c <parseText+0x3b4>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	741a      	strb	r2, [r3, #16]
 8001f36:	e0c7      	b.n	80020c8 <parseText+0x410>
		}
		//internal ADC only
		else if (strcmp(method, "intADC") == 0) {
 8001f38:	494d      	ldr	r1, [pc, #308]	; (8002070 <parseText+0x3b8>)
 8001f3a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f3e:	f7fe f97f 	bl	8000240 <strcmp>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10c      	bne.n	8001f62 <parseText+0x2aa>
			state.extAdcSetState = 0;
 8001f48:	4b48      	ldr	r3, [pc, #288]	; (800206c <parseText+0x3b4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <parseText+0x3b4>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8001f54:	4b45      	ldr	r3, [pc, #276]	; (800206c <parseText+0x3b4>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001f5a:	4b44      	ldr	r3, [pc, #272]	; (800206c <parseText+0x3b4>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	741a      	strb	r2, [r3, #16]
 8001f60:	e0b2      	b.n	80020c8 <parseText+0x410>
		}
		//comparator only
		else if (strcmp(method, "comp") == 0) {
 8001f62:	4944      	ldr	r1, [pc, #272]	; (8002074 <parseText+0x3bc>)
 8001f64:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f68:	f7fe f96a 	bl	8000240 <strcmp>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10c      	bne.n	8001f8c <parseText+0x2d4>
			state.extAdcSetState = 0;
 8001f72:	4b3e      	ldr	r3, [pc, #248]	; (800206c <parseText+0x3b4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 8001f78:	4b3c      	ldr	r3, [pc, #240]	; (800206c <parseText+0x3b4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <parseText+0x3b4>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001f84:	4b39      	ldr	r3, [pc, #228]	; (800206c <parseText+0x3b4>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	741a      	strb	r2, [r3, #16]
 8001f8a:	e09d      	b.n	80020c8 <parseText+0x410>
		}
		//external ADC + internal ADC
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 8001f8c:	493a      	ldr	r1, [pc, #232]	; (8002078 <parseText+0x3c0>)
 8001f8e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f92:	f7fe f955 	bl	8000240 <strcmp>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d007      	beq.n	8001fac <parseText+0x2f4>
 8001f9c:	4937      	ldr	r1, [pc, #220]	; (800207c <parseText+0x3c4>)
 8001f9e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001fa2:	f7fe f94d 	bl	8000240 <strcmp>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10c      	bne.n	8001fc6 <parseText+0x30e>
			state.extAdcSetState = 1;
 8001fac:	4b2f      	ldr	r3, [pc, #188]	; (800206c <parseText+0x3b4>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	; (800206c <parseText+0x3b4>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8001fb8:	4b2c      	ldr	r3, [pc, #176]	; (800206c <parseText+0x3b4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	; (800206c <parseText+0x3b4>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	741a      	strb	r2, [r3, #16]
 8001fc4:	e080      	b.n	80020c8 <parseText+0x410>
		}
		//external ADC + comparator
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 8001fc6:	492e      	ldr	r1, [pc, #184]	; (8002080 <parseText+0x3c8>)
 8001fc8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001fcc:	f7fe f938 	bl	8000240 <strcmp>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <parseText+0x32e>
 8001fd6:	492b      	ldr	r1, [pc, #172]	; (8002084 <parseText+0x3cc>)
 8001fd8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001fdc:	f7fe f930 	bl	8000240 <strcmp>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <parseText+0x348>
			state.extAdcSetState = 1;
 8001fe6:	4b21      	ldr	r3, [pc, #132]	; (800206c <parseText+0x3b4>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <parseText+0x3b4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <parseText+0x3b4>)
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	; (800206c <parseText+0x3b4>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	741a      	strb	r2, [r3, #16]
 8001ffe:	e063      	b.n	80020c8 <parseText+0x410>
		}
		//internal ADC + comparator
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 8002000:	4921      	ldr	r1, [pc, #132]	; (8002088 <parseText+0x3d0>)
 8002002:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002006:	f7fe f91b 	bl	8000240 <strcmp>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <parseText+0x368>
 8002010:	491e      	ldr	r1, [pc, #120]	; (800208c <parseText+0x3d4>)
 8002012:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002016:	f7fe f913 	bl	8000240 <strcmp>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d137      	bne.n	8002090 <parseText+0x3d8>
			state.extAdcSetState = 0;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <parseText+0x3b4>)
 8002022:	2200      	movs	r2, #0
 8002024:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <parseText+0x3b4>)
 8002028:	2201      	movs	r2, #1
 800202a:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <parseText+0x3b4>)
 800202e:	2201      	movs	r2, #1
 8002030:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <parseText+0x3b4>)
 8002034:	2201      	movs	r2, #1
 8002036:	741a      	strb	r2, [r3, #16]
 8002038:	e046      	b.n	80020c8 <parseText+0x410>
 800203a:	bf00      	nop
 800203c:	2002f6c4 	.word	0x2002f6c4
 8002040:	08009f40 	.word	0x08009f40
 8002044:	20004244 	.word	0x20004244
 8002048:	08009f5c 	.word	0x08009f5c
 800204c:	08009f60 	.word	0x08009f60
 8002050:	08009f64 	.word	0x08009f64
 8002054:	08009f98 	.word	0x08009f98
 8002058:	08009fa0 	.word	0x08009fa0
 800205c:	08009fa4 	.word	0x08009fa4
 8002060:	20000004 	.word	0x20000004
 8002064:	08009fac 	.word	0x08009fac
 8002068:	08009fb4 	.word	0x08009fb4
 800206c:	2002f4a4 	.word	0x2002f4a4
 8002070:	08009fbc 	.word	0x08009fbc
 8002074:	08009fc4 	.word	0x08009fc4
 8002078:	08009fcc 	.word	0x08009fcc
 800207c:	08009fdc 	.word	0x08009fdc
 8002080:	08009fec 	.word	0x08009fec
 8002084:	08009ff8 	.word	0x08009ff8
 8002088:	0800a004 	.word	0x0800a004
 800208c:	0800a010 	.word	0x0800a010
		}
		//external ADC + internal ADC + comparator
		else if ((strcmp(method, "extADC+intADC+comp") == 0) || (strcmp(method, "intADC+extADC+comp") == 0)) {
 8002090:	491f      	ldr	r1, [pc, #124]	; (8002110 <parseText+0x458>)
 8002092:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002096:	f7fe f8d3 	bl	8000240 <strcmp>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <parseText+0x3f8>
 80020a0:	491c      	ldr	r1, [pc, #112]	; (8002114 <parseText+0x45c>)
 80020a2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80020a6:	f7fe f8cb 	bl	8000240 <strcmp>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d10b      	bne.n	80020c8 <parseText+0x410>
			state.compSetState = 1;
 80020b0:	4b19      	ldr	r3, [pc, #100]	; (8002118 <parseText+0x460>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	72da      	strb	r2, [r3, #11]
			state.extAdcSetState = 1;
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <parseText+0x460>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 80020bc:	4b16      	ldr	r3, [pc, #88]	; (8002118 <parseText+0x460>)
 80020be:	2201      	movs	r2, #1
 80020c0:	729a      	strb	r2, [r3, #10]
			state.measureTechniqueUpdated = 1;
 80020c2:	4b15      	ldr	r3, [pc, #84]	; (8002118 <parseText+0x460>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	741a      	strb	r2, [r3, #16]
		} else /* default: */
		{

		}
		if (strcmp(count, "INF") == 0) {
 80020c8:	4914      	ldr	r1, [pc, #80]	; (800211c <parseText+0x464>)
 80020ca:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80020ce:	f7fe f8b7 	bl	8000240 <strcmp>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <parseText+0x42a>
			state.setMeasurements = -1;
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <parseText+0x460>)
 80020da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020de:	81da      	strh	r2, [r3, #14]
 80020e0:	e010      	b.n	8002104 <parseText+0x44c>
		} else if (strcmp(count, "") == 0) {
 80020e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d103      	bne.n	80020f4 <parseText+0x43c>
			state.setMeasurements = 1;
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <parseText+0x460>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	81da      	strh	r2, [r3, #14]
 80020f2:	e007      	b.n	8002104 <parseText+0x44c>
		} else {
			state.setMeasurements = atoi(count);
 80020f4:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80020f8:	f007 f9b1 	bl	800945e <atoi>
 80020fc:	4603      	mov	r3, r0
 80020fe:	b21a      	sxth	r2, r3
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <parseText+0x460>)
 8002102:	81da      	strh	r2, [r3, #14]
	}
	/* more else if clauses */
	else /* default: */
	{
	}
	clearReceivedCharsBuffer();
 8002104:	f000 f80c 	bl	8002120 <clearReceivedCharsBuffer>
}
 8002108:	4618      	mov	r0, r3
 800210a:	3798      	adds	r7, #152	; 0x98
 800210c:	46bd      	mov	sp, r7
 800210e:	bdb0      	pop	{r4, r5, r7, pc}
 8002110:	0800a01c 	.word	0x0800a01c
 8002114:	0800a030 	.word	0x0800a030
 8002118:	2002f4a4 	.word	0x2002f4a4
 800211c:	0800a044 	.word	0x0800a044

08002120 <clearReceivedCharsBuffer>:

void clearReceivedCharsBuffer() {
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
	int i = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
	//keep everything in range
	if (receivedCharIndex > 50) {
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <clearReceivedCharsBuffer+0x4c>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b32      	cmp	r3, #50	; 0x32
 8002130:	d902      	bls.n	8002138 <clearReceivedCharsBuffer+0x18>
		receivedCharIndex = 50;
 8002132:	4b0e      	ldr	r3, [pc, #56]	; (800216c <clearReceivedCharsBuffer+0x4c>)
 8002134:	2232      	movs	r2, #50	; 0x32
 8002136:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < receivedCharIndex; i++) {
 8002138:	2300      	movs	r3, #0
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	e007      	b.n	800214e <clearReceivedCharsBuffer+0x2e>
		receivedChars[i] = '\0';
 800213e:	4a0c      	ldr	r2, [pc, #48]	; (8002170 <clearReceivedCharsBuffer+0x50>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4413      	add	r3, r2
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < receivedCharIndex; i++) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3301      	adds	r3, #1
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <clearReceivedCharsBuffer+0x4c>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	461a      	mov	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4293      	cmp	r3, r2
 8002158:	dbf1      	blt.n	800213e <clearReceivedCharsBuffer+0x1e>
	}
	receivedCharIndex = 0;
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <clearReceivedCharsBuffer+0x4c>)
 800215c:	2200      	movs	r2, #0
 800215e:	701a      	strb	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	2002f738 	.word	0x2002f738
 8002170:	2002f6c4 	.word	0x2002f6c4

08002174 <sendMeasuredData>:

void sendMeasuredData() {
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	; 0x30
 8002178:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 800217a:	2300      	movs	r3, #0
 800217c:	857b      	strh	r3, [r7, #42]	; 0x2a
	int i = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((state.extAdcReadyToSend == 1)) {
 8002182:	4ba7      	ldr	r3, [pc, #668]	; (8002420 <sendMeasuredData+0x2ac>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d170      	bne.n	800226c <sendMeasuredData+0xf8>
		set_LED1(0, 0, 1);
 800218a:	2201      	movs	r2, #1
 800218c:	2100      	movs	r1, #0
 800218e:	2000      	movs	r0, #0
 8002190:	f7ff fa8e 	bl	80016b0 <set_LED1>
		sprintf(msg_buffers, "*extADC:\n");
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	4aa3      	ldr	r2, [pc, #652]	; (8002424 <sendMeasuredData+0x2b0>)
 8002198:	ca07      	ldmia	r2, {r0, r1, r2}
 800219a:	c303      	stmia	r3!, {r0, r1}
 800219c:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 800219e:	1d3b      	adds	r3, r7, #4
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f857 	bl	8000254 <strlen>
 80021a6:	4603      	mov	r3, r0
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	1d39      	adds	r1, r7, #4
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
 80021b0:	489d      	ldr	r0, [pc, #628]	; (8002428 <sendMeasuredData+0x2b4>)
 80021b2:	f006 f9bb 	bl	800852c <HAL_UART_Transmit>
		HAL_MAX_DELAY);

		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021ba:	e019      	b.n	80021f0 <sendMeasuredData+0x7c>
			adc = (buffer_extAdc_1.uint16[i]);
 80021bc:	4a9b      	ldr	r2, [pc, #620]	; (800242c <sendMeasuredData+0x2b8>)
 80021be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021c4:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 80021c6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80021c8:	1d3b      	adds	r3, r7, #4
 80021ca:	4999      	ldr	r1, [pc, #612]	; (8002430 <sendMeasuredData+0x2bc>)
 80021cc:	4618      	mov	r0, r3
 80021ce:	f007 f97d 	bl	80094cc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 80021d2:	1d3b      	adds	r3, r7, #4
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f83d 	bl	8000254 <strlen>
 80021da:	4603      	mov	r3, r0
 80021dc:	b29a      	uxth	r2, r3
 80021de:	1d39      	adds	r1, r7, #4
 80021e0:	f04f 33ff 	mov.w	r3, #4294967295
 80021e4:	4890      	ldr	r0, [pc, #576]	; (8002428 <sendMeasuredData+0x2b4>)
 80021e6:	f006 f9a1 	bl	800852c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 80021ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ec:	3301      	adds	r3, #1
 80021ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021f2:	4b90      	ldr	r3, [pc, #576]	; (8002434 <sendMeasuredData+0x2c0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d3e0      	bcc.n	80021bc <sendMeasuredData+0x48>
			 adc = (buffer_extAdc_1.uint8[i]);
			 sprintf(msg_buffers, "%c\n", adc);
			 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);*/
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021fe:	e019      	b.n	8002234 <sendMeasuredData+0xc0>
			adc = (buffer_extAdc_2.uint16[i]);
 8002200:	4a8d      	ldr	r2, [pc, #564]	; (8002438 <sendMeasuredData+0x2c4>)
 8002202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002208:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 800220a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	4988      	ldr	r1, [pc, #544]	; (8002430 <sendMeasuredData+0x2bc>)
 8002210:	4618      	mov	r0, r3
 8002212:	f007 f95b 	bl	80094cc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	4618      	mov	r0, r3
 800221a:	f7fe f81b 	bl	8000254 <strlen>
 800221e:	4603      	mov	r3, r0
 8002220:	b29a      	uxth	r2, r3
 8002222:	1d39      	adds	r1, r7, #4
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	487f      	ldr	r0, [pc, #508]	; (8002428 <sendMeasuredData+0x2b4>)
 800222a:	f006 f97f 	bl	800852c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 800222e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002230:	3301      	adds	r3, #1
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002236:	4b7f      	ldr	r3, [pc, #508]	; (8002434 <sendMeasuredData+0x2c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d3e0      	bcc.n	8002200 <sendMeasuredData+0x8c>
			HAL_MAX_DELAY);
		}
		sprintf(msg_buffers, "*\n");
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	4a7e      	ldr	r2, [pc, #504]	; (800243c <sendMeasuredData+0x2c8>)
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	4611      	mov	r1, r2
 8002246:	8019      	strh	r1, [r3, #0]
 8002248:	3302      	adds	r3, #2
 800224a:	0c12      	lsrs	r2, r2, #16
 800224c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	4618      	mov	r0, r3
 8002252:	f7fd ffff 	bl	8000254 <strlen>
 8002256:	4603      	mov	r3, r0
 8002258:	b29a      	uxth	r2, r3
 800225a:	1d39      	adds	r1, r7, #4
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
 8002260:	4871      	ldr	r0, [pc, #452]	; (8002428 <sendMeasuredData+0x2b4>)
 8002262:	f006 f963 	bl	800852c <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		state.extAdcReadyToSend = 0;
 8002266:	4b6e      	ldr	r3, [pc, #440]	; (8002420 <sendMeasuredData+0x2ac>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
	}

	if ((state.intAdcReadyToSend == 1)) {
 800226c:	4b6c      	ldr	r3, [pc, #432]	; (8002420 <sendMeasuredData+0x2ac>)
 800226e:	785b      	ldrb	r3, [r3, #1]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d170      	bne.n	8002356 <sendMeasuredData+0x1e2>
		set_LED1(0, 0, 1);
 8002274:	2201      	movs	r2, #1
 8002276:	2100      	movs	r1, #0
 8002278:	2000      	movs	r0, #0
 800227a:	f7ff fa19 	bl	80016b0 <set_LED1>
		sprintf(msg_buffers, "*intADC:\n");
 800227e:	1d3b      	adds	r3, r7, #4
 8002280:	4a6f      	ldr	r2, [pc, #444]	; (8002440 <sendMeasuredData+0x2cc>)
 8002282:	ca07      	ldmia	r2, {r0, r1, r2}
 8002284:	c303      	stmia	r3!, {r0, r1}
 8002286:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	4618      	mov	r0, r3
 800228c:	f7fd ffe2 	bl	8000254 <strlen>
 8002290:	4603      	mov	r3, r0
 8002292:	b29a      	uxth	r2, r3
 8002294:	1d39      	adds	r1, r7, #4
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	4863      	ldr	r0, [pc, #396]	; (8002428 <sendMeasuredData+0x2b4>)
 800229c:	f006 f946 	bl	800852c <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80022a0:	2300      	movs	r3, #0
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022a4:	e019      	b.n	80022da <sendMeasuredData+0x166>
			adc = (buffer_intAdc_1.uint16[i]);
 80022a6:	4a67      	ldr	r2, [pc, #412]	; (8002444 <sendMeasuredData+0x2d0>)
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022ae:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 80022b0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80022b2:	1d3b      	adds	r3, r7, #4
 80022b4:	495e      	ldr	r1, [pc, #376]	; (8002430 <sendMeasuredData+0x2bc>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f007 f908 	bl	80094cc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	4618      	mov	r0, r3
 80022c0:	f7fd ffc8 	bl	8000254 <strlen>
 80022c4:	4603      	mov	r3, r0
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	1d39      	adds	r1, r7, #4
 80022ca:	f04f 33ff 	mov.w	r3, #4294967295
 80022ce:	4856      	ldr	r0, [pc, #344]	; (8002428 <sendMeasuredData+0x2b4>)
 80022d0:	f006 f92c 	bl	800852c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 80022d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d6:	3301      	adds	r3, #1
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022dc:	4b55      	ldr	r3, [pc, #340]	; (8002434 <sendMeasuredData+0x2c0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d3e0      	bcc.n	80022a6 <sendMeasuredData+0x132>
			HAL_MAX_DELAY);
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80022e4:	2300      	movs	r3, #0
 80022e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022e8:	e019      	b.n	800231e <sendMeasuredData+0x1aa>
			adc = (buffer_intAdc_2.uint16[i]);
 80022ea:	4a57      	ldr	r2, [pc, #348]	; (8002448 <sendMeasuredData+0x2d4>)
 80022ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80022f2:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 80022f4:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	494d      	ldr	r1, [pc, #308]	; (8002430 <sendMeasuredData+0x2bc>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	f007 f8e6 	bl	80094cc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	4618      	mov	r0, r3
 8002304:	f7fd ffa6 	bl	8000254 <strlen>
 8002308:	4603      	mov	r3, r0
 800230a:	b29a      	uxth	r2, r3
 800230c:	1d39      	adds	r1, r7, #4
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	4845      	ldr	r0, [pc, #276]	; (8002428 <sendMeasuredData+0x2b4>)
 8002314:	f006 f90a 	bl	800852c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231a:	3301      	adds	r3, #1
 800231c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800231e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002320:	4b44      	ldr	r3, [pc, #272]	; (8002434 <sendMeasuredData+0x2c0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d3e0      	bcc.n	80022ea <sendMeasuredData+0x176>
			HAL_MAX_DELAY);
		}
		sprintf(msg_buffers, "*\n");
 8002328:	1d3b      	adds	r3, r7, #4
 800232a:	4a44      	ldr	r2, [pc, #272]	; (800243c <sendMeasuredData+0x2c8>)
 800232c:	6812      	ldr	r2, [r2, #0]
 800232e:	4611      	mov	r1, r2
 8002330:	8019      	strh	r1, [r3, #0]
 8002332:	3302      	adds	r3, #2
 8002334:	0c12      	lsrs	r2, r2, #16
 8002336:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	4618      	mov	r0, r3
 800233c:	f7fd ff8a 	bl	8000254 <strlen>
 8002340:	4603      	mov	r3, r0
 8002342:	b29a      	uxth	r2, r3
 8002344:	1d39      	adds	r1, r7, #4
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	4837      	ldr	r0, [pc, #220]	; (8002428 <sendMeasuredData+0x2b4>)
 800234c:	f006 f8ee 	bl	800852c <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		state.intAdcReadyToSend = 0;
 8002350:	4b33      	ldr	r3, [pc, #204]	; (8002420 <sendMeasuredData+0x2ac>)
 8002352:	2200      	movs	r2, #0
 8002354:	705a      	strb	r2, [r3, #1]
	}

	if ((state.compReadyToSend == 1)) {
 8002356:	4b32      	ldr	r3, [pc, #200]	; (8002420 <sendMeasuredData+0x2ac>)
 8002358:	789b      	ldrb	r3, [r3, #2]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d15c      	bne.n	8002418 <sendMeasuredData+0x2a4>
		set_LED1(0, 0, 1);
 800235e:	2201      	movs	r2, #1
 8002360:	2100      	movs	r1, #0
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff f9a4 	bl	80016b0 <set_LED1>
		//send frequency
		sprintf(msg_buffers, "*comp:\n");
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	4a38      	ldr	r2, [pc, #224]	; (800244c <sendMeasuredData+0x2d8>)
 800236c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002370:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4618      	mov	r0, r3
 8002378:	f7fd ff6c 	bl	8000254 <strlen>
 800237c:	4603      	mov	r3, r0
 800237e:	b29a      	uxth	r2, r3
 8002380:	1d39      	adds	r1, r7, #4
 8002382:	f04f 33ff 	mov.w	r3, #4294967295
 8002386:	4828      	ldr	r0, [pc, #160]	; (8002428 <sendMeasuredData+0x2b4>)
 8002388:	f006 f8d0 	bl	800852c <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		for (i = 0; i < 4000; i++) {
 800238c:	2300      	movs	r3, #0
 800238e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002390:	e022      	b.n	80023d8 <sendMeasuredData+0x264>
			uint32_t freq = buffer_comp[i + 1] - buffer_comp[i];
 8002392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002394:	3301      	adds	r3, #1
 8002396:	4a2e      	ldr	r2, [pc, #184]	; (8002450 <sendMeasuredData+0x2dc>)
 8002398:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800239c:	492c      	ldr	r1, [pc, #176]	; (8002450 <sendMeasuredData+0x2dc>)
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
			sprintf(msg_freq, "%d\n", freq);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	4929      	ldr	r1, [pc, #164]	; (8002454 <sendMeasuredData+0x2e0>)
 80023b0:	4618      	mov	r0, r3
 80023b2:	f007 f88b 	bl	80094cc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq), HAL_MAX_DELAY);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fd ff4a 	bl	8000254 <strlen>
 80023c0:	4603      	mov	r3, r0
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	f107 0114 	add.w	r1, r7, #20
 80023c8:	f04f 33ff 	mov.w	r3, #4294967295
 80023cc:	4816      	ldr	r0, [pc, #88]	; (8002428 <sendMeasuredData+0x2b4>)
 80023ce:	f006 f8ad 	bl	800852c <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 80023d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d4:	3301      	adds	r3, #1
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023da:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80023de:	dbd8      	blt.n	8002392 <sendMeasuredData+0x21e>
		}
		sprintf(msg_buffers, "*\n");
 80023e0:	1d3b      	adds	r3, r7, #4
 80023e2:	4a16      	ldr	r2, [pc, #88]	; (800243c <sendMeasuredData+0x2c8>)
 80023e4:	6812      	ldr	r2, [r2, #0]
 80023e6:	4611      	mov	r1, r2
 80023e8:	8019      	strh	r1, [r3, #0]
 80023ea:	3302      	adds	r3, #2
 80023ec:	0c12      	lsrs	r2, r2, #16
 80023ee:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fd ff2e 	bl	8000254 <strlen>
 80023f8:	4603      	mov	r3, r0
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	1d39      	adds	r1, r7, #4
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	4809      	ldr	r0, [pc, #36]	; (8002428 <sendMeasuredData+0x2b4>)
 8002404:	f006 f892 	bl	800852c <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		set_LED1(0, 0, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	2100      	movs	r1, #0
 800240c:	2000      	movs	r0, #0
 800240e:	f7ff f94f 	bl	80016b0 <set_LED1>
		state.compReadyToSend = 0;
 8002412:	4b03      	ldr	r3, [pc, #12]	; (8002420 <sendMeasuredData+0x2ac>)
 8002414:	2200      	movs	r2, #0
 8002416:	709a      	strb	r2, [r3, #2]
	}
}
 8002418:	bf00      	nop
 800241a:	3730      	adds	r7, #48	; 0x30
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	2002f4a4 	.word	0x2002f4a4
 8002424:	0800a048 	.word	0x0800a048
 8002428:	20004244 	.word	0x20004244
 800242c:	20045188 	.word	0x20045188
 8002430:	0800a054 	.word	0x0800a054
 8002434:	20000000 	.word	0x20000000
 8002438:	20019b9c 	.word	0x20019b9c
 800243c:	0800a05c 	.word	0x0800a05c
 8002440:	0800a060 	.word	0x0800a060
 8002444:	2002f8a0 	.word	0x2002f8a0
 8002448:	20004314 	.word	0x20004314
 800244c:	0800a06c 	.word	0x0800a06c
 8002450:	20000214 	.word	0x20000214
 8002454:	0800a074 	.word	0x0800a074

08002458 <updateState>:

void updateState() {
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
	state.remainingMeasurements = state.setMeasurements;
 800245c:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <updateState+0x3c>)
 800245e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8002462:	4b0c      	ldr	r3, [pc, #48]	; (8002494 <updateState+0x3c>)
 8002464:	819a      	strh	r2, [r3, #12]
	state.extAdcActiveState = state.extAdcSetState;
 8002466:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <updateState+0x3c>)
 8002468:	7a5a      	ldrb	r2, [r3, #9]
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <updateState+0x3c>)
 800246c:	70da      	strb	r2, [r3, #3]
	state.intAdcActiveState = state.intAdcSetState;
 800246e:	4b09      	ldr	r3, [pc, #36]	; (8002494 <updateState+0x3c>)
 8002470:	7a9a      	ldrb	r2, [r3, #10]
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <updateState+0x3c>)
 8002474:	711a      	strb	r2, [r3, #4]
	state.compActiveState = state.compSetState;
 8002476:	4b07      	ldr	r3, [pc, #28]	; (8002494 <updateState+0x3c>)
 8002478:	7ada      	ldrb	r2, [r3, #11]
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <updateState+0x3c>)
 800247c:	715a      	strb	r2, [r3, #5]
	state.preparedToRunPolarizationPhase = 1;
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <updateState+0x3c>)
 8002480:	2201      	movs	r2, #1
 8002482:	745a      	strb	r2, [r3, #17]
	state.measureTechniqueUpdated = 0;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <updateState+0x3c>)
 8002486:	2200      	movs	r2, #0
 8002488:	741a      	strb	r2, [r3, #16]
}
 800248a:	bf00      	nop
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	2002f4a4 	.word	0x2002f4a4

08002498 <stateCanBeUpdated>:

int stateCanBeUpdated() {
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
	return (state.measureTechniqueUpdated && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <stateCanBeUpdated+0x4c>)
 800249e:	7c1b      	ldrb	r3, [r3, #16]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d019      	beq.n	80024d8 <stateCanBeUpdated+0x40>
 80024a4:	4b0f      	ldr	r3, [pc, #60]	; (80024e4 <stateCanBeUpdated+0x4c>)
 80024a6:	799b      	ldrb	r3, [r3, #6]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d115      	bne.n	80024d8 <stateCanBeUpdated+0x40>
 80024ac:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <stateCanBeUpdated+0x4c>)
 80024ae:	79db      	ldrb	r3, [r3, #7]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d111      	bne.n	80024d8 <stateCanBeUpdated+0x40>
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <stateCanBeUpdated+0x4c>)
 80024b6:	7a1b      	ldrb	r3, [r3, #8]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10d      	bne.n	80024d8 <stateCanBeUpdated+0x40>
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <stateCanBeUpdated+0x4c>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d109      	bne.n	80024d8 <stateCanBeUpdated+0x40>
 80024c4:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <stateCanBeUpdated+0x4c>)
 80024c6:	785b      	ldrb	r3, [r3, #1]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d105      	bne.n	80024d8 <stateCanBeUpdated+0x40>
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <stateCanBeUpdated+0x4c>)
 80024ce:	789b      	ldrb	r3, [r3, #2]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <stateCanBeUpdated+0x40>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e000      	b.n	80024da <stateCanBeUpdated+0x42>
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	2002f4a4 	.word	0x2002f4a4

080024e8 <measurementCanRun>:

int measurementCanRun() {
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
	return (state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <measurementCanRun+0x4c>)
 80024ee:	7c5b      	ldrb	r3, [r3, #17]
			&& !state.compReadyToSend);
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d019      	beq.n	8002528 <measurementCanRun+0x40>
	return (state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <measurementCanRun+0x4c>)
 80024f6:	799b      	ldrb	r3, [r3, #6]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d115      	bne.n	8002528 <measurementCanRun+0x40>
 80024fc:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <measurementCanRun+0x4c>)
 80024fe:	79db      	ldrb	r3, [r3, #7]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d111      	bne.n	8002528 <measurementCanRun+0x40>
 8002504:	4b0b      	ldr	r3, [pc, #44]	; (8002534 <measurementCanRun+0x4c>)
 8002506:	7a1b      	ldrb	r3, [r3, #8]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10d      	bne.n	8002528 <measurementCanRun+0x40>
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <measurementCanRun+0x4c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <measurementCanRun+0x40>
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <measurementCanRun+0x4c>)
 8002516:	785b      	ldrb	r3, [r3, #1]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d105      	bne.n	8002528 <measurementCanRun+0x40>
			&& !state.compReadyToSend);
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <measurementCanRun+0x4c>)
 800251e:	789b      	ldrb	r3, [r3, #2]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <measurementCanRun+0x40>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <measurementCanRun+0x42>
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	2002f4a4 	.word	0x2002f4a4

08002538 <stateIsIdle>:

int stateIsIdle() {
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
	return (!state.extAdcActiveState && !state.intAdcActiveState && !state.compActiveState && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <stateIsIdle+0x44>)
 800253e:	78db      	ldrb	r3, [r3, #3]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d115      	bne.n	8002570 <stateIsIdle+0x38>
 8002544:	4b0d      	ldr	r3, [pc, #52]	; (800257c <stateIsIdle+0x44>)
 8002546:	791b      	ldrb	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d111      	bne.n	8002570 <stateIsIdle+0x38>
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <stateIsIdle+0x44>)
 800254e:	795b      	ldrb	r3, [r3, #5]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10d      	bne.n	8002570 <stateIsIdle+0x38>
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <stateIsIdle+0x44>)
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d109      	bne.n	8002570 <stateIsIdle+0x38>
 800255c:	4b07      	ldr	r3, [pc, #28]	; (800257c <stateIsIdle+0x44>)
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <stateIsIdle+0x38>
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <stateIsIdle+0x44>)
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <stateIsIdle+0x38>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <stateIsIdle+0x3a>
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	2002f4a4 	.word	0x2002f4a4

08002580 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
	...

08002590 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <HAL_MspInit+0x44>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <HAL_MspInit+0x44>)
 800259c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
 80025a2:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <HAL_MspInit+0x44>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_MspInit+0x44>)
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <HAL_MspInit+0x44>)
 80025b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_MspInit+0x44>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800

080025d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	; 0x28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	2200      	movs	r2, #0
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	605a      	str	r2, [r3, #4]
 80025ea:	609a      	str	r2, [r3, #8]
 80025ec:	60da      	str	r2, [r3, #12]
 80025ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a2c      	ldr	r2, [pc, #176]	; (80026a8 <HAL_ADC_MspInit+0xd0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d152      	bne.n	80026a0 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80025fa:	4b2c      	ldr	r3, [pc, #176]	; (80026ac <HAL_ADC_MspInit+0xd4>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	4a2b      	ldr	r2, [pc, #172]	; (80026ac <HAL_ADC_MspInit+0xd4>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	6453      	str	r3, [r2, #68]	; 0x44
 8002606:	4b29      	ldr	r3, [pc, #164]	; (80026ac <HAL_ADC_MspInit+0xd4>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_ADC_MspInit+0xd4>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	4a25      	ldr	r2, [pc, #148]	; (80026ac <HAL_ADC_MspInit+0xd4>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6313      	str	r3, [r2, #48]	; 0x30
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <HAL_ADC_MspInit+0xd4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 800262a:	2301      	movs	r3, #1
 800262c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800262e:	2303      	movs	r3, #3
 8002630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	481c      	ldr	r0, [pc, #112]	; (80026b0 <HAL_ADC_MspInit+0xd8>)
 800263e:	f001 feb3 	bl	80043a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002642:	4b1c      	ldr	r3, [pc, #112]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 8002644:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <HAL_ADC_MspInit+0xe0>)
 8002646:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002648:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 800264a:	2200      	movs	r2, #0
 800264c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800264e:	4b19      	ldr	r3, [pc, #100]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 8002650:	2200      	movs	r2, #0
 8002652:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002654:	4b17      	ldr	r3, [pc, #92]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 8002656:	2200      	movs	r2, #0
 8002658:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800265a:	4b16      	ldr	r3, [pc, #88]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 800265c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002660:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002662:	4b14      	ldr	r3, [pc, #80]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 8002664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002668:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800266a:	4b12      	ldr	r3, [pc, #72]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 800266c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002670:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 8002674:	2200      	movs	r2, #0
 8002676:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002678:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 800267a:	2200      	movs	r2, #0
 800267c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800267e:	4b0d      	ldr	r3, [pc, #52]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 8002680:	2200      	movs	r2, #0
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002684:	480b      	ldr	r0, [pc, #44]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 8002686:	f001 faf7 	bl	8003c78 <HAL_DMA_Init>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8002690:	f7ff ff76 	bl	8002580 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 8002698:	639a      	str	r2, [r3, #56]	; 0x38
 800269a:	4a06      	ldr	r2, [pc, #24]	; (80026b4 <HAL_ADC_MspInit+0xdc>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80026a0:	bf00      	nop
 80026a2:	3728      	adds	r7, #40	; 0x28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40012000 	.word	0x40012000
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020000 	.word	0x40020000
 80026b4:	2002f664 	.word	0x2002f664
 80026b8:	40026470 	.word	0x40026470

080026bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a3d      	ldr	r2, [pc, #244]	; (80027d0 <HAL_I2C_MspInit+0x114>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d128      	bne.n	8002730 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026de:	4b3d      	ldr	r3, [pc, #244]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a3c      	ldr	r2, [pc, #240]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026f6:	23c0      	movs	r3, #192	; 0xc0
 80026f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026fa:	2312      	movs	r3, #18
 80026fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026fe:	2301      	movs	r3, #1
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002702:	2303      	movs	r3, #3
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002706:	2304      	movs	r3, #4
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800270a:	f107 031c 	add.w	r3, r7, #28
 800270e:	4619      	mov	r1, r3
 8002710:	4831      	ldr	r0, [pc, #196]	; (80027d8 <HAL_I2C_MspInit+0x11c>)
 8002712:	f001 fe49 	bl	80043a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4a2e      	ldr	r2, [pc, #184]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 800271c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002720:	6413      	str	r3, [r2, #64]	; 0x40
 8002722:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800272a:	617b      	str	r3, [r7, #20]
 800272c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800272e:	e04a      	b.n	80027c6 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a29      	ldr	r2, [pc, #164]	; (80027dc <HAL_I2C_MspInit+0x120>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d145      	bne.n	80027c6 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273a:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273e:	4a25      	ldr	r2, [pc, #148]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 8002740:	f043 0304 	orr.w	r3, r3, #4
 8002744:	6313      	str	r3, [r2, #48]	; 0x30
 8002746:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800276a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800276e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002770:	2312      	movs	r3, #18
 8002772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002774:	2301      	movs	r3, #1
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002778:	2303      	movs	r3, #3
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800277c:	2304      	movs	r3, #4
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002780:	f107 031c 	add.w	r3, r7, #28
 8002784:	4619      	mov	r1, r3
 8002786:	4816      	ldr	r0, [pc, #88]	; (80027e0 <HAL_I2C_MspInit+0x124>)
 8002788:	f001 fe0e 	bl	80043a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800278c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002792:	2312      	movs	r3, #18
 8002794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002796:	2301      	movs	r3, #1
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279a:	2303      	movs	r3, #3
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800279e:	2304      	movs	r3, #4
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a2:	f107 031c 	add.w	r3, r7, #28
 80027a6:	4619      	mov	r1, r3
 80027a8:	480e      	ldr	r0, [pc, #56]	; (80027e4 <HAL_I2C_MspInit+0x128>)
 80027aa:	f001 fdfd 	bl	80043a8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	4a08      	ldr	r2, [pc, #32]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 80027b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027b8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_I2C_MspInit+0x118>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
}
 80027c6:	bf00      	nop
 80027c8:	3730      	adds	r7, #48	; 0x30
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40005400 	.word	0x40005400
 80027d4:	40023800 	.word	0x40023800
 80027d8:	40020400 	.word	0x40020400
 80027dc:	40005c00 	.word	0x40005c00
 80027e0:	40020800 	.word	0x40020800
 80027e4:	40020000 	.word	0x40020000

080027e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	; 0x30
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f0:	f107 031c 	add.w	r3, r7, #28
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a46      	ldr	r2, [pc, #280]	; (8002920 <HAL_SPI_MspInit+0x138>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d158      	bne.n	80028bc <HAL_SPI_MspInit+0xd4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800280a:	4b46      	ldr	r3, [pc, #280]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	4a45      	ldr	r2, [pc, #276]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 8002810:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002814:	6453      	str	r3, [r2, #68]	; 0x44
 8002816:	4b43      	ldr	r3, [pc, #268]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a3f      	ldr	r2, [pc, #252]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 8002828:	f043 0301 	orr.w	r3, r3, #1
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b3d      	ldr	r3, [pc, #244]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	617b      	str	r3, [r7, #20]
 8002838:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 800283a:	23b0      	movs	r3, #176	; 0xb0
 800283c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800283e:	2302      	movs	r3, #2
 8002840:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002846:	2303      	movs	r3, #3
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800284a:	2305      	movs	r3, #5
 800284c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 031c 	add.w	r3, r7, #28
 8002852:	4619      	mov	r1, r3
 8002854:	4834      	ldr	r0, [pc, #208]	; (8002928 <HAL_SPI_MspInit+0x140>)
 8002856:	f001 fda7 	bl	80043a8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800285a:	4b34      	ldr	r3, [pc, #208]	; (800292c <HAL_SPI_MspInit+0x144>)
 800285c:	4a34      	ldr	r2, [pc, #208]	; (8002930 <HAL_SPI_MspInit+0x148>)
 800285e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002860:	4b32      	ldr	r3, [pc, #200]	; (800292c <HAL_SPI_MspInit+0x144>)
 8002862:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002866:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002868:	4b30      	ldr	r3, [pc, #192]	; (800292c <HAL_SPI_MspInit+0x144>)
 800286a:	2200      	movs	r2, #0
 800286c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800286e:	4b2f      	ldr	r3, [pc, #188]	; (800292c <HAL_SPI_MspInit+0x144>)
 8002870:	2200      	movs	r2, #0
 8002872:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002874:	4b2d      	ldr	r3, [pc, #180]	; (800292c <HAL_SPI_MspInit+0x144>)
 8002876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800287a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800287c:	4b2b      	ldr	r3, [pc, #172]	; (800292c <HAL_SPI_MspInit+0x144>)
 800287e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002882:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002884:	4b29      	ldr	r3, [pc, #164]	; (800292c <HAL_SPI_MspInit+0x144>)
 8002886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800288a:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800288c:	4b27      	ldr	r3, [pc, #156]	; (800292c <HAL_SPI_MspInit+0x144>)
 800288e:	2200      	movs	r2, #0
 8002890:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002892:	4b26      	ldr	r3, [pc, #152]	; (800292c <HAL_SPI_MspInit+0x144>)
 8002894:	2200      	movs	r2, #0
 8002896:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002898:	4b24      	ldr	r3, [pc, #144]	; (800292c <HAL_SPI_MspInit+0x144>)
 800289a:	2200      	movs	r2, #0
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800289e:	4823      	ldr	r0, [pc, #140]	; (800292c <HAL_SPI_MspInit+0x144>)
 80028a0:	f001 f9ea 	bl	8003c78 <HAL_DMA_Init>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80028aa:	f7ff fe69 	bl	8002580 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a1e      	ldr	r2, [pc, #120]	; (800292c <HAL_SPI_MspInit+0x144>)
 80028b2:	659a      	str	r2, [r3, #88]	; 0x58
 80028b4:	4a1d      	ldr	r2, [pc, #116]	; (800292c <HAL_SPI_MspInit+0x144>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80028ba:	e02c      	b.n	8002916 <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI4)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a1c      	ldr	r2, [pc, #112]	; (8002934 <HAL_SPI_MspInit+0x14c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d127      	bne.n	8002916 <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 80028c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ca:	4a16      	ldr	r2, [pc, #88]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 80028cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028d0:	6453      	str	r3, [r2, #68]	; 0x44
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 80028e4:	f043 0310 	orr.w	r3, r3, #16
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_SPI_MspInit+0x13c>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80028f6:	2374      	movs	r3, #116	; 0x74
 80028f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002902:	2303      	movs	r3, #3
 8002904:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002906:	2305      	movs	r3, #5
 8002908:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800290a:	f107 031c 	add.w	r3, r7, #28
 800290e:	4619      	mov	r1, r3
 8002910:	4809      	ldr	r0, [pc, #36]	; (8002938 <HAL_SPI_MspInit+0x150>)
 8002912:	f001 fd49 	bl	80043a8 <HAL_GPIO_Init>
}
 8002916:	bf00      	nop
 8002918:	3730      	adds	r7, #48	; 0x30
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	40013000 	.word	0x40013000
 8002924:	40023800 	.word	0x40023800
 8002928:	40020000 	.word	0x40020000
 800292c:	20045128 	.word	0x20045128
 8002930:	40026410 	.word	0x40026410
 8002934:	40013400 	.word	0x40013400
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a41      	ldr	r2, [pc, #260]	; (8002a50 <HAL_TIM_Base_MspInit+0x114>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d114      	bne.n	8002978 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800294e:	4b41      	ldr	r3, [pc, #260]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 8002950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002952:	4a40      	ldr	r2, [pc, #256]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6453      	str	r3, [r2, #68]	; 0x44
 800295a:	4b3e      	ldr	r3, [pc, #248]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	61fb      	str	r3, [r7, #28]
 8002964:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8002966:	2200      	movs	r2, #0
 8002968:	2101      	movs	r1, #1
 800296a:	201b      	movs	r0, #27
 800296c:	f001 f94d 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002970:	201b      	movs	r0, #27
 8002972:	f001 f966 	bl	8003c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002976:	e066      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM3)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a36      	ldr	r2, [pc, #216]	; (8002a58 <HAL_TIM_Base_MspInit+0x11c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d114      	bne.n	80029ac <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002982:	4b34      	ldr	r3, [pc, #208]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	4a33      	ldr	r2, [pc, #204]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	6413      	str	r3, [r2, #64]	; 0x40
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	61bb      	str	r3, [r7, #24]
 8002998:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800299a:	2200      	movs	r2, #0
 800299c:	2101      	movs	r1, #1
 800299e:	201d      	movs	r0, #29
 80029a0:	f001 f933 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029a4:	201d      	movs	r0, #29
 80029a6:	f001 f94c 	bl	8003c42 <HAL_NVIC_EnableIRQ>
}
 80029aa:	e04c      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM5)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2a      	ldr	r2, [pc, #168]	; (8002a5c <HAL_TIM_Base_MspInit+0x120>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d114      	bne.n	80029e0 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029b6:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 80029bc:	f043 0308 	orr.w	r3, r3, #8
 80029c0:	6413      	str	r3, [r2, #64]	; 0x40
 80029c2:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	617b      	str	r3, [r7, #20]
 80029cc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80029ce:	2200      	movs	r2, #0
 80029d0:	2101      	movs	r1, #1
 80029d2:	2032      	movs	r0, #50	; 0x32
 80029d4:	f001 f919 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80029d8:	2032      	movs	r0, #50	; 0x32
 80029da:	f001 f932 	bl	8003c42 <HAL_NVIC_EnableIRQ>
}
 80029de:	e032      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM6)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <HAL_TIM_Base_MspInit+0x124>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d114      	bne.n	8002a14 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80029ea:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 80029f0:	f043 0310 	orr.w	r3, r3, #16
 80029f4:	6413      	str	r3, [r2, #64]	; 0x40
 80029f6:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	2036      	movs	r0, #54	; 0x36
 8002a08:	f001 f8ff 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a0c:	2036      	movs	r0, #54	; 0x36
 8002a0e:	f001 f918 	bl	8003c42 <HAL_NVIC_EnableIRQ>
}
 8002a12:	e018      	b.n	8002a46 <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM8)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <HAL_TIM_Base_MspInit+0x128>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d113      	bne.n	8002a46 <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 8002a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a22:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 8002a24:	f043 0302 	orr.w	r3, r3, #2
 8002a28:	6453      	str	r3, [r2, #68]	; 0x44
 8002a2a:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <HAL_TIM_Base_MspInit+0x118>)
 8002a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8002a36:	2200      	movs	r2, #0
 8002a38:	2101      	movs	r1, #1
 8002a3a:	202e      	movs	r0, #46	; 0x2e
 8002a3c:	f001 f8e5 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002a40:	202e      	movs	r0, #46	; 0x2e
 8002a42:	f001 f8fe 	bl	8003c42 <HAL_NVIC_EnableIRQ>
}
 8002a46:	bf00      	nop
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000c00 	.word	0x40000c00
 8002a60:	40001000 	.word	0x40001000
 8002a64:	40010400 	.word	0x40010400

08002a68 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 0314 	add.w	r3, r7, #20
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a88:	d160      	bne.n	8002b4c <HAL_TIM_IC_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a8a:	4b32      	ldr	r3, [pc, #200]	; (8002b54 <HAL_TIM_IC_MspInit+0xec>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	4a31      	ldr	r2, [pc, #196]	; (8002b54 <HAL_TIM_IC_MspInit+0xec>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6413      	str	r3, [r2, #64]	; 0x40
 8002a96:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <HAL_TIM_IC_MspInit+0xec>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa2:	4b2c      	ldr	r3, [pc, #176]	; (8002b54 <HAL_TIM_IC_MspInit+0xec>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a2b      	ldr	r2, [pc, #172]	; (8002b54 <HAL_TIM_IC_MspInit+0xec>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b29      	ldr	r3, [pc, #164]	; (8002b54 <HAL_TIM_IC_MspInit+0xec>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8002aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002acc:	2301      	movs	r3, #1
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8002ad0:	f107 0314 	add.w	r3, r7, #20
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4820      	ldr	r0, [pc, #128]	; (8002b58 <HAL_TIM_IC_MspInit+0xf0>)
 8002ad8:	f001 fc66 	bl	80043a8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002adc:	4b1f      	ldr	r3, [pc, #124]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002ade:	4a20      	ldr	r2, [pc, #128]	; (8002b60 <HAL_TIM_IC_MspInit+0xf8>)
 8002ae0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002ae4:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002ae8:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aea:	4b1c      	ldr	r3, [pc, #112]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af0:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002af8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002afc:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002afe:	4b17      	ldr	r3, [pc, #92]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b04:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002b08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b0c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b1a:	4b10      	ldr	r3, [pc, #64]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002b20:	480e      	ldr	r0, [pc, #56]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002b22:	f001 f8a9 	bl	8003c78 <HAL_DMA_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_TIM_IC_MspInit+0xc8>
    {
      Error_Handler();
 8002b2c:	f7ff fd28 	bl	8002580 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a0a      	ldr	r2, [pc, #40]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_TIM_IC_MspInit+0xf4>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	2101      	movs	r1, #1
 8002b40:	201c      	movs	r0, #28
 8002b42:	f001 f862 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b46:	201c      	movs	r0, #28
 8002b48:	f001 f87b 	bl	8003c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002b4c:	bf00      	nop
 8002b4e:	3728      	adds	r7, #40	; 0x28
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40023800 	.word	0x40023800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	200040e4 	.word	0x200040e4
 8002b60:	40026088 	.word	0x40026088

08002b64 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0d      	ldr	r2, [pc, #52]	; (8002ba8 <HAL_TIM_PWM_MspInit+0x44>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d113      	bne.n	8002b9e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b76:	4b0d      	ldr	r3, [pc, #52]	; (8002bac <HAL_TIM_PWM_MspInit+0x48>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	4a0c      	ldr	r2, [pc, #48]	; (8002bac <HAL_TIM_PWM_MspInit+0x48>)
 8002b7c:	f043 0304 	orr.w	r3, r3, #4
 8002b80:	6413      	str	r3, [r2, #64]	; 0x40
 8002b82:	4b0a      	ldr	r3, [pc, #40]	; (8002bac <HAL_TIM_PWM_MspInit+0x48>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 0304 	and.w	r3, r3, #4
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2101      	movs	r1, #1
 8002b92:	201e      	movs	r0, #30
 8002b94:	f001 f839 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b98:	201e      	movs	r0, #30
 8002b9a:	f001 f852 	bl	8003c42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40000800 	.word	0x40000800
 8002bac:	40023800 	.word	0x40023800

08002bb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 031c 	add.w	r3, r7, #28
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
 8002bc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a45      	ldr	r2, [pc, #276]	; (8002ce4 <HAL_TIM_MspPostInit+0x134>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d11d      	bne.n	8002c0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bd2:	4b45      	ldr	r3, [pc, #276]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a44      	ldr	r2, [pc, #272]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002bd8:	f043 0310 	orr.w	r3, r3, #16
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0310 	and.w	r3, r3, #16
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 8002bea:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	4619      	mov	r1, r3
 8002c06:	4839      	ldr	r0, [pc, #228]	; (8002cec <HAL_TIM_MspPostInit+0x13c>)
 8002c08:	f001 fbce 	bl	80043a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002c0c:	e065      	b.n	8002cda <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a37      	ldr	r2, [pc, #220]	; (8002cf0 <HAL_TIM_MspPostInit+0x140>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d11c      	bne.n	8002c52 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c18:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	4a32      	ldr	r2, [pc, #200]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002c1e:	f043 0301 	orr.w	r3, r3, #1
 8002c22:	6313      	str	r3, [r2, #48]	; 0x30
 8002c24:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 8002c30:	2340      	movs	r3, #64	; 0x40
 8002c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c34:	2302      	movs	r3, #2
 8002c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c40:	2302      	movs	r3, #2
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	4619      	mov	r1, r3
 8002c4a:	482a      	ldr	r0, [pc, #168]	; (8002cf4 <HAL_TIM_MspPostInit+0x144>)
 8002c4c:	f001 fbac 	bl	80043a8 <HAL_GPIO_Init>
}
 8002c50:	e043      	b.n	8002cda <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <HAL_TIM_MspPostInit+0x148>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d11d      	bne.n	8002c98 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	4a21      	ldr	r2, [pc, #132]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002c62:	f043 0308 	orr.w	r3, r3, #8
 8002c66:	6313      	str	r3, [r2, #48]	; 0x30
 8002c68:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	f003 0308 	and.w	r3, r3, #8
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 8002c74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c86:	2302      	movs	r3, #2
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002c8a:	f107 031c 	add.w	r3, r7, #28
 8002c8e:	4619      	mov	r1, r3
 8002c90:	481a      	ldr	r0, [pc, #104]	; (8002cfc <HAL_TIM_MspPostInit+0x14c>)
 8002c92:	f001 fb89 	bl	80043a8 <HAL_GPIO_Init>
}
 8002c96:	e020      	b.n	8002cda <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <HAL_TIM_MspPostInit+0x150>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d11b      	bne.n	8002cda <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca2:	4b11      	ldr	r3, [pc, #68]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca6:	4a10      	ldr	r2, [pc, #64]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002ca8:	f043 0304 	orr.w	r3, r3, #4
 8002cac:	6313      	str	r3, [r2, #48]	; 0x30
 8002cae:	4b0e      	ldr	r3, [pc, #56]	; (8002ce8 <HAL_TIM_MspPostInit+0x138>)
 8002cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 8002cba:	2340      	movs	r3, #64	; 0x40
 8002cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 8002cce:	f107 031c 	add.w	r3, r7, #28
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	480b      	ldr	r0, [pc, #44]	; (8002d04 <HAL_TIM_MspPostInit+0x154>)
 8002cd6:	f001 fb67 	bl	80043a8 <HAL_GPIO_Init>
}
 8002cda:	bf00      	nop
 8002cdc:	3730      	adds	r7, #48	; 0x30
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	40010000 	.word	0x40010000
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40021000 	.word	0x40021000
 8002cf0:	40000400 	.word	0x40000400
 8002cf4:	40020000 	.word	0x40020000
 8002cf8:	40000800 	.word	0x40000800
 8002cfc:	40020c00 	.word	0x40020c00
 8002d00:	40010400 	.word	0x40010400
 8002d04:	40020800 	.word	0x40020800

08002d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b092      	sub	sp, #72	; 0x48
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	605a      	str	r2, [r3, #4]
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	60da      	str	r2, [r3, #12]
 8002d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a79      	ldr	r2, [pc, #484]	; (8002f0c <HAL_UART_MspInit+0x204>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d129      	bne.n	8002d7e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002d2a:	4b79      	ldr	r3, [pc, #484]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a78      	ldr	r2, [pc, #480]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
 8002d36:	4b76      	ldr	r3, [pc, #472]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	4b73      	ldr	r3, [pc, #460]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d46:	4a72      	ldr	r2, [pc, #456]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4e:	4b70      	ldr	r3, [pc, #448]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = UART5_RX_Pin|UART5_TX_Pin;
 8002d5a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d5e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d74:	4619      	mov	r1, r3
 8002d76:	4867      	ldr	r0, [pc, #412]	; (8002f14 <HAL_UART_MspInit+0x20c>)
 8002d78:	f001 fb16 	bl	80043a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d7c:	e0c1      	b.n	8002f02 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==UART7)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a65      	ldr	r2, [pc, #404]	; (8002f18 <HAL_UART_MspInit+0x210>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d129      	bne.n	8002ddc <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002d88:	4b61      	ldr	r3, [pc, #388]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	4a60      	ldr	r2, [pc, #384]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002d8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d92:	6413      	str	r3, [r2, #64]	; 0x40
 8002d94:	4b5e      	ldr	r3, [pc, #376]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002da0:	4b5b      	ldr	r3, [pc, #364]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	4a5a      	ldr	r2, [pc, #360]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002da6:	f043 0310 	orr.w	r3, r3, #16
 8002daa:	6313      	str	r3, [r2, #48]	; 0x30
 8002dac:	4b58      	ldr	r3, [pc, #352]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f003 0310 	and.w	r3, r3, #16
 8002db4:	627b      	str	r3, [r7, #36]	; 0x24
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002db8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002dbc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002dca:	2308      	movs	r3, #8
 8002dcc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4851      	ldr	r0, [pc, #324]	; (8002f1c <HAL_UART_MspInit+0x214>)
 8002dd6:	f001 fae7 	bl	80043a8 <HAL_GPIO_Init>
}
 8002dda:	e092      	b.n	8002f02 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a4f      	ldr	r2, [pc, #316]	; (8002f20 <HAL_UART_MspInit+0x218>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d129      	bne.n	8002e3a <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002de6:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	4a49      	ldr	r2, [pc, #292]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002dec:	f043 0310 	orr.w	r3, r3, #16
 8002df0:	6453      	str	r3, [r2, #68]	; 0x44
 8002df2:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	f003 0310 	and.w	r3, r3, #16
 8002dfa:	623b      	str	r3, [r7, #32]
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	4b44      	ldr	r3, [pc, #272]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	4a43      	ldr	r2, [pc, #268]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002e04:	f043 0302 	orr.w	r3, r3, #2
 8002e08:	6313      	str	r3, [r2, #48]	; 0x30
 8002e0a:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	61fb      	str	r3, [r7, #28]
 8002e14:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 8002e16:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002e1a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e24:	2303      	movs	r3, #3
 8002e26:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002e28:	2304      	movs	r3, #4
 8002e2a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e30:	4619      	mov	r1, r3
 8002e32:	4838      	ldr	r0, [pc, #224]	; (8002f14 <HAL_UART_MspInit+0x20c>)
 8002e34:	f001 fab8 	bl	80043a8 <HAL_GPIO_Init>
}
 8002e38:	e063      	b.n	8002f02 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a39      	ldr	r2, [pc, #228]	; (8002f24 <HAL_UART_MspInit+0x21c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d128      	bne.n	8002e96 <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e44:	4b32      	ldr	r3, [pc, #200]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	4a31      	ldr	r2, [pc, #196]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002e4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e4e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e50:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	61bb      	str	r3, [r7, #24]
 8002e5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5c:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e60:	4a2b      	ldr	r2, [pc, #172]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6313      	str	r3, [r2, #48]	; 0x30
 8002e68:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
 8002e72:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 8002e74:	230c      	movs	r3, #12
 8002e76:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e80:	2303      	movs	r3, #3
 8002e82:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e84:	2307      	movs	r3, #7
 8002e86:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4826      	ldr	r0, [pc, #152]	; (8002f28 <HAL_UART_MspInit+0x220>)
 8002e90:	f001 fa8a 	bl	80043a8 <HAL_GPIO_Init>
}
 8002e94:	e035      	b.n	8002f02 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a24      	ldr	r2, [pc, #144]	; (8002f2c <HAL_UART_MspInit+0x224>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d130      	bne.n	8002f02 <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	4a1a      	ldr	r2, [pc, #104]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8002eac:	4b18      	ldr	r3, [pc, #96]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eb8:	4b15      	ldr	r3, [pc, #84]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	4a14      	ldr	r2, [pc, #80]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002ebe:	f043 0302 	orr.w	r3, r3, #2
 8002ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <HAL_UART_MspInit+0x208>)
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	60fb      	str	r3, [r7, #12]
 8002ece:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 8002ed0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002eea:	4619      	mov	r1, r3
 8002eec:	4809      	ldr	r0, [pc, #36]	; (8002f14 <HAL_UART_MspInit+0x20c>)
 8002eee:	f001 fa5b 	bl	80043a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	2027      	movs	r0, #39	; 0x27
 8002ef8:	f000 fe87 	bl	8003c0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002efc:	2027      	movs	r0, #39	; 0x27
 8002efe:	f000 fea0 	bl	8003c42 <HAL_NVIC_EnableIRQ>
}
 8002f02:	bf00      	nop
 8002f04:	3748      	adds	r7, #72	; 0x48
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40005000 	.word	0x40005000
 8002f10:	40023800 	.word	0x40023800
 8002f14:	40020400 	.word	0x40020400
 8002f18:	40007800 	.word	0x40007800
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	40011000 	.word	0x40011000
 8002f24:	40004400 	.word	0x40004400
 8002f28:	40020000 	.word	0x40020000
 8002f2c:	40004800 	.word	0x40004800

08002f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f42:	e7fe      	b.n	8002f42 <HardFault_Handler+0x4>

08002f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f48:	e7fe      	b.n	8002f48 <MemManage_Handler+0x4>

08002f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f4e:	e7fe      	b.n	8002f4e <BusFault_Handler+0x4>

08002f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f54:	e7fe      	b.n	8002f54 <UsageFault_Handler+0x4>

08002f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f56:	b480      	push	{r7}
 8002f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f68:	bf00      	nop
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f84:	f000 f918 	bl	80031b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f88:	bf00      	nop
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002f90:	4802      	ldr	r0, [pc, #8]	; (8002f9c <DMA1_Stream5_IRQHandler+0x10>)
 8002f92:	f000 ffa1 	bl	8003ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200040e4 	.word	0x200040e4

08002fa0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fa4:	4802      	ldr	r0, [pc, #8]	; (8002fb0 <TIM1_CC_IRQHandler+0x10>)
 8002fa6:	f003 ff55 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002faa:	bf00      	nop
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	2002f73c 	.word	0x2002f73c

08002fb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002fb8:	4802      	ldr	r0, [pc, #8]	; (8002fc4 <TIM2_IRQHandler+0x10>)
 8002fba:	f003 ff4b 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	2002f7e0 	.word	0x2002f7e0

08002fc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002fcc:	4802      	ldr	r0, [pc, #8]	; (8002fd8 <TIM3_IRQHandler+0x10>)
 8002fce:	f003 ff41 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	2002f464 	.word	0x2002f464

08002fdc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002fe0:	4802      	ldr	r0, [pc, #8]	; (8002fec <TIM4_IRQHandler+0x10>)
 8002fe2:	f003 ff37 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20004204 	.word	0x20004204

08002ff0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ff4:	4802      	ldr	r0, [pc, #8]	; (8003000 <USART3_IRQHandler+0x10>)
 8002ff6:	f005 fbcd 	bl	8008794 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20004244 	.word	0x20004244

08003004 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <TIM8_CC_IRQHandler+0x10>)
 800300a:	f003 ff23 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	200041c4 	.word	0x200041c4

08003018 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800301c:	4802      	ldr	r0, [pc, #8]	; (8003028 <TIM5_IRQHandler+0x10>)
 800301e:	f003 ff19 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	2002f424 	.word	0x2002f424

0800302c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003030:	4802      	ldr	r0, [pc, #8]	; (800303c <TIM6_DAC_IRQHandler+0x10>)
 8003032:	f003 ff0f 	bl	8006e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2002f6f8 	.word	0x2002f6f8

08003040 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003044:	4802      	ldr	r0, [pc, #8]	; (8003050 <DMA2_Stream0_IRQHandler+0x10>)
 8003046:	f000 ff47 	bl	8003ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20045128 	.word	0x20045128

08003054 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003058:	4802      	ldr	r0, [pc, #8]	; (8003064 <DMA2_Stream4_IRQHandler+0x10>)
 800305a:	f000 ff3d 	bl	8003ed8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	2002f664 	.word	0x2002f664

08003068 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003070:	4b11      	ldr	r3, [pc, #68]	; (80030b8 <_sbrk+0x50>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d102      	bne.n	800307e <_sbrk+0x16>
		heap_end = &end;
 8003078:	4b0f      	ldr	r3, [pc, #60]	; (80030b8 <_sbrk+0x50>)
 800307a:	4a10      	ldr	r2, [pc, #64]	; (80030bc <_sbrk+0x54>)
 800307c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800307e:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <_sbrk+0x50>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003084:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <_sbrk+0x50>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	466a      	mov	r2, sp
 800308e:	4293      	cmp	r3, r2
 8003090:	d907      	bls.n	80030a2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003092:	f006 f9e9 	bl	8009468 <__errno>
 8003096:	4602      	mov	r2, r0
 8003098:	230c      	movs	r3, #12
 800309a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800309c:	f04f 33ff 	mov.w	r3, #4294967295
 80030a0:	e006      	b.n	80030b0 <_sbrk+0x48>
	}

	heap_end += incr;
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <_sbrk+0x50>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	4a03      	ldr	r2, [pc, #12]	; (80030b8 <_sbrk+0x50>)
 80030ac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000208 	.word	0x20000208
 80030bc:	2005aa18 	.word	0x2005aa18

080030c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <SystemInit+0x28>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <SystemInit+0x28>)
 80030cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <SystemInit+0x28>)
 80030d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030da:	609a      	str	r2, [r3, #8]
#endif
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	e000ed00 	.word	0xe000ed00

080030ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003124 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030f0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030f2:	e003      	b.n	80030fc <LoopCopyDataInit>

080030f4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030f4:	4b0c      	ldr	r3, [pc, #48]	; (8003128 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030f6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030f8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030fa:	3104      	adds	r1, #4

080030fc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030fc:	480b      	ldr	r0, [pc, #44]	; (800312c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030fe:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003100:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003102:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003104:	d3f6      	bcc.n	80030f4 <CopyDataInit>
  ldr  r2, =_sbss
 8003106:	4a0b      	ldr	r2, [pc, #44]	; (8003134 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003108:	e002      	b.n	8003110 <LoopFillZerobss>

0800310a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800310a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800310c:	f842 3b04 	str.w	r3, [r2], #4

08003110 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003110:	4b09      	ldr	r3, [pc, #36]	; (8003138 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003112:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003114:	d3f9      	bcc.n	800310a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003116:	f7ff ffd3 	bl	80030c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800311a:	f006 f9ab 	bl	8009474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800311e:	f7fd fa77 	bl	8000610 <main>
  bx  lr    
 8003122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003124:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003128:	0800a1e8 	.word	0x0800a1e8
  ldr  r0, =_sdata
 800312c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003130:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8003134:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8003138:	2005aa18 	.word	0x2005aa18

0800313c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800313c:	e7fe      	b.n	800313c <ADC_IRQHandler>

0800313e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003142:	2003      	movs	r0, #3
 8003144:	f000 fd56 	bl	8003bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003148:	2000      	movs	r0, #0
 800314a:	f000 f805 	bl	8003158 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800314e:	f7ff fa1f 	bl	8002590 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}

08003158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <HAL_InitTick+0x54>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_InitTick+0x58>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800316e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003172:	fbb2 f3f3 	udiv	r3, r2, r3
 8003176:	4618      	mov	r0, r3
 8003178:	f000 fd71 	bl	8003c5e <HAL_SYSTICK_Config>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e00e      	b.n	80031a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b0f      	cmp	r3, #15
 800318a:	d80a      	bhi.n	80031a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800318c:	2200      	movs	r2, #0
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	f04f 30ff 	mov.w	r0, #4294967295
 8003194:	f000 fd39 	bl	8003c0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003198:	4a06      	ldr	r2, [pc, #24]	; (80031b4 <HAL_InitTick+0x5c>)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	e000      	b.n	80031a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	20000008 	.word	0x20000008
 80031b0:	20000010 	.word	0x20000010
 80031b4:	2000000c 	.word	0x2000000c

080031b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031bc:	4b06      	ldr	r3, [pc, #24]	; (80031d8 <HAL_IncTick+0x20>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b06      	ldr	r3, [pc, #24]	; (80031dc <HAL_IncTick+0x24>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4413      	add	r3, r2
 80031c8:	4a04      	ldr	r2, [pc, #16]	; (80031dc <HAL_IncTick+0x24>)
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000010 	.word	0x20000010
 80031dc:	2005aa10 	.word	0x2005aa10

080031e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
  return uwTick;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <HAL_GetTick+0x14>)
 80031e6:	681b      	ldr	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	2005aa10 	.word	0x2005aa10

080031f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003200:	f7ff ffee 	bl	80031e0 <HAL_GetTick>
 8003204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d005      	beq.n	800321e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_Delay+0x40>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4413      	add	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800321e:	bf00      	nop
 8003220:	f7ff ffde 	bl	80031e0 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	429a      	cmp	r2, r3
 800322e:	d8f7      	bhi.n	8003220 <HAL_Delay+0x28>
  {
  }
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	20000010 	.word	0x20000010

0800323c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e031      	b.n	80032b6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f7ff f9bc 	bl	80025d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	2b00      	cmp	r3, #0
 8003278:	d116      	bne.n	80032a8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <HAL_ADC_Init+0x84>)
 8003280:	4013      	ands	r3, r2
 8003282:	f043 0202 	orr.w	r2, r3, #2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 fa66 	bl	800375c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	f043 0201 	orr.w	r2, r3, #1
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
 80032a6:	e001      	b.n	80032ac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	ffffeefd 	.word	0xffffeefd

080032c4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_Start_DMA+0x1e>
 80032de:	2302      	movs	r3, #2
 80032e0:	e0c7      	b.n	8003472 <HAL_ADC_Start_DMA+0x1ae>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d018      	beq.n	800332a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0201 	orr.w	r2, r2, #1
 8003306:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003308:	4b5c      	ldr	r3, [pc, #368]	; (800347c <HAL_ADC_Start_DMA+0x1b8>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a5c      	ldr	r2, [pc, #368]	; (8003480 <HAL_ADC_Start_DMA+0x1bc>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	0c9a      	lsrs	r2, r3, #18
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800331c:	e002      	b.n	8003324 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3b01      	subs	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f9      	bne.n	800331e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	f040 809b 	bne.w	8003470 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800333e:	4b51      	ldr	r3, [pc, #324]	; (8003484 <HAL_ADC_Start_DMA+0x1c0>)
 8003340:	4013      	ands	r3, r2
 8003342:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003360:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003374:	d106      	bne.n	8003384 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f023 0206 	bic.w	r2, r3, #6
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
 8003382:	e002      	b.n	800338a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	4a3c      	ldr	r2, [pc, #240]	; (8003488 <HAL_ADC_Start_DMA+0x1c4>)
 8003398:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800339e:	4a3b      	ldr	r2, [pc, #236]	; (800348c <HAL_ADC_Start_DMA+0x1c8>)
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a6:	4a3a      	ldr	r2, [pc, #232]	; (8003490 <HAL_ADC_Start_DMA+0x1cc>)
 80033a8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033b2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685a      	ldr	r2, [r3, #4]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80033c2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033d2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	334c      	adds	r3, #76	; 0x4c
 80033de:	4619      	mov	r1, r3
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f000 fcf6 	bl	8003dd4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80033e8:	4b2a      	ldr	r3, [pc, #168]	; (8003494 <HAL_ADC_Start_DMA+0x1d0>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10f      	bne.n	8003414 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d136      	bne.n	8003470 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689a      	ldr	r2, [r3, #8]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	e02d      	b.n	8003470 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1f      	ldr	r2, [pc, #124]	; (8003498 <HAL_ADC_Start_DMA+0x1d4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10e      	bne.n	800343c <HAL_ADC_Start_DMA+0x178>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800343a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800343c:	4b15      	ldr	r3, [pc, #84]	; (8003494 <HAL_ADC_Start_DMA+0x1d0>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0310 	and.w	r3, r3, #16
 8003444:	2b00      	cmp	r3, #0
 8003446:	d113      	bne.n	8003470 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a13      	ldr	r2, [pc, #76]	; (800349c <HAL_ADC_Start_DMA+0x1d8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10e      	bne.n	8003470 <HAL_ADC_Start_DMA+0x1ac>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d107      	bne.n	8003470 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800346e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	20000008 	.word	0x20000008
 8003480:	431bde83 	.word	0x431bde83
 8003484:	fffff8fe 	.word	0xfffff8fe
 8003488:	08003951 	.word	0x08003951
 800348c:	08003a0b 	.word	0x08003a0b
 8003490:	08003a27 	.word	0x08003a27
 8003494:	40012300 	.word	0x40012300
 8003498:	40012000 	.word	0x40012000
 800349c:	40012200 	.word	0x40012200

080034a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x1c>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e12a      	b.n	800373a <HAL_ADC_ConfigChannel+0x272>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	d93a      	bls.n	800356a <HAL_ADC_ConfigChannel+0xa2>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034fc:	d035      	beq.n	800356a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68d9      	ldr	r1, [r3, #12]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	3b1e      	subs	r3, #30
 8003514:	2207      	movs	r2, #7
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a87      	ldr	r2, [pc, #540]	; (8003748 <HAL_ADC_ConfigChannel+0x280>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d10a      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68d9      	ldr	r1, [r3, #12]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	061a      	lsls	r2, r3, #24
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003542:	e035      	b.n	80035b0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68d9      	ldr	r1, [r3, #12]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	b29b      	uxth	r3, r3
 8003554:	4618      	mov	r0, r3
 8003556:	4603      	mov	r3, r0
 8003558:	005b      	lsls	r3, r3, #1
 800355a:	4403      	add	r3, r0
 800355c:	3b1e      	subs	r3, #30
 800355e:	409a      	lsls	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003568:	e022      	b.n	80035b0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6919      	ldr	r1, [r3, #16]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	b29b      	uxth	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	4613      	mov	r3, r2
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	4413      	add	r3, r2
 800357e:	2207      	movs	r2, #7
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43da      	mvns	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	400a      	ands	r2, r1
 800358c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6919      	ldr	r1, [r3, #16]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	4603      	mov	r3, r0
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	4403      	add	r3, r0
 80035a6:	409a      	lsls	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b06      	cmp	r3, #6
 80035b6:	d824      	bhi.n	8003602 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	4413      	add	r3, r2
 80035c8:	3b05      	subs	r3, #5
 80035ca:	221f      	movs	r2, #31
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	43da      	mvns	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	400a      	ands	r2, r1
 80035d8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	4618      	mov	r0, r3
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	3b05      	subs	r3, #5
 80035f4:	fa00 f203 	lsl.w	r2, r0, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003600:	e04c      	b.n	800369c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b0c      	cmp	r3, #12
 8003608:	d824      	bhi.n	8003654 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4413      	add	r3, r2
 800361a:	3b23      	subs	r3, #35	; 0x23
 800361c:	221f      	movs	r2, #31
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43da      	mvns	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	400a      	ands	r2, r1
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	b29b      	uxth	r3, r3
 8003638:	4618      	mov	r0, r3
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	4413      	add	r3, r2
 8003644:	3b23      	subs	r3, #35	; 0x23
 8003646:	fa00 f203 	lsl.w	r2, r0, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	631a      	str	r2, [r3, #48]	; 0x30
 8003652:	e023      	b.n	800369c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	3b41      	subs	r3, #65	; 0x41
 8003666:	221f      	movs	r2, #31
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43da      	mvns	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	400a      	ands	r2, r1
 8003674:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	b29b      	uxth	r3, r3
 8003682:	4618      	mov	r0, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	4413      	add	r3, r2
 800368e:	3b41      	subs	r3, #65	; 0x41
 8003690:	fa00 f203 	lsl.w	r2, r0, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	430a      	orrs	r2, r1
 800369a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2a      	ldr	r2, [pc, #168]	; (800374c <HAL_ADC_ConfigChannel+0x284>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d10a      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x1f4>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036ae:	d105      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80036b0:	4b27      	ldr	r3, [pc, #156]	; (8003750 <HAL_ADC_ConfigChannel+0x288>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	4a26      	ldr	r2, [pc, #152]	; (8003750 <HAL_ADC_ConfigChannel+0x288>)
 80036b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80036ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a22      	ldr	r2, [pc, #136]	; (800374c <HAL_ADC_ConfigChannel+0x284>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d109      	bne.n	80036da <HAL_ADC_ConfigChannel+0x212>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b12      	cmp	r3, #18
 80036cc:	d105      	bne.n	80036da <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036ce:	4b20      	ldr	r3, [pc, #128]	; (8003750 <HAL_ADC_ConfigChannel+0x288>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	4a1f      	ldr	r2, [pc, #124]	; (8003750 <HAL_ADC_ConfigChannel+0x288>)
 80036d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a1b      	ldr	r2, [pc, #108]	; (800374c <HAL_ADC_ConfigChannel+0x284>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d125      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x268>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a17      	ldr	r2, [pc, #92]	; (8003748 <HAL_ADC_ConfigChannel+0x280>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d003      	beq.n	80036f6 <HAL_ADC_ConfigChannel+0x22e>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2b11      	cmp	r3, #17
 80036f4:	d11c      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <HAL_ADC_ConfigChannel+0x288>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4a15      	ldr	r2, [pc, #84]	; (8003750 <HAL_ADC_ConfigChannel+0x288>)
 80036fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003700:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a10      	ldr	r2, [pc, #64]	; (8003748 <HAL_ADC_ConfigChannel+0x280>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d111      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_ADC_ConfigChannel+0x28c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a11      	ldr	r2, [pc, #68]	; (8003758 <HAL_ADC_ConfigChannel+0x290>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0c9a      	lsrs	r2, r3, #18
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003722:	e002      	b.n	800372a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3b01      	subs	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f9      	bne.n	8003724 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	10000012 	.word	0x10000012
 800374c:	40012000 	.word	0x40012000
 8003750:	40012300 	.word	0x40012300
 8003754:	20000008 	.word	0x20000008
 8003758:	431bde83 	.word	0x431bde83

0800375c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003764:	4b78      	ldr	r3, [pc, #480]	; (8003948 <ADC_Init+0x1ec>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	4a77      	ldr	r2, [pc, #476]	; (8003948 <ADC_Init+0x1ec>)
 800376a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800376e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003770:	4b75      	ldr	r3, [pc, #468]	; (8003948 <ADC_Init+0x1ec>)
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	4973      	ldr	r1, [pc, #460]	; (8003948 <ADC_Init+0x1ec>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800378c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	021a      	lsls	r2, r3, #8
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80037b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	6859      	ldr	r1, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6899      	ldr	r1, [r3, #8]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ea:	4a58      	ldr	r2, [pc, #352]	; (800394c <ADC_Init+0x1f0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d022      	beq.n	8003836 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6899      	ldr	r1, [r3, #8]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6899      	ldr	r1, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	e00f      	b.n	8003856 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003854:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f022 0202 	bic.w	r2, r2, #2
 8003864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6899      	ldr	r1, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	005a      	lsls	r2, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01b      	beq.n	80038bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003892:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80038a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	3b01      	subs	r3, #1
 80038b0:	035a      	lsls	r2, r3, #13
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	e007      	b.n	80038cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	3b01      	subs	r3, #1
 80038e8:	051a      	lsls	r2, r3, #20
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689a      	ldr	r2, [r3, #8]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6899      	ldr	r1, [r3, #8]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800390e:	025a      	lsls	r2, r3, #9
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6899      	ldr	r1, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	029a      	lsls	r2, r3, #10
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	609a      	str	r2, [r3, #8]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	40012300 	.word	0x40012300
 800394c:	0f000001 	.word	0x0f000001

08003950 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003966:	2b00      	cmp	r3, #0
 8003968:	d13c      	bne.n	80039e4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d12b      	bne.n	80039dc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003988:	2b00      	cmp	r3, #0
 800398a:	d127      	bne.n	80039dc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003992:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003996:	2b00      	cmp	r3, #0
 8003998:	d006      	beq.n	80039a8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d119      	bne.n	80039dc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 0220 	bic.w	r2, r2, #32
 80039b6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d105      	bne.n	80039dc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f043 0201 	orr.w	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f7fe f909 	bl	8001bf4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80039e2:	e00e      	b.n	8003a02 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff fd5f 	bl	80034b4 <HAL_ADC_ErrorCallback>
}
 80039f6:	e004      	b.n	8003a02 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b084      	sub	sp, #16
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f7ff fd41 	bl	80034a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a32:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2240      	movs	r2, #64	; 0x40
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7ff fd34 	bl	80034b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a4c:	bf00      	nop
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <__NVIC_SetPriorityGrouping+0x40>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a70:	4013      	ands	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a7c:	4b06      	ldr	r3, [pc, #24]	; (8003a98 <__NVIC_SetPriorityGrouping+0x44>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a82:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <__NVIC_SetPriorityGrouping+0x40>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	60d3      	str	r3, [r2, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000ed00 	.word	0xe000ed00
 8003a98:	05fa0000 	.word	0x05fa0000

08003a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa0:	4b04      	ldr	r3, [pc, #16]	; (8003ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	0a1b      	lsrs	r3, r3, #8
 8003aa6:	f003 0307 	and.w	r3, r3, #7
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	e000ed00 	.word	0xe000ed00

08003ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	db0b      	blt.n	8003ae2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	f003 021f 	and.w	r2, r3, #31
 8003ad0:	4907      	ldr	r1, [pc, #28]	; (8003af0 <__NVIC_EnableIRQ+0x38>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	095b      	lsrs	r3, r3, #5
 8003ad8:	2001      	movs	r0, #1
 8003ada:	fa00 f202 	lsl.w	r2, r0, r2
 8003ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	e000e100 	.word	0xe000e100

08003af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	4603      	mov	r3, r0
 8003afc:	6039      	str	r1, [r7, #0]
 8003afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	db0a      	blt.n	8003b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	490c      	ldr	r1, [pc, #48]	; (8003b40 <__NVIC_SetPriority+0x4c>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	0112      	lsls	r2, r2, #4
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	440b      	add	r3, r1
 8003b18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b1c:	e00a      	b.n	8003b34 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	4908      	ldr	r1, [pc, #32]	; (8003b44 <__NVIC_SetPriority+0x50>)
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	0112      	lsls	r2, r2, #4
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	440b      	add	r3, r1
 8003b32:	761a      	strb	r2, [r3, #24]
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	e000e100 	.word	0xe000e100
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b089      	sub	sp, #36	; 0x24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	f1c3 0307 	rsb	r3, r3, #7
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	bf28      	it	cs
 8003b66:	2304      	movcs	r3, #4
 8003b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	3304      	adds	r3, #4
 8003b6e:	2b06      	cmp	r3, #6
 8003b70:	d902      	bls.n	8003b78 <NVIC_EncodePriority+0x30>
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	3b03      	subs	r3, #3
 8003b76:	e000      	b.n	8003b7a <NVIC_EncodePriority+0x32>
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43da      	mvns	r2, r3
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	401a      	ands	r2, r3
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b90:	f04f 31ff 	mov.w	r1, #4294967295
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	43d9      	mvns	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	4313      	orrs	r3, r2
         );
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
	...

08003bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bc0:	d301      	bcc.n	8003bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e00f      	b.n	8003be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <SysTick_Config+0x40>)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bce:	210f      	movs	r1, #15
 8003bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd4:	f7ff ff8e 	bl	8003af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd8:	4b05      	ldr	r3, [pc, #20]	; (8003bf0 <SysTick_Config+0x40>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bde:	4b04      	ldr	r3, [pc, #16]	; (8003bf0 <SysTick_Config+0x40>)
 8003be0:	2207      	movs	r2, #7
 8003be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	e000e010 	.word	0xe000e010

08003bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff ff29 	bl	8003a54 <__NVIC_SetPriorityGrouping>
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	4603      	mov	r3, r0
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c1c:	f7ff ff3e 	bl	8003a9c <__NVIC_GetPriorityGrouping>
 8003c20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68b9      	ldr	r1, [r7, #8]
 8003c26:	6978      	ldr	r0, [r7, #20]
 8003c28:	f7ff ff8e 	bl	8003b48 <NVIC_EncodePriority>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c32:	4611      	mov	r1, r2
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7ff ff5d 	bl	8003af4 <__NVIC_SetPriority>
}
 8003c3a:	bf00      	nop
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b082      	sub	sp, #8
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4603      	mov	r3, r0
 8003c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7ff ff31 	bl	8003ab8 <__NVIC_EnableIRQ>
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff ffa2 	bl	8003bb0 <SysTick_Config>
 8003c6c:	4603      	mov	r3, r0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c84:	f7ff faac 	bl	80031e0 <HAL_GetTick>
 8003c88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e099      	b.n	8003dc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 0201 	bic.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cb4:	e00f      	b.n	8003cd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003cb6:	f7ff fa93 	bl	80031e0 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b05      	cmp	r3, #5
 8003cc2:	d908      	bls.n	8003cd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2203      	movs	r2, #3
 8003cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e078      	b.n	8003dc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e8      	bne.n	8003cb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4b38      	ldr	r3, [pc, #224]	; (8003dd0 <HAL_DMA_Init+0x158>)
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d107      	bne.n	8003d40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0307 	bic.w	r3, r3, #7
 8003d56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d117      	bne.n	8003d9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00e      	beq.n	8003d9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fa99 	bl	80042b4 <DMA_CheckFifoParam>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d008      	beq.n	8003d9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2240      	movs	r2, #64	; 0x40
 8003d8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d96:	2301      	movs	r3, #1
 8003d98:	e016      	b.n	8003dc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa50 	bl	8004248 <DMA_CalcBaseAndBitshift>
 8003da8:	4603      	mov	r3, r0
 8003daa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	223f      	movs	r2, #63	; 0x3f
 8003db2:	409a      	lsls	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	e010803f 	.word	0xe010803f

08003dd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
 8003de0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_DMA_Start_IT+0x26>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e048      	b.n	8003e8c <HAL_DMA_Start_IT+0xb8>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d137      	bne.n	8003e7e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2202      	movs	r2, #2
 8003e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f9e2 	bl	80041ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2c:	223f      	movs	r2, #63	; 0x3f
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0216 	orr.w	r2, r2, #22
 8003e42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003e52:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0208 	orr.w	r2, r2, #8
 8003e6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 0201 	orr.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]
 8003e7c:	e005      	b.n	8003e8a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e86:	2302      	movs	r3, #2
 8003e88:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d004      	beq.n	8003eb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e00c      	b.n	8003ecc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2205      	movs	r2, #5
 8003eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003ee4:	4b92      	ldr	r3, [pc, #584]	; (8004130 <HAL_DMA_IRQHandler+0x258>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a92      	ldr	r2, [pc, #584]	; (8004134 <HAL_DMA_IRQHandler+0x25c>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	0a9b      	lsrs	r3, r3, #10
 8003ef0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	2208      	movs	r2, #8
 8003f04:	409a      	lsls	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d01a      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d013      	beq.n	8003f44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f022 0204 	bic.w	r2, r2, #4
 8003f2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f30:	2208      	movs	r2, #8
 8003f32:	409a      	lsls	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	f043 0201 	orr.w	r2, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	2201      	movs	r2, #1
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d012      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00b      	beq.n	8003f7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	2201      	movs	r2, #1
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f72:	f043 0202 	orr.w	r2, r3, #2
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7e:	2204      	movs	r2, #4
 8003f80:	409a      	lsls	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4013      	ands	r3, r2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d012      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d00b      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa8:	f043 0204 	orr.w	r2, r3, #4
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d043      	beq.n	8004048 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0308 	and.w	r3, r3, #8
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d03c      	beq.n	8004048 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	409a      	lsls	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d018      	beq.n	800401a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d108      	bne.n	8004008 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d024      	beq.n	8004048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	4798      	blx	r3
 8004006:	e01f      	b.n	8004048 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01b      	beq.n	8004048 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	4798      	blx	r3
 8004018:	e016      	b.n	8004048 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0208 	bic.w	r2, r2, #8
 8004036:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	2220      	movs	r2, #32
 800404e:	409a      	lsls	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	f000 808e 	beq.w	8004176 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8086 	beq.w	8004176 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800406e:	2220      	movs	r2, #32
 8004070:	409a      	lsls	r2, r3
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b05      	cmp	r3, #5
 8004080:	d136      	bne.n	80040f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0216 	bic.w	r2, r2, #22
 8004090:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d103      	bne.n	80040b2 <HAL_DMA_IRQHandler+0x1da>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0208 	bic.w	r2, r2, #8
 80040c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c6:	223f      	movs	r2, #63	; 0x3f
 80040c8:	409a      	lsls	r2, r3
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d07d      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
        }
        return;
 80040ee:	e078      	b.n	80041e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d01c      	beq.n	8004138 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d108      	bne.n	800411e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004110:	2b00      	cmp	r3, #0
 8004112:	d030      	beq.n	8004176 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	4798      	blx	r3
 800411c:	e02b      	b.n	8004176 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d027      	beq.n	8004176 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	4798      	blx	r3
 800412e:	e022      	b.n	8004176 <HAL_DMA_IRQHandler+0x29e>
 8004130:	20000008 	.word	0x20000008
 8004134:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10f      	bne.n	8004166 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0210 	bic.w	r2, r2, #16
 8004154:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417a:	2b00      	cmp	r3, #0
 800417c:	d032      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d022      	beq.n	80041d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2205      	movs	r2, #5
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f022 0201 	bic.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	3301      	adds	r3, #1
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	697a      	ldr	r2, [r7, #20]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d307      	bcc.n	80041be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f2      	bne.n	80041a2 <HAL_DMA_IRQHandler+0x2ca>
 80041bc:	e000      	b.n	80041c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80041be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	4798      	blx	r3
 80041e0:	e000      	b.n	80041e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80041e2:	bf00      	nop
    }
  }
}
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop

080041ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004208:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b40      	cmp	r3, #64	; 0x40
 8004218:	d108      	bne.n	800422c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800422a:	e007      	b.n	800423c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	60da      	str	r2, [r3, #12]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	3b10      	subs	r3, #16
 8004258:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <DMA_CalcBaseAndBitshift+0x60>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004262:	4a12      	ldr	r2, [pc, #72]	; (80042ac <DMA_CalcBaseAndBitshift+0x64>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4413      	add	r3, r2
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b03      	cmp	r3, #3
 8004274:	d908      	bls.n	8004288 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	4b0c      	ldr	r3, [pc, #48]	; (80042b0 <DMA_CalcBaseAndBitshift+0x68>)
 800427e:	4013      	ands	r3, r2
 8004280:	1d1a      	adds	r2, r3, #4
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	659a      	str	r2, [r3, #88]	; 0x58
 8004286:	e006      	b.n	8004296 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <DMA_CalcBaseAndBitshift+0x68>)
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	aaaaaaab 	.word	0xaaaaaaab
 80042ac:	0800a090 	.word	0x0800a090
 80042b0:	fffffc00 	.word	0xfffffc00

080042b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d11f      	bne.n	800430e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2b03      	cmp	r3, #3
 80042d2:	d855      	bhi.n	8004380 <DMA_CheckFifoParam+0xcc>
 80042d4:	a201      	add	r2, pc, #4	; (adr r2, 80042dc <DMA_CheckFifoParam+0x28>)
 80042d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042da:	bf00      	nop
 80042dc:	080042ed 	.word	0x080042ed
 80042e0:	080042ff 	.word	0x080042ff
 80042e4:	080042ed 	.word	0x080042ed
 80042e8:	08004381 	.word	0x08004381
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d045      	beq.n	8004384 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042fc:	e042      	b.n	8004384 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004306:	d13f      	bne.n	8004388 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800430c:	e03c      	b.n	8004388 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004316:	d121      	bne.n	800435c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b03      	cmp	r3, #3
 800431c:	d836      	bhi.n	800438c <DMA_CheckFifoParam+0xd8>
 800431e:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <DMA_CheckFifoParam+0x70>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	08004335 	.word	0x08004335
 8004328:	0800433b 	.word	0x0800433b
 800432c:	08004335 	.word	0x08004335
 8004330:	0800434d 	.word	0x0800434d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
      break;
 8004338:	e02f      	b.n	800439a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d024      	beq.n	8004390 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800434a:	e021      	b.n	8004390 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004354:	d11e      	bne.n	8004394 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800435a:	e01b      	b.n	8004394 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b02      	cmp	r3, #2
 8004360:	d902      	bls.n	8004368 <DMA_CheckFifoParam+0xb4>
 8004362:	2b03      	cmp	r3, #3
 8004364:	d003      	beq.n	800436e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004366:	e018      	b.n	800439a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	73fb      	strb	r3, [r7, #15]
      break;
 800436c:	e015      	b.n	800439a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00e      	beq.n	8004398 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	73fb      	strb	r3, [r7, #15]
      break;
 800437e:	e00b      	b.n	8004398 <DMA_CheckFifoParam+0xe4>
      break;
 8004380:	bf00      	nop
 8004382:	e00a      	b.n	800439a <DMA_CheckFifoParam+0xe6>
      break;
 8004384:	bf00      	nop
 8004386:	e008      	b.n	800439a <DMA_CheckFifoParam+0xe6>
      break;
 8004388:	bf00      	nop
 800438a:	e006      	b.n	800439a <DMA_CheckFifoParam+0xe6>
      break;
 800438c:	bf00      	nop
 800438e:	e004      	b.n	800439a <DMA_CheckFifoParam+0xe6>
      break;
 8004390:	bf00      	nop
 8004392:	e002      	b.n	800439a <DMA_CheckFifoParam+0xe6>
      break;   
 8004394:	bf00      	nop
 8004396:	e000      	b.n	800439a <DMA_CheckFifoParam+0xe6>
      break;
 8004398:	bf00      	nop
    }
  } 
  
  return status; 
 800439a:	7bfb      	ldrb	r3, [r7, #15]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b089      	sub	sp, #36	; 0x24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80043ba:	2300      	movs	r3, #0
 80043bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	61fb      	str	r3, [r7, #28]
 80043c6:	e175      	b.n	80046b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80043c8:	2201      	movs	r2, #1
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	fa02 f303 	lsl.w	r3, r2, r3
 80043d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4013      	ands	r3, r2
 80043da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	f040 8164 	bne.w	80046ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d00b      	beq.n	8004406 <HAL_GPIO_Init+0x5e>
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d007      	beq.n	8004406 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043fa:	2b11      	cmp	r3, #17
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b12      	cmp	r3, #18
 8004404:	d130      	bne.n	8004468 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	2203      	movs	r2, #3
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	69ba      	ldr	r2, [r7, #24]
 800442c:	4313      	orrs	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800443c:	2201      	movs	r2, #1
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	43db      	mvns	r3, r3
 8004446:	69ba      	ldr	r2, [r7, #24]
 8004448:	4013      	ands	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 0201 	and.w	r2, r3, #1
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	2203      	movs	r2, #3
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	43db      	mvns	r3, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fa02 f303 	lsl.w	r3, r2, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4313      	orrs	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69ba      	ldr	r2, [r7, #24]
 8004496:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x100>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b12      	cmp	r3, #18
 80044a6:	d123      	bne.n	80044f0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	08da      	lsrs	r2, r3, #3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3208      	adds	r2, #8
 80044b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	220f      	movs	r2, #15
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	691a      	ldr	r2, [r3, #16]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4313      	orrs	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	08da      	lsrs	r2, r3, #3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3208      	adds	r2, #8
 80044ea:	69b9      	ldr	r1, [r7, #24]
 80044ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	2203      	movs	r2, #3
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	43db      	mvns	r3, r3
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	4013      	ands	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 0203 	and.w	r2, r3, #3
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	fa02 f303 	lsl.w	r3, r2, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4313      	orrs	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69ba      	ldr	r2, [r7, #24]
 8004522:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80be 	beq.w	80046ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004532:	4b65      	ldr	r3, [pc, #404]	; (80046c8 <HAL_GPIO_Init+0x320>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	4a64      	ldr	r2, [pc, #400]	; (80046c8 <HAL_GPIO_Init+0x320>)
 8004538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800453c:	6453      	str	r3, [r2, #68]	; 0x44
 800453e:	4b62      	ldr	r3, [pc, #392]	; (80046c8 <HAL_GPIO_Init+0x320>)
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800454a:	4a60      	ldr	r2, [pc, #384]	; (80046cc <HAL_GPIO_Init+0x324>)
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	3302      	adds	r3, #2
 8004552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004556:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	220f      	movs	r2, #15
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	43db      	mvns	r3, r3
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	4013      	ands	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a57      	ldr	r2, [pc, #348]	; (80046d0 <HAL_GPIO_Init+0x328>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d037      	beq.n	80045e6 <HAL_GPIO_Init+0x23e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a56      	ldr	r2, [pc, #344]	; (80046d4 <HAL_GPIO_Init+0x32c>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d031      	beq.n	80045e2 <HAL_GPIO_Init+0x23a>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a55      	ldr	r2, [pc, #340]	; (80046d8 <HAL_GPIO_Init+0x330>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d02b      	beq.n	80045de <HAL_GPIO_Init+0x236>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a54      	ldr	r2, [pc, #336]	; (80046dc <HAL_GPIO_Init+0x334>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d025      	beq.n	80045da <HAL_GPIO_Init+0x232>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a53      	ldr	r2, [pc, #332]	; (80046e0 <HAL_GPIO_Init+0x338>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01f      	beq.n	80045d6 <HAL_GPIO_Init+0x22e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a52      	ldr	r2, [pc, #328]	; (80046e4 <HAL_GPIO_Init+0x33c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d019      	beq.n	80045d2 <HAL_GPIO_Init+0x22a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a51      	ldr	r2, [pc, #324]	; (80046e8 <HAL_GPIO_Init+0x340>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <HAL_GPIO_Init+0x226>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a50      	ldr	r2, [pc, #320]	; (80046ec <HAL_GPIO_Init+0x344>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00d      	beq.n	80045ca <HAL_GPIO_Init+0x222>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a4f      	ldr	r2, [pc, #316]	; (80046f0 <HAL_GPIO_Init+0x348>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <HAL_GPIO_Init+0x21e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a4e      	ldr	r2, [pc, #312]	; (80046f4 <HAL_GPIO_Init+0x34c>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d101      	bne.n	80045c2 <HAL_GPIO_Init+0x21a>
 80045be:	2309      	movs	r3, #9
 80045c0:	e012      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045c2:	230a      	movs	r3, #10
 80045c4:	e010      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045c6:	2308      	movs	r3, #8
 80045c8:	e00e      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045ca:	2307      	movs	r3, #7
 80045cc:	e00c      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045ce:	2306      	movs	r3, #6
 80045d0:	e00a      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045d2:	2305      	movs	r3, #5
 80045d4:	e008      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045d6:	2304      	movs	r3, #4
 80045d8:	e006      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045da:	2303      	movs	r3, #3
 80045dc:	e004      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045de:	2302      	movs	r3, #2
 80045e0:	e002      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <HAL_GPIO_Init+0x240>
 80045e6:	2300      	movs	r3, #0
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	f002 0203 	and.w	r2, r2, #3
 80045ee:	0092      	lsls	r2, r2, #2
 80045f0:	4093      	lsls	r3, r2
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80045f8:	4934      	ldr	r1, [pc, #208]	; (80046cc <HAL_GPIO_Init+0x324>)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	089b      	lsrs	r3, r3, #2
 80045fe:	3302      	adds	r3, #2
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004606:	4b3c      	ldr	r3, [pc, #240]	; (80046f8 <HAL_GPIO_Init+0x350>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	43db      	mvns	r3, r3
 8004610:	69ba      	ldr	r2, [r7, #24]
 8004612:	4013      	ands	r3, r2
 8004614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4313      	orrs	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800462a:	4a33      	ldr	r2, [pc, #204]	; (80046f8 <HAL_GPIO_Init+0x350>)
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004630:	4b31      	ldr	r3, [pc, #196]	; (80046f8 <HAL_GPIO_Init+0x350>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4313      	orrs	r3, r2
 8004652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004654:	4a28      	ldr	r2, [pc, #160]	; (80046f8 <HAL_GPIO_Init+0x350>)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800465a:	4b27      	ldr	r3, [pc, #156]	; (80046f8 <HAL_GPIO_Init+0x350>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	43db      	mvns	r3, r3
 8004664:	69ba      	ldr	r2, [r7, #24]
 8004666:	4013      	ands	r3, r2
 8004668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	4313      	orrs	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800467e:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <HAL_GPIO_Init+0x350>)
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004684:	4b1c      	ldr	r3, [pc, #112]	; (80046f8 <HAL_GPIO_Init+0x350>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	43db      	mvns	r3, r3
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	4013      	ands	r3, r2
 8004692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d003      	beq.n	80046a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046a8:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <HAL_GPIO_Init+0x350>)
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	3301      	adds	r3, #1
 80046b2:	61fb      	str	r3, [r7, #28]
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	f67f ae86 	bls.w	80043c8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80046bc:	bf00      	nop
 80046be:	3724      	adds	r7, #36	; 0x24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40013800 	.word	0x40013800
 80046d0:	40020000 	.word	0x40020000
 80046d4:	40020400 	.word	0x40020400
 80046d8:	40020800 	.word	0x40020800
 80046dc:	40020c00 	.word	0x40020c00
 80046e0:	40021000 	.word	0x40021000
 80046e4:	40021400 	.word	0x40021400
 80046e8:	40021800 	.word	0x40021800
 80046ec:	40021c00 	.word	0x40021c00
 80046f0:	40022000 	.word	0x40022000
 80046f4:	40022400 	.word	0x40022400
 80046f8:	40013c00 	.word	0x40013c00

080046fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	807b      	strh	r3, [r7, #2]
 8004708:	4613      	mov	r3, r2
 800470a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800470c:	787b      	ldrb	r3, [r7, #1]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004712:	887a      	ldrh	r2, [r7, #2]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004718:	e003      	b.n	8004722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800471a:	887b      	ldrh	r3, [r7, #2]
 800471c:	041a      	lsls	r2, r3, #16
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	619a      	str	r2, [r3, #24]
}
 8004722:	bf00      	nop
 8004724:	370c      	adds	r7, #12
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d101      	bne.n	8004742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e07f      	b.n	8004842 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d106      	bne.n	800475c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f7fd ffb0 	bl	80026bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2224      	movs	r2, #36	; 0x24
 8004760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004780:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004790:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d107      	bne.n	80047aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	e006      	b.n	80047b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80047b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d104      	bne.n	80047ca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047c8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6859      	ldr	r1, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	4b1d      	ldr	r3, [pc, #116]	; (800484c <HAL_I2C_Init+0x11c>)
 80047d6:	430b      	orrs	r3, r1
 80047d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80047e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	691a      	ldr	r2, [r3, #16]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	ea42 0103 	orr.w	r1, r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	021a      	lsls	r2, r3, #8
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	430a      	orrs	r2, r1
 8004812:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0201 	orr.w	r2, r2, #1
 8004822:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2220      	movs	r2, #32
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	02008000 	.word	0x02008000

08004850 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b20      	cmp	r3, #32
 8004864:	d138      	bne.n	80048d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004870:	2302      	movs	r3, #2
 8004872:	e032      	b.n	80048da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2224      	movs	r2, #36	; 0x24
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f022 0201 	bic.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80048a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6819      	ldr	r1, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	683a      	ldr	r2, [r7, #0]
 80048b0:	430a      	orrs	r2, r1
 80048b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f042 0201 	orr.w	r2, r2, #1
 80048c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2220      	movs	r2, #32
 80048c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	e000      	b.n	80048da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80048d8:	2302      	movs	r3, #2
  }
}
 80048da:	4618      	mov	r0, r3
 80048dc:	370c      	adds	r7, #12
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
 80048ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d139      	bne.n	8004970 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004906:	2302      	movs	r3, #2
 8004908:	e033      	b.n	8004972 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2224      	movs	r2, #36	; 0x24
 8004916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0201 	bic.w	r2, r2, #1
 8004928:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004938:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4313      	orrs	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	e000      	b.n	8004972 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
  }
}
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
	...

08004980 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004984:	4b05      	ldr	r3, [pc, #20]	; (800499c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a04      	ldr	r2, [pc, #16]	; (800499c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800498a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498e:	6013      	str	r3, [r2, #0]
}
 8004990:	bf00      	nop
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	40007000 	.word	0x40007000

080049a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80049a6:	2300      	movs	r3, #0
 80049a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80049aa:	4b23      	ldr	r3, [pc, #140]	; (8004a38 <HAL_PWREx_EnableOverDrive+0x98>)
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	4a22      	ldr	r2, [pc, #136]	; (8004a38 <HAL_PWREx_EnableOverDrive+0x98>)
 80049b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6413      	str	r3, [r2, #64]	; 0x40
 80049b6:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <HAL_PWREx_EnableOverDrive+0x98>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80049c2:	4b1e      	ldr	r3, [pc, #120]	; (8004a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1d      	ldr	r2, [pc, #116]	; (8004a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049ce:	f7fe fc07 	bl	80031e0 <HAL_GetTick>
 80049d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049d4:	e009      	b.n	80049ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049d6:	f7fe fc03 	bl	80031e0 <HAL_GetTick>
 80049da:	4602      	mov	r2, r0
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049e4:	d901      	bls.n	80049ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e022      	b.n	8004a30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049f6:	d1ee      	bne.n	80049d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80049f8:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a0f      	ldr	r2, [pc, #60]	; (8004a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 80049fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a02:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a04:	f7fe fbec 	bl	80031e0 <HAL_GetTick>
 8004a08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a0a:	e009      	b.n	8004a20 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a0c:	f7fe fbe8 	bl	80031e0 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a1a:	d901      	bls.n	8004a20 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e007      	b.n	8004a30 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a20:	4b06      	ldr	r3, [pc, #24]	; (8004a3c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a2c:	d1ee      	bne.n	8004a0c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	40007000 	.word	0x40007000

08004a40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e29b      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 8087 	beq.w	8004b72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a64:	4b96      	ldr	r3, [pc, #600]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 030c 	and.w	r3, r3, #12
 8004a6c:	2b04      	cmp	r3, #4
 8004a6e:	d00c      	beq.n	8004a8a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a70:	4b93      	ldr	r3, [pc, #588]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b08      	cmp	r3, #8
 8004a7a:	d112      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x62>
 8004a7c:	4b90      	ldr	r3, [pc, #576]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a88:	d10b      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8a:	4b8d      	ldr	r3, [pc, #564]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d06c      	beq.n	8004b70 <HAL_RCC_OscConfig+0x130>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d168      	bne.n	8004b70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e275      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aaa:	d106      	bne.n	8004aba <HAL_RCC_OscConfig+0x7a>
 8004aac:	4b84      	ldr	r3, [pc, #528]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a83      	ldr	r2, [pc, #524]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	e02e      	b.n	8004b18 <HAL_RCC_OscConfig+0xd8>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCC_OscConfig+0x9c>
 8004ac2:	4b7f      	ldr	r3, [pc, #508]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a7e      	ldr	r2, [pc, #504]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004ac8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	4b7c      	ldr	r3, [pc, #496]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a7b      	ldr	r2, [pc, #492]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004ad4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e01d      	b.n	8004b18 <HAL_RCC_OscConfig+0xd8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCC_OscConfig+0xc0>
 8004ae6:	4b76      	ldr	r3, [pc, #472]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a75      	ldr	r2, [pc, #468]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b73      	ldr	r3, [pc, #460]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a72      	ldr	r2, [pc, #456]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0xd8>
 8004b00:	4b6f      	ldr	r3, [pc, #444]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a6e      	ldr	r2, [pc, #440]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4b6c      	ldr	r3, [pc, #432]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a6b      	ldr	r2, [pc, #428]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d013      	beq.n	8004b48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b20:	f7fe fb5e 	bl	80031e0 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fe fb5a 	bl	80031e0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e229      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	4b61      	ldr	r3, [pc, #388]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0xe8>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fe fb4a 	bl	80031e0 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fe fb46 	bl	80031e0 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	; 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e215      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b62:	4b57      	ldr	r3, [pc, #348]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x110>
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d069      	beq.n	8004c52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b7e:	4b50      	ldr	r3, [pc, #320]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b8a:	4b4d      	ldr	r3, [pc, #308]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d11c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x190>
 8004b96:	4b4a      	ldr	r3, [pc, #296]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d116      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba2:	4b47      	ldr	r3, [pc, #284]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_RCC_OscConfig+0x17a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d001      	beq.n	8004bba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e1e9      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b41      	ldr	r3, [pc, #260]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	493d      	ldr	r1, [pc, #244]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bce:	e040      	b.n	8004c52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d023      	beq.n	8004c20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd8:	4b39      	ldr	r3, [pc, #228]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a38      	ldr	r2, [pc, #224]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004bde:	f043 0301 	orr.w	r3, r3, #1
 8004be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fe fafc 	bl	80031e0 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bec:	f7fe faf8 	bl	80031e0 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e1c7      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bfe:	4b30      	ldr	r3, [pc, #192]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0a:	4b2d      	ldr	r3, [pc, #180]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	4929      	ldr	r1, [pc, #164]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]
 8004c1e:	e018      	b.n	8004c52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c20:	4b27      	ldr	r3, [pc, #156]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a26      	ldr	r2, [pc, #152]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004c26:	f023 0301 	bic.w	r3, r3, #1
 8004c2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fe fad8 	bl	80031e0 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c34:	f7fe fad4 	bl	80031e0 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e1a3      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c46:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d038      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d019      	beq.n	8004c9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c66:	4b16      	ldr	r3, [pc, #88]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c6a:	4a15      	ldr	r2, [pc, #84]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c72:	f7fe fab5 	bl	80031e0 <HAL_GetTick>
 8004c76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c78:	e008      	b.n	8004c8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c7a:	f7fe fab1 	bl	80031e0 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e180      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0f0      	beq.n	8004c7a <HAL_RCC_OscConfig+0x23a>
 8004c98:	e01a      	b.n	8004cd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c9a:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9e:	4a08      	ldr	r2, [pc, #32]	; (8004cc0 <HAL_RCC_OscConfig+0x280>)
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca6:	f7fe fa9b 	bl	80031e0 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cae:	f7fe fa97 	bl	80031e0 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d903      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e166      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
 8004cc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc4:	4b92      	ldr	r3, [pc, #584]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1ee      	bne.n	8004cae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 80a4 	beq.w	8004e26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cde:	4b8c      	ldr	r3, [pc, #560]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10d      	bne.n	8004d06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cea:	4b89      	ldr	r3, [pc, #548]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	4a88      	ldr	r2, [pc, #544]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cf6:	4b86      	ldr	r3, [pc, #536]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d02:	2301      	movs	r3, #1
 8004d04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d06:	4b83      	ldr	r3, [pc, #524]	; (8004f14 <HAL_RCC_OscConfig+0x4d4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d118      	bne.n	8004d44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d12:	4b80      	ldr	r3, [pc, #512]	; (8004f14 <HAL_RCC_OscConfig+0x4d4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a7f      	ldr	r2, [pc, #508]	; (8004f14 <HAL_RCC_OscConfig+0x4d4>)
 8004d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1e:	f7fe fa5f 	bl	80031e0 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d26:	f7fe fa5b 	bl	80031e0 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b64      	cmp	r3, #100	; 0x64
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e12a      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d38:	4b76      	ldr	r3, [pc, #472]	; (8004f14 <HAL_RCC_OscConfig+0x4d4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d106      	bne.n	8004d5a <HAL_RCC_OscConfig+0x31a>
 8004d4c:	4b70      	ldr	r3, [pc, #448]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d50:	4a6f      	ldr	r2, [pc, #444]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	6713      	str	r3, [r2, #112]	; 0x70
 8004d58:	e02d      	b.n	8004db6 <HAL_RCC_OscConfig+0x376>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10c      	bne.n	8004d7c <HAL_RCC_OscConfig+0x33c>
 8004d62:	4b6b      	ldr	r3, [pc, #428]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d66:	4a6a      	ldr	r2, [pc, #424]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d6e:	4b68      	ldr	r3, [pc, #416]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	4a67      	ldr	r2, [pc, #412]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004d74:	f023 0304 	bic.w	r3, r3, #4
 8004d78:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7a:	e01c      	b.n	8004db6 <HAL_RCC_OscConfig+0x376>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	2b05      	cmp	r3, #5
 8004d82:	d10c      	bne.n	8004d9e <HAL_RCC_OscConfig+0x35e>
 8004d84:	4b62      	ldr	r3, [pc, #392]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d88:	4a61      	ldr	r2, [pc, #388]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004d8a:	f043 0304 	orr.w	r3, r3, #4
 8004d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d90:	4b5f      	ldr	r3, [pc, #380]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	4a5e      	ldr	r2, [pc, #376]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004d96:	f043 0301 	orr.w	r3, r3, #1
 8004d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9c:	e00b      	b.n	8004db6 <HAL_RCC_OscConfig+0x376>
 8004d9e:	4b5c      	ldr	r3, [pc, #368]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da2:	4a5b      	ldr	r2, [pc, #364]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004da4:	f023 0301 	bic.w	r3, r3, #1
 8004da8:	6713      	str	r3, [r2, #112]	; 0x70
 8004daa:	4b59      	ldr	r3, [pc, #356]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	4a58      	ldr	r2, [pc, #352]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004db0:	f023 0304 	bic.w	r3, r3, #4
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d015      	beq.n	8004dea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dbe:	f7fe fa0f 	bl	80031e0 <HAL_GetTick>
 8004dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc4:	e00a      	b.n	8004ddc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7fe fa0b 	bl	80031e0 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d901      	bls.n	8004ddc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e0d8      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ddc:	4b4c      	ldr	r3, [pc, #304]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d0ee      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x386>
 8004de8:	e014      	b.n	8004e14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dea:	f7fe f9f9 	bl	80031e0 <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df0:	e00a      	b.n	8004e08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df2:	f7fe f9f5 	bl	80031e0 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e0c2      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e08:	4b41      	ldr	r3, [pc, #260]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1ee      	bne.n	8004df2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d105      	bne.n	8004e26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e1a:	4b3d      	ldr	r3, [pc, #244]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	4a3c      	ldr	r2, [pc, #240]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 80ae 	beq.w	8004f8c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e30:	4b37      	ldr	r3, [pc, #220]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f003 030c 	and.w	r3, r3, #12
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d06d      	beq.n	8004f18 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d14b      	bne.n	8004edc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e44:	4b32      	ldr	r3, [pc, #200]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a31      	ldr	r2, [pc, #196]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e50:	f7fe f9c6 	bl	80031e0 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e58:	f7fe f9c2 	bl	80031e0 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e091      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	4b29      	ldr	r3, [pc, #164]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69da      	ldr	r2, [r3, #28]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e84:	019b      	lsls	r3, r3, #6
 8004e86:	431a      	orrs	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	061b      	lsls	r3, r3, #24
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	071b      	lsls	r3, r3, #28
 8004ea2:	491b      	ldr	r1, [pc, #108]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ea8:	4b19      	ldr	r3, [pc, #100]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004eae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb4:	f7fe f994 	bl	80031e0 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebc:	f7fe f990 	bl	80031e0 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e05f      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ece:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0f0      	beq.n	8004ebc <HAL_RCC_OscConfig+0x47c>
 8004eda:	e057      	b.n	8004f8c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004edc:	4b0c      	ldr	r3, [pc, #48]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a0b      	ldr	r2, [pc, #44]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fe f97a 	bl	80031e0 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef0:	f7fe f976 	bl	80031e0 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e045      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f02:	4b03      	ldr	r3, [pc, #12]	; (8004f10 <HAL_RCC_OscConfig+0x4d0>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f0      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4b0>
 8004f0e:	e03d      	b.n	8004f8c <HAL_RCC_OscConfig+0x54c>
 8004f10:	40023800 	.word	0x40023800
 8004f14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f18:	4b1f      	ldr	r3, [pc, #124]	; (8004f98 <HAL_RCC_OscConfig+0x558>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d030      	beq.n	8004f88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d129      	bne.n	8004f88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d122      	bne.n	8004f88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f48:	4013      	ands	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d119      	bne.n	8004f88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	3b01      	subs	r3, #1
 8004f62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d10f      	bne.n	8004f88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d107      	bne.n	8004f88 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40023800 	.word	0x40023800

08004f9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e0d0      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb4:	4b6a      	ldr	r3, [pc, #424]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 030f 	and.w	r3, r3, #15
 8004fbc:	683a      	ldr	r2, [r7, #0]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d910      	bls.n	8004fe4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc2:	4b67      	ldr	r3, [pc, #412]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f023 020f 	bic.w	r2, r3, #15
 8004fca:	4965      	ldr	r1, [pc, #404]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd2:	4b63      	ldr	r3, [pc, #396]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0b8      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d020      	beq.n	8005032 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0304 	and.w	r3, r3, #4
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ffc:	4b59      	ldr	r3, [pc, #356]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	4a58      	ldr	r2, [pc, #352]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 8005002:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005006:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005014:	4b53      	ldr	r3, [pc, #332]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	4a52      	ldr	r2, [pc, #328]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 800501a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800501e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005020:	4b50      	ldr	r3, [pc, #320]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	494d      	ldr	r1, [pc, #308]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 800502e:	4313      	orrs	r3, r2
 8005030:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d040      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d107      	bne.n	8005056 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005046:	4b47      	ldr	r3, [pc, #284]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d115      	bne.n	800507e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e07f      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	2b02      	cmp	r3, #2
 800505c:	d107      	bne.n	800506e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505e:	4b41      	ldr	r3, [pc, #260]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d109      	bne.n	800507e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e073      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800506e:	4b3d      	ldr	r3, [pc, #244]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e06b      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800507e:	4b39      	ldr	r3, [pc, #228]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f023 0203 	bic.w	r2, r3, #3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	4936      	ldr	r1, [pc, #216]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 800508c:	4313      	orrs	r3, r2
 800508e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005090:	f7fe f8a6 	bl	80031e0 <HAL_GetTick>
 8005094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005096:	e00a      	b.n	80050ae <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005098:	f7fe f8a2 	bl	80031e0 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d901      	bls.n	80050ae <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050aa:	2303      	movs	r3, #3
 80050ac:	e053      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ae:	4b2d      	ldr	r3, [pc, #180]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 020c 	and.w	r2, r3, #12
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	429a      	cmp	r2, r3
 80050be:	d1eb      	bne.n	8005098 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050c0:	4b27      	ldr	r3, [pc, #156]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 030f 	and.w	r3, r3, #15
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d210      	bcs.n	80050f0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b24      	ldr	r3, [pc, #144]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f023 020f 	bic.w	r2, r3, #15
 80050d6:	4922      	ldr	r1, [pc, #136]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	4313      	orrs	r3, r2
 80050dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050de:	4b20      	ldr	r3, [pc, #128]	; (8005160 <HAL_RCC_ClockConfig+0x1c4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	683a      	ldr	r2, [r7, #0]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d001      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e032      	b.n	8005156 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0304 	and.w	r3, r3, #4
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d008      	beq.n	800510e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050fc:	4b19      	ldr	r3, [pc, #100]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	4916      	ldr	r1, [pc, #88]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0308 	and.w	r3, r3, #8
 8005116:	2b00      	cmp	r3, #0
 8005118:	d009      	beq.n	800512e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800511a:	4b12      	ldr	r3, [pc, #72]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	00db      	lsls	r3, r3, #3
 8005128:	490e      	ldr	r1, [pc, #56]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 800512a:	4313      	orrs	r3, r2
 800512c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800512e:	f000 f821 	bl	8005174 <HAL_RCC_GetSysClockFreq>
 8005132:	4601      	mov	r1, r0
 8005134:	4b0b      	ldr	r3, [pc, #44]	; (8005164 <HAL_RCC_ClockConfig+0x1c8>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	091b      	lsrs	r3, r3, #4
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	4a0a      	ldr	r2, [pc, #40]	; (8005168 <HAL_RCC_ClockConfig+0x1cc>)
 8005140:	5cd3      	ldrb	r3, [r2, r3]
 8005142:	fa21 f303 	lsr.w	r3, r1, r3
 8005146:	4a09      	ldr	r2, [pc, #36]	; (800516c <HAL_RCC_ClockConfig+0x1d0>)
 8005148:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800514a:	4b09      	ldr	r3, [pc, #36]	; (8005170 <HAL_RCC_ClockConfig+0x1d4>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7fe f802 	bl	8003158 <HAL_InitTick>

  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40023c00 	.word	0x40023c00
 8005164:	40023800 	.word	0x40023800
 8005168:	0800a078 	.word	0x0800a078
 800516c:	20000008 	.word	0x20000008
 8005170:	2000000c 	.word	0x2000000c

08005174 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005174:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	607b      	str	r3, [r7, #4]
 800517e:	2300      	movs	r3, #0
 8005180:	60fb      	str	r3, [r7, #12]
 8005182:	2300      	movs	r3, #0
 8005184:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800518a:	4b50      	ldr	r3, [pc, #320]	; (80052cc <HAL_RCC_GetSysClockFreq+0x158>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
 8005192:	2b04      	cmp	r3, #4
 8005194:	d007      	beq.n	80051a6 <HAL_RCC_GetSysClockFreq+0x32>
 8005196:	2b08      	cmp	r3, #8
 8005198:	d008      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0x38>
 800519a:	2b00      	cmp	r3, #0
 800519c:	f040 808d 	bne.w	80052ba <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a0:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80051a2:	60bb      	str	r3, [r7, #8]
      break;
 80051a4:	e08c      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051a6:	4b4b      	ldr	r3, [pc, #300]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80051a8:	60bb      	str	r3, [r7, #8]
      break;
 80051aa:	e089      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051ac:	4b47      	ldr	r3, [pc, #284]	; (80052cc <HAL_RCC_GetSysClockFreq+0x158>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051b6:	4b45      	ldr	r3, [pc, #276]	; (80052cc <HAL_RCC_GetSysClockFreq+0x158>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d023      	beq.n	800520a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c2:	4b42      	ldr	r3, [pc, #264]	; (80052cc <HAL_RCC_GetSysClockFreq+0x158>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	f04f 0400 	mov.w	r4, #0
 80051cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	ea03 0501 	and.w	r5, r3, r1
 80051d8:	ea04 0602 	and.w	r6, r4, r2
 80051dc:	4a3d      	ldr	r2, [pc, #244]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80051de:	fb02 f106 	mul.w	r1, r2, r6
 80051e2:	2200      	movs	r2, #0
 80051e4:	fb02 f205 	mul.w	r2, r2, r5
 80051e8:	440a      	add	r2, r1
 80051ea:	493a      	ldr	r1, [pc, #232]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x160>)
 80051ec:	fba5 0101 	umull	r0, r1, r5, r1
 80051f0:	1853      	adds	r3, r2, r1
 80051f2:	4619      	mov	r1, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f04f 0400 	mov.w	r4, #0
 80051fa:	461a      	mov	r2, r3
 80051fc:	4623      	mov	r3, r4
 80051fe:	f7fb f887 	bl	8000310 <__aeabi_uldivmod>
 8005202:	4603      	mov	r3, r0
 8005204:	460c      	mov	r4, r1
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	e049      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520a:	4b30      	ldr	r3, [pc, #192]	; (80052cc <HAL_RCC_GetSysClockFreq+0x158>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	099b      	lsrs	r3, r3, #6
 8005210:	f04f 0400 	mov.w	r4, #0
 8005214:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	ea03 0501 	and.w	r5, r3, r1
 8005220:	ea04 0602 	and.w	r6, r4, r2
 8005224:	4629      	mov	r1, r5
 8005226:	4632      	mov	r2, r6
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	f04f 0400 	mov.w	r4, #0
 8005230:	0154      	lsls	r4, r2, #5
 8005232:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005236:	014b      	lsls	r3, r1, #5
 8005238:	4619      	mov	r1, r3
 800523a:	4622      	mov	r2, r4
 800523c:	1b49      	subs	r1, r1, r5
 800523e:	eb62 0206 	sbc.w	r2, r2, r6
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	f04f 0400 	mov.w	r4, #0
 800524a:	0194      	lsls	r4, r2, #6
 800524c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005250:	018b      	lsls	r3, r1, #6
 8005252:	1a5b      	subs	r3, r3, r1
 8005254:	eb64 0402 	sbc.w	r4, r4, r2
 8005258:	f04f 0100 	mov.w	r1, #0
 800525c:	f04f 0200 	mov.w	r2, #0
 8005260:	00e2      	lsls	r2, r4, #3
 8005262:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005266:	00d9      	lsls	r1, r3, #3
 8005268:	460b      	mov	r3, r1
 800526a:	4614      	mov	r4, r2
 800526c:	195b      	adds	r3, r3, r5
 800526e:	eb44 0406 	adc.w	r4, r4, r6
 8005272:	f04f 0100 	mov.w	r1, #0
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	02a2      	lsls	r2, r4, #10
 800527c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005280:	0299      	lsls	r1, r3, #10
 8005282:	460b      	mov	r3, r1
 8005284:	4614      	mov	r4, r2
 8005286:	4618      	mov	r0, r3
 8005288:	4621      	mov	r1, r4
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f04f 0400 	mov.w	r4, #0
 8005290:	461a      	mov	r2, r3
 8005292:	4623      	mov	r3, r4
 8005294:	f7fb f83c 	bl	8000310 <__aeabi_uldivmod>
 8005298:	4603      	mov	r3, r0
 800529a:	460c      	mov	r4, r1
 800529c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800529e:	4b0b      	ldr	r3, [pc, #44]	; (80052cc <HAL_RCC_GetSysClockFreq+0x158>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	0c1b      	lsrs	r3, r3, #16
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	3301      	adds	r3, #1
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b6:	60bb      	str	r3, [r7, #8]
      break;
 80052b8:	e002      	b.n	80052c0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052ba:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80052bc:	60bb      	str	r3, [r7, #8]
      break;
 80052be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052c0:	68bb      	ldr	r3, [r7, #8]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40023800 	.word	0x40023800
 80052d0:	00f42400 	.word	0x00f42400
 80052d4:	00989680 	.word	0x00989680

080052d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <HAL_RCC_GetHCLKFreq+0x14>)
 80052de:	681b      	ldr	r3, [r3, #0]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000008 	.word	0x20000008

080052f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052f4:	f7ff fff0 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 80052f8:	4601      	mov	r1, r0
 80052fa:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	0a9b      	lsrs	r3, r3, #10
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4a03      	ldr	r2, [pc, #12]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005306:	5cd3      	ldrb	r3, [r2, r3]
 8005308:	fa21 f303 	lsr.w	r3, r1, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40023800 	.word	0x40023800
 8005314:	0800a088 	.word	0x0800a088

08005318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800531c:	f7ff ffdc 	bl	80052d8 <HAL_RCC_GetHCLKFreq>
 8005320:	4601      	mov	r1, r0
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	0b5b      	lsrs	r3, r3, #13
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	4a03      	ldr	r2, [pc, #12]	; (800533c <HAL_RCC_GetPCLK2Freq+0x24>)
 800532e:	5cd3      	ldrb	r3, [r2, r3]
 8005330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005334:	4618      	mov	r0, r3
 8005336:	bd80      	pop	{r7, pc}
 8005338:	40023800 	.word	0x40023800
 800533c:	0800a088 	.word	0x0800a088

08005340 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005358:	2300      	movs	r3, #0
 800535a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b00      	cmp	r3, #0
 8005366:	d012      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005368:	4b69      	ldr	r3, [pc, #420]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	4a68      	ldr	r2, [pc, #416]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005372:	6093      	str	r3, [r2, #8]
 8005374:	4b66      	ldr	r3, [pc, #408]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800537c:	4964      	ldr	r1, [pc, #400]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537e:	4313      	orrs	r3, r2
 8005380:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800538a:	2301      	movs	r3, #1
 800538c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d017      	beq.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800539a:	4b5d      	ldr	r3, [pc, #372]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a8:	4959      	ldr	r1, [pc, #356]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b8:	d101      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80053ba:	2301      	movs	r3, #1
 80053bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80053c6:	2301      	movs	r3, #1
 80053c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d017      	beq.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053d6:	4b4e      	ldr	r3, [pc, #312]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	494a      	ldr	r1, [pc, #296]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e6:	4313      	orrs	r3, r2
 80053e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f4:	d101      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80053f6:	2301      	movs	r3, #1
 80053f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005402:	2301      	movs	r3, #1
 8005404:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d001      	beq.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005412:	2301      	movs	r3, #1
 8005414:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 808b 	beq.w	800553a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005424:	4b3a      	ldr	r3, [pc, #232]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	4a39      	ldr	r2, [pc, #228]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542e:	6413      	str	r3, [r2, #64]	; 0x40
 8005430:	4b37      	ldr	r3, [pc, #220]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005438:	60bb      	str	r3, [r7, #8]
 800543a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800543c:	4b35      	ldr	r3, [pc, #212]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a34      	ldr	r2, [pc, #208]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005446:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005448:	f7fd feca 	bl	80031e0 <HAL_GetTick>
 800544c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005450:	f7fd fec6 	bl	80031e0 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b64      	cmp	r3, #100	; 0x64
 800545c:	d901      	bls.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e38d      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005462:	4b2c      	ldr	r3, [pc, #176]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546a:	2b00      	cmp	r3, #0
 800546c:	d0f0      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800546e:	4b28      	ldr	r3, [pc, #160]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005476:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d035      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	429a      	cmp	r2, r3
 800548a:	d02e      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800548c:	4b20      	ldr	r3, [pc, #128]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005494:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005496:	4b1e      	ldr	r3, [pc, #120]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800549a:	4a1d      	ldr	r2, [pc, #116]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054a2:	4b1b      	ldr	r3, [pc, #108]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a6:	4a1a      	ldr	r2, [pc, #104]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80054ae:	4a18      	ldr	r2, [pc, #96]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054b4:	4b16      	ldr	r3, [pc, #88]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d114      	bne.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c0:	f7fd fe8e 	bl	80031e0 <HAL_GetTick>
 80054c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c6:	e00a      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c8:	f7fd fe8a 	bl	80031e0 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e34f      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0ee      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f6:	d111      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80054f8:	4b05      	ldr	r3, [pc, #20]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005504:	4b04      	ldr	r3, [pc, #16]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005506:	400b      	ands	r3, r1
 8005508:	4901      	ldr	r1, [pc, #4]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550a:	4313      	orrs	r3, r2
 800550c:	608b      	str	r3, [r1, #8]
 800550e:	e00b      	b.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005510:	40023800 	.word	0x40023800
 8005514:	40007000 	.word	0x40007000
 8005518:	0ffffcff 	.word	0x0ffffcff
 800551c:	4bb3      	ldr	r3, [pc, #716]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	4ab2      	ldr	r2, [pc, #712]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005522:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005526:	6093      	str	r3, [r2, #8]
 8005528:	4bb0      	ldr	r3, [pc, #704]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800552a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005534:	49ad      	ldr	r1, [pc, #692]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005536:	4313      	orrs	r3, r2
 8005538:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b00      	cmp	r3, #0
 8005544:	d010      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005546:	4ba9      	ldr	r3, [pc, #676]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800554c:	4aa7      	ldr	r2, [pc, #668]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800554e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005552:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005556:	4ba5      	ldr	r3, [pc, #660]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005558:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	49a2      	ldr	r1, [pc, #648]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005574:	4b9d      	ldr	r3, [pc, #628]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005582:	499a      	ldr	r1, [pc, #616]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005596:	4b95      	ldr	r3, [pc, #596]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055a4:	4991      	ldr	r1, [pc, #580]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055b8:	4b8c      	ldr	r3, [pc, #560]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c6:	4989      	ldr	r1, [pc, #548]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055da:	4b84      	ldr	r3, [pc, #528]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e8:	4980      	ldr	r1, [pc, #512]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055fc:	4b7b      	ldr	r3, [pc, #492]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005602:	f023 0203 	bic.w	r2, r3, #3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560a:	4978      	ldr	r1, [pc, #480]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800561e:	4b73      	ldr	r3, [pc, #460]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005624:	f023 020c 	bic.w	r2, r3, #12
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562c:	496f      	ldr	r1, [pc, #444]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005640:	4b6a      	ldr	r3, [pc, #424]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005646:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564e:	4967      	ldr	r1, [pc, #412]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005662:	4b62      	ldr	r3, [pc, #392]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005668:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005670:	495e      	ldr	r1, [pc, #376]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005684:	4b59      	ldr	r3, [pc, #356]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	4956      	ldr	r1, [pc, #344]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80056a6:	4b51      	ldr	r3, [pc, #324]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b4:	494d      	ldr	r1, [pc, #308]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80056c8:	4b48      	ldr	r3, [pc, #288]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d6:	4945      	ldr	r1, [pc, #276]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80056ea:	4b40      	ldr	r3, [pc, #256]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f8:	493c      	ldr	r1, [pc, #240]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800570c:	4b37      	ldr	r3, [pc, #220]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005712:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800571a:	4934      	ldr	r1, [pc, #208]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800571c:	4313      	orrs	r3, r2
 800571e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d011      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800572e:	4b2f      	ldr	r3, [pc, #188]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005734:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800573c:	492b      	ldr	r1, [pc, #172]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800573e:	4313      	orrs	r3, r2
 8005740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005748:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800574c:	d101      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800574e:	2301      	movs	r3, #1
 8005750:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0308 	and.w	r3, r3, #8
 800575a:	2b00      	cmp	r3, #0
 800575c:	d001      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800575e:	2301      	movs	r3, #1
 8005760:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800576e:	4b1f      	ldr	r3, [pc, #124]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577c:	491b      	ldr	r1, [pc, #108]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00b      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005790:	4b16      	ldr	r3, [pc, #88]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80057a0:	4912      	ldr	r1, [pc, #72]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d00b      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80057b4:	4b0d      	ldr	r3, [pc, #52]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c4:	4909      	ldr	r1, [pc, #36]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00f      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057d8:	4b04      	ldr	r3, [pc, #16]	; (80057ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e8:	e002      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80057ea:	bf00      	nop
 80057ec:	40023800 	.word	0x40023800
 80057f0:	4985      	ldr	r1, [pc, #532]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00b      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005804:	4b80      	ldr	r3, [pc, #512]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005814:	497c      	ldr	r1, [pc, #496]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2b01      	cmp	r3, #1
 8005820:	d005      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800582a:	f040 80d6 	bne.w	80059da <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800582e:	4b76      	ldr	r3, [pc, #472]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a75      	ldr	r2, [pc, #468]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005834:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583a:	f7fd fcd1 	bl	80031e0 <HAL_GetTick>
 800583e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005840:	e008      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005842:	f7fd fccd 	bl	80031e0 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b64      	cmp	r3, #100	; 0x64
 800584e:	d901      	bls.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e194      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005854:	4b6c      	ldr	r3, [pc, #432]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1f0      	bne.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0301 	and.w	r3, r3, #1
 8005868:	2b00      	cmp	r3, #0
 800586a:	d021      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	2b00      	cmp	r3, #0
 8005872:	d11d      	bne.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005874:	4b64      	ldr	r3, [pc, #400]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800587a:	0c1b      	lsrs	r3, r3, #16
 800587c:	f003 0303 	and.w	r3, r3, #3
 8005880:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005882:	4b61      	ldr	r3, [pc, #388]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005888:	0e1b      	lsrs	r3, r3, #24
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	019a      	lsls	r2, r3, #6
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	041b      	lsls	r3, r3, #16
 800589a:	431a      	orrs	r2, r3
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	061b      	lsls	r3, r3, #24
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	071b      	lsls	r3, r3, #28
 80058a8:	4957      	ldr	r1, [pc, #348]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058aa:	4313      	orrs	r3, r2
 80058ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d02e      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058da:	d129      	bne.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058dc:	4b4a      	ldr	r3, [pc, #296]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e2:	0c1b      	lsrs	r3, r3, #16
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058ea:	4b47      	ldr	r3, [pc, #284]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f0:	0f1b      	lsrs	r3, r3, #28
 80058f2:	f003 0307 	and.w	r3, r3, #7
 80058f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	019a      	lsls	r2, r3, #6
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	431a      	orrs	r2, r3
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	061b      	lsls	r3, r3, #24
 800590a:	431a      	orrs	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	071b      	lsls	r3, r3, #28
 8005910:	493d      	ldr	r1, [pc, #244]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005918:	4b3b      	ldr	r3, [pc, #236]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800591a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800591e:	f023 021f 	bic.w	r2, r3, #31
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	3b01      	subs	r3, #1
 8005928:	4937      	ldr	r1, [pc, #220]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800592a:	4313      	orrs	r3, r2
 800592c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01d      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800593c:	4b32      	ldr	r3, [pc, #200]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800593e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005942:	0e1b      	lsrs	r3, r3, #24
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800594a:	4b2f      	ldr	r3, [pc, #188]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800594c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005950:	0f1b      	lsrs	r3, r3, #28
 8005952:	f003 0307 	and.w	r3, r3, #7
 8005956:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	019a      	lsls	r2, r3, #6
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	041b      	lsls	r3, r3, #16
 8005964:	431a      	orrs	r2, r3
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	061b      	lsls	r3, r3, #24
 800596a:	431a      	orrs	r2, r3
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	071b      	lsls	r3, r3, #28
 8005970:	4925      	ldr	r1, [pc, #148]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d011      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	019a      	lsls	r2, r3, #6
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	041b      	lsls	r3, r3, #16
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	061b      	lsls	r3, r3, #24
 8005998:	431a      	orrs	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	071b      	lsls	r3, r3, #28
 80059a0:	4919      	ldr	r1, [pc, #100]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059a8:	4b17      	ldr	r3, [pc, #92]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a16      	ldr	r2, [pc, #88]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b4:	f7fd fc14 	bl	80031e0 <HAL_GetTick>
 80059b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ba:	e008      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059bc:	f7fd fc10 	bl	80031e0 <HAL_GetTick>
 80059c0:	4602      	mov	r2, r0
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	2b64      	cmp	r3, #100	; 0x64
 80059c8:	d901      	bls.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e0d7      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ce:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d0f0      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	f040 80cd 	bne.w	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059e2:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a08      	ldr	r2, [pc, #32]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80059e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ee:	f7fd fbf7 	bl	80031e0 <HAL_GetTick>
 80059f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059f4:	e00a      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059f6:	f7fd fbf3 	bl	80031e0 <HAL_GetTick>
 80059fa:	4602      	mov	r2, r0
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	2b64      	cmp	r3, #100	; 0x64
 8005a02:	d903      	bls.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e0ba      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005a08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a0c:	4b5e      	ldr	r3, [pc, #376]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a18:	d0ed      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d02e      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d12a      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a42:	4b51      	ldr	r3, [pc, #324]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a50:	4b4d      	ldr	r3, [pc, #308]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a56:	0f1b      	lsrs	r3, r3, #28
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	019a      	lsls	r2, r3, #6
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	431a      	orrs	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	4944      	ldr	r1, [pc, #272]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a7e:	4b42      	ldr	r3, [pc, #264]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	493d      	ldr	r1, [pc, #244]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d022      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aac:	d11d      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aae:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab4:	0e1b      	lsrs	r3, r3, #24
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005abc:	4b32      	ldr	r3, [pc, #200]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	0f1b      	lsrs	r3, r3, #28
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	019a      	lsls	r2, r3, #6
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	041b      	lsls	r3, r3, #16
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	061b      	lsls	r3, r3, #24
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	071b      	lsls	r3, r3, #28
 8005ae2:	4929      	ldr	r1, [pc, #164]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d028      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005af6:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afc:	0e1b      	lsrs	r3, r3, #24
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b04:	4b20      	ldr	r3, [pc, #128]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0a:	0c1b      	lsrs	r3, r3, #16
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	019a      	lsls	r2, r3, #6
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	061b      	lsls	r3, r3, #24
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	071b      	lsls	r3, r3, #28
 8005b2a:	4917      	ldr	r1, [pc, #92]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4911      	ldr	r1, [pc, #68]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b48:	4b0f      	ldr	r3, [pc, #60]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a0e      	ldr	r2, [pc, #56]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b54:	f7fd fb44 	bl	80031e0 <HAL_GetTick>
 8005b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b5c:	f7fd fb40 	bl	80031e0 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b64      	cmp	r3, #100	; 0x64
 8005b68:	d901      	bls.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e007      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b6e:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b7a:	d1ef      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800

08005b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e084      	b.n	8005ca8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fc fe15 	bl	80027e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2202      	movs	r2, #2
 8005bc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bd4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bde:	d902      	bls.n	8005be6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005be0:	2300      	movs	r3, #0
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	e002      	b.n	8005bec <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bf4:	d007      	beq.n	8005c06 <HAL_SPI_Init+0x7a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bfe:	d002      	beq.n	8005c06 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10b      	bne.n	8005c26 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c16:	d903      	bls.n	8005c20 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005c1e:	e002      	b.n	8005c26 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	431a      	orrs	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	695b      	ldr	r3, [r3, #20]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c44:	431a      	orrs	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	69db      	ldr	r3, [r3, #28]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6a1b      	ldr	r3, [r3, #32]
 8005c50:	ea42 0103 	orr.w	r1, r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	0c1b      	lsrs	r3, r3, #16
 8005c66:	f003 0204 	and.w	r2, r3, #4
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	431a      	orrs	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	ea42 0103 	orr.w	r1, r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d110      	bne.n	8005cec <HAL_SPI_Receive_DMA+0x3c>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd2:	d10b      	bne.n	8005cec <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2204      	movs	r2, #4
 8005cd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005cdc:	88fb      	ldrh	r3, [r7, #6]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 f900 	bl	8005ee8 <HAL_SPI_TransmitReceive_DMA>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	e0f3      	b.n	8005ed4 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <HAL_SPI_Receive_DMA+0x4a>
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	e0ec      	b.n	8005ed4 <HAL_SPI_Receive_DMA+0x224>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d002      	beq.n	8005d14 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005d0e:	2302      	movs	r3, #2
 8005d10:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d12:	e0da      	b.n	8005eca <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d002      	beq.n	8005d20 <HAL_SPI_Receive_DMA+0x70>
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005d24:	e0d1      	b.n	8005eca <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2204      	movs	r2, #4
 8005d2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	88fa      	ldrh	r2, [r7, #6]
 8005d3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	88fa      	ldrh	r2, [r7, #6]
 8005d46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d6a:	d107      	bne.n	8005d7c <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d7a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d8a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d94:	d908      	bls.n	8005da8 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	e042      	b.n	8005e2e <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	685a      	ldr	r2, [r3, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005db6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dc2:	d134      	bne.n	8005e2e <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005dd2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d111      	bne.n	8005e08 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685a      	ldr	r2, [r3, #4]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005df2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	085b      	lsrs	r3, r3, #1
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e06:	e012      	b.n	8005e2e <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685a      	ldr	r2, [r3, #4]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e16:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	085b      	lsrs	r3, r3, #1
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	3301      	adds	r3, #1
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e32:	4a2a      	ldr	r2, [pc, #168]	; (8005edc <HAL_SPI_Receive_DMA+0x22c>)
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e3a:	4a29      	ldr	r2, [pc, #164]	; (8005ee0 <HAL_SPI_Receive_DMA+0x230>)
 8005e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e42:	4a28      	ldr	r2, [pc, #160]	; (8005ee4 <HAL_SPI_Receive_DMA+0x234>)
 8005e44:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	330c      	adds	r3, #12
 8005e58:	4619      	mov	r1, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	461a      	mov	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f7fd ffb4 	bl	8003dd4 <HAL_DMA_Start_IT>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00c      	beq.n	8005e8c <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e76:	f043 0210 	orr.w	r2, r3, #16
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005e8a:	e01e      	b.n	8005eca <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e96:	2b40      	cmp	r3, #64	; 0x40
 8005e98:	d007      	beq.n	8005eaa <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ea8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f042 0220 	orr.w	r2, r2, #32
 8005eb8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	685a      	ldr	r2, [r3, #4]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0201 	orr.w	r2, r2, #1
 8005ec8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3718      	adds	r7, #24
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	08006369 	.word	0x08006369
 8005ee0:	08006251 	.word	0x08006251
 8005ee4:	080063a1 	.word	0x080063a1

08005ee8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	60f8      	str	r0, [r7, #12]
 8005ef0:	60b9      	str	r1, [r7, #8]
 8005ef2:	607a      	str	r2, [r7, #4]
 8005ef4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d101      	bne.n	8005f08 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005f04:	2302      	movs	r3, #2
 8005f06:	e16c      	b.n	80061e2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f16:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005f1e:	7dbb      	ldrb	r3, [r7, #22]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d00d      	beq.n	8005f40 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f2a:	d106      	bne.n	8005f3a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d102      	bne.n	8005f3a <HAL_SPI_TransmitReceive_DMA+0x52>
 8005f34:	7dbb      	ldrb	r3, [r7, #22]
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	d002      	beq.n	8005f40 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f3e:	e14b      	b.n	80061d8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d005      	beq.n	8005f52 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005f4c:	887b      	ldrh	r3, [r7, #2]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d102      	bne.n	8005f58 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f56:	e13f      	b.n	80061d8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d003      	beq.n	8005f6c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2205      	movs	r2, #5
 8005f68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	68ba      	ldr	r2, [r7, #8]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	887a      	ldrh	r2, [r7, #2]
 8005f7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	887a      	ldrh	r2, [r7, #2]
 8005f82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	887a      	ldrh	r2, [r7, #2]
 8005f8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	887a      	ldrh	r2, [r7, #2]
 8005f96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685a      	ldr	r2, [r3, #4]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8005fb4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fbe:	d908      	bls.n	8005fd2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fce:	605a      	str	r2, [r3, #4]
 8005fd0:	e06f      	b.n	80060b2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	685a      	ldr	r2, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fe0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fec:	d126      	bne.n	800603c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005ff2:	f003 0301 	and.w	r3, r3, #1
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10f      	bne.n	800601a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006008:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600e:	b29b      	uxth	r3, r3
 8006010:	085b      	lsrs	r3, r3, #1
 8006012:	b29a      	uxth	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006018:	e010      	b.n	800603c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006028:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602e:	b29b      	uxth	r3, r3
 8006030:	085b      	lsrs	r3, r3, #1
 8006032:	b29b      	uxth	r3, r3
 8006034:	3301      	adds	r3, #1
 8006036:	b29a      	uxth	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006046:	d134      	bne.n	80060b2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006056:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800605e:	b29b      	uxth	r3, r3
 8006060:	f003 0301 	and.w	r3, r3, #1
 8006064:	2b00      	cmp	r3, #0
 8006066:	d111      	bne.n	800608c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006076:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800607e:	b29b      	uxth	r3, r3
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800608a:	e012      	b.n	80060b2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800609a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	085b      	lsrs	r3, r3, #1
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	3301      	adds	r3, #1
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b04      	cmp	r3, #4
 80060bc:	d108      	bne.n	80060d0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c2:	4a4a      	ldr	r2, [pc, #296]	; (80061ec <HAL_SPI_TransmitReceive_DMA+0x304>)
 80060c4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	4a49      	ldr	r2, [pc, #292]	; (80061f0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80060cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80060ce:	e007      	b.n	80060e0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d4:	4a47      	ldr	r2, [pc, #284]	; (80061f4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060dc:	4a46      	ldr	r2, [pc, #280]	; (80061f8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 80060de:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e4:	4a45      	ldr	r2, [pc, #276]	; (80061fc <HAL_SPI_TransmitReceive_DMA+0x314>)
 80060e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ec:	2200      	movs	r2, #0
 80060ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	330c      	adds	r3, #12
 80060fa:	4619      	mov	r1, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	461a      	mov	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006108:	b29b      	uxth	r3, r3
 800610a:	f7fd fe63 	bl	8003dd4 <HAL_DMA_Start_IT>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00c      	beq.n	800612e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006118:	f043 0210 	orr.w	r2, r3, #16
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800612c:	e054      	b.n	80061d8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685a      	ldr	r2, [r3, #4]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f042 0201 	orr.w	r2, r2, #1
 800613c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	2200      	movs	r2, #0
 8006144:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800614a:	2200      	movs	r2, #0
 800614c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006152:	2200      	movs	r2, #0
 8006154:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615a:	2200      	movs	r2, #0
 800615c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006166:	4619      	mov	r1, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	330c      	adds	r3, #12
 800616e:	461a      	mov	r2, r3
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006174:	b29b      	uxth	r3, r3
 8006176:	f7fd fe2d 	bl	8003dd4 <HAL_DMA_Start_IT>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00c      	beq.n	800619a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006184:	f043 0210 	orr.w	r2, r3, #16
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006198:	e01e      	b.n	80061d8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a4:	2b40      	cmp	r3, #64	; 0x40
 80061a6:	d007      	beq.n	80061b8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061b6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0220 	orr.w	r2, r2, #32
 80061c6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f042 0202 	orr.w	r2, r2, #2
 80061d6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	08006369 	.word	0x08006369
 80061f0:	08006251 	.word	0x08006251
 80061f4:	08006385 	.word	0x08006385
 80061f8:	080062d7 	.word	0x080062d7
 80061fc:	080063a1 	.word	0x080063a1

08006200 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800625c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800625e:	f7fc ffbf 	bl	80031e0 <HAL_GetTick>
 8006262:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800626e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006272:	d02a      	beq.n	80062ca <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0220 	bic.w	r2, r2, #32
 8006282:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685a      	ldr	r2, [r3, #4]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f022 0203 	bic.w	r2, r2, #3
 8006292:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	2164      	movs	r1, #100	; 0x64
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f978 	bl	800658e <SPI_EndRxTransaction>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2200      	movs	r2, #0
 80062ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f7ff ffba 	bl	800623c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80062c8:	e002      	b.n	80062d0 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f7fb fce2 	bl	8001c94 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e2:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062e4:	f7fc ff7c 	bl	80031e0 <HAL_GetTick>
 80062e8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f8:	d030      	beq.n	800635c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0220 	bic.w	r2, r2, #32
 8006308:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	2164      	movs	r1, #100	; 0x64
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 f995 	bl	800663e <SPI_EndRxTxTransaction>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d005      	beq.n	8006326 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631e:	f043 0220 	orr.w	r2, r3, #32
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f022 0203 	bic.w	r2, r2, #3
 8006334:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2200      	movs	r2, #0
 8006340:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f7ff ff71 	bl	800623c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800635a:	e002      	b.n	8006362 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f7ff ff4f 	bl	8006200 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006362:	3710      	adds	r7, #16
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7ff ff4c 	bl	8006214 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006390:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006392:	68f8      	ldr	r0, [r7, #12]
 8006394:	f7ff ff48 	bl	8006228 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006398:	bf00      	nop
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685a      	ldr	r2, [r3, #4]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0203 	bic.w	r2, r2, #3
 80063bc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c2:	f043 0210 	orr.w	r2, r3, #16
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f7ff ff32 	bl	800623c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	603b      	str	r3, [r7, #0]
 80063ec:	4613      	mov	r3, r2
 80063ee:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063f0:	e04c      	b.n	800648c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f8:	d048      	beq.n	800648c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80063fa:	f7fc fef1 	bl	80031e0 <HAL_GetTick>
 80063fe:	4602      	mov	r2, r0
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	1ad3      	subs	r3, r2, r3
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d902      	bls.n	8006410 <SPI_WaitFlagStateUntilTimeout+0x30>
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d13d      	bne.n	800648c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	685a      	ldr	r2, [r3, #4]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800641e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006428:	d111      	bne.n	800644e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006432:	d004      	beq.n	800643e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800643c:	d107      	bne.n	800644e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800644c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006456:	d10f      	bne.n	8006478 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006476:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2201      	movs	r2, #1
 800647c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2200      	movs	r2, #0
 8006484:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e00f      	b.n	80064ac <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	4013      	ands	r3, r2
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	bf0c      	ite	eq
 800649c:	2301      	moveq	r3, #1
 800649e:	2300      	movne	r3, #0
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	461a      	mov	r2, r3
 80064a4:	79fb      	ldrb	r3, [r7, #7]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d1a3      	bne.n	80063f2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
 80064c0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80064c2:	e057      	b.n	8006574 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80064ca:	d106      	bne.n	80064da <SPI_WaitFifoStateUntilTimeout+0x26>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d103      	bne.n	80064da <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	330c      	adds	r3, #12
 80064d8:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e0:	d048      	beq.n	8006574 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80064e2:	f7fc fe7d 	bl	80031e0 <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d902      	bls.n	80064f8 <SPI_WaitFifoStateUntilTimeout+0x44>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d13d      	bne.n	8006574 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006506:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006510:	d111      	bne.n	8006536 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800651a:	d004      	beq.n	8006526 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006524:	d107      	bne.n	8006536 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006534:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800653a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800653e:	d10f      	bne.n	8006560 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800655e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e008      	b.n	8006586 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	4013      	ands	r3, r2
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	429a      	cmp	r2, r3
 8006582:	d19f      	bne.n	80064c4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b086      	sub	sp, #24
 8006592:	af02      	add	r7, sp, #8
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065a2:	d111      	bne.n	80065c8 <SPI_EndRxTransaction+0x3a>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ac:	d004      	beq.n	80065b8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b6:	d107      	bne.n	80065c8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065c6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2200      	movs	r2, #0
 80065d0:	2180      	movs	r1, #128	; 0x80
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff ff04 	bl	80063e0 <SPI_WaitFlagStateUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d007      	beq.n	80065ee <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065e2:	f043 0220 	orr.w	r2, r3, #32
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e023      	b.n	8006636 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065f6:	d11d      	bne.n	8006634 <SPI_EndRxTransaction+0xa6>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006600:	d004      	beq.n	800660c <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800660a:	d113      	bne.n	8006634 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	9300      	str	r3, [sp, #0]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2200      	movs	r2, #0
 8006614:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f7ff ff4b 	bl	80064b4 <SPI_WaitFifoStateUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d007      	beq.n	8006634 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006628:	f043 0220 	orr.w	r2, r3, #32
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006630:	2303      	movs	r3, #3
 8006632:	e000      	b.n	8006636 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3710      	adds	r7, #16
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}

0800663e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b086      	sub	sp, #24
 8006642:	af02      	add	r7, sp, #8
 8006644:	60f8      	str	r0, [r7, #12]
 8006646:	60b9      	str	r1, [r7, #8]
 8006648:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2200      	movs	r2, #0
 8006652:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff ff2c 	bl	80064b4 <SPI_WaitFifoStateUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d007      	beq.n	8006672 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006666:	f043 0220 	orr.w	r2, r3, #32
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800666e:	2303      	movs	r3, #3
 8006670:	e027      	b.n	80066c2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2200      	movs	r2, #0
 800667a:	2180      	movs	r1, #128	; 0x80
 800667c:	68f8      	ldr	r0, [r7, #12]
 800667e:	f7ff feaf 	bl	80063e0 <SPI_WaitFlagStateUntilTimeout>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d007      	beq.n	8006698 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800668c:	f043 0220 	orr.w	r2, r3, #32
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e014      	b.n	80066c2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	2200      	movs	r2, #0
 80066a0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f7ff ff05 	bl	80064b4 <SPI_WaitFifoStateUntilTimeout>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e000      	b.n	80066c2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b082      	sub	sp, #8
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e01d      	b.n	8006718 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d106      	bne.n	80066f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7fc f923 	bl	800293c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2202      	movs	r2, #2
 80066fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	3304      	adds	r3, #4
 8006706:	4619      	mov	r1, r3
 8006708:	4610      	mov	r0, r2
 800670a:	f001 f827 	bl	800775c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0201 	orr.w	r2, r2, #1
 8006736:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <HAL_TIM_Base_Start_IT+0x50>)
 8006740:	4013      	ands	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b06      	cmp	r3, #6
 8006748:	d00b      	beq.n	8006762 <HAL_TIM_Base_Start_IT+0x42>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006750:	d007      	beq.n	8006762 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f042 0201 	orr.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	00010007 	.word	0x00010007

08006774 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	68da      	ldr	r2, [r3, #12]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f022 0201 	bic.w	r2, r2, #1
 800678a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6a1a      	ldr	r2, [r3, #32]
 8006792:	f241 1311 	movw	r3, #4369	; 0x1111
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10f      	bne.n	80067bc <HAL_TIM_Base_Stop_IT+0x48>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6a1a      	ldr	r2, [r3, #32]
 80067a2:	f240 4344 	movw	r3, #1092	; 0x444
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d107      	bne.n	80067bc <HAL_TIM_Base_Stop_IT+0x48>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0201 	bic.w	r2, r2, #1
 80067ba:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	370c      	adds	r7, #12
 80067c2:	46bd      	mov	sp, r7
 80067c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c8:	4770      	bx	lr

080067ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b082      	sub	sp, #8
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067d8:	2301      	movs	r3, #1
 80067da:	e01d      	b.n	8006818 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d106      	bne.n	80067f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7fc f9b7 	bl	8002b64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2202      	movs	r2, #2
 80067fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3304      	adds	r3, #4
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f000 ffa7 	bl	800775c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b0c      	cmp	r3, #12
 800682e:	d841      	bhi.n	80068b4 <HAL_TIM_PWM_Start_IT+0x94>
 8006830:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <HAL_TIM_PWM_Start_IT+0x18>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	0800686d 	.word	0x0800686d
 800683c:	080068b5 	.word	0x080068b5
 8006840:	080068b5 	.word	0x080068b5
 8006844:	080068b5 	.word	0x080068b5
 8006848:	0800687f 	.word	0x0800687f
 800684c:	080068b5 	.word	0x080068b5
 8006850:	080068b5 	.word	0x080068b5
 8006854:	080068b5 	.word	0x080068b5
 8006858:	08006891 	.word	0x08006891
 800685c:	080068b5 	.word	0x080068b5
 8006860:	080068b5 	.word	0x080068b5
 8006864:	080068b5 	.word	0x080068b5
 8006868:	080068a3 	.word	0x080068a3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f042 0202 	orr.w	r2, r2, #2
 800687a:	60da      	str	r2, [r3, #12]
      break;
 800687c:	e01b      	b.n	80068b6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f042 0204 	orr.w	r2, r2, #4
 800688c:	60da      	str	r2, [r3, #12]
      break;
 800688e:	e012      	b.n	80068b6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68da      	ldr	r2, [r3, #12]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f042 0208 	orr.w	r2, r2, #8
 800689e:	60da      	str	r2, [r3, #12]
      break;
 80068a0:	e009      	b.n	80068b6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68da      	ldr	r2, [r3, #12]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f042 0210 	orr.w	r2, r2, #16
 80068b0:	60da      	str	r2, [r3, #12]
      break;
 80068b2:	e000      	b.n	80068b6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80068b4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2201      	movs	r2, #1
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 fc96 	bl	80081f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4a17      	ldr	r2, [pc, #92]	; (8006928 <HAL_TIM_PWM_Start_IT+0x108>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d004      	beq.n	80068d8 <HAL_TIM_PWM_Start_IT+0xb8>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a16      	ldr	r2, [pc, #88]	; (800692c <HAL_TIM_PWM_Start_IT+0x10c>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d101      	bne.n	80068dc <HAL_TIM_PWM_Start_IT+0xbc>
 80068d8:	2301      	movs	r3, #1
 80068da:	e000      	b.n	80068de <HAL_TIM_PWM_Start_IT+0xbe>
 80068dc:	2300      	movs	r3, #0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d007      	beq.n	80068f2 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	4b0d      	ldr	r3, [pc, #52]	; (8006930 <HAL_TIM_PWM_Start_IT+0x110>)
 80068fa:	4013      	ands	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b06      	cmp	r3, #6
 8006902:	d00b      	beq.n	800691c <HAL_TIM_PWM_Start_IT+0xfc>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800690a:	d007      	beq.n	800691c <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0201 	orr.w	r2, r2, #1
 800691a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800691c:	2300      	movs	r3, #0
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	40010000 	.word	0x40010000
 800692c:	40010400 	.word	0x40010400
 8006930:	00010007 	.word	0x00010007

08006934 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b0c      	cmp	r3, #12
 8006942:	d841      	bhi.n	80069c8 <HAL_TIM_PWM_Stop_IT+0x94>
 8006944:	a201      	add	r2, pc, #4	; (adr r2, 800694c <HAL_TIM_PWM_Stop_IT+0x18>)
 8006946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800694a:	bf00      	nop
 800694c:	08006981 	.word	0x08006981
 8006950:	080069c9 	.word	0x080069c9
 8006954:	080069c9 	.word	0x080069c9
 8006958:	080069c9 	.word	0x080069c9
 800695c:	08006993 	.word	0x08006993
 8006960:	080069c9 	.word	0x080069c9
 8006964:	080069c9 	.word	0x080069c9
 8006968:	080069c9 	.word	0x080069c9
 800696c:	080069a5 	.word	0x080069a5
 8006970:	080069c9 	.word	0x080069c9
 8006974:	080069c9 	.word	0x080069c9
 8006978:	080069c9 	.word	0x080069c9
 800697c:	080069b7 	.word	0x080069b7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0202 	bic.w	r2, r2, #2
 800698e:	60da      	str	r2, [r3, #12]
      break;
 8006990:	e01b      	b.n	80069ca <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68da      	ldr	r2, [r3, #12]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0204 	bic.w	r2, r2, #4
 80069a0:	60da      	str	r2, [r3, #12]
      break;
 80069a2:	e012      	b.n	80069ca <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68da      	ldr	r2, [r3, #12]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0208 	bic.w	r2, r2, #8
 80069b2:	60da      	str	r2, [r3, #12]
      break;
 80069b4:	e009      	b.n	80069ca <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0210 	bic.w	r2, r2, #16
 80069c4:	60da      	str	r2, [r3, #12]
      break;
 80069c6:	e000      	b.n	80069ca <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 80069c8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2200      	movs	r2, #0
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 fc0c 	bl	80081f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a20      	ldr	r2, [pc, #128]	; (8006a60 <HAL_TIM_PWM_Stop_IT+0x12c>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d004      	beq.n	80069ec <HAL_TIM_PWM_Stop_IT+0xb8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a1f      	ldr	r2, [pc, #124]	; (8006a64 <HAL_TIM_PWM_Stop_IT+0x130>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d101      	bne.n	80069f0 <HAL_TIM_PWM_Stop_IT+0xbc>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <HAL_TIM_PWM_Stop_IT+0xbe>
 80069f0:	2300      	movs	r3, #0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d017      	beq.n	8006a26 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6a1a      	ldr	r2, [r3, #32]
 80069fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a00:	4013      	ands	r3, r2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d10f      	bne.n	8006a26 <HAL_TIM_PWM_Stop_IT+0xf2>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6a1a      	ldr	r2, [r3, #32]
 8006a0c:	f240 4344 	movw	r3, #1092	; 0x444
 8006a10:	4013      	ands	r3, r2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d107      	bne.n	8006a26 <HAL_TIM_PWM_Stop_IT+0xf2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a1a      	ldr	r2, [r3, #32]
 8006a2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006a30:	4013      	ands	r3, r2
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10f      	bne.n	8006a56 <HAL_TIM_PWM_Stop_IT+0x122>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6a1a      	ldr	r2, [r3, #32]
 8006a3c:	f240 4344 	movw	r3, #1092	; 0x444
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d107      	bne.n	8006a56 <HAL_TIM_PWM_Stop_IT+0x122>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0201 	bic.w	r2, r2, #1
 8006a54:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a56:	2300      	movs	r3, #0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40010400 	.word	0x40010400

08006a68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e01d      	b.n	8006ab6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d106      	bne.n	8006a94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7fb ffea 	bl	8002a68 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3304      	adds	r3, #4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f000 fe58 	bl	800775c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
 8006acc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d101      	bne.n	8006ade <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8006ada:	2302      	movs	r3, #2
 8006adc:	e0e0      	b.n	8006ca0 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d10b      	bne.n	8006b02 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d104      	bne.n	8006afa <HAL_TIM_IC_Start_DMA+0x3a>
 8006af0:	887b      	ldrh	r3, [r7, #2]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e0d2      	b.n	8006ca0 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2202      	movs	r2, #2
 8006afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	2b0c      	cmp	r3, #12
 8006b06:	f200 80ad 	bhi.w	8006c64 <HAL_TIM_IC_Start_DMA+0x1a4>
 8006b0a:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <HAL_TIM_IC_Start_DMA+0x50>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006b45 	.word	0x08006b45
 8006b14:	08006c65 	.word	0x08006c65
 8006b18:	08006c65 	.word	0x08006c65
 8006b1c:	08006c65 	.word	0x08006c65
 8006b20:	08006b8d 	.word	0x08006b8d
 8006b24:	08006c65 	.word	0x08006c65
 8006b28:	08006c65 	.word	0x08006c65
 8006b2c:	08006c65 	.word	0x08006c65
 8006b30:	08006bd5 	.word	0x08006bd5
 8006b34:	08006c65 	.word	0x08006c65
 8006b38:	08006c65 	.word	0x08006c65
 8006b3c:	08006c65 	.word	0x08006c65
 8006b40:	08006c1d 	.word	0x08006c1d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	4a57      	ldr	r2, [pc, #348]	; (8006ca8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006b4a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	4a56      	ldr	r2, [pc, #344]	; (8006cac <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006b52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b58:	4a55      	ldr	r2, [pc, #340]	; (8006cb0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006b5a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3334      	adds	r3, #52	; 0x34
 8006b66:	4619      	mov	r1, r3
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	887b      	ldrh	r3, [r7, #2]
 8006b6c:	f7fd f932 	bl	8003dd4 <HAL_DMA_Start_IT>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e092      	b.n	8006ca0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	68da      	ldr	r2, [r3, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b88:	60da      	str	r2, [r3, #12]
      break;
 8006b8a:	e06c      	b.n	8006c66 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b90:	4a45      	ldr	r2, [pc, #276]	; (8006ca8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006b92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b98:	4a44      	ldr	r2, [pc, #272]	; (8006cac <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	4a43      	ldr	r2, [pc, #268]	; (8006cb0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006ba2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	3338      	adds	r3, #56	; 0x38
 8006bae:	4619      	mov	r1, r3
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	887b      	ldrh	r3, [r7, #2]
 8006bb4:	f7fd f90e 	bl	8003dd4 <HAL_DMA_Start_IT>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d001      	beq.n	8006bc2 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e06e      	b.n	8006ca0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006bd0:	60da      	str	r2, [r3, #12]
      break;
 8006bd2:	e048      	b.n	8006c66 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd8:	4a33      	ldr	r2, [pc, #204]	; (8006ca8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006bda:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be0:	4a32      	ldr	r2, [pc, #200]	; (8006cac <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006be2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	4a31      	ldr	r2, [pc, #196]	; (8006cb0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006bea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	333c      	adds	r3, #60	; 0x3c
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	887b      	ldrh	r3, [r7, #2]
 8006bfc:	f7fd f8ea 	bl	8003dd4 <HAL_DMA_Start_IT>
 8006c00:	4603      	mov	r3, r0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e04a      	b.n	8006ca0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68da      	ldr	r2, [r3, #12]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c18:	60da      	str	r2, [r3, #12]
      break;
 8006c1a:	e024      	b.n	8006c66 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c20:	4a21      	ldr	r2, [pc, #132]	; (8006ca8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006c22:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c28:	4a20      	ldr	r2, [pc, #128]	; (8006cac <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c30:	4a1f      	ldr	r2, [pc, #124]	; (8006cb0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006c32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	3340      	adds	r3, #64	; 0x40
 8006c3e:	4619      	mov	r1, r3
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	887b      	ldrh	r3, [r7, #2]
 8006c44:	f7fd f8c6 	bl	8003dd4 <HAL_DMA_Start_IT>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e026      	b.n	8006ca0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c60:	60da      	str	r2, [r3, #12]
      break;
 8006c62:	e000      	b.n	8006c66 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8006c64:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f001 fabe 	bl	80081f0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689a      	ldr	r2, [r3, #8]
 8006c7a:	4b0e      	ldr	r3, [pc, #56]	; (8006cb4 <HAL_TIM_IC_Start_DMA+0x1f4>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	2b06      	cmp	r3, #6
 8006c84:	d00b      	beq.n	8006c9e <HAL_TIM_IC_Start_DMA+0x1de>
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c8c:	d007      	beq.n	8006c9e <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f042 0201 	orr.w	r2, r2, #1
 8006c9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3718      	adds	r7, #24
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	0800767d 	.word	0x0800767d
 8006cac:	080076ed 	.word	0x080076ed
 8006cb0:	08007659 	.word	0x08007659
 8006cb4:	00010007 	.word	0x00010007

08006cb8 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
 8006cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b0c      	cmp	r3, #12
 8006cc6:	d855      	bhi.n	8006d74 <HAL_TIM_IC_Stop_DMA+0xbc>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <HAL_TIM_IC_Stop_DMA+0x18>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d05 	.word	0x08006d05
 8006cd4:	08006d75 	.word	0x08006d75
 8006cd8:	08006d75 	.word	0x08006d75
 8006cdc:	08006d75 	.word	0x08006d75
 8006ce0:	08006d21 	.word	0x08006d21
 8006ce4:	08006d75 	.word	0x08006d75
 8006ce8:	08006d75 	.word	0x08006d75
 8006cec:	08006d75 	.word	0x08006d75
 8006cf0:	08006d3d 	.word	0x08006d3d
 8006cf4:	08006d75 	.word	0x08006d75
 8006cf8:	08006d75 	.word	0x08006d75
 8006cfc:	08006d75 	.word	0x08006d75
 8006d00:	08006d59 	.word	0x08006d59
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006d12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7fd f8bb 	bl	8003e94 <HAL_DMA_Abort_IT>
      break;
 8006d1e:	e02a      	b.n	8006d76 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d2e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fd f8ad 	bl	8003e94 <HAL_DMA_Abort_IT>
      break;
 8006d3a:	e01c      	b.n	8006d76 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68da      	ldr	r2, [r3, #12]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d4a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fd f89f 	bl	8003e94 <HAL_DMA_Abort_IT>
      break;
 8006d56:	e00e      	b.n	8006d76 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68da      	ldr	r2, [r3, #12]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d66:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fd f891 	bl	8003e94 <HAL_DMA_Abort_IT>
      break;
 8006d72:	e000      	b.n	8006d76 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 8006d74:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f001 fa36 	bl	80081f0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	6a1a      	ldr	r2, [r3, #32]
 8006d8a:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d10f      	bne.n	8006db4 <HAL_TIM_IC_Stop_DMA+0xfc>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6a1a      	ldr	r2, [r3, #32]
 8006d9a:	f240 4344 	movw	r3, #1092	; 0x444
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d107      	bne.n	8006db4 <HAL_TIM_IC_Stop_DMA+0xfc>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0201 	bic.w	r2, r2, #1
 8006db2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop

08006dc8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e02d      	b.n	8006e38 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d106      	bne.n	8006df6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 f825 	bl	8006e40 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	3304      	adds	r3, #4
 8006e06:	4619      	mov	r1, r3
 8006e08:	4610      	mov	r0, r2
 8006e0a:	f000 fca7 	bl	800775c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 0208 	bic.w	r2, r2, #8
 8006e1c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	6819      	ldr	r1, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	f003 0302 	and.w	r3, r3, #2
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d122      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0302 	and.w	r3, r3, #2
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d11b      	bne.n	8006eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f06f 0202 	mvn.w	r2, #2
 8006e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f003 0303 	and.w	r3, r3, #3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d003      	beq.n	8006e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fa fe9c 	bl	8001bd4 <HAL_TIM_IC_CaptureCallback>
 8006e9c:	e005      	b.n	8006eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fba8 	bl	80075f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fbb9 	bl	800761c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2200      	movs	r2, #0
 8006eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b04      	cmp	r3, #4
 8006ebc:	d122      	bne.n	8006f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	2b04      	cmp	r3, #4
 8006eca:	d11b      	bne.n	8006f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f06f 0204 	mvn.w	r2, #4
 8006ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d003      	beq.n	8006ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7fa fe72 	bl	8001bd4 <HAL_TIM_IC_CaptureCallback>
 8006ef0:	e005      	b.n	8006efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 fb7e 	bl	80075f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f000 fb8f 	bl	800761c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	691b      	ldr	r3, [r3, #16]
 8006f0a:	f003 0308 	and.w	r3, r3, #8
 8006f0e:	2b08      	cmp	r3, #8
 8006f10:	d122      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	f003 0308 	and.w	r3, r3, #8
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	d11b      	bne.n	8006f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f06f 0208 	mvn.w	r2, #8
 8006f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2204      	movs	r2, #4
 8006f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69db      	ldr	r3, [r3, #28]
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d003      	beq.n	8006f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fa fe48 	bl	8001bd4 <HAL_TIM_IC_CaptureCallback>
 8006f44:	e005      	b.n	8006f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fb54 	bl	80075f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fb65 	bl	800761c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0310 	and.w	r3, r3, #16
 8006f62:	2b10      	cmp	r3, #16
 8006f64:	d122      	bne.n	8006fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	f003 0310 	and.w	r3, r3, #16
 8006f70:	2b10      	cmp	r3, #16
 8006f72:	d11b      	bne.n	8006fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f06f 0210 	mvn.w	r2, #16
 8006f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2208      	movs	r2, #8
 8006f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	69db      	ldr	r3, [r3, #28]
 8006f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f7fa fe1e 	bl	8001bd4 <HAL_TIM_IC_CaptureCallback>
 8006f98:	e005      	b.n	8006fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fb2a 	bl	80075f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fb3b 	bl	800761c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	691b      	ldr	r3, [r3, #16]
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d10e      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	f003 0301 	and.w	r3, r3, #1
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d107      	bne.n	8006fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f06f 0201 	mvn.w	r2, #1
 8006fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fa fbf0 	bl	80017b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe2:	2b80      	cmp	r3, #128	; 0x80
 8006fe4:	d10e      	bne.n	8007004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	68db      	ldr	r3, [r3, #12]
 8006fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff0:	2b80      	cmp	r3, #128	; 0x80
 8006ff2:	d107      	bne.n	8007004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f001 fa32 	bl	8008468 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800700e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007012:	d10e      	bne.n	8007032 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d107      	bne.n	8007032 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800702a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 fa25 	bl	800847c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	d10e      	bne.n	800705e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704a:	2b40      	cmp	r3, #64	; 0x40
 800704c:	d107      	bne.n	800705e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fae9 	bl	8007630 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	f003 0320 	and.w	r3, r3, #32
 8007068:	2b20      	cmp	r3, #32
 800706a:	d10e      	bne.n	800708a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	f003 0320 	and.w	r3, r3, #32
 8007076:	2b20      	cmp	r3, #32
 8007078:	d107      	bne.n	800708a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f06f 0220 	mvn.w	r2, #32
 8007082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f001 f9e5 	bl	8008454 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800708a:	bf00      	nop
 800708c:	3708      	adds	r7, #8
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b084      	sub	sp, #16
 8007096:	af00      	add	r7, sp, #0
 8007098:	60f8      	str	r0, [r7, #12]
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d101      	bne.n	80070ac <HAL_TIM_IC_ConfigChannel+0x1a>
 80070a8:	2302      	movs	r3, #2
 80070aa:	e08a      	b.n	80071c2 <HAL_TIM_IC_ConfigChannel+0x130>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d11b      	bne.n	80070fa <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6818      	ldr	r0, [r3, #0]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6819      	ldr	r1, [r3, #0]
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	f000 fec9 	bl	8007e68 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	699a      	ldr	r2, [r3, #24]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f022 020c 	bic.w	r2, r2, #12
 80070e4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6999      	ldr	r1, [r3, #24]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	430a      	orrs	r2, r1
 80070f6:	619a      	str	r2, [r3, #24]
 80070f8:	e05a      	b.n	80071b0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d11c      	bne.n	800713a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	6819      	ldr	r1, [r3, #0]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	68db      	ldr	r3, [r3, #12]
 8007110:	f000 ff4d 	bl	8007fae <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007122:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6999      	ldr	r1, [r3, #24]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	021a      	lsls	r2, r3, #8
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	619a      	str	r2, [r3, #24]
 8007138:	e03a      	b.n	80071b0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b08      	cmp	r3, #8
 800713e:	d11b      	bne.n	8007178 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6818      	ldr	r0, [r3, #0]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	6819      	ldr	r1, [r3, #0]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	685a      	ldr	r2, [r3, #4]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	f000 ff9a 	bl	8008088 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69da      	ldr	r2, [r3, #28]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 020c 	bic.w	r2, r2, #12
 8007162:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69d9      	ldr	r1, [r3, #28]
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	430a      	orrs	r2, r1
 8007174:	61da      	str	r2, [r3, #28]
 8007176:	e01b      	b.n	80071b0 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6818      	ldr	r0, [r3, #0]
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	6819      	ldr	r1, [r3, #0]
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	f000 ffba 	bl	8008100 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69da      	ldr	r2, [r3, #28]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800719a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	69d9      	ldr	r1, [r3, #28]
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	021a      	lsls	r2, r3, #8
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071de:	2b01      	cmp	r3, #1
 80071e0:	d101      	bne.n	80071e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80071e2:	2302      	movs	r3, #2
 80071e4:	e105      	b.n	80073f2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2202      	movs	r2, #2
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b14      	cmp	r3, #20
 80071fa:	f200 80f0 	bhi.w	80073de <HAL_TIM_PWM_ConfigChannel+0x212>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007259 	.word	0x08007259
 8007208:	080073df 	.word	0x080073df
 800720c:	080073df 	.word	0x080073df
 8007210:	080073df 	.word	0x080073df
 8007214:	08007299 	.word	0x08007299
 8007218:	080073df 	.word	0x080073df
 800721c:	080073df 	.word	0x080073df
 8007220:	080073df 	.word	0x080073df
 8007224:	080072db 	.word	0x080072db
 8007228:	080073df 	.word	0x080073df
 800722c:	080073df 	.word	0x080073df
 8007230:	080073df 	.word	0x080073df
 8007234:	0800731b 	.word	0x0800731b
 8007238:	080073df 	.word	0x080073df
 800723c:	080073df 	.word	0x080073df
 8007240:	080073df 	.word	0x080073df
 8007244:	0800735d 	.word	0x0800735d
 8007248:	080073df 	.word	0x080073df
 800724c:	080073df 	.word	0x080073df
 8007250:	080073df 	.word	0x080073df
 8007254:	0800739d 	.word	0x0800739d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	4618      	mov	r0, r3
 8007260:	f000 fb1c 	bl	800789c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 0208 	orr.w	r2, r2, #8
 8007272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	699a      	ldr	r2, [r3, #24]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 0204 	bic.w	r2, r2, #4
 8007282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	6999      	ldr	r1, [r3, #24]
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	691a      	ldr	r2, [r3, #16]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	619a      	str	r2, [r3, #24]
      break;
 8007296:	e0a3      	b.n	80073e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	68b9      	ldr	r1, [r7, #8]
 800729e:	4618      	mov	r0, r3
 80072a0:	f000 fb6e 	bl	8007980 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699a      	ldr	r2, [r3, #24]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6999      	ldr	r1, [r3, #24]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	021a      	lsls	r2, r3, #8
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	619a      	str	r2, [r3, #24]
      break;
 80072d8:	e082      	b.n	80073e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	68b9      	ldr	r1, [r7, #8]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fbc5 	bl	8007a70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	69da      	ldr	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f042 0208 	orr.w	r2, r2, #8
 80072f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	69da      	ldr	r2, [r3, #28]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0204 	bic.w	r2, r2, #4
 8007304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69d9      	ldr	r1, [r3, #28]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	61da      	str	r2, [r3, #28]
      break;
 8007318:	e062      	b.n	80073e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68b9      	ldr	r1, [r7, #8]
 8007320:	4618      	mov	r0, r3
 8007322:	f000 fc1b 	bl	8007b5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	69da      	ldr	r2, [r3, #28]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	69da      	ldr	r2, [r3, #28]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69d9      	ldr	r1, [r3, #28]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	021a      	lsls	r2, r3, #8
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	61da      	str	r2, [r3, #28]
      break;
 800735a:	e041      	b.n	80073e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68b9      	ldr	r1, [r7, #8]
 8007362:	4618      	mov	r0, r3
 8007364:	f000 fc52 	bl	8007c0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0208 	orr.w	r2, r2, #8
 8007376:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 0204 	bic.w	r2, r2, #4
 8007386:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	691a      	ldr	r2, [r3, #16]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	430a      	orrs	r2, r1
 8007398:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800739a:	e021      	b.n	80073e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68b9      	ldr	r1, [r7, #8]
 80073a2:	4618      	mov	r0, r3
 80073a4:	f000 fc84 	bl	8007cb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	021a      	lsls	r2, r3, #8
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	430a      	orrs	r2, r1
 80073da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80073dc:	e000      	b.n	80073e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80073de:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3710      	adds	r7, #16
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop

080073fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
 8007404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800740c:	2b01      	cmp	r3, #1
 800740e:	d101      	bne.n	8007414 <HAL_TIM_ConfigClockSource+0x18>
 8007410:	2302      	movs	r3, #2
 8007412:	e0a6      	b.n	8007562 <HAL_TIM_ConfigClockSource+0x166>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2202      	movs	r2, #2
 8007420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800742c:	68fa      	ldr	r2, [r7, #12]
 800742e:	4b4f      	ldr	r3, [pc, #316]	; (800756c <HAL_TIM_ConfigClockSource+0x170>)
 8007430:	4013      	ands	r3, r2
 8007432:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800743a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b40      	cmp	r3, #64	; 0x40
 800744a:	d067      	beq.n	800751c <HAL_TIM_ConfigClockSource+0x120>
 800744c:	2b40      	cmp	r3, #64	; 0x40
 800744e:	d80b      	bhi.n	8007468 <HAL_TIM_ConfigClockSource+0x6c>
 8007450:	2b10      	cmp	r3, #16
 8007452:	d073      	beq.n	800753c <HAL_TIM_ConfigClockSource+0x140>
 8007454:	2b10      	cmp	r3, #16
 8007456:	d802      	bhi.n	800745e <HAL_TIM_ConfigClockSource+0x62>
 8007458:	2b00      	cmp	r3, #0
 800745a:	d06f      	beq.n	800753c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800745c:	e078      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800745e:	2b20      	cmp	r3, #32
 8007460:	d06c      	beq.n	800753c <HAL_TIM_ConfigClockSource+0x140>
 8007462:	2b30      	cmp	r3, #48	; 0x30
 8007464:	d06a      	beq.n	800753c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007466:	e073      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007468:	2b70      	cmp	r3, #112	; 0x70
 800746a:	d00d      	beq.n	8007488 <HAL_TIM_ConfigClockSource+0x8c>
 800746c:	2b70      	cmp	r3, #112	; 0x70
 800746e:	d804      	bhi.n	800747a <HAL_TIM_ConfigClockSource+0x7e>
 8007470:	2b50      	cmp	r3, #80	; 0x50
 8007472:	d033      	beq.n	80074dc <HAL_TIM_ConfigClockSource+0xe0>
 8007474:	2b60      	cmp	r3, #96	; 0x60
 8007476:	d041      	beq.n	80074fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007478:	e06a      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800747a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800747e:	d066      	beq.n	800754e <HAL_TIM_ConfigClockSource+0x152>
 8007480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007484:	d017      	beq.n	80074b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007486:	e063      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	6899      	ldr	r1, [r3, #8]
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	f000 fe8a 	bl	80081b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80074aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68fa      	ldr	r2, [r7, #12]
 80074b2:	609a      	str	r2, [r3, #8]
      break;
 80074b4:	e04c      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6818      	ldr	r0, [r3, #0]
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	6899      	ldr	r1, [r3, #8]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	68db      	ldr	r3, [r3, #12]
 80074c6:	f000 fe73 	bl	80081b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	689a      	ldr	r2, [r3, #8]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074d8:	609a      	str	r2, [r3, #8]
      break;
 80074da:	e039      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6818      	ldr	r0, [r3, #0]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	6859      	ldr	r1, [r3, #4]
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	461a      	mov	r2, r3
 80074ea:	f000 fd31 	bl	8007f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	2150      	movs	r1, #80	; 0x50
 80074f4:	4618      	mov	r0, r3
 80074f6:	f000 fe40 	bl	800817a <TIM_ITRx_SetConfig>
      break;
 80074fa:	e029      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	6859      	ldr	r1, [r3, #4]
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	68db      	ldr	r3, [r3, #12]
 8007508:	461a      	mov	r2, r3
 800750a:	f000 fd8d 	bl	8008028 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2160      	movs	r1, #96	; 0x60
 8007514:	4618      	mov	r0, r3
 8007516:	f000 fe30 	bl	800817a <TIM_ITRx_SetConfig>
      break;
 800751a:	e019      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	6859      	ldr	r1, [r3, #4]
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	461a      	mov	r2, r3
 800752a:	f000 fd11 	bl	8007f50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	2140      	movs	r1, #64	; 0x40
 8007534:	4618      	mov	r0, r3
 8007536:	f000 fe20 	bl	800817a <TIM_ITRx_SetConfig>
      break;
 800753a:	e009      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4619      	mov	r1, r3
 8007546:	4610      	mov	r0, r2
 8007548:	f000 fe17 	bl	800817a <TIM_ITRx_SetConfig>
      break;
 800754c:	e000      	b.n	8007550 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800754e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	fffeff88 	.word	0xfffeff88

08007570 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007584:	2302      	movs	r3, #2
 8007586:	e031      	b.n	80075ec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fbdc 	bl	8007d58 <TIM_SlaveTimer_SetConfig>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d009      	beq.n	80075ba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80075b6:	2301      	movs	r3, #1
 80075b8:	e018      	b.n	80075ec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	68da      	ldr	r2, [r3, #12]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075c8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80075d8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f7ff ffe8 	bl	8007644 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007674:	bf00      	nop
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007688:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	429a      	cmp	r2, r3
 800769a:	d103      	bne.n	80076a4 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	771a      	strb	r2, [r3, #28]
 80076a2:	e019      	b.n	80076d8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d103      	bne.n	80076b6 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2202      	movs	r2, #2
 80076b2:	771a      	strb	r2, [r3, #28]
 80076b4:	e010      	b.n	80076d8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d103      	bne.n	80076c8 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2204      	movs	r2, #4
 80076c4:	771a      	strb	r2, [r3, #28]
 80076c6:	e007      	b.n	80076d8 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d102      	bne.n	80076d8 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2208      	movs	r2, #8
 80076d6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f7fa fa7b 	bl	8001bd4 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	771a      	strb	r2, [r3, #28]
}
 80076e4:	bf00      	nop
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2201      	movs	r2, #1
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	429a      	cmp	r2, r3
 800770a:	d103      	bne.n	8007714 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2201      	movs	r2, #1
 8007710:	771a      	strb	r2, [r3, #28]
 8007712:	e019      	b.n	8007748 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	429a      	cmp	r2, r3
 800771c:	d103      	bne.n	8007726 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2202      	movs	r2, #2
 8007722:	771a      	strb	r2, [r3, #28]
 8007724:	e010      	b.n	8007748 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	429a      	cmp	r2, r3
 800772e:	d103      	bne.n	8007738 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2204      	movs	r2, #4
 8007734:	771a      	strb	r2, [r3, #28]
 8007736:	e007      	b.n	8007748 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	429a      	cmp	r2, r3
 8007740:	d102      	bne.n	8007748 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	2208      	movs	r2, #8
 8007746:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f7ff ff5d 	bl	8007608 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2200      	movs	r2, #0
 8007752:	771a      	strb	r2, [r3, #28]
}
 8007754:	bf00      	nop
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4a40      	ldr	r2, [pc, #256]	; (8007870 <TIM_Base_SetConfig+0x114>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d013      	beq.n	800779c <TIM_Base_SetConfig+0x40>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800777a:	d00f      	beq.n	800779c <TIM_Base_SetConfig+0x40>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	4a3d      	ldr	r2, [pc, #244]	; (8007874 <TIM_Base_SetConfig+0x118>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00b      	beq.n	800779c <TIM_Base_SetConfig+0x40>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	4a3c      	ldr	r2, [pc, #240]	; (8007878 <TIM_Base_SetConfig+0x11c>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d007      	beq.n	800779c <TIM_Base_SetConfig+0x40>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4a3b      	ldr	r2, [pc, #236]	; (800787c <TIM_Base_SetConfig+0x120>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d003      	beq.n	800779c <TIM_Base_SetConfig+0x40>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4a3a      	ldr	r2, [pc, #232]	; (8007880 <TIM_Base_SetConfig+0x124>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d108      	bne.n	80077ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a2f      	ldr	r2, [pc, #188]	; (8007870 <TIM_Base_SetConfig+0x114>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d02b      	beq.n	800780e <TIM_Base_SetConfig+0xb2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077bc:	d027      	beq.n	800780e <TIM_Base_SetConfig+0xb2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a2c      	ldr	r2, [pc, #176]	; (8007874 <TIM_Base_SetConfig+0x118>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d023      	beq.n	800780e <TIM_Base_SetConfig+0xb2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a2b      	ldr	r2, [pc, #172]	; (8007878 <TIM_Base_SetConfig+0x11c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d01f      	beq.n	800780e <TIM_Base_SetConfig+0xb2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a2a      	ldr	r2, [pc, #168]	; (800787c <TIM_Base_SetConfig+0x120>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d01b      	beq.n	800780e <TIM_Base_SetConfig+0xb2>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a29      	ldr	r2, [pc, #164]	; (8007880 <TIM_Base_SetConfig+0x124>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d017      	beq.n	800780e <TIM_Base_SetConfig+0xb2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a28      	ldr	r2, [pc, #160]	; (8007884 <TIM_Base_SetConfig+0x128>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d013      	beq.n	800780e <TIM_Base_SetConfig+0xb2>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a27      	ldr	r2, [pc, #156]	; (8007888 <TIM_Base_SetConfig+0x12c>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00f      	beq.n	800780e <TIM_Base_SetConfig+0xb2>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a26      	ldr	r2, [pc, #152]	; (800788c <TIM_Base_SetConfig+0x130>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d00b      	beq.n	800780e <TIM_Base_SetConfig+0xb2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a25      	ldr	r2, [pc, #148]	; (8007890 <TIM_Base_SetConfig+0x134>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d007      	beq.n	800780e <TIM_Base_SetConfig+0xb2>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4a24      	ldr	r2, [pc, #144]	; (8007894 <TIM_Base_SetConfig+0x138>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d003      	beq.n	800780e <TIM_Base_SetConfig+0xb2>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a23      	ldr	r2, [pc, #140]	; (8007898 <TIM_Base_SetConfig+0x13c>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d108      	bne.n	8007820 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4313      	orrs	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a0a      	ldr	r2, [pc, #40]	; (8007870 <TIM_Base_SetConfig+0x114>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d003      	beq.n	8007854 <TIM_Base_SetConfig+0xf8>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a0c      	ldr	r2, [pc, #48]	; (8007880 <TIM_Base_SetConfig+0x124>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d103      	bne.n	800785c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	615a      	str	r2, [r3, #20]
}
 8007862:	bf00      	nop
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	40010000 	.word	0x40010000
 8007874:	40000400 	.word	0x40000400
 8007878:	40000800 	.word	0x40000800
 800787c:	40000c00 	.word	0x40000c00
 8007880:	40010400 	.word	0x40010400
 8007884:	40014000 	.word	0x40014000
 8007888:	40014400 	.word	0x40014400
 800788c:	40014800 	.word	0x40014800
 8007890:	40001800 	.word	0x40001800
 8007894:	40001c00 	.word	0x40001c00
 8007898:	40002000 	.word	0x40002000

0800789c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f023 0201 	bic.w	r2, r3, #1
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	4b2b      	ldr	r3, [pc, #172]	; (8007974 <TIM_OC1_SetConfig+0xd8>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0303 	bic.w	r3, r3, #3
 80078d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	68fa      	ldr	r2, [r7, #12]
 80078da:	4313      	orrs	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f023 0302 	bic.w	r3, r3, #2
 80078e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a21      	ldr	r2, [pc, #132]	; (8007978 <TIM_OC1_SetConfig+0xdc>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d003      	beq.n	8007900 <TIM_OC1_SetConfig+0x64>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a20      	ldr	r2, [pc, #128]	; (800797c <TIM_OC1_SetConfig+0xe0>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d10c      	bne.n	800791a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f023 0308 	bic.w	r3, r3, #8
 8007906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	68db      	ldr	r3, [r3, #12]
 800790c:	697a      	ldr	r2, [r7, #20]
 800790e:	4313      	orrs	r3, r2
 8007910:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f023 0304 	bic.w	r3, r3, #4
 8007918:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a16      	ldr	r2, [pc, #88]	; (8007978 <TIM_OC1_SetConfig+0xdc>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d003      	beq.n	800792a <TIM_OC1_SetConfig+0x8e>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a15      	ldr	r2, [pc, #84]	; (800797c <TIM_OC1_SetConfig+0xe0>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d111      	bne.n	800794e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007930:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007938:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	695b      	ldr	r3, [r3, #20]
 800793e:	693a      	ldr	r2, [r7, #16]
 8007940:	4313      	orrs	r3, r2
 8007942:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	685a      	ldr	r2, [r3, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	697a      	ldr	r2, [r7, #20]
 8007966:	621a      	str	r2, [r3, #32]
}
 8007968:	bf00      	nop
 800796a:	371c      	adds	r7, #28
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	fffeff8f 	.word	0xfffeff8f
 8007978:	40010000 	.word	0x40010000
 800797c:	40010400 	.word	0x40010400

08007980 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a1b      	ldr	r3, [r3, #32]
 800798e:	f023 0210 	bic.w	r2, r3, #16
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4b2e      	ldr	r3, [pc, #184]	; (8007a64 <TIM_OC2_SetConfig+0xe4>)
 80079ac:	4013      	ands	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	021b      	lsls	r3, r3, #8
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f023 0320 	bic.w	r3, r3, #32
 80079ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	011b      	lsls	r3, r3, #4
 80079d2:	697a      	ldr	r2, [r7, #20]
 80079d4:	4313      	orrs	r3, r2
 80079d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a23      	ldr	r2, [pc, #140]	; (8007a68 <TIM_OC2_SetConfig+0xe8>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d003      	beq.n	80079e8 <TIM_OC2_SetConfig+0x68>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a22      	ldr	r2, [pc, #136]	; (8007a6c <TIM_OC2_SetConfig+0xec>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d10d      	bne.n	8007a04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	697a      	ldr	r2, [r7, #20]
 80079f8:	4313      	orrs	r3, r2
 80079fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a18      	ldr	r2, [pc, #96]	; (8007a68 <TIM_OC2_SetConfig+0xe8>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d003      	beq.n	8007a14 <TIM_OC2_SetConfig+0x94>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4a17      	ldr	r2, [pc, #92]	; (8007a6c <TIM_OC2_SetConfig+0xec>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d113      	bne.n	8007a3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	699b      	ldr	r3, [r3, #24]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	693a      	ldr	r2, [r7, #16]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	693a      	ldr	r2, [r7, #16]
 8007a40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	697a      	ldr	r2, [r7, #20]
 8007a54:	621a      	str	r2, [r3, #32]
}
 8007a56:	bf00      	nop
 8007a58:	371c      	adds	r7, #28
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	feff8fff 	.word	0xfeff8fff
 8007a68:	40010000 	.word	0x40010000
 8007a6c:	40010400 	.word	0x40010400

08007a70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	69db      	ldr	r3, [r3, #28]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4b2d      	ldr	r3, [pc, #180]	; (8007b50 <TIM_OC3_SetConfig+0xe0>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 0303 	bic.w	r3, r3, #3
 8007aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	021b      	lsls	r3, r3, #8
 8007ac0:	697a      	ldr	r2, [r7, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a22      	ldr	r2, [pc, #136]	; (8007b54 <TIM_OC3_SetConfig+0xe4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d003      	beq.n	8007ad6 <TIM_OC3_SetConfig+0x66>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a21      	ldr	r2, [pc, #132]	; (8007b58 <TIM_OC3_SetConfig+0xe8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d10d      	bne.n	8007af2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	021b      	lsls	r3, r3, #8
 8007ae4:	697a      	ldr	r2, [r7, #20]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	4a17      	ldr	r2, [pc, #92]	; (8007b54 <TIM_OC3_SetConfig+0xe4>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d003      	beq.n	8007b02 <TIM_OC3_SetConfig+0x92>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a16      	ldr	r2, [pc, #88]	; (8007b58 <TIM_OC3_SetConfig+0xe8>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d113      	bne.n	8007b2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	011b      	lsls	r3, r3, #4
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	693a      	ldr	r2, [r7, #16]
 8007b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	685a      	ldr	r2, [r3, #4]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	621a      	str	r2, [r3, #32]
}
 8007b44:	bf00      	nop
 8007b46:	371c      	adds	r7, #28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr
 8007b50:	fffeff8f 	.word	0xfffeff8f
 8007b54:	40010000 	.word	0x40010000
 8007b58:	40010400 	.word	0x40010400

08007b5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4b1e      	ldr	r3, [pc, #120]	; (8007c00 <TIM_OC4_SetConfig+0xa4>)
 8007b88:	4013      	ands	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	021b      	lsls	r3, r3, #8
 8007b9a:	68fa      	ldr	r2, [r7, #12]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	031b      	lsls	r3, r3, #12
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a13      	ldr	r2, [pc, #76]	; (8007c04 <TIM_OC4_SetConfig+0xa8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d003      	beq.n	8007bc4 <TIM_OC4_SetConfig+0x68>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a12      	ldr	r2, [pc, #72]	; (8007c08 <TIM_OC4_SetConfig+0xac>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d109      	bne.n	8007bd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	019b      	lsls	r3, r3, #6
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	621a      	str	r2, [r3, #32]
}
 8007bf2:	bf00      	nop
 8007bf4:	371c      	adds	r7, #28
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	feff8fff 	.word	0xfeff8fff
 8007c04:	40010000 	.word	0x40010000
 8007c08:	40010400 	.word	0x40010400

08007c0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a1b      	ldr	r3, [r3, #32]
 8007c1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	4b1b      	ldr	r3, [pc, #108]	; (8007ca4 <TIM_OC5_SetConfig+0x98>)
 8007c38:	4013      	ands	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007c4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	041b      	lsls	r3, r3, #16
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a12      	ldr	r2, [pc, #72]	; (8007ca8 <TIM_OC5_SetConfig+0x9c>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d003      	beq.n	8007c6a <TIM_OC5_SetConfig+0x5e>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a11      	ldr	r2, [pc, #68]	; (8007cac <TIM_OC5_SetConfig+0xa0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d109      	bne.n	8007c7e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	695b      	ldr	r3, [r3, #20]
 8007c76:	021b      	lsls	r3, r3, #8
 8007c78:	697a      	ldr	r2, [r7, #20]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	693a      	ldr	r2, [r7, #16]
 8007c96:	621a      	str	r2, [r3, #32]
}
 8007c98:	bf00      	nop
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	fffeff8f 	.word	0xfffeff8f
 8007ca8:	40010000 	.word	0x40010000
 8007cac:	40010400 	.word	0x40010400

08007cb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a1b      	ldr	r3, [r3, #32]
 8007cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4b1c      	ldr	r3, [pc, #112]	; (8007d4c <TIM_OC6_SetConfig+0x9c>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	051b      	lsls	r3, r3, #20
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a13      	ldr	r2, [pc, #76]	; (8007d50 <TIM_OC6_SetConfig+0xa0>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d003      	beq.n	8007d10 <TIM_OC6_SetConfig+0x60>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a12      	ldr	r2, [pc, #72]	; (8007d54 <TIM_OC6_SetConfig+0xa4>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d109      	bne.n	8007d24 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	029b      	lsls	r3, r3, #10
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	693a      	ldr	r2, [r7, #16]
 8007d3c:	621a      	str	r2, [r3, #32]
}
 8007d3e:	bf00      	nop
 8007d40:	371c      	adds	r7, #28
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr
 8007d4a:	bf00      	nop
 8007d4c:	feff8fff 	.word	0xfeff8fff
 8007d50:	40010000 	.word	0x40010000
 8007d54:	40010400 	.word	0x40010400

08007d58 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d70:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007d7c:	697a      	ldr	r2, [r7, #20]
 8007d7e:	4b39      	ldr	r3, [pc, #228]	; (8007e64 <TIM_SlaveTimer_SetConfig+0x10c>)
 8007d80:	4013      	ands	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	2b30      	cmp	r3, #48	; 0x30
 8007d9c:	d05c      	beq.n	8007e58 <TIM_SlaveTimer_SetConfig+0x100>
 8007d9e:	2b30      	cmp	r3, #48	; 0x30
 8007da0:	d806      	bhi.n	8007db0 <TIM_SlaveTimer_SetConfig+0x58>
 8007da2:	2b10      	cmp	r3, #16
 8007da4:	d058      	beq.n	8007e58 <TIM_SlaveTimer_SetConfig+0x100>
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d056      	beq.n	8007e58 <TIM_SlaveTimer_SetConfig+0x100>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d054      	beq.n	8007e58 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8007dae:	e054      	b.n	8007e5a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007db0:	2b50      	cmp	r3, #80	; 0x50
 8007db2:	d03d      	beq.n	8007e30 <TIM_SlaveTimer_SetConfig+0xd8>
 8007db4:	2b50      	cmp	r3, #80	; 0x50
 8007db6:	d802      	bhi.n	8007dbe <TIM_SlaveTimer_SetConfig+0x66>
 8007db8:	2b40      	cmp	r3, #64	; 0x40
 8007dba:	d010      	beq.n	8007dde <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8007dbc:	e04d      	b.n	8007e5a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007dbe:	2b60      	cmp	r3, #96	; 0x60
 8007dc0:	d040      	beq.n	8007e44 <TIM_SlaveTimer_SetConfig+0xec>
 8007dc2:	2b70      	cmp	r3, #112	; 0x70
 8007dc4:	d000      	beq.n	8007dc8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8007dc6:	e048      	b.n	8007e5a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6818      	ldr	r0, [r3, #0]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	68d9      	ldr	r1, [r3, #12]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	689a      	ldr	r2, [r3, #8]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	f000 f9ea 	bl	80081b0 <TIM_ETR_SetConfig>
      break;
 8007ddc:	e03d      	b.n	8007e5a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2b05      	cmp	r3, #5
 8007de4:	d101      	bne.n	8007dea <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8007de6:	2301      	movs	r3, #1
 8007de8:	e038      	b.n	8007e5c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	6a1a      	ldr	r2, [r3, #32]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 0201 	bic.w	r2, r2, #1
 8007e00:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e10:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	693a      	ldr	r2, [r7, #16]
 8007e2c:	621a      	str	r2, [r3, #32]
      break;
 8007e2e:	e014      	b.n	8007e5a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	6899      	ldr	r1, [r3, #8]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f000 f887 	bl	8007f50 <TIM_TI1_ConfigInputStage>
      break;
 8007e42:	e00a      	b.n	8007e5a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6818      	ldr	r0, [r3, #0]
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	6899      	ldr	r1, [r3, #8]
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	461a      	mov	r2, r3
 8007e52:	f000 f8e9 	bl	8008028 <TIM_TI2_ConfigInputStage>
      break;
 8007e56:	e000      	b.n	8007e5a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8007e58:	bf00      	nop
  }
  return HAL_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	fffefff8 	.word	0xfffefff8

08007e68 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
 8007e74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	f023 0201 	bic.w	r2, r3, #1
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	699b      	ldr	r3, [r3, #24]
 8007e86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	6a1b      	ldr	r3, [r3, #32]
 8007e8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	4a28      	ldr	r2, [pc, #160]	; (8007f34 <TIM_TI1_SetConfig+0xcc>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d01b      	beq.n	8007ece <TIM_TI1_SetConfig+0x66>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e9c:	d017      	beq.n	8007ece <TIM_TI1_SetConfig+0x66>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	4a25      	ldr	r2, [pc, #148]	; (8007f38 <TIM_TI1_SetConfig+0xd0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d013      	beq.n	8007ece <TIM_TI1_SetConfig+0x66>
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	4a24      	ldr	r2, [pc, #144]	; (8007f3c <TIM_TI1_SetConfig+0xd4>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d00f      	beq.n	8007ece <TIM_TI1_SetConfig+0x66>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	4a23      	ldr	r2, [pc, #140]	; (8007f40 <TIM_TI1_SetConfig+0xd8>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d00b      	beq.n	8007ece <TIM_TI1_SetConfig+0x66>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4a22      	ldr	r2, [pc, #136]	; (8007f44 <TIM_TI1_SetConfig+0xdc>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d007      	beq.n	8007ece <TIM_TI1_SetConfig+0x66>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4a21      	ldr	r2, [pc, #132]	; (8007f48 <TIM_TI1_SetConfig+0xe0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d003      	beq.n	8007ece <TIM_TI1_SetConfig+0x66>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4a20      	ldr	r2, [pc, #128]	; (8007f4c <TIM_TI1_SetConfig+0xe4>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d101      	bne.n	8007ed2 <TIM_TI1_SetConfig+0x6a>
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e000      	b.n	8007ed4 <TIM_TI1_SetConfig+0x6c>
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d008      	beq.n	8007eea <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	f023 0303 	bic.w	r3, r3, #3
 8007ede:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	e003      	b.n	8007ef2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	f043 0301 	orr.w	r3, r3, #1
 8007ef0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007ef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	4313      	orrs	r3, r2
 8007f04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f023 030a 	bic.w	r3, r3, #10
 8007f0c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f003 030a 	and.w	r3, r3, #10
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	621a      	str	r2, [r3, #32]
}
 8007f26:	bf00      	nop
 8007f28:	371c      	adds	r7, #28
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	40010000 	.word	0x40010000
 8007f38:	40000400 	.word	0x40000400
 8007f3c:	40000800 	.word	0x40000800
 8007f40:	40000c00 	.word	0x40000c00
 8007f44:	40010400 	.word	0x40010400
 8007f48:	40014000 	.word	0x40014000
 8007f4c:	40001800 	.word	0x40001800

08007f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b087      	sub	sp, #28
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a1b      	ldr	r3, [r3, #32]
 8007f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	f023 0201 	bic.w	r2, r3, #1
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	699b      	ldr	r3, [r3, #24]
 8007f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	011b      	lsls	r3, r3, #4
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f023 030a 	bic.w	r3, r3, #10
 8007f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4313      	orrs	r3, r2
 8007f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	621a      	str	r2, [r3, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr

08007fae <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007fae:	b480      	push	{r7}
 8007fb0:	b087      	sub	sp, #28
 8007fb2:	af00      	add	r7, sp, #0
 8007fb4:	60f8      	str	r0, [r7, #12]
 8007fb6:	60b9      	str	r1, [r7, #8]
 8007fb8:	607a      	str	r2, [r7, #4]
 8007fba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6a1b      	ldr	r3, [r3, #32]
 8007fc0:	f023 0210 	bic.w	r2, r3, #16
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	021b      	lsls	r3, r3, #8
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	031b      	lsls	r3, r3, #12
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008000:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	011b      	lsls	r3, r3, #4
 8008006:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	4313      	orrs	r3, r2
 800800e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	621a      	str	r2, [r3, #32]
}
 800801c:	bf00      	nop
 800801e:	371c      	adds	r7, #28
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6a1b      	ldr	r3, [r3, #32]
 8008038:	f023 0210 	bic.w	r2, r3, #16
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008052:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	031b      	lsls	r3, r3, #12
 8008058:	697a      	ldr	r2, [r7, #20]
 800805a:	4313      	orrs	r3, r2
 800805c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008064:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008066:	68bb      	ldr	r3, [r7, #8]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	4313      	orrs	r3, r2
 800806e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	693a      	ldr	r2, [r7, #16]
 800807a:	621a      	str	r2, [r3, #32]
}
 800807c:	bf00      	nop
 800807e:	371c      	adds	r7, #28
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr

08008088 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008088:	b480      	push	{r7}
 800808a:	b087      	sub	sp, #28
 800808c:	af00      	add	r7, sp, #0
 800808e:	60f8      	str	r0, [r7, #12]
 8008090:	60b9      	str	r1, [r7, #8]
 8008092:	607a      	str	r2, [r7, #4]
 8008094:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	69db      	ldr	r3, [r3, #28]
 80080a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	f023 0303 	bic.w	r3, r3, #3
 80080b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80080d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	021b      	lsls	r3, r3, #8
 80080de:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	4313      	orrs	r3, r2
 80080e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	621a      	str	r2, [r3, #32]
}
 80080f4:	bf00      	nop
 80080f6:	371c      	adds	r7, #28
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	69db      	ldr	r3, [r3, #28]
 800811e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800812c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	4313      	orrs	r3, r2
 8008136:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800813e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	031b      	lsls	r3, r3, #12
 8008144:	b29b      	uxth	r3, r3
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4313      	orrs	r3, r2
 800814a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008152:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	031b      	lsls	r3, r3, #12
 8008158:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	4313      	orrs	r3, r2
 8008160:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	621a      	str	r2, [r3, #32]
}
 800816e:	bf00      	nop
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800817a:	b480      	push	{r7}
 800817c:	b085      	sub	sp, #20
 800817e:	af00      	add	r7, sp, #0
 8008180:	6078      	str	r0, [r7, #4]
 8008182:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008190:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	4313      	orrs	r3, r2
 8008198:	f043 0307 	orr.w	r3, r3, #7
 800819c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	68fa      	ldr	r2, [r7, #12]
 80081a2:	609a      	str	r2, [r3, #8]
}
 80081a4:	bf00      	nop
 80081a6:	3714      	adds	r7, #20
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b087      	sub	sp, #28
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	607a      	str	r2, [r7, #4]
 80081bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	021a      	lsls	r2, r3, #8
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	431a      	orrs	r2, r3
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	697a      	ldr	r2, [r7, #20]
 80081da:	4313      	orrs	r3, r2
 80081dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	609a      	str	r2, [r3, #8]
}
 80081e4:	bf00      	nop
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081f0:	b480      	push	{r7}
 80081f2:	b087      	sub	sp, #28
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	60f8      	str	r0, [r7, #12]
 80081f8:	60b9      	str	r1, [r7, #8]
 80081fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f003 031f 	and.w	r3, r3, #31
 8008202:	2201      	movs	r2, #1
 8008204:	fa02 f303 	lsl.w	r3, r2, r3
 8008208:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a1a      	ldr	r2, [r3, #32]
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	43db      	mvns	r3, r3
 8008212:	401a      	ands	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6a1a      	ldr	r2, [r3, #32]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f003 031f 	and.w	r3, r3, #31
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	fa01 f303 	lsl.w	r3, r1, r3
 8008228:	431a      	orrs	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	621a      	str	r2, [r3, #32]
}
 800822e:	bf00      	nop
 8008230:	371c      	adds	r7, #28
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
	...

0800823c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008250:	2302      	movs	r3, #2
 8008252:	e06d      	b.n	8008330 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2202      	movs	r2, #2
 8008260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a30      	ldr	r2, [pc, #192]	; (800833c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d004      	beq.n	8008288 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a2f      	ldr	r2, [pc, #188]	; (8008340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d108      	bne.n	800829a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800828e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a20      	ldr	r2, [pc, #128]	; (800833c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d022      	beq.n	8008304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082c6:	d01d      	beq.n	8008304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a1d      	ldr	r2, [pc, #116]	; (8008344 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d018      	beq.n	8008304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a1c      	ldr	r2, [pc, #112]	; (8008348 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d013      	beq.n	8008304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a1a      	ldr	r2, [pc, #104]	; (800834c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00e      	beq.n	8008304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a15      	ldr	r2, [pc, #84]	; (8008340 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d009      	beq.n	8008304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a16      	ldr	r2, [pc, #88]	; (8008350 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a15      	ldr	r2, [pc, #84]	; (8008354 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d10c      	bne.n	800831e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800830a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	68ba      	ldr	r2, [r7, #8]
 8008312:	4313      	orrs	r3, r2
 8008314:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	40010000 	.word	0x40010000
 8008340:	40010400 	.word	0x40010400
 8008344:	40000400 	.word	0x40000400
 8008348:	40000800 	.word	0x40000800
 800834c:	40000c00 	.word	0x40000c00
 8008350:	40014000 	.word	0x40014000
 8008354:	40001800 	.word	0x40001800

08008358 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800836c:	2b01      	cmp	r3, #1
 800836e:	d101      	bne.n	8008374 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008370:	2302      	movs	r3, #2
 8008372:	e065      	b.n	8008440 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	4313      	orrs	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	691b      	ldr	r3, [r3, #16]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083da:	4313      	orrs	r3, r2
 80083dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	041b      	lsls	r3, r3, #16
 80083ea:	4313      	orrs	r3, r2
 80083ec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a16      	ldr	r2, [pc, #88]	; (800844c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d004      	beq.n	8008402 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a14      	ldr	r2, [pc, #80]	; (8008450 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d115      	bne.n	800842e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840c:	051b      	lsls	r3, r3, #20
 800840e:	4313      	orrs	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	69db      	ldr	r3, [r3, #28]
 800841c:	4313      	orrs	r3, r2
 800841e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	4313      	orrs	r3, r2
 800842c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800843e:	2300      	movs	r3, #0
}
 8008440:	4618      	mov	r0, r3
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	40010000 	.word	0x40010000
 8008450:	40010400 	.word	0x40010400

08008454 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008470:	bf00      	nop
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008484:	bf00      	nop
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d101      	bne.n	80084a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e040      	b.n	8008524 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d106      	bne.n	80084b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	f7fa fc28 	bl	8002d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2224      	movs	r2, #36	; 0x24
 80084bc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 0201 	bic.w	r2, r2, #1
 80084cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fac4 	bl	8008a5c <UART_SetConfig>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d101      	bne.n	80084de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e022      	b.n	8008524 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d002      	beq.n	80084ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fd62 	bl	8008fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	689a      	ldr	r2, [r3, #8]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800850a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f042 0201 	orr.w	r2, r2, #1
 800851a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 fde9 	bl	80090f4 <UART_CheckIdleState>
 8008522:	4603      	mov	r3, r0
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b08a      	sub	sp, #40	; 0x28
 8008530:	af02      	add	r7, sp, #8
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	603b      	str	r3, [r7, #0]
 8008538:	4613      	mov	r3, r2
 800853a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008540:	2b20      	cmp	r3, #32
 8008542:	d17f      	bne.n	8008644 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d002      	beq.n	8008550 <HAL_UART_Transmit+0x24>
 800854a:	88fb      	ldrh	r3, [r7, #6]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e078      	b.n	8008646 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800855a:	2b01      	cmp	r3, #1
 800855c:	d101      	bne.n	8008562 <HAL_UART_Transmit+0x36>
 800855e:	2302      	movs	r3, #2
 8008560:	e071      	b.n	8008646 <HAL_UART_Transmit+0x11a>
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2221      	movs	r2, #33	; 0x21
 8008574:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008576:	f7fa fe33 	bl	80031e0 <HAL_GetTick>
 800857a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	88fa      	ldrh	r2, [r7, #6]
 8008580:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	88fa      	ldrh	r2, [r7, #6]
 8008588:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008594:	d108      	bne.n	80085a8 <HAL_UART_Transmit+0x7c>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d104      	bne.n	80085a8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800859e:	2300      	movs	r3, #0
 80085a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	61bb      	str	r3, [r7, #24]
 80085a6:	e003      	b.n	80085b0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085ac:	2300      	movs	r3, #0
 80085ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80085b8:	e02c      	b.n	8008614 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	9300      	str	r3, [sp, #0]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	2200      	movs	r2, #0
 80085c2:	2180      	movs	r1, #128	; 0x80
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 fdda 	bl	800917e <UART_WaitOnFlagUntilTimeout>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80085d0:	2303      	movs	r3, #3
 80085d2:	e038      	b.n	8008646 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d10b      	bne.n	80085f2 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085da:	69bb      	ldr	r3, [r7, #24]
 80085dc:	881b      	ldrh	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80085ea:	69bb      	ldr	r3, [r7, #24]
 80085ec:	3302      	adds	r3, #2
 80085ee:	61bb      	str	r3, [r7, #24]
 80085f0:	e007      	b.n	8008602 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	781a      	ldrb	r2, [r3, #0]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	3301      	adds	r3, #1
 8008600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008608:	b29b      	uxth	r3, r3
 800860a:	3b01      	subs	r3, #1
 800860c:	b29a      	uxth	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800861a:	b29b      	uxth	r3, r3
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1cc      	bne.n	80085ba <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	9300      	str	r3, [sp, #0]
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2200      	movs	r2, #0
 8008628:	2140      	movs	r1, #64	; 0x40
 800862a:	68f8      	ldr	r0, [r7, #12]
 800862c:	f000 fda7 	bl	800917e <UART_WaitOnFlagUntilTimeout>
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d001      	beq.n	800863a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e005      	b.n	8008646 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2220      	movs	r2, #32
 800863e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008640:	2300      	movs	r3, #0
 8008642:	e000      	b.n	8008646 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008644:	2302      	movs	r3, #2
  }
}
 8008646:	4618      	mov	r0, r3
 8008648:	3720      	adds	r7, #32
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}
	...

08008650 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	4613      	mov	r3, r2
 800865c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008662:	2b20      	cmp	r3, #32
 8008664:	f040 808a 	bne.w	800877c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d002      	beq.n	8008674 <HAL_UART_Receive_IT+0x24>
 800866e:	88fb      	ldrh	r3, [r7, #6]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	e082      	b.n	800877e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800867e:	2b01      	cmp	r3, #1
 8008680:	d101      	bne.n	8008686 <HAL_UART_Receive_IT+0x36>
 8008682:	2302      	movs	r3, #2
 8008684:	e07b      	b.n	800877e <HAL_UART_Receive_IT+0x12e>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2201      	movs	r2, #1
 800868a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	88fa      	ldrh	r2, [r7, #6]
 8008698:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	88fa      	ldrh	r2, [r7, #6]
 80086a0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b2:	d10e      	bne.n	80086d2 <HAL_UART_Receive_IT+0x82>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	691b      	ldr	r3, [r3, #16]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d105      	bne.n	80086c8 <HAL_UART_Receive_IT+0x78>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f240 12ff 	movw	r2, #511	; 0x1ff
 80086c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086c6:	e02d      	b.n	8008724 <HAL_UART_Receive_IT+0xd4>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	22ff      	movs	r2, #255	; 0xff
 80086cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086d0:	e028      	b.n	8008724 <HAL_UART_Receive_IT+0xd4>
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10d      	bne.n	80086f6 <HAL_UART_Receive_IT+0xa6>
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d104      	bne.n	80086ec <HAL_UART_Receive_IT+0x9c>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	22ff      	movs	r2, #255	; 0xff
 80086e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086ea:	e01b      	b.n	8008724 <HAL_UART_Receive_IT+0xd4>
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	227f      	movs	r2, #127	; 0x7f
 80086f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086f4:	e016      	b.n	8008724 <HAL_UART_Receive_IT+0xd4>
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	689b      	ldr	r3, [r3, #8]
 80086fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086fe:	d10d      	bne.n	800871c <HAL_UART_Receive_IT+0xcc>
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d104      	bne.n	8008712 <HAL_UART_Receive_IT+0xc2>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	227f      	movs	r2, #127	; 0x7f
 800870c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008710:	e008      	b.n	8008724 <HAL_UART_Receive_IT+0xd4>
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	223f      	movs	r2, #63	; 0x3f
 8008716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800871a:	e003      	b.n	8008724 <HAL_UART_Receive_IT+0xd4>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2200      	movs	r2, #0
 8008720:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2222      	movs	r2, #34	; 0x22
 800872e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	689a      	ldr	r2, [r3, #8]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f042 0201 	orr.w	r2, r2, #1
 800873e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008748:	d107      	bne.n	800875a <HAL_UART_Receive_IT+0x10a>
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d103      	bne.n	800875a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4a0d      	ldr	r2, [pc, #52]	; (800878c <HAL_UART_Receive_IT+0x13c>)
 8008756:	661a      	str	r2, [r3, #96]	; 0x60
 8008758:	e002      	b.n	8008760 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4a0c      	ldr	r2, [pc, #48]	; (8008790 <HAL_UART_Receive_IT+0x140>)
 800875e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008776:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008778:	2300      	movs	r3, #0
 800877a:	e000      	b.n	800877e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800877c:	2302      	movs	r3, #2
  }
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr
 800878a:	bf00      	nop
 800878c:	080093b9 	.word	0x080093b9
 8008790:	08009313 	.word	0x08009313

08008794 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b088      	sub	sp, #32
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	69db      	ldr	r3, [r3, #28]
 80087a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80087ba:	4013      	ands	r3, r2
 80087bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d113      	bne.n	80087ec <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	f003 0320 	and.w	r3, r3, #32
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00e      	beq.n	80087ec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	f003 0320 	and.w	r3, r3, #32
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d009      	beq.n	80087ec <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8114 	beq.w	8008a0a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	4798      	blx	r3
      }
      return;
 80087ea:	e10e      	b.n	8008a0a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 80d6 	beq.w	80089a0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d105      	bne.n	800880a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008804:	2b00      	cmp	r3, #0
 8008806:	f000 80cb 	beq.w	80089a0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00e      	beq.n	8008832 <HAL_UART_IRQHandler+0x9e>
 8008814:	69bb      	ldr	r3, [r7, #24]
 8008816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881a:	2b00      	cmp	r3, #0
 800881c:	d009      	beq.n	8008832 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2201      	movs	r2, #1
 8008824:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800882a:	f043 0201 	orr.w	r2, r3, #1
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008832:	69fb      	ldr	r3, [r7, #28]
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00e      	beq.n	800885a <HAL_UART_IRQHandler+0xc6>
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	f003 0301 	and.w	r3, r3, #1
 8008842:	2b00      	cmp	r3, #0
 8008844:	d009      	beq.n	800885a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2202      	movs	r2, #2
 800884c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008852:	f043 0204 	orr.w	r2, r3, #4
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	f003 0304 	and.w	r3, r3, #4
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00e      	beq.n	8008882 <HAL_UART_IRQHandler+0xee>
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d009      	beq.n	8008882 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2204      	movs	r2, #4
 8008874:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800887a:	f043 0202 	orr.w	r2, r3, #2
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	f003 0308 	and.w	r3, r3, #8
 8008888:	2b00      	cmp	r3, #0
 800888a:	d013      	beq.n	80088b4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b00      	cmp	r3, #0
 8008894:	d104      	bne.n	80088a0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800889c:	2b00      	cmp	r3, #0
 800889e:	d009      	beq.n	80088b4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2208      	movs	r2, #8
 80088a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ac:	f043 0208 	orr.w	r2, r3, #8
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d00f      	beq.n	80088de <HAL_UART_IRQHandler+0x14a>
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00a      	beq.n	80088de <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088d6:	f043 0220 	orr.w	r2, r3, #32
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 8093 	beq.w	8008a0e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00c      	beq.n	800890c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	f003 0320 	and.w	r3, r3, #32
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008900:	2b00      	cmp	r3, #0
 8008902:	d003      	beq.n	800890c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008910:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800891c:	2b40      	cmp	r3, #64	; 0x40
 800891e:	d004      	beq.n	800892a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008926:	2b00      	cmp	r3, #0
 8008928:	d031      	beq.n	800898e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fca2 	bl	8009274 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893a:	2b40      	cmp	r3, #64	; 0x40
 800893c:	d123      	bne.n	8008986 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	689a      	ldr	r2, [r3, #8]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800894c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d013      	beq.n	800897e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800895a:	4a30      	ldr	r2, [pc, #192]	; (8008a1c <HAL_UART_IRQHandler+0x288>)
 800895c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008962:	4618      	mov	r0, r3
 8008964:	f7fb fa96 	bl	8003e94 <HAL_DMA_Abort_IT>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d016      	beq.n	800899c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008974:	687a      	ldr	r2, [r7, #4]
 8008976:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800897c:	e00e      	b.n	800899c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f858 	bl	8008a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008984:	e00a      	b.n	800899c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f854 	bl	8008a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800898c:	e006      	b.n	800899c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f850 	bl	8008a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800899a:	e038      	b.n	8008a0e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800899c:	bf00      	nop
    return;
 800899e:	e036      	b.n	8008a0e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00d      	beq.n	80089c6 <HAL_UART_IRQHandler+0x232>
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d008      	beq.n	80089c6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80089bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f842 	bl	8008a48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089c4:	e026      	b.n	8008a14 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00d      	beq.n	80089ec <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80089d0:	69bb      	ldr	r3, [r7, #24]
 80089d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d008      	beq.n	80089ec <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d017      	beq.n	8008a12 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	4798      	blx	r3
    }
    return;
 80089ea:	e012      	b.n	8008a12 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00e      	beq.n	8008a14 <HAL_UART_IRQHandler+0x280>
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d009      	beq.n	8008a14 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fc6d 	bl	80092e0 <UART_EndTransmit_IT>
    return;
 8008a06:	bf00      	nop
 8008a08:	e004      	b.n	8008a14 <HAL_UART_IRQHandler+0x280>
      return;
 8008a0a:	bf00      	nop
 8008a0c:	e002      	b.n	8008a14 <HAL_UART_IRQHandler+0x280>
    return;
 8008a0e:	bf00      	nop
 8008a10:	e000      	b.n	8008a14 <HAL_UART_IRQHandler+0x280>
    return;
 8008a12:	bf00      	nop
  }

}
 8008a14:	3720      	adds	r7, #32
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	080092b5 	.word	0x080092b5

08008a20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b083      	sub	sp, #12
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008a28:	bf00      	nop
 8008a2a:	370c      	adds	r7, #12
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a32:	4770      	bx	lr

08008a34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b083      	sub	sp, #12
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b088      	sub	sp, #32
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	689a      	ldr	r2, [r3, #8]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	691b      	ldr	r3, [r3, #16]
 8008a74:	431a      	orrs	r2, r3
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	695b      	ldr	r3, [r3, #20]
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	4bb1      	ldr	r3, [pc, #708]	; (8008d50 <UART_SetConfig+0x2f4>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6812      	ldr	r2, [r2, #0]
 8008a92:	6939      	ldr	r1, [r7, #16]
 8008a94:	430b      	orrs	r3, r1
 8008a96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	685b      	ldr	r3, [r3, #4]
 8008a9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68da      	ldr	r2, [r3, #12]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	693a      	ldr	r2, [r7, #16]
 8008aba:	4313      	orrs	r3, r2
 8008abc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	689b      	ldr	r3, [r3, #8]
 8008ac4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	693a      	ldr	r2, [r7, #16]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a9f      	ldr	r2, [pc, #636]	; (8008d54 <UART_SetConfig+0x2f8>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d121      	bne.n	8008b20 <UART_SetConfig+0xc4>
 8008adc:	4b9e      	ldr	r3, [pc, #632]	; (8008d58 <UART_SetConfig+0x2fc>)
 8008ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae2:	f003 0303 	and.w	r3, r3, #3
 8008ae6:	2b03      	cmp	r3, #3
 8008ae8:	d816      	bhi.n	8008b18 <UART_SetConfig+0xbc>
 8008aea:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <UART_SetConfig+0x94>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b01 	.word	0x08008b01
 8008af4:	08008b0d 	.word	0x08008b0d
 8008af8:	08008b07 	.word	0x08008b07
 8008afc:	08008b13 	.word	0x08008b13
 8008b00:	2301      	movs	r3, #1
 8008b02:	77fb      	strb	r3, [r7, #31]
 8008b04:	e151      	b.n	8008daa <UART_SetConfig+0x34e>
 8008b06:	2302      	movs	r3, #2
 8008b08:	77fb      	strb	r3, [r7, #31]
 8008b0a:	e14e      	b.n	8008daa <UART_SetConfig+0x34e>
 8008b0c:	2304      	movs	r3, #4
 8008b0e:	77fb      	strb	r3, [r7, #31]
 8008b10:	e14b      	b.n	8008daa <UART_SetConfig+0x34e>
 8008b12:	2308      	movs	r3, #8
 8008b14:	77fb      	strb	r3, [r7, #31]
 8008b16:	e148      	b.n	8008daa <UART_SetConfig+0x34e>
 8008b18:	2310      	movs	r3, #16
 8008b1a:	77fb      	strb	r3, [r7, #31]
 8008b1c:	bf00      	nop
 8008b1e:	e144      	b.n	8008daa <UART_SetConfig+0x34e>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a8d      	ldr	r2, [pc, #564]	; (8008d5c <UART_SetConfig+0x300>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d134      	bne.n	8008b94 <UART_SetConfig+0x138>
 8008b2a:	4b8b      	ldr	r3, [pc, #556]	; (8008d58 <UART_SetConfig+0x2fc>)
 8008b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b30:	f003 030c 	and.w	r3, r3, #12
 8008b34:	2b0c      	cmp	r3, #12
 8008b36:	d829      	bhi.n	8008b8c <UART_SetConfig+0x130>
 8008b38:	a201      	add	r2, pc, #4	; (adr r2, 8008b40 <UART_SetConfig+0xe4>)
 8008b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b3e:	bf00      	nop
 8008b40:	08008b75 	.word	0x08008b75
 8008b44:	08008b8d 	.word	0x08008b8d
 8008b48:	08008b8d 	.word	0x08008b8d
 8008b4c:	08008b8d 	.word	0x08008b8d
 8008b50:	08008b81 	.word	0x08008b81
 8008b54:	08008b8d 	.word	0x08008b8d
 8008b58:	08008b8d 	.word	0x08008b8d
 8008b5c:	08008b8d 	.word	0x08008b8d
 8008b60:	08008b7b 	.word	0x08008b7b
 8008b64:	08008b8d 	.word	0x08008b8d
 8008b68:	08008b8d 	.word	0x08008b8d
 8008b6c:	08008b8d 	.word	0x08008b8d
 8008b70:	08008b87 	.word	0x08008b87
 8008b74:	2300      	movs	r3, #0
 8008b76:	77fb      	strb	r3, [r7, #31]
 8008b78:	e117      	b.n	8008daa <UART_SetConfig+0x34e>
 8008b7a:	2302      	movs	r3, #2
 8008b7c:	77fb      	strb	r3, [r7, #31]
 8008b7e:	e114      	b.n	8008daa <UART_SetConfig+0x34e>
 8008b80:	2304      	movs	r3, #4
 8008b82:	77fb      	strb	r3, [r7, #31]
 8008b84:	e111      	b.n	8008daa <UART_SetConfig+0x34e>
 8008b86:	2308      	movs	r3, #8
 8008b88:	77fb      	strb	r3, [r7, #31]
 8008b8a:	e10e      	b.n	8008daa <UART_SetConfig+0x34e>
 8008b8c:	2310      	movs	r3, #16
 8008b8e:	77fb      	strb	r3, [r7, #31]
 8008b90:	bf00      	nop
 8008b92:	e10a      	b.n	8008daa <UART_SetConfig+0x34e>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	4a71      	ldr	r2, [pc, #452]	; (8008d60 <UART_SetConfig+0x304>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d120      	bne.n	8008be0 <UART_SetConfig+0x184>
 8008b9e:	4b6e      	ldr	r3, [pc, #440]	; (8008d58 <UART_SetConfig+0x2fc>)
 8008ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ba4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008ba8:	2b10      	cmp	r3, #16
 8008baa:	d00f      	beq.n	8008bcc <UART_SetConfig+0x170>
 8008bac:	2b10      	cmp	r3, #16
 8008bae:	d802      	bhi.n	8008bb6 <UART_SetConfig+0x15a>
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d005      	beq.n	8008bc0 <UART_SetConfig+0x164>
 8008bb4:	e010      	b.n	8008bd8 <UART_SetConfig+0x17c>
 8008bb6:	2b20      	cmp	r3, #32
 8008bb8:	d005      	beq.n	8008bc6 <UART_SetConfig+0x16a>
 8008bba:	2b30      	cmp	r3, #48	; 0x30
 8008bbc:	d009      	beq.n	8008bd2 <UART_SetConfig+0x176>
 8008bbe:	e00b      	b.n	8008bd8 <UART_SetConfig+0x17c>
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	77fb      	strb	r3, [r7, #31]
 8008bc4:	e0f1      	b.n	8008daa <UART_SetConfig+0x34e>
 8008bc6:	2302      	movs	r3, #2
 8008bc8:	77fb      	strb	r3, [r7, #31]
 8008bca:	e0ee      	b.n	8008daa <UART_SetConfig+0x34e>
 8008bcc:	2304      	movs	r3, #4
 8008bce:	77fb      	strb	r3, [r7, #31]
 8008bd0:	e0eb      	b.n	8008daa <UART_SetConfig+0x34e>
 8008bd2:	2308      	movs	r3, #8
 8008bd4:	77fb      	strb	r3, [r7, #31]
 8008bd6:	e0e8      	b.n	8008daa <UART_SetConfig+0x34e>
 8008bd8:	2310      	movs	r3, #16
 8008bda:	77fb      	strb	r3, [r7, #31]
 8008bdc:	bf00      	nop
 8008bde:	e0e4      	b.n	8008daa <UART_SetConfig+0x34e>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a5f      	ldr	r2, [pc, #380]	; (8008d64 <UART_SetConfig+0x308>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d120      	bne.n	8008c2c <UART_SetConfig+0x1d0>
 8008bea:	4b5b      	ldr	r3, [pc, #364]	; (8008d58 <UART_SetConfig+0x2fc>)
 8008bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bf0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008bf4:	2b40      	cmp	r3, #64	; 0x40
 8008bf6:	d00f      	beq.n	8008c18 <UART_SetConfig+0x1bc>
 8008bf8:	2b40      	cmp	r3, #64	; 0x40
 8008bfa:	d802      	bhi.n	8008c02 <UART_SetConfig+0x1a6>
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d005      	beq.n	8008c0c <UART_SetConfig+0x1b0>
 8008c00:	e010      	b.n	8008c24 <UART_SetConfig+0x1c8>
 8008c02:	2b80      	cmp	r3, #128	; 0x80
 8008c04:	d005      	beq.n	8008c12 <UART_SetConfig+0x1b6>
 8008c06:	2bc0      	cmp	r3, #192	; 0xc0
 8008c08:	d009      	beq.n	8008c1e <UART_SetConfig+0x1c2>
 8008c0a:	e00b      	b.n	8008c24 <UART_SetConfig+0x1c8>
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	77fb      	strb	r3, [r7, #31]
 8008c10:	e0cb      	b.n	8008daa <UART_SetConfig+0x34e>
 8008c12:	2302      	movs	r3, #2
 8008c14:	77fb      	strb	r3, [r7, #31]
 8008c16:	e0c8      	b.n	8008daa <UART_SetConfig+0x34e>
 8008c18:	2304      	movs	r3, #4
 8008c1a:	77fb      	strb	r3, [r7, #31]
 8008c1c:	e0c5      	b.n	8008daa <UART_SetConfig+0x34e>
 8008c1e:	2308      	movs	r3, #8
 8008c20:	77fb      	strb	r3, [r7, #31]
 8008c22:	e0c2      	b.n	8008daa <UART_SetConfig+0x34e>
 8008c24:	2310      	movs	r3, #16
 8008c26:	77fb      	strb	r3, [r7, #31]
 8008c28:	bf00      	nop
 8008c2a:	e0be      	b.n	8008daa <UART_SetConfig+0x34e>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a4d      	ldr	r2, [pc, #308]	; (8008d68 <UART_SetConfig+0x30c>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d124      	bne.n	8008c80 <UART_SetConfig+0x224>
 8008c36:	4b48      	ldr	r3, [pc, #288]	; (8008d58 <UART_SetConfig+0x2fc>)
 8008c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c44:	d012      	beq.n	8008c6c <UART_SetConfig+0x210>
 8008c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4a:	d802      	bhi.n	8008c52 <UART_SetConfig+0x1f6>
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d007      	beq.n	8008c60 <UART_SetConfig+0x204>
 8008c50:	e012      	b.n	8008c78 <UART_SetConfig+0x21c>
 8008c52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c56:	d006      	beq.n	8008c66 <UART_SetConfig+0x20a>
 8008c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c5c:	d009      	beq.n	8008c72 <UART_SetConfig+0x216>
 8008c5e:	e00b      	b.n	8008c78 <UART_SetConfig+0x21c>
 8008c60:	2300      	movs	r3, #0
 8008c62:	77fb      	strb	r3, [r7, #31]
 8008c64:	e0a1      	b.n	8008daa <UART_SetConfig+0x34e>
 8008c66:	2302      	movs	r3, #2
 8008c68:	77fb      	strb	r3, [r7, #31]
 8008c6a:	e09e      	b.n	8008daa <UART_SetConfig+0x34e>
 8008c6c:	2304      	movs	r3, #4
 8008c6e:	77fb      	strb	r3, [r7, #31]
 8008c70:	e09b      	b.n	8008daa <UART_SetConfig+0x34e>
 8008c72:	2308      	movs	r3, #8
 8008c74:	77fb      	strb	r3, [r7, #31]
 8008c76:	e098      	b.n	8008daa <UART_SetConfig+0x34e>
 8008c78:	2310      	movs	r3, #16
 8008c7a:	77fb      	strb	r3, [r7, #31]
 8008c7c:	bf00      	nop
 8008c7e:	e094      	b.n	8008daa <UART_SetConfig+0x34e>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a39      	ldr	r2, [pc, #228]	; (8008d6c <UART_SetConfig+0x310>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d124      	bne.n	8008cd4 <UART_SetConfig+0x278>
 8008c8a:	4b33      	ldr	r3, [pc, #204]	; (8008d58 <UART_SetConfig+0x2fc>)
 8008c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c98:	d012      	beq.n	8008cc0 <UART_SetConfig+0x264>
 8008c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c9e:	d802      	bhi.n	8008ca6 <UART_SetConfig+0x24a>
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d007      	beq.n	8008cb4 <UART_SetConfig+0x258>
 8008ca4:	e012      	b.n	8008ccc <UART_SetConfig+0x270>
 8008ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008caa:	d006      	beq.n	8008cba <UART_SetConfig+0x25e>
 8008cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008cb0:	d009      	beq.n	8008cc6 <UART_SetConfig+0x26a>
 8008cb2:	e00b      	b.n	8008ccc <UART_SetConfig+0x270>
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	77fb      	strb	r3, [r7, #31]
 8008cb8:	e077      	b.n	8008daa <UART_SetConfig+0x34e>
 8008cba:	2302      	movs	r3, #2
 8008cbc:	77fb      	strb	r3, [r7, #31]
 8008cbe:	e074      	b.n	8008daa <UART_SetConfig+0x34e>
 8008cc0:	2304      	movs	r3, #4
 8008cc2:	77fb      	strb	r3, [r7, #31]
 8008cc4:	e071      	b.n	8008daa <UART_SetConfig+0x34e>
 8008cc6:	2308      	movs	r3, #8
 8008cc8:	77fb      	strb	r3, [r7, #31]
 8008cca:	e06e      	b.n	8008daa <UART_SetConfig+0x34e>
 8008ccc:	2310      	movs	r3, #16
 8008cce:	77fb      	strb	r3, [r7, #31]
 8008cd0:	bf00      	nop
 8008cd2:	e06a      	b.n	8008daa <UART_SetConfig+0x34e>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a25      	ldr	r2, [pc, #148]	; (8008d70 <UART_SetConfig+0x314>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d124      	bne.n	8008d28 <UART_SetConfig+0x2cc>
 8008cde:	4b1e      	ldr	r3, [pc, #120]	; (8008d58 <UART_SetConfig+0x2fc>)
 8008ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ce4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cec:	d012      	beq.n	8008d14 <UART_SetConfig+0x2b8>
 8008cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cf2:	d802      	bhi.n	8008cfa <UART_SetConfig+0x29e>
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d007      	beq.n	8008d08 <UART_SetConfig+0x2ac>
 8008cf8:	e012      	b.n	8008d20 <UART_SetConfig+0x2c4>
 8008cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008cfe:	d006      	beq.n	8008d0e <UART_SetConfig+0x2b2>
 8008d00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008d04:	d009      	beq.n	8008d1a <UART_SetConfig+0x2be>
 8008d06:	e00b      	b.n	8008d20 <UART_SetConfig+0x2c4>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	77fb      	strb	r3, [r7, #31]
 8008d0c:	e04d      	b.n	8008daa <UART_SetConfig+0x34e>
 8008d0e:	2302      	movs	r3, #2
 8008d10:	77fb      	strb	r3, [r7, #31]
 8008d12:	e04a      	b.n	8008daa <UART_SetConfig+0x34e>
 8008d14:	2304      	movs	r3, #4
 8008d16:	77fb      	strb	r3, [r7, #31]
 8008d18:	e047      	b.n	8008daa <UART_SetConfig+0x34e>
 8008d1a:	2308      	movs	r3, #8
 8008d1c:	77fb      	strb	r3, [r7, #31]
 8008d1e:	e044      	b.n	8008daa <UART_SetConfig+0x34e>
 8008d20:	2310      	movs	r3, #16
 8008d22:	77fb      	strb	r3, [r7, #31]
 8008d24:	bf00      	nop
 8008d26:	e040      	b.n	8008daa <UART_SetConfig+0x34e>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4a11      	ldr	r2, [pc, #68]	; (8008d74 <UART_SetConfig+0x318>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d139      	bne.n	8008da6 <UART_SetConfig+0x34a>
 8008d32:	4b09      	ldr	r3, [pc, #36]	; (8008d58 <UART_SetConfig+0x2fc>)
 8008d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d40:	d027      	beq.n	8008d92 <UART_SetConfig+0x336>
 8008d42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d46:	d817      	bhi.n	8008d78 <UART_SetConfig+0x31c>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01c      	beq.n	8008d86 <UART_SetConfig+0x32a>
 8008d4c:	e027      	b.n	8008d9e <UART_SetConfig+0x342>
 8008d4e:	bf00      	nop
 8008d50:	efff69f3 	.word	0xefff69f3
 8008d54:	40011000 	.word	0x40011000
 8008d58:	40023800 	.word	0x40023800
 8008d5c:	40004400 	.word	0x40004400
 8008d60:	40004800 	.word	0x40004800
 8008d64:	40004c00 	.word	0x40004c00
 8008d68:	40005000 	.word	0x40005000
 8008d6c:	40011400 	.word	0x40011400
 8008d70:	40007800 	.word	0x40007800
 8008d74:	40007c00 	.word	0x40007c00
 8008d78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d7c:	d006      	beq.n	8008d8c <UART_SetConfig+0x330>
 8008d7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d82:	d009      	beq.n	8008d98 <UART_SetConfig+0x33c>
 8008d84:	e00b      	b.n	8008d9e <UART_SetConfig+0x342>
 8008d86:	2300      	movs	r3, #0
 8008d88:	77fb      	strb	r3, [r7, #31]
 8008d8a:	e00e      	b.n	8008daa <UART_SetConfig+0x34e>
 8008d8c:	2302      	movs	r3, #2
 8008d8e:	77fb      	strb	r3, [r7, #31]
 8008d90:	e00b      	b.n	8008daa <UART_SetConfig+0x34e>
 8008d92:	2304      	movs	r3, #4
 8008d94:	77fb      	strb	r3, [r7, #31]
 8008d96:	e008      	b.n	8008daa <UART_SetConfig+0x34e>
 8008d98:	2308      	movs	r3, #8
 8008d9a:	77fb      	strb	r3, [r7, #31]
 8008d9c:	e005      	b.n	8008daa <UART_SetConfig+0x34e>
 8008d9e:	2310      	movs	r3, #16
 8008da0:	77fb      	strb	r3, [r7, #31]
 8008da2:	bf00      	nop
 8008da4:	e001      	b.n	8008daa <UART_SetConfig+0x34e>
 8008da6:	2310      	movs	r3, #16
 8008da8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	69db      	ldr	r3, [r3, #28]
 8008dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db2:	d17f      	bne.n	8008eb4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008db4:	7ffb      	ldrb	r3, [r7, #31]
 8008db6:	2b08      	cmp	r3, #8
 8008db8:	d85c      	bhi.n	8008e74 <UART_SetConfig+0x418>
 8008dba:	a201      	add	r2, pc, #4	; (adr r2, 8008dc0 <UART_SetConfig+0x364>)
 8008dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc0:	08008de5 	.word	0x08008de5
 8008dc4:	08008e05 	.word	0x08008e05
 8008dc8:	08008e25 	.word	0x08008e25
 8008dcc:	08008e75 	.word	0x08008e75
 8008dd0:	08008e3d 	.word	0x08008e3d
 8008dd4:	08008e75 	.word	0x08008e75
 8008dd8:	08008e75 	.word	0x08008e75
 8008ddc:	08008e75 	.word	0x08008e75
 8008de0:	08008e5d 	.word	0x08008e5d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008de4:	f7fc fa84 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 8008de8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	005a      	lsls	r2, r3, #1
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	441a      	add	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	61bb      	str	r3, [r7, #24]
        break;
 8008e02:	e03a      	b.n	8008e7a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e04:	f7fc fa88 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 8008e08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	005a      	lsls	r2, r3, #1
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	085b      	lsrs	r3, r3, #1
 8008e14:	441a      	add	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	61bb      	str	r3, [r7, #24]
        break;
 8008e22:	e02a      	b.n	8008e7a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	085a      	lsrs	r2, r3, #1
 8008e2a:	4b5f      	ldr	r3, [pc, #380]	; (8008fa8 <UART_SetConfig+0x54c>)
 8008e2c:	4413      	add	r3, r2
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	6852      	ldr	r2, [r2, #4]
 8008e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	61bb      	str	r3, [r7, #24]
        break;
 8008e3a:	e01e      	b.n	8008e7a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e3c:	f7fc f99a 	bl	8005174 <HAL_RCC_GetSysClockFreq>
 8008e40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	005a      	lsls	r2, r3, #1
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	085b      	lsrs	r3, r3, #1
 8008e4c:	441a      	add	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	61bb      	str	r3, [r7, #24]
        break;
 8008e5a:	e00e      	b.n	8008e7a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	085b      	lsrs	r3, r3, #1
 8008e62:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	61bb      	str	r3, [r7, #24]
        break;
 8008e72:	e002      	b.n	8008e7a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008e74:	2301      	movs	r3, #1
 8008e76:	75fb      	strb	r3, [r7, #23]
        break;
 8008e78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	2b0f      	cmp	r3, #15
 8008e7e:	d916      	bls.n	8008eae <UART_SetConfig+0x452>
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e86:	d212      	bcs.n	8008eae <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	f023 030f 	bic.w	r3, r3, #15
 8008e90:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e92:	69bb      	ldr	r3, [r7, #24]
 8008e94:	085b      	lsrs	r3, r3, #1
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	f003 0307 	and.w	r3, r3, #7
 8008e9c:	b29a      	uxth	r2, r3
 8008e9e:	897b      	ldrh	r3, [r7, #10]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	897a      	ldrh	r2, [r7, #10]
 8008eaa:	60da      	str	r2, [r3, #12]
 8008eac:	e070      	b.n	8008f90 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	75fb      	strb	r3, [r7, #23]
 8008eb2:	e06d      	b.n	8008f90 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008eb4:	7ffb      	ldrb	r3, [r7, #31]
 8008eb6:	2b08      	cmp	r3, #8
 8008eb8:	d859      	bhi.n	8008f6e <UART_SetConfig+0x512>
 8008eba:	a201      	add	r2, pc, #4	; (adr r2, 8008ec0 <UART_SetConfig+0x464>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008ee5 	.word	0x08008ee5
 8008ec4:	08008f03 	.word	0x08008f03
 8008ec8:	08008f21 	.word	0x08008f21
 8008ecc:	08008f6f 	.word	0x08008f6f
 8008ed0:	08008f39 	.word	0x08008f39
 8008ed4:	08008f6f 	.word	0x08008f6f
 8008ed8:	08008f6f 	.word	0x08008f6f
 8008edc:	08008f6f 	.word	0x08008f6f
 8008ee0:	08008f57 	.word	0x08008f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ee4:	f7fc fa04 	bl	80052f0 <HAL_RCC_GetPCLK1Freq>
 8008ee8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	085a      	lsrs	r2, r3, #1
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	441a      	add	r2, r3
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	61bb      	str	r3, [r7, #24]
        break;
 8008f00:	e038      	b.n	8008f74 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f02:	f7fc fa09 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 8008f06:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	085a      	lsrs	r2, r3, #1
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	441a      	add	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	61bb      	str	r3, [r7, #24]
        break;
 8008f1e:	e029      	b.n	8008f74 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	085a      	lsrs	r2, r3, #1
 8008f26:	4b21      	ldr	r3, [pc, #132]	; (8008fac <UART_SetConfig+0x550>)
 8008f28:	4413      	add	r3, r2
 8008f2a:	687a      	ldr	r2, [r7, #4]
 8008f2c:	6852      	ldr	r2, [r2, #4]
 8008f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	61bb      	str	r3, [r7, #24]
        break;
 8008f36:	e01d      	b.n	8008f74 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f38:	f7fc f91c 	bl	8005174 <HAL_RCC_GetSysClockFreq>
 8008f3c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	085a      	lsrs	r2, r3, #1
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	441a      	add	r2, r3
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	61bb      	str	r3, [r7, #24]
        break;
 8008f54:	e00e      	b.n	8008f74 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	085b      	lsrs	r3, r3, #1
 8008f5c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	61bb      	str	r3, [r7, #24]
        break;
 8008f6c:	e002      	b.n	8008f74 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	75fb      	strb	r3, [r7, #23]
        break;
 8008f72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f74:	69bb      	ldr	r3, [r7, #24]
 8008f76:	2b0f      	cmp	r3, #15
 8008f78:	d908      	bls.n	8008f8c <UART_SetConfig+0x530>
 8008f7a:	69bb      	ldr	r3, [r7, #24]
 8008f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f80:	d204      	bcs.n	8008f8c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	69ba      	ldr	r2, [r7, #24]
 8008f88:	60da      	str	r2, [r3, #12]
 8008f8a:	e001      	b.n	8008f90 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008f9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	01e84800 	.word	0x01e84800
 8008fac:	00f42400 	.word	0x00f42400

08008fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008fb0:	b480      	push	{r7}
 8008fb2:	b083      	sub	sp, #12
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	f003 0301 	and.w	r3, r3, #1
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d00a      	beq.n	8008fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00a      	beq.n	8008ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	685b      	ldr	r3, [r3, #4]
 8008fec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	430a      	orrs	r2, r1
 8008ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	f003 0304 	and.w	r3, r3, #4
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00a      	beq.n	800901e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	685b      	ldr	r3, [r3, #4]
 800900e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	430a      	orrs	r2, r1
 800901c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009022:	f003 0308 	and.w	r3, r3, #8
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	430a      	orrs	r2, r1
 800903e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009044:	f003 0310 	and.w	r3, r3, #16
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00a      	beq.n	8009062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00a      	beq.n	8009084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	430a      	orrs	r2, r1
 8009082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800908c:	2b00      	cmp	r3, #0
 800908e:	d01a      	beq.n	80090c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	430a      	orrs	r2, r1
 80090a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090ae:	d10a      	bne.n	80090c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	430a      	orrs	r2, r1
 80090c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00a      	beq.n	80090e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	430a      	orrs	r2, r1
 80090e6:	605a      	str	r2, [r3, #4]
  }
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009102:	f7fa f86d 	bl	80031e0 <HAL_GetTick>
 8009106:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0308 	and.w	r3, r3, #8
 8009112:	2b08      	cmp	r3, #8
 8009114:	d10e      	bne.n	8009134 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009116:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800911a:	9300      	str	r3, [sp, #0]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f82a 	bl	800917e <UART_WaitOnFlagUntilTimeout>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e020      	b.n	8009176 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0304 	and.w	r3, r3, #4
 800913e:	2b04      	cmp	r3, #4
 8009140:	d10e      	bne.n	8009160 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009142:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f814 	bl	800917e <UART_WaitOnFlagUntilTimeout>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d001      	beq.n	8009160 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800915c:	2303      	movs	r3, #3
 800915e:	e00a      	b.n	8009176 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2220      	movs	r2, #32
 8009164:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2220      	movs	r2, #32
 800916a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	603b      	str	r3, [r7, #0]
 800918a:	4613      	mov	r3, r2
 800918c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800918e:	e05d      	b.n	800924c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009190:	69bb      	ldr	r3, [r7, #24]
 8009192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009196:	d059      	beq.n	800924c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009198:	f7fa f822 	bl	80031e0 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d302      	bcc.n	80091ae <UART_WaitOnFlagUntilTimeout+0x30>
 80091a8:	69bb      	ldr	r3, [r7, #24]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d11b      	bne.n	80091e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091bc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	689a      	ldr	r2, [r3, #8]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0201 	bic.w	r2, r2, #1
 80091cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2220      	movs	r2, #32
 80091d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2220      	movs	r2, #32
 80091d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2200      	movs	r2, #0
 80091de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e042      	b.n	800926c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f003 0304 	and.w	r3, r3, #4
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d02b      	beq.n	800924c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	69db      	ldr	r3, [r3, #28]
 80091fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009202:	d123      	bne.n	800924c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800920c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800921c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f022 0201 	bic.w	r2, r2, #1
 800922c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2220      	movs	r2, #32
 8009232:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2220      	movs	r2, #32
 8009238:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2220      	movs	r2, #32
 800923e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e00f      	b.n	800926c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	69da      	ldr	r2, [r3, #28]
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	4013      	ands	r3, r2
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	429a      	cmp	r2, r3
 800925a:	bf0c      	ite	eq
 800925c:	2301      	moveq	r3, #1
 800925e:	2300      	movne	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	461a      	mov	r2, r3
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	429a      	cmp	r2, r3
 8009268:	d092      	beq.n	8009190 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800928a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	689a      	ldr	r2, [r3, #8]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f022 0201 	bic.w	r2, r2, #1
 800929a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2220      	movs	r2, #32
 80092a0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2200      	movs	r2, #0
 80092c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f7ff fbae 	bl	8008a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092f6:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2220      	movs	r2, #32
 80092fc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff fb8b 	bl	8008a20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b084      	sub	sp, #16
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009320:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009326:	2b22      	cmp	r3, #34	; 0x22
 8009328:	d13a      	bne.n	80093a0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009330:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009332:	89bb      	ldrh	r3, [r7, #12]
 8009334:	b2d9      	uxtb	r1, r3
 8009336:	89fb      	ldrh	r3, [r7, #14]
 8009338:	b2da      	uxtb	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800933e:	400a      	ands	r2, r1
 8009340:	b2d2      	uxtb	r2, r2
 8009342:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009354:	b29b      	uxth	r3, r3
 8009356:	3b01      	subs	r3, #1
 8009358:	b29a      	uxth	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009366:	b29b      	uxth	r3, r3
 8009368:	2b00      	cmp	r3, #0
 800936a:	d121      	bne.n	80093b0 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	681a      	ldr	r2, [r3, #0]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800937a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689a      	ldr	r2, [r3, #8]
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 0201 	bic.w	r2, r2, #1
 800938a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2220      	movs	r2, #32
 8009390:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7f8 fc3d 	bl	8001c18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800939e:	e007      	b.n	80093b0 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	699a      	ldr	r2, [r3, #24]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f042 0208 	orr.w	r2, r2, #8
 80093ae:	619a      	str	r2, [r3, #24]
}
 80093b0:	bf00      	nop
 80093b2:	3710      	adds	r7, #16
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093c6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80093cc:	2b22      	cmp	r3, #34	; 0x22
 80093ce:	d13a      	bne.n	8009446 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d6:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093dc:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80093de:	89ba      	ldrh	r2, [r7, #12]
 80093e0:	89fb      	ldrh	r3, [r7, #14]
 80093e2:	4013      	ands	r3, r2
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ee:	1c9a      	adds	r2, r3, #2
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29a      	uxth	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800940c:	b29b      	uxth	r3, r3
 800940e:	2b00      	cmp	r3, #0
 8009410:	d121      	bne.n	8009456 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009420:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689a      	ldr	r2, [r3, #8]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f022 0201 	bic.w	r2, r2, #1
 8009430:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2220      	movs	r2, #32
 8009436:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7f8 fbea 	bl	8001c18 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009444:	e007      	b.n	8009456 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	699a      	ldr	r2, [r3, #24]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f042 0208 	orr.w	r2, r2, #8
 8009454:	619a      	str	r2, [r3, #24]
}
 8009456:	bf00      	nop
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <atoi>:
 800945e:	220a      	movs	r2, #10
 8009460:	2100      	movs	r1, #0
 8009462:	f000 b939 	b.w	80096d8 <strtol>
	...

08009468 <__errno>:
 8009468:	4b01      	ldr	r3, [pc, #4]	; (8009470 <__errno+0x8>)
 800946a:	6818      	ldr	r0, [r3, #0]
 800946c:	4770      	bx	lr
 800946e:	bf00      	nop
 8009470:	20000014 	.word	0x20000014

08009474 <__libc_init_array>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	4e0d      	ldr	r6, [pc, #52]	; (80094ac <__libc_init_array+0x38>)
 8009478:	4c0d      	ldr	r4, [pc, #52]	; (80094b0 <__libc_init_array+0x3c>)
 800947a:	1ba4      	subs	r4, r4, r6
 800947c:	10a4      	asrs	r4, r4, #2
 800947e:	2500      	movs	r5, #0
 8009480:	42a5      	cmp	r5, r4
 8009482:	d109      	bne.n	8009498 <__libc_init_array+0x24>
 8009484:	4e0b      	ldr	r6, [pc, #44]	; (80094b4 <__libc_init_array+0x40>)
 8009486:	4c0c      	ldr	r4, [pc, #48]	; (80094b8 <__libc_init_array+0x44>)
 8009488:	f000 fd4e 	bl	8009f28 <_init>
 800948c:	1ba4      	subs	r4, r4, r6
 800948e:	10a4      	asrs	r4, r4, #2
 8009490:	2500      	movs	r5, #0
 8009492:	42a5      	cmp	r5, r4
 8009494:	d105      	bne.n	80094a2 <__libc_init_array+0x2e>
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800949c:	4798      	blx	r3
 800949e:	3501      	adds	r5, #1
 80094a0:	e7ee      	b.n	8009480 <__libc_init_array+0xc>
 80094a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80094a6:	4798      	blx	r3
 80094a8:	3501      	adds	r5, #1
 80094aa:	e7f2      	b.n	8009492 <__libc_init_array+0x1e>
 80094ac:	0800a1e0 	.word	0x0800a1e0
 80094b0:	0800a1e0 	.word	0x0800a1e0
 80094b4:	0800a1e0 	.word	0x0800a1e0
 80094b8:	0800a1e4 	.word	0x0800a1e4

080094bc <memset>:
 80094bc:	4402      	add	r2, r0
 80094be:	4603      	mov	r3, r0
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d100      	bne.n	80094c6 <memset+0xa>
 80094c4:	4770      	bx	lr
 80094c6:	f803 1b01 	strb.w	r1, [r3], #1
 80094ca:	e7f9      	b.n	80094c0 <memset+0x4>

080094cc <siprintf>:
 80094cc:	b40e      	push	{r1, r2, r3}
 80094ce:	b500      	push	{lr}
 80094d0:	b09c      	sub	sp, #112	; 0x70
 80094d2:	ab1d      	add	r3, sp, #116	; 0x74
 80094d4:	9002      	str	r0, [sp, #8]
 80094d6:	9006      	str	r0, [sp, #24]
 80094d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80094dc:	4809      	ldr	r0, [pc, #36]	; (8009504 <siprintf+0x38>)
 80094de:	9107      	str	r1, [sp, #28]
 80094e0:	9104      	str	r1, [sp, #16]
 80094e2:	4909      	ldr	r1, [pc, #36]	; (8009508 <siprintf+0x3c>)
 80094e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80094e8:	9105      	str	r1, [sp, #20]
 80094ea:	6800      	ldr	r0, [r0, #0]
 80094ec:	9301      	str	r3, [sp, #4]
 80094ee:	a902      	add	r1, sp, #8
 80094f0:	f000 fa28 	bl	8009944 <_svfiprintf_r>
 80094f4:	9b02      	ldr	r3, [sp, #8]
 80094f6:	2200      	movs	r2, #0
 80094f8:	701a      	strb	r2, [r3, #0]
 80094fa:	b01c      	add	sp, #112	; 0x70
 80094fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009500:	b003      	add	sp, #12
 8009502:	4770      	bx	lr
 8009504:	20000014 	.word	0x20000014
 8009508:	ffff0208 	.word	0xffff0208

0800950c <strncpy>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	3901      	subs	r1, #1
 8009510:	4604      	mov	r4, r0
 8009512:	b902      	cbnz	r2, 8009516 <strncpy+0xa>
 8009514:	bd70      	pop	{r4, r5, r6, pc}
 8009516:	4623      	mov	r3, r4
 8009518:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800951c:	f803 5b01 	strb.w	r5, [r3], #1
 8009520:	1e56      	subs	r6, r2, #1
 8009522:	b92d      	cbnz	r5, 8009530 <strncpy+0x24>
 8009524:	4414      	add	r4, r2
 8009526:	42a3      	cmp	r3, r4
 8009528:	d0f4      	beq.n	8009514 <strncpy+0x8>
 800952a:	f803 5b01 	strb.w	r5, [r3], #1
 800952e:	e7fa      	b.n	8009526 <strncpy+0x1a>
 8009530:	461c      	mov	r4, r3
 8009532:	4632      	mov	r2, r6
 8009534:	e7ed      	b.n	8009512 <strncpy+0x6>
	...

08009538 <strtok>:
 8009538:	4b13      	ldr	r3, [pc, #76]	; (8009588 <strtok+0x50>)
 800953a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800953e:	681d      	ldr	r5, [r3, #0]
 8009540:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009542:	4606      	mov	r6, r0
 8009544:	460f      	mov	r7, r1
 8009546:	b9b4      	cbnz	r4, 8009576 <strtok+0x3e>
 8009548:	2050      	movs	r0, #80	; 0x50
 800954a:	f000 f8df 	bl	800970c <malloc>
 800954e:	65a8      	str	r0, [r5, #88]	; 0x58
 8009550:	e9c0 4400 	strd	r4, r4, [r0]
 8009554:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009558:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800955c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009560:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009564:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009568:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800956c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009570:	6184      	str	r4, [r0, #24]
 8009572:	7704      	strb	r4, [r0, #28]
 8009574:	6244      	str	r4, [r0, #36]	; 0x24
 8009576:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009578:	4639      	mov	r1, r7
 800957a:	4630      	mov	r0, r6
 800957c:	2301      	movs	r3, #1
 800957e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009582:	f000 b803 	b.w	800958c <__strtok_r>
 8009586:	bf00      	nop
 8009588:	20000014 	.word	0x20000014

0800958c <__strtok_r>:
 800958c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800958e:	b918      	cbnz	r0, 8009598 <__strtok_r+0xc>
 8009590:	6810      	ldr	r0, [r2, #0]
 8009592:	b908      	cbnz	r0, 8009598 <__strtok_r+0xc>
 8009594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009596:	4620      	mov	r0, r4
 8009598:	4604      	mov	r4, r0
 800959a:	460f      	mov	r7, r1
 800959c:	f814 5b01 	ldrb.w	r5, [r4], #1
 80095a0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80095a4:	b91e      	cbnz	r6, 80095ae <__strtok_r+0x22>
 80095a6:	b96d      	cbnz	r5, 80095c4 <__strtok_r+0x38>
 80095a8:	6015      	str	r5, [r2, #0]
 80095aa:	4628      	mov	r0, r5
 80095ac:	e7f2      	b.n	8009594 <__strtok_r+0x8>
 80095ae:	42b5      	cmp	r5, r6
 80095b0:	d1f6      	bne.n	80095a0 <__strtok_r+0x14>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d1ef      	bne.n	8009596 <__strtok_r+0xa>
 80095b6:	6014      	str	r4, [r2, #0]
 80095b8:	7003      	strb	r3, [r0, #0]
 80095ba:	e7eb      	b.n	8009594 <__strtok_r+0x8>
 80095bc:	462b      	mov	r3, r5
 80095be:	e00d      	b.n	80095dc <__strtok_r+0x50>
 80095c0:	b926      	cbnz	r6, 80095cc <__strtok_r+0x40>
 80095c2:	461c      	mov	r4, r3
 80095c4:	4623      	mov	r3, r4
 80095c6:	460f      	mov	r7, r1
 80095c8:	f813 5b01 	ldrb.w	r5, [r3], #1
 80095cc:	f817 6b01 	ldrb.w	r6, [r7], #1
 80095d0:	42b5      	cmp	r5, r6
 80095d2:	d1f5      	bne.n	80095c0 <__strtok_r+0x34>
 80095d4:	2d00      	cmp	r5, #0
 80095d6:	d0f1      	beq.n	80095bc <__strtok_r+0x30>
 80095d8:	2100      	movs	r1, #0
 80095da:	7021      	strb	r1, [r4, #0]
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	e7d9      	b.n	8009594 <__strtok_r+0x8>

080095e0 <_strtol_l.isra.0>:
 80095e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095e4:	4680      	mov	r8, r0
 80095e6:	4689      	mov	r9, r1
 80095e8:	4692      	mov	sl, r2
 80095ea:	461e      	mov	r6, r3
 80095ec:	460f      	mov	r7, r1
 80095ee:	463d      	mov	r5, r7
 80095f0:	9808      	ldr	r0, [sp, #32]
 80095f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095f6:	f000 f885 	bl	8009704 <__locale_ctype_ptr_l>
 80095fa:	4420      	add	r0, r4
 80095fc:	7843      	ldrb	r3, [r0, #1]
 80095fe:	f013 0308 	ands.w	r3, r3, #8
 8009602:	d132      	bne.n	800966a <_strtol_l.isra.0+0x8a>
 8009604:	2c2d      	cmp	r4, #45	; 0x2d
 8009606:	d132      	bne.n	800966e <_strtol_l.isra.0+0x8e>
 8009608:	787c      	ldrb	r4, [r7, #1]
 800960a:	1cbd      	adds	r5, r7, #2
 800960c:	2201      	movs	r2, #1
 800960e:	2e00      	cmp	r6, #0
 8009610:	d05d      	beq.n	80096ce <_strtol_l.isra.0+0xee>
 8009612:	2e10      	cmp	r6, #16
 8009614:	d109      	bne.n	800962a <_strtol_l.isra.0+0x4a>
 8009616:	2c30      	cmp	r4, #48	; 0x30
 8009618:	d107      	bne.n	800962a <_strtol_l.isra.0+0x4a>
 800961a:	782b      	ldrb	r3, [r5, #0]
 800961c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009620:	2b58      	cmp	r3, #88	; 0x58
 8009622:	d14f      	bne.n	80096c4 <_strtol_l.isra.0+0xe4>
 8009624:	786c      	ldrb	r4, [r5, #1]
 8009626:	2610      	movs	r6, #16
 8009628:	3502      	adds	r5, #2
 800962a:	2a00      	cmp	r2, #0
 800962c:	bf14      	ite	ne
 800962e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009632:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009636:	2700      	movs	r7, #0
 8009638:	fbb1 fcf6 	udiv	ip, r1, r6
 800963c:	4638      	mov	r0, r7
 800963e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009642:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009646:	2b09      	cmp	r3, #9
 8009648:	d817      	bhi.n	800967a <_strtol_l.isra.0+0x9a>
 800964a:	461c      	mov	r4, r3
 800964c:	42a6      	cmp	r6, r4
 800964e:	dd23      	ble.n	8009698 <_strtol_l.isra.0+0xb8>
 8009650:	1c7b      	adds	r3, r7, #1
 8009652:	d007      	beq.n	8009664 <_strtol_l.isra.0+0x84>
 8009654:	4584      	cmp	ip, r0
 8009656:	d31c      	bcc.n	8009692 <_strtol_l.isra.0+0xb2>
 8009658:	d101      	bne.n	800965e <_strtol_l.isra.0+0x7e>
 800965a:	45a6      	cmp	lr, r4
 800965c:	db19      	blt.n	8009692 <_strtol_l.isra.0+0xb2>
 800965e:	fb00 4006 	mla	r0, r0, r6, r4
 8009662:	2701      	movs	r7, #1
 8009664:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009668:	e7eb      	b.n	8009642 <_strtol_l.isra.0+0x62>
 800966a:	462f      	mov	r7, r5
 800966c:	e7bf      	b.n	80095ee <_strtol_l.isra.0+0xe>
 800966e:	2c2b      	cmp	r4, #43	; 0x2b
 8009670:	bf04      	itt	eq
 8009672:	1cbd      	addeq	r5, r7, #2
 8009674:	787c      	ldrbeq	r4, [r7, #1]
 8009676:	461a      	mov	r2, r3
 8009678:	e7c9      	b.n	800960e <_strtol_l.isra.0+0x2e>
 800967a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800967e:	2b19      	cmp	r3, #25
 8009680:	d801      	bhi.n	8009686 <_strtol_l.isra.0+0xa6>
 8009682:	3c37      	subs	r4, #55	; 0x37
 8009684:	e7e2      	b.n	800964c <_strtol_l.isra.0+0x6c>
 8009686:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800968a:	2b19      	cmp	r3, #25
 800968c:	d804      	bhi.n	8009698 <_strtol_l.isra.0+0xb8>
 800968e:	3c57      	subs	r4, #87	; 0x57
 8009690:	e7dc      	b.n	800964c <_strtol_l.isra.0+0x6c>
 8009692:	f04f 37ff 	mov.w	r7, #4294967295
 8009696:	e7e5      	b.n	8009664 <_strtol_l.isra.0+0x84>
 8009698:	1c7b      	adds	r3, r7, #1
 800969a:	d108      	bne.n	80096ae <_strtol_l.isra.0+0xce>
 800969c:	2322      	movs	r3, #34	; 0x22
 800969e:	f8c8 3000 	str.w	r3, [r8]
 80096a2:	4608      	mov	r0, r1
 80096a4:	f1ba 0f00 	cmp.w	sl, #0
 80096a8:	d107      	bne.n	80096ba <_strtol_l.isra.0+0xda>
 80096aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096ae:	b102      	cbz	r2, 80096b2 <_strtol_l.isra.0+0xd2>
 80096b0:	4240      	negs	r0, r0
 80096b2:	f1ba 0f00 	cmp.w	sl, #0
 80096b6:	d0f8      	beq.n	80096aa <_strtol_l.isra.0+0xca>
 80096b8:	b10f      	cbz	r7, 80096be <_strtol_l.isra.0+0xde>
 80096ba:	f105 39ff 	add.w	r9, r5, #4294967295
 80096be:	f8ca 9000 	str.w	r9, [sl]
 80096c2:	e7f2      	b.n	80096aa <_strtol_l.isra.0+0xca>
 80096c4:	2430      	movs	r4, #48	; 0x30
 80096c6:	2e00      	cmp	r6, #0
 80096c8:	d1af      	bne.n	800962a <_strtol_l.isra.0+0x4a>
 80096ca:	2608      	movs	r6, #8
 80096cc:	e7ad      	b.n	800962a <_strtol_l.isra.0+0x4a>
 80096ce:	2c30      	cmp	r4, #48	; 0x30
 80096d0:	d0a3      	beq.n	800961a <_strtol_l.isra.0+0x3a>
 80096d2:	260a      	movs	r6, #10
 80096d4:	e7a9      	b.n	800962a <_strtol_l.isra.0+0x4a>
	...

080096d8 <strtol>:
 80096d8:	4b08      	ldr	r3, [pc, #32]	; (80096fc <strtol+0x24>)
 80096da:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096dc:	681c      	ldr	r4, [r3, #0]
 80096de:	4d08      	ldr	r5, [pc, #32]	; (8009700 <strtol+0x28>)
 80096e0:	6a23      	ldr	r3, [r4, #32]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bf08      	it	eq
 80096e6:	462b      	moveq	r3, r5
 80096e8:	9300      	str	r3, [sp, #0]
 80096ea:	4613      	mov	r3, r2
 80096ec:	460a      	mov	r2, r1
 80096ee:	4601      	mov	r1, r0
 80096f0:	4620      	mov	r0, r4
 80096f2:	f7ff ff75 	bl	80095e0 <_strtol_l.isra.0>
 80096f6:	b003      	add	sp, #12
 80096f8:	bd30      	pop	{r4, r5, pc}
 80096fa:	bf00      	nop
 80096fc:	20000014 	.word	0x20000014
 8009700:	20000078 	.word	0x20000078

08009704 <__locale_ctype_ptr_l>:
 8009704:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009708:	4770      	bx	lr
	...

0800970c <malloc>:
 800970c:	4b02      	ldr	r3, [pc, #8]	; (8009718 <malloc+0xc>)
 800970e:	4601      	mov	r1, r0
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	f000 b863 	b.w	80097dc <_malloc_r>
 8009716:	bf00      	nop
 8009718:	20000014 	.word	0x20000014

0800971c <__ascii_mbtowc>:
 800971c:	b082      	sub	sp, #8
 800971e:	b901      	cbnz	r1, 8009722 <__ascii_mbtowc+0x6>
 8009720:	a901      	add	r1, sp, #4
 8009722:	b142      	cbz	r2, 8009736 <__ascii_mbtowc+0x1a>
 8009724:	b14b      	cbz	r3, 800973a <__ascii_mbtowc+0x1e>
 8009726:	7813      	ldrb	r3, [r2, #0]
 8009728:	600b      	str	r3, [r1, #0]
 800972a:	7812      	ldrb	r2, [r2, #0]
 800972c:	1c10      	adds	r0, r2, #0
 800972e:	bf18      	it	ne
 8009730:	2001      	movne	r0, #1
 8009732:	b002      	add	sp, #8
 8009734:	4770      	bx	lr
 8009736:	4610      	mov	r0, r2
 8009738:	e7fb      	b.n	8009732 <__ascii_mbtowc+0x16>
 800973a:	f06f 0001 	mvn.w	r0, #1
 800973e:	e7f8      	b.n	8009732 <__ascii_mbtowc+0x16>

08009740 <_free_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4605      	mov	r5, r0
 8009744:	2900      	cmp	r1, #0
 8009746:	d045      	beq.n	80097d4 <_free_r+0x94>
 8009748:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800974c:	1f0c      	subs	r4, r1, #4
 800974e:	2b00      	cmp	r3, #0
 8009750:	bfb8      	it	lt
 8009752:	18e4      	addlt	r4, r4, r3
 8009754:	f000 fbb7 	bl	8009ec6 <__malloc_lock>
 8009758:	4a1f      	ldr	r2, [pc, #124]	; (80097d8 <_free_r+0x98>)
 800975a:	6813      	ldr	r3, [r2, #0]
 800975c:	4610      	mov	r0, r2
 800975e:	b933      	cbnz	r3, 800976e <_free_r+0x2e>
 8009760:	6063      	str	r3, [r4, #4]
 8009762:	6014      	str	r4, [r2, #0]
 8009764:	4628      	mov	r0, r5
 8009766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800976a:	f000 bbad 	b.w	8009ec8 <__malloc_unlock>
 800976e:	42a3      	cmp	r3, r4
 8009770:	d90c      	bls.n	800978c <_free_r+0x4c>
 8009772:	6821      	ldr	r1, [r4, #0]
 8009774:	1862      	adds	r2, r4, r1
 8009776:	4293      	cmp	r3, r2
 8009778:	bf04      	itt	eq
 800977a:	681a      	ldreq	r2, [r3, #0]
 800977c:	685b      	ldreq	r3, [r3, #4]
 800977e:	6063      	str	r3, [r4, #4]
 8009780:	bf04      	itt	eq
 8009782:	1852      	addeq	r2, r2, r1
 8009784:	6022      	streq	r2, [r4, #0]
 8009786:	6004      	str	r4, [r0, #0]
 8009788:	e7ec      	b.n	8009764 <_free_r+0x24>
 800978a:	4613      	mov	r3, r2
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	b10a      	cbz	r2, 8009794 <_free_r+0x54>
 8009790:	42a2      	cmp	r2, r4
 8009792:	d9fa      	bls.n	800978a <_free_r+0x4a>
 8009794:	6819      	ldr	r1, [r3, #0]
 8009796:	1858      	adds	r0, r3, r1
 8009798:	42a0      	cmp	r0, r4
 800979a:	d10b      	bne.n	80097b4 <_free_r+0x74>
 800979c:	6820      	ldr	r0, [r4, #0]
 800979e:	4401      	add	r1, r0
 80097a0:	1858      	adds	r0, r3, r1
 80097a2:	4282      	cmp	r2, r0
 80097a4:	6019      	str	r1, [r3, #0]
 80097a6:	d1dd      	bne.n	8009764 <_free_r+0x24>
 80097a8:	6810      	ldr	r0, [r2, #0]
 80097aa:	6852      	ldr	r2, [r2, #4]
 80097ac:	605a      	str	r2, [r3, #4]
 80097ae:	4401      	add	r1, r0
 80097b0:	6019      	str	r1, [r3, #0]
 80097b2:	e7d7      	b.n	8009764 <_free_r+0x24>
 80097b4:	d902      	bls.n	80097bc <_free_r+0x7c>
 80097b6:	230c      	movs	r3, #12
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	e7d3      	b.n	8009764 <_free_r+0x24>
 80097bc:	6820      	ldr	r0, [r4, #0]
 80097be:	1821      	adds	r1, r4, r0
 80097c0:	428a      	cmp	r2, r1
 80097c2:	bf04      	itt	eq
 80097c4:	6811      	ldreq	r1, [r2, #0]
 80097c6:	6852      	ldreq	r2, [r2, #4]
 80097c8:	6062      	str	r2, [r4, #4]
 80097ca:	bf04      	itt	eq
 80097cc:	1809      	addeq	r1, r1, r0
 80097ce:	6021      	streq	r1, [r4, #0]
 80097d0:	605c      	str	r4, [r3, #4]
 80097d2:	e7c7      	b.n	8009764 <_free_r+0x24>
 80097d4:	bd38      	pop	{r3, r4, r5, pc}
 80097d6:	bf00      	nop
 80097d8:	2000020c 	.word	0x2000020c

080097dc <_malloc_r>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	1ccd      	adds	r5, r1, #3
 80097e0:	f025 0503 	bic.w	r5, r5, #3
 80097e4:	3508      	adds	r5, #8
 80097e6:	2d0c      	cmp	r5, #12
 80097e8:	bf38      	it	cc
 80097ea:	250c      	movcc	r5, #12
 80097ec:	2d00      	cmp	r5, #0
 80097ee:	4606      	mov	r6, r0
 80097f0:	db01      	blt.n	80097f6 <_malloc_r+0x1a>
 80097f2:	42a9      	cmp	r1, r5
 80097f4:	d903      	bls.n	80097fe <_malloc_r+0x22>
 80097f6:	230c      	movs	r3, #12
 80097f8:	6033      	str	r3, [r6, #0]
 80097fa:	2000      	movs	r0, #0
 80097fc:	bd70      	pop	{r4, r5, r6, pc}
 80097fe:	f000 fb62 	bl	8009ec6 <__malloc_lock>
 8009802:	4a21      	ldr	r2, [pc, #132]	; (8009888 <_malloc_r+0xac>)
 8009804:	6814      	ldr	r4, [r2, #0]
 8009806:	4621      	mov	r1, r4
 8009808:	b991      	cbnz	r1, 8009830 <_malloc_r+0x54>
 800980a:	4c20      	ldr	r4, [pc, #128]	; (800988c <_malloc_r+0xb0>)
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	b91b      	cbnz	r3, 8009818 <_malloc_r+0x3c>
 8009810:	4630      	mov	r0, r6
 8009812:	f000 fb17 	bl	8009e44 <_sbrk_r>
 8009816:	6020      	str	r0, [r4, #0]
 8009818:	4629      	mov	r1, r5
 800981a:	4630      	mov	r0, r6
 800981c:	f000 fb12 	bl	8009e44 <_sbrk_r>
 8009820:	1c43      	adds	r3, r0, #1
 8009822:	d124      	bne.n	800986e <_malloc_r+0x92>
 8009824:	230c      	movs	r3, #12
 8009826:	6033      	str	r3, [r6, #0]
 8009828:	4630      	mov	r0, r6
 800982a:	f000 fb4d 	bl	8009ec8 <__malloc_unlock>
 800982e:	e7e4      	b.n	80097fa <_malloc_r+0x1e>
 8009830:	680b      	ldr	r3, [r1, #0]
 8009832:	1b5b      	subs	r3, r3, r5
 8009834:	d418      	bmi.n	8009868 <_malloc_r+0x8c>
 8009836:	2b0b      	cmp	r3, #11
 8009838:	d90f      	bls.n	800985a <_malloc_r+0x7e>
 800983a:	600b      	str	r3, [r1, #0]
 800983c:	50cd      	str	r5, [r1, r3]
 800983e:	18cc      	adds	r4, r1, r3
 8009840:	4630      	mov	r0, r6
 8009842:	f000 fb41 	bl	8009ec8 <__malloc_unlock>
 8009846:	f104 000b 	add.w	r0, r4, #11
 800984a:	1d23      	adds	r3, r4, #4
 800984c:	f020 0007 	bic.w	r0, r0, #7
 8009850:	1ac3      	subs	r3, r0, r3
 8009852:	d0d3      	beq.n	80097fc <_malloc_r+0x20>
 8009854:	425a      	negs	r2, r3
 8009856:	50e2      	str	r2, [r4, r3]
 8009858:	e7d0      	b.n	80097fc <_malloc_r+0x20>
 800985a:	428c      	cmp	r4, r1
 800985c:	684b      	ldr	r3, [r1, #4]
 800985e:	bf16      	itet	ne
 8009860:	6063      	strne	r3, [r4, #4]
 8009862:	6013      	streq	r3, [r2, #0]
 8009864:	460c      	movne	r4, r1
 8009866:	e7eb      	b.n	8009840 <_malloc_r+0x64>
 8009868:	460c      	mov	r4, r1
 800986a:	6849      	ldr	r1, [r1, #4]
 800986c:	e7cc      	b.n	8009808 <_malloc_r+0x2c>
 800986e:	1cc4      	adds	r4, r0, #3
 8009870:	f024 0403 	bic.w	r4, r4, #3
 8009874:	42a0      	cmp	r0, r4
 8009876:	d005      	beq.n	8009884 <_malloc_r+0xa8>
 8009878:	1a21      	subs	r1, r4, r0
 800987a:	4630      	mov	r0, r6
 800987c:	f000 fae2 	bl	8009e44 <_sbrk_r>
 8009880:	3001      	adds	r0, #1
 8009882:	d0cf      	beq.n	8009824 <_malloc_r+0x48>
 8009884:	6025      	str	r5, [r4, #0]
 8009886:	e7db      	b.n	8009840 <_malloc_r+0x64>
 8009888:	2000020c 	.word	0x2000020c
 800988c:	20000210 	.word	0x20000210

08009890 <__ssputs_r>:
 8009890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009894:	688e      	ldr	r6, [r1, #8]
 8009896:	429e      	cmp	r6, r3
 8009898:	4682      	mov	sl, r0
 800989a:	460c      	mov	r4, r1
 800989c:	4690      	mov	r8, r2
 800989e:	4699      	mov	r9, r3
 80098a0:	d837      	bhi.n	8009912 <__ssputs_r+0x82>
 80098a2:	898a      	ldrh	r2, [r1, #12]
 80098a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098a8:	d031      	beq.n	800990e <__ssputs_r+0x7e>
 80098aa:	6825      	ldr	r5, [r4, #0]
 80098ac:	6909      	ldr	r1, [r1, #16]
 80098ae:	1a6f      	subs	r7, r5, r1
 80098b0:	6965      	ldr	r5, [r4, #20]
 80098b2:	2302      	movs	r3, #2
 80098b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80098bc:	f109 0301 	add.w	r3, r9, #1
 80098c0:	443b      	add	r3, r7
 80098c2:	429d      	cmp	r5, r3
 80098c4:	bf38      	it	cc
 80098c6:	461d      	movcc	r5, r3
 80098c8:	0553      	lsls	r3, r2, #21
 80098ca:	d530      	bpl.n	800992e <__ssputs_r+0x9e>
 80098cc:	4629      	mov	r1, r5
 80098ce:	f7ff ff85 	bl	80097dc <_malloc_r>
 80098d2:	4606      	mov	r6, r0
 80098d4:	b950      	cbnz	r0, 80098ec <__ssputs_r+0x5c>
 80098d6:	230c      	movs	r3, #12
 80098d8:	f8ca 3000 	str.w	r3, [sl]
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098ec:	463a      	mov	r2, r7
 80098ee:	6921      	ldr	r1, [r4, #16]
 80098f0:	f000 fac5 	bl	8009e7e <memcpy>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80098fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	6126      	str	r6, [r4, #16]
 8009902:	6165      	str	r5, [r4, #20]
 8009904:	443e      	add	r6, r7
 8009906:	1bed      	subs	r5, r5, r7
 8009908:	6026      	str	r6, [r4, #0]
 800990a:	60a5      	str	r5, [r4, #8]
 800990c:	464e      	mov	r6, r9
 800990e:	454e      	cmp	r6, r9
 8009910:	d900      	bls.n	8009914 <__ssputs_r+0x84>
 8009912:	464e      	mov	r6, r9
 8009914:	4632      	mov	r2, r6
 8009916:	4641      	mov	r1, r8
 8009918:	6820      	ldr	r0, [r4, #0]
 800991a:	f000 fabb 	bl	8009e94 <memmove>
 800991e:	68a3      	ldr	r3, [r4, #8]
 8009920:	1b9b      	subs	r3, r3, r6
 8009922:	60a3      	str	r3, [r4, #8]
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	441e      	add	r6, r3
 8009928:	6026      	str	r6, [r4, #0]
 800992a:	2000      	movs	r0, #0
 800992c:	e7dc      	b.n	80098e8 <__ssputs_r+0x58>
 800992e:	462a      	mov	r2, r5
 8009930:	f000 facb 	bl	8009eca <_realloc_r>
 8009934:	4606      	mov	r6, r0
 8009936:	2800      	cmp	r0, #0
 8009938:	d1e2      	bne.n	8009900 <__ssputs_r+0x70>
 800993a:	6921      	ldr	r1, [r4, #16]
 800993c:	4650      	mov	r0, sl
 800993e:	f7ff feff 	bl	8009740 <_free_r>
 8009942:	e7c8      	b.n	80098d6 <__ssputs_r+0x46>

08009944 <_svfiprintf_r>:
 8009944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009948:	461d      	mov	r5, r3
 800994a:	898b      	ldrh	r3, [r1, #12]
 800994c:	061f      	lsls	r7, r3, #24
 800994e:	b09d      	sub	sp, #116	; 0x74
 8009950:	4680      	mov	r8, r0
 8009952:	460c      	mov	r4, r1
 8009954:	4616      	mov	r6, r2
 8009956:	d50f      	bpl.n	8009978 <_svfiprintf_r+0x34>
 8009958:	690b      	ldr	r3, [r1, #16]
 800995a:	b96b      	cbnz	r3, 8009978 <_svfiprintf_r+0x34>
 800995c:	2140      	movs	r1, #64	; 0x40
 800995e:	f7ff ff3d 	bl	80097dc <_malloc_r>
 8009962:	6020      	str	r0, [r4, #0]
 8009964:	6120      	str	r0, [r4, #16]
 8009966:	b928      	cbnz	r0, 8009974 <_svfiprintf_r+0x30>
 8009968:	230c      	movs	r3, #12
 800996a:	f8c8 3000 	str.w	r3, [r8]
 800996e:	f04f 30ff 	mov.w	r0, #4294967295
 8009972:	e0c8      	b.n	8009b06 <_svfiprintf_r+0x1c2>
 8009974:	2340      	movs	r3, #64	; 0x40
 8009976:	6163      	str	r3, [r4, #20]
 8009978:	2300      	movs	r3, #0
 800997a:	9309      	str	r3, [sp, #36]	; 0x24
 800997c:	2320      	movs	r3, #32
 800997e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009982:	2330      	movs	r3, #48	; 0x30
 8009984:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009988:	9503      	str	r5, [sp, #12]
 800998a:	f04f 0b01 	mov.w	fp, #1
 800998e:	4637      	mov	r7, r6
 8009990:	463d      	mov	r5, r7
 8009992:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009996:	b10b      	cbz	r3, 800999c <_svfiprintf_r+0x58>
 8009998:	2b25      	cmp	r3, #37	; 0x25
 800999a:	d13e      	bne.n	8009a1a <_svfiprintf_r+0xd6>
 800999c:	ebb7 0a06 	subs.w	sl, r7, r6
 80099a0:	d00b      	beq.n	80099ba <_svfiprintf_r+0x76>
 80099a2:	4653      	mov	r3, sl
 80099a4:	4632      	mov	r2, r6
 80099a6:	4621      	mov	r1, r4
 80099a8:	4640      	mov	r0, r8
 80099aa:	f7ff ff71 	bl	8009890 <__ssputs_r>
 80099ae:	3001      	adds	r0, #1
 80099b0:	f000 80a4 	beq.w	8009afc <_svfiprintf_r+0x1b8>
 80099b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099b6:	4453      	add	r3, sl
 80099b8:	9309      	str	r3, [sp, #36]	; 0x24
 80099ba:	783b      	ldrb	r3, [r7, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	f000 809d 	beq.w	8009afc <_svfiprintf_r+0x1b8>
 80099c2:	2300      	movs	r3, #0
 80099c4:	f04f 32ff 	mov.w	r2, #4294967295
 80099c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099cc:	9304      	str	r3, [sp, #16]
 80099ce:	9307      	str	r3, [sp, #28]
 80099d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099d4:	931a      	str	r3, [sp, #104]	; 0x68
 80099d6:	462f      	mov	r7, r5
 80099d8:	2205      	movs	r2, #5
 80099da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80099de:	4850      	ldr	r0, [pc, #320]	; (8009b20 <_svfiprintf_r+0x1dc>)
 80099e0:	f7f6 fc46 	bl	8000270 <memchr>
 80099e4:	9b04      	ldr	r3, [sp, #16]
 80099e6:	b9d0      	cbnz	r0, 8009a1e <_svfiprintf_r+0xda>
 80099e8:	06d9      	lsls	r1, r3, #27
 80099ea:	bf44      	itt	mi
 80099ec:	2220      	movmi	r2, #32
 80099ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099f2:	071a      	lsls	r2, r3, #28
 80099f4:	bf44      	itt	mi
 80099f6:	222b      	movmi	r2, #43	; 0x2b
 80099f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80099fc:	782a      	ldrb	r2, [r5, #0]
 80099fe:	2a2a      	cmp	r2, #42	; 0x2a
 8009a00:	d015      	beq.n	8009a2e <_svfiprintf_r+0xea>
 8009a02:	9a07      	ldr	r2, [sp, #28]
 8009a04:	462f      	mov	r7, r5
 8009a06:	2000      	movs	r0, #0
 8009a08:	250a      	movs	r5, #10
 8009a0a:	4639      	mov	r1, r7
 8009a0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a10:	3b30      	subs	r3, #48	; 0x30
 8009a12:	2b09      	cmp	r3, #9
 8009a14:	d94d      	bls.n	8009ab2 <_svfiprintf_r+0x16e>
 8009a16:	b1b8      	cbz	r0, 8009a48 <_svfiprintf_r+0x104>
 8009a18:	e00f      	b.n	8009a3a <_svfiprintf_r+0xf6>
 8009a1a:	462f      	mov	r7, r5
 8009a1c:	e7b8      	b.n	8009990 <_svfiprintf_r+0x4c>
 8009a1e:	4a40      	ldr	r2, [pc, #256]	; (8009b20 <_svfiprintf_r+0x1dc>)
 8009a20:	1a80      	subs	r0, r0, r2
 8009a22:	fa0b f000 	lsl.w	r0, fp, r0
 8009a26:	4318      	orrs	r0, r3
 8009a28:	9004      	str	r0, [sp, #16]
 8009a2a:	463d      	mov	r5, r7
 8009a2c:	e7d3      	b.n	80099d6 <_svfiprintf_r+0x92>
 8009a2e:	9a03      	ldr	r2, [sp, #12]
 8009a30:	1d11      	adds	r1, r2, #4
 8009a32:	6812      	ldr	r2, [r2, #0]
 8009a34:	9103      	str	r1, [sp, #12]
 8009a36:	2a00      	cmp	r2, #0
 8009a38:	db01      	blt.n	8009a3e <_svfiprintf_r+0xfa>
 8009a3a:	9207      	str	r2, [sp, #28]
 8009a3c:	e004      	b.n	8009a48 <_svfiprintf_r+0x104>
 8009a3e:	4252      	negs	r2, r2
 8009a40:	f043 0302 	orr.w	r3, r3, #2
 8009a44:	9207      	str	r2, [sp, #28]
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	783b      	ldrb	r3, [r7, #0]
 8009a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8009a4c:	d10c      	bne.n	8009a68 <_svfiprintf_r+0x124>
 8009a4e:	787b      	ldrb	r3, [r7, #1]
 8009a50:	2b2a      	cmp	r3, #42	; 0x2a
 8009a52:	d133      	bne.n	8009abc <_svfiprintf_r+0x178>
 8009a54:	9b03      	ldr	r3, [sp, #12]
 8009a56:	1d1a      	adds	r2, r3, #4
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	9203      	str	r2, [sp, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	bfb8      	it	lt
 8009a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a64:	3702      	adds	r7, #2
 8009a66:	9305      	str	r3, [sp, #20]
 8009a68:	4d2e      	ldr	r5, [pc, #184]	; (8009b24 <_svfiprintf_r+0x1e0>)
 8009a6a:	7839      	ldrb	r1, [r7, #0]
 8009a6c:	2203      	movs	r2, #3
 8009a6e:	4628      	mov	r0, r5
 8009a70:	f7f6 fbfe 	bl	8000270 <memchr>
 8009a74:	b138      	cbz	r0, 8009a86 <_svfiprintf_r+0x142>
 8009a76:	2340      	movs	r3, #64	; 0x40
 8009a78:	1b40      	subs	r0, r0, r5
 8009a7a:	fa03 f000 	lsl.w	r0, r3, r0
 8009a7e:	9b04      	ldr	r3, [sp, #16]
 8009a80:	4303      	orrs	r3, r0
 8009a82:	3701      	adds	r7, #1
 8009a84:	9304      	str	r3, [sp, #16]
 8009a86:	7839      	ldrb	r1, [r7, #0]
 8009a88:	4827      	ldr	r0, [pc, #156]	; (8009b28 <_svfiprintf_r+0x1e4>)
 8009a8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a8e:	2206      	movs	r2, #6
 8009a90:	1c7e      	adds	r6, r7, #1
 8009a92:	f7f6 fbed 	bl	8000270 <memchr>
 8009a96:	2800      	cmp	r0, #0
 8009a98:	d038      	beq.n	8009b0c <_svfiprintf_r+0x1c8>
 8009a9a:	4b24      	ldr	r3, [pc, #144]	; (8009b2c <_svfiprintf_r+0x1e8>)
 8009a9c:	bb13      	cbnz	r3, 8009ae4 <_svfiprintf_r+0x1a0>
 8009a9e:	9b03      	ldr	r3, [sp, #12]
 8009aa0:	3307      	adds	r3, #7
 8009aa2:	f023 0307 	bic.w	r3, r3, #7
 8009aa6:	3308      	adds	r3, #8
 8009aa8:	9303      	str	r3, [sp, #12]
 8009aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aac:	444b      	add	r3, r9
 8009aae:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab0:	e76d      	b.n	800998e <_svfiprintf_r+0x4a>
 8009ab2:	fb05 3202 	mla	r2, r5, r2, r3
 8009ab6:	2001      	movs	r0, #1
 8009ab8:	460f      	mov	r7, r1
 8009aba:	e7a6      	b.n	8009a0a <_svfiprintf_r+0xc6>
 8009abc:	2300      	movs	r3, #0
 8009abe:	3701      	adds	r7, #1
 8009ac0:	9305      	str	r3, [sp, #20]
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	250a      	movs	r5, #10
 8009ac6:	4638      	mov	r0, r7
 8009ac8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009acc:	3a30      	subs	r2, #48	; 0x30
 8009ace:	2a09      	cmp	r2, #9
 8009ad0:	d903      	bls.n	8009ada <_svfiprintf_r+0x196>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d0c8      	beq.n	8009a68 <_svfiprintf_r+0x124>
 8009ad6:	9105      	str	r1, [sp, #20]
 8009ad8:	e7c6      	b.n	8009a68 <_svfiprintf_r+0x124>
 8009ada:	fb05 2101 	mla	r1, r5, r1, r2
 8009ade:	2301      	movs	r3, #1
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	e7f0      	b.n	8009ac6 <_svfiprintf_r+0x182>
 8009ae4:	ab03      	add	r3, sp, #12
 8009ae6:	9300      	str	r3, [sp, #0]
 8009ae8:	4622      	mov	r2, r4
 8009aea:	4b11      	ldr	r3, [pc, #68]	; (8009b30 <_svfiprintf_r+0x1ec>)
 8009aec:	a904      	add	r1, sp, #16
 8009aee:	4640      	mov	r0, r8
 8009af0:	f3af 8000 	nop.w
 8009af4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009af8:	4681      	mov	r9, r0
 8009afa:	d1d6      	bne.n	8009aaa <_svfiprintf_r+0x166>
 8009afc:	89a3      	ldrh	r3, [r4, #12]
 8009afe:	065b      	lsls	r3, r3, #25
 8009b00:	f53f af35 	bmi.w	800996e <_svfiprintf_r+0x2a>
 8009b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b06:	b01d      	add	sp, #116	; 0x74
 8009b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0c:	ab03      	add	r3, sp, #12
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	4622      	mov	r2, r4
 8009b12:	4b07      	ldr	r3, [pc, #28]	; (8009b30 <_svfiprintf_r+0x1ec>)
 8009b14:	a904      	add	r1, sp, #16
 8009b16:	4640      	mov	r0, r8
 8009b18:	f000 f882 	bl	8009c20 <_printf_i>
 8009b1c:	e7ea      	b.n	8009af4 <_svfiprintf_r+0x1b0>
 8009b1e:	bf00      	nop
 8009b20:	0800a0a2 	.word	0x0800a0a2
 8009b24:	0800a0a8 	.word	0x0800a0a8
 8009b28:	0800a0ac 	.word	0x0800a0ac
 8009b2c:	00000000 	.word	0x00000000
 8009b30:	08009891 	.word	0x08009891

08009b34 <_printf_common>:
 8009b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b38:	4691      	mov	r9, r2
 8009b3a:	461f      	mov	r7, r3
 8009b3c:	688a      	ldr	r2, [r1, #8]
 8009b3e:	690b      	ldr	r3, [r1, #16]
 8009b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b44:	4293      	cmp	r3, r2
 8009b46:	bfb8      	it	lt
 8009b48:	4613      	movlt	r3, r2
 8009b4a:	f8c9 3000 	str.w	r3, [r9]
 8009b4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b52:	4606      	mov	r6, r0
 8009b54:	460c      	mov	r4, r1
 8009b56:	b112      	cbz	r2, 8009b5e <_printf_common+0x2a>
 8009b58:	3301      	adds	r3, #1
 8009b5a:	f8c9 3000 	str.w	r3, [r9]
 8009b5e:	6823      	ldr	r3, [r4, #0]
 8009b60:	0699      	lsls	r1, r3, #26
 8009b62:	bf42      	ittt	mi
 8009b64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009b68:	3302      	addmi	r3, #2
 8009b6a:	f8c9 3000 	strmi.w	r3, [r9]
 8009b6e:	6825      	ldr	r5, [r4, #0]
 8009b70:	f015 0506 	ands.w	r5, r5, #6
 8009b74:	d107      	bne.n	8009b86 <_printf_common+0x52>
 8009b76:	f104 0a19 	add.w	sl, r4, #25
 8009b7a:	68e3      	ldr	r3, [r4, #12]
 8009b7c:	f8d9 2000 	ldr.w	r2, [r9]
 8009b80:	1a9b      	subs	r3, r3, r2
 8009b82:	42ab      	cmp	r3, r5
 8009b84:	dc28      	bgt.n	8009bd8 <_printf_common+0xa4>
 8009b86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b8a:	6822      	ldr	r2, [r4, #0]
 8009b8c:	3300      	adds	r3, #0
 8009b8e:	bf18      	it	ne
 8009b90:	2301      	movne	r3, #1
 8009b92:	0692      	lsls	r2, r2, #26
 8009b94:	d42d      	bmi.n	8009bf2 <_printf_common+0xbe>
 8009b96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	4630      	mov	r0, r6
 8009b9e:	47c0      	blx	r8
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d020      	beq.n	8009be6 <_printf_common+0xb2>
 8009ba4:	6823      	ldr	r3, [r4, #0]
 8009ba6:	68e5      	ldr	r5, [r4, #12]
 8009ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8009bac:	f003 0306 	and.w	r3, r3, #6
 8009bb0:	2b04      	cmp	r3, #4
 8009bb2:	bf08      	it	eq
 8009bb4:	1aad      	subeq	r5, r5, r2
 8009bb6:	68a3      	ldr	r3, [r4, #8]
 8009bb8:	6922      	ldr	r2, [r4, #16]
 8009bba:	bf0c      	ite	eq
 8009bbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bc0:	2500      	movne	r5, #0
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	bfc4      	itt	gt
 8009bc6:	1a9b      	subgt	r3, r3, r2
 8009bc8:	18ed      	addgt	r5, r5, r3
 8009bca:	f04f 0900 	mov.w	r9, #0
 8009bce:	341a      	adds	r4, #26
 8009bd0:	454d      	cmp	r5, r9
 8009bd2:	d11a      	bne.n	8009c0a <_printf_common+0xd6>
 8009bd4:	2000      	movs	r0, #0
 8009bd6:	e008      	b.n	8009bea <_printf_common+0xb6>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	4652      	mov	r2, sl
 8009bdc:	4639      	mov	r1, r7
 8009bde:	4630      	mov	r0, r6
 8009be0:	47c0      	blx	r8
 8009be2:	3001      	adds	r0, #1
 8009be4:	d103      	bne.n	8009bee <_printf_common+0xba>
 8009be6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bee:	3501      	adds	r5, #1
 8009bf0:	e7c3      	b.n	8009b7a <_printf_common+0x46>
 8009bf2:	18e1      	adds	r1, r4, r3
 8009bf4:	1c5a      	adds	r2, r3, #1
 8009bf6:	2030      	movs	r0, #48	; 0x30
 8009bf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bfc:	4422      	add	r2, r4
 8009bfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c06:	3302      	adds	r3, #2
 8009c08:	e7c5      	b.n	8009b96 <_printf_common+0x62>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4622      	mov	r2, r4
 8009c0e:	4639      	mov	r1, r7
 8009c10:	4630      	mov	r0, r6
 8009c12:	47c0      	blx	r8
 8009c14:	3001      	adds	r0, #1
 8009c16:	d0e6      	beq.n	8009be6 <_printf_common+0xb2>
 8009c18:	f109 0901 	add.w	r9, r9, #1
 8009c1c:	e7d8      	b.n	8009bd0 <_printf_common+0x9c>
	...

08009c20 <_printf_i>:
 8009c20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009c28:	460c      	mov	r4, r1
 8009c2a:	7e09      	ldrb	r1, [r1, #24]
 8009c2c:	b085      	sub	sp, #20
 8009c2e:	296e      	cmp	r1, #110	; 0x6e
 8009c30:	4617      	mov	r7, r2
 8009c32:	4606      	mov	r6, r0
 8009c34:	4698      	mov	r8, r3
 8009c36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c38:	f000 80b3 	beq.w	8009da2 <_printf_i+0x182>
 8009c3c:	d822      	bhi.n	8009c84 <_printf_i+0x64>
 8009c3e:	2963      	cmp	r1, #99	; 0x63
 8009c40:	d036      	beq.n	8009cb0 <_printf_i+0x90>
 8009c42:	d80a      	bhi.n	8009c5a <_printf_i+0x3a>
 8009c44:	2900      	cmp	r1, #0
 8009c46:	f000 80b9 	beq.w	8009dbc <_printf_i+0x19c>
 8009c4a:	2958      	cmp	r1, #88	; 0x58
 8009c4c:	f000 8083 	beq.w	8009d56 <_printf_i+0x136>
 8009c50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009c58:	e032      	b.n	8009cc0 <_printf_i+0xa0>
 8009c5a:	2964      	cmp	r1, #100	; 0x64
 8009c5c:	d001      	beq.n	8009c62 <_printf_i+0x42>
 8009c5e:	2969      	cmp	r1, #105	; 0x69
 8009c60:	d1f6      	bne.n	8009c50 <_printf_i+0x30>
 8009c62:	6820      	ldr	r0, [r4, #0]
 8009c64:	6813      	ldr	r3, [r2, #0]
 8009c66:	0605      	lsls	r5, r0, #24
 8009c68:	f103 0104 	add.w	r1, r3, #4
 8009c6c:	d52a      	bpl.n	8009cc4 <_printf_i+0xa4>
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6011      	str	r1, [r2, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	da03      	bge.n	8009c7e <_printf_i+0x5e>
 8009c76:	222d      	movs	r2, #45	; 0x2d
 8009c78:	425b      	negs	r3, r3
 8009c7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c7e:	486f      	ldr	r0, [pc, #444]	; (8009e3c <_printf_i+0x21c>)
 8009c80:	220a      	movs	r2, #10
 8009c82:	e039      	b.n	8009cf8 <_printf_i+0xd8>
 8009c84:	2973      	cmp	r1, #115	; 0x73
 8009c86:	f000 809d 	beq.w	8009dc4 <_printf_i+0x1a4>
 8009c8a:	d808      	bhi.n	8009c9e <_printf_i+0x7e>
 8009c8c:	296f      	cmp	r1, #111	; 0x6f
 8009c8e:	d020      	beq.n	8009cd2 <_printf_i+0xb2>
 8009c90:	2970      	cmp	r1, #112	; 0x70
 8009c92:	d1dd      	bne.n	8009c50 <_printf_i+0x30>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	f043 0320 	orr.w	r3, r3, #32
 8009c9a:	6023      	str	r3, [r4, #0]
 8009c9c:	e003      	b.n	8009ca6 <_printf_i+0x86>
 8009c9e:	2975      	cmp	r1, #117	; 0x75
 8009ca0:	d017      	beq.n	8009cd2 <_printf_i+0xb2>
 8009ca2:	2978      	cmp	r1, #120	; 0x78
 8009ca4:	d1d4      	bne.n	8009c50 <_printf_i+0x30>
 8009ca6:	2378      	movs	r3, #120	; 0x78
 8009ca8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cac:	4864      	ldr	r0, [pc, #400]	; (8009e40 <_printf_i+0x220>)
 8009cae:	e055      	b.n	8009d5c <_printf_i+0x13c>
 8009cb0:	6813      	ldr	r3, [r2, #0]
 8009cb2:	1d19      	adds	r1, r3, #4
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	6011      	str	r1, [r2, #0]
 8009cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e08c      	b.n	8009dde <_printf_i+0x1be>
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6011      	str	r1, [r2, #0]
 8009cc8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ccc:	bf18      	it	ne
 8009cce:	b21b      	sxthne	r3, r3
 8009cd0:	e7cf      	b.n	8009c72 <_printf_i+0x52>
 8009cd2:	6813      	ldr	r3, [r2, #0]
 8009cd4:	6825      	ldr	r5, [r4, #0]
 8009cd6:	1d18      	adds	r0, r3, #4
 8009cd8:	6010      	str	r0, [r2, #0]
 8009cda:	0628      	lsls	r0, r5, #24
 8009cdc:	d501      	bpl.n	8009ce2 <_printf_i+0xc2>
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	e002      	b.n	8009ce8 <_printf_i+0xc8>
 8009ce2:	0668      	lsls	r0, r5, #25
 8009ce4:	d5fb      	bpl.n	8009cde <_printf_i+0xbe>
 8009ce6:	881b      	ldrh	r3, [r3, #0]
 8009ce8:	4854      	ldr	r0, [pc, #336]	; (8009e3c <_printf_i+0x21c>)
 8009cea:	296f      	cmp	r1, #111	; 0x6f
 8009cec:	bf14      	ite	ne
 8009cee:	220a      	movne	r2, #10
 8009cf0:	2208      	moveq	r2, #8
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009cf8:	6865      	ldr	r5, [r4, #4]
 8009cfa:	60a5      	str	r5, [r4, #8]
 8009cfc:	2d00      	cmp	r5, #0
 8009cfe:	f2c0 8095 	blt.w	8009e2c <_printf_i+0x20c>
 8009d02:	6821      	ldr	r1, [r4, #0]
 8009d04:	f021 0104 	bic.w	r1, r1, #4
 8009d08:	6021      	str	r1, [r4, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d13d      	bne.n	8009d8a <_printf_i+0x16a>
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	f040 808e 	bne.w	8009e30 <_printf_i+0x210>
 8009d14:	4665      	mov	r5, ip
 8009d16:	2a08      	cmp	r2, #8
 8009d18:	d10b      	bne.n	8009d32 <_printf_i+0x112>
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	07db      	lsls	r3, r3, #31
 8009d1e:	d508      	bpl.n	8009d32 <_printf_i+0x112>
 8009d20:	6923      	ldr	r3, [r4, #16]
 8009d22:	6862      	ldr	r2, [r4, #4]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	bfde      	ittt	le
 8009d28:	2330      	movle	r3, #48	; 0x30
 8009d2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d32:	ebac 0305 	sub.w	r3, ip, r5
 8009d36:	6123      	str	r3, [r4, #16]
 8009d38:	f8cd 8000 	str.w	r8, [sp]
 8009d3c:	463b      	mov	r3, r7
 8009d3e:	aa03      	add	r2, sp, #12
 8009d40:	4621      	mov	r1, r4
 8009d42:	4630      	mov	r0, r6
 8009d44:	f7ff fef6 	bl	8009b34 <_printf_common>
 8009d48:	3001      	adds	r0, #1
 8009d4a:	d14d      	bne.n	8009de8 <_printf_i+0x1c8>
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	b005      	add	sp, #20
 8009d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009d56:	4839      	ldr	r0, [pc, #228]	; (8009e3c <_printf_i+0x21c>)
 8009d58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009d5c:	6813      	ldr	r3, [r2, #0]
 8009d5e:	6821      	ldr	r1, [r4, #0]
 8009d60:	1d1d      	adds	r5, r3, #4
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	6015      	str	r5, [r2, #0]
 8009d66:	060a      	lsls	r2, r1, #24
 8009d68:	d50b      	bpl.n	8009d82 <_printf_i+0x162>
 8009d6a:	07ca      	lsls	r2, r1, #31
 8009d6c:	bf44      	itt	mi
 8009d6e:	f041 0120 	orrmi.w	r1, r1, #32
 8009d72:	6021      	strmi	r1, [r4, #0]
 8009d74:	b91b      	cbnz	r3, 8009d7e <_printf_i+0x15e>
 8009d76:	6822      	ldr	r2, [r4, #0]
 8009d78:	f022 0220 	bic.w	r2, r2, #32
 8009d7c:	6022      	str	r2, [r4, #0]
 8009d7e:	2210      	movs	r2, #16
 8009d80:	e7b7      	b.n	8009cf2 <_printf_i+0xd2>
 8009d82:	064d      	lsls	r5, r1, #25
 8009d84:	bf48      	it	mi
 8009d86:	b29b      	uxthmi	r3, r3
 8009d88:	e7ef      	b.n	8009d6a <_printf_i+0x14a>
 8009d8a:	4665      	mov	r5, ip
 8009d8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d90:	fb02 3311 	mls	r3, r2, r1, r3
 8009d94:	5cc3      	ldrb	r3, [r0, r3]
 8009d96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	2900      	cmp	r1, #0
 8009d9e:	d1f5      	bne.n	8009d8c <_printf_i+0x16c>
 8009da0:	e7b9      	b.n	8009d16 <_printf_i+0xf6>
 8009da2:	6813      	ldr	r3, [r2, #0]
 8009da4:	6825      	ldr	r5, [r4, #0]
 8009da6:	6961      	ldr	r1, [r4, #20]
 8009da8:	1d18      	adds	r0, r3, #4
 8009daa:	6010      	str	r0, [r2, #0]
 8009dac:	0628      	lsls	r0, r5, #24
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	d501      	bpl.n	8009db6 <_printf_i+0x196>
 8009db2:	6019      	str	r1, [r3, #0]
 8009db4:	e002      	b.n	8009dbc <_printf_i+0x19c>
 8009db6:	066a      	lsls	r2, r5, #25
 8009db8:	d5fb      	bpl.n	8009db2 <_printf_i+0x192>
 8009dba:	8019      	strh	r1, [r3, #0]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	6123      	str	r3, [r4, #16]
 8009dc0:	4665      	mov	r5, ip
 8009dc2:	e7b9      	b.n	8009d38 <_printf_i+0x118>
 8009dc4:	6813      	ldr	r3, [r2, #0]
 8009dc6:	1d19      	adds	r1, r3, #4
 8009dc8:	6011      	str	r1, [r2, #0]
 8009dca:	681d      	ldr	r5, [r3, #0]
 8009dcc:	6862      	ldr	r2, [r4, #4]
 8009dce:	2100      	movs	r1, #0
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f7f6 fa4d 	bl	8000270 <memchr>
 8009dd6:	b108      	cbz	r0, 8009ddc <_printf_i+0x1bc>
 8009dd8:	1b40      	subs	r0, r0, r5
 8009dda:	6060      	str	r0, [r4, #4]
 8009ddc:	6863      	ldr	r3, [r4, #4]
 8009dde:	6123      	str	r3, [r4, #16]
 8009de0:	2300      	movs	r3, #0
 8009de2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009de6:	e7a7      	b.n	8009d38 <_printf_i+0x118>
 8009de8:	6923      	ldr	r3, [r4, #16]
 8009dea:	462a      	mov	r2, r5
 8009dec:	4639      	mov	r1, r7
 8009dee:	4630      	mov	r0, r6
 8009df0:	47c0      	blx	r8
 8009df2:	3001      	adds	r0, #1
 8009df4:	d0aa      	beq.n	8009d4c <_printf_i+0x12c>
 8009df6:	6823      	ldr	r3, [r4, #0]
 8009df8:	079b      	lsls	r3, r3, #30
 8009dfa:	d413      	bmi.n	8009e24 <_printf_i+0x204>
 8009dfc:	68e0      	ldr	r0, [r4, #12]
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	4298      	cmp	r0, r3
 8009e02:	bfb8      	it	lt
 8009e04:	4618      	movlt	r0, r3
 8009e06:	e7a3      	b.n	8009d50 <_printf_i+0x130>
 8009e08:	2301      	movs	r3, #1
 8009e0a:	464a      	mov	r2, r9
 8009e0c:	4639      	mov	r1, r7
 8009e0e:	4630      	mov	r0, r6
 8009e10:	47c0      	blx	r8
 8009e12:	3001      	adds	r0, #1
 8009e14:	d09a      	beq.n	8009d4c <_printf_i+0x12c>
 8009e16:	3501      	adds	r5, #1
 8009e18:	68e3      	ldr	r3, [r4, #12]
 8009e1a:	9a03      	ldr	r2, [sp, #12]
 8009e1c:	1a9b      	subs	r3, r3, r2
 8009e1e:	42ab      	cmp	r3, r5
 8009e20:	dcf2      	bgt.n	8009e08 <_printf_i+0x1e8>
 8009e22:	e7eb      	b.n	8009dfc <_printf_i+0x1dc>
 8009e24:	2500      	movs	r5, #0
 8009e26:	f104 0919 	add.w	r9, r4, #25
 8009e2a:	e7f5      	b.n	8009e18 <_printf_i+0x1f8>
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1ac      	bne.n	8009d8a <_printf_i+0x16a>
 8009e30:	7803      	ldrb	r3, [r0, #0]
 8009e32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e3a:	e76c      	b.n	8009d16 <_printf_i+0xf6>
 8009e3c:	0800a0b3 	.word	0x0800a0b3
 8009e40:	0800a0c4 	.word	0x0800a0c4

08009e44 <_sbrk_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4c06      	ldr	r4, [pc, #24]	; (8009e60 <_sbrk_r+0x1c>)
 8009e48:	2300      	movs	r3, #0
 8009e4a:	4605      	mov	r5, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	6023      	str	r3, [r4, #0]
 8009e50:	f7f9 f90a 	bl	8003068 <_sbrk>
 8009e54:	1c43      	adds	r3, r0, #1
 8009e56:	d102      	bne.n	8009e5e <_sbrk_r+0x1a>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	b103      	cbz	r3, 8009e5e <_sbrk_r+0x1a>
 8009e5c:	602b      	str	r3, [r5, #0]
 8009e5e:	bd38      	pop	{r3, r4, r5, pc}
 8009e60:	2005aa14 	.word	0x2005aa14

08009e64 <__ascii_wctomb>:
 8009e64:	b149      	cbz	r1, 8009e7a <__ascii_wctomb+0x16>
 8009e66:	2aff      	cmp	r2, #255	; 0xff
 8009e68:	bf85      	ittet	hi
 8009e6a:	238a      	movhi	r3, #138	; 0x8a
 8009e6c:	6003      	strhi	r3, [r0, #0]
 8009e6e:	700a      	strbls	r2, [r1, #0]
 8009e70:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e74:	bf98      	it	ls
 8009e76:	2001      	movls	r0, #1
 8009e78:	4770      	bx	lr
 8009e7a:	4608      	mov	r0, r1
 8009e7c:	4770      	bx	lr

08009e7e <memcpy>:
 8009e7e:	b510      	push	{r4, lr}
 8009e80:	1e43      	subs	r3, r0, #1
 8009e82:	440a      	add	r2, r1
 8009e84:	4291      	cmp	r1, r2
 8009e86:	d100      	bne.n	8009e8a <memcpy+0xc>
 8009e88:	bd10      	pop	{r4, pc}
 8009e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e92:	e7f7      	b.n	8009e84 <memcpy+0x6>

08009e94 <memmove>:
 8009e94:	4288      	cmp	r0, r1
 8009e96:	b510      	push	{r4, lr}
 8009e98:	eb01 0302 	add.w	r3, r1, r2
 8009e9c:	d807      	bhi.n	8009eae <memmove+0x1a>
 8009e9e:	1e42      	subs	r2, r0, #1
 8009ea0:	4299      	cmp	r1, r3
 8009ea2:	d00a      	beq.n	8009eba <memmove+0x26>
 8009ea4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ea8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009eac:	e7f8      	b.n	8009ea0 <memmove+0xc>
 8009eae:	4283      	cmp	r3, r0
 8009eb0:	d9f5      	bls.n	8009e9e <memmove+0xa>
 8009eb2:	1881      	adds	r1, r0, r2
 8009eb4:	1ad2      	subs	r2, r2, r3
 8009eb6:	42d3      	cmn	r3, r2
 8009eb8:	d100      	bne.n	8009ebc <memmove+0x28>
 8009eba:	bd10      	pop	{r4, pc}
 8009ebc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ec0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009ec4:	e7f7      	b.n	8009eb6 <memmove+0x22>

08009ec6 <__malloc_lock>:
 8009ec6:	4770      	bx	lr

08009ec8 <__malloc_unlock>:
 8009ec8:	4770      	bx	lr

08009eca <_realloc_r>:
 8009eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ecc:	4607      	mov	r7, r0
 8009ece:	4614      	mov	r4, r2
 8009ed0:	460e      	mov	r6, r1
 8009ed2:	b921      	cbnz	r1, 8009ede <_realloc_r+0x14>
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009eda:	f7ff bc7f 	b.w	80097dc <_malloc_r>
 8009ede:	b922      	cbnz	r2, 8009eea <_realloc_r+0x20>
 8009ee0:	f7ff fc2e 	bl	8009740 <_free_r>
 8009ee4:	4625      	mov	r5, r4
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eea:	f000 f814 	bl	8009f16 <_malloc_usable_size_r>
 8009eee:	42a0      	cmp	r0, r4
 8009ef0:	d20f      	bcs.n	8009f12 <_realloc_r+0x48>
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	4638      	mov	r0, r7
 8009ef6:	f7ff fc71 	bl	80097dc <_malloc_r>
 8009efa:	4605      	mov	r5, r0
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d0f2      	beq.n	8009ee6 <_realloc_r+0x1c>
 8009f00:	4631      	mov	r1, r6
 8009f02:	4622      	mov	r2, r4
 8009f04:	f7ff ffbb 	bl	8009e7e <memcpy>
 8009f08:	4631      	mov	r1, r6
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	f7ff fc18 	bl	8009740 <_free_r>
 8009f10:	e7e9      	b.n	8009ee6 <_realloc_r+0x1c>
 8009f12:	4635      	mov	r5, r6
 8009f14:	e7e7      	b.n	8009ee6 <_realloc_r+0x1c>

08009f16 <_malloc_usable_size_r>:
 8009f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f1a:	1f18      	subs	r0, r3, #4
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	bfbc      	itt	lt
 8009f20:	580b      	ldrlt	r3, [r1, r0]
 8009f22:	18c0      	addlt	r0, r0, r3
 8009f24:	4770      	bx	lr
	...

08009f28 <_init>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	bf00      	nop
 8009f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2e:	bc08      	pop	{r3}
 8009f30:	469e      	mov	lr, r3
 8009f32:	4770      	bx	lr

08009f34 <_fini>:
 8009f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f36:	bf00      	nop
 8009f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3a:	bc08      	pop	{r3}
 8009f3c:	469e      	mov	lr, r3
 8009f3e:	4770      	bx	lr
