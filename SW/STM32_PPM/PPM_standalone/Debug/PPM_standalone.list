
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009cd4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08009ed4  08009ed4  00019ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a170  0800a170  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a170  0800a170  0001a170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a178  0800a178  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a178  0800a178  0001a178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a17c  0800a17c  0001a17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a180  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005a834  200001e4  0800a364  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2005aa18  0800a364  0002aa18  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001595b  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002897  00000000  00000000  00035b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001528  00000000  00000000  00038408  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013e0  00000000  00000000  00039930  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029847  00000000  00000000  0003ad10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fab6  00000000  00000000  00064557  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010396c  00000000  00000000  0007400d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00177979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f70  00000000  00000000  001779f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009ebc 	.word	0x08009ebc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	08009ebc 	.word	0x08009ebc

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000616:	f002 fd5c 	bl	80030d2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800061a:	f000 f8d5 	bl	80007c8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800061e:	f000 ff1f 	bl	8001460 <MX_GPIO_Init>
	MX_DMA_Init();
 8000622:	f000 fee3 	bl	80013ec <MX_DMA_Init>
	MX_ADC1_Init();
 8000626:	f000 f971 	bl	800090c <MX_ADC1_Init>
	MX_SPI1_Init();
 800062a:	f000 fa41 	bl	8000ab0 <MX_SPI1_Init>
	MX_TIM1_Init();
 800062e:	f000 fab7 	bl	8000ba0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8000632:	f000 fb75 	bl	8000d20 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000636:	f000 fbc7 	bl	8000dc8 <MX_TIM3_Init>
	MX_TIM4_Init();
 800063a:	f000 fc3d 	bl	8000eb8 <MX_TIM4_Init>
	MX_TIM8_Init();
 800063e:	f000 fd19 	bl	8001074 <MX_TIM8_Init>
	MX_UART5_Init();
 8000642:	f000 fde3 	bl	800120c <MX_UART5_Init>
	MX_USART1_UART_Init();
 8000646:	f000 fe41 	bl	80012cc <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 800064a:	f000 fe6f 	bl	800132c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800064e:	f000 fe9d 	bl	800138c <MX_USART3_UART_Init>
	MX_I2C1_Init();
 8000652:	f000 f9ad 	bl	80009b0 <MX_I2C1_Init>
	MX_I2C3_Init();
 8000656:	f000 f9eb 	bl	8000a30 <MX_I2C3_Init>
	MX_SPI4_Init();
 800065a:	f000 fa63 	bl	8000b24 <MX_SPI4_Init>
	MX_TIM5_Init();
 800065e:	f000 fc85 	bl	8000f6c <MX_TIM5_Init>
	MX_UART7_Init();
 8000662:	f000 fe03 	bl	800126c <MX_UART7_Init>
	MX_TIM6_Init();
 8000666:	f000 fccf 	bl	8001008 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 800066a:	2201      	movs	r2, #1
 800066c:	4919      	ldr	r1, [pc, #100]	; (80006d4 <main+0xc4>)
 800066e:	481a      	ldr	r0, [pc, #104]	; (80006d8 <main+0xc8>)
 8000670:	f007 ffb8 	bl	80085e4 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim5);
 8000674:	4819      	ldr	r0, [pc, #100]	; (80006dc <main+0xcc>)
 8000676:	f006 f81d 	bl	80066b4 <HAL_TIM_Base_Start_IT>
	char msg_buffers[25];
	uint16_t index = 0;
 800067a:	2300      	movs	r3, #0
 800067c:	83fb      	strh	r3, [r7, #30]
	switchingCircuitIdle();
 800067e:	f001 f8e5 	bl	800184c <switchingCircuitIdle>
	// visualise
	set_LED1(0, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2000      	movs	r0, #0
 8000688:	f001 f886 	bl	8001798 <set_LED1>
	HAL_Delay(1000);
 800068c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000690:	f002 fd7c 	bl	800318c <HAL_Delay>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		parseText();
 8000694:	f001 fb62 	bl	8001d5c <parseText>

		// if new measurement technique was updated - change state regarding to the update
		if (stateCanBeUpdated()) {
 8000698:	f000 f822 	bl	80006e0 <stateCanBeUpdated>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <main+0x96>
			updateState();
 80006a2:	f001 ff17 	bl	80024d4 <updateState>
		}
		//
		if (measurementCanRun()) {
 80006a6:	f000 f843 	bl	8000730 <measurementCanRun>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d002      	beq.n	80006b6 <main+0xa6>
			runMeasurementMethod();
 80006b0:	f000 ff68 	bl	8001584 <runMeasurementMethod>
 80006b4:	e7ee      	b.n	8000694 <main+0x84>
		}
		// idle state - if no method is active and there are no data to be sent
		else if (stateIsIdle()) {
 80006b6:	f000 f863 	bl	8000780 <stateIsIdle>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d005      	beq.n	80006cc <main+0xbc>
			set_LED1(0, 0, 0);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2100      	movs	r1, #0
 80006c4:	2000      	movs	r0, #0
 80006c6:	f001 f867 	bl	8001798 <set_LED1>
 80006ca:	e7e3      	b.n	8000694 <main+0x84>
		} else {
			sendMeasuredData();
 80006cc:	f001 fd90 	bl	80021f0 <sendMeasuredData>
	while (1) {
 80006d0:	e7e0      	b.n	8000694 <main+0x84>
 80006d2:	bf00      	nop
 80006d4:	20004310 	.word	0x20004310
 80006d8:	20004244 	.word	0x20004244
 80006dc:	2002f424 	.word	0x2002f424

080006e0 <stateCanBeUpdated>:
	}

	/* USER CODE END 3 */
}

int stateCanBeUpdated() {
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
	return (state.measureTechniqueUpdated && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 80006e4:	4b11      	ldr	r3, [pc, #68]	; (800072c <stateCanBeUpdated+0x4c>)
 80006e6:	7c1b      	ldrb	r3, [r3, #16]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d019      	beq.n	8000720 <stateCanBeUpdated+0x40>
 80006ec:	4b0f      	ldr	r3, [pc, #60]	; (800072c <stateCanBeUpdated+0x4c>)
 80006ee:	799b      	ldrb	r3, [r3, #6]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d115      	bne.n	8000720 <stateCanBeUpdated+0x40>
 80006f4:	4b0d      	ldr	r3, [pc, #52]	; (800072c <stateCanBeUpdated+0x4c>)
 80006f6:	79db      	ldrb	r3, [r3, #7]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d111      	bne.n	8000720 <stateCanBeUpdated+0x40>
 80006fc:	4b0b      	ldr	r3, [pc, #44]	; (800072c <stateCanBeUpdated+0x4c>)
 80006fe:	7a1b      	ldrb	r3, [r3, #8]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10d      	bne.n	8000720 <stateCanBeUpdated+0x40>
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <stateCanBeUpdated+0x4c>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d109      	bne.n	8000720 <stateCanBeUpdated+0x40>
 800070c:	4b07      	ldr	r3, [pc, #28]	; (800072c <stateCanBeUpdated+0x4c>)
 800070e:	785b      	ldrb	r3, [r3, #1]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d105      	bne.n	8000720 <stateCanBeUpdated+0x40>
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <stateCanBeUpdated+0x4c>)
 8000716:	789b      	ldrb	r3, [r3, #2]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d101      	bne.n	8000720 <stateCanBeUpdated+0x40>
 800071c:	2301      	movs	r3, #1
 800071e:	e000      	b.n	8000722 <stateCanBeUpdated+0x42>
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	2002f4a4 	.word	0x2002f4a4

08000730 <measurementCanRun>:

int measurementCanRun() {
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
	return (state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <measurementCanRun+0x4c>)
 8000736:	7c5b      	ldrb	r3, [r3, #17]
			&& !state.compReadyToSend);
 8000738:	2b00      	cmp	r3, #0
 800073a:	d019      	beq.n	8000770 <measurementCanRun+0x40>
	return (state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <measurementCanRun+0x4c>)
 800073e:	799b      	ldrb	r3, [r3, #6]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d115      	bne.n	8000770 <measurementCanRun+0x40>
 8000744:	4b0d      	ldr	r3, [pc, #52]	; (800077c <measurementCanRun+0x4c>)
 8000746:	79db      	ldrb	r3, [r3, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d111      	bne.n	8000770 <measurementCanRun+0x40>
 800074c:	4b0b      	ldr	r3, [pc, #44]	; (800077c <measurementCanRun+0x4c>)
 800074e:	7a1b      	ldrb	r3, [r3, #8]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d10d      	bne.n	8000770 <measurementCanRun+0x40>
 8000754:	4b09      	ldr	r3, [pc, #36]	; (800077c <measurementCanRun+0x4c>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d109      	bne.n	8000770 <measurementCanRun+0x40>
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <measurementCanRun+0x4c>)
 800075e:	785b      	ldrb	r3, [r3, #1]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d105      	bne.n	8000770 <measurementCanRun+0x40>
			&& !state.compReadyToSend);
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <measurementCanRun+0x4c>)
 8000766:	789b      	ldrb	r3, [r3, #2]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d101      	bne.n	8000770 <measurementCanRun+0x40>
 800076c:	2301      	movs	r3, #1
 800076e:	e000      	b.n	8000772 <measurementCanRun+0x42>
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	2002f4a4 	.word	0x2002f4a4

08000780 <stateIsIdle>:

int stateIsIdle() {
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
	return (!state.extAdcActiveState && !state.intAdcActiveState && !state.compActiveState && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <stateIsIdle+0x44>)
 8000786:	78db      	ldrb	r3, [r3, #3]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d115      	bne.n	80007b8 <stateIsIdle+0x38>
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <stateIsIdle+0x44>)
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d111      	bne.n	80007b8 <stateIsIdle+0x38>
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <stateIsIdle+0x44>)
 8000796:	795b      	ldrb	r3, [r3, #5]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d10d      	bne.n	80007b8 <stateIsIdle+0x38>
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <stateIsIdle+0x44>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d109      	bne.n	80007b8 <stateIsIdle+0x38>
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <stateIsIdle+0x44>)
 80007a6:	785b      	ldrb	r3, [r3, #1]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d105      	bne.n	80007b8 <stateIsIdle+0x38>
 80007ac:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <stateIsIdle+0x44>)
 80007ae:	789b      	ldrb	r3, [r3, #2]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d101      	bne.n	80007b8 <stateIsIdle+0x38>
 80007b4:	2301      	movs	r3, #1
 80007b6:	e000      	b.n	80007ba <stateIsIdle+0x3a>
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	2002f4a4 	.word	0x2002f4a4

080007c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b0b8      	sub	sp, #224	; 0xe0
 80007cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007d2:	2234      	movs	r2, #52	; 0x34
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f008 fe3a 	bl	8009450 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	2290      	movs	r2, #144	; 0x90
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f008 fe2b 	bl	8009450 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80007fa:	f004 f88b 	bl	8004914 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b40      	ldr	r3, [pc, #256]	; (8000900 <SystemClock_Config+0x138>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a3f      	ldr	r2, [pc, #252]	; (8000900 <SystemClock_Config+0x138>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b3d      	ldr	r3, [pc, #244]	; (8000900 <SystemClock_Config+0x138>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000816:	4b3b      	ldr	r3, [pc, #236]	; (8000904 <SystemClock_Config+0x13c>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a3a      	ldr	r2, [pc, #232]	; (8000904 <SystemClock_Config+0x13c>)
 800081c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	4b38      	ldr	r3, [pc, #224]	; (8000904 <SystemClock_Config+0x13c>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800082e:	2301      	movs	r3, #1
 8000830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000834:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000846:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 5;
 800084a:	2305      	movs	r3, #5
 800084c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000850:	23d8      	movs	r3, #216	; 0xd8
 8000852:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000856:	2302      	movs	r3, #2
 8000858:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800085c:	2302      	movs	r3, #2
 800085e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000862:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000866:	4618      	mov	r0, r3
 8000868:	f004 f8b4 	bl	80049d4 <HAL_RCC_OscConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xae>
		Error_Handler();
 8000872:	f001 fe4f 	bl	8002514 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8000876:	f004 f85d 	bl	8004934 <HAL_PWREx_EnableOverDrive>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xbc>
		Error_Handler();
 8000880:	f001 fe48 	bl	8002514 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000884:	230f      	movs	r3, #15
 8000886:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000896:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800089a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800089e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80008a6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008aa:	2107      	movs	r1, #7
 80008ac:	4618      	mov	r0, r3
 80008ae:	f004 fb3f 	bl	8004f30 <HAL_RCC_ClockConfig>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <SystemClock_Config+0xf4>
		Error_Handler();
 80008b8:	f001 fe2c 	bl	8002514 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART5 | RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_I2C1
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <SystemClock_Config+0x140>)
 80008be:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_I2C3;
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008c0:	2300      	movs	r3, #0
 80008c2:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008c8:	2300      	movs	r3, #0
 80008ca:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	65fb      	str	r3, [r7, #92]	; 0x5c
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80008d8:	2300      	movs	r3, #0
 80008da:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80008dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4618      	mov	r0, r3
 80008e8:	f004 fcf4 	bl	80052d4 <HAL_RCCEx_PeriphCLKConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0x12e>
		Error_Handler();
 80008f2:	f001 fe0f 	bl	8002514 <Error_Handler>
	}
}
 80008f6:	bf00      	nop
 80008f8:	37e0      	adds	r7, #224	; 0xe0
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000
 8000908:	000155d0 	.word	0x000155d0

0800090c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000912:	463b      	mov	r3, r7
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800091e:	4b22      	ldr	r3, [pc, #136]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000920:	4a22      	ldr	r2, [pc, #136]	; (80009ac <MX_ADC1_Init+0xa0>)
 8000922:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000924:	4b20      	ldr	r3, [pc, #128]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000926:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800092a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800092c:	4b1e      	ldr	r3, [pc, #120]	; (80009a8 <MX_ADC1_Init+0x9c>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000932:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_ADC1_Init+0x9c>)
 800093a:	2200      	movs	r2, #0
 800093c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000940:	2200      	movs	r2, #0
 8000942:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000946:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000948:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800094e:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000950:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000954:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_ADC1_Init+0x9c>)
 800095e:	2201      	movs	r2, #1
 8000960:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000964:	2200      	movs	r2, #0
 8000966:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_ADC1_Init+0x9c>)
 800096c:	2201      	movs	r2, #1
 800096e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000970:	480d      	ldr	r0, [pc, #52]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000972:	f002 fc2d 	bl	80031d0 <HAL_ADC_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_ADC1_Init+0x74>
		Error_Handler();
 800097c:	f001 fdca 	bl	8002514 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000980:	2300      	movs	r3, #0
 8000982:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000984:	2301      	movs	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000988:	2301      	movs	r3, #1
 800098a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800098c:	463b      	mov	r3, r7
 800098e:	4619      	mov	r1, r3
 8000990:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_ADC1_Init+0x9c>)
 8000992:	f002 fd63 	bl	800345c <HAL_ADC_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_ADC1_Init+0x94>
		Error_Handler();
 800099c:	f001 fdba 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	2002f538 	.word	0x2002f538
 80009ac:	40012000 	.word	0x40012000

080009b0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009b6:	4a1c      	ldr	r2, [pc, #112]	; (8000a28 <MX_I2C1_Init+0x78>)
 80009b8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20404768;
 80009ba:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009bc:	4a1b      	ldr	r2, [pc, #108]	; (8000a2c <MX_I2C1_Init+0x7c>)
 80009be:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80009c0:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009d8:	4b12      	ldr	r3, [pc, #72]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80009ea:	480e      	ldr	r0, [pc, #56]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009ec:	f003 fe6a 	bl	80046c4 <HAL_I2C_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_I2C1_Init+0x4a>
		Error_Handler();
 80009f6:	f001 fd8d 	bl	8002514 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80009fa:	2100      	movs	r1, #0
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <MX_I2C1_Init+0x74>)
 80009fe:	f003 fef1 	bl	80047e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_I2C1_Init+0x5c>
		Error_Handler();
 8000a08:	f001 fd84 	bl	8002514 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_I2C1_Init+0x74>)
 8000a10:	f003 ff33 	bl	800487a <HAL_I2CEx_ConfigDigitalFilter>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000a1a:	f001 fd7b 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200042c4 	.word	0x200042c4
 8000a28:	40005400 	.word	0x40005400
 8000a2c:	20404768 	.word	0x20404768

08000a30 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a36:	4a1c      	ldr	r2, [pc, #112]	; (8000aa8 <MX_I2C3_Init+0x78>)
 8000a38:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x20404768;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a3c:	4a1b      	ldr	r2, [pc, #108]	; (8000aac <MX_I2C3_Init+0x7c>)
 8000a3e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000a6a:	480e      	ldr	r0, [pc, #56]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a6c:	f003 fe2a 	bl	80046c4 <HAL_I2C_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_I2C3_Init+0x4a>
		Error_Handler();
 8000a76:	f001 fd4d 	bl	8002514 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4809      	ldr	r0, [pc, #36]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a7e:	f003 feb1 	bl	80047e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_I2C3_Init+0x5c>
		Error_Handler();
 8000a88:	f001 fd44 	bl	8002514 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <MX_I2C3_Init+0x74>)
 8000a90:	f003 fef3 	bl	800487a <HAL_I2CEx_ConfigDigitalFilter>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_I2C3_Init+0x6e>
		Error_Handler();
 8000a9a:	f001 fd3b 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20004098 	.word	0x20004098
 8000aa8:	40005c00 	.word	0x40005c00
 8000aac:	20404768 	.word	0x20404768

08000ab0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000ab4:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000ab6:	4a1a      	ldr	r2, [pc, #104]	; (8000b20 <MX_SPI1_Init+0x70>)
 8000ab8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000aba:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000ac0:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000ac2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ac6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000aca:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8000ace:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000adc:	4b0f      	ldr	r3, [pc, #60]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8000af4:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000af6:	2207      	movs	r2, #7
 8000af8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000b06:	4805      	ldr	r0, [pc, #20]	; (8000b1c <MX_SPI1_Init+0x6c>)
 8000b08:	f005 f80a 	bl	8005b20 <HAL_SPI_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_SPI1_Init+0x66>
		Error_Handler();
 8000b12:	f001 fcff 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2002f77c 	.word	0x2002f77c
 8000b20:	40013000 	.word	0x40013000

08000b24 <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b2a:	4a1c      	ldr	r2, [pc, #112]	; (8000b9c <MX_SPI4_Init+0x78>)
 8000b2c:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b30:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b34:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b3e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b42:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b52:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000b56:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 7;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b72:	2207      	movs	r2, #7
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	631a      	str	r2, [r3, #48]	; 0x30
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b7e:	2208      	movs	r2, #8
 8000b80:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_SPI4_Init+0x74>)
 8000b84:	f004 ffcc 	bl	8005b20 <HAL_SPI_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_SPI4_Init+0x6e>
		Error_Handler();
 8000b8e:	f001 fcc1 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2002f600 	.word	0x2002f600
 8000b9c:	40013400 	.word	0x40013400

08000ba0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b09a      	sub	sp, #104	; 0x68
 8000ba4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000ba6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000bb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000bc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	222c      	movs	r2, #44	; 0x2c
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f008 fc38 	bl	8009450 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000be0:	4b4d      	ldr	r3, [pc, #308]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000be2:	4a4e      	ldr	r2, [pc, #312]	; (8000d1c <MX_TIM1_Init+0x17c>)
 8000be4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000be6:	4b4c      	ldr	r3, [pc, #304]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bec:	4b4a      	ldr	r3, [pc, #296]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4898 - 1;
 8000bf2:	4b49      	ldr	r3, [pc, #292]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000bf4:	f241 3221 	movw	r2, #4897	; 0x1321
 8000bf8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfa:	4b47      	ldr	r3, [pc, #284]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000c00:	4b45      	ldr	r3, [pc, #276]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c06:	4b44      	ldr	r3, [pc, #272]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000c0c:	4842      	ldr	r0, [pc, #264]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000c0e:	f005 fd26 	bl	800665e <HAL_TIM_Base_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0x7c>
		Error_Handler();
 8000c18:	f001 fc7c 	bl	8002514 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c20:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000c22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000c26:	4619      	mov	r1, r3
 8000c28:	483b      	ldr	r0, [pc, #236]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000c2a:	f006 fbb1 	bl	8007390 <HAL_TIM_ConfigClockSource>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_TIM1_Init+0x98>
		Error_Handler();
 8000c34:	f001 fc6e 	bl	8002514 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000c38:	4837      	ldr	r0, [pc, #220]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000c3a:	f005 fd90 	bl	800675e <HAL_TIM_PWM_Init>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8000c44:	f001 fc66 	bl	8002514 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c48:	2320      	movs	r3, #32
 8000c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8000c54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000c58:	4619      	mov	r1, r3
 8000c5a:	482f      	ldr	r0, [pc, #188]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000c5c:	f007 fab8 	bl	80081d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM1_Init+0xca>
		Error_Handler();
 8000c66:	f001 fc55 	bl	8002514 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000c6a:	2370      	movs	r3, #112	; 0x70
 8000c6c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 864 + 10;
 8000c6e:	f240 336a 	movw	r3, #874	; 0x36a
 8000c72:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c74:	2302      	movs	r3, #2
 8000c76:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000c80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c84:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000c8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4619      	mov	r1, r3
 8000c92:	4821      	ldr	r0, [pc, #132]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000c94:	f006 fa64 	bl	8007160 <HAL_TIM_PWM_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0x102>
		Error_Handler();
 8000c9e:	f001 fc39 	bl	8002514 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca2:	2360      	movs	r3, #96	; 0x60
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 3000;
 8000ca6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8000cac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000cb0:	2204      	movs	r2, #4
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4818      	ldr	r0, [pc, #96]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000cb6:	f006 fa53 	bl	8007160 <HAL_TIM_PWM_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM1_Init+0x124>
		Error_Handler();
 8000cc0:	f001 fc28 	bl	8002514 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cdc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ce6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8000cec:	2300      	movs	r3, #0
 8000cee:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4807      	ldr	r0, [pc, #28]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000cfa:	f007 faf7 	bl	80082ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM1_Init+0x168>
		Error_Handler();
 8000d04:	f001 fc06 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000d08:	4803      	ldr	r0, [pc, #12]	; (8000d18 <MX_TIM1_Init+0x178>)
 8000d0a:	f001 ff1b 	bl	8002b44 <HAL_TIM_MspPostInit>

}
 8000d0e:	bf00      	nop
 8000d10:	3768      	adds	r7, #104	; 0x68
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2002f73c 	.word	0x2002f73c
 8000d1c:	40010000 	.word	0x40010000

08000d20 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_TIM2_Init+0xa4>)
 8000d40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d44:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_TIM2_Init+0xa4>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_TIM2_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_TIM2_Init+0xa4>)
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_TIM2_Init+0xa4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_TIM2_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8000d66:	4817      	ldr	r0, [pc, #92]	; (8000dc4 <MX_TIM2_Init+0xa4>)
 8000d68:	f005 fe48 	bl	80069fc <HAL_TIM_IC_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM2_Init+0x56>
		Error_Handler();
 8000d72:	f001 fbcf 	bl	8002514 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <MX_TIM2_Init+0xa4>)
 8000d86:	f007 fa23 	bl	80081d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM2_Init+0x74>
		Error_Handler();
 8000d90:	f001 fbc0 	bl	8002514 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_TIM2_Init+0xa4>)
 8000dac:	f006 f93b 	bl	8007026 <HAL_TIM_IC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_TIM2_Init+0x9a>
		Error_Handler();
 8000db6:	f001 fbad 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	3720      	adds	r7, #32
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2002f7e0 	.word	0x2002f7e0

08000dc8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b090      	sub	sp, #64	; 0x40
 8000dcc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000dce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
 8000dda:	60da      	str	r2, [r3, #12]
 8000ddc:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000dfc:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000dfe:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <MX_TIM3_Init+0xec>)
 8000e00:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000e02:	4b2b      	ldr	r3, [pc, #172]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b29      	ldr	r3, [pc, #164]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0;
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b25      	ldr	r3, [pc, #148]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000e20:	4823      	ldr	r0, [pc, #140]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000e22:	f005 fc1c 	bl	800665e <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM3_Init+0x68>
		Error_Handler();
 8000e2c:	f001 fb72 	bl	8002514 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000e30:	481f      	ldr	r0, [pc, #124]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000e32:	f005 fc94 	bl	800675e <HAL_TIM_PWM_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM3_Init+0x78>
		Error_Handler();
 8000e3c:	f001 fb6a 	bl	8002514 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 8000e48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000e50:	f006 fb58 	bl	8007504 <HAL_TIM_SlaveConfigSynchro>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM3_Init+0x96>
		Error_Handler();
 8000e5a:	f001 fb5b 	bl	8002514 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4810      	ldr	r0, [pc, #64]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000e6e:	f007 f9af 	bl	80081d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM3_Init+0xb4>
		Error_Handler();
 8000e78:	f001 fb4c 	bl	8002514 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7c:	2360      	movs	r3, #96	; 0x60
 8000e7e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2200      	movs	r2, #0
 8000e90:	4619      	mov	r1, r3
 8000e92:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000e94:	f006 f964 	bl	8007160 <HAL_TIM_PWM_ConfigChannel>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM3_Init+0xda>
		Error_Handler();
 8000e9e:	f001 fb39 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000ea2:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <MX_TIM3_Init+0xe8>)
 8000ea4:	f001 fe4e 	bl	8002b44 <HAL_TIM_MspPostInit>

}
 8000ea8:	bf00      	nop
 8000eaa:	3740      	adds	r7, #64	; 0x40
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2002f464 	.word	0x2002f464
 8000eb4:	40000400 	.word	0x40000400

08000eb8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08a      	sub	sp, #40	; 0x28
 8000ebc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
 8000ec6:	605a      	str	r2, [r3, #4]
 8000ec8:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]
 8000eda:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000edc:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <MX_TIM4_Init+0xac>)
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <MX_TIM4_Init+0xb0>)
 8000ee0:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <MX_TIM4_Init+0xac>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <MX_TIM4_Init+0xac>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	; (8000f64 <MX_TIM4_Init+0xac>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <MX_TIM4_Init+0xac>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <MX_TIM4_Init+0xac>)
 8000efc:	2280      	movs	r2, #128	; 0x80
 8000efe:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8000f00:	4818      	ldr	r0, [pc, #96]	; (8000f64 <MX_TIM4_Init+0xac>)
 8000f02:	f005 fc2c 	bl	800675e <HAL_TIM_PWM_Init>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM4_Init+0x58>
		Error_Handler();
 8000f0c:	f001 fb02 	bl	8002514 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f10:	2320      	movs	r3, #32
 8000f12:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4811      	ldr	r0, [pc, #68]	; (8000f64 <MX_TIM4_Init+0xac>)
 8000f20:	f007 f956 	bl	80081d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM4_Init+0x76>
		Error_Handler();
 8000f2a:	f001 faf3 	bl	8002514 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2e:	2360      	movs	r3, #96	; 0x60
 8000f30:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8000f3e:	463b      	mov	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	4807      	ldr	r0, [pc, #28]	; (8000f64 <MX_TIM4_Init+0xac>)
 8000f46:	f006 f90b 	bl	8007160 <HAL_TIM_PWM_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM4_Init+0x9c>
		Error_Handler();
 8000f50:	f001 fae0 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <MX_TIM4_Init+0xac>)
 8000f56:	f001 fdf5 	bl	8002b44 <HAL_TIM_MspPostInit>

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20004204 	.word	0x20004204
 8000f68:	40000800 	.word	0x40000800

08000f6c <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b088      	sub	sp, #32
 8000f70:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f72:	f107 0310 	add.w	r3, r7, #16
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f80:	1d3b      	adds	r3, r7, #4
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_TIM5_Init+0x94>)
 8000f8c:	4a1d      	ldr	r2, [pc, #116]	; (8001004 <MX_TIM5_Init+0x98>)
 8000f8e:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8000f90:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_TIM5_Init+0x94>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <MX_TIM5_Init+0x94>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 2160 - 1;
 8000f9c:	4b18      	ldr	r3, [pc, #96]	; (8001000 <MX_TIM5_Init+0x94>)
 8000f9e:	f640 026f 	movw	r2, #2159	; 0x86f
 8000fa2:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa4:	4b16      	ldr	r3, [pc, #88]	; (8001000 <MX_TIM5_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <MX_TIM5_Init+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <MX_TIM5_Init+0x94>)
 8000fb2:	f005 fb54 	bl	800665e <HAL_TIM_Base_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM5_Init+0x54>
		Error_Handler();
 8000fbc:	f001 faaa 	bl	8002514 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_TIM5_Init+0x94>)
 8000fce:	f006 f9df 	bl	8007390 <HAL_TIM_ConfigClockSource>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM5_Init+0x70>
		Error_Handler();
 8000fd8:	f001 fa9c 	bl	8002514 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8000fe4:	1d3b      	adds	r3, r7, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <MX_TIM5_Init+0x94>)
 8000fea:	f007 f8f1 	bl	80081d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM5_Init+0x8c>
		Error_Handler();
 8000ff4:	f001 fa8e 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	3720      	adds	r7, #32
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2002f424 	.word	0x2002f424
 8001004:	40000c00 	.word	0x40000c00

08001008 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001018:	4b14      	ldr	r3, [pc, #80]	; (800106c <MX_TIM6_Init+0x64>)
 800101a:	4a15      	ldr	r2, [pc, #84]	; (8001070 <MX_TIM6_Init+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 800101e:	4b13      	ldr	r3, [pc, #76]	; (800106c <MX_TIM6_Init+0x64>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_TIM6_Init+0x64>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 4898 - 1;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <MX_TIM6_Init+0x64>)
 800102c:	f241 3221 	movw	r2, #4897	; 0x1321
 8001030:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_TIM6_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <MX_TIM6_Init+0x64>)
 800103a:	f005 fb10 	bl	800665e <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM6_Init+0x40>
		Error_Handler();
 8001044:	f001 fa66 	bl	8002514 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001048:	2320      	movs	r3, #32
 800104a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4805      	ldr	r0, [pc, #20]	; (800106c <MX_TIM6_Init+0x64>)
 8001056:	f007 f8bb 	bl	80081d0 <HAL_TIMEx_MasterConfigSynchronization>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM6_Init+0x5c>
		Error_Handler();
 8001060:	f001 fa58 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	2002f6f8 	.word	0x2002f6f8
 8001070:	40001000 	.word	0x40001000

08001074 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b09e      	sub	sp, #120	; 0x78
 8001078:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800107a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001088:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001098:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80010a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
 80010b4:	615a      	str	r2, [r3, #20]
 80010b6:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80010b8:	463b      	mov	r3, r7
 80010ba:	222c      	movs	r2, #44	; 0x2c
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f008 f9c6 	bl	8009450 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80010c4:	4b4f      	ldr	r3, [pc, #316]	; (8001204 <MX_TIM8_Init+0x190>)
 80010c6:	4a50      	ldr	r2, [pc, #320]	; (8001208 <MX_TIM8_Init+0x194>)
 80010c8:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80010ca:	4b4e      	ldr	r3, [pc, #312]	; (8001204 <MX_TIM8_Init+0x190>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d0:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <MX_TIM8_Init+0x190>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 108 - 1;
 80010d6:	4b4b      	ldr	r3, [pc, #300]	; (8001204 <MX_TIM8_Init+0x190>)
 80010d8:	226b      	movs	r2, #107	; 0x6b
 80010da:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b49      	ldr	r3, [pc, #292]	; (8001204 <MX_TIM8_Init+0x190>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 24;
 80010e2:	4b48      	ldr	r3, [pc, #288]	; (8001204 <MX_TIM8_Init+0x190>)
 80010e4:	2218      	movs	r2, #24
 80010e6:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e8:	4b46      	ldr	r3, [pc, #280]	; (8001204 <MX_TIM8_Init+0x190>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 80010ee:	4845      	ldr	r0, [pc, #276]	; (8001204 <MX_TIM8_Init+0x190>)
 80010f0:	f005 fab5 	bl	800665e <HAL_TIM_Base_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM8_Init+0x8a>
		Error_Handler();
 80010fa:	f001 fa0b 	bl	8002514 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001102:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001104:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001108:	4619      	mov	r1, r3
 800110a:	483e      	ldr	r0, [pc, #248]	; (8001204 <MX_TIM8_Init+0x190>)
 800110c:	f006 f940 	bl	8007390 <HAL_TIM_ConfigClockSource>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM8_Init+0xa6>
		Error_Handler();
 8001116:	f001 f9fd 	bl	8002514 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 800111a:	483a      	ldr	r0, [pc, #232]	; (8001204 <MX_TIM8_Init+0x190>)
 800111c:	f005 fb1f 	bl	800675e <HAL_TIM_PWM_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM8_Init+0xb6>
		Error_Handler();
 8001126:	f001 f9f5 	bl	8002514 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK) {
 800112a:	2108      	movs	r1, #8
 800112c:	4835      	ldr	r0, [pc, #212]	; (8001204 <MX_TIM8_Init+0x190>)
 800112e:	f005 fe15 	bl	8006d5c <HAL_TIM_OnePulse_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM8_Init+0xc8>
		Error_Handler();
 8001138:	f001 f9ec 	bl	8002514 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800113c:	2306      	movs	r3, #6
 800113e:	657b      	str	r3, [r7, #84]	; 0x54
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001140:	2300      	movs	r3, #0
 8001142:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK) {
 8001144:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001148:	4619      	mov	r1, r3
 800114a:	482e      	ldr	r0, [pc, #184]	; (8001204 <MX_TIM8_Init+0x190>)
 800114c:	f006 f9da 	bl	8007504 <HAL_TIM_SlaveConfigSynchro>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM8_Init+0xe6>
		Error_Handler();
 8001156:	f001 f9dd 	bl	8002514 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	64bb      	str	r3, [r7, #72]	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800115e:	2300      	movs	r3, #0
 8001160:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8001166:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800116a:	4619      	mov	r1, r3
 800116c:	4825      	ldr	r0, [pc, #148]	; (8001204 <MX_TIM8_Init+0x190>)
 800116e:	f007 f82f 	bl	80081d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM8_Init+0x108>
		Error_Handler();
 8001178:	f001 f9cc 	bl	8002514 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800117c:	2370      	movs	r3, #112	; 0x70
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 54;
 8001180:	2336      	movs	r3, #54	; 0x36
 8001182:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001184:	2300      	movs	r3, #0
 8001186:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001188:	2300      	movs	r3, #0
 800118a:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001190:	2300      	movs	r3, #0
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001194:	2300      	movs	r3, #0
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800119c:	2200      	movs	r2, #0
 800119e:	4619      	mov	r1, r3
 80011a0:	4818      	ldr	r0, [pc, #96]	; (8001204 <MX_TIM8_Init+0x190>)
 80011a2:	f005 ffdd 	bl	8007160 <HAL_TIM_PWM_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_TIM8_Init+0x13c>
		Error_Handler();
 80011ac:	f001 f9b2 	bl	8002514 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011c0:	2300      	movs	r3, #0
 80011c2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d6:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Filter = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 80011e0:	463b      	mov	r3, r7
 80011e2:	4619      	mov	r1, r3
 80011e4:	4807      	ldr	r0, [pc, #28]	; (8001204 <MX_TIM8_Init+0x190>)
 80011e6:	f007 f881 	bl	80082ec <HAL_TIMEx_ConfigBreakDeadTime>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM8_Init+0x180>
		Error_Handler();
 80011f0:	f001 f990 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 80011f4:	4803      	ldr	r0, [pc, #12]	; (8001204 <MX_TIM8_Init+0x190>)
 80011f6:	f001 fca5 	bl	8002b44 <HAL_TIM_MspPostInit>

}
 80011fa:	bf00      	nop
 80011fc:	3778      	adds	r7, #120	; 0x78
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200041c4 	.word	0x200041c4
 8001208:	40010400 	.word	0x40010400

0800120c <MX_UART5_Init>:
/**
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <MX_UART5_Init+0x58>)
 8001212:	4a15      	ldr	r2, [pc, #84]	; (8001268 <MX_UART5_Init+0x5c>)
 8001214:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 8001216:	4b13      	ldr	r3, [pc, #76]	; (8001264 <MX_UART5_Init+0x58>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <MX_UART5_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0f      	ldr	r3, [pc, #60]	; (8001264 <MX_UART5_Init+0x58>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <MX_UART5_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <MX_UART5_Init+0x58>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <MX_UART5_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b09      	ldr	r3, [pc, #36]	; (8001264 <MX_UART5_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001242:	4b08      	ldr	r3, [pc, #32]	; (8001264 <MX_UART5_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <MX_UART5_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 800124e:	4805      	ldr	r0, [pc, #20]	; (8001264 <MX_UART5_Init+0x58>)
 8001250:	f007 f8e8 	bl	8008424 <HAL_UART_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_UART5_Init+0x52>
		Error_Handler();
 800125a:	f001 f95b 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2002f4b8 	.word	0x2002f4b8
 8001268:	40005000 	.word	0x40005000

0800126c <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_UART7_Init+0x58>)
 8001272:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <MX_UART7_Init+0x5c>)
 8001274:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_UART7_Init+0x58>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_UART7_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_UART7_Init+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_UART7_Init+0x58>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_UART7_Init+0x58>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_UART7_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_UART7_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_UART7_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_UART7_Init+0x58>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_UART7_Init+0x58>)
 80012b0:	f007 f8b8 	bl	8008424 <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_UART7_Init+0x52>
		Error_Handler();
 80012ba:	f001 f92b 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20004144 	.word	0x20004144
 80012c8:	40007800 	.word	0x40007800

080012cc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80012d0:	4b14      	ldr	r3, [pc, #80]	; (8001324 <MX_USART1_UART_Init+0x58>)
 80012d2:	4a15      	ldr	r2, [pc, #84]	; (8001328 <MX_USART1_UART_Init+0x5c>)
 80012d4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80012d6:	4b13      	ldr	r3, [pc, #76]	; (8001324 <MX_USART1_UART_Init+0x58>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b11      	ldr	r3, [pc, #68]	; (8001324 <MX_USART1_UART_Init+0x58>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <MX_USART1_UART_Init+0x58>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <MX_USART1_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <MX_USART1_UART_Init+0x58>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_USART1_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <MX_USART1_UART_Init+0x58>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <MX_USART1_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <MX_USART1_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800130e:	4805      	ldr	r0, [pc, #20]	; (8001324 <MX_USART1_UART_Init+0x58>)
 8001310:	f007 f888 	bl	8008424 <HAL_UART_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800131a:	f001 f8fb 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2002f580 	.word	0x2002f580
 8001328:	40011000 	.word	0x40011000

0800132c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001330:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001332:	4a15      	ldr	r2, [pc, #84]	; (8001388 <MX_USART2_UART_Init+0x5c>)
 8001334:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800133c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001346:	2200      	movs	r2, #0
 8001348:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <MX_USART2_UART_Init+0x58>)
 800134c:	2200      	movs	r2, #0
 800134e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001350:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001352:	220c      	movs	r2, #12
 8001354:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001356:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001358:	2200      	movs	r2, #0
 800135a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800135c:	4b09      	ldr	r3, [pc, #36]	; (8001384 <MX_USART2_UART_Init+0x58>)
 800135e:	2200      	movs	r2, #0
 8001360:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001362:	4b08      	ldr	r3, [pc, #32]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001364:	2200      	movs	r2, #0
 8001366:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <MX_USART2_UART_Init+0x58>)
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800136e:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_USART2_UART_Init+0x58>)
 8001370:	f007 f858 	bl	8008424 <HAL_UART_Init>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800137a:	f001 f8cb 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2002f820 	.word	0x2002f820
 8001388:	40004400 	.word	0x40004400

0800138c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MX_USART3_UART_Init+0x54>)
 8001392:	4a14      	ldr	r2, [pc, #80]	; (80013e4 <MX_USART3_UART_Init+0x58>)
 8001394:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 2000000;
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_USART3_UART_Init+0x54>)
 8001398:	4a13      	ldr	r2, [pc, #76]	; (80013e8 <MX_USART3_UART_Init+0x5c>)
 800139a:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800139c:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MX_USART3_UART_Init+0x54>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_USART3_UART_Init+0x54>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80013a8:	4b0d      	ldr	r3, [pc, #52]	; (80013e0 <MX_USART3_UART_Init+0x54>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_USART3_UART_Init+0x54>)
 80013b0:	220c      	movs	r2, #12
 80013b2:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_USART3_UART_Init+0x54>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_USART3_UART_Init+0x54>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_USART3_UART_Init+0x54>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_USART3_UART_Init+0x54>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_USART3_UART_Init+0x54>)
 80013ce:	f007 f829 	bl	8008424 <HAL_UART_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_USART3_UART_Init+0x50>
		Error_Handler();
 80013d8:	f001 f89c 	bl	8002514 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	20004244 	.word	0x20004244
 80013e4:	40004800 	.word	0x40004800
 80013e8:	001e8480 	.word	0x001e8480

080013ec <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_DMA_Init+0x70>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a19      	ldr	r2, [pc, #100]	; (800145c <MX_DMA_Init+0x70>)
 80013f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b17      	ldr	r3, [pc, #92]	; (800145c <MX_DMA_Init+0x70>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 800140a:	4b14      	ldr	r3, [pc, #80]	; (800145c <MX_DMA_Init+0x70>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a13      	ldr	r2, [pc, #76]	; (800145c <MX_DMA_Init+0x70>)
 8001410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_DMA_Init+0x70>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2010      	movs	r0, #16
 8001428:	f002 fbb9 	bl	8003b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800142c:	2010      	movs	r0, #16
 800142e:	f002 fbd2 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	2038      	movs	r0, #56	; 0x38
 8001438:	f002 fbb1 	bl	8003b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800143c:	2038      	movs	r0, #56	; 0x38
 800143e:	f002 fbca 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	203c      	movs	r0, #60	; 0x3c
 8001448:	f002 fba9 	bl	8003b9e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800144c:	203c      	movs	r0, #60	; 0x3c
 800144e:	f002 fbc2 	bl	8003bd6 <HAL_NVIC_EnableIRQ>

}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b08c      	sub	sp, #48	; 0x30
 8001464:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001466:	f107 031c 	add.w	r3, r7, #28
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001476:	4b40      	ldr	r3, [pc, #256]	; (8001578 <MX_GPIO_Init+0x118>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a3f      	ldr	r2, [pc, #252]	; (8001578 <MX_GPIO_Init+0x118>)
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b3d      	ldr	r3, [pc, #244]	; (8001578 <MX_GPIO_Init+0x118>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	61bb      	str	r3, [r7, #24]
 800148c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <MX_GPIO_Init+0x118>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a39      	ldr	r2, [pc, #228]	; (8001578 <MX_GPIO_Init+0x118>)
 8001494:	f043 0304 	orr.w	r3, r3, #4
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b37      	ldr	r3, [pc, #220]	; (8001578 <MX_GPIO_Init+0x118>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0304 	and.w	r3, r3, #4
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <MX_GPIO_Init+0x118>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a33      	ldr	r2, [pc, #204]	; (8001578 <MX_GPIO_Init+0x118>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <MX_GPIO_Init+0x118>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <MX_GPIO_Init+0x118>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a2d      	ldr	r2, [pc, #180]	; (8001578 <MX_GPIO_Init+0x118>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <MX_GPIO_Init+0x118>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
 80014d4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b28      	ldr	r3, [pc, #160]	; (8001578 <MX_GPIO_Init+0x118>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a27      	ldr	r2, [pc, #156]	; (8001578 <MX_GPIO_Init+0x118>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b25      	ldr	r3, [pc, #148]	; (8001578 <MX_GPIO_Init+0x118>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <MX_GPIO_Init+0x118>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a21      	ldr	r2, [pc, #132]	; (8001578 <MX_GPIO_Init+0x118>)
 80014f4:	f043 0308 	orr.w	r3, r3, #8
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <MX_GPIO_Init+0x118>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0308 	and.w	r3, r3, #8
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2108      	movs	r1, #8
 800150a:	481c      	ldr	r0, [pc, #112]	; (800157c <MX_GPIO_Init+0x11c>)
 800150c:	f003 f8c0 	bl	8004690 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001510:	2200      	movs	r2, #0
 8001512:	f64e 717f 	movw	r1, #61311	; 0xef7f
 8001516:	481a      	ldr	r0, [pc, #104]	; (8001580 <MX_GPIO_Init+0x120>)
 8001518:	f003 f8ba 	bl	8004690 <HAL_GPIO_WritePin>
	LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : SN6505_EN_Pin */
	GPIO_InitStruct.Pin = SN6505_EN_Pin;
 800151c:	2308      	movs	r3, #8
 800151e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	4812      	ldr	r0, [pc, #72]	; (800157c <MX_GPIO_Init+0x11c>)
 8001534:	f002 ff02 	bl	800433c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin
	 LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin
	 S1_Pin S2_Pin S3_Pin S4_Pin
	 S5_Pin S6_Pin */
	GPIO_InitStruct.Pin = LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin;
 8001538:	f64e 737f 	movw	r3, #61311	; 0xef7f
 800153c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	480b      	ldr	r0, [pc, #44]	; (8001580 <MX_GPIO_Init+0x120>)
 8001552:	f002 fef3 	bl	800433c <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin;
 8001556:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800155a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_GPIO_Init+0x11c>)
 800156c:	f002 fee6 	bl	800433c <HAL_GPIO_Init>

}
 8001570:	bf00      	nop
 8001572:	3730      	adds	r7, #48	; 0x30
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40020800 	.word	0x40020800
 8001580:	40020c00 	.word	0x40020c00

08001584 <runMeasurementMethod>:

/* USER CODE BEGIN 4 */

void runMeasurementMethod() {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0

	//if measurement method is set, run the polarization sequence
	if ((state.remainingMeasurements > 0) || (state.remainingMeasurements == -1) && ((state.extAdcActiveState == 1) || (state.intAdcActiveState == 1) || (state.compActiveState == 1))) {
 8001588:	4b16      	ldr	r3, [pc, #88]	; (80015e4 <runMeasurementMethod+0x60>)
 800158a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	dc11      	bgt.n	80015b6 <runMeasurementMethod+0x32>
 8001592:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <runMeasurementMethod+0x60>)
 8001594:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800159c:	d11f      	bne.n	80015de <runMeasurementMethod+0x5a>
 800159e:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <runMeasurementMethod+0x60>)
 80015a0:	78db      	ldrb	r3, [r3, #3]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d007      	beq.n	80015b6 <runMeasurementMethod+0x32>
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <runMeasurementMethod+0x60>)
 80015a8:	791b      	ldrb	r3, [r3, #4]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d003      	beq.n	80015b6 <runMeasurementMethod+0x32>
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <runMeasurementMethod+0x60>)
 80015b0:	795b      	ldrb	r3, [r3, #5]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d113      	bne.n	80015de <runMeasurementMethod+0x5a>
		runPolarizationSequence();
 80015b6:	f000 f817 	bl	80015e8 <runPolarizationSequence>

		if (state.intAdcActiveState == 1) {
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <runMeasurementMethod+0x60>)
 80015bc:	791b      	ldrb	r3, [r3, #4]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <runMeasurementMethod+0x42>
			measureWithInternalADC();
 80015c2:	f000 f9e5 	bl	8001990 <measureWithInternalADC>
		}
		if (state.extAdcActiveState == 1) {
 80015c6:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <runMeasurementMethod+0x60>)
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d101      	bne.n	80015d2 <runMeasurementMethod+0x4e>
			measureWithExternalADC();
 80015ce:	f000 f9af 	bl	8001930 <measureWithExternalADC>
		}
		if (state.compActiveState == 1) {
 80015d2:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <runMeasurementMethod+0x60>)
 80015d4:	795b      	ldrb	r3, [r3, #5]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d101      	bne.n	80015de <runMeasurementMethod+0x5a>
			measureWithComparator();
 80015da:	f000 f9fd 	bl	80019d8 <measureWithComparator>
		}
	}
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	2002f4a4 	.word	0x2002f4a4

080015e8 <runPolarizationSequence>:

void runPolarizationSequence() {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 80015ec:	4b67      	ldr	r3, [pc, #412]	; (800178c <runPolarizationSequence+0x1a4>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	745a      	strb	r2, [r3, #17]
	// visualise
	set_LED1(1, 1, 1);
 80015f2:	2201      	movs	r2, #1
 80015f4:	2101      	movs	r1, #1
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 f8ce 	bl	8001798 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 80015fc:	2201      	movs	r2, #1
 80015fe:	2102      	movs	r1, #2
 8001600:	4863      	ldr	r0, [pc, #396]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001602:	f003 f845 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2104      	movs	r1, #4
 800160a:	4861      	ldr	r0, [pc, #388]	; (8001790 <runPolarizationSequence+0x1a8>)
 800160c:	f003 f840 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001610:	2201      	movs	r2, #1
 8001612:	2108      	movs	r1, #8
 8001614:	485e      	ldr	r0, [pc, #376]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001616:	f003 f83b 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2110      	movs	r1, #16
 800161e:	485c      	ldr	r0, [pc, #368]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001620:	f003 f836 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2120      	movs	r1, #32
 8001628:	4859      	ldr	r0, [pc, #356]	; (8001790 <runPolarizationSequence+0x1a8>)
 800162a:	f003 f831 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 800162e:	2201      	movs	r2, #1
 8001630:	2140      	movs	r1, #64	; 0x40
 8001632:	4857      	ldr	r0, [pc, #348]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001634:	f003 f82c 	bl	8004690 <HAL_GPIO_WritePin>
	delay_ms(5);
 8001638:	2005      	movs	r0, #5
 800163a:	f000 f961 	bl	8001900 <delay_ms>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 800163e:	2201      	movs	r2, #1
 8001640:	2102      	movs	r1, #2
 8001642:	4853      	ldr	r0, [pc, #332]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001644:	f003 f824 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001648:	2200      	movs	r2, #0
 800164a:	2104      	movs	r1, #4
 800164c:	4850      	ldr	r0, [pc, #320]	; (8001790 <runPolarizationSequence+0x1a8>)
 800164e:	f003 f81f 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001652:	2201      	movs	r2, #1
 8001654:	2108      	movs	r1, #8
 8001656:	484e      	ldr	r0, [pc, #312]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001658:	f003 f81a 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 800165c:	2201      	movs	r2, #1
 800165e:	2110      	movs	r1, #16
 8001660:	484b      	ldr	r0, [pc, #300]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001662:	f003 f815 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2120      	movs	r1, #32
 800166a:	4849      	ldr	r0, [pc, #292]	; (8001790 <runPolarizationSequence+0x1a8>)
 800166c:	f003 f810 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001670:	2201      	movs	r2, #1
 8001672:	2140      	movs	r1, #64	; 0x40
 8001674:	4846      	ldr	r0, [pc, #280]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001676:	f003 f80b 	bl	8004690 <HAL_GPIO_WritePin>
	delay_ms(polarizationTime);
 800167a:	4b46      	ldr	r3, [pc, #280]	; (8001794 <runPolarizationSequence+0x1ac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f000 f93e 	bl	8001900 <delay_ms>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001684:	2200      	movs	r2, #0
 8001686:	2102      	movs	r1, #2
 8001688:	4841      	ldr	r0, [pc, #260]	; (8001790 <runPolarizationSequence+0x1a8>)
 800168a:	f003 f801 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2104      	movs	r1, #4
 8001692:	483f      	ldr	r0, [pc, #252]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001694:	f002 fffc 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001698:	2201      	movs	r2, #1
 800169a:	2108      	movs	r1, #8
 800169c:	483c      	ldr	r0, [pc, #240]	; (8001790 <runPolarizationSequence+0x1a8>)
 800169e:	f002 fff7 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2110      	movs	r1, #16
 80016a6:	483a      	ldr	r0, [pc, #232]	; (8001790 <runPolarizationSequence+0x1a8>)
 80016a8:	f002 fff2 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2120      	movs	r1, #32
 80016b0:	4837      	ldr	r0, [pc, #220]	; (8001790 <runPolarizationSequence+0x1a8>)
 80016b2:	f002 ffed 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2140      	movs	r1, #64	; 0x40
 80016ba:	4835      	ldr	r0, [pc, #212]	; (8001790 <runPolarizationSequence+0x1a8>)
 80016bc:	f002 ffe8 	bl	8004690 <HAL_GPIO_WritePin>
	delay_us(200);
 80016c0:	20c8      	movs	r0, #200	; 0xc8
 80016c2:	f000 f909 	bl	80018d8 <delay_us>

	//run sequnece T5 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2102      	movs	r1, #2
 80016ca:	4831      	ldr	r0, [pc, #196]	; (8001790 <runPolarizationSequence+0x1a8>)
 80016cc:	f002 ffe0 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2104      	movs	r1, #4
 80016d4:	482e      	ldr	r0, [pc, #184]	; (8001790 <runPolarizationSequence+0x1a8>)
 80016d6:	f002 ffdb 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80016da:	2201      	movs	r2, #1
 80016dc:	2108      	movs	r1, #8
 80016de:	482c      	ldr	r0, [pc, #176]	; (8001790 <runPolarizationSequence+0x1a8>)
 80016e0:	f002 ffd6 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2110      	movs	r1, #16
 80016e8:	4829      	ldr	r0, [pc, #164]	; (8001790 <runPolarizationSequence+0x1a8>)
 80016ea:	f002 ffd1 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80016ee:	2201      	movs	r2, #1
 80016f0:	2120      	movs	r1, #32
 80016f2:	4827      	ldr	r0, [pc, #156]	; (8001790 <runPolarizationSequence+0x1a8>)
 80016f4:	f002 ffcc 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	4824      	ldr	r0, [pc, #144]	; (8001790 <runPolarizationSequence+0x1a8>)
 80016fe:	f002 ffc7 	bl	8004690 <HAL_GPIO_WritePin>
	delay_ms(10);
 8001702:	200a      	movs	r0, #10
 8001704:	f000 f8fc 	bl	8001900 <delay_ms>

	//run sequnece T6 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2102      	movs	r1, #2
 800170c:	4820      	ldr	r0, [pc, #128]	; (8001790 <runPolarizationSequence+0x1a8>)
 800170e:	f002 ffbf 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001712:	2200      	movs	r2, #0
 8001714:	2104      	movs	r1, #4
 8001716:	481e      	ldr	r0, [pc, #120]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001718:	f002 ffba 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	2108      	movs	r1, #8
 8001720:	481b      	ldr	r0, [pc, #108]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001722:	f002 ffb5 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2110      	movs	r1, #16
 800172a:	4819      	ldr	r0, [pc, #100]	; (8001790 <runPolarizationSequence+0x1a8>)
 800172c:	f002 ffb0 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001730:	2201      	movs	r2, #1
 8001732:	2120      	movs	r1, #32
 8001734:	4816      	ldr	r0, [pc, #88]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001736:	f002 ffab 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2140      	movs	r1, #64	; 0x40
 800173e:	4814      	ldr	r0, [pc, #80]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001740:	f002 ffa6 	bl	8004690 <HAL_GPIO_WritePin>
	delay_ms(5);
 8001744:	2005      	movs	r0, #5
 8001746:	f000 f8db 	bl	8001900 <delay_ms>
	//run sequnece T7 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2102      	movs	r1, #2
 800174e:	4810      	ldr	r0, [pc, #64]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001750:	f002 ff9e 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	2104      	movs	r1, #4
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <runPolarizationSequence+0x1a8>)
 800175a:	f002 ff99 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2108      	movs	r1, #8
 8001762:	480b      	ldr	r0, [pc, #44]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001764:	f002 ff94 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001768:	2200      	movs	r2, #0
 800176a:	2110      	movs	r1, #16
 800176c:	4808      	ldr	r0, [pc, #32]	; (8001790 <runPolarizationSequence+0x1a8>)
 800176e:	f002 ff8f 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	2120      	movs	r1, #32
 8001776:	4806      	ldr	r0, [pc, #24]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001778:	f002 ff8a 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2140      	movs	r1, #64	; 0x40
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <runPolarizationSequence+0x1a8>)
 8001782:	f002 ff85 	bl	8004690 <HAL_GPIO_WritePin>

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	2002f4a4 	.word	0x2002f4a4
 8001790:	40020c00 	.word	0x40020c00
 8001794:	20000004 	.word	0x20000004

08001798 <set_LED1>:

void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
 80017a2:	460b      	mov	r3, r1
 80017a4:	71bb      	strb	r3, [r7, #6]
 80017a6:	4613      	mov	r3, r2
 80017a8:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, G);
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	461a      	mov	r2, r3
 80017ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017b2:	480a      	ldr	r0, [pc, #40]	; (80017dc <set_LED1+0x44>)
 80017b4:	f002 ff6c 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, B);
 80017b8:	797b      	ldrb	r3, [r7, #5]
 80017ba:	461a      	mov	r2, r3
 80017bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c0:	4806      	ldr	r0, [pc, #24]	; (80017dc <set_LED1+0x44>)
 80017c2:	f002 ff65 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, R);
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	461a      	mov	r2, r3
 80017ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ce:	4803      	ldr	r0, [pc, #12]	; (80017dc <set_LED1+0x44>)
 80017d0:	f002 ff5e 	bl	8004690 <HAL_GPIO_WritePin>
}
 80017d4:	bf00      	nop
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020c00 	.word	0x40020c00

080017e0 <set_LED2>:
void set_LED2(uint8_t val) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val);
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	461a      	mov	r2, r3
 80017ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f2:	4803      	ldr	r0, [pc, #12]	; (8001800 <set_LED2+0x20>)
 80017f4:	f002 ff4c 	bl	8004690 <HAL_GPIO_WritePin>
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40020c00 	.word	0x40020c00

08001804 <set_LED3>:

void set_LED3(uint8_t val) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, val);
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	461a      	mov	r2, r3
 8001812:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001816:	4803      	ldr	r0, [pc, #12]	; (8001824 <set_LED3+0x20>)
 8001818:	f002 ff3a 	bl	8004690 <HAL_GPIO_WritePin>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40020c00 	.word	0x40020c00

08001828 <set_LED4>:

void set_LED4(uint8_t val) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, val);
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	461a      	mov	r2, r3
 8001836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800183a:	4803      	ldr	r0, [pc, #12]	; (8001848 <set_LED4+0x20>)
 800183c:	f002 ff28 	bl	8004690 <HAL_GPIO_WritePin>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40020c00 	.word	0x40020c00

0800184c <switchingCircuitIdle>:

void switchingCircuitIdle() {
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 8001850:	2200      	movs	r2, #0
 8001852:	2101      	movs	r1, #1
 8001854:	4811      	ldr	r0, [pc, #68]	; (800189c <switchingCircuitIdle+0x50>)
 8001856:	f002 ff1b 	bl	8004690 <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	2102      	movs	r1, #2
 800185e:	480f      	ldr	r0, [pc, #60]	; (800189c <switchingCircuitIdle+0x50>)
 8001860:	f002 ff16 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2104      	movs	r1, #4
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <switchingCircuitIdle+0x50>)
 800186a:	f002 ff11 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800186e:	2201      	movs	r2, #1
 8001870:	2108      	movs	r1, #8
 8001872:	480a      	ldr	r0, [pc, #40]	; (800189c <switchingCircuitIdle+0x50>)
 8001874:	f002 ff0c 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2110      	movs	r1, #16
 800187c:	4807      	ldr	r0, [pc, #28]	; (800189c <switchingCircuitIdle+0x50>)
 800187e:	f002 ff07 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2120      	movs	r1, #32
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <switchingCircuitIdle+0x50>)
 8001888:	f002 ff02 	bl	8004690 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800188c:	2200      	movs	r2, #0
 800188e:	2140      	movs	r1, #64	; 0x40
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <switchingCircuitIdle+0x50>)
 8001892:	f002 fefd 	bl	8004690 <HAL_GPIO_WritePin>
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40020c00 	.word	0x40020c00

080018a0 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a08      	ldr	r2, [pc, #32]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d108      	bne.n	80018c4 <HAL_TIM_PeriodElapsedCallback+0x24>
		if (timeIndex > 0) {
 80018b2:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -= 10;
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3b0a      	subs	r3, #10
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018c2:	6013      	str	r3, [r2, #0]
	}

	if (htim->Instance == TIM6) {
	}

}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40000c00 	.word	0x40000c00
 80018d4:	20000204 	.word	0x20000204

080018d8 <delay_us>:

void delay_us(uint32_t delay_us) {
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 80018e0:	4a06      	ldr	r2, [pc, #24]	; (80018fc <delay_us+0x24>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 80018e6:	bf00      	nop
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <delay_us+0x24>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1fb      	bne.n	80018e8 <delay_us+0x10>
		;
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	20000204 	.word	0x20000204

08001900 <delay_ms>:

void delay_ms(uint32_t delay_us) {
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us * 1000;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800190e:	fb02 f303 	mul.w	r3, r2, r3
 8001912:	4a06      	ldr	r2, [pc, #24]	; (800192c <delay_ms+0x2c>)
 8001914:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 8001916:	bf00      	nop
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <delay_ms+0x2c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d1fb      	bne.n	8001918 <delay_ms+0x18>
		;
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	20000204 	.word	0x20000204

08001930 <measureWithExternalADC>:

void measureWithExternalADC() {
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 1, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2101      	movs	r1, #1
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff ff2d 	bl	8001798 <set_LED1>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_1.uint8, samplesPerPeriod);
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <measureWithExternalADC+0x48>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	461a      	mov	r2, r3
 8001946:	490d      	ldr	r1, [pc, #52]	; (800197c <measureWithExternalADC+0x4c>)
 8001948:	480d      	ldr	r0, [pc, #52]	; (8001980 <measureWithExternalADC+0x50>)
 800194a:	f004 f97b 	bl	8005c44 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 800194e:	2100      	movs	r1, #0
 8001950:	480c      	ldr	r0, [pc, #48]	; (8001984 <measureWithExternalADC+0x54>)
 8001952:	f004 ff2f 	bl	80067b4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 8001956:	2104      	movs	r1, #4
 8001958:	480a      	ldr	r0, [pc, #40]	; (8001984 <measureWithExternalADC+0x54>)
 800195a:	f004 ff2b 	bl	80067b4 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 800195e:	2100      	movs	r1, #0
 8001960:	4809      	ldr	r0, [pc, #36]	; (8001988 <measureWithExternalADC+0x58>)
 8001962:	f004 ff27 	bl	80067b4 <HAL_TIM_PWM_Start_IT>
	set_LED2(1);
 8001966:	2001      	movs	r0, #1
 8001968:	f7ff ff3a 	bl	80017e0 <set_LED2>
	state.extAdcMeasuring = 1;
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <measureWithExternalADC+0x5c>)
 800196e:	2201      	movs	r2, #1
 8001970:	719a      	strb	r2, [r3, #6]
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000000 	.word	0x20000000
 800197c:	20045188 	.word	0x20045188
 8001980:	2002f77c 	.word	0x2002f77c
 8001984:	2002f73c 	.word	0x2002f73c
 8001988:	200041c4 	.word	0x200041c4
 800198c:	2002f4a4 	.word	0x2002f4a4

08001990 <measureWithInternalADC>:

void measureWithInternalADC() {
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 1, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2101      	movs	r1, #1
 8001998:	2000      	movs	r0, #0
 800199a:	f7ff fefd 	bl	8001798 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_1.uint16, samplesPerPeriod);
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <measureWithInternalADC+0x34>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4908      	ldr	r1, [pc, #32]	; (80019c8 <measureWithInternalADC+0x38>)
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <measureWithInternalADC+0x3c>)
 80019a8:	f001 fc56 	bl	8003258 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 80019ac:	4808      	ldr	r0, [pc, #32]	; (80019d0 <measureWithInternalADC+0x40>)
 80019ae:	f004 fe81 	bl	80066b4 <HAL_TIM_Base_Start_IT>
	set_LED3(1);
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff ff26 	bl	8001804 <set_LED3>
	state.intAdcMeasuring = 1;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <measureWithInternalADC+0x44>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	71da      	strb	r2, [r3, #7]
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	20000000 	.word	0x20000000
 80019c8:	2002f8a0 	.word	0x2002f8a0
 80019cc:	2002f538 	.word	0x2002f538
 80019d0:	2002f6f8 	.word	0x2002f6f8
 80019d4:	2002f4a4 	.word	0x2002f4a4

080019d8 <measureWithComparator>:

void measureWithComparator() {
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
	// visualise
	set_LED1(0, 1, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2101      	movs	r1, #1
 80019e0:	2000      	movs	r0, #0
 80019e2:	f7ff fed9 	bl	8001798 <set_LED1>
	// run the timer
	//HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, buffer_comp, 4001);
 80019e6:	f640 73a1 	movw	r3, #4001	; 0xfa1
 80019ea:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <measureWithComparator+0x2c>)
 80019ec:	2100      	movs	r1, #0
 80019ee:	4806      	ldr	r0, [pc, #24]	; (8001a08 <measureWithComparator+0x30>)
 80019f0:	f005 f830 	bl	8006a54 <HAL_TIM_IC_Start_DMA>
	set_LED4(1);
 80019f4:	2001      	movs	r0, #1
 80019f6:	f7ff ff17 	bl	8001828 <set_LED4>
	state.compMeasuring = 1;
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <measureWithComparator+0x34>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	721a      	strb	r2, [r3, #8]

}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000214 	.word	0x20000214
 8001a08:	2002f7e0 	.word	0x2002f7e0
 8001a0c:	2002f4a4 	.word	0x2002f4a4

08001a10 <measureFrequencyWithTimer>:

//mode = 1 ... run only once, mode = 0 ... run infinity times
void measureFrequencyWithTimer(TIM_HandleTypeDef *htim) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4824      	ldr	r0, [pc, #144]	; (8001aac <measureFrequencyWithTimer+0x9c>)
 8001a1c:	f005 f916 	bl	8006c4c <HAL_TIM_IC_Stop_DMA>
	set_LED4(0);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f7ff ff01 	bl	8001828 <set_LED4>
	state.compReadyToSend = 1;
 8001a26:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	709a      	strb	r2, [r3, #2]
	state.compMeasuring = 0;
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	721a      	strb	r2, [r3, #8]

	//only if all measurements were done
	if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a34:	799b      	ldrb	r3, [r3, #6]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d118      	bne.n	8001a6c <measureFrequencyWithTimer+0x5c>
 8001a3a:	4b1d      	ldr	r3, [pc, #116]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a3c:	79db      	ldrb	r3, [r3, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d114      	bne.n	8001a6c <measureFrequencyWithTimer+0x5c>
 8001a42:	4b1b      	ldr	r3, [pc, #108]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a44:	7a1b      	ldrb	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d110      	bne.n	8001a6c <measureFrequencyWithTimer+0x5c>
		switchingCircuitIdle();
 8001a4a:	f7ff feff 	bl	800184c <switchingCircuitIdle>
		// -1 indicates infinity measurements
		if (state.remainingMeasurements != -1) {
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a50:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d008      	beq.n	8001a6c <measureFrequencyWithTimer+0x5c>
			state.remainingMeasurements--;
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a5c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	3b01      	subs	r3, #1
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a6a:	819a      	strh	r2, [r3, #12]
		}
	}
	//if freq should be measured only once, after the measurement, go to idle state
	if (state.remainingMeasurements == 0) {
 8001a6c:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a6e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d106      	bne.n	8001a84 <measureFrequencyWithTimer+0x74>
		state.compActiveState = 0;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	715a      	strb	r2, [r3, #5]
		state.compSetState = 0;
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	72da      	strb	r2, [r3, #11]
	} else {
		if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
			state.preparedToRunPolarizationPhase = 1;
		}
	}
}
 8001a82:	e00e      	b.n	8001aa2 <measureFrequencyWithTimer+0x92>
		if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001a84:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a86:	799b      	ldrb	r3, [r3, #6]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10a      	bne.n	8001aa2 <measureFrequencyWithTimer+0x92>
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a8e:	79db      	ldrb	r3, [r3, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d106      	bne.n	8001aa2 <measureFrequencyWithTimer+0x92>
 8001a94:	4b06      	ldr	r3, [pc, #24]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a96:	7a1b      	ldrb	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <measureFrequencyWithTimer+0x92>
			state.preparedToRunPolarizationPhase = 1;
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <measureFrequencyWithTimer+0xa0>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	745a      	strb	r2, [r3, #17]
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	2002f7e0 	.word	0x2002f7e0
 8001ab0:	2002f4a4 	.word	0x2002f4a4

08001ab4 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac4:	d102      	bne.n	8001acc <HAL_TIM_IC_CaptureCallback+0x18>
		measureFrequencyWithTimer(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffa2 	bl	8001a10 <measureFrequencyWithTimer>
	}
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_ADC_ConvCpltCallback>:
		}
	}

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	//stop the ADC when in interrupt
	ADC1->CR2 &= ~ADC_CR2_DMA;
 8001adc:	4b33      	ldr	r3, [pc, #204]	; (8001bac <HAL_ADC_ConvCpltCallback+0xd8>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	4a32      	ldr	r2, [pc, #200]	; (8001bac <HAL_ADC_ConvCpltCallback+0xd8>)
 8001ae2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae6:	6093      	str	r3, [r2, #8]
	// if function HAL_ADC_Stop_DMA(&hadc1) would be called, it wouldn't be possible to Start DMA again.

	filledBuffersIntADC++;
 8001ae8:	4b31      	ldr	r3, [pc, #196]	; (8001bb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b2f      	ldr	r3, [pc, #188]	; (8001bb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001af2:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffersIntADC == 1) {
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d107      	bne.n	8001b0c <HAL_ADC_ConvCpltCallback+0x38>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_2.uint16, samplesPerPeriod);
 8001afc:	4b2d      	ldr	r3, [pc, #180]	; (8001bb4 <HAL_ADC_ConvCpltCallback+0xe0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	492d      	ldr	r1, [pc, #180]	; (8001bb8 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001b04:	482d      	ldr	r0, [pc, #180]	; (8001bbc <HAL_ADC_ConvCpltCallback+0xe8>)
 8001b06:	f001 fba7 	bl	8003258 <HAL_ADC_Start_DMA>
			if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
				state.preparedToRunPolarizationPhase = 1;
			}
		}
	}
}
 8001b0a:	e04a      	b.n	8001ba2 <HAL_ADC_ConvCpltCallback+0xce>
	else if (filledBuffersIntADC == 2) {
 8001b0c:	4b28      	ldr	r3, [pc, #160]	; (8001bb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d146      	bne.n	8001ba2 <HAL_ADC_ConvCpltCallback+0xce>
		set_LED3(0);
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff fe75 	bl	8001804 <set_LED3>
		state.intAdcReadyToSend = 1;
 8001b1a:	4b29      	ldr	r3, [pc, #164]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	705a      	strb	r2, [r3, #1]
		state.intAdcMeasuring = 0;
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	71da      	strb	r2, [r3, #7]
		HAL_TIM_Base_Stop_IT(&htim6);
 8001b26:	4827      	ldr	r0, [pc, #156]	; (8001bc4 <HAL_ADC_ConvCpltCallback+0xf0>)
 8001b28:	f004 fdee 	bl	8006708 <HAL_TIM_Base_Stop_IT>
		filledBuffersIntADC = 0;
 8001b2c:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <HAL_ADC_ConvCpltCallback+0xdc>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
		if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b34:	799b      	ldrb	r3, [r3, #6]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_ADC_ConvCpltCallback+0x98>
 8001b3a:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b3c:	79db      	ldrb	r3, [r3, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d114      	bne.n	8001b6c <HAL_ADC_ConvCpltCallback+0x98>
 8001b42:	4b1f      	ldr	r3, [pc, #124]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b44:	7a1b      	ldrb	r3, [r3, #8]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d110      	bne.n	8001b6c <HAL_ADC_ConvCpltCallback+0x98>
			switchingCircuitIdle();
 8001b4a:	f7ff fe7f 	bl	800184c <switchingCircuitIdle>
			if (state.remainingMeasurements != -1) {
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b50:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d008      	beq.n	8001b6c <HAL_ADC_ConvCpltCallback+0x98>
				state.remainingMeasurements--;
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b5c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	3b01      	subs	r3, #1
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	b21a      	sxth	r2, r3
 8001b68:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b6a:	819a      	strh	r2, [r3, #12]
		if (state.remainingMeasurements == 0) {
 8001b6c:	4b14      	ldr	r3, [pc, #80]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b6e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <HAL_ADC_ConvCpltCallback+0xb0>
			state.intAdcActiveState = 0;
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	711a      	strb	r2, [r3, #4]
			state.intAdcSetState = 0;
 8001b7c:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	729a      	strb	r2, [r3, #10]
}
 8001b82:	e00e      	b.n	8001ba2 <HAL_ADC_ConvCpltCallback+0xce>
			if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b86:	799b      	ldrb	r3, [r3, #6]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10a      	bne.n	8001ba2 <HAL_ADC_ConvCpltCallback+0xce>
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b8e:	79db      	ldrb	r3, [r3, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d106      	bne.n	8001ba2 <HAL_ADC_ConvCpltCallback+0xce>
 8001b94:	4b0a      	ldr	r3, [pc, #40]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b96:	7a1b      	ldrb	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <HAL_ADC_ConvCpltCallback+0xce>
				state.preparedToRunPolarizationPhase = 1;
 8001b9c:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_ADC_ConvCpltCallback+0xec>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	745a      	strb	r2, [r3, #17]
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40012000 	.word	0x40012000
 8001bb0:	20000201 	.word	0x20000201
 8001bb4:	20000000 	.word	0x20000000
 8001bb8:	20004314 	.word	0x20004314
 8001bbc:	2002f538 	.word	0x2002f538
 8001bc0:	2002f4a4 	.word	0x2002f4a4
 8001bc4:	2002f6f8 	.word	0x2002f6f8

08001bc8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a11      	ldr	r2, [pc, #68]	; (8001c1c <HAL_UART_RxCpltCallback+0x54>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d11b      	bne.n	8001c12 <HAL_UART_RxCpltCallback+0x4a>
		HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4910      	ldr	r1, [pc, #64]	; (8001c20 <HAL_UART_RxCpltCallback+0x58>)
 8001bde:	4811      	ldr	r0, [pc, #68]	; (8001c24 <HAL_UART_RxCpltCallback+0x5c>)
 8001be0:	f006 fd00 	bl	80085e4 <HAL_UART_Receive_IT>
		state.measureTechniqueUpdated = 1;
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <HAL_UART_RxCpltCallback+0x60>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	741a      	strb	r2, [r3, #16]
		//prepareForNextMeasurements(buffer_uart_rx);
		receivedChars[(receivedCharIndex++) % 50] = buffer_uart_rx[0];
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_UART_RxCpltCallback+0x64>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	b2d1      	uxtb	r1, r2
 8001bf2:	4a0e      	ldr	r2, [pc, #56]	; (8001c2c <HAL_UART_RxCpltCallback+0x64>)
 8001bf4:	7011      	strb	r1, [r2, #0]
 8001bf6:	4a0e      	ldr	r2, [pc, #56]	; (8001c30 <HAL_UART_RxCpltCallback+0x68>)
 8001bf8:	fba2 1203 	umull	r1, r2, r2, r3
 8001bfc:	0912      	lsrs	r2, r2, #4
 8001bfe:	2132      	movs	r1, #50	; 0x32
 8001c00:	fb01 f202 	mul.w	r2, r1, r2
 8001c04:	1a9b      	subs	r3, r3, r2
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <HAL_UART_RxCpltCallback+0x58>)
 8001c0c:	7819      	ldrb	r1, [r3, #0]
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_UART_RxCpltCallback+0x6c>)
 8001c10:	5499      	strb	r1, [r3, r2]
	}
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40004800 	.word	0x40004800
 8001c20:	20004310 	.word	0x20004310
 8001c24:	20004244 	.word	0x20004244
 8001c28:	2002f4a4 	.word	0x2002f4a4
 8001c2c:	2002f738 	.word	0x2002f738
 8001c30:	51eb851f 	.word	0x51eb851f
 8001c34:	2002f6c4 	.word	0x2002f6c4

08001c38 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	filledBuffersExtADC++;
 8001c40:	4b3e      	ldr	r3, [pc, #248]	; (8001d3c <HAL_SPI_RxCpltCallback+0x104>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	3301      	adds	r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	4b3c      	ldr	r3, [pc, #240]	; (8001d3c <HAL_SPI_RxCpltCallback+0x104>)
 8001c4a:	701a      	strb	r2, [r3, #0]

	// turn off timers
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	483c      	ldr	r0, [pc, #240]	; (8001d40 <HAL_SPI_RxCpltCallback+0x108>)
 8001c50:	f004 fe3a 	bl	80068c8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001c54:	2104      	movs	r1, #4
 8001c56:	483a      	ldr	r0, [pc, #232]	; (8001d40 <HAL_SPI_RxCpltCallback+0x108>)
 8001c58:	f004 fe36 	bl	80068c8 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4839      	ldr	r0, [pc, #228]	; (8001d44 <HAL_SPI_RxCpltCallback+0x10c>)
 8001c60:	f004 fe32 	bl	80068c8 <HAL_TIM_PWM_Stop_IT>
	SPI1->CR2 &= ~SPI_CR2_RXDMAEN;
 8001c64:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <HAL_SPI_RxCpltCallback+0x110>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a37      	ldr	r2, [pc, #220]	; (8001d48 <HAL_SPI_RxCpltCallback+0x110>)
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	6053      	str	r3, [r2, #4]

	//first buffer is filled
	if (filledBuffersExtADC == 1) {
 8001c70:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_SPI_RxCpltCallback+0x104>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d114      	bne.n	8001ca2 <HAL_SPI_RxCpltCallback+0x6a>

		HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_2.uint8, samplesPerPeriod);
 8001c78:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <HAL_SPI_RxCpltCallback+0x114>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4933      	ldr	r1, [pc, #204]	; (8001d50 <HAL_SPI_RxCpltCallback+0x118>)
 8001c82:	4834      	ldr	r0, [pc, #208]	; (8001d54 <HAL_SPI_RxCpltCallback+0x11c>)
 8001c84:	f003 ffde 	bl	8005c44 <HAL_SPI_Receive_DMA>

		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	482d      	ldr	r0, [pc, #180]	; (8001d40 <HAL_SPI_RxCpltCallback+0x108>)
 8001c8c:	f004 fd92 	bl	80067b4 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
 8001c90:	2104      	movs	r1, #4
 8001c92:	482b      	ldr	r0, [pc, #172]	; (8001d40 <HAL_SPI_RxCpltCallback+0x108>)
 8001c94:	f004 fd8e 	bl	80067b4 <HAL_TIM_PWM_Start_IT>
		HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	482a      	ldr	r0, [pc, #168]	; (8001d44 <HAL_SPI_RxCpltCallback+0x10c>)
 8001c9c:	f004 fd8a 	bl	80067b4 <HAL_TIM_PWM_Start_IT>
			if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
				state.preparedToRunPolarizationPhase = 1;
			}
		}
	}
}
 8001ca0:	e047      	b.n	8001d32 <HAL_SPI_RxCpltCallback+0xfa>
	else if (filledBuffersExtADC == 2) {
 8001ca2:	4b26      	ldr	r3, [pc, #152]	; (8001d3c <HAL_SPI_RxCpltCallback+0x104>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d143      	bne.n	8001d32 <HAL_SPI_RxCpltCallback+0xfa>
		set_LED2(0);
 8001caa:	2000      	movs	r0, #0
 8001cac:	f7ff fd98 	bl	80017e0 <set_LED2>
		state.extAdcReadyToSend = 1;
 8001cb0:	4b29      	ldr	r3, [pc, #164]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	701a      	strb	r2, [r3, #0]
		state.extAdcMeasuring = 0;
 8001cb6:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	719a      	strb	r2, [r3, #6]
		filledBuffersExtADC = 0;
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <HAL_SPI_RxCpltCallback+0x104>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
		if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001cc4:	799b      	ldrb	r3, [r3, #6]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d118      	bne.n	8001cfc <HAL_SPI_RxCpltCallback+0xc4>
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001ccc:	79db      	ldrb	r3, [r3, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d114      	bne.n	8001cfc <HAL_SPI_RxCpltCallback+0xc4>
 8001cd2:	4b21      	ldr	r3, [pc, #132]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001cd4:	7a1b      	ldrb	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d110      	bne.n	8001cfc <HAL_SPI_RxCpltCallback+0xc4>
			switchingCircuitIdle();
 8001cda:	f7ff fdb7 	bl	800184c <switchingCircuitIdle>
			if (state.remainingMeasurements != -1) {
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001ce0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce8:	d008      	beq.n	8001cfc <HAL_SPI_RxCpltCallback+0xc4>
				state.remainingMeasurements--;
 8001cea:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001cec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	b21a      	sxth	r2, r3
 8001cf8:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001cfa:	819a      	strh	r2, [r3, #12]
		if (state.remainingMeasurements == 0) {
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001cfe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d106      	bne.n	8001d14 <HAL_SPI_RxCpltCallback+0xdc>
			state.extAdcActiveState = 0;
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	70da      	strb	r2, [r3, #3]
			state.extAdcSetState = 0;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	725a      	strb	r2, [r3, #9]
}
 8001d12:	e00e      	b.n	8001d32 <HAL_SPI_RxCpltCallback+0xfa>
			if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001d16:	799b      	ldrb	r3, [r3, #6]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <HAL_SPI_RxCpltCallback+0xfa>
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001d1e:	79db      	ldrb	r3, [r3, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d106      	bne.n	8001d32 <HAL_SPI_RxCpltCallback+0xfa>
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001d26:	7a1b      	ldrb	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <HAL_SPI_RxCpltCallback+0xfa>
				state.preparedToRunPolarizationPhase = 1;
 8001d2c:	4b0a      	ldr	r3, [pc, #40]	; (8001d58 <HAL_SPI_RxCpltCallback+0x120>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	745a      	strb	r2, [r3, #17]
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20000200 	.word	0x20000200
 8001d40:	2002f73c 	.word	0x2002f73c
 8001d44:	200041c4 	.word	0x200041c4
 8001d48:	40013000 	.word	0x40013000
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20019b9c 	.word	0x20019b9c
 8001d54:	2002f77c 	.word	0x2002f77c
 8001d58:	2002f4a4 	.word	0x2002f4a4

08001d5c <parseText>:

int parseText() {
 8001d5c:	b5b0      	push	{r4, r5, r7, lr}
 8001d5e:	b0a6      	sub	sp, #152	; 0x98
 8001d60:	af00      	add	r7, sp, #0
	//-------------------------------------------------------------------------------------
	//check if there is two times character * indicating complete command
	//-------------------------------------------------------------------------------------
	uint8_t i, indexOfFirstSpecialChar, indexOfSecondSpecialChar, specialCharCount = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	char msg_buffers[80];
	char receivedCommand[50];

	for (i = 0; i < strlen(receivedCommand); i++) {
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d6e:	e00c      	b.n	8001d8a <parseText+0x2e>
		receivedCommand[i] = '\0';
 8001d70:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d74:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001d78:	4413      	add	r3, r2
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f803 2c94 	strb.w	r2, [r3, #-148]
	for (i = 0; i < strlen(receivedCommand); i++) {
 8001d80:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001d84:	3301      	adds	r3, #1
 8001d86:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001d8a:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fa5f 	bl	8000254 <strlen>
 8001d96:	4603      	mov	r3, r0
 8001d98:	429c      	cmp	r4, r3
 8001d9a:	d3e9      	bcc.n	8001d70 <parseText+0x14>
	}
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001da2:	e00c      	b.n	8001dbe <parseText+0x62>
		msg_buffers[i] = '\0';
 8001da4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001da8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001dac:	4413      	add	r3, r2
 8001dae:	2200      	movs	r2, #0
 8001db0:	f803 2c60 	strb.w	r2, [r3, #-96]
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001db4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001db8:	3301      	adds	r3, #1
 8001dba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001dbe:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001dc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fa44 	bl	8000254 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	429c      	cmp	r4, r3
 8001dd0:	d3e8      	bcc.n	8001da4 <parseText+0x48>
	}
	for (i = 0; i < strlen(receivedChars); i++) {
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001dd8:	e020      	b.n	8001e1c <parseText+0xc0>
		if (receivedChars[i] == '*') {
 8001dda:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001dde:	4abb      	ldr	r2, [pc, #748]	; (80020cc <parseText+0x370>)
 8001de0:	5cd3      	ldrb	r3, [r2, r3]
 8001de2:	2b2a      	cmp	r3, #42	; 0x2a
 8001de4:	d115      	bne.n	8001e12 <parseText+0xb6>
			if (specialCharCount == 0) {
 8001de6:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d104      	bne.n	8001df8 <parseText+0x9c>
				indexOfFirstSpecialChar = i;
 8001dee:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001df2:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8001df6:	e007      	b.n	8001e08 <parseText+0xac>
			} else if (specialCharCount == 1) {
 8001df8:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d103      	bne.n	8001e08 <parseText+0xac>
				indexOfSecondSpecialChar = i;
 8001e00:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e04:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			}
			specialCharCount++;
 8001e08:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	for (i = 0; i < strlen(receivedChars); i++) {
 8001e12:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001e16:	3301      	adds	r3, #1
 8001e18:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001e1c:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001e20:	48aa      	ldr	r0, [pc, #680]	; (80020cc <parseText+0x370>)
 8001e22:	f7fe fa17 	bl	8000254 <strlen>
 8001e26:	4603      	mov	r3, r0
 8001e28:	429c      	cmp	r4, r3
 8001e2a:	d3d6      	bcc.n	8001dda <parseText+0x7e>
		}
	}
	//received message is not complete
	if (specialCharCount == 1) {
 8001e2c:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <parseText+0xdc>
		return 0;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e1ad      	b.n	8002194 <parseText+0x438>
	}
	// received message is complete ->
	else if (specialCharCount == 2) {
 8001e38:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d150      	bne.n	8001ee2 <parseText+0x186>
		sprintf(msg_buffers, "*INFO:Message accepted*\n");
 8001e40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e44:	4aa2      	ldr	r2, [pc, #648]	; (80020d0 <parseText+0x374>)
 8001e46:	461c      	mov	r4, r3
 8001e48:	4615      	mov	r5, r2
 8001e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e52:	c403      	stmia	r4!, {r0, r1}
 8001e54:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8001e56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7fe f9fa 	bl	8000254 <strlen>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	4899      	ldr	r0, [pc, #612]	; (80020d4 <parseText+0x378>)
 8001e6e:	f006 fb27 	bl	80084c0 <HAL_UART_Transmit>
	}

	//-------------------------------------------------------------------------------------
	// get string between special chars (Only if specialCharCount == 2)
	//-------------------------------------------------------------------------------------
	strncpy(receivedCommand, receivedChars + indexOfFirstSpecialChar + 1, indexOfSecondSpecialChar - indexOfFirstSpecialChar - 1);
 8001e72:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001e76:	3301      	adds	r3, #1
 8001e78:	4a94      	ldr	r2, [pc, #592]	; (80020cc <parseText+0x370>)
 8001e7a:	1899      	adds	r1, r3, r2
 8001e7c:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001e80:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	461a      	mov	r2, r3
 8001e8a:	1d3b      	adds	r3, r7, #4
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f007 fb07 	bl	80094a0 <strncpy>
	receivedCommand[indexOfSecondSpecialChar - indexOfFirstSpecialChar - 1] = '\0';
 8001e92:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8001e96:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001ea2:	4413      	add	r3, r2
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f803 2c94 	strb.w	r2, [r3, #-148]

	char *command = strtok(receivedCommand, ":");
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	498a      	ldr	r1, [pc, #552]	; (80020d8 <parseText+0x37c>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f007 fb0c 	bl	80094cc <strtok>
 8001eb4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	char *method = strtok(NULL, ":");
 8001eb8:	4987      	ldr	r1, [pc, #540]	; (80020d8 <parseText+0x37c>)
 8001eba:	2000      	movs	r0, #0
 8001ebc:	f007 fb06 	bl	80094cc <strtok>
 8001ec0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	char *count = strtok(NULL, ":");
 8001ec4:	4984      	ldr	r1, [pc, #528]	; (80020d8 <parseText+0x37c>)
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	f007 fb00 	bl	80094cc <strtok>
 8001ecc:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

	//*IDN*
	if (strcmp(command, "IDN") == 0) {
 8001ed0:	4982      	ldr	r1, [pc, #520]	; (80020dc <parseText+0x380>)
 8001ed2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001ed6:	f7fe f9b3 	bl	8000240 <strcmp>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d125      	bne.n	8001f2c <parseText+0x1d0>
 8001ee0:	e009      	b.n	8001ef6 <parseText+0x19a>
	else if (specialCharCount > 2) {
 8001ee2:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d903      	bls.n	8001ef2 <parseText+0x196>
		clearReceivedCharsBuffer(); // receivedChars needs to be cleared
 8001eea:	f000 f95f 	bl	80021ac <clearReceivedCharsBuffer>
		return 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e150      	b.n	8002194 <parseText+0x438>
		return 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	e14e      	b.n	8002194 <parseText+0x438>
		sprintf(msg_buffers, "This is proton precession magnetometer - version 1\n");
 8001ef6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001efa:	4a79      	ldr	r2, [pc, #484]	; (80020e0 <parseText+0x384>)
 8001efc:	461c      	mov	r4, r3
 8001efe:	4615      	mov	r5, r2
 8001f00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f0c:	682b      	ldr	r3, [r5, #0]
 8001f0e:	6023      	str	r3, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8001f10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe f99d 	bl	8000254 <strlen>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
 8001f26:	486b      	ldr	r0, [pc, #428]	; (80020d4 <parseText+0x378>)
 8001f28:	f006 faca 	bl	80084c0 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
	}
	//*SET:parameter:value*
	if (strcmp(command, "SET") == 0) {
 8001f2c:	496d      	ldr	r1, [pc, #436]	; (80020e4 <parseText+0x388>)
 8001f2e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001f32:	f7fe f985 	bl	8000240 <strcmp>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d127      	bne.n	8001f8c <parseText+0x230>
		//polarization time
		if (strcmp(method, "polT") == 0) {
 8001f3c:	496a      	ldr	r1, [pc, #424]	; (80020e8 <parseText+0x38c>)
 8001f3e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001f42:	f7fe f97d 	bl	8000240 <strcmp>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f040 8121 	bne.w	8002190 <parseText+0x434>
			//convert received string to integer
			polarizationTime = atoi(count);
 8001f4e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001f52:	f007 fa4e 	bl	80093f2 <atoi>
 8001f56:	4603      	mov	r3, r0
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b64      	ldr	r3, [pc, #400]	; (80020ec <parseText+0x390>)
 8001f5c:	601a      	str	r2, [r3, #0]

			//min = 5 seconds
			if (polarizationTime < 5000) {
 8001f5e:	4b63      	ldr	r3, [pc, #396]	; (80020ec <parseText+0x390>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f241 3287 	movw	r2, #4999	; 0x1387
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d804      	bhi.n	8001f74 <parseText+0x218>
				polarizationTime = 5000;
 8001f6a:	4b60      	ldr	r3, [pc, #384]	; (80020ec <parseText+0x390>)
 8001f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	e10d      	b.n	8002190 <parseText+0x434>
			}
			//max = 60 seconds
			else if (polarizationTime > 60000) {
 8001f74:	4b5d      	ldr	r3, [pc, #372]	; (80020ec <parseText+0x390>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	f240 8107 	bls.w	8002190 <parseText+0x434>
				polarizationTime = 60000;
 8001f82:	4b5a      	ldr	r3, [pc, #360]	; (80020ec <parseText+0x390>)
 8001f84:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e101      	b.n	8002190 <parseText+0x434>
			}
		}
	}
	//*MEAS:method:count*
	else if (strcmp(command, "MEAS") == 0) {
 8001f8c:	4958      	ldr	r1, [pc, #352]	; (80020f0 <parseText+0x394>)
 8001f8e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001f92:	f7fe f955 	bl	8000240 <strcmp>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f040 80f9 	bne.w	8002190 <parseText+0x434>
		//external ADC only
		if (strcmp(method, "extADC") == 0) {
 8001f9e:	4955      	ldr	r1, [pc, #340]	; (80020f4 <parseText+0x398>)
 8001fa0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001fa4:	f7fe f94c 	bl	8000240 <strcmp>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10c      	bne.n	8001fc8 <parseText+0x26c>
			state.extAdcSetState = 1;
 8001fae:	4b52      	ldr	r3, [pc, #328]	; (80020f8 <parseText+0x39c>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 8001fb4:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <parseText+0x39c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8001fba:	4b4f      	ldr	r3, [pc, #316]	; (80020f8 <parseText+0x39c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <parseText+0x39c>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	741a      	strb	r2, [r3, #16]
 8001fc6:	e0c5      	b.n	8002154 <parseText+0x3f8>
		}
		//internal ADC only
		else if (strcmp(method, "intADC") == 0) {
 8001fc8:	494c      	ldr	r1, [pc, #304]	; (80020fc <parseText+0x3a0>)
 8001fca:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001fce:	f7fe f937 	bl	8000240 <strcmp>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d10c      	bne.n	8001ff2 <parseText+0x296>
			state.extAdcSetState = 0;
 8001fd8:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <parseText+0x39c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8001fde:	4b46      	ldr	r3, [pc, #280]	; (80020f8 <parseText+0x39c>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8001fe4:	4b44      	ldr	r3, [pc, #272]	; (80020f8 <parseText+0x39c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8001fea:	4b43      	ldr	r3, [pc, #268]	; (80020f8 <parseText+0x39c>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	741a      	strb	r2, [r3, #16]
 8001ff0:	e0b0      	b.n	8002154 <parseText+0x3f8>
		}
		//comparator only
		else if (strcmp(method, "comp") == 0) {
 8001ff2:	4943      	ldr	r1, [pc, #268]	; (8002100 <parseText+0x3a4>)
 8001ff4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001ff8:	f7fe f922 	bl	8000240 <strcmp>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10c      	bne.n	800201c <parseText+0x2c0>
			state.extAdcSetState = 0;
 8002002:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <parseText+0x39c>)
 8002004:	2200      	movs	r2, #0
 8002006:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 8002008:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <parseText+0x39c>)
 800200a:	2200      	movs	r2, #0
 800200c:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <parseText+0x39c>)
 8002010:	2201      	movs	r2, #1
 8002012:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8002014:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <parseText+0x39c>)
 8002016:	2201      	movs	r2, #1
 8002018:	741a      	strb	r2, [r3, #16]
 800201a:	e09b      	b.n	8002154 <parseText+0x3f8>
		}
		//external ADC + internal ADC
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 800201c:	4939      	ldr	r1, [pc, #228]	; (8002104 <parseText+0x3a8>)
 800201e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002022:	f7fe f90d 	bl	8000240 <strcmp>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <parseText+0x2e0>
 800202c:	4936      	ldr	r1, [pc, #216]	; (8002108 <parseText+0x3ac>)
 800202e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002032:	f7fe f905 	bl	8000240 <strcmp>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10c      	bne.n	8002056 <parseText+0x2fa>
			state.extAdcSetState = 1;
 800203c:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <parseText+0x39c>)
 800203e:	2201      	movs	r2, #1
 8002040:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8002042:	4b2d      	ldr	r3, [pc, #180]	; (80020f8 <parseText+0x39c>)
 8002044:	2201      	movs	r2, #1
 8002046:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8002048:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <parseText+0x39c>)
 800204a:	2200      	movs	r2, #0
 800204c:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 800204e:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <parseText+0x39c>)
 8002050:	2201      	movs	r2, #1
 8002052:	741a      	strb	r2, [r3, #16]
 8002054:	e07e      	b.n	8002154 <parseText+0x3f8>
		}
		//external ADC + comparator
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 8002056:	492d      	ldr	r1, [pc, #180]	; (800210c <parseText+0x3b0>)
 8002058:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800205c:	f7fe f8f0 	bl	8000240 <strcmp>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <parseText+0x31a>
 8002066:	492a      	ldr	r1, [pc, #168]	; (8002110 <parseText+0x3b4>)
 8002068:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800206c:	f7fe f8e8 	bl	8000240 <strcmp>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10c      	bne.n	8002090 <parseText+0x334>
			state.extAdcSetState = 1;
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <parseText+0x39c>)
 8002078:	2201      	movs	r2, #1
 800207a:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 800207c:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <parseText+0x39c>)
 800207e:	2200      	movs	r2, #0
 8002080:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <parseText+0x39c>)
 8002084:	2201      	movs	r2, #1
 8002086:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8002088:	4b1b      	ldr	r3, [pc, #108]	; (80020f8 <parseText+0x39c>)
 800208a:	2201      	movs	r2, #1
 800208c:	741a      	strb	r2, [r3, #16]
 800208e:	e061      	b.n	8002154 <parseText+0x3f8>
		}
		//internal ADC + comparator
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 8002090:	4920      	ldr	r1, [pc, #128]	; (8002114 <parseText+0x3b8>)
 8002092:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002096:	f7fe f8d3 	bl	8000240 <strcmp>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <parseText+0x354>
 80020a0:	491d      	ldr	r1, [pc, #116]	; (8002118 <parseText+0x3bc>)
 80020a2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80020a6:	f7fe f8cb 	bl	8000240 <strcmp>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d135      	bne.n	800211c <parseText+0x3c0>
			state.extAdcSetState = 0;
 80020b0:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <parseText+0x39c>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 80020b6:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <parseText+0x39c>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <parseText+0x39c>)
 80020be:	2201      	movs	r2, #1
 80020c0:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <parseText+0x39c>)
 80020c4:	2201      	movs	r2, #1
 80020c6:	741a      	strb	r2, [r3, #16]
 80020c8:	e044      	b.n	8002154 <parseText+0x3f8>
 80020ca:	bf00      	nop
 80020cc:	2002f6c4 	.word	0x2002f6c4
 80020d0:	08009eec 	.word	0x08009eec
 80020d4:	20004244 	.word	0x20004244
 80020d8:	08009f08 	.word	0x08009f08
 80020dc:	08009f0c 	.word	0x08009f0c
 80020e0:	08009f10 	.word	0x08009f10
 80020e4:	08009f44 	.word	0x08009f44
 80020e8:	08009f48 	.word	0x08009f48
 80020ec:	20000004 	.word	0x20000004
 80020f0:	08009f50 	.word	0x08009f50
 80020f4:	08009f58 	.word	0x08009f58
 80020f8:	2002f4a4 	.word	0x2002f4a4
 80020fc:	08009f60 	.word	0x08009f60
 8002100:	08009f68 	.word	0x08009f68
 8002104:	08009f70 	.word	0x08009f70
 8002108:	08009f80 	.word	0x08009f80
 800210c:	08009f90 	.word	0x08009f90
 8002110:	08009f9c 	.word	0x08009f9c
 8002114:	08009fa8 	.word	0x08009fa8
 8002118:	08009fb4 	.word	0x08009fb4
		}
		//external ADC + internal ADC + comparator
		else if ((strcmp(method, "extADC+intADC+comp") == 0) || (strcmp(method, "intADC+extADC+comp") == 0)) {
 800211c:	491f      	ldr	r1, [pc, #124]	; (800219c <parseText+0x440>)
 800211e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002122:	f7fe f88d 	bl	8000240 <strcmp>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d007      	beq.n	800213c <parseText+0x3e0>
 800212c:	491c      	ldr	r1, [pc, #112]	; (80021a0 <parseText+0x444>)
 800212e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002132:	f7fe f885 	bl	8000240 <strcmp>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d10b      	bne.n	8002154 <parseText+0x3f8>
			state.compSetState = 1;
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <parseText+0x448>)
 800213e:	2201      	movs	r2, #1
 8002140:	72da      	strb	r2, [r3, #11]
			state.extAdcSetState = 1;
 8002142:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <parseText+0x448>)
 8002144:	2201      	movs	r2, #1
 8002146:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <parseText+0x448>)
 800214a:	2201      	movs	r2, #1
 800214c:	729a      	strb	r2, [r3, #10]
			state.measureTechniqueUpdated = 1;
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <parseText+0x448>)
 8002150:	2201      	movs	r2, #1
 8002152:	741a      	strb	r2, [r3, #16]
		} else /* default: */
		{

		}
		if (strcmp(count, "INF") == 0) {
 8002154:	4914      	ldr	r1, [pc, #80]	; (80021a8 <parseText+0x44c>)
 8002156:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800215a:	f7fe f871 	bl	8000240 <strcmp>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d104      	bne.n	800216e <parseText+0x412>
			state.setMeasurements = -1;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <parseText+0x448>)
 8002166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800216a:	81da      	strh	r2, [r3, #14]
 800216c:	e010      	b.n	8002190 <parseText+0x434>
		} else if (strcmp(count, "") == 0) {
 800216e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d103      	bne.n	8002180 <parseText+0x424>
			state.setMeasurements = 1;
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <parseText+0x448>)
 800217a:	2201      	movs	r2, #1
 800217c:	81da      	strh	r2, [r3, #14]
 800217e:	e007      	b.n	8002190 <parseText+0x434>
		} else {
			state.setMeasurements = atoi(count);
 8002180:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002184:	f007 f935 	bl	80093f2 <atoi>
 8002188:	4603      	mov	r3, r0
 800218a:	b21a      	sxth	r2, r3
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <parseText+0x448>)
 800218e:	81da      	strh	r2, [r3, #14]
	}
	/* more else if clauses */
	else /* default: */
	{
	}
	clearReceivedCharsBuffer();
 8002190:	f000 f80c 	bl	80021ac <clearReceivedCharsBuffer>
}
 8002194:	4618      	mov	r0, r3
 8002196:	3798      	adds	r7, #152	; 0x98
 8002198:	46bd      	mov	sp, r7
 800219a:	bdb0      	pop	{r4, r5, r7, pc}
 800219c:	08009fc0 	.word	0x08009fc0
 80021a0:	08009fd4 	.word	0x08009fd4
 80021a4:	2002f4a4 	.word	0x2002f4a4
 80021a8:	08009fe8 	.word	0x08009fe8

080021ac <clearReceivedCharsBuffer>:

void clearReceivedCharsBuffer() {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
	int i = 0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	607b      	str	r3, [r7, #4]
	receivedCharIndex = 0;
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <clearReceivedCharsBuffer+0x3c>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < strlen(receivedChars); i++) {
 80021bc:	2300      	movs	r3, #0
 80021be:	607b      	str	r3, [r7, #4]
 80021c0:	e007      	b.n	80021d2 <clearReceivedCharsBuffer+0x26>
		receivedChars[i] = '\0';
 80021c2:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <clearReceivedCharsBuffer+0x40>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < strlen(receivedChars); i++) {
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3301      	adds	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4806      	ldr	r0, [pc, #24]	; (80021ec <clearReceivedCharsBuffer+0x40>)
 80021d4:	f7fe f83e 	bl	8000254 <strlen>
 80021d8:	4602      	mov	r2, r0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d8f0      	bhi.n	80021c2 <clearReceivedCharsBuffer+0x16>
	}
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	2002f738 	.word	0x2002f738
 80021ec:	2002f6c4 	.word	0x2002f6c4

080021f0 <sendMeasuredData>:

void sendMeasuredData() {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08c      	sub	sp, #48	; 0x30
 80021f4:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[16];
	uint16_t adc = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	857b      	strh	r3, [r7, #42]	; 0x2a
	int i = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((state.extAdcReadyToSend == 1)) {
 80021fe:	4ba7      	ldr	r3, [pc, #668]	; (800249c <sendMeasuredData+0x2ac>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d170      	bne.n	80022e8 <sendMeasuredData+0xf8>
		set_LED1(0, 0, 1);
 8002206:	2201      	movs	r2, #1
 8002208:	2100      	movs	r1, #0
 800220a:	2000      	movs	r0, #0
 800220c:	f7ff fac4 	bl	8001798 <set_LED1>
		sprintf(msg_buffers, "*extADC:\n");
 8002210:	1d3b      	adds	r3, r7, #4
 8002212:	4aa3      	ldr	r2, [pc, #652]	; (80024a0 <sendMeasuredData+0x2b0>)
 8002214:	ca07      	ldmia	r2, {r0, r1, r2}
 8002216:	c303      	stmia	r3!, {r0, r1}
 8002218:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 800221a:	1d3b      	adds	r3, r7, #4
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe f819 	bl	8000254 <strlen>
 8002222:	4603      	mov	r3, r0
 8002224:	b29a      	uxth	r2, r3
 8002226:	1d39      	adds	r1, r7, #4
 8002228:	f04f 33ff 	mov.w	r3, #4294967295
 800222c:	489d      	ldr	r0, [pc, #628]	; (80024a4 <sendMeasuredData+0x2b4>)
 800222e:	f006 f947 	bl	80084c0 <HAL_UART_Transmit>
		HAL_MAX_DELAY);

		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8002232:	2300      	movs	r3, #0
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002236:	e019      	b.n	800226c <sendMeasuredData+0x7c>
			adc = (buffer_extAdc_1.uint16[i]);
 8002238:	4a9b      	ldr	r2, [pc, #620]	; (80024a8 <sendMeasuredData+0x2b8>)
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002240:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 8002242:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002244:	1d3b      	adds	r3, r7, #4
 8002246:	4999      	ldr	r1, [pc, #612]	; (80024ac <sendMeasuredData+0x2bc>)
 8002248:	4618      	mov	r0, r3
 800224a:	f007 f909 	bl	8009460 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	4618      	mov	r0, r3
 8002252:	f7fd ffff 	bl	8000254 <strlen>
 8002256:	4603      	mov	r3, r0
 8002258:	b29a      	uxth	r2, r3
 800225a:	1d39      	adds	r1, r7, #4
 800225c:	f04f 33ff 	mov.w	r3, #4294967295
 8002260:	4890      	ldr	r0, [pc, #576]	; (80024a4 <sendMeasuredData+0x2b4>)
 8002262:	f006 f92d 	bl	80084c0 <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	3301      	adds	r3, #1
 800226a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800226c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800226e:	4b90      	ldr	r3, [pc, #576]	; (80024b0 <sendMeasuredData+0x2c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	d3e0      	bcc.n	8002238 <sendMeasuredData+0x48>
			 adc = (buffer_extAdc_1.uint8[i]);
			 sprintf(msg_buffers, "%c\n", adc);
			 HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);*/
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8002276:	2300      	movs	r3, #0
 8002278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800227a:	e019      	b.n	80022b0 <sendMeasuredData+0xc0>
			adc = (buffer_extAdc_2.uint16[i]);
 800227c:	4a8d      	ldr	r2, [pc, #564]	; (80024b4 <sendMeasuredData+0x2c4>)
 800227e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002284:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 8002286:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002288:	1d3b      	adds	r3, r7, #4
 800228a:	4988      	ldr	r1, [pc, #544]	; (80024ac <sendMeasuredData+0x2bc>)
 800228c:	4618      	mov	r0, r3
 800228e:	f007 f8e7 	bl	8009460 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	4618      	mov	r0, r3
 8002296:	f7fd ffdd 	bl	8000254 <strlen>
 800229a:	4603      	mov	r3, r0
 800229c:	b29a      	uxth	r2, r3
 800229e:	1d39      	adds	r1, r7, #4
 80022a0:	f04f 33ff 	mov.w	r3, #4294967295
 80022a4:	487f      	ldr	r0, [pc, #508]	; (80024a4 <sendMeasuredData+0x2b4>)
 80022a6:	f006 f90b 	bl	80084c0 <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	3301      	adds	r3, #1
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b2:	4b7f      	ldr	r3, [pc, #508]	; (80024b0 <sendMeasuredData+0x2c0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d3e0      	bcc.n	800227c <sendMeasuredData+0x8c>
			HAL_MAX_DELAY);
		}
		sprintf(msg_buffers, "*\n");
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	4a7e      	ldr	r2, [pc, #504]	; (80024b8 <sendMeasuredData+0x2c8>)
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	4611      	mov	r1, r2
 80022c2:	8019      	strh	r1, [r3, #0]
 80022c4:	3302      	adds	r3, #2
 80022c6:	0c12      	lsrs	r2, r2, #16
 80022c8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7fd ffc1 	bl	8000254 <strlen>
 80022d2:	4603      	mov	r3, r0
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	1d39      	adds	r1, r7, #4
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295
 80022dc:	4871      	ldr	r0, [pc, #452]	; (80024a4 <sendMeasuredData+0x2b4>)
 80022de:	f006 f8ef 	bl	80084c0 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		state.extAdcReadyToSend = 0;
 80022e2:	4b6e      	ldr	r3, [pc, #440]	; (800249c <sendMeasuredData+0x2ac>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
	}

	if ((state.intAdcReadyToSend == 1)) {
 80022e8:	4b6c      	ldr	r3, [pc, #432]	; (800249c <sendMeasuredData+0x2ac>)
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d170      	bne.n	80023d2 <sendMeasuredData+0x1e2>
		set_LED1(0, 0, 1);
 80022f0:	2201      	movs	r2, #1
 80022f2:	2100      	movs	r1, #0
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff fa4f 	bl	8001798 <set_LED1>
		sprintf(msg_buffers, "*intADC:\n");
 80022fa:	1d3b      	adds	r3, r7, #4
 80022fc:	4a6f      	ldr	r2, [pc, #444]	; (80024bc <sendMeasuredData+0x2cc>)
 80022fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8002300:	c303      	stmia	r3!, {r0, r1}
 8002302:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8002304:	1d3b      	adds	r3, r7, #4
 8002306:	4618      	mov	r0, r3
 8002308:	f7fd ffa4 	bl	8000254 <strlen>
 800230c:	4603      	mov	r3, r0
 800230e:	b29a      	uxth	r2, r3
 8002310:	1d39      	adds	r1, r7, #4
 8002312:	f04f 33ff 	mov.w	r3, #4294967295
 8002316:	4863      	ldr	r0, [pc, #396]	; (80024a4 <sendMeasuredData+0x2b4>)
 8002318:	f006 f8d2 	bl	80084c0 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002320:	e019      	b.n	8002356 <sendMeasuredData+0x166>
			adc = (buffer_intAdc_1.uint16[i]);
 8002322:	4a67      	ldr	r2, [pc, #412]	; (80024c0 <sendMeasuredData+0x2d0>)
 8002324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002326:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800232a:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 800232c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	495e      	ldr	r1, [pc, #376]	; (80024ac <sendMeasuredData+0x2bc>)
 8002332:	4618      	mov	r0, r3
 8002334:	f007 f894 	bl	8009460 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	4618      	mov	r0, r3
 800233c:	f7fd ff8a 	bl	8000254 <strlen>
 8002340:	4603      	mov	r3, r0
 8002342:	b29a      	uxth	r2, r3
 8002344:	1d39      	adds	r1, r7, #4
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	4856      	ldr	r0, [pc, #344]	; (80024a4 <sendMeasuredData+0x2b4>)
 800234c:	f006 f8b8 	bl	80084c0 <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8002350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002352:	3301      	adds	r3, #1
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002358:	4b55      	ldr	r3, [pc, #340]	; (80024b0 <sendMeasuredData+0x2c0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d3e0      	bcc.n	8002322 <sendMeasuredData+0x132>
			HAL_MAX_DELAY);
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8002360:	2300      	movs	r3, #0
 8002362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002364:	e019      	b.n	800239a <sendMeasuredData+0x1aa>
			adc = (buffer_intAdc_2.uint16[i]);
 8002366:	4a57      	ldr	r2, [pc, #348]	; (80024c4 <sendMeasuredData+0x2d4>)
 8002368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800236e:	857b      	strh	r3, [r7, #42]	; 0x2a
			sprintf(msg_buffers, "%hu\n", adc);
 8002370:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	494d      	ldr	r1, [pc, #308]	; (80024ac <sendMeasuredData+0x2bc>)
 8002376:	4618      	mov	r0, r3
 8002378:	f007 f872 	bl	8009460 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 800237c:	1d3b      	adds	r3, r7, #4
 800237e:	4618      	mov	r0, r3
 8002380:	f7fd ff68 	bl	8000254 <strlen>
 8002384:	4603      	mov	r3, r0
 8002386:	b29a      	uxth	r2, r3
 8002388:	1d39      	adds	r1, r7, #4
 800238a:	f04f 33ff 	mov.w	r3, #4294967295
 800238e:	4845      	ldr	r0, [pc, #276]	; (80024a4 <sendMeasuredData+0x2b4>)
 8002390:	f006 f896 	bl	80084c0 <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	3301      	adds	r3, #1
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800239a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800239c:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <sendMeasuredData+0x2c0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3e0      	bcc.n	8002366 <sendMeasuredData+0x176>
			HAL_MAX_DELAY);
		}
		sprintf(msg_buffers, "*\n");
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	4a44      	ldr	r2, [pc, #272]	; (80024b8 <sendMeasuredData+0x2c8>)
 80023a8:	6812      	ldr	r2, [r2, #0]
 80023aa:	4611      	mov	r1, r2
 80023ac:	8019      	strh	r1, [r3, #0]
 80023ae:	3302      	adds	r3, #2
 80023b0:	0c12      	lsrs	r2, r2, #16
 80023b2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 80023b4:	1d3b      	adds	r3, r7, #4
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fd ff4c 	bl	8000254 <strlen>
 80023bc:	4603      	mov	r3, r0
 80023be:	b29a      	uxth	r2, r3
 80023c0:	1d39      	adds	r1, r7, #4
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	4837      	ldr	r0, [pc, #220]	; (80024a4 <sendMeasuredData+0x2b4>)
 80023c8:	f006 f87a 	bl	80084c0 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		state.intAdcReadyToSend = 0;
 80023cc:	4b33      	ldr	r3, [pc, #204]	; (800249c <sendMeasuredData+0x2ac>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	705a      	strb	r2, [r3, #1]
	}

	if ((state.compReadyToSend == 1)) {
 80023d2:	4b32      	ldr	r3, [pc, #200]	; (800249c <sendMeasuredData+0x2ac>)
 80023d4:	789b      	ldrb	r3, [r3, #2]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d15c      	bne.n	8002494 <sendMeasuredData+0x2a4>
		set_LED1(0, 0, 1);
 80023da:	2201      	movs	r2, #1
 80023dc:	2100      	movs	r1, #0
 80023de:	2000      	movs	r0, #0
 80023e0:	f7ff f9da 	bl	8001798 <set_LED1>
		//send frequency
		sprintf(msg_buffers, "*comp:\n");
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	4a38      	ldr	r2, [pc, #224]	; (80024c8 <sendMeasuredData+0x2d8>)
 80023e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80023ec:	e883 0003 	stmia.w	r3, {r0, r1}
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7fd ff2e 	bl	8000254 <strlen>
 80023f8:	4603      	mov	r3, r0
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	1d39      	adds	r1, r7, #4
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	4828      	ldr	r0, [pc, #160]	; (80024a4 <sendMeasuredData+0x2b4>)
 8002404:	f006 f85c 	bl	80084c0 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		for (i = 0; i < 4000; i++) {
 8002408:	2300      	movs	r3, #0
 800240a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800240c:	e022      	b.n	8002454 <sendMeasuredData+0x264>
			uint32_t freq = buffer_comp[i + 1] - buffer_comp[i];
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	3301      	adds	r3, #1
 8002412:	4a2e      	ldr	r2, [pc, #184]	; (80024cc <sendMeasuredData+0x2dc>)
 8002414:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002418:	492c      	ldr	r1, [pc, #176]	; (80024cc <sendMeasuredData+0x2dc>)
 800241a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
			sprintf(msg_freq, "%d\n", freq);
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242a:	4929      	ldr	r1, [pc, #164]	; (80024d0 <sendMeasuredData+0x2e0>)
 800242c:	4618      	mov	r0, r3
 800242e:	f007 f817 	bl	8009460 <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq), HAL_MAX_DELAY);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4618      	mov	r0, r3
 8002438:	f7fd ff0c 	bl	8000254 <strlen>
 800243c:	4603      	mov	r3, r0
 800243e:	b29a      	uxth	r2, r3
 8002440:	f107 0114 	add.w	r1, r7, #20
 8002444:	f04f 33ff 	mov.w	r3, #4294967295
 8002448:	4816      	ldr	r0, [pc, #88]	; (80024a4 <sendMeasuredData+0x2b4>)
 800244a:	f006 f839 	bl	80084c0 <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002450:	3301      	adds	r3, #1
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800245a:	dbd8      	blt.n	800240e <sendMeasuredData+0x21e>
		}
		sprintf(msg_buffers, "*\n");
 800245c:	1d3b      	adds	r3, r7, #4
 800245e:	4a16      	ldr	r2, [pc, #88]	; (80024b8 <sendMeasuredData+0x2c8>)
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	4611      	mov	r1, r2
 8002464:	8019      	strh	r1, [r3, #0]
 8002466:	3302      	adds	r3, #2
 8002468:	0c12      	lsrs	r2, r2, #16
 800246a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers),
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	4618      	mov	r0, r3
 8002470:	f7fd fef0 	bl	8000254 <strlen>
 8002474:	4603      	mov	r3, r0
 8002476:	b29a      	uxth	r2, r3
 8002478:	1d39      	adds	r1, r7, #4
 800247a:	f04f 33ff 	mov.w	r3, #4294967295
 800247e:	4809      	ldr	r0, [pc, #36]	; (80024a4 <sendMeasuredData+0x2b4>)
 8002480:	f006 f81e 	bl	80084c0 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		set_LED1(0, 0, 0);
 8002484:	2200      	movs	r2, #0
 8002486:	2100      	movs	r1, #0
 8002488:	2000      	movs	r0, #0
 800248a:	f7ff f985 	bl	8001798 <set_LED1>
		state.compReadyToSend = 0;
 800248e:	4b03      	ldr	r3, [pc, #12]	; (800249c <sendMeasuredData+0x2ac>)
 8002490:	2200      	movs	r2, #0
 8002492:	709a      	strb	r2, [r3, #2]
	}
}
 8002494:	bf00      	nop
 8002496:	3730      	adds	r7, #48	; 0x30
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	2002f4a4 	.word	0x2002f4a4
 80024a0:	08009fec 	.word	0x08009fec
 80024a4:	20004244 	.word	0x20004244
 80024a8:	20045188 	.word	0x20045188
 80024ac:	08009ed8 	.word	0x08009ed8
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20019b9c 	.word	0x20019b9c
 80024b8:	08009ff8 	.word	0x08009ff8
 80024bc:	08009ffc 	.word	0x08009ffc
 80024c0:	2002f8a0 	.word	0x2002f8a0
 80024c4:	20004314 	.word	0x20004314
 80024c8:	0800a008 	.word	0x0800a008
 80024cc:	20000214 	.word	0x20000214
 80024d0:	08009ee8 	.word	0x08009ee8

080024d4 <updateState>:

void updateState() {
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
	state.remainingMeasurements = state.setMeasurements;
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <updateState+0x3c>)
 80024da:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <updateState+0x3c>)
 80024e0:	819a      	strh	r2, [r3, #12]
	state.extAdcActiveState = state.extAdcSetState;
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <updateState+0x3c>)
 80024e4:	7a5a      	ldrb	r2, [r3, #9]
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <updateState+0x3c>)
 80024e8:	70da      	strb	r2, [r3, #3]
	state.intAdcActiveState = state.intAdcSetState;
 80024ea:	4b09      	ldr	r3, [pc, #36]	; (8002510 <updateState+0x3c>)
 80024ec:	7a9a      	ldrb	r2, [r3, #10]
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <updateState+0x3c>)
 80024f0:	711a      	strb	r2, [r3, #4]
	state.compActiveState = state.compSetState;
 80024f2:	4b07      	ldr	r3, [pc, #28]	; (8002510 <updateState+0x3c>)
 80024f4:	7ada      	ldrb	r2, [r3, #11]
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <updateState+0x3c>)
 80024f8:	715a      	strb	r2, [r3, #5]
	state.preparedToRunPolarizationPhase = 1;
 80024fa:	4b05      	ldr	r3, [pc, #20]	; (8002510 <updateState+0x3c>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	745a      	strb	r2, [r3, #17]
	state.measureTechniqueUpdated = 0;
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <updateState+0x3c>)
 8002502:	2200      	movs	r2, #0
 8002504:	741a      	strb	r2, [r3, #16]
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	2002f4a4 	.word	0x2002f4a4

08002514 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
	...

08002524 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_MspInit+0x44>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252e:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <HAL_MspInit+0x44>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	6413      	str	r3, [r2, #64]	; 0x40
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_MspInit+0x44>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002542:	4b09      	ldr	r3, [pc, #36]	; (8002568 <HAL_MspInit+0x44>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002546:	4a08      	ldr	r2, [pc, #32]	; (8002568 <HAL_MspInit+0x44>)
 8002548:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800254c:	6453      	str	r3, [r2, #68]	; 0x44
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_MspInit+0x44>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800

0800256c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 0314 	add.w	r3, r7, #20
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a2c      	ldr	r2, [pc, #176]	; (800263c <HAL_ADC_MspInit+0xd0>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d152      	bne.n	8002634 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800258e:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_ADC_MspInit+0xd4>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a2b      	ldr	r2, [pc, #172]	; (8002640 <HAL_ADC_MspInit+0xd4>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_ADC_MspInit+0xd4>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a6:	4b26      	ldr	r3, [pc, #152]	; (8002640 <HAL_ADC_MspInit+0xd4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a25      	ldr	r2, [pc, #148]	; (8002640 <HAL_ADC_MspInit+0xd4>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b23      	ldr	r3, [pc, #140]	; (8002640 <HAL_ADC_MspInit+0xd4>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 80025be:	2301      	movs	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025c2:	2303      	movs	r3, #3
 80025c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	481c      	ldr	r0, [pc, #112]	; (8002644 <HAL_ADC_MspInit+0xd8>)
 80025d2:	f001 feb3 	bl	800433c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80025d6:	4b1c      	ldr	r3, [pc, #112]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025d8:	4a1c      	ldr	r2, [pc, #112]	; (800264c <HAL_ADC_MspInit+0xe0>)
 80025da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80025dc:	4b1a      	ldr	r3, [pc, #104]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025de:	2200      	movs	r2, #0
 80025e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025e2:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80025ee:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025f6:	4b14      	ldr	r3, [pc, #80]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 80025f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025fe:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 8002600:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002604:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002606:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 8002608:	2200      	movs	r2, #0
 800260a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800260c:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 800260e:	2200      	movs	r2, #0
 8002610:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 8002614:	2200      	movs	r2, #0
 8002616:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002618:	480b      	ldr	r0, [pc, #44]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 800261a:	f001 faf7 	bl	8003c0c <HAL_DMA_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8002624:	f7ff ff76 	bl	8002514 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a07      	ldr	r2, [pc, #28]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 800262c:	639a      	str	r2, [r3, #56]	; 0x38
 800262e:	4a06      	ldr	r2, [pc, #24]	; (8002648 <HAL_ADC_MspInit+0xdc>)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002634:	bf00      	nop
 8002636:	3728      	adds	r7, #40	; 0x28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40012000 	.word	0x40012000
 8002640:	40023800 	.word	0x40023800
 8002644:	40020000 	.word	0x40020000
 8002648:	2002f664 	.word	0x2002f664
 800264c:	40026470 	.word	0x40026470

08002650 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08c      	sub	sp, #48	; 0x30
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002658:	f107 031c 	add.w	r3, r7, #28
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a3d      	ldr	r2, [pc, #244]	; (8002764 <HAL_I2C_MspInit+0x114>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d128      	bne.n	80026c4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_I2C_MspInit+0x118>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	4a3c      	ldr	r2, [pc, #240]	; (8002768 <HAL_I2C_MspInit+0x118>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	6313      	str	r3, [r2, #48]	; 0x30
 800267e:	4b3a      	ldr	r3, [pc, #232]	; (8002768 <HAL_I2C_MspInit+0x118>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800268a:	23c0      	movs	r3, #192	; 0xc0
 800268c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800268e:	2312      	movs	r3, #18
 8002690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002692:	2301      	movs	r3, #1
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002696:	2303      	movs	r3, #3
 8002698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800269a:	2304      	movs	r3, #4
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800269e:	f107 031c 	add.w	r3, r7, #28
 80026a2:	4619      	mov	r1, r3
 80026a4:	4831      	ldr	r0, [pc, #196]	; (800276c <HAL_I2C_MspInit+0x11c>)
 80026a6:	f001 fe49 	bl	800433c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026aa:	4b2f      	ldr	r3, [pc, #188]	; (8002768 <HAL_I2C_MspInit+0x118>)
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	4a2e      	ldr	r2, [pc, #184]	; (8002768 <HAL_I2C_MspInit+0x118>)
 80026b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026b4:	6413      	str	r3, [r2, #64]	; 0x40
 80026b6:	4b2c      	ldr	r3, [pc, #176]	; (8002768 <HAL_I2C_MspInit+0x118>)
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80026c2:	e04a      	b.n	800275a <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a29      	ldr	r2, [pc, #164]	; (8002770 <HAL_I2C_MspInit+0x120>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d145      	bne.n	800275a <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ce:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_I2C_MspInit+0x118>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a25      	ldr	r2, [pc, #148]	; (8002768 <HAL_I2C_MspInit+0x118>)
 80026d4:	f043 0304 	orr.w	r3, r3, #4
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_I2C_MspInit+0x118>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0304 	and.w	r3, r3, #4
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_I2C_MspInit+0x118>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	4a1f      	ldr	r2, [pc, #124]	; (8002768 <HAL_I2C_MspInit+0x118>)
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	6313      	str	r3, [r2, #48]	; 0x30
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_I2C_MspInit+0x118>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002704:	2312      	movs	r3, #18
 8002706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002708:	2301      	movs	r3, #1
 800270a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270c:	2303      	movs	r3, #3
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002710:	2304      	movs	r3, #4
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002714:	f107 031c 	add.w	r3, r7, #28
 8002718:	4619      	mov	r1, r3
 800271a:	4816      	ldr	r0, [pc, #88]	; (8002774 <HAL_I2C_MspInit+0x124>)
 800271c:	f001 fe0e 	bl	800433c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002726:	2312      	movs	r3, #18
 8002728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800272a:	2301      	movs	r3, #1
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272e:	2303      	movs	r3, #3
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002732:	2304      	movs	r3, #4
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002736:	f107 031c 	add.w	r3, r7, #28
 800273a:	4619      	mov	r1, r3
 800273c:	480e      	ldr	r0, [pc, #56]	; (8002778 <HAL_I2C_MspInit+0x128>)
 800273e:	f001 fdfd 	bl	800433c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_I2C_MspInit+0x118>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <HAL_I2C_MspInit+0x118>)
 8002748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800274c:	6413      	str	r3, [r2, #64]	; 0x40
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_I2C_MspInit+0x118>)
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
}
 800275a:	bf00      	nop
 800275c:	3730      	adds	r7, #48	; 0x30
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40005400 	.word	0x40005400
 8002768:	40023800 	.word	0x40023800
 800276c:	40020400 	.word	0x40020400
 8002770:	40005c00 	.word	0x40005c00
 8002774:	40020800 	.word	0x40020800
 8002778:	40020000 	.word	0x40020000

0800277c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b08c      	sub	sp, #48	; 0x30
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002784:	f107 031c 	add.w	r3, r7, #28
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	609a      	str	r2, [r3, #8]
 8002790:	60da      	str	r2, [r3, #12]
 8002792:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a46      	ldr	r2, [pc, #280]	; (80028b4 <HAL_SPI_MspInit+0x138>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d158      	bne.n	8002850 <HAL_SPI_MspInit+0xd4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800279e:	4b46      	ldr	r3, [pc, #280]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	4a45      	ldr	r2, [pc, #276]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 80027a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027a8:	6453      	str	r3, [r2, #68]	; 0x44
 80027aa:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 80027ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027b2:	61bb      	str	r3, [r7, #24]
 80027b4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a3f      	ldr	r2, [pc, #252]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 80027ce:	23b0      	movs	r3, #176	; 0xb0
 80027d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027de:	2305      	movs	r3, #5
 80027e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e2:	f107 031c 	add.w	r3, r7, #28
 80027e6:	4619      	mov	r1, r3
 80027e8:	4834      	ldr	r0, [pc, #208]	; (80028bc <HAL_SPI_MspInit+0x140>)
 80027ea:	f001 fda7 	bl	800433c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80027ee:	4b34      	ldr	r3, [pc, #208]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 80027f0:	4a34      	ldr	r2, [pc, #208]	; (80028c4 <HAL_SPI_MspInit+0x148>)
 80027f2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80027f4:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 80027f6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80027fa:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027fc:	4b30      	ldr	r3, [pc, #192]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002802:	4b2f      	ldr	r3, [pc, #188]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 8002804:	2200      	movs	r2, #0
 8002806:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002808:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 800280a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800280e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 8002812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002816:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 800281a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800281e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002820:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002826:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800282c:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 800282e:	2200      	movs	r2, #0
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002832:	4823      	ldr	r0, [pc, #140]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 8002834:	f001 f9ea 	bl	8003c0c <HAL_DMA_Init>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 800283e:	f7ff fe69 	bl	8002514 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a1e      	ldr	r2, [pc, #120]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 8002846:	659a      	str	r2, [r3, #88]	; 0x58
 8002848:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <HAL_SPI_MspInit+0x144>)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 800284e:	e02c      	b.n	80028aa <HAL_SPI_MspInit+0x12e>
  else if(hspi->Instance==SPI4)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a1c      	ldr	r2, [pc, #112]	; (80028c8 <HAL_SPI_MspInit+0x14c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d127      	bne.n	80028aa <HAL_SPI_MspInit+0x12e>
    __HAL_RCC_SPI4_CLK_ENABLE();
 800285a:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285e:	4a16      	ldr	r2, [pc, #88]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 8002860:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002864:	6453      	str	r3, [r2, #68]	; 0x44
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 8002868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800286e:	613b      	str	r3, [r7, #16]
 8002870:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 8002878:	f043 0310 	orr.w	r3, r3, #16
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_SPI_MspInit+0x13c>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800288a:	2374      	movs	r3, #116	; 0x74
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800289a:	2305      	movs	r3, #5
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	4809      	ldr	r0, [pc, #36]	; (80028cc <HAL_SPI_MspInit+0x150>)
 80028a6:	f001 fd49 	bl	800433c <HAL_GPIO_Init>
}
 80028aa:	bf00      	nop
 80028ac:	3730      	adds	r7, #48	; 0x30
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	40013000 	.word	0x40013000
 80028b8:	40023800 	.word	0x40023800
 80028bc:	40020000 	.word	0x40020000
 80028c0:	20045128 	.word	0x20045128
 80028c4:	40026410 	.word	0x40026410
 80028c8:	40013400 	.word	0x40013400
 80028cc:	40021000 	.word	0x40021000

080028d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a41      	ldr	r2, [pc, #260]	; (80029e4 <HAL_TIM_Base_MspInit+0x114>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d114      	bne.n	800290c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028e2:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	4a40      	ldr	r2, [pc, #256]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6453      	str	r3, [r2, #68]	; 0x44
 80028ee:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 80028f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	61fb      	str	r3, [r7, #28]
 80028f8:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2101      	movs	r1, #1
 80028fe:	201b      	movs	r0, #27
 8002900:	f001 f94d 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002904:	201b      	movs	r0, #27
 8002906:	f001 f966 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800290a:	e066      	b.n	80029da <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM3)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a36      	ldr	r2, [pc, #216]	; (80029ec <HAL_TIM_Base_MspInit+0x11c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d114      	bne.n	8002940 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002916:	4b34      	ldr	r3, [pc, #208]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	4a33      	ldr	r2, [pc, #204]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	6413      	str	r3, [r2, #64]	; 0x40
 8002922:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	61bb      	str	r3, [r7, #24]
 800292c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2101      	movs	r1, #1
 8002932:	201d      	movs	r0, #29
 8002934:	f001 f933 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002938:	201d      	movs	r0, #29
 800293a:	f001 f94c 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
}
 800293e:	e04c      	b.n	80029da <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM5)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a2a      	ldr	r2, [pc, #168]	; (80029f0 <HAL_TIM_Base_MspInit+0x120>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d114      	bne.n	8002974 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	4a26      	ldr	r2, [pc, #152]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 8002950:	f043 0308 	orr.w	r3, r3, #8
 8002954:	6413      	str	r3, [r2, #64]	; 0x40
 8002956:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	617b      	str	r3, [r7, #20]
 8002960:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002962:	2200      	movs	r2, #0
 8002964:	2101      	movs	r1, #1
 8002966:	2032      	movs	r0, #50	; 0x32
 8002968:	f001 f919 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800296c:	2032      	movs	r0, #50	; 0x32
 800296e:	f001 f932 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
}
 8002972:	e032      	b.n	80029da <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM6)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1e      	ldr	r2, [pc, #120]	; (80029f4 <HAL_TIM_Base_MspInit+0x124>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d114      	bne.n	80029a8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800297e:	4b1a      	ldr	r3, [pc, #104]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 8002984:	f043 0310 	orr.w	r3, r3, #16
 8002988:	6413      	str	r3, [r2, #64]	; 0x40
 800298a:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	2036      	movs	r0, #54	; 0x36
 800299c:	f001 f8ff 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80029a0:	2036      	movs	r0, #54	; 0x36
 80029a2:	f001 f918 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
}
 80029a6:	e018      	b.n	80029da <HAL_TIM_Base_MspInit+0x10a>
  else if(htim_base->Instance==TIM8)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a12      	ldr	r2, [pc, #72]	; (80029f8 <HAL_TIM_Base_MspInit+0x128>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d113      	bne.n	80029da <HAL_TIM_Base_MspInit+0x10a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029b2:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a0c      	ldr	r2, [pc, #48]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 80029b8:	f043 0302 	orr.w	r3, r3, #2
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <HAL_TIM_Base_MspInit+0x118>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2101      	movs	r1, #1
 80029ce:	202e      	movs	r0, #46	; 0x2e
 80029d0:	f001 f8e5 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80029d4:	202e      	movs	r0, #46	; 0x2e
 80029d6:	f001 f8fe 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
}
 80029da:	bf00      	nop
 80029dc:	3720      	adds	r7, #32
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000c00 	.word	0x40000c00
 80029f4:	40001000 	.word	0x40001000
 80029f8:	40010400 	.word	0x40010400

080029fc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	; 0x28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1c:	d160      	bne.n	8002ae0 <HAL_TIM_IC_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a1e:	4b32      	ldr	r3, [pc, #200]	; (8002ae8 <HAL_TIM_IC_MspInit+0xec>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a31      	ldr	r2, [pc, #196]	; (8002ae8 <HAL_TIM_IC_MspInit+0xec>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ae8 <HAL_TIM_IC_MspInit+0xec>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	613b      	str	r3, [r7, #16]
 8002a34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	4b2c      	ldr	r3, [pc, #176]	; (8002ae8 <HAL_TIM_IC_MspInit+0xec>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a2b      	ldr	r2, [pc, #172]	; (8002ae8 <HAL_TIM_IC_MspInit+0xec>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <HAL_TIM_IC_MspInit+0xec>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8002a4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a54:	2302      	movs	r3, #2
 8002a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a60:	2301      	movs	r3, #1
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4820      	ldr	r0, [pc, #128]	; (8002aec <HAL_TIM_IC_MspInit+0xf0>)
 8002a6c:	f001 fc66 	bl	800433c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002a72:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <HAL_TIM_IC_MspInit+0xf8>)
 8002a74:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002a76:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002a78:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002a7c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002a8a:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a90:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002a94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a98:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002a9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aa0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002aa2:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002ab4:	480e      	ldr	r0, [pc, #56]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002ab6:	f001 f8a9 	bl	8003c0c <HAL_DMA_Init>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_TIM_IC_MspInit+0xc8>
    {
      Error_Handler();
 8002ac0:	f7ff fd28 	bl	8002514 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002ac8:	625a      	str	r2, [r3, #36]	; 0x24
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <HAL_TIM_IC_MspInit+0xf4>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	201c      	movs	r0, #28
 8002ad6:	f001 f862 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ada:	201c      	movs	r0, #28
 8002adc:	f001 f87b 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ae0:	bf00      	nop
 8002ae2:	3728      	adds	r7, #40	; 0x28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	40020000 	.word	0x40020000
 8002af0:	200040e4 	.word	0x200040e4
 8002af4:	40026088 	.word	0x40026088

08002af8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0d      	ldr	r2, [pc, #52]	; (8002b3c <HAL_TIM_PWM_MspInit+0x44>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d113      	bne.n	8002b32 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b0a:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <HAL_TIM_PWM_MspInit+0x48>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a0c      	ldr	r2, [pc, #48]	; (8002b40 <HAL_TIM_PWM_MspInit+0x48>)
 8002b10:	f043 0304 	orr.w	r3, r3, #4
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_TIM_PWM_MspInit+0x48>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 0304 	and.w	r3, r3, #4
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2101      	movs	r1, #1
 8002b26:	201e      	movs	r0, #30
 8002b28:	f001 f839 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b2c:	201e      	movs	r0, #30
 8002b2e:	f001 f852 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40023800 	.word	0x40023800

08002b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08c      	sub	sp, #48	; 0x30
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a45      	ldr	r2, [pc, #276]	; (8002c78 <HAL_TIM_MspPostInit+0x134>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d11d      	bne.n	8002ba2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b66:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a44      	ldr	r2, [pc, #272]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002b6c:	f043 0310 	orr.w	r3, r3, #16
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b42      	ldr	r3, [pc, #264]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0310 	and.w	r3, r3, #16
 8002b7a:	61bb      	str	r3, [r7, #24]
 8002b7c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 8002b7e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002b90:	2301      	movs	r3, #1
 8002b92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4839      	ldr	r0, [pc, #228]	; (8002c80 <HAL_TIM_MspPostInit+0x13c>)
 8002b9c:	f001 fbce 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002ba0:	e065      	b.n	8002c6e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a37      	ldr	r2, [pc, #220]	; (8002c84 <HAL_TIM_MspPostInit+0x140>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d11c      	bne.n	8002be6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bac:	4b33      	ldr	r3, [pc, #204]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	4a32      	ldr	r2, [pc, #200]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002bb2:	f043 0301 	orr.w	r3, r3, #1
 8002bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb8:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	617b      	str	r3, [r7, #20]
 8002bc2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 8002bc4:	2340      	movs	r3, #64	; 0x40
 8002bc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002bd8:	f107 031c 	add.w	r3, r7, #28
 8002bdc:	4619      	mov	r1, r3
 8002bde:	482a      	ldr	r0, [pc, #168]	; (8002c88 <HAL_TIM_MspPostInit+0x144>)
 8002be0:	f001 fbac 	bl	800433c <HAL_GPIO_Init>
}
 8002be4:	e043      	b.n	8002c6e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a28      	ldr	r2, [pc, #160]	; (8002c8c <HAL_TIM_MspPostInit+0x148>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d11d      	bne.n	8002c2c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bf0:	4b22      	ldr	r3, [pc, #136]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf4:	4a21      	ldr	r2, [pc, #132]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002bf6:	f043 0308 	orr.w	r3, r3, #8
 8002bfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfc:	4b1f      	ldr	r3, [pc, #124]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f003 0308 	and.w	r3, r3, #8
 8002c04:	613b      	str	r3, [r7, #16]
 8002c06:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 8002c08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 8002c1e:	f107 031c 	add.w	r3, r7, #28
 8002c22:	4619      	mov	r1, r3
 8002c24:	481a      	ldr	r0, [pc, #104]	; (8002c90 <HAL_TIM_MspPostInit+0x14c>)
 8002c26:	f001 fb89 	bl	800433c <HAL_GPIO_Init>
}
 8002c2a:	e020      	b.n	8002c6e <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_TIM_MspPostInit+0x150>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d11b      	bne.n	8002c6e <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	4a10      	ldr	r2, [pc, #64]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	6313      	str	r3, [r2, #48]	; 0x30
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <HAL_TIM_MspPostInit+0x138>)
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 8002c4e:	2340      	movs	r3, #64	; 0x40
 8002c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c52:	2302      	movs	r3, #2
 8002c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c56:	2300      	movs	r3, #0
 8002c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 8002c62:	f107 031c 	add.w	r3, r7, #28
 8002c66:	4619      	mov	r1, r3
 8002c68:	480b      	ldr	r0, [pc, #44]	; (8002c98 <HAL_TIM_MspPostInit+0x154>)
 8002c6a:	f001 fb67 	bl	800433c <HAL_GPIO_Init>
}
 8002c6e:	bf00      	nop
 8002c70:	3730      	adds	r7, #48	; 0x30
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	40021000 	.word	0x40021000
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40000800 	.word	0x40000800
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	40010400 	.word	0x40010400
 8002c98:	40020800 	.word	0x40020800

08002c9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b092      	sub	sp, #72	; 0x48
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a79      	ldr	r2, [pc, #484]	; (8002ea0 <HAL_UART_MspInit+0x204>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d129      	bne.n	8002d12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002cbe:	4b79      	ldr	r3, [pc, #484]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a78      	ldr	r2, [pc, #480]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b76      	ldr	r3, [pc, #472]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd6:	4b73      	ldr	r3, [pc, #460]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	4a72      	ldr	r2, [pc, #456]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002cdc:	f043 0302 	orr.w	r3, r3, #2
 8002ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce2:	4b70      	ldr	r3, [pc, #448]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = UART5_RX_Pin|UART5_TX_Pin;
 8002cee:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002d00:	2308      	movs	r3, #8
 8002d02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4867      	ldr	r0, [pc, #412]	; (8002ea8 <HAL_UART_MspInit+0x20c>)
 8002d0c:	f001 fb16 	bl	800433c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d10:	e0c1      	b.n	8002e96 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==UART7)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a65      	ldr	r2, [pc, #404]	; (8002eac <HAL_UART_MspInit+0x210>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d129      	bne.n	8002d70 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002d1c:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	4a60      	ldr	r2, [pc, #384]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002d22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002d26:	6413      	str	r3, [r2, #64]	; 0x40
 8002d28:	4b5e      	ldr	r3, [pc, #376]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d34:	4b5b      	ldr	r3, [pc, #364]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	4a5a      	ldr	r2, [pc, #360]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002d3a:	f043 0310 	orr.w	r3, r3, #16
 8002d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d40:	4b58      	ldr	r3, [pc, #352]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002d4c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002d50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d52:	2302      	movs	r3, #2
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002d5e:	2308      	movs	r3, #8
 8002d60:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d66:	4619      	mov	r1, r3
 8002d68:	4851      	ldr	r0, [pc, #324]	; (8002eb0 <HAL_UART_MspInit+0x214>)
 8002d6a:	f001 fae7 	bl	800433c <HAL_GPIO_Init>
}
 8002d6e:	e092      	b.n	8002e96 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a4f      	ldr	r2, [pc, #316]	; (8002eb4 <HAL_UART_MspInit+0x218>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d129      	bne.n	8002dce <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d7a:	4b4a      	ldr	r3, [pc, #296]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7e:	4a49      	ldr	r2, [pc, #292]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002d80:	f043 0310 	orr.w	r3, r3, #16
 8002d84:	6453      	str	r3, [r2, #68]	; 0x44
 8002d86:	4b47      	ldr	r3, [pc, #284]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8a:	f003 0310 	and.w	r3, r3, #16
 8002d8e:	623b      	str	r3, [r7, #32]
 8002d90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d92:	4b44      	ldr	r3, [pc, #272]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	4a43      	ldr	r2, [pc, #268]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002d98:	f043 0302 	orr.w	r3, r3, #2
 8002d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9e:	4b41      	ldr	r3, [pc, #260]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 8002daa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002dae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db0:	2302      	movs	r3, #2
 8002db2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db8:	2303      	movs	r3, #3
 8002dba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dc0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4838      	ldr	r0, [pc, #224]	; (8002ea8 <HAL_UART_MspInit+0x20c>)
 8002dc8:	f001 fab8 	bl	800433c <HAL_GPIO_Init>
}
 8002dcc:	e063      	b.n	8002e96 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART2)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a39      	ldr	r2, [pc, #228]	; (8002eb8 <HAL_UART_MspInit+0x21c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d128      	bne.n	8002e2a <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a31      	ldr	r2, [pc, #196]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
 8002de4:	4b2f      	ldr	r3, [pc, #188]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df0:	4b2c      	ldr	r3, [pc, #176]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df4:	4a2b      	ldr	r2, [pc, #172]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002df6:	f043 0301 	orr.w	r3, r3, #1
 8002dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfc:	4b29      	ldr	r3, [pc, #164]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 8002e08:	230c      	movs	r3, #12
 8002e0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e14:	2303      	movs	r3, #3
 8002e16:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e18:	2307      	movs	r3, #7
 8002e1a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e20:	4619      	mov	r1, r3
 8002e22:	4826      	ldr	r0, [pc, #152]	; (8002ebc <HAL_UART_MspInit+0x220>)
 8002e24:	f001 fa8a 	bl	800433c <HAL_GPIO_Init>
}
 8002e28:	e035      	b.n	8002e96 <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a24      	ldr	r2, [pc, #144]	; (8002ec0 <HAL_UART_MspInit+0x224>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d130      	bne.n	8002e96 <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	4a1a      	ldr	r2, [pc, #104]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e40:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e4c:	4b15      	ldr	r3, [pc, #84]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	4a14      	ldr	r2, [pc, #80]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002e52:	f043 0302 	orr.w	r3, r3, #2
 8002e56:	6313      	str	r3, [r2, #48]	; 0x30
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_UART_MspInit+0x208>)
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 8002e64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002e68:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e72:	2303      	movs	r3, #3
 8002e74:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e76:	2307      	movs	r3, #7
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <HAL_UART_MspInit+0x20c>)
 8002e82:	f001 fa5b 	bl	800433c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	2027      	movs	r0, #39	; 0x27
 8002e8c:	f000 fe87 	bl	8003b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e90:	2027      	movs	r0, #39	; 0x27
 8002e92:	f000 fea0 	bl	8003bd6 <HAL_NVIC_EnableIRQ>
}
 8002e96:	bf00      	nop
 8002e98:	3748      	adds	r7, #72	; 0x48
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40005000 	.word	0x40005000
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	40007800 	.word	0x40007800
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40011000 	.word	0x40011000
 8002eb8:	40004400 	.word	0x40004400
 8002ebc:	40020000 	.word	0x40020000
 8002ec0:	40004800 	.word	0x40004800

08002ec4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002ec8:	bf00      	nop
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ed6:	e7fe      	b.n	8002ed6 <HardFault_Handler+0x4>

08002ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002edc:	e7fe      	b.n	8002edc <MemManage_Handler+0x4>

08002ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee2:	e7fe      	b.n	8002ee2 <BusFault_Handler+0x4>

08002ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ee8:	e7fe      	b.n	8002ee8 <UsageFault_Handler+0x4>

08002eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eea:	b480      	push	{r7}
 8002eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002efc:	bf00      	nop
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f18:	f000 f918 	bl	800314c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8002f24:	4802      	ldr	r0, [pc, #8]	; (8002f30 <DMA1_Stream5_IRQHandler+0x10>)
 8002f26:	f000 ffa1 	bl	8003e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200040e4 	.word	0x200040e4

08002f34 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <TIM1_CC_IRQHandler+0x10>)
 8002f3a:	f003 ff55 	bl	8006de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2002f73c 	.word	0x2002f73c

08002f48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f4c:	4802      	ldr	r0, [pc, #8]	; (8002f58 <TIM2_IRQHandler+0x10>)
 8002f4e:	f003 ff4b 	bl	8006de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	2002f7e0 	.word	0x2002f7e0

08002f5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <TIM3_IRQHandler+0x10>)
 8002f62:	f003 ff41 	bl	8006de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	2002f464 	.word	0x2002f464

08002f70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f74:	4802      	ldr	r0, [pc, #8]	; (8002f80 <TIM4_IRQHandler+0x10>)
 8002f76:	f003 ff37 	bl	8006de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	20004204 	.word	0x20004204

08002f84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f88:	4802      	ldr	r0, [pc, #8]	; (8002f94 <USART3_IRQHandler+0x10>)
 8002f8a:	f005 fbcd 	bl	8008728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20004244 	.word	0x20004244

08002f98 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002f9c:	4802      	ldr	r0, [pc, #8]	; (8002fa8 <TIM8_CC_IRQHandler+0x10>)
 8002f9e:	f003 ff23 	bl	8006de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	200041c4 	.word	0x200041c4

08002fac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002fb0:	4802      	ldr	r0, [pc, #8]	; (8002fbc <TIM5_IRQHandler+0x10>)
 8002fb2:	f003 ff19 	bl	8006de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	2002f424 	.word	0x2002f424

08002fc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002fc4:	4802      	ldr	r0, [pc, #8]	; (8002fd0 <TIM6_DAC_IRQHandler+0x10>)
 8002fc6:	f003 ff0f 	bl	8006de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2002f6f8 	.word	0x2002f6f8

08002fd4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002fd8:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <DMA2_Stream0_IRQHandler+0x10>)
 8002fda:	f000 ff47 	bl	8003e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002fde:	bf00      	nop
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	20045128 	.word	0x20045128

08002fe8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <DMA2_Stream4_IRQHandler+0x10>)
 8002fee:	f000 ff3d 	bl	8003e6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2002f664 	.word	0x2002f664

08002ffc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003004:	4b11      	ldr	r3, [pc, #68]	; (800304c <_sbrk+0x50>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d102      	bne.n	8003012 <_sbrk+0x16>
		heap_end = &end;
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <_sbrk+0x50>)
 800300e:	4a10      	ldr	r2, [pc, #64]	; (8003050 <_sbrk+0x54>)
 8003010:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <_sbrk+0x50>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <_sbrk+0x50>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	466a      	mov	r2, sp
 8003022:	4293      	cmp	r3, r2
 8003024:	d907      	bls.n	8003036 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003026:	f006 f9e9 	bl	80093fc <__errno>
 800302a:	4602      	mov	r2, r0
 800302c:	230c      	movs	r3, #12
 800302e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003030:	f04f 33ff 	mov.w	r3, #4294967295
 8003034:	e006      	b.n	8003044 <_sbrk+0x48>
	}

	heap_end += incr;
 8003036:	4b05      	ldr	r3, [pc, #20]	; (800304c <_sbrk+0x50>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	4a03      	ldr	r2, [pc, #12]	; (800304c <_sbrk+0x50>)
 8003040:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000208 	.word	0x20000208
 8003050:	2005aa18 	.word	0x2005aa18

08003054 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <SystemInit+0x28>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	4a07      	ldr	r2, [pc, #28]	; (800307c <SystemInit+0x28>)
 8003060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <SystemInit+0x28>)
 800306a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800306e:	609a      	str	r2, [r3, #8]
#endif
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003084:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003086:	e003      	b.n	8003090 <LoopCopyDataInit>

08003088 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800308a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800308c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800308e:	3104      	adds	r1, #4

08003090 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003090:	480b      	ldr	r0, [pc, #44]	; (80030c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003092:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003094:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003096:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003098:	d3f6      	bcc.n	8003088 <CopyDataInit>
  ldr  r2, =_sbss
 800309a:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800309c:	e002      	b.n	80030a4 <LoopFillZerobss>

0800309e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800309e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030a0:	f842 3b04 	str.w	r3, [r2], #4

080030a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030a4:	4b09      	ldr	r3, [pc, #36]	; (80030cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030a8:	d3f9      	bcc.n	800309e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030aa:	f7ff ffd3 	bl	8003054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030ae:	f006 f9ab 	bl	8009408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030b2:	f7fd faad 	bl	8000610 <main>
  bx  lr    
 80030b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80030b8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80030bc:	0800a180 	.word	0x0800a180
  ldr  r0, =_sdata
 80030c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030c4:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 80030c8:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 80030cc:	2005aa18 	.word	0x2005aa18

080030d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030d0:	e7fe      	b.n	80030d0 <ADC_IRQHandler>

080030d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d6:	2003      	movs	r0, #3
 80030d8:	f000 fd56 	bl	8003b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030dc:	2000      	movs	r0, #0
 80030de:	f000 f805 	bl	80030ec <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80030e2:	f7ff fa1f 	bl	8002524 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_InitTick+0x54>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_InitTick+0x58>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003102:	fbb3 f3f1 	udiv	r3, r3, r1
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fd71 	bl	8003bf2 <HAL_SYSTICK_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e00e      	b.n	8003138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0f      	cmp	r3, #15
 800311e:	d80a      	bhi.n	8003136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003120:	2200      	movs	r2, #0
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f000 fd39 	bl	8003b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800312c:	4a06      	ldr	r2, [pc, #24]	; (8003148 <HAL_InitTick+0x5c>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000008 	.word	0x20000008
 8003144:	20000010 	.word	0x20000010
 8003148:	2000000c 	.word	0x2000000c

0800314c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <HAL_IncTick+0x20>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_IncTick+0x24>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4413      	add	r3, r2
 800315c:	4a04      	ldr	r2, [pc, #16]	; (8003170 <HAL_IncTick+0x24>)
 800315e:	6013      	str	r3, [r2, #0]
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	20000010 	.word	0x20000010
 8003170:	2005aa10 	.word	0x2005aa10

08003174 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  return uwTick;
 8003178:	4b03      	ldr	r3, [pc, #12]	; (8003188 <HAL_GetTick+0x14>)
 800317a:	681b      	ldr	r3, [r3, #0]
}
 800317c:	4618      	mov	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	2005aa10 	.word	0x2005aa10

0800318c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003194:	f7ff ffee 	bl	8003174 <HAL_GetTick>
 8003198:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a4:	d005      	beq.n	80031b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_Delay+0x40>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	461a      	mov	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4413      	add	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031b2:	bf00      	nop
 80031b4:	f7ff ffde 	bl	8003174 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d8f7      	bhi.n	80031b4 <HAL_Delay+0x28>
  {
  }
}
 80031c4:	bf00      	nop
 80031c6:	3710      	adds	r7, #16
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000010 	.word	0x20000010

080031d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e031      	b.n	800324a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d109      	bne.n	8003202 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7ff f9bc 	bl	800256c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b00      	cmp	r3, #0
 800320c:	d116      	bne.n	800323c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_ADC_Init+0x84>)
 8003214:	4013      	ands	r3, r2
 8003216:	f043 0202 	orr.w	r2, r3, #2
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 fa66 	bl	80036f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	641a      	str	r2, [r3, #64]	; 0x40
 800323a:	e001      	b.n	8003240 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	ffffeefd 	.word	0xffffeefd

08003258 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_ADC_Start_DMA+0x1e>
 8003272:	2302      	movs	r3, #2
 8003274:	e0c7      	b.n	8003406 <HAL_ADC_Start_DMA+0x1ae>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 0301 	and.w	r3, r3, #1
 8003288:	2b01      	cmp	r3, #1
 800328a:	d018      	beq.n	80032be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800329c:	4b5c      	ldr	r3, [pc, #368]	; (8003410 <HAL_ADC_Start_DMA+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a5c      	ldr	r2, [pc, #368]	; (8003414 <HAL_ADC_Start_DMA+0x1bc>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	0c9a      	lsrs	r2, r3, #18
 80032a8:	4613      	mov	r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4413      	add	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80032b0:	e002      	b.n	80032b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	3b01      	subs	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f9      	bne.n	80032b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f040 809b 	bne.w	8003404 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032d2:	4b51      	ldr	r3, [pc, #324]	; (8003418 <HAL_ADC_Start_DMA+0x1c0>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d007      	beq.n	80032fc <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032f4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003308:	d106      	bne.n	8003318 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800330e:	f023 0206 	bic.w	r2, r3, #6
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	645a      	str	r2, [r3, #68]	; 0x44
 8003316:	e002      	b.n	800331e <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	4a3c      	ldr	r2, [pc, #240]	; (800341c <HAL_ADC_Start_DMA+0x1c4>)
 800332c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	4a3b      	ldr	r2, [pc, #236]	; (8003420 <HAL_ADC_Start_DMA+0x1c8>)
 8003334:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	4a3a      	ldr	r2, [pc, #232]	; (8003424 <HAL_ADC_Start_DMA+0x1cc>)
 800333c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003346:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003356:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003366:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	334c      	adds	r3, #76	; 0x4c
 8003372:	4619      	mov	r1, r3
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f000 fcf6 	bl	8003d68 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800337c:	4b2a      	ldr	r3, [pc, #168]	; (8003428 <HAL_ADC_Start_DMA+0x1d0>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10f      	bne.n	80033a8 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d136      	bne.n	8003404 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	e02d      	b.n	8003404 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a1f      	ldr	r2, [pc, #124]	; (800342c <HAL_ADC_Start_DMA+0x1d4>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d10e      	bne.n	80033d0 <HAL_ADC_Start_DMA+0x178>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d107      	bne.n	80033d0 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033ce:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80033d0:	4b15      	ldr	r3, [pc, #84]	; (8003428 <HAL_ADC_Start_DMA+0x1d0>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d113      	bne.n	8003404 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a13      	ldr	r2, [pc, #76]	; (8003430 <HAL_ADC_Start_DMA+0x1d8>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10e      	bne.n	8003404 <HAL_ADC_Start_DMA+0x1ac>
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d107      	bne.n	8003404 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003402:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	20000008 	.word	0x20000008
 8003414:	431bde83 	.word	0x431bde83
 8003418:	fffff8fe 	.word	0xfffff8fe
 800341c:	080038e5 	.word	0x080038e5
 8003420:	0800399f 	.word	0x0800399f
 8003424:	080039bb 	.word	0x080039bb
 8003428:	40012300 	.word	0x40012300
 800342c:	40012000 	.word	0x40012000
 8003430:	40012200 	.word	0x40012200

08003434 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x1c>
 8003474:	2302      	movs	r3, #2
 8003476:	e12a      	b.n	80036ce <HAL_ADC_ConfigChannel+0x272>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b09      	cmp	r3, #9
 8003486:	d93a      	bls.n	80034fe <HAL_ADC_ConfigChannel+0xa2>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003490:	d035      	beq.n	80034fe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68d9      	ldr	r1, [r3, #12]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	3b1e      	subs	r3, #30
 80034a8:	2207      	movs	r2, #7
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43da      	mvns	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	400a      	ands	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a87      	ldr	r2, [pc, #540]	; (80036dc <HAL_ADC_ConfigChannel+0x280>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d10a      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68d9      	ldr	r1, [r3, #12]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	061a      	lsls	r2, r3, #24
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034d6:	e035      	b.n	8003544 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68d9      	ldr	r1, [r3, #12]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	4618      	mov	r0, r3
 80034ea:	4603      	mov	r3, r0
 80034ec:	005b      	lsls	r3, r3, #1
 80034ee:	4403      	add	r3, r0
 80034f0:	3b1e      	subs	r3, #30
 80034f2:	409a      	lsls	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034fc:	e022      	b.n	8003544 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6919      	ldr	r1, [r3, #16]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	2207      	movs	r2, #7
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43da      	mvns	r2, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	400a      	ands	r2, r1
 8003520:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6919      	ldr	r1, [r3, #16]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	b29b      	uxth	r3, r3
 8003532:	4618      	mov	r0, r3
 8003534:	4603      	mov	r3, r0
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4403      	add	r3, r0
 800353a:	409a      	lsls	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b06      	cmp	r3, #6
 800354a:	d824      	bhi.n	8003596 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	3b05      	subs	r3, #5
 800355e:	221f      	movs	r2, #31
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43da      	mvns	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	400a      	ands	r2, r1
 800356c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	4618      	mov	r0, r3
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	3b05      	subs	r3, #5
 8003588:	fa00 f203 	lsl.w	r2, r0, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	635a      	str	r2, [r3, #52]	; 0x34
 8003594:	e04c      	b.n	8003630 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d824      	bhi.n	80035e8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	3b23      	subs	r3, #35	; 0x23
 80035b0:	221f      	movs	r2, #31
 80035b2:	fa02 f303 	lsl.w	r3, r2, r3
 80035b6:	43da      	mvns	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	400a      	ands	r2, r1
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	4618      	mov	r0, r3
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	3b23      	subs	r3, #35	; 0x23
 80035da:	fa00 f203 	lsl.w	r2, r0, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	631a      	str	r2, [r3, #48]	; 0x30
 80035e6:	e023      	b.n	8003630 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	3b41      	subs	r3, #65	; 0x41
 80035fa:	221f      	movs	r2, #31
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43da      	mvns	r2, r3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	400a      	ands	r2, r1
 8003608:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	b29b      	uxth	r3, r3
 8003616:	4618      	mov	r0, r3
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	3b41      	subs	r3, #65	; 0x41
 8003624:	fa00 f203 	lsl.w	r2, r0, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a2a      	ldr	r2, [pc, #168]	; (80036e0 <HAL_ADC_ConfigChannel+0x284>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d10a      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x1f4>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003642:	d105      	bne.n	8003650 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003644:	4b27      	ldr	r3, [pc, #156]	; (80036e4 <HAL_ADC_ConfigChannel+0x288>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <HAL_ADC_ConfigChannel+0x288>)
 800364a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800364e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a22      	ldr	r2, [pc, #136]	; (80036e0 <HAL_ADC_ConfigChannel+0x284>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d109      	bne.n	800366e <HAL_ADC_ConfigChannel+0x212>
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b12      	cmp	r3, #18
 8003660:	d105      	bne.n	800366e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003662:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <HAL_ADC_ConfigChannel+0x288>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4a1f      	ldr	r2, [pc, #124]	; (80036e4 <HAL_ADC_ConfigChannel+0x288>)
 8003668:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800366c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1b      	ldr	r2, [pc, #108]	; (80036e0 <HAL_ADC_ConfigChannel+0x284>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d125      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x268>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a17      	ldr	r2, [pc, #92]	; (80036dc <HAL_ADC_ConfigChannel+0x280>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d003      	beq.n	800368a <HAL_ADC_ConfigChannel+0x22e>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b11      	cmp	r3, #17
 8003688:	d11c      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800368a:	4b16      	ldr	r3, [pc, #88]	; (80036e4 <HAL_ADC_ConfigChannel+0x288>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4a15      	ldr	r2, [pc, #84]	; (80036e4 <HAL_ADC_ConfigChannel+0x288>)
 8003690:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003694:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a10      	ldr	r2, [pc, #64]	; (80036dc <HAL_ADC_ConfigChannel+0x280>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d111      	bne.n	80036c4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80036a0:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_ADC_ConfigChannel+0x28c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a11      	ldr	r2, [pc, #68]	; (80036ec <HAL_ADC_ConfigChannel+0x290>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0c9a      	lsrs	r2, r3, #18
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80036b6:	e002      	b.n	80036be <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1f9      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3714      	adds	r7, #20
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
 80036da:	bf00      	nop
 80036dc:	10000012 	.word	0x10000012
 80036e0:	40012000 	.word	0x40012000
 80036e4:	40012300 	.word	0x40012300
 80036e8:	20000008 	.word	0x20000008
 80036ec:	431bde83 	.word	0x431bde83

080036f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80036f8:	4b78      	ldr	r3, [pc, #480]	; (80038dc <ADC_Init+0x1ec>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	4a77      	ldr	r2, [pc, #476]	; (80038dc <ADC_Init+0x1ec>)
 80036fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003702:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003704:	4b75      	ldr	r3, [pc, #468]	; (80038dc <ADC_Init+0x1ec>)
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	4973      	ldr	r1, [pc, #460]	; (80038dc <ADC_Init+0x1ec>)
 800370e:	4313      	orrs	r3, r2
 8003710:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	021a      	lsls	r2, r3, #8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689a      	ldr	r2, [r3, #8]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6899      	ldr	r1, [r3, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800377e:	4a58      	ldr	r2, [pc, #352]	; (80038e0 <ADC_Init+0x1f0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d022      	beq.n	80037ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003792:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6899      	ldr	r1, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6899      	ldr	r1, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	e00f      	b.n	80037ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f022 0202 	bic.w	r2, r2, #2
 80037f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	005a      	lsls	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01b      	beq.n	8003850 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	685a      	ldr	r2, [r3, #4]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003826:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685a      	ldr	r2, [r3, #4]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003836:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	3b01      	subs	r3, #1
 8003844:	035a      	lsls	r2, r3, #13
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	430a      	orrs	r2, r1
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	e007      	b.n	8003860 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800386e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	3b01      	subs	r3, #1
 800387c:	051a      	lsls	r2, r3, #20
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6899      	ldr	r1, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038a2:	025a      	lsls	r2, r3, #9
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6899      	ldr	r1, [r3, #8]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	029a      	lsls	r2, r3, #10
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	40012300 	.word	0x40012300
 80038e0:	0f000001 	.word	0x0f000001

080038e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d13c      	bne.n	8003978 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d12b      	bne.n	8003970 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800391c:	2b00      	cmp	r3, #0
 800391e:	d127      	bne.n	8003970 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800392a:	2b00      	cmp	r3, #0
 800392c:	d006      	beq.n	800393c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003938:	2b00      	cmp	r3, #0
 800393a:	d119      	bne.n	8003970 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f022 0220 	bic.w	r2, r2, #32
 800394a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f043 0201 	orr.w	r2, r3, #1
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f7fe f8af 	bl	8001ad4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003976:	e00e      	b.n	8003996 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f7ff fd5f 	bl	8003448 <HAL_ADC_ErrorCallback>
}
 800398a:	e004      	b.n	8003996 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	4798      	blx	r3
}
 8003996:	bf00      	nop
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f7ff fd41 	bl	8003434 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039b2:	bf00      	nop
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d2:	f043 0204 	orr.w	r2, r3, #4
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f7ff fd34 	bl	8003448 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039e0:	bf00      	nop
 80039e2:	3710      	adds	r7, #16
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <__NVIC_SetPriorityGrouping+0x40>)
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a04:	4013      	ands	r3, r2
 8003a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003a10:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <__NVIC_SetPriorityGrouping+0x44>)
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a16:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <__NVIC_SetPriorityGrouping+0x40>)
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	60d3      	str	r3, [r2, #12]
}
 8003a1c:	bf00      	nop
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000ed00 	.word	0xe000ed00
 8003a2c:	05fa0000 	.word	0x05fa0000

08003a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a30:	b480      	push	{r7}
 8003a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <__NVIC_GetPriorityGrouping+0x18>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	f003 0307 	and.w	r3, r3, #7
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	e000ed00 	.word	0xe000ed00

08003a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	db0b      	blt.n	8003a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	f003 021f 	and.w	r2, r3, #31
 8003a64:	4907      	ldr	r1, [pc, #28]	; (8003a84 <__NVIC_EnableIRQ+0x38>)
 8003a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	e000e100 	.word	0xe000e100

08003a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	4603      	mov	r3, r0
 8003a90:	6039      	str	r1, [r7, #0]
 8003a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	db0a      	blt.n	8003ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	490c      	ldr	r1, [pc, #48]	; (8003ad4 <__NVIC_SetPriority+0x4c>)
 8003aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aa6:	0112      	lsls	r2, r2, #4
 8003aa8:	b2d2      	uxtb	r2, r2
 8003aaa:	440b      	add	r3, r1
 8003aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ab0:	e00a      	b.n	8003ac8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4908      	ldr	r1, [pc, #32]	; (8003ad8 <__NVIC_SetPriority+0x50>)
 8003ab8:	79fb      	ldrb	r3, [r7, #7]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	3b04      	subs	r3, #4
 8003ac0:	0112      	lsls	r2, r2, #4
 8003ac2:	b2d2      	uxtb	r2, r2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	761a      	strb	r2, [r3, #24]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr
 8003ad4:	e000e100 	.word	0xe000e100
 8003ad8:	e000ed00 	.word	0xe000ed00

08003adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b089      	sub	sp, #36	; 0x24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	f1c3 0307 	rsb	r3, r3, #7
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	bf28      	it	cs
 8003afa:	2304      	movcs	r3, #4
 8003afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3304      	adds	r3, #4
 8003b02:	2b06      	cmp	r3, #6
 8003b04:	d902      	bls.n	8003b0c <NVIC_EncodePriority+0x30>
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	3b03      	subs	r3, #3
 8003b0a:	e000      	b.n	8003b0e <NVIC_EncodePriority+0x32>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	401a      	ands	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b24:	f04f 31ff 	mov.w	r1, #4294967295
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b2e:	43d9      	mvns	r1, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b34:	4313      	orrs	r3, r2
         );
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3724      	adds	r7, #36	; 0x24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b54:	d301      	bcc.n	8003b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b56:	2301      	movs	r3, #1
 8003b58:	e00f      	b.n	8003b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b5a:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <SysTick_Config+0x40>)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b62:	210f      	movs	r1, #15
 8003b64:	f04f 30ff 	mov.w	r0, #4294967295
 8003b68:	f7ff ff8e 	bl	8003a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b6c:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <SysTick_Config+0x40>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b72:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <SysTick_Config+0x40>)
 8003b74:	2207      	movs	r2, #7
 8003b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	e000e010 	.word	0xe000e010

08003b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff ff29 	bl	80039e8 <__NVIC_SetPriorityGrouping>
}
 8003b96:	bf00      	nop
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	60b9      	str	r1, [r7, #8]
 8003ba8:	607a      	str	r2, [r7, #4]
 8003baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bb0:	f7ff ff3e 	bl	8003a30 <__NVIC_GetPriorityGrouping>
 8003bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	6978      	ldr	r0, [r7, #20]
 8003bbc:	f7ff ff8e 	bl	8003adc <NVIC_EncodePriority>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7ff ff5d 	bl	8003a88 <__NVIC_SetPriority>
}
 8003bce:	bf00      	nop
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}

08003bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bd6:	b580      	push	{r7, lr}
 8003bd8:	b082      	sub	sp, #8
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	4603      	mov	r3, r0
 8003bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff31 	bl	8003a4c <__NVIC_EnableIRQ>
}
 8003bea:	bf00      	nop
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff ffa2 	bl	8003b44 <SysTick_Config>
 8003c00:	4603      	mov	r3, r0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
	...

08003c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c18:	f7ff faac 	bl	8003174 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e099      	b.n	8003d5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c48:	e00f      	b.n	8003c6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c4a:	f7ff fa93 	bl	8003174 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b05      	cmp	r3, #5
 8003c56:	d908      	bls.n	8003c6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2203      	movs	r2, #3
 8003c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e078      	b.n	8003d5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1e8      	bne.n	8003c4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4b38      	ldr	r3, [pc, #224]	; (8003d64 <HAL_DMA_Init+0x158>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a1b      	ldr	r3, [r3, #32]
 8003cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	2b04      	cmp	r3, #4
 8003cc2:	d107      	bne.n	8003cd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f023 0307 	bic.w	r3, r3, #7
 8003cea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d117      	bne.n	8003d2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00e      	beq.n	8003d2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fa99 	bl	8004248 <DMA_CheckFifoParam>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d008      	beq.n	8003d2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2240      	movs	r2, #64	; 0x40
 8003d20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e016      	b.n	8003d5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 fa50 	bl	80041dc <DMA_CalcBaseAndBitshift>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d44:	223f      	movs	r2, #63	; 0x3f
 8003d46:	409a      	lsls	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	e010803f 	.word	0xe010803f

08003d68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_DMA_Start_IT+0x26>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e048      	b.n	8003e20 <HAL_DMA_Start_IT+0xb8>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d137      	bne.n	8003e12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2202      	movs	r2, #2
 8003da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f9e2 	bl	8004180 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc0:	223f      	movs	r2, #63	; 0x3f
 8003dc2:	409a      	lsls	r2, r3
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0216 	orr.w	r2, r2, #22
 8003dd6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003de6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d007      	beq.n	8003e00 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0208 	orr.w	r2, r2, #8
 8003dfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f042 0201 	orr.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e005      	b.n	8003e1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d004      	beq.n	8003e46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00c      	b.n	8003e60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2205      	movs	r2, #5
 8003e4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003e74:	2300      	movs	r3, #0
 8003e76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003e78:	4b92      	ldr	r3, [pc, #584]	; (80040c4 <HAL_DMA_IRQHandler+0x258>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a92      	ldr	r2, [pc, #584]	; (80040c8 <HAL_DMA_IRQHandler+0x25c>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	0a9b      	lsrs	r3, r3, #10
 8003e84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e96:	2208      	movs	r2, #8
 8003e98:	409a      	lsls	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d01a      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d013      	beq.n	8003ed8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0204 	bic.w	r2, r2, #4
 8003ebe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	409a      	lsls	r2, r3
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed0:	f043 0201 	orr.w	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	2201      	movs	r2, #1
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003efa:	2201      	movs	r2, #1
 8003efc:	409a      	lsls	r2, r3
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	f043 0202 	orr.w	r2, r3, #2
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	2204      	movs	r2, #4
 8003f14:	409a      	lsls	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d012      	beq.n	8003f44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00b      	beq.n	8003f44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f30:	2204      	movs	r2, #4
 8003f32:	409a      	lsls	r2, r3
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f3c:	f043 0204 	orr.w	r2, r3, #4
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	2210      	movs	r2, #16
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d043      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d03c      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	2210      	movs	r2, #16
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d018      	beq.n	8003fae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d108      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d024      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4798      	blx	r3
 8003f9a:	e01f      	b.n	8003fdc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d01b      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
 8003fac:	e016      	b.n	8003fdc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d107      	bne.n	8003fcc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0208 	bic.w	r2, r2, #8
 8003fca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	409a      	lsls	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4013      	ands	r3, r2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 808e 	beq.w	800410a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8086 	beq.w	800410a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004002:	2220      	movs	r2, #32
 8004004:	409a      	lsls	r2, r3
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004010:	b2db      	uxtb	r3, r3
 8004012:	2b05      	cmp	r3, #5
 8004014:	d136      	bne.n	8004084 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f022 0216 	bic.w	r2, r2, #22
 8004024:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	695a      	ldr	r2, [r3, #20]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004034:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <HAL_DMA_IRQHandler+0x1da>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004042:	2b00      	cmp	r3, #0
 8004044:	d007      	beq.n	8004056 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f022 0208 	bic.w	r2, r2, #8
 8004054:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	223f      	movs	r2, #63	; 0x3f
 800405c:	409a      	lsls	r2, r3
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004076:	2b00      	cmp	r3, #0
 8004078:	d07d      	beq.n	8004176 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	4798      	blx	r3
        }
        return;
 8004082:	e078      	b.n	8004176 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01c      	beq.n	80040cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d108      	bne.n	80040b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d030      	beq.n	800410a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	4798      	blx	r3
 80040b0:	e02b      	b.n	800410a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d027      	beq.n	800410a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	4798      	blx	r3
 80040c2:	e022      	b.n	800410a <HAL_DMA_IRQHandler+0x29e>
 80040c4:	20000008 	.word	0x20000008
 80040c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10f      	bne.n	80040fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0210 	bic.w	r2, r2, #16
 80040e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800410e:	2b00      	cmp	r3, #0
 8004110:	d032      	beq.n	8004178 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d022      	beq.n	8004164 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2205      	movs	r2, #5
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0201 	bic.w	r2, r2, #1
 8004134:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	3301      	adds	r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	429a      	cmp	r2, r3
 8004140:	d307      	bcc.n	8004152 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0301 	and.w	r3, r3, #1
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1f2      	bne.n	8004136 <HAL_DMA_IRQHandler+0x2ca>
 8004150:	e000      	b.n	8004154 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004152:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d005      	beq.n	8004178 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	4798      	blx	r3
 8004174:	e000      	b.n	8004178 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004176:	bf00      	nop
    }
  }
}
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop

08004180 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800419c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	d108      	bne.n	80041c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041be:	e007      	b.n	80041d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	60da      	str	r2, [r3, #12]
}
 80041d0:	bf00      	nop
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80041dc:	b480      	push	{r7}
 80041de:	b085      	sub	sp, #20
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	3b10      	subs	r3, #16
 80041ec:	4a13      	ldr	r2, [pc, #76]	; (800423c <DMA_CalcBaseAndBitshift+0x60>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80041f6:	4a12      	ldr	r2, [pc, #72]	; (8004240 <DMA_CalcBaseAndBitshift+0x64>)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	461a      	mov	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b03      	cmp	r3, #3
 8004208:	d908      	bls.n	800421c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	461a      	mov	r2, r3
 8004210:	4b0c      	ldr	r3, [pc, #48]	; (8004244 <DMA_CalcBaseAndBitshift+0x68>)
 8004212:	4013      	ands	r3, r2
 8004214:	1d1a      	adds	r2, r3, #4
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	659a      	str	r2, [r3, #88]	; 0x58
 800421a:	e006      	b.n	800422a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	4b08      	ldr	r3, [pc, #32]	; (8004244 <DMA_CalcBaseAndBitshift+0x68>)
 8004224:	4013      	ands	r3, r2
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800422e:	4618      	mov	r0, r3
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	aaaaaaab 	.word	0xaaaaaaab
 8004240:	0800a028 	.word	0x0800a028
 8004244:	fffffc00 	.word	0xfffffc00

08004248 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004258:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d11f      	bne.n	80042a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b03      	cmp	r3, #3
 8004266:	d855      	bhi.n	8004314 <DMA_CheckFifoParam+0xcc>
 8004268:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <DMA_CheckFifoParam+0x28>)
 800426a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426e:	bf00      	nop
 8004270:	08004281 	.word	0x08004281
 8004274:	08004293 	.word	0x08004293
 8004278:	08004281 	.word	0x08004281
 800427c:	08004315 	.word	0x08004315
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d045      	beq.n	8004318 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004290:	e042      	b.n	8004318 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800429a:	d13f      	bne.n	800431c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a0:	e03c      	b.n	800431c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042aa:	d121      	bne.n	80042f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d836      	bhi.n	8004320 <DMA_CheckFifoParam+0xd8>
 80042b2:	a201      	add	r2, pc, #4	; (adr r2, 80042b8 <DMA_CheckFifoParam+0x70>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080042c9 	.word	0x080042c9
 80042bc:	080042cf 	.word	0x080042cf
 80042c0:	080042c9 	.word	0x080042c9
 80042c4:	080042e1 	.word	0x080042e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	73fb      	strb	r3, [r7, #15]
      break;
 80042cc:	e02f      	b.n	800432e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d024      	beq.n	8004324 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042de:	e021      	b.n	8004324 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042e8:	d11e      	bne.n	8004328 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80042ee:	e01b      	b.n	8004328 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d902      	bls.n	80042fc <DMA_CheckFifoParam+0xb4>
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d003      	beq.n	8004302 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80042fa:	e018      	b.n	800432e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004300:	e015      	b.n	800432e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00e      	beq.n	800432c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
      break;
 8004312:	e00b      	b.n	800432c <DMA_CheckFifoParam+0xe4>
      break;
 8004314:	bf00      	nop
 8004316:	e00a      	b.n	800432e <DMA_CheckFifoParam+0xe6>
      break;
 8004318:	bf00      	nop
 800431a:	e008      	b.n	800432e <DMA_CheckFifoParam+0xe6>
      break;
 800431c:	bf00      	nop
 800431e:	e006      	b.n	800432e <DMA_CheckFifoParam+0xe6>
      break;
 8004320:	bf00      	nop
 8004322:	e004      	b.n	800432e <DMA_CheckFifoParam+0xe6>
      break;
 8004324:	bf00      	nop
 8004326:	e002      	b.n	800432e <DMA_CheckFifoParam+0xe6>
      break;   
 8004328:	bf00      	nop
 800432a:	e000      	b.n	800432e <DMA_CheckFifoParam+0xe6>
      break;
 800432c:	bf00      	nop
    }
  } 
  
  return status; 
 800432e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3714      	adds	r7, #20
 8004334:	46bd      	mov	sp, r7
 8004336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433a:	4770      	bx	lr

0800433c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800433c:	b480      	push	{r7}
 800433e:	b089      	sub	sp, #36	; 0x24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004346:	2300      	movs	r3, #0
 8004348:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800434e:	2300      	movs	r3, #0
 8004350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004352:	2300      	movs	r3, #0
 8004354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	e175      	b.n	8004648 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800435c:	2201      	movs	r2, #1
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	4013      	ands	r3, r2
 800436e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	429a      	cmp	r2, r3
 8004376:	f040 8164 	bne.w	8004642 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d00b      	beq.n	800439a <HAL_GPIO_Init+0x5e>
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2b02      	cmp	r3, #2
 8004388:	d007      	beq.n	800439a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800438e:	2b11      	cmp	r3, #17
 8004390:	d003      	beq.n	800439a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b12      	cmp	r3, #18
 8004398:	d130      	bne.n	80043fc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	2203      	movs	r2, #3
 80043a6:	fa02 f303 	lsl.w	r3, r2, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	4013      	ands	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043d0:	2201      	movs	r2, #1
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	fa02 f303 	lsl.w	r3, r2, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4013      	ands	r3, r2
 80043de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	091b      	lsrs	r3, r3, #4
 80043e6:	f003 0201 	and.w	r2, r3, #1
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	2203      	movs	r2, #3
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	69ba      	ldr	r2, [r7, #24]
 8004410:	4013      	ands	r3, r2
 8004412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b02      	cmp	r3, #2
 8004432:	d003      	beq.n	800443c <HAL_GPIO_Init+0x100>
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2b12      	cmp	r3, #18
 800443a:	d123      	bne.n	8004484 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	08da      	lsrs	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	3208      	adds	r2, #8
 8004444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	f003 0307 	and.w	r3, r3, #7
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	220f      	movs	r2, #15
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	43db      	mvns	r3, r3
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4013      	ands	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f003 0307 	and.w	r3, r3, #7
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	08da      	lsrs	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3208      	adds	r2, #8
 800447e:	69b9      	ldr	r1, [r7, #24]
 8004480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	005b      	lsls	r3, r3, #1
 800448e:	2203      	movs	r2, #3
 8004490:	fa02 f303 	lsl.w	r3, r2, r3
 8004494:	43db      	mvns	r3, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	4013      	ands	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 0203 	and.w	r2, r3, #3
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f000 80be 	beq.w	8004642 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044c6:	4b65      	ldr	r3, [pc, #404]	; (800465c <HAL_GPIO_Init+0x320>)
 80044c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ca:	4a64      	ldr	r2, [pc, #400]	; (800465c <HAL_GPIO_Init+0x320>)
 80044cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044d0:	6453      	str	r3, [r2, #68]	; 0x44
 80044d2:	4b62      	ldr	r3, [pc, #392]	; (800465c <HAL_GPIO_Init+0x320>)
 80044d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80044de:	4a60      	ldr	r2, [pc, #384]	; (8004660 <HAL_GPIO_Init+0x324>)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	3302      	adds	r3, #2
 80044e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	220f      	movs	r2, #15
 80044f6:	fa02 f303 	lsl.w	r3, r2, r3
 80044fa:	43db      	mvns	r3, r3
 80044fc:	69ba      	ldr	r2, [r7, #24]
 80044fe:	4013      	ands	r3, r2
 8004500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a57      	ldr	r2, [pc, #348]	; (8004664 <HAL_GPIO_Init+0x328>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d037      	beq.n	800457a <HAL_GPIO_Init+0x23e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a56      	ldr	r2, [pc, #344]	; (8004668 <HAL_GPIO_Init+0x32c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d031      	beq.n	8004576 <HAL_GPIO_Init+0x23a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a55      	ldr	r2, [pc, #340]	; (800466c <HAL_GPIO_Init+0x330>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d02b      	beq.n	8004572 <HAL_GPIO_Init+0x236>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a54      	ldr	r2, [pc, #336]	; (8004670 <HAL_GPIO_Init+0x334>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d025      	beq.n	800456e <HAL_GPIO_Init+0x232>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a53      	ldr	r2, [pc, #332]	; (8004674 <HAL_GPIO_Init+0x338>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01f      	beq.n	800456a <HAL_GPIO_Init+0x22e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a52      	ldr	r2, [pc, #328]	; (8004678 <HAL_GPIO_Init+0x33c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d019      	beq.n	8004566 <HAL_GPIO_Init+0x22a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a51      	ldr	r2, [pc, #324]	; (800467c <HAL_GPIO_Init+0x340>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <HAL_GPIO_Init+0x226>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a50      	ldr	r2, [pc, #320]	; (8004680 <HAL_GPIO_Init+0x344>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00d      	beq.n	800455e <HAL_GPIO_Init+0x222>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a4f      	ldr	r2, [pc, #316]	; (8004684 <HAL_GPIO_Init+0x348>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d007      	beq.n	800455a <HAL_GPIO_Init+0x21e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a4e      	ldr	r2, [pc, #312]	; (8004688 <HAL_GPIO_Init+0x34c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d101      	bne.n	8004556 <HAL_GPIO_Init+0x21a>
 8004552:	2309      	movs	r3, #9
 8004554:	e012      	b.n	800457c <HAL_GPIO_Init+0x240>
 8004556:	230a      	movs	r3, #10
 8004558:	e010      	b.n	800457c <HAL_GPIO_Init+0x240>
 800455a:	2308      	movs	r3, #8
 800455c:	e00e      	b.n	800457c <HAL_GPIO_Init+0x240>
 800455e:	2307      	movs	r3, #7
 8004560:	e00c      	b.n	800457c <HAL_GPIO_Init+0x240>
 8004562:	2306      	movs	r3, #6
 8004564:	e00a      	b.n	800457c <HAL_GPIO_Init+0x240>
 8004566:	2305      	movs	r3, #5
 8004568:	e008      	b.n	800457c <HAL_GPIO_Init+0x240>
 800456a:	2304      	movs	r3, #4
 800456c:	e006      	b.n	800457c <HAL_GPIO_Init+0x240>
 800456e:	2303      	movs	r3, #3
 8004570:	e004      	b.n	800457c <HAL_GPIO_Init+0x240>
 8004572:	2302      	movs	r3, #2
 8004574:	e002      	b.n	800457c <HAL_GPIO_Init+0x240>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_GPIO_Init+0x240>
 800457a:	2300      	movs	r3, #0
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	f002 0203 	and.w	r2, r2, #3
 8004582:	0092      	lsls	r2, r2, #2
 8004584:	4093      	lsls	r3, r2
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800458c:	4934      	ldr	r1, [pc, #208]	; (8004660 <HAL_GPIO_Init+0x324>)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	3302      	adds	r3, #2
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800459a:	4b3c      	ldr	r3, [pc, #240]	; (800468c <HAL_GPIO_Init+0x350>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045be:	4a33      	ldr	r2, [pc, #204]	; (800468c <HAL_GPIO_Init+0x350>)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80045c4:	4b31      	ldr	r3, [pc, #196]	; (800468c <HAL_GPIO_Init+0x350>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4013      	ands	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045e8:	4a28      	ldr	r2, [pc, #160]	; (800468c <HAL_GPIO_Init+0x350>)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045ee:	4b27      	ldr	r3, [pc, #156]	; (800468c <HAL_GPIO_Init+0x350>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004612:	4a1e      	ldr	r2, [pc, #120]	; (800468c <HAL_GPIO_Init+0x350>)
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004618:	4b1c      	ldr	r3, [pc, #112]	; (800468c <HAL_GPIO_Init+0x350>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	43db      	mvns	r3, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4013      	ands	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800463c:	4a13      	ldr	r2, [pc, #76]	; (800468c <HAL_GPIO_Init+0x350>)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3301      	adds	r3, #1
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b0f      	cmp	r3, #15
 800464c:	f67f ae86 	bls.w	800435c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004650:	bf00      	nop
 8004652:	3724      	adds	r7, #36	; 0x24
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	40023800 	.word	0x40023800
 8004660:	40013800 	.word	0x40013800
 8004664:	40020000 	.word	0x40020000
 8004668:	40020400 	.word	0x40020400
 800466c:	40020800 	.word	0x40020800
 8004670:	40020c00 	.word	0x40020c00
 8004674:	40021000 	.word	0x40021000
 8004678:	40021400 	.word	0x40021400
 800467c:	40021800 	.word	0x40021800
 8004680:	40021c00 	.word	0x40021c00
 8004684:	40022000 	.word	0x40022000
 8004688:	40022400 	.word	0x40022400
 800468c:	40013c00 	.word	0x40013c00

08004690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	807b      	strh	r3, [r7, #2]
 800469c:	4613      	mov	r3, r2
 800469e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046a0:	787b      	ldrb	r3, [r7, #1]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80046ac:	e003      	b.n	80046b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80046ae:	887b      	ldrh	r3, [r7, #2]
 80046b0:	041a      	lsls	r2, r3, #16
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	619a      	str	r2, [r3, #24]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
	...

080046c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e07f      	b.n	80047d6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fd ffb0 	bl	8002650 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2224      	movs	r2, #36	; 0x24
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0201 	bic.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004714:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689a      	ldr	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004724:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d107      	bne.n	800473e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	e006      	b.n	800474c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689a      	ldr	r2, [r3, #8]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800474a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d104      	bne.n	800475e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800475c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6859      	ldr	r1, [r3, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	4b1d      	ldr	r3, [pc, #116]	; (80047e0 <HAL_I2C_Init+0x11c>)
 800476a:	430b      	orrs	r3, r1
 800476c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68da      	ldr	r2, [r3, #12]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800477c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	ea42 0103 	orr.w	r1, r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	021a      	lsls	r2, r3, #8
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69d9      	ldr	r1, [r3, #28]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	02008000 	.word	0x02008000

080047e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d138      	bne.n	800486c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004804:	2302      	movs	r3, #2
 8004806:	e032      	b.n	800486e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2224      	movs	r2, #36	; 0x24
 8004814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004836:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6819      	ldr	r1, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	430a      	orrs	r2, r1
 8004846:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e000      	b.n	800486e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800486c:	2302      	movs	r3, #2
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800487a:	b480      	push	{r7}
 800487c:	b085      	sub	sp, #20
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b20      	cmp	r3, #32
 800488e:	d139      	bne.n	8004904 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800489a:	2302      	movs	r3, #2
 800489c:	e033      	b.n	8004906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2224      	movs	r2, #36	; 0x24
 80048aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	021b      	lsls	r3, r3, #8
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2220      	movs	r2, #32
 80048f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004904:	2302      	movs	r3, #2
  }
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004918:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a04      	ldr	r2, [pc, #16]	; (8004930 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800491e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004922:	6013      	str	r3, [r2, #0]
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40007000 	.word	0x40007000

08004934 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800493e:	4b23      	ldr	r3, [pc, #140]	; (80049cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	4a22      	ldr	r2, [pc, #136]	; (80049cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004948:	6413      	str	r3, [r2, #64]	; 0x40
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_PWREx_EnableOverDrive+0x98>)
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	603b      	str	r3, [r7, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004956:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1d      	ldr	r2, [pc, #116]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800495c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004960:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004962:	f7fe fc07 	bl	8003174 <HAL_GetTick>
 8004966:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004968:	e009      	b.n	800497e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800496a:	f7fe fc03 	bl	8003174 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004978:	d901      	bls.n	800497e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e022      	b.n	80049c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800497e:	4b14      	ldr	r3, [pc, #80]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498a:	d1ee      	bne.n	800496a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0f      	ldr	r2, [pc, #60]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004992:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004996:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004998:	f7fe fbec 	bl	8003174 <HAL_GetTick>
 800499c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800499e:	e009      	b.n	80049b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049a0:	f7fe fbe8 	bl	8003174 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ae:	d901      	bls.n	80049b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80049b0:	2303      	movs	r3, #3
 80049b2:	e007      	b.n	80049c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80049b4:	4b06      	ldr	r3, [pc, #24]	; (80049d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049c0:	d1ee      	bne.n	80049a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40007000 	.word	0x40007000

080049d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80049dc:	2300      	movs	r3, #0
 80049de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e29b      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	f000 8087 	beq.w	8004b06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049f8:	4b96      	ldr	r3, [pc, #600]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b04      	cmp	r3, #4
 8004a02:	d00c      	beq.n	8004a1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a04:	4b93      	ldr	r3, [pc, #588]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f003 030c 	and.w	r3, r3, #12
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d112      	bne.n	8004a36 <HAL_RCC_OscConfig+0x62>
 8004a10:	4b90      	ldr	r3, [pc, #576]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a1c:	d10b      	bne.n	8004a36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a1e:	4b8d      	ldr	r3, [pc, #564]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d06c      	beq.n	8004b04 <HAL_RCC_OscConfig+0x130>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d168      	bne.n	8004b04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e275      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a3e:	d106      	bne.n	8004a4e <HAL_RCC_OscConfig+0x7a>
 8004a40:	4b84      	ldr	r3, [pc, #528]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a83      	ldr	r2, [pc, #524]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a4a:	6013      	str	r3, [r2, #0]
 8004a4c:	e02e      	b.n	8004aac <HAL_RCC_OscConfig+0xd8>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10c      	bne.n	8004a70 <HAL_RCC_OscConfig+0x9c>
 8004a56:	4b7f      	ldr	r3, [pc, #508]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a7e      	ldr	r2, [pc, #504]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	4b7c      	ldr	r3, [pc, #496]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a7b      	ldr	r2, [pc, #492]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	e01d      	b.n	8004aac <HAL_RCC_OscConfig+0xd8>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a78:	d10c      	bne.n	8004a94 <HAL_RCC_OscConfig+0xc0>
 8004a7a:	4b76      	ldr	r3, [pc, #472]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a75      	ldr	r2, [pc, #468]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	4b73      	ldr	r3, [pc, #460]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a72      	ldr	r2, [pc, #456]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	e00b      	b.n	8004aac <HAL_RCC_OscConfig+0xd8>
 8004a94:	4b6f      	ldr	r3, [pc, #444]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a6e      	ldr	r2, [pc, #440]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9e:	6013      	str	r3, [r2, #0]
 8004aa0:	4b6c      	ldr	r3, [pc, #432]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a6b      	ldr	r2, [pc, #428]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d013      	beq.n	8004adc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fe fb5e 	bl	8003174 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abc:	f7fe fb5a 	bl	8003174 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	; 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e229      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ace:	4b61      	ldr	r3, [pc, #388]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d0f0      	beq.n	8004abc <HAL_RCC_OscConfig+0xe8>
 8004ada:	e014      	b.n	8004b06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fe fb4a 	bl	8003174 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7fe fb46 	bl	8003174 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	; 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e215      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004af6:	4b57      	ldr	r3, [pc, #348]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f0      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x110>
 8004b02:	e000      	b.n	8004b06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d069      	beq.n	8004be6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b12:	4b50      	ldr	r3, [pc, #320]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b1e:	4b4d      	ldr	r3, [pc, #308]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	2b08      	cmp	r3, #8
 8004b28:	d11c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x190>
 8004b2a:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d116      	bne.n	8004b64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b36:	4b47      	ldr	r3, [pc, #284]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_RCC_OscConfig+0x17a>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d001      	beq.n	8004b4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	e1e9      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b4e:	4b41      	ldr	r3, [pc, #260]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	493d      	ldr	r1, [pc, #244]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b62:	e040      	b.n	8004be6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d023      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b6c:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a38      	ldr	r2, [pc, #224]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b72:	f043 0301 	orr.w	r3, r3, #1
 8004b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fe fafc 	bl	8003174 <HAL_GetTick>
 8004b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b80:	f7fe faf8 	bl	8003174 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e1c7      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b92:	4b30      	ldr	r3, [pc, #192]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b9e:	4b2d      	ldr	r3, [pc, #180]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4929      	ldr	r1, [pc, #164]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	600b      	str	r3, [r1, #0]
 8004bb2:	e018      	b.n	8004be6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bb4:	4b27      	ldr	r3, [pc, #156]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a26      	ldr	r2, [pc, #152]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc0:	f7fe fad8 	bl	8003174 <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bc6:	e008      	b.n	8004bda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bc8:	f7fe fad4 	bl	8003174 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d901      	bls.n	8004bda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e1a3      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bda:	4b1e      	ldr	r3, [pc, #120]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1f0      	bne.n	8004bc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d038      	beq.n	8004c64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d019      	beq.n	8004c2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bfa:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bfe:	4a15      	ldr	r2, [pc, #84]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004c00:	f043 0301 	orr.w	r3, r3, #1
 8004c04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c06:	f7fe fab5 	bl	8003174 <HAL_GetTick>
 8004c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c0c:	e008      	b.n	8004c20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0e:	f7fe fab1 	bl	8003174 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e180      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d0f0      	beq.n	8004c0e <HAL_RCC_OscConfig+0x23a>
 8004c2c:	e01a      	b.n	8004c64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004c30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c32:	4a08      	ldr	r2, [pc, #32]	; (8004c54 <HAL_RCC_OscConfig+0x280>)
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c3a:	f7fe fa9b 	bl	8003174 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c40:	e00a      	b.n	8004c58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c42:	f7fe fa97 	bl	8003174 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d903      	bls.n	8004c58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e166      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
 8004c54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c58:	4b92      	ldr	r3, [pc, #584]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1ee      	bne.n	8004c42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0304 	and.w	r3, r3, #4
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 80a4 	beq.w	8004dba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c72:	4b8c      	ldr	r3, [pc, #560]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10d      	bne.n	8004c9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c7e:	4b89      	ldr	r3, [pc, #548]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	4a88      	ldr	r2, [pc, #544]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c88:	6413      	str	r3, [r2, #64]	; 0x40
 8004c8a:	4b86      	ldr	r3, [pc, #536]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c9a:	4b83      	ldr	r3, [pc, #524]	; (8004ea8 <HAL_RCC_OscConfig+0x4d4>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d118      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ca6:	4b80      	ldr	r3, [pc, #512]	; (8004ea8 <HAL_RCC_OscConfig+0x4d4>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a7f      	ldr	r2, [pc, #508]	; (8004ea8 <HAL_RCC_OscConfig+0x4d4>)
 8004cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cb2:	f7fe fa5f 	bl	8003174 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cba:	f7fe fa5b 	bl	8003174 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b64      	cmp	r3, #100	; 0x64
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e12a      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ccc:	4b76      	ldr	r3, [pc, #472]	; (8004ea8 <HAL_RCC_OscConfig+0x4d4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d106      	bne.n	8004cee <HAL_RCC_OscConfig+0x31a>
 8004ce0:	4b70      	ldr	r3, [pc, #448]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce4:	4a6f      	ldr	r2, [pc, #444]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	6713      	str	r3, [r2, #112]	; 0x70
 8004cec:	e02d      	b.n	8004d4a <HAL_RCC_OscConfig+0x376>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10c      	bne.n	8004d10 <HAL_RCC_OscConfig+0x33c>
 8004cf6:	4b6b      	ldr	r3, [pc, #428]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cfa:	4a6a      	ldr	r2, [pc, #424]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	6713      	str	r3, [r2, #112]	; 0x70
 8004d02:	4b68      	ldr	r3, [pc, #416]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d06:	4a67      	ldr	r2, [pc, #412]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d08:	f023 0304 	bic.w	r3, r3, #4
 8004d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d0e:	e01c      	b.n	8004d4a <HAL_RCC_OscConfig+0x376>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	2b05      	cmp	r3, #5
 8004d16:	d10c      	bne.n	8004d32 <HAL_RCC_OscConfig+0x35e>
 8004d18:	4b62      	ldr	r3, [pc, #392]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d1c:	4a61      	ldr	r2, [pc, #388]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d1e:	f043 0304 	orr.w	r3, r3, #4
 8004d22:	6713      	str	r3, [r2, #112]	; 0x70
 8004d24:	4b5f      	ldr	r3, [pc, #380]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d28:	4a5e      	ldr	r2, [pc, #376]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d2a:	f043 0301 	orr.w	r3, r3, #1
 8004d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d30:	e00b      	b.n	8004d4a <HAL_RCC_OscConfig+0x376>
 8004d32:	4b5c      	ldr	r3, [pc, #368]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d36:	4a5b      	ldr	r2, [pc, #364]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d38:	f023 0301 	bic.w	r3, r3, #1
 8004d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d3e:	4b59      	ldr	r3, [pc, #356]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d42:	4a58      	ldr	r2, [pc, #352]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d44:	f023 0304 	bic.w	r3, r3, #4
 8004d48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d015      	beq.n	8004d7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d52:	f7fe fa0f 	bl	8003174 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d58:	e00a      	b.n	8004d70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5a:	f7fe fa0b 	bl	8003174 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e0d8      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d70:	4b4c      	ldr	r3, [pc, #304]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0ee      	beq.n	8004d5a <HAL_RCC_OscConfig+0x386>
 8004d7c:	e014      	b.n	8004da8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d7e:	f7fe f9f9 	bl	8003174 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d84:	e00a      	b.n	8004d9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d86:	f7fe f9f5 	bl	8003174 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e0c2      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d9c:	4b41      	ldr	r3, [pc, #260]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1ee      	bne.n	8004d86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004da8:	7dfb      	ldrb	r3, [r7, #23]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d105      	bne.n	8004dba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dae:	4b3d      	ldr	r3, [pc, #244]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	4a3c      	ldr	r2, [pc, #240]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004db4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f000 80ae 	beq.w	8004f20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004dc4:	4b37      	ldr	r3, [pc, #220]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f003 030c 	and.w	r3, r3, #12
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d06d      	beq.n	8004eac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d14b      	bne.n	8004e70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd8:	4b32      	ldr	r3, [pc, #200]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a31      	ldr	r2, [pc, #196]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fe f9c6 	bl	8003174 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dec:	f7fe f9c2 	bl	8003174 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e091      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfe:	4b29      	ldr	r3, [pc, #164]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	69da      	ldr	r2, [r3, #28]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	019b      	lsls	r3, r3, #6
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	085b      	lsrs	r3, r3, #1
 8004e22:	3b01      	subs	r3, #1
 8004e24:	041b      	lsls	r3, r3, #16
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2c:	061b      	lsls	r3, r3, #24
 8004e2e:	431a      	orrs	r2, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	071b      	lsls	r3, r3, #28
 8004e36:	491b      	ldr	r1, [pc, #108]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e3c:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a18      	ldr	r2, [pc, #96]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fe f994 	bl	8003174 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e50:	f7fe f990 	bl	8003174 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e05f      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e62:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d0f0      	beq.n	8004e50 <HAL_RCC_OscConfig+0x47c>
 8004e6e:	e057      	b.n	8004f20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e70:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a0b      	ldr	r2, [pc, #44]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7c:	f7fe f97a 	bl	8003174 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e84:	f7fe f976 	bl	8003174 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e045      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e96:	4b03      	ldr	r3, [pc, #12]	; (8004ea4 <HAL_RCC_OscConfig+0x4d0>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x4b0>
 8004ea2:	e03d      	b.n	8004f20 <HAL_RCC_OscConfig+0x54c>
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004eac:	4b1f      	ldr	r3, [pc, #124]	; (8004f2c <HAL_RCC_OscConfig+0x558>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d030      	beq.n	8004f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d129      	bne.n	8004f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d122      	bne.n	8004f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004edc:	4013      	ands	r3, r2
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ee2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d119      	bne.n	8004f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	085b      	lsrs	r3, r3, #1
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d10f      	bne.n	8004f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d107      	bne.n	8004f1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d001      	beq.n	8004f20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40023800 	.word	0x40023800

08004f30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d101      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0d0      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f48:	4b6a      	ldr	r3, [pc, #424]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 030f 	and.w	r3, r3, #15
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d910      	bls.n	8004f78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f56:	4b67      	ldr	r3, [pc, #412]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 020f 	bic.w	r2, r3, #15
 8004f5e:	4965      	ldr	r1, [pc, #404]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f66:	4b63      	ldr	r3, [pc, #396]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d001      	beq.n	8004f78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0b8      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d020      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f90:	4b59      	ldr	r3, [pc, #356]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	4a58      	ldr	r2, [pc, #352]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fa8:	4b53      	ldr	r3, [pc, #332]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	4a52      	ldr	r2, [pc, #328]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fb2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fb4:	4b50      	ldr	r3, [pc, #320]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	494d      	ldr	r1, [pc, #308]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d040      	beq.n	8005054 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d107      	bne.n	8004fea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fda:	4b47      	ldr	r3, [pc, #284]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d115      	bne.n	8005012 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e07f      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d107      	bne.n	8005002 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff2:	4b41      	ldr	r3, [pc, #260]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d109      	bne.n	8005012 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e073      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005002:	4b3d      	ldr	r3, [pc, #244]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e06b      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005012:	4b39      	ldr	r3, [pc, #228]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f023 0203 	bic.w	r2, r3, #3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4936      	ldr	r1, [pc, #216]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005020:	4313      	orrs	r3, r2
 8005022:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005024:	f7fe f8a6 	bl	8003174 <HAL_GetTick>
 8005028:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502a:	e00a      	b.n	8005042 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800502c:	f7fe f8a2 	bl	8003174 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	f241 3288 	movw	r2, #5000	; 0x1388
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800503e:	2303      	movs	r3, #3
 8005040:	e053      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005042:	4b2d      	ldr	r3, [pc, #180]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f003 020c 	and.w	r2, r3, #12
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	429a      	cmp	r2, r3
 8005052:	d1eb      	bne.n	800502c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005054:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d210      	bcs.n	8005084 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 020f 	bic.w	r2, r3, #15
 800506a:	4922      	ldr	r1, [pc, #136]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	4313      	orrs	r3, r2
 8005070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	4b20      	ldr	r3, [pc, #128]	; (80050f4 <HAL_RCC_ClockConfig+0x1c4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e032      	b.n	80050ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0304 	and.w	r3, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4916      	ldr	r1, [pc, #88]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050ae:	4b12      	ldr	r3, [pc, #72]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	00db      	lsls	r3, r3, #3
 80050bc:	490e      	ldr	r1, [pc, #56]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050c2:	f000 f821 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 80050c6:	4601      	mov	r1, r0
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_RCC_ClockConfig+0x1c8>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	091b      	lsrs	r3, r3, #4
 80050ce:	f003 030f 	and.w	r3, r3, #15
 80050d2:	4a0a      	ldr	r2, [pc, #40]	; (80050fc <HAL_RCC_ClockConfig+0x1cc>)
 80050d4:	5cd3      	ldrb	r3, [r2, r3]
 80050d6:	fa21 f303 	lsr.w	r3, r1, r3
 80050da:	4a09      	ldr	r2, [pc, #36]	; (8005100 <HAL_RCC_ClockConfig+0x1d0>)
 80050dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <HAL_RCC_ClockConfig+0x1d4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe f802 	bl	80030ec <HAL_InitTick>

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40023c00 	.word	0x40023c00
 80050f8:	40023800 	.word	0x40023800
 80050fc:	0800a010 	.word	0x0800a010
 8005100:	20000008 	.word	0x20000008
 8005104:	2000000c 	.word	0x2000000c

08005108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	607b      	str	r3, [r7, #4]
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	2300      	movs	r3, #0
 8005118:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800511e:	4b50      	ldr	r3, [pc, #320]	; (8005260 <HAL_RCC_GetSysClockFreq+0x158>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 030c 	and.w	r3, r3, #12
 8005126:	2b04      	cmp	r3, #4
 8005128:	d007      	beq.n	800513a <HAL_RCC_GetSysClockFreq+0x32>
 800512a:	2b08      	cmp	r3, #8
 800512c:	d008      	beq.n	8005140 <HAL_RCC_GetSysClockFreq+0x38>
 800512e:	2b00      	cmp	r3, #0
 8005130:	f040 808d 	bne.w	800524e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005134:	4b4b      	ldr	r3, [pc, #300]	; (8005264 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005136:	60bb      	str	r3, [r7, #8]
      break;
 8005138:	e08c      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800513a:	4b4b      	ldr	r3, [pc, #300]	; (8005268 <HAL_RCC_GetSysClockFreq+0x160>)
 800513c:	60bb      	str	r3, [r7, #8]
      break;
 800513e:	e089      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005140:	4b47      	ldr	r3, [pc, #284]	; (8005260 <HAL_RCC_GetSysClockFreq+0x158>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005148:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800514a:	4b45      	ldr	r3, [pc, #276]	; (8005260 <HAL_RCC_GetSysClockFreq+0x158>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d023      	beq.n	800519e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005156:	4b42      	ldr	r3, [pc, #264]	; (8005260 <HAL_RCC_GetSysClockFreq+0x158>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	099b      	lsrs	r3, r3, #6
 800515c:	f04f 0400 	mov.w	r4, #0
 8005160:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	ea03 0501 	and.w	r5, r3, r1
 800516c:	ea04 0602 	and.w	r6, r4, r2
 8005170:	4a3d      	ldr	r2, [pc, #244]	; (8005268 <HAL_RCC_GetSysClockFreq+0x160>)
 8005172:	fb02 f106 	mul.w	r1, r2, r6
 8005176:	2200      	movs	r2, #0
 8005178:	fb02 f205 	mul.w	r2, r2, r5
 800517c:	440a      	add	r2, r1
 800517e:	493a      	ldr	r1, [pc, #232]	; (8005268 <HAL_RCC_GetSysClockFreq+0x160>)
 8005180:	fba5 0101 	umull	r0, r1, r5, r1
 8005184:	1853      	adds	r3, r2, r1
 8005186:	4619      	mov	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f04f 0400 	mov.w	r4, #0
 800518e:	461a      	mov	r2, r3
 8005190:	4623      	mov	r3, r4
 8005192:	f7fb f8bd 	bl	8000310 <__aeabi_uldivmod>
 8005196:	4603      	mov	r3, r0
 8005198:	460c      	mov	r4, r1
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e049      	b.n	8005232 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519e:	4b30      	ldr	r3, [pc, #192]	; (8005260 <HAL_RCC_GetSysClockFreq+0x158>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	099b      	lsrs	r3, r3, #6
 80051a4:	f04f 0400 	mov.w	r4, #0
 80051a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	ea03 0501 	and.w	r5, r3, r1
 80051b4:	ea04 0602 	and.w	r6, r4, r2
 80051b8:	4629      	mov	r1, r5
 80051ba:	4632      	mov	r2, r6
 80051bc:	f04f 0300 	mov.w	r3, #0
 80051c0:	f04f 0400 	mov.w	r4, #0
 80051c4:	0154      	lsls	r4, r2, #5
 80051c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051ca:	014b      	lsls	r3, r1, #5
 80051cc:	4619      	mov	r1, r3
 80051ce:	4622      	mov	r2, r4
 80051d0:	1b49      	subs	r1, r1, r5
 80051d2:	eb62 0206 	sbc.w	r2, r2, r6
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	f04f 0400 	mov.w	r4, #0
 80051de:	0194      	lsls	r4, r2, #6
 80051e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051e4:	018b      	lsls	r3, r1, #6
 80051e6:	1a5b      	subs	r3, r3, r1
 80051e8:	eb64 0402 	sbc.w	r4, r4, r2
 80051ec:	f04f 0100 	mov.w	r1, #0
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	00e2      	lsls	r2, r4, #3
 80051f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051fa:	00d9      	lsls	r1, r3, #3
 80051fc:	460b      	mov	r3, r1
 80051fe:	4614      	mov	r4, r2
 8005200:	195b      	adds	r3, r3, r5
 8005202:	eb44 0406 	adc.w	r4, r4, r6
 8005206:	f04f 0100 	mov.w	r1, #0
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	02a2      	lsls	r2, r4, #10
 8005210:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005214:	0299      	lsls	r1, r3, #10
 8005216:	460b      	mov	r3, r1
 8005218:	4614      	mov	r4, r2
 800521a:	4618      	mov	r0, r3
 800521c:	4621      	mov	r1, r4
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f04f 0400 	mov.w	r4, #0
 8005224:	461a      	mov	r2, r3
 8005226:	4623      	mov	r3, r4
 8005228:	f7fb f872 	bl	8000310 <__aeabi_uldivmod>
 800522c:	4603      	mov	r3, r0
 800522e:	460c      	mov	r4, r1
 8005230:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005232:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <HAL_RCC_GetSysClockFreq+0x158>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	3301      	adds	r3, #1
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	60bb      	str	r3, [r7, #8]
      break;
 800524c:	e002      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800524e:	4b05      	ldr	r3, [pc, #20]	; (8005264 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005250:	60bb      	str	r3, [r7, #8]
      break;
 8005252:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005254:	68bb      	ldr	r3, [r7, #8]
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800525e:	bf00      	nop
 8005260:	40023800 	.word	0x40023800
 8005264:	00f42400 	.word	0x00f42400
 8005268:	00989680 	.word	0x00989680

0800526c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800526c:	b480      	push	{r7}
 800526e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005270:	4b03      	ldr	r3, [pc, #12]	; (8005280 <HAL_RCC_GetHCLKFreq+0x14>)
 8005272:	681b      	ldr	r3, [r3, #0]
}
 8005274:	4618      	mov	r0, r3
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20000008 	.word	0x20000008

08005284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005288:	f7ff fff0 	bl	800526c <HAL_RCC_GetHCLKFreq>
 800528c:	4601      	mov	r1, r0
 800528e:	4b05      	ldr	r3, [pc, #20]	; (80052a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	0a9b      	lsrs	r3, r3, #10
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	4a03      	ldr	r2, [pc, #12]	; (80052a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800529a:	5cd3      	ldrb	r3, [r2, r3]
 800529c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	40023800 	.word	0x40023800
 80052a8:	0800a020 	.word	0x0800a020

080052ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052b0:	f7ff ffdc 	bl	800526c <HAL_RCC_GetHCLKFreq>
 80052b4:	4601      	mov	r1, r0
 80052b6:	4b05      	ldr	r3, [pc, #20]	; (80052cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	0b5b      	lsrs	r3, r3, #13
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	4a03      	ldr	r2, [pc, #12]	; (80052d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052c2:	5cd3      	ldrb	r3, [r2, r3]
 80052c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40023800 	.word	0x40023800
 80052d0:	0800a020 	.word	0x0800a020

080052d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80052e0:	2300      	movs	r3, #0
 80052e2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d012      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052fc:	4b69      	ldr	r3, [pc, #420]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4a68      	ldr	r2, [pc, #416]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005302:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005306:	6093      	str	r3, [r2, #8]
 8005308:	4b66      	ldr	r3, [pc, #408]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005310:	4964      	ldr	r1, [pc, #400]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005312:	4313      	orrs	r3, r2
 8005314:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800531e:	2301      	movs	r3, #1
 8005320:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d017      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800532e:	4b5d      	ldr	r3, [pc, #372]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533c:	4959      	ldr	r1, [pc, #356]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534c:	d101      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800534e:	2301      	movs	r3, #1
 8005350:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800535a:	2301      	movs	r3, #1
 800535c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d017      	beq.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800536a:	4b4e      	ldr	r3, [pc, #312]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005370:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005378:	494a      	ldr	r1, [pc, #296]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005384:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005388:	d101      	bne.n	800538e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800538a:	2301      	movs	r3, #1
 800538c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005396:	2301      	movs	r3, #1
 8005398:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d001      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80053a6:	2301      	movs	r3, #1
 80053a8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0320 	and.w	r3, r3, #32
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 808b 	beq.w	80054ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80053b8:	4b3a      	ldr	r3, [pc, #232]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	4a39      	ldr	r2, [pc, #228]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c2:	6413      	str	r3, [r2, #64]	; 0x40
 80053c4:	4b37      	ldr	r3, [pc, #220]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80053d0:	4b35      	ldr	r3, [pc, #212]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a34      	ldr	r2, [pc, #208]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053dc:	f7fd feca 	bl	8003174 <HAL_GetTick>
 80053e0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e4:	f7fd fec6 	bl	8003174 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	; 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e38d      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053f6:	4b2c      	ldr	r3, [pc, #176]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005402:	4b28      	ldr	r3, [pc, #160]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d035      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	429a      	cmp	r2, r3
 800541e:	d02e      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005420:	4b20      	ldr	r3, [pc, #128]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005428:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800542a:	4b1e      	ldr	r3, [pc, #120]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542e:	4a1d      	ldr	r2, [pc, #116]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005434:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005436:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800543c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005440:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005442:	4a18      	ldr	r2, [pc, #96]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005448:	4b16      	ldr	r3, [pc, #88]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b01      	cmp	r3, #1
 8005452:	d114      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fd fe8e 	bl	8003174 <HAL_GetTick>
 8005458:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800545a:	e00a      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800545c:	f7fd fe8a 	bl	8003174 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	f241 3288 	movw	r2, #5000	; 0x1388
 800546a:	4293      	cmp	r3, r2
 800546c:	d901      	bls.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e34f      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005472:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0ee      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800548a:	d111      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800548c:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005498:	4b04      	ldr	r3, [pc, #16]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800549a:	400b      	ands	r3, r1
 800549c:	4901      	ldr	r1, [pc, #4]	; (80054a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	608b      	str	r3, [r1, #8]
 80054a2:	e00b      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80054a4:	40023800 	.word	0x40023800
 80054a8:	40007000 	.word	0x40007000
 80054ac:	0ffffcff 	.word	0x0ffffcff
 80054b0:	4bb3      	ldr	r3, [pc, #716]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	4ab2      	ldr	r2, [pc, #712]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054b6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80054ba:	6093      	str	r3, [r2, #8]
 80054bc:	4bb0      	ldr	r3, [pc, #704]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054c8:	49ad      	ldr	r1, [pc, #692]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054ca:	4313      	orrs	r3, r2
 80054cc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d010      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80054da:	4ba9      	ldr	r3, [pc, #676]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054e0:	4aa7      	ldr	r2, [pc, #668]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054e6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054ea:	4ba5      	ldr	r3, [pc, #660]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	49a2      	ldr	r1, [pc, #648]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00a      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005508:	4b9d      	ldr	r3, [pc, #628]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800550a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005516:	499a      	ldr	r1, [pc, #616]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005518:	4313      	orrs	r3, r2
 800551a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d00a      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800552a:	4b95      	ldr	r3, [pc, #596]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800552c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005530:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005538:	4991      	ldr	r1, [pc, #580]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00a      	beq.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800554c:	4b8c      	ldr	r3, [pc, #560]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800554e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005552:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800555a:	4989      	ldr	r1, [pc, #548]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800555c:	4313      	orrs	r3, r2
 800555e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00a      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800556e:	4b84      	ldr	r3, [pc, #528]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005574:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557c:	4980      	ldr	r1, [pc, #512]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800557e:	4313      	orrs	r3, r2
 8005580:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005590:	4b7b      	ldr	r3, [pc, #492]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005596:	f023 0203 	bic.w	r2, r3, #3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	4978      	ldr	r1, [pc, #480]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055b2:	4b73      	ldr	r3, [pc, #460]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b8:	f023 020c 	bic.w	r2, r3, #12
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055c0:	496f      	ldr	r1, [pc, #444]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00a      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80055d4:	4b6a      	ldr	r3, [pc, #424]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055da:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e2:	4967      	ldr	r1, [pc, #412]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055f6:	4b62      	ldr	r3, [pc, #392]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005604:	495e      	ldr	r1, [pc, #376]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005606:	4313      	orrs	r3, r2
 8005608:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00a      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005618:	4b59      	ldr	r3, [pc, #356]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800561e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	4956      	ldr	r1, [pc, #344]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00a      	beq.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800563a:	4b51      	ldr	r3, [pc, #324]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005640:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005648:	494d      	ldr	r1, [pc, #308]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800564a:	4313      	orrs	r3, r2
 800564c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d00a      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800565c:	4b48      	ldr	r3, [pc, #288]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800565e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005662:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800566a:	4945      	ldr	r1, [pc, #276]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800566c:	4313      	orrs	r3, r2
 800566e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00a      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800567e:	4b40      	ldr	r3, [pc, #256]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005684:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800568c:	493c      	ldr	r1, [pc, #240]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800568e:	4313      	orrs	r3, r2
 8005690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80056a0:	4b37      	ldr	r3, [pc, #220]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056ae:	4934      	ldr	r1, [pc, #208]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d011      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80056c2:	4b2f      	ldr	r3, [pc, #188]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056d0:	492b      	ldr	r1, [pc, #172]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056e0:	d101      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80056e2:	2301      	movs	r3, #1
 80056e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80056f2:	2301      	movs	r3, #1
 80056f4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00a      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005702:	4b1f      	ldr	r3, [pc, #124]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005708:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005710:	491b      	ldr	r1, [pc, #108]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005712:	4313      	orrs	r3, r2
 8005714:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00b      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005724:	4b16      	ldr	r3, [pc, #88]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005734:	4912      	ldr	r1, [pc, #72]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00b      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005748:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800574a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800574e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005758:	4909      	ldr	r1, [pc, #36]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00f      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800576c:	4b04      	ldr	r3, [pc, #16]	; (8005780 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800576e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005772:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577c:	e002      	b.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800577e:	bf00      	nop
 8005780:	40023800 	.word	0x40023800
 8005784:	4985      	ldr	r1, [pc, #532]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005786:	4313      	orrs	r3, r2
 8005788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00b      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005798:	4b80      	ldr	r3, [pc, #512]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800579a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800579e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a8:	497c      	ldr	r1, [pc, #496]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d005      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057be:	f040 80d6 	bne.w	800596e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057c2:	4b76      	ldr	r3, [pc, #472]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a75      	ldr	r2, [pc, #468]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ce:	f7fd fcd1 	bl	8003174 <HAL_GetTick>
 80057d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057d4:	e008      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057d6:	f7fd fccd 	bl	8003174 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b64      	cmp	r3, #100	; 0x64
 80057e2:	d901      	bls.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e194      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80057e8:	4b6c      	ldr	r3, [pc, #432]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1f0      	bne.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d021      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11d      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005808:	4b64      	ldr	r3, [pc, #400]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800580a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800580e:	0c1b      	lsrs	r3, r3, #16
 8005810:	f003 0303 	and.w	r3, r3, #3
 8005814:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005816:	4b61      	ldr	r3, [pc, #388]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800581c:	0e1b      	lsrs	r3, r3, #24
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	019a      	lsls	r2, r3, #6
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	041b      	lsls	r3, r3, #16
 800582e:	431a      	orrs	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	061b      	lsls	r3, r3, #24
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	071b      	lsls	r3, r3, #28
 800583c:	4957      	ldr	r1, [pc, #348]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005858:	d00a      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005862:	2b00      	cmp	r3, #0
 8005864:	d02e      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800586e:	d129      	bne.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005870:	4b4a      	ldr	r3, [pc, #296]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005872:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005876:	0c1b      	lsrs	r3, r3, #16
 8005878:	f003 0303 	and.w	r3, r3, #3
 800587c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800587e:	4b47      	ldr	r3, [pc, #284]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005884:	0f1b      	lsrs	r3, r3, #28
 8005886:	f003 0307 	and.w	r3, r3, #7
 800588a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	019a      	lsls	r2, r3, #6
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	041b      	lsls	r3, r3, #16
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	061b      	lsls	r3, r3, #24
 800589e:	431a      	orrs	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	071b      	lsls	r3, r3, #28
 80058a4:	493d      	ldr	r1, [pc, #244]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058a6:	4313      	orrs	r3, r2
 80058a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80058ac:	4b3b      	ldr	r3, [pc, #236]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b2:	f023 021f 	bic.w	r2, r3, #31
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	3b01      	subs	r3, #1
 80058bc:	4937      	ldr	r1, [pc, #220]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058be:	4313      	orrs	r3, r2
 80058c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01d      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058d0:	4b32      	ldr	r3, [pc, #200]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058d6:	0e1b      	lsrs	r3, r3, #24
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058de:	4b2f      	ldr	r3, [pc, #188]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80058e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e4:	0f1b      	lsrs	r3, r3, #28
 80058e6:	f003 0307 	and.w	r3, r3, #7
 80058ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	019a      	lsls	r2, r3, #6
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	041b      	lsls	r3, r3, #16
 80058f8:	431a      	orrs	r2, r3
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	061b      	lsls	r3, r3, #24
 80058fe:	431a      	orrs	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	071b      	lsls	r3, r3, #28
 8005904:	4925      	ldr	r1, [pc, #148]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d011      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	019a      	lsls	r2, r3, #6
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	041b      	lsls	r3, r3, #16
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	061b      	lsls	r3, r3, #24
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	071b      	lsls	r3, r3, #28
 8005934:	4919      	ldr	r1, [pc, #100]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005936:	4313      	orrs	r3, r2
 8005938:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800593c:	4b17      	ldr	r3, [pc, #92]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a16      	ldr	r2, [pc, #88]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005942:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005946:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005948:	f7fd fc14 	bl	8003174 <HAL_GetTick>
 800594c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800594e:	e008      	b.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005950:	f7fd fc10 	bl	8003174 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	2b64      	cmp	r3, #100	; 0x64
 800595c:	d901      	bls.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e0d7      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005962:	4b0e      	ldr	r3, [pc, #56]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d0f0      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	2b01      	cmp	r3, #1
 8005972:	f040 80cd 	bne.w	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005976:	4b09      	ldr	r3, [pc, #36]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a08      	ldr	r2, [pc, #32]	; (800599c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800597c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005982:	f7fd fbf7 	bl	8003174 <HAL_GetTick>
 8005986:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005988:	e00a      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800598a:	f7fd fbf3 	bl	8003174 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b64      	cmp	r3, #100	; 0x64
 8005996:	d903      	bls.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e0ba      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800599c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059a0:	4b5e      	ldr	r3, [pc, #376]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ac:	d0ed      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d009      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d02e      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d12a      	bne.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059d6:	4b51      	ldr	r3, [pc, #324]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059dc:	0c1b      	lsrs	r3, r3, #16
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059e4:	4b4d      	ldr	r3, [pc, #308]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	0f1b      	lsrs	r3, r3, #28
 80059ec:	f003 0307 	and.w	r3, r3, #7
 80059f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	019a      	lsls	r2, r3, #6
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	041b      	lsls	r3, r3, #16
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	061b      	lsls	r3, r3, #24
 8005a04:	431a      	orrs	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	071b      	lsls	r3, r3, #28
 8005a0a:	4944      	ldr	r1, [pc, #272]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a12:	4b42      	ldr	r3, [pc, #264]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a18:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	3b01      	subs	r3, #1
 8005a22:	021b      	lsls	r3, r3, #8
 8005a24:	493d      	ldr	r1, [pc, #244]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d022      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a40:	d11d      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a42:	4b36      	ldr	r3, [pc, #216]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	0e1b      	lsrs	r3, r3, #24
 8005a4a:	f003 030f 	and.w	r3, r3, #15
 8005a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a50:	4b32      	ldr	r3, [pc, #200]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a56:	0f1b      	lsrs	r3, r3, #28
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	019a      	lsls	r2, r3, #6
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	041b      	lsls	r3, r3, #16
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	431a      	orrs	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	4929      	ldr	r1, [pc, #164]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d028      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a8a:	4b24      	ldr	r3, [pc, #144]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a90:	0e1b      	lsrs	r3, r3, #24
 8005a92:	f003 030f 	and.w	r3, r3, #15
 8005a96:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a98:	4b20      	ldr	r3, [pc, #128]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9e:	0c1b      	lsrs	r3, r3, #16
 8005aa0:	f003 0303 	and.w	r3, r3, #3
 8005aa4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	019a      	lsls	r2, r3, #6
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	041b      	lsls	r3, r3, #16
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	061b      	lsls	r3, r3, #24
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	071b      	lsls	r3, r3, #28
 8005abe:	4917      	ldr	r1, [pc, #92]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ac6:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005acc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	4911      	ldr	r1, [pc, #68]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005adc:	4b0f      	ldr	r3, [pc, #60]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0e      	ldr	r2, [pc, #56]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae8:	f7fd fb44 	bl	8003174 <HAL_GetTick>
 8005aec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aee:	e008      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005af0:	f7fd fb40 	bl	8003174 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b64      	cmp	r3, #100	; 0x64
 8005afc:	d901      	bls.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e007      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b0e:	d1ef      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	40023800 	.word	0x40023800

08005b20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e084      	b.n	8005c3c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d106      	bne.n	8005b52 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7fc fe15 	bl	800277c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b68:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b72:	d902      	bls.n	8005b7a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e002      	b.n	8005b80 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b88:	d007      	beq.n	8005b9a <HAL_SPI_Init+0x7a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b92:	d002      	beq.n	8005b9a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d10b      	bne.n	8005bba <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005baa:	d903      	bls.n	8005bb4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
 8005bb2:	e002      	b.n	8005bba <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6a1b      	ldr	r3, [r3, #32]
 8005be4:	ea42 0103 	orr.w	r1, r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	430a      	orrs	r2, r1
 8005bf2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699b      	ldr	r3, [r3, #24]
 8005bf8:	0c1b      	lsrs	r3, r3, #16
 8005bfa:	f003 0204 	and.w	r2, r3, #4
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	ea42 0103 	orr.w	r1, r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	69da      	ldr	r2, [r3, #28]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d110      	bne.n	8005c80 <HAL_SPI_Receive_DMA+0x3c>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c66:	d10b      	bne.n	8005c80 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005c70:	88fb      	ldrh	r3, [r7, #6]
 8005c72:	68ba      	ldr	r2, [r7, #8]
 8005c74:	68b9      	ldr	r1, [r7, #8]
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f000 f900 	bl	8005e7c <HAL_SPI_TransmitReceive_DMA>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	e0f3      	b.n	8005e68 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <HAL_SPI_Receive_DMA+0x4a>
 8005c8a:	2302      	movs	r3, #2
 8005c8c:	e0ec      	b.n	8005e68 <HAL_SPI_Receive_DMA+0x224>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d002      	beq.n	8005ca8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8005ca2:	2302      	movs	r3, #2
 8005ca4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ca6:	e0da      	b.n	8005e5e <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_SPI_Receive_DMA+0x70>
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d102      	bne.n	8005cba <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cb8:	e0d1      	b.n	8005e5e <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	88fa      	ldrh	r2, [r7, #6]
 8005cd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	88fa      	ldrh	r2, [r7, #6]
 8005cda:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cfe:	d107      	bne.n	8005d10 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d0e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d1e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d28:	d908      	bls.n	8005d3c <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685a      	ldr	r2, [r3, #4]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d38:	605a      	str	r2, [r3, #4]
 8005d3a:	e042      	b.n	8005dc2 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d4a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d56:	d134      	bne.n	8005dc2 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d66:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d111      	bne.n	8005d9c <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d86:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	085b      	lsrs	r3, r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d9a:	e012      	b.n	8005dc2 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005daa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	085b      	lsrs	r3, r3, #1
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	3301      	adds	r3, #1
 8005dba:	b29a      	uxth	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc6:	4a2a      	ldr	r2, [pc, #168]	; (8005e70 <HAL_SPI_Receive_DMA+0x22c>)
 8005dc8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	4a29      	ldr	r2, [pc, #164]	; (8005e74 <HAL_SPI_Receive_DMA+0x230>)
 8005dd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd6:	4a28      	ldr	r2, [pc, #160]	; (8005e78 <HAL_SPI_Receive_DMA+0x234>)
 8005dd8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dde:	2200      	movs	r2, #0
 8005de0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	330c      	adds	r3, #12
 8005dec:	4619      	mov	r1, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f7fd ffb4 	bl	8003d68 <HAL_DMA_Start_IT>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00c      	beq.n	8005e20 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e0a:	f043 0210 	orr.w	r2, r3, #16
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8005e1e:	e01e      	b.n	8005e5e <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d007      	beq.n	8005e3e <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e3c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0220 	orr.w	r2, r2, #32
 8005e4c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 0201 	orr.w	r2, r2, #1
 8005e5c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3718      	adds	r7, #24
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	080062fd 	.word	0x080062fd
 8005e74:	080061e5 	.word	0x080061e5
 8005e78:	08006335 	.word	0x08006335

08005e7c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	607a      	str	r2, [r7, #4]
 8005e88:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d101      	bne.n	8005e9c <HAL_SPI_TransmitReceive_DMA+0x20>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e16c      	b.n	8006176 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005eaa:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8005eb2:	7dbb      	ldrb	r3, [r7, #22]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d00d      	beq.n	8005ed4 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ebe:	d106      	bne.n	8005ece <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d102      	bne.n	8005ece <HAL_SPI_TransmitReceive_DMA+0x52>
 8005ec8:	7dbb      	ldrb	r3, [r7, #22]
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	d002      	beq.n	8005ed4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8005ece:	2302      	movs	r3, #2
 8005ed0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ed2:	e14b      	b.n	800616c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d005      	beq.n	8005ee6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005ee0:	887b      	ldrh	r3, [r7, #2]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d102      	bne.n	8005eec <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005eea:	e13f      	b.n	800616c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b04      	cmp	r3, #4
 8005ef6:	d003      	beq.n	8005f00 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2205      	movs	r2, #5
 8005efc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	887a      	ldrh	r2, [r7, #2]
 8005f10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	887a      	ldrh	r2, [r7, #2]
 8005f16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	887a      	ldrh	r2, [r7, #2]
 8005f22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	887a      	ldrh	r2, [r7, #2]
 8005f2a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8005f48:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	68db      	ldr	r3, [r3, #12]
 8005f4e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f52:	d908      	bls.n	8005f66 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f62:	605a      	str	r2, [r3, #4]
 8005f64:	e06f      	b.n	8006046 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f74:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	699b      	ldr	r3, [r3, #24]
 8005f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f80:	d126      	bne.n	8005fd0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d10f      	bne.n	8005fae <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005f9c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fac:	e010      	b.n	8005fd0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005fbc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	085b      	lsrs	r3, r3, #1
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	3301      	adds	r3, #1
 8005fca:	b29a      	uxth	r2, r3
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fda:	d134      	bne.n	8006046 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005fea:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d111      	bne.n	8006020 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800600a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006012:	b29b      	uxth	r3, r3
 8006014:	085b      	lsrs	r3, r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800601e:	e012      	b.n	8006046 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800602e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006036:	b29b      	uxth	r3, r3
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	b29b      	uxth	r3, r3
 800603c:	3301      	adds	r3, #1
 800603e:	b29a      	uxth	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b04      	cmp	r3, #4
 8006050:	d108      	bne.n	8006064 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006056:	4a4a      	ldr	r2, [pc, #296]	; (8006180 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006058:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605e:	4a49      	ldr	r2, [pc, #292]	; (8006184 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006060:	63da      	str	r2, [r3, #60]	; 0x3c
 8006062:	e007      	b.n	8006074 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006068:	4a47      	ldr	r2, [pc, #284]	; (8006188 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800606a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006070:	4a46      	ldr	r2, [pc, #280]	; (800618c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8006072:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006078:	4a45      	ldr	r2, [pc, #276]	; (8006190 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800607a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006080:	2200      	movs	r2, #0
 8006082:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	330c      	adds	r3, #12
 800608e:	4619      	mov	r1, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	461a      	mov	r2, r3
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800609c:	b29b      	uxth	r3, r3
 800609e:	f7fd fe63 	bl	8003d68 <HAL_DMA_Start_IT>
 80060a2:	4603      	mov	r3, r0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00c      	beq.n	80060c2 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ac:	f043 0210 	orr.w	r2, r3, #16
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80060c0:	e054      	b.n	800616c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f042 0201 	orr.w	r2, r2, #1
 80060d0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	2200      	movs	r2, #0
 80060d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060de:	2200      	movs	r2, #0
 80060e0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e6:	2200      	movs	r2, #0
 80060e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ee:	2200      	movs	r2, #0
 80060f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fa:	4619      	mov	r1, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	330c      	adds	r3, #12
 8006102:	461a      	mov	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006108:	b29b      	uxth	r3, r3
 800610a:	f7fd fe2d 	bl	8003d68 <HAL_DMA_Start_IT>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00c      	beq.n	800612e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006118:	f043 0210 	orr.w	r2, r3, #16
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800612c:	e01e      	b.n	800616c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	d007      	beq.n	800614c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800614a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f042 0220 	orr.w	r2, r2, #32
 800615a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0202 	orr.w	r2, r2, #2
 800616a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006174:	7dfb      	ldrb	r3, [r7, #23]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	080062fd 	.word	0x080062fd
 8006184:	080061e5 	.word	0x080061e5
 8006188:	08006319 	.word	0x08006319
 800618c:	0800626b 	.word	0x0800626b
 8006190:	08006335 	.word	0x08006335

08006194 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061f2:	f7fc ffbf 	bl	8003174 <HAL_GetTick>
 80061f6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006202:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006206:	d02a      	beq.n	800625e <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0220 	bic.w	r2, r2, #32
 8006216:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f022 0203 	bic.w	r2, r2, #3
 8006226:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	2164      	movs	r1, #100	; 0x64
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f000 f978 	bl	8006522 <SPI_EndRxTransaction>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d002      	beq.n	800623e <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2201      	movs	r2, #1
 800624a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff ffba 	bl	80061d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800625c:	e002      	b.n	8006264 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7fb fcea 	bl	8001c38 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006278:	f7fc ff7c 	bl	8003174 <HAL_GetTick>
 800627c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006288:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800628c:	d030      	beq.n	80062f0 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f022 0220 	bic.w	r2, r2, #32
 800629c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	2164      	movs	r1, #100	; 0x64
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f000 f995 	bl	80065d2 <SPI_EndRxTxTransaction>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b2:	f043 0220 	orr.w	r2, r3, #32
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0203 	bic.w	r2, r2, #3
 80062c8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f7ff ff71 	bl	80061d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80062ee:	e002      	b.n	80062f6 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f7ff ff4f 	bl	8006194 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff ff4c 	bl	80061a8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006310:	bf00      	nop
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006324:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7ff ff48 	bl	80061bc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800632c:	bf00      	nop
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0203 	bic.w	r2, r2, #3
 8006350:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006356:	f043 0210 	orr.w	r2, r3, #16
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7ff ff32 	bl	80061d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	603b      	str	r3, [r7, #0]
 8006380:	4613      	mov	r3, r2
 8006382:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006384:	e04c      	b.n	8006420 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638c:	d048      	beq.n	8006420 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800638e:	f7fc fef1 	bl	8003174 <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	429a      	cmp	r2, r3
 800639c:	d902      	bls.n	80063a4 <SPI_WaitFlagStateUntilTimeout+0x30>
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d13d      	bne.n	8006420 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063b2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063bc:	d111      	bne.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c6:	d004      	beq.n	80063d2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d0:	d107      	bne.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ea:	d10f      	bne.n	800640c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063fa:	601a      	str	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800640a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e00f      	b.n	8006440 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4013      	ands	r3, r2
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	429a      	cmp	r2, r3
 800642e:	bf0c      	ite	eq
 8006430:	2301      	moveq	r3, #1
 8006432:	2300      	movne	r3, #0
 8006434:	b2db      	uxtb	r3, r3
 8006436:	461a      	mov	r2, r3
 8006438:	79fb      	ldrb	r3, [r7, #7]
 800643a:	429a      	cmp	r2, r3
 800643c:	d1a3      	bne.n	8006386 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006456:	e057      	b.n	8006508 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800645e:	d106      	bne.n	800646e <SPI_WaitFifoStateUntilTimeout+0x26>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d103      	bne.n	800646e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d048      	beq.n	8006508 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006476:	f7fc fe7d 	bl	8003174 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	429a      	cmp	r2, r3
 8006484:	d902      	bls.n	800648c <SPI_WaitFifoStateUntilTimeout+0x44>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d13d      	bne.n	8006508 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800649a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064a4:	d111      	bne.n	80064ca <SPI_WaitFifoStateUntilTimeout+0x82>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064ae:	d004      	beq.n	80064ba <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b8:	d107      	bne.n	80064ca <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064d2:	d10f      	bne.n	80064f4 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006504:	2303      	movs	r3, #3
 8006506:	e008      	b.n	800651a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689a      	ldr	r2, [r3, #8]
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	4013      	ands	r3, r2
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	d19f      	bne.n	8006458 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006518:	2300      	movs	r3, #0
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b086      	sub	sp, #24
 8006526:	af02      	add	r7, sp, #8
 8006528:	60f8      	str	r0, [r7, #12]
 800652a:	60b9      	str	r1, [r7, #8]
 800652c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006536:	d111      	bne.n	800655c <SPI_EndRxTransaction+0x3a>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006540:	d004      	beq.n	800654c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654a:	d107      	bne.n	800655c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800655a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	9300      	str	r3, [sp, #0]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2200      	movs	r2, #0
 8006564:	2180      	movs	r1, #128	; 0x80
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f7ff ff04 	bl	8006374 <SPI_WaitFlagStateUntilTimeout>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d007      	beq.n	8006582 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006576:	f043 0220 	orr.w	r2, r3, #32
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e023      	b.n	80065ca <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800658a:	d11d      	bne.n	80065c8 <SPI_EndRxTransaction+0xa6>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006594:	d004      	beq.n	80065a0 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800659e:	d113      	bne.n	80065c8 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f7ff ff4b 	bl	8006448 <SPI_WaitFifoStateUntilTimeout>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d007      	beq.n	80065c8 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065bc:	f043 0220 	orr.w	r2, r3, #32
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e000      	b.n	80065ca <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b086      	sub	sp, #24
 80065d6:	af02      	add	r7, sp, #8
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f7ff ff2c 	bl	8006448 <SPI_WaitFifoStateUntilTimeout>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d007      	beq.n	8006606 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065fa:	f043 0220 	orr.w	r2, r3, #32
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e027      	b.n	8006656 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2200      	movs	r2, #0
 800660e:	2180      	movs	r1, #128	; 0x80
 8006610:	68f8      	ldr	r0, [r7, #12]
 8006612:	f7ff feaf 	bl	8006374 <SPI_WaitFlagStateUntilTimeout>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d007      	beq.n	800662c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006620:	f043 0220 	orr.w	r2, r3, #32
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e014      	b.n	8006656 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	2200      	movs	r2, #0
 8006634:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006638:	68f8      	ldr	r0, [r7, #12]
 800663a:	f7ff ff05 	bl	8006448 <SPI_WaitFifoStateUntilTimeout>
 800663e:	4603      	mov	r3, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006648:	f043 0220 	orr.w	r2, r3, #32
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e000      	b.n	8006656 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3710      	adds	r7, #16
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d101      	bne.n	8006670 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e01d      	b.n	80066ac <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d106      	bne.n	800668a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f7fc f923 	bl	80028d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2202      	movs	r2, #2
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	3304      	adds	r3, #4
 800669a:	4619      	mov	r1, r3
 800669c:	4610      	mov	r0, r2
 800669e:	f001 f827 	bl	80076f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066aa:	2300      	movs	r3, #0
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3708      	adds	r7, #8
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0201 	orr.w	r2, r2, #1
 80066ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	689a      	ldr	r2, [r3, #8]
 80066d2:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <HAL_TIM_Base_Start_IT+0x50>)
 80066d4:	4013      	ands	r3, r2
 80066d6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b06      	cmp	r3, #6
 80066dc:	d00b      	beq.n	80066f6 <HAL_TIM_Base_Start_IT+0x42>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e4:	d007      	beq.n	80066f6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f042 0201 	orr.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3714      	adds	r7, #20
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	00010007 	.word	0x00010007

08006708 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0201 	bic.w	r2, r2, #1
 800671e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6a1a      	ldr	r2, [r3, #32]
 8006726:	f241 1311 	movw	r3, #4369	; 0x1111
 800672a:	4013      	ands	r3, r2
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10f      	bne.n	8006750 <HAL_TIM_Base_Stop_IT+0x48>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6a1a      	ldr	r2, [r3, #32]
 8006736:	f240 4344 	movw	r3, #1092	; 0x444
 800673a:	4013      	ands	r3, r2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d107      	bne.n	8006750 <HAL_TIM_Base_Stop_IT+0x48>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0201 	bic.w	r2, r2, #1
 800674e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e01d      	b.n	80067ac <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006776:	b2db      	uxtb	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	d106      	bne.n	800678a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f7fc f9b7 	bl	8002af8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2202      	movs	r2, #2
 800678e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	4619      	mov	r1, r3
 800679c:	4610      	mov	r0, r2
 800679e:	f000 ffa7 	bl	80076f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3708      	adds	r7, #8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b0c      	cmp	r3, #12
 80067c2:	d841      	bhi.n	8006848 <HAL_TIM_PWM_Start_IT+0x94>
 80067c4:	a201      	add	r2, pc, #4	; (adr r2, 80067cc <HAL_TIM_PWM_Start_IT+0x18>)
 80067c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ca:	bf00      	nop
 80067cc:	08006801 	.word	0x08006801
 80067d0:	08006849 	.word	0x08006849
 80067d4:	08006849 	.word	0x08006849
 80067d8:	08006849 	.word	0x08006849
 80067dc:	08006813 	.word	0x08006813
 80067e0:	08006849 	.word	0x08006849
 80067e4:	08006849 	.word	0x08006849
 80067e8:	08006849 	.word	0x08006849
 80067ec:	08006825 	.word	0x08006825
 80067f0:	08006849 	.word	0x08006849
 80067f4:	08006849 	.word	0x08006849
 80067f8:	08006849 	.word	0x08006849
 80067fc:	08006837 	.word	0x08006837
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0202 	orr.w	r2, r2, #2
 800680e:	60da      	str	r2, [r3, #12]
      break;
 8006810:	e01b      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0204 	orr.w	r2, r2, #4
 8006820:	60da      	str	r2, [r3, #12]
      break;
 8006822:	e012      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68da      	ldr	r2, [r3, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0208 	orr.w	r2, r2, #8
 8006832:	60da      	str	r2, [r3, #12]
      break;
 8006834:	e009      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f042 0210 	orr.w	r2, r2, #16
 8006844:	60da      	str	r2, [r3, #12]
      break;
 8006846:	e000      	b.n	800684a <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8006848:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2201      	movs	r2, #1
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f001 fc96 	bl	8008184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a17      	ldr	r2, [pc, #92]	; (80068bc <HAL_TIM_PWM_Start_IT+0x108>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d004      	beq.n	800686c <HAL_TIM_PWM_Start_IT+0xb8>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <HAL_TIM_PWM_Start_IT+0x10c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d101      	bne.n	8006870 <HAL_TIM_PWM_Start_IT+0xbc>
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <HAL_TIM_PWM_Start_IT+0xbe>
 8006870:	2300      	movs	r3, #0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d007      	beq.n	8006886 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006884:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <HAL_TIM_PWM_Start_IT+0x110>)
 800688e:	4013      	ands	r3, r2
 8006890:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2b06      	cmp	r3, #6
 8006896:	d00b      	beq.n	80068b0 <HAL_TIM_PWM_Start_IT+0xfc>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800689e:	d007      	beq.n	80068b0 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f042 0201 	orr.w	r2, r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40010000 	.word	0x40010000
 80068c0:	40010400 	.word	0x40010400
 80068c4:	00010007 	.word	0x00010007

080068c8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b0c      	cmp	r3, #12
 80068d6:	d841      	bhi.n	800695c <HAL_TIM_PWM_Stop_IT+0x94>
 80068d8:	a201      	add	r2, pc, #4	; (adr r2, 80068e0 <HAL_TIM_PWM_Stop_IT+0x18>)
 80068da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068de:	bf00      	nop
 80068e0:	08006915 	.word	0x08006915
 80068e4:	0800695d 	.word	0x0800695d
 80068e8:	0800695d 	.word	0x0800695d
 80068ec:	0800695d 	.word	0x0800695d
 80068f0:	08006927 	.word	0x08006927
 80068f4:	0800695d 	.word	0x0800695d
 80068f8:	0800695d 	.word	0x0800695d
 80068fc:	0800695d 	.word	0x0800695d
 8006900:	08006939 	.word	0x08006939
 8006904:	0800695d 	.word	0x0800695d
 8006908:	0800695d 	.word	0x0800695d
 800690c:	0800695d 	.word	0x0800695d
 8006910:	0800694b 	.word	0x0800694b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0202 	bic.w	r2, r2, #2
 8006922:	60da      	str	r2, [r3, #12]
      break;
 8006924:	e01b      	b.n	800695e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68da      	ldr	r2, [r3, #12]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0204 	bic.w	r2, r2, #4
 8006934:	60da      	str	r2, [r3, #12]
      break;
 8006936:	e012      	b.n	800695e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f022 0208 	bic.w	r2, r2, #8
 8006946:	60da      	str	r2, [r3, #12]
      break;
 8006948:	e009      	b.n	800695e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68da      	ldr	r2, [r3, #12]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0210 	bic.w	r2, r2, #16
 8006958:	60da      	str	r2, [r3, #12]
      break;
 800695a:	e000      	b.n	800695e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800695c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2200      	movs	r2, #0
 8006964:	6839      	ldr	r1, [r7, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f001 fc0c 	bl	8008184 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a20      	ldr	r2, [pc, #128]	; (80069f4 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d004      	beq.n	8006980 <HAL_TIM_PWM_Stop_IT+0xb8>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <HAL_TIM_PWM_Stop_IT+0x130>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d101      	bne.n	8006984 <HAL_TIM_PWM_Stop_IT+0xbc>
 8006980:	2301      	movs	r3, #1
 8006982:	e000      	b.n	8006986 <HAL_TIM_PWM_Stop_IT+0xbe>
 8006984:	2300      	movs	r3, #0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d017      	beq.n	80069ba <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	f241 1311 	movw	r3, #4369	; 0x1111
 8006994:	4013      	ands	r3, r2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10f      	bne.n	80069ba <HAL_TIM_PWM_Stop_IT+0xf2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6a1a      	ldr	r2, [r3, #32]
 80069a0:	f240 4344 	movw	r3, #1092	; 0x444
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d107      	bne.n	80069ba <HAL_TIM_PWM_Stop_IT+0xf2>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80069c4:	4013      	ands	r3, r2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d10f      	bne.n	80069ea <HAL_TIM_PWM_Stop_IT+0x122>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6a1a      	ldr	r2, [r3, #32]
 80069d0:	f240 4344 	movw	r3, #1092	; 0x444
 80069d4:	4013      	ands	r3, r2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d107      	bne.n	80069ea <HAL_TIM_PWM_Stop_IT+0x122>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f022 0201 	bic.w	r2, r2, #1
 80069e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	40010000 	.word	0x40010000
 80069f8:	40010400 	.word	0x40010400

080069fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e01d      	b.n	8006a4a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d106      	bne.n	8006a28 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fb ffea 	bl	80029fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2202      	movs	r2, #2
 8006a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f000 fe58 	bl	80076f0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d101      	bne.n	8006a72 <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e0e0      	b.n	8006c34 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d10b      	bne.n	8006a96 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d104      	bne.n	8006a8e <HAL_TIM_IC_Start_DMA+0x3a>
 8006a84:	887b      	ldrh	r3, [r7, #2]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d001      	beq.n	8006a8e <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e0d2      	b.n	8006c34 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2202      	movs	r2, #2
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	2b0c      	cmp	r3, #12
 8006a9a:	f200 80ad 	bhi.w	8006bf8 <HAL_TIM_IC_Start_DMA+0x1a4>
 8006a9e:	a201      	add	r2, pc, #4	; (adr r2, 8006aa4 <HAL_TIM_IC_Start_DMA+0x50>)
 8006aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa4:	08006ad9 	.word	0x08006ad9
 8006aa8:	08006bf9 	.word	0x08006bf9
 8006aac:	08006bf9 	.word	0x08006bf9
 8006ab0:	08006bf9 	.word	0x08006bf9
 8006ab4:	08006b21 	.word	0x08006b21
 8006ab8:	08006bf9 	.word	0x08006bf9
 8006abc:	08006bf9 	.word	0x08006bf9
 8006ac0:	08006bf9 	.word	0x08006bf9
 8006ac4:	08006b69 	.word	0x08006b69
 8006ac8:	08006bf9 	.word	0x08006bf9
 8006acc:	08006bf9 	.word	0x08006bf9
 8006ad0:	08006bf9 	.word	0x08006bf9
 8006ad4:	08006bb1 	.word	0x08006bb1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	4a57      	ldr	r2, [pc, #348]	; (8006c3c <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006ade:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	4a56      	ldr	r2, [pc, #344]	; (8006c40 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	4a55      	ldr	r2, [pc, #340]	; (8006c44 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006aee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3334      	adds	r3, #52	; 0x34
 8006afa:	4619      	mov	r1, r3
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	887b      	ldrh	r3, [r7, #2]
 8006b00:	f7fd f932 	bl	8003d68 <HAL_DMA_Start_IT>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d001      	beq.n	8006b0e <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e092      	b.n	8006c34 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b1c:	60da      	str	r2, [r3, #12]
      break;
 8006b1e:	e06c      	b.n	8006bfa <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	4a45      	ldr	r2, [pc, #276]	; (8006c3c <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006b26:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2c:	4a44      	ldr	r2, [pc, #272]	; (8006c40 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006b2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	4a43      	ldr	r2, [pc, #268]	; (8006c44 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006b36:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	3338      	adds	r3, #56	; 0x38
 8006b42:	4619      	mov	r1, r3
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	887b      	ldrh	r3, [r7, #2]
 8006b48:	f7fd f90e 	bl	8003d68 <HAL_DMA_Start_IT>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d001      	beq.n	8006b56 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e06e      	b.n	8006c34 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b64:	60da      	str	r2, [r3, #12]
      break;
 8006b66:	e048      	b.n	8006bfa <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	4a33      	ldr	r2, [pc, #204]	; (8006c3c <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006b6e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	4a32      	ldr	r2, [pc, #200]	; (8006c40 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006b76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	4a31      	ldr	r2, [pc, #196]	; (8006c44 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006b7e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	333c      	adds	r3, #60	; 0x3c
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	887b      	ldrh	r3, [r7, #2]
 8006b90:	f7fd f8ea 	bl	8003d68 <HAL_DMA_Start_IT>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d001      	beq.n	8006b9e <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e04a      	b.n	8006c34 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68da      	ldr	r2, [r3, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006bac:	60da      	str	r2, [r3, #12]
      break;
 8006bae:	e024      	b.n	8006bfa <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb4:	4a21      	ldr	r2, [pc, #132]	; (8006c3c <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006bb6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bbc:	4a20      	ldr	r2, [pc, #128]	; (8006c40 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	4a1f      	ldr	r2, [pc, #124]	; (8006c44 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006bc6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3340      	adds	r3, #64	; 0x40
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	887b      	ldrh	r3, [r7, #2]
 8006bd8:	f7fd f8c6 	bl	8003d68 <HAL_DMA_Start_IT>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e026      	b.n	8006c34 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68da      	ldr	r2, [r3, #12]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bf4:	60da      	str	r2, [r3, #12]
      break;
 8006bf6:	e000      	b.n	8006bfa <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8006bf8:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	68b9      	ldr	r1, [r7, #8]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f001 fabe 	bl	8008184 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689a      	ldr	r2, [r3, #8]
 8006c0e:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <HAL_TIM_IC_Start_DMA+0x1f4>)
 8006c10:	4013      	ands	r3, r2
 8006c12:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	2b06      	cmp	r3, #6
 8006c18:	d00b      	beq.n	8006c32 <HAL_TIM_IC_Start_DMA+0x1de>
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c20:	d007      	beq.n	8006c32 <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0201 	orr.w	r2, r2, #1
 8006c30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	08007611 	.word	0x08007611
 8006c40:	08007681 	.word	0x08007681
 8006c44:	080075ed 	.word	0x080075ed
 8006c48:	00010007 	.word	0x00010007

08006c4c <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b0c      	cmp	r3, #12
 8006c5a:	d855      	bhi.n	8006d08 <HAL_TIM_IC_Stop_DMA+0xbc>
 8006c5c:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <HAL_TIM_IC_Stop_DMA+0x18>)
 8006c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c62:	bf00      	nop
 8006c64:	08006c99 	.word	0x08006c99
 8006c68:	08006d09 	.word	0x08006d09
 8006c6c:	08006d09 	.word	0x08006d09
 8006c70:	08006d09 	.word	0x08006d09
 8006c74:	08006cb5 	.word	0x08006cb5
 8006c78:	08006d09 	.word	0x08006d09
 8006c7c:	08006d09 	.word	0x08006d09
 8006c80:	08006d09 	.word	0x08006d09
 8006c84:	08006cd1 	.word	0x08006cd1
 8006c88:	08006d09 	.word	0x08006d09
 8006c8c:	08006d09 	.word	0x08006d09
 8006c90:	08006d09 	.word	0x08006d09
 8006c94:	08006ced 	.word	0x08006ced
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006ca6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7fd f8bb 	bl	8003e28 <HAL_DMA_Abort_IT>
      break;
 8006cb2:	e02a      	b.n	8006d0a <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cc2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fd f8ad 	bl	8003e28 <HAL_DMA_Abort_IT>
      break;
 8006cce:	e01c      	b.n	8006d0a <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68da      	ldr	r2, [r3, #12]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cde:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fd f89f 	bl	8003e28 <HAL_DMA_Abort_IT>
      break;
 8006cea:	e00e      	b.n	8006d0a <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	68da      	ldr	r2, [r3, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006cfa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fd f891 	bl	8003e28 <HAL_DMA_Abort_IT>
      break;
 8006d06:	e000      	b.n	8006d0a <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 8006d08:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	6839      	ldr	r1, [r7, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f001 fa36 	bl	8008184 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	6a1a      	ldr	r2, [r3, #32]
 8006d1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006d22:	4013      	ands	r3, r2
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10f      	bne.n	8006d48 <HAL_TIM_IC_Stop_DMA+0xfc>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6a1a      	ldr	r2, [r3, #32]
 8006d2e:	f240 4344 	movw	r3, #1092	; 0x444
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d107      	bne.n	8006d48 <HAL_TIM_IC_Stop_DMA+0xfc>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0201 	bic.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop

08006d5c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e02d      	b.n	8006dcc <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d106      	bne.n	8006d8a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 f825 	bl	8006dd4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2202      	movs	r2, #2
 8006d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	3304      	adds	r3, #4
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	4610      	mov	r0, r2
 8006d9e:	f000 fca7 	bl	80076f0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0208 	bic.w	r2, r2, #8
 8006db0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6819      	ldr	r1, [r3, #0]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	430a      	orrs	r2, r1
 8006dc0:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3708      	adds	r7, #8
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006ddc:	bf00      	nop
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d122      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	68db      	ldr	r3, [r3, #12]
 8006e04:	f003 0302 	and.w	r3, r3, #2
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	d11b      	bne.n	8006e44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f06f 0202 	mvn.w	r2, #2
 8006e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	f003 0303 	and.w	r3, r3, #3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fa fe42 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
 8006e30:	e005      	b.n	8006e3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fba8 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 fbb9 	bl	80075b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	f003 0304 	and.w	r3, r3, #4
 8006e4e:	2b04      	cmp	r3, #4
 8006e50:	d122      	bne.n	8006e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	f003 0304 	and.w	r3, r3, #4
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d11b      	bne.n	8006e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f06f 0204 	mvn.w	r2, #4
 8006e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2202      	movs	r2, #2
 8006e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d003      	beq.n	8006e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7fa fe18 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
 8006e84:	e005      	b.n	8006e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f000 fb7e 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fb8f 	bl	80075b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d122      	bne.n	8006eec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f003 0308 	and.w	r3, r3, #8
 8006eb0:	2b08      	cmp	r3, #8
 8006eb2:	d11b      	bne.n	8006eec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f06f 0208 	mvn.w	r2, #8
 8006ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2204      	movs	r2, #4
 8006ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	69db      	ldr	r3, [r3, #28]
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f7fa fdee 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
 8006ed8:	e005      	b.n	8006ee6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 fb54 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fb65 	bl	80075b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0310 	and.w	r3, r3, #16
 8006ef6:	2b10      	cmp	r3, #16
 8006ef8:	d122      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0310 	and.w	r3, r3, #16
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d11b      	bne.n	8006f40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0210 	mvn.w	r2, #16
 8006f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2208      	movs	r2, #8
 8006f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69db      	ldr	r3, [r3, #28]
 8006f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fa fdc4 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
 8006f2c:	e005      	b.n	8006f3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 fb2a 	bl	8007588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fb3b 	bl	80075b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d10e      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d107      	bne.n	8006f6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0201 	mvn.w	r2, #1
 8006f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fa fc9a 	bl	80018a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f76:	2b80      	cmp	r3, #128	; 0x80
 8006f78:	d10e      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f84:	2b80      	cmp	r3, #128	; 0x80
 8006f86:	d107      	bne.n	8006f98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f001 fa32 	bl	80083fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fa6:	d10e      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb2:	2b80      	cmp	r3, #128	; 0x80
 8006fb4:	d107      	bne.n	8006fc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f001 fa25 	bl	8008410 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd0:	2b40      	cmp	r3, #64	; 0x40
 8006fd2:	d10e      	bne.n	8006ff2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fde:	2b40      	cmp	r3, #64	; 0x40
 8006fe0:	d107      	bne.n	8006ff2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fae9 	bl	80075c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	d10e      	bne.n	800701e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	f003 0320 	and.w	r3, r3, #32
 800700a:	2b20      	cmp	r3, #32
 800700c:	d107      	bne.n	800701e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f06f 0220 	mvn.w	r2, #32
 8007016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f001 f9e5 	bl	80083e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800701e:	bf00      	nop
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b084      	sub	sp, #16
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007038:	2b01      	cmp	r3, #1
 800703a:	d101      	bne.n	8007040 <HAL_TIM_IC_ConfigChannel+0x1a>
 800703c:	2302      	movs	r3, #2
 800703e:	e08a      	b.n	8007156 <HAL_TIM_IC_ConfigChannel+0x130>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d11b      	bne.n	800708e <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	6819      	ldr	r1, [r3, #0]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	685a      	ldr	r2, [r3, #4]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f000 fec9 	bl	8007dfc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	699a      	ldr	r2, [r3, #24]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f022 020c 	bic.w	r2, r2, #12
 8007078:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	6999      	ldr	r1, [r3, #24]
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	689a      	ldr	r2, [r3, #8]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	619a      	str	r2, [r3, #24]
 800708c:	e05a      	b.n	8007144 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d11c      	bne.n	80070ce <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	6819      	ldr	r1, [r3, #0]
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	f000 ff4d 	bl	8007f42 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	699a      	ldr	r2, [r3, #24]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070b6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	6999      	ldr	r1, [r3, #24]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	021a      	lsls	r2, r3, #8
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	619a      	str	r2, [r3, #24]
 80070cc:	e03a      	b.n	8007144 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2b08      	cmp	r3, #8
 80070d2:	d11b      	bne.n	800710c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	6819      	ldr	r1, [r3, #0]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	685a      	ldr	r2, [r3, #4]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	68db      	ldr	r3, [r3, #12]
 80070e4:	f000 ff9a 	bl	800801c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	69da      	ldr	r2, [r3, #28]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f022 020c 	bic.w	r2, r2, #12
 80070f6:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	69d9      	ldr	r1, [r3, #28]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	689a      	ldr	r2, [r3, #8]
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	61da      	str	r2, [r3, #28]
 800710a:	e01b      	b.n	8007144 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	6819      	ldr	r1, [r3, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f000 ffba 	bl	8008094 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	69da      	ldr	r2, [r3, #28]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800712e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	69d9      	ldr	r1, [r3, #28]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	021a      	lsls	r2, r3, #8
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007176:	2302      	movs	r3, #2
 8007178:	e105      	b.n	8007386 <HAL_TIM_PWM_ConfigChannel+0x226>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2202      	movs	r2, #2
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b14      	cmp	r3, #20
 800718e:	f200 80f0 	bhi.w	8007372 <HAL_TIM_PWM_ConfigChannel+0x212>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071ed 	.word	0x080071ed
 800719c:	08007373 	.word	0x08007373
 80071a0:	08007373 	.word	0x08007373
 80071a4:	08007373 	.word	0x08007373
 80071a8:	0800722d 	.word	0x0800722d
 80071ac:	08007373 	.word	0x08007373
 80071b0:	08007373 	.word	0x08007373
 80071b4:	08007373 	.word	0x08007373
 80071b8:	0800726f 	.word	0x0800726f
 80071bc:	08007373 	.word	0x08007373
 80071c0:	08007373 	.word	0x08007373
 80071c4:	08007373 	.word	0x08007373
 80071c8:	080072af 	.word	0x080072af
 80071cc:	08007373 	.word	0x08007373
 80071d0:	08007373 	.word	0x08007373
 80071d4:	08007373 	.word	0x08007373
 80071d8:	080072f1 	.word	0x080072f1
 80071dc:	08007373 	.word	0x08007373
 80071e0:	08007373 	.word	0x08007373
 80071e4:	08007373 	.word	0x08007373
 80071e8:	08007331 	.word	0x08007331
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 fb1c 	bl	8007830 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0208 	orr.w	r2, r2, #8
 8007206:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f022 0204 	bic.w	r2, r2, #4
 8007216:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6999      	ldr	r1, [r3, #24]
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	691a      	ldr	r2, [r3, #16]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	619a      	str	r2, [r3, #24]
      break;
 800722a:	e0a3      	b.n	8007374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	4618      	mov	r0, r3
 8007234:	f000 fb6e 	bl	8007914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699a      	ldr	r2, [r3, #24]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6999      	ldr	r1, [r3, #24]
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	021a      	lsls	r2, r3, #8
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	430a      	orrs	r2, r1
 800726a:	619a      	str	r2, [r3, #24]
      break;
 800726c:	e082      	b.n	8007374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	4618      	mov	r0, r3
 8007276:	f000 fbc5 	bl	8007a04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	69da      	ldr	r2, [r3, #28]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f042 0208 	orr.w	r2, r2, #8
 8007288:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	69da      	ldr	r2, [r3, #28]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f022 0204 	bic.w	r2, r2, #4
 8007298:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	69d9      	ldr	r1, [r3, #28]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	691a      	ldr	r2, [r3, #16]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	430a      	orrs	r2, r1
 80072aa:	61da      	str	r2, [r3, #28]
      break;
 80072ac:	e062      	b.n	8007374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68b9      	ldr	r1, [r7, #8]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f000 fc1b 	bl	8007af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69d9      	ldr	r1, [r3, #28]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	021a      	lsls	r2, r3, #8
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	61da      	str	r2, [r3, #28]
      break;
 80072ee:	e041      	b.n	8007374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68b9      	ldr	r1, [r7, #8]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fc52 	bl	8007ba0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f042 0208 	orr.w	r2, r2, #8
 800730a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f022 0204 	bic.w	r2, r2, #4
 800731a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	691a      	ldr	r2, [r3, #16]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800732e:	e021      	b.n	8007374 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68b9      	ldr	r1, [r7, #8]
 8007336:	4618      	mov	r0, r3
 8007338:	f000 fc84 	bl	8007c44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800734a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800735a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	021a      	lsls	r2, r3, #8
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	430a      	orrs	r2, r1
 800736e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007370:	e000      	b.n	8007374 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007372:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007384:	2300      	movs	r3, #0
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop

08007390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d101      	bne.n	80073a8 <HAL_TIM_ConfigClockSource+0x18>
 80073a4:	2302      	movs	r3, #2
 80073a6:	e0a6      	b.n	80074f6 <HAL_TIM_ConfigClockSource+0x166>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2202      	movs	r2, #2
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	4b4f      	ldr	r3, [pc, #316]	; (8007500 <HAL_TIM_ConfigClockSource+0x170>)
 80073c4:	4013      	ands	r3, r2
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b40      	cmp	r3, #64	; 0x40
 80073de:	d067      	beq.n	80074b0 <HAL_TIM_ConfigClockSource+0x120>
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d80b      	bhi.n	80073fc <HAL_TIM_ConfigClockSource+0x6c>
 80073e4:	2b10      	cmp	r3, #16
 80073e6:	d073      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0x140>
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d802      	bhi.n	80073f2 <HAL_TIM_ConfigClockSource+0x62>
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d06f      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80073f0:	e078      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80073f2:	2b20      	cmp	r3, #32
 80073f4:	d06c      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0x140>
 80073f6:	2b30      	cmp	r3, #48	; 0x30
 80073f8:	d06a      	beq.n	80074d0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80073fa:	e073      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80073fc:	2b70      	cmp	r3, #112	; 0x70
 80073fe:	d00d      	beq.n	800741c <HAL_TIM_ConfigClockSource+0x8c>
 8007400:	2b70      	cmp	r3, #112	; 0x70
 8007402:	d804      	bhi.n	800740e <HAL_TIM_ConfigClockSource+0x7e>
 8007404:	2b50      	cmp	r3, #80	; 0x50
 8007406:	d033      	beq.n	8007470 <HAL_TIM_ConfigClockSource+0xe0>
 8007408:	2b60      	cmp	r3, #96	; 0x60
 800740a:	d041      	beq.n	8007490 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800740c:	e06a      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800740e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007412:	d066      	beq.n	80074e2 <HAL_TIM_ConfigClockSource+0x152>
 8007414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007418:	d017      	beq.n	800744a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800741a:	e063      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	6899      	ldr	r1, [r3, #8]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f000 fe8a 	bl	8008144 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800743e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	68fa      	ldr	r2, [r7, #12]
 8007446:	609a      	str	r2, [r3, #8]
      break;
 8007448:	e04c      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6818      	ldr	r0, [r3, #0]
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	6899      	ldr	r1, [r3, #8]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f000 fe73 	bl	8008144 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800746c:	609a      	str	r2, [r3, #8]
      break;
 800746e:	e039      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	6859      	ldr	r1, [r3, #4]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	461a      	mov	r2, r3
 800747e:	f000 fd31 	bl	8007ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2150      	movs	r1, #80	; 0x50
 8007488:	4618      	mov	r0, r3
 800748a:	f000 fe40 	bl	800810e <TIM_ITRx_SetConfig>
      break;
 800748e:	e029      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6818      	ldr	r0, [r3, #0]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	6859      	ldr	r1, [r3, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	68db      	ldr	r3, [r3, #12]
 800749c:	461a      	mov	r2, r3
 800749e:	f000 fd8d 	bl	8007fbc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2160      	movs	r1, #96	; 0x60
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fe30 	bl	800810e <TIM_ITRx_SetConfig>
      break;
 80074ae:	e019      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	6859      	ldr	r1, [r3, #4]
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	461a      	mov	r2, r3
 80074be:	f000 fd11 	bl	8007ee4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2140      	movs	r1, #64	; 0x40
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fe20 	bl	800810e <TIM_ITRx_SetConfig>
      break;
 80074ce:	e009      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f000 fe17 	bl	800810e <TIM_ITRx_SetConfig>
      break;
 80074e0:	e000      	b.n	80074e4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80074e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	fffeff88 	.word	0xfffeff88

08007504 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007514:	2b01      	cmp	r3, #1
 8007516:	d101      	bne.n	800751c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007518:	2302      	movs	r3, #2
 800751a:	e031      	b.n	8007580 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800752c:	6839      	ldr	r1, [r7, #0]
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 fbdc 	bl	8007cec <TIM_SlaveTimer_SetConfig>
 8007534:	4603      	mov	r3, r0
 8007536:	2b00      	cmp	r3, #0
 8007538:	d009      	beq.n	800754e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e018      	b.n	8007580 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68da      	ldr	r2, [r3, #12]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800755c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800756c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007590:	bf00      	nop
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f7ff ffe8 	bl	80075d8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007608:	bf00      	nop
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}

08007610 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	429a      	cmp	r2, r3
 800762e:	d103      	bne.n	8007638 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2201      	movs	r2, #1
 8007634:	771a      	strb	r2, [r3, #28]
 8007636:	e019      	b.n	800766c <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	429a      	cmp	r2, r3
 8007640:	d103      	bne.n	800764a <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2202      	movs	r2, #2
 8007646:	771a      	strb	r2, [r3, #28]
 8007648:	e010      	b.n	800766c <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	429a      	cmp	r2, r3
 8007652:	d103      	bne.n	800765c <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2204      	movs	r2, #4
 8007658:	771a      	strb	r2, [r3, #28]
 800765a:	e007      	b.n	800766c <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	429a      	cmp	r2, r3
 8007664:	d102      	bne.n	800766c <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2208      	movs	r2, #8
 800766a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7fa fa21 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	771a      	strb	r2, [r3, #28]
}
 8007678:	bf00      	nop
 800767a:	3710      	adds	r7, #16
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b084      	sub	sp, #16
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768c:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	429a      	cmp	r2, r3
 800769e:	d103      	bne.n	80076a8 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	771a      	strb	r2, [r3, #28]
 80076a6:	e019      	b.n	80076dc <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d103      	bne.n	80076ba <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2202      	movs	r2, #2
 80076b6:	771a      	strb	r2, [r3, #28]
 80076b8:	e010      	b.n	80076dc <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d103      	bne.n	80076cc <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	2204      	movs	r2, #4
 80076c8:	771a      	strb	r2, [r3, #28]
 80076ca:	e007      	b.n	80076dc <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d102      	bne.n	80076dc <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2208      	movs	r2, #8
 80076da:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f7ff ff5d 	bl	800759c <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	771a      	strb	r2, [r3, #28]
}
 80076e8:	bf00      	nop
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a40      	ldr	r2, [pc, #256]	; (8007804 <TIM_Base_SetConfig+0x114>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d013      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800770e:	d00f      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	4a3d      	ldr	r2, [pc, #244]	; (8007808 <TIM_Base_SetConfig+0x118>)
 8007714:	4293      	cmp	r3, r2
 8007716:	d00b      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	4a3c      	ldr	r2, [pc, #240]	; (800780c <TIM_Base_SetConfig+0x11c>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d007      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	4a3b      	ldr	r2, [pc, #236]	; (8007810 <TIM_Base_SetConfig+0x120>)
 8007724:	4293      	cmp	r3, r2
 8007726:	d003      	beq.n	8007730 <TIM_Base_SetConfig+0x40>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	4a3a      	ldr	r2, [pc, #232]	; (8007814 <TIM_Base_SetConfig+0x124>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d108      	bne.n	8007742 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007736:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	4313      	orrs	r3, r2
 8007740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a2f      	ldr	r2, [pc, #188]	; (8007804 <TIM_Base_SetConfig+0x114>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d02b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007750:	d027      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2c      	ldr	r2, [pc, #176]	; (8007808 <TIM_Base_SetConfig+0x118>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d023      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2b      	ldr	r2, [pc, #172]	; (800780c <TIM_Base_SetConfig+0x11c>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d01f      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a2a      	ldr	r2, [pc, #168]	; (8007810 <TIM_Base_SetConfig+0x120>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d01b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a29      	ldr	r2, [pc, #164]	; (8007814 <TIM_Base_SetConfig+0x124>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d017      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a28      	ldr	r2, [pc, #160]	; (8007818 <TIM_Base_SetConfig+0x128>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	4a27      	ldr	r2, [pc, #156]	; (800781c <TIM_Base_SetConfig+0x12c>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d00f      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	4a26      	ldr	r2, [pc, #152]	; (8007820 <TIM_Base_SetConfig+0x130>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d00b      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a25      	ldr	r2, [pc, #148]	; (8007824 <TIM_Base_SetConfig+0x134>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d007      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	4a24      	ldr	r2, [pc, #144]	; (8007828 <TIM_Base_SetConfig+0x138>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d003      	beq.n	80077a2 <TIM_Base_SetConfig+0xb2>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	4a23      	ldr	r2, [pc, #140]	; (800782c <TIM_Base_SetConfig+0x13c>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d108      	bne.n	80077b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	68db      	ldr	r3, [r3, #12]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	689a      	ldr	r2, [r3, #8]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a0a      	ldr	r2, [pc, #40]	; (8007804 <TIM_Base_SetConfig+0x114>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_Base_SetConfig+0xf8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a0c      	ldr	r2, [pc, #48]	; (8007814 <TIM_Base_SetConfig+0x124>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d103      	bne.n	80077f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	691a      	ldr	r2, [r3, #16]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	615a      	str	r2, [r3, #20]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	40010000 	.word	0x40010000
 8007808:	40000400 	.word	0x40000400
 800780c:	40000800 	.word	0x40000800
 8007810:	40000c00 	.word	0x40000c00
 8007814:	40010400 	.word	0x40010400
 8007818:	40014000 	.word	0x40014000
 800781c:	40014400 	.word	0x40014400
 8007820:	40014800 	.word	0x40014800
 8007824:	40001800 	.word	0x40001800
 8007828:	40001c00 	.word	0x40001c00
 800782c:	40002000 	.word	0x40002000

08007830 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007830:	b480      	push	{r7}
 8007832:	b087      	sub	sp, #28
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	f023 0201 	bic.w	r2, r3, #1
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4b2b      	ldr	r3, [pc, #172]	; (8007908 <TIM_OC1_SetConfig+0xd8>)
 800785c:	4013      	ands	r3, r2
 800785e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f023 0303 	bic.w	r3, r3, #3
 8007866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	4313      	orrs	r3, r2
 8007870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f023 0302 	bic.w	r3, r3, #2
 8007878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	4313      	orrs	r3, r2
 8007882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a21      	ldr	r2, [pc, #132]	; (800790c <TIM_OC1_SetConfig+0xdc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d003      	beq.n	8007894 <TIM_OC1_SetConfig+0x64>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a20      	ldr	r2, [pc, #128]	; (8007910 <TIM_OC1_SetConfig+0xe0>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d10c      	bne.n	80078ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	f023 0308 	bic.w	r3, r3, #8
 800789a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	697a      	ldr	r2, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f023 0304 	bic.w	r3, r3, #4
 80078ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a16      	ldr	r2, [pc, #88]	; (800790c <TIM_OC1_SetConfig+0xdc>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d003      	beq.n	80078be <TIM_OC1_SetConfig+0x8e>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a15      	ldr	r2, [pc, #84]	; (8007910 <TIM_OC1_SetConfig+0xe0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d111      	bne.n	80078e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	693a      	ldr	r2, [r7, #16]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	693a      	ldr	r2, [r7, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	697a      	ldr	r2, [r7, #20]
 80078fa:	621a      	str	r2, [r3, #32]
}
 80078fc:	bf00      	nop
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	fffeff8f 	.word	0xfffeff8f
 800790c:	40010000 	.word	0x40010000
 8007910:	40010400 	.word	0x40010400

08007914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007914:	b480      	push	{r7}
 8007916:	b087      	sub	sp, #28
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a1b      	ldr	r3, [r3, #32]
 8007922:	f023 0210 	bic.w	r2, r3, #16
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	699b      	ldr	r3, [r3, #24]
 800793a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	4b2e      	ldr	r3, [pc, #184]	; (80079f8 <TIM_OC2_SetConfig+0xe4>)
 8007940:	4013      	ands	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800794a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	021b      	lsls	r3, r3, #8
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	4313      	orrs	r3, r2
 8007956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f023 0320 	bic.w	r3, r3, #32
 800795e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4313      	orrs	r3, r2
 800796a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	4a23      	ldr	r2, [pc, #140]	; (80079fc <TIM_OC2_SetConfig+0xe8>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d003      	beq.n	800797c <TIM_OC2_SetConfig+0x68>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <TIM_OC2_SetConfig+0xec>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d10d      	bne.n	8007998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	011b      	lsls	r3, r3, #4
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	4313      	orrs	r3, r2
 800798e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007996:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a18      	ldr	r2, [pc, #96]	; (80079fc <TIM_OC2_SetConfig+0xe8>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d003      	beq.n	80079a8 <TIM_OC2_SetConfig+0x94>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a17      	ldr	r2, [pc, #92]	; (8007a00 <TIM_OC2_SetConfig+0xec>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d113      	bne.n	80079d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	693a      	ldr	r2, [r7, #16]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	699b      	ldr	r3, [r3, #24]
 80079c8:	009b      	lsls	r3, r3, #2
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	693a      	ldr	r2, [r7, #16]
 80079d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	621a      	str	r2, [r3, #32]
}
 80079ea:	bf00      	nop
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	feff8fff 	.word	0xfeff8fff
 80079fc:	40010000 	.word	0x40010000
 8007a00:	40010400 	.word	0x40010400

08007a04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b087      	sub	sp, #28
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	4b2d      	ldr	r3, [pc, #180]	; (8007ae4 <TIM_OC3_SetConfig+0xe0>)
 8007a30:	4013      	ands	r3, r2
 8007a32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f023 0303 	bic.w	r3, r3, #3
 8007a3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	021b      	lsls	r3, r3, #8
 8007a54:	697a      	ldr	r2, [r7, #20]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a22      	ldr	r2, [pc, #136]	; (8007ae8 <TIM_OC3_SetConfig+0xe4>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d003      	beq.n	8007a6a <TIM_OC3_SetConfig+0x66>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a21      	ldr	r2, [pc, #132]	; (8007aec <TIM_OC3_SetConfig+0xe8>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d10d      	bne.n	8007a86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	021b      	lsls	r3, r3, #8
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a17      	ldr	r2, [pc, #92]	; (8007ae8 <TIM_OC3_SetConfig+0xe4>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_OC3_SetConfig+0x92>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a16      	ldr	r2, [pc, #88]	; (8007aec <TIM_OC3_SetConfig+0xe8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d113      	bne.n	8007abe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	011b      	lsls	r3, r3, #4
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	011b      	lsls	r3, r3, #4
 8007ab8:	693a      	ldr	r2, [r7, #16]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	685a      	ldr	r2, [r3, #4]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	621a      	str	r2, [r3, #32]
}
 8007ad8:	bf00      	nop
 8007ada:	371c      	adds	r7, #28
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	fffeff8f 	.word	0xfffeff8f
 8007ae8:	40010000 	.word	0x40010000
 8007aec:	40010400 	.word	0x40010400

08007af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b087      	sub	sp, #28
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
 8007af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	4b1e      	ldr	r3, [pc, #120]	; (8007b94 <TIM_OC4_SetConfig+0xa4>)
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	68fa      	ldr	r2, [r7, #12]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	031b      	lsls	r3, r3, #12
 8007b42:	693a      	ldr	r2, [r7, #16]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	4a13      	ldr	r2, [pc, #76]	; (8007b98 <TIM_OC4_SetConfig+0xa8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d003      	beq.n	8007b58 <TIM_OC4_SetConfig+0x68>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	4a12      	ldr	r2, [pc, #72]	; (8007b9c <TIM_OC4_SetConfig+0xac>)
 8007b54:	4293      	cmp	r3, r2
 8007b56:	d109      	bne.n	8007b6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	019b      	lsls	r3, r3, #6
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	feff8fff 	.word	0xfeff8fff
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	40010400 	.word	0x40010400

08007ba0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4b1b      	ldr	r3, [pc, #108]	; (8007c38 <TIM_OC5_SetConfig+0x98>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	68fa      	ldr	r2, [r7, #12]
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007be0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	041b      	lsls	r3, r3, #16
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	4313      	orrs	r3, r2
 8007bec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a12      	ldr	r2, [pc, #72]	; (8007c3c <TIM_OC5_SetConfig+0x9c>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d003      	beq.n	8007bfe <TIM_OC5_SetConfig+0x5e>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a11      	ldr	r2, [pc, #68]	; (8007c40 <TIM_OC5_SetConfig+0xa0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d109      	bne.n	8007c12 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	695b      	ldr	r3, [r3, #20]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	697a      	ldr	r2, [r7, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	621a      	str	r2, [r3, #32]
}
 8007c2c:	bf00      	nop
 8007c2e:	371c      	adds	r7, #28
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	fffeff8f 	.word	0xfffeff8f
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	40010400 	.word	0x40010400

08007c44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4b1c      	ldr	r3, [pc, #112]	; (8007ce0 <TIM_OC6_SetConfig+0x9c>)
 8007c70:	4013      	ands	r3, r2
 8007c72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	021b      	lsls	r3, r3, #8
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	689b      	ldr	r3, [r3, #8]
 8007c8c:	051b      	lsls	r3, r3, #20
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a13      	ldr	r2, [pc, #76]	; (8007ce4 <TIM_OC6_SetConfig+0xa0>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d003      	beq.n	8007ca4 <TIM_OC6_SetConfig+0x60>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a12      	ldr	r2, [pc, #72]	; (8007ce8 <TIM_OC6_SetConfig+0xa4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d109      	bne.n	8007cb8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007caa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	029b      	lsls	r3, r3, #10
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	621a      	str	r2, [r3, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	feff8fff 	.word	0xfeff8fff
 8007ce4:	40010000 	.word	0x40010000
 8007ce8:	40010400 	.word	0x40010400

08007cec <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b086      	sub	sp, #24
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	689b      	ldr	r3, [r3, #8]
 8007cfc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d04:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	697a      	ldr	r2, [r7, #20]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007d10:	697a      	ldr	r2, [r7, #20]
 8007d12:	4b39      	ldr	r3, [pc, #228]	; (8007df8 <TIM_SlaveTimer_SetConfig+0x10c>)
 8007d14:	4013      	ands	r3, r2
 8007d16:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	2b30      	cmp	r3, #48	; 0x30
 8007d30:	d05c      	beq.n	8007dec <TIM_SlaveTimer_SetConfig+0x100>
 8007d32:	2b30      	cmp	r3, #48	; 0x30
 8007d34:	d806      	bhi.n	8007d44 <TIM_SlaveTimer_SetConfig+0x58>
 8007d36:	2b10      	cmp	r3, #16
 8007d38:	d058      	beq.n	8007dec <TIM_SlaveTimer_SetConfig+0x100>
 8007d3a:	2b20      	cmp	r3, #32
 8007d3c:	d056      	beq.n	8007dec <TIM_SlaveTimer_SetConfig+0x100>
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d054      	beq.n	8007dec <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8007d42:	e054      	b.n	8007dee <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007d44:	2b50      	cmp	r3, #80	; 0x50
 8007d46:	d03d      	beq.n	8007dc4 <TIM_SlaveTimer_SetConfig+0xd8>
 8007d48:	2b50      	cmp	r3, #80	; 0x50
 8007d4a:	d802      	bhi.n	8007d52 <TIM_SlaveTimer_SetConfig+0x66>
 8007d4c:	2b40      	cmp	r3, #64	; 0x40
 8007d4e:	d010      	beq.n	8007d72 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8007d50:	e04d      	b.n	8007dee <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8007d52:	2b60      	cmp	r3, #96	; 0x60
 8007d54:	d040      	beq.n	8007dd8 <TIM_SlaveTimer_SetConfig+0xec>
 8007d56:	2b70      	cmp	r3, #112	; 0x70
 8007d58:	d000      	beq.n	8007d5c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8007d5a:	e048      	b.n	8007dee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	68d9      	ldr	r1, [r3, #12]
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	f000 f9ea 	bl	8008144 <TIM_ETR_SetConfig>
      break;
 8007d70:	e03d      	b.n	8007dee <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2b05      	cmp	r3, #5
 8007d78:	d101      	bne.n	8007d7e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e038      	b.n	8007df0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6a1a      	ldr	r2, [r3, #32]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0201 	bic.w	r2, r2, #1
 8007d94:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	699b      	ldr	r3, [r3, #24]
 8007d9c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007da4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	011b      	lsls	r3, r3, #4
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	4313      	orrs	r3, r2
 8007db0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	621a      	str	r2, [r3, #32]
      break;
 8007dc2:	e014      	b.n	8007dee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6818      	ldr	r0, [r3, #0]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	6899      	ldr	r1, [r3, #8]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	f000 f887 	bl	8007ee4 <TIM_TI1_ConfigInputStage>
      break;
 8007dd6:	e00a      	b.n	8007dee <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	6899      	ldr	r1, [r3, #8]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	461a      	mov	r2, r3
 8007de6:	f000 f8e9 	bl	8007fbc <TIM_TI2_ConfigInputStage>
      break;
 8007dea:	e000      	b.n	8007dee <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8007dec:	bf00      	nop
  }
  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	fffefff8 	.word	0xfffefff8

08007dfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b087      	sub	sp, #28
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
 8007e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	f023 0201 	bic.w	r2, r3, #1
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4a28      	ldr	r2, [pc, #160]	; (8007ec8 <TIM_TI1_SetConfig+0xcc>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d01b      	beq.n	8007e62 <TIM_TI1_SetConfig+0x66>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e30:	d017      	beq.n	8007e62 <TIM_TI1_SetConfig+0x66>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a25      	ldr	r2, [pc, #148]	; (8007ecc <TIM_TI1_SetConfig+0xd0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d013      	beq.n	8007e62 <TIM_TI1_SetConfig+0x66>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4a24      	ldr	r2, [pc, #144]	; (8007ed0 <TIM_TI1_SetConfig+0xd4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d00f      	beq.n	8007e62 <TIM_TI1_SetConfig+0x66>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4a23      	ldr	r2, [pc, #140]	; (8007ed4 <TIM_TI1_SetConfig+0xd8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d00b      	beq.n	8007e62 <TIM_TI1_SetConfig+0x66>
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	4a22      	ldr	r2, [pc, #136]	; (8007ed8 <TIM_TI1_SetConfig+0xdc>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d007      	beq.n	8007e62 <TIM_TI1_SetConfig+0x66>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4a21      	ldr	r2, [pc, #132]	; (8007edc <TIM_TI1_SetConfig+0xe0>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d003      	beq.n	8007e62 <TIM_TI1_SetConfig+0x66>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	4a20      	ldr	r2, [pc, #128]	; (8007ee0 <TIM_TI1_SetConfig+0xe4>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d101      	bne.n	8007e66 <TIM_TI1_SetConfig+0x6a>
 8007e62:	2301      	movs	r3, #1
 8007e64:	e000      	b.n	8007e68 <TIM_TI1_SetConfig+0x6c>
 8007e66:	2300      	movs	r3, #0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d008      	beq.n	8007e7e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f023 0303 	bic.w	r3, r3, #3
 8007e72:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	617b      	str	r3, [r7, #20]
 8007e7c:	e003      	b.n	8007e86 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f043 0301 	orr.w	r3, r3, #1
 8007e84:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e8c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	011b      	lsls	r3, r3, #4
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f023 030a 	bic.w	r3, r3, #10
 8007ea0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	f003 030a 	and.w	r3, r3, #10
 8007ea8:	693a      	ldr	r2, [r7, #16]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	697a      	ldr	r2, [r7, #20]
 8007eb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	621a      	str	r2, [r3, #32]
}
 8007eba:	bf00      	nop
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	40000400 	.word	0x40000400
 8007ed0:	40000800 	.word	0x40000800
 8007ed4:	40000c00 	.word	0x40000c00
 8007ed8:	40010400 	.word	0x40010400
 8007edc:	40014000 	.word	0x40014000
 8007ee0:	40001800 	.word	0x40001800

08007ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b087      	sub	sp, #28
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	6a1b      	ldr	r3, [r3, #32]
 8007ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	6a1b      	ldr	r3, [r3, #32]
 8007efa:	f023 0201 	bic.w	r2, r3, #1
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	011b      	lsls	r3, r3, #4
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f023 030a 	bic.w	r3, r3, #10
 8007f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	697a      	ldr	r2, [r7, #20]
 8007f34:	621a      	str	r2, [r3, #32]
}
 8007f36:	bf00      	nop
 8007f38:	371c      	adds	r7, #28
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f40:	4770      	bx	lr

08007f42 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b087      	sub	sp, #28
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	607a      	str	r2, [r7, #4]
 8007f4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6a1b      	ldr	r3, [r3, #32]
 8007f54:	f023 0210 	bic.w	r2, r3, #16
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	6a1b      	ldr	r3, [r3, #32]
 8007f66:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	021b      	lsls	r3, r3, #8
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	031b      	lsls	r3, r3, #12
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f8e:	693b      	ldr	r3, [r7, #16]
 8007f90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f94:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	011b      	lsls	r3, r3, #4
 8007f9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	621a      	str	r2, [r3, #32]
}
 8007fb0:	bf00      	nop
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	f023 0210 	bic.w	r2, r3, #16
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fe6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	031b      	lsls	r3, r3, #12
 8007fec:	697a      	ldr	r2, [r7, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ff8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	4313      	orrs	r3, r2
 8008002:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	693a      	ldr	r2, [r7, #16]
 800800e:	621a      	str	r2, [r3, #32]
}
 8008010:	bf00      	nop
 8008012:	371c      	adds	r7, #28
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
 8008028:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	f023 0303 	bic.w	r3, r3, #3
 8008048:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4313      	orrs	r3, r2
 8008050:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008058:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	b2db      	uxtb	r3, r3
 8008060:	697a      	ldr	r2, [r7, #20]
 8008062:	4313      	orrs	r3, r2
 8008064:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800806c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	021b      	lsls	r3, r3, #8
 8008072:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	4313      	orrs	r3, r2
 800807a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	621a      	str	r2, [r3, #32]
}
 8008088:	bf00      	nop
 800808a:	371c      	adds	r7, #28
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008094:	b480      	push	{r7}
 8008096:	b087      	sub	sp, #28
 8008098:	af00      	add	r7, sp, #0
 800809a:	60f8      	str	r0, [r7, #12]
 800809c:	60b9      	str	r1, [r7, #8]
 800809e:	607a      	str	r2, [r7, #4]
 80080a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6a1b      	ldr	r3, [r3, #32]
 80080b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080c0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	021b      	lsls	r3, r3, #8
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080d2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	031b      	lsls	r3, r3, #12
 80080d8:	b29b      	uxth	r3, r3
 80080da:	697a      	ldr	r2, [r7, #20]
 80080dc:	4313      	orrs	r3, r2
 80080de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80080e6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	031b      	lsls	r3, r3, #12
 80080ec:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	693a      	ldr	r2, [r7, #16]
 8008100:	621a      	str	r2, [r3, #32]
}
 8008102:	bf00      	nop
 8008104:	371c      	adds	r7, #28
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800810e:	b480      	push	{r7}
 8008110:	b085      	sub	sp, #20
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008124:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4313      	orrs	r3, r2
 800812c:	f043 0307 	orr.w	r3, r3, #7
 8008130:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	609a      	str	r2, [r3, #8]
}
 8008138:	bf00      	nop
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008144:	b480      	push	{r7}
 8008146:	b087      	sub	sp, #28
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	607a      	str	r2, [r7, #4]
 8008150:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800815e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	021a      	lsls	r2, r3, #8
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	431a      	orrs	r2, r3
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4313      	orrs	r3, r2
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	609a      	str	r2, [r3, #8]
}
 8008178:	bf00      	nop
 800817a:	371c      	adds	r7, #28
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 031f 	and.w	r3, r3, #31
 8008196:	2201      	movs	r2, #1
 8008198:	fa02 f303 	lsl.w	r3, r2, r3
 800819c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a1a      	ldr	r2, [r3, #32]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	43db      	mvns	r3, r3
 80081a6:	401a      	ands	r2, r3
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	6a1a      	ldr	r2, [r3, #32]
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f003 031f 	and.w	r3, r3, #31
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	fa01 f303 	lsl.w	r3, r1, r3
 80081bc:	431a      	orrs	r2, r3
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	621a      	str	r2, [r3, #32]
}
 80081c2:	bf00      	nop
 80081c4:	371c      	adds	r7, #28
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
	...

080081d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d101      	bne.n	80081e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081e4:	2302      	movs	r3, #2
 80081e6:	e06d      	b.n	80082c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2202      	movs	r2, #2
 80081f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a30      	ldr	r2, [pc, #192]	; (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d004      	beq.n	800821c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a2f      	ldr	r2, [pc, #188]	; (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d108      	bne.n	800822e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008222:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	4313      	orrs	r3, r2
 800822c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008234:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	4313      	orrs	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a20      	ldr	r2, [pc, #128]	; (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d022      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825a:	d01d      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a1d      	ldr	r2, [pc, #116]	; (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d018      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a1c      	ldr	r2, [pc, #112]	; (80082dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d013      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a1a      	ldr	r2, [pc, #104]	; (80082e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d00e      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a15      	ldr	r2, [pc, #84]	; (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d009      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a16      	ldr	r2, [pc, #88]	; (80082e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d004      	beq.n	8008298 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a15      	ldr	r2, [pc, #84]	; (80082e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d10c      	bne.n	80082b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800829e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	40010000 	.word	0x40010000
 80082d4:	40010400 	.word	0x40010400
 80082d8:	40000400 	.word	0x40000400
 80082dc:	40000800 	.word	0x40000800
 80082e0:	40000c00 	.word	0x40000c00
 80082e4:	40014000 	.word	0x40014000
 80082e8:	40001800 	.word	0x40001800

080082ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d101      	bne.n	8008308 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008304:	2302      	movs	r3, #2
 8008306:	e065      	b.n	80083d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	4313      	orrs	r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	4313      	orrs	r3, r2
 800832a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	4313      	orrs	r3, r2
 8008338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4313      	orrs	r3, r2
 8008346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	4313      	orrs	r3, r2
 8008354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800836e:	4313      	orrs	r3, r2
 8008370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	041b      	lsls	r3, r3, #16
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a16      	ldr	r2, [pc, #88]	; (80083e0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d004      	beq.n	8008396 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a14      	ldr	r2, [pc, #80]	; (80083e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d115      	bne.n	80083c2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	051b      	lsls	r3, r3, #20
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	4313      	orrs	r3, r2
 80083c0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3714      	adds	r7, #20
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	40010000 	.word	0x40010000
 80083e4:	40010400 	.word	0x40010400

080083e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008404:	bf00      	nop
 8008406:	370c      	adds	r7, #12
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008418:	bf00      	nop
 800841a:	370c      	adds	r7, #12
 800841c:	46bd      	mov	sp, r7
 800841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008422:	4770      	bx	lr

08008424 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e040      	b.n	80084b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800843a:	2b00      	cmp	r3, #0
 800843c:	d106      	bne.n	800844c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7fa fc28 	bl	8002c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2224      	movs	r2, #36	; 0x24
 8008450:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0201 	bic.w	r2, r2, #1
 8008460:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 fac4 	bl	80089f0 <UART_SetConfig>
 8008468:	4603      	mov	r3, r0
 800846a:	2b01      	cmp	r3, #1
 800846c:	d101      	bne.n	8008472 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e022      	b.n	80084b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008476:	2b00      	cmp	r3, #0
 8008478:	d002      	beq.n	8008480 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fd62 	bl	8008f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800848e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	689a      	ldr	r2, [r3, #8]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800849e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f042 0201 	orr.w	r2, r2, #1
 80084ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fde9 	bl	8009088 <UART_CheckIdleState>
 80084b6:	4603      	mov	r3, r0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3708      	adds	r7, #8
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08a      	sub	sp, #40	; 0x28
 80084c4:	af02      	add	r7, sp, #8
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	603b      	str	r3, [r7, #0]
 80084cc:	4613      	mov	r3, r2
 80084ce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d4:	2b20      	cmp	r3, #32
 80084d6:	d17f      	bne.n	80085d8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d002      	beq.n	80084e4 <HAL_UART_Transmit+0x24>
 80084de:	88fb      	ldrh	r3, [r7, #6]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d101      	bne.n	80084e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80084e4:	2301      	movs	r3, #1
 80084e6:	e078      	b.n	80085da <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d101      	bne.n	80084f6 <HAL_UART_Transmit+0x36>
 80084f2:	2302      	movs	r3, #2
 80084f4:	e071      	b.n	80085da <HAL_UART_Transmit+0x11a>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2200      	movs	r2, #0
 8008502:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2221      	movs	r2, #33	; 0x21
 8008508:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800850a:	f7fa fe33 	bl	8003174 <HAL_GetTick>
 800850e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	88fa      	ldrh	r2, [r7, #6]
 8008514:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	88fa      	ldrh	r2, [r7, #6]
 800851c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008528:	d108      	bne.n	800853c <HAL_UART_Transmit+0x7c>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d104      	bne.n	800853c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	61bb      	str	r3, [r7, #24]
 800853a:	e003      	b.n	8008544 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008540:	2300      	movs	r3, #0
 8008542:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800854c:	e02c      	b.n	80085a8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2200      	movs	r2, #0
 8008556:	2180      	movs	r1, #128	; 0x80
 8008558:	68f8      	ldr	r0, [r7, #12]
 800855a:	f000 fdda 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 800855e:	4603      	mov	r3, r0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d001      	beq.n	8008568 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008564:	2303      	movs	r3, #3
 8008566:	e038      	b.n	80085da <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10b      	bne.n	8008586 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	461a      	mov	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800857c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	3302      	adds	r3, #2
 8008582:	61bb      	str	r3, [r7, #24]
 8008584:	e007      	b.n	8008596 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	781a      	ldrb	r2, [r3, #0]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	3301      	adds	r3, #1
 8008594:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800859c:	b29b      	uxth	r3, r3
 800859e:	3b01      	subs	r3, #1
 80085a0:	b29a      	uxth	r2, r3
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1cc      	bne.n	800854e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	9300      	str	r3, [sp, #0]
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	2200      	movs	r2, #0
 80085bc:	2140      	movs	r1, #64	; 0x40
 80085be:	68f8      	ldr	r0, [r7, #12]
 80085c0:	f000 fda7 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e005      	b.n	80085da <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2220      	movs	r2, #32
 80085d2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	e000      	b.n	80085da <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80085d8:	2302      	movs	r3, #2
  }
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3720      	adds	r7, #32
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
	...

080085e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b085      	sub	sp, #20
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	60f8      	str	r0, [r7, #12]
 80085ec:	60b9      	str	r1, [r7, #8]
 80085ee:	4613      	mov	r3, r2
 80085f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085f6:	2b20      	cmp	r3, #32
 80085f8:	f040 808a 	bne.w	8008710 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d002      	beq.n	8008608 <HAL_UART_Receive_IT+0x24>
 8008602:	88fb      	ldrh	r3, [r7, #6]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d101      	bne.n	800860c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e082      	b.n	8008712 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008612:	2b01      	cmp	r3, #1
 8008614:	d101      	bne.n	800861a <HAL_UART_Receive_IT+0x36>
 8008616:	2302      	movs	r3, #2
 8008618:	e07b      	b.n	8008712 <HAL_UART_Receive_IT+0x12e>
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	88fa      	ldrh	r2, [r7, #6]
 800862c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	88fa      	ldrh	r2, [r7, #6]
 8008634:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008646:	d10e      	bne.n	8008666 <HAL_UART_Receive_IT+0x82>
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d105      	bne.n	800865c <HAL_UART_Receive_IT+0x78>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008656:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800865a:	e02d      	b.n	80086b8 <HAL_UART_Receive_IT+0xd4>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	22ff      	movs	r2, #255	; 0xff
 8008660:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008664:	e028      	b.n	80086b8 <HAL_UART_Receive_IT+0xd4>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d10d      	bne.n	800868a <HAL_UART_Receive_IT+0xa6>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d104      	bne.n	8008680 <HAL_UART_Receive_IT+0x9c>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	22ff      	movs	r2, #255	; 0xff
 800867a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800867e:	e01b      	b.n	80086b8 <HAL_UART_Receive_IT+0xd4>
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	227f      	movs	r2, #127	; 0x7f
 8008684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008688:	e016      	b.n	80086b8 <HAL_UART_Receive_IT+0xd4>
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008692:	d10d      	bne.n	80086b0 <HAL_UART_Receive_IT+0xcc>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d104      	bne.n	80086a6 <HAL_UART_Receive_IT+0xc2>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	227f      	movs	r2, #127	; 0x7f
 80086a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086a4:	e008      	b.n	80086b8 <HAL_UART_Receive_IT+0xd4>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	223f      	movs	r2, #63	; 0x3f
 80086aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086ae:	e003      	b.n	80086b8 <HAL_UART_Receive_IT+0xd4>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2222      	movs	r2, #34	; 0x22
 80086c2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689a      	ldr	r2, [r3, #8]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f042 0201 	orr.w	r2, r2, #1
 80086d2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086dc:	d107      	bne.n	80086ee <HAL_UART_Receive_IT+0x10a>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d103      	bne.n	80086ee <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4a0d      	ldr	r2, [pc, #52]	; (8008720 <HAL_UART_Receive_IT+0x13c>)
 80086ea:	661a      	str	r2, [r3, #96]	; 0x60
 80086ec:	e002      	b.n	80086f4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	4a0c      	ldr	r2, [pc, #48]	; (8008724 <HAL_UART_Receive_IT+0x140>)
 80086f2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	681a      	ldr	r2, [r3, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800870a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	e000      	b.n	8008712 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8008710:	2302      	movs	r3, #2
  }
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	0800934d 	.word	0x0800934d
 8008724:	080092a7 	.word	0x080092a7

08008728 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008748:	69fa      	ldr	r2, [r7, #28]
 800874a:	f640 030f 	movw	r3, #2063	; 0x80f
 800874e:	4013      	ands	r3, r2
 8008750:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d113      	bne.n	8008780 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00e      	beq.n	8008780 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	f003 0320 	and.w	r3, r3, #32
 8008768:	2b00      	cmp	r3, #0
 800876a:	d009      	beq.n	8008780 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008770:	2b00      	cmp	r3, #0
 8008772:	f000 8114 	beq.w	800899e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
      }
      return;
 800877e:	e10e      	b.n	800899e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	2b00      	cmp	r3, #0
 8008784:	f000 80d6 	beq.w	8008934 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d105      	bne.n	800879e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 80cb 	beq.w	8008934 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00e      	beq.n	80087c6 <HAL_UART_IRQHandler+0x9e>
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d009      	beq.n	80087c6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2201      	movs	r2, #1
 80087b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087be:	f043 0201 	orr.w	r2, r3, #1
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	f003 0302 	and.w	r3, r3, #2
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00e      	beq.n	80087ee <HAL_UART_IRQHandler+0xc6>
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d009      	beq.n	80087ee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2202      	movs	r2, #2
 80087e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087e6:	f043 0204 	orr.w	r2, r3, #4
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00e      	beq.n	8008816 <HAL_UART_IRQHandler+0xee>
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f003 0301 	and.w	r3, r3, #1
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d009      	beq.n	8008816 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	2204      	movs	r2, #4
 8008808:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800880e:	f043 0202 	orr.w	r2, r3, #2
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f003 0308 	and.w	r3, r3, #8
 800881c:	2b00      	cmp	r3, #0
 800881e:	d013      	beq.n	8008848 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008820:	69bb      	ldr	r3, [r7, #24]
 8008822:	f003 0320 	and.w	r3, r3, #32
 8008826:	2b00      	cmp	r3, #0
 8008828:	d104      	bne.n	8008834 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008830:	2b00      	cmp	r3, #0
 8008832:	d009      	beq.n	8008848 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2208      	movs	r2, #8
 800883a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008840:	f043 0208 	orr.w	r2, r3, #8
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00f      	beq.n	8008872 <HAL_UART_IRQHandler+0x14a>
 8008852:	69bb      	ldr	r3, [r7, #24]
 8008854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008858:	2b00      	cmp	r3, #0
 800885a:	d00a      	beq.n	8008872 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008864:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800886a:	f043 0220 	orr.w	r2, r3, #32
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008876:	2b00      	cmp	r3, #0
 8008878:	f000 8093 	beq.w	80089a2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00c      	beq.n	80088a0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	f003 0320 	and.w	r3, r3, #32
 800888c:	2b00      	cmp	r3, #0
 800888e:	d007      	beq.n	80088a0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008894:	2b00      	cmp	r3, #0
 8008896:	d003      	beq.n	80088a0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088a4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b0:	2b40      	cmp	r3, #64	; 0x40
 80088b2:	d004      	beq.n	80088be <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d031      	beq.n	8008922 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fca2 	bl	8009208 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ce:	2b40      	cmp	r3, #64	; 0x40
 80088d0:	d123      	bne.n	800891a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	689a      	ldr	r2, [r3, #8]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088e0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d013      	beq.n	8008912 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088ee:	4a30      	ldr	r2, [pc, #192]	; (80089b0 <HAL_UART_IRQHandler+0x288>)
 80088f0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fb fa96 	bl	8003e28 <HAL_DMA_Abort_IT>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d016      	beq.n	8008930 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800890c:	4610      	mov	r0, r2
 800890e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008910:	e00e      	b.n	8008930 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f858 	bl	80089c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008918:	e00a      	b.n	8008930 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f854 	bl	80089c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008920:	e006      	b.n	8008930 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f850 	bl	80089c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800892e:	e038      	b.n	80089a2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008930:	bf00      	nop
    return;
 8008932:	e036      	b.n	80089a2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00d      	beq.n	800895a <HAL_UART_IRQHandler+0x232>
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d008      	beq.n	800895a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008950:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f842 	bl	80089dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008958:	e026      	b.n	80089a8 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00d      	beq.n	8008980 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800896a:	2b00      	cmp	r3, #0
 800896c:	d008      	beq.n	8008980 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008972:	2b00      	cmp	r3, #0
 8008974:	d017      	beq.n	80089a6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	4798      	blx	r3
    }
    return;
 800897e:	e012      	b.n	80089a6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00e      	beq.n	80089a8 <HAL_UART_IRQHandler+0x280>
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008990:	2b00      	cmp	r3, #0
 8008992:	d009      	beq.n	80089a8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 fc6d 	bl	8009274 <UART_EndTransmit_IT>
    return;
 800899a:	bf00      	nop
 800899c:	e004      	b.n	80089a8 <HAL_UART_IRQHandler+0x280>
      return;
 800899e:	bf00      	nop
 80089a0:	e002      	b.n	80089a8 <HAL_UART_IRQHandler+0x280>
    return;
 80089a2:	bf00      	nop
 80089a4:	e000      	b.n	80089a8 <HAL_UART_IRQHandler+0x280>
    return;
 80089a6:	bf00      	nop
  }

}
 80089a8:	3720      	adds	r7, #32
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	08009249 	.word	0x08009249

080089b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr

080089c8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089dc:	b480      	push	{r7}
 80089de:	b083      	sub	sp, #12
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089e4:	bf00      	nop
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b088      	sub	sp, #32
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689a      	ldr	r2, [r3, #8]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	69db      	ldr	r3, [r3, #28]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	4bb1      	ldr	r3, [pc, #708]	; (8008ce4 <UART_SetConfig+0x2f4>)
 8008a20:	4013      	ands	r3, r2
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	6812      	ldr	r2, [r2, #0]
 8008a26:	6939      	ldr	r1, [r7, #16]
 8008a28:	430b      	orrs	r3, r1
 8008a2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68da      	ldr	r2, [r3, #12]
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a1b      	ldr	r3, [r3, #32]
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	693a      	ldr	r2, [r7, #16]
 8008a62:	430a      	orrs	r2, r1
 8008a64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a9f      	ldr	r2, [pc, #636]	; (8008ce8 <UART_SetConfig+0x2f8>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d121      	bne.n	8008ab4 <UART_SetConfig+0xc4>
 8008a70:	4b9e      	ldr	r3, [pc, #632]	; (8008cec <UART_SetConfig+0x2fc>)
 8008a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a76:	f003 0303 	and.w	r3, r3, #3
 8008a7a:	2b03      	cmp	r3, #3
 8008a7c:	d816      	bhi.n	8008aac <UART_SetConfig+0xbc>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <UART_SetConfig+0x94>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008a95 	.word	0x08008a95
 8008a88:	08008aa1 	.word	0x08008aa1
 8008a8c:	08008a9b 	.word	0x08008a9b
 8008a90:	08008aa7 	.word	0x08008aa7
 8008a94:	2301      	movs	r3, #1
 8008a96:	77fb      	strb	r3, [r7, #31]
 8008a98:	e151      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008a9a:	2302      	movs	r3, #2
 8008a9c:	77fb      	strb	r3, [r7, #31]
 8008a9e:	e14e      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008aa0:	2304      	movs	r3, #4
 8008aa2:	77fb      	strb	r3, [r7, #31]
 8008aa4:	e14b      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008aa6:	2308      	movs	r3, #8
 8008aa8:	77fb      	strb	r3, [r7, #31]
 8008aaa:	e148      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008aac:	2310      	movs	r3, #16
 8008aae:	77fb      	strb	r3, [r7, #31]
 8008ab0:	bf00      	nop
 8008ab2:	e144      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a8d      	ldr	r2, [pc, #564]	; (8008cf0 <UART_SetConfig+0x300>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d134      	bne.n	8008b28 <UART_SetConfig+0x138>
 8008abe:	4b8b      	ldr	r3, [pc, #556]	; (8008cec <UART_SetConfig+0x2fc>)
 8008ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ac4:	f003 030c 	and.w	r3, r3, #12
 8008ac8:	2b0c      	cmp	r3, #12
 8008aca:	d829      	bhi.n	8008b20 <UART_SetConfig+0x130>
 8008acc:	a201      	add	r2, pc, #4	; (adr r2, 8008ad4 <UART_SetConfig+0xe4>)
 8008ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ad2:	bf00      	nop
 8008ad4:	08008b09 	.word	0x08008b09
 8008ad8:	08008b21 	.word	0x08008b21
 8008adc:	08008b21 	.word	0x08008b21
 8008ae0:	08008b21 	.word	0x08008b21
 8008ae4:	08008b15 	.word	0x08008b15
 8008ae8:	08008b21 	.word	0x08008b21
 8008aec:	08008b21 	.word	0x08008b21
 8008af0:	08008b21 	.word	0x08008b21
 8008af4:	08008b0f 	.word	0x08008b0f
 8008af8:	08008b21 	.word	0x08008b21
 8008afc:	08008b21 	.word	0x08008b21
 8008b00:	08008b21 	.word	0x08008b21
 8008b04:	08008b1b 	.word	0x08008b1b
 8008b08:	2300      	movs	r3, #0
 8008b0a:	77fb      	strb	r3, [r7, #31]
 8008b0c:	e117      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008b0e:	2302      	movs	r3, #2
 8008b10:	77fb      	strb	r3, [r7, #31]
 8008b12:	e114      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008b14:	2304      	movs	r3, #4
 8008b16:	77fb      	strb	r3, [r7, #31]
 8008b18:	e111      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008b1a:	2308      	movs	r3, #8
 8008b1c:	77fb      	strb	r3, [r7, #31]
 8008b1e:	e10e      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008b20:	2310      	movs	r3, #16
 8008b22:	77fb      	strb	r3, [r7, #31]
 8008b24:	bf00      	nop
 8008b26:	e10a      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a71      	ldr	r2, [pc, #452]	; (8008cf4 <UART_SetConfig+0x304>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d120      	bne.n	8008b74 <UART_SetConfig+0x184>
 8008b32:	4b6e      	ldr	r3, [pc, #440]	; (8008cec <UART_SetConfig+0x2fc>)
 8008b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b3c:	2b10      	cmp	r3, #16
 8008b3e:	d00f      	beq.n	8008b60 <UART_SetConfig+0x170>
 8008b40:	2b10      	cmp	r3, #16
 8008b42:	d802      	bhi.n	8008b4a <UART_SetConfig+0x15a>
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d005      	beq.n	8008b54 <UART_SetConfig+0x164>
 8008b48:	e010      	b.n	8008b6c <UART_SetConfig+0x17c>
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	d005      	beq.n	8008b5a <UART_SetConfig+0x16a>
 8008b4e:	2b30      	cmp	r3, #48	; 0x30
 8008b50:	d009      	beq.n	8008b66 <UART_SetConfig+0x176>
 8008b52:	e00b      	b.n	8008b6c <UART_SetConfig+0x17c>
 8008b54:	2300      	movs	r3, #0
 8008b56:	77fb      	strb	r3, [r7, #31]
 8008b58:	e0f1      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008b5a:	2302      	movs	r3, #2
 8008b5c:	77fb      	strb	r3, [r7, #31]
 8008b5e:	e0ee      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008b60:	2304      	movs	r3, #4
 8008b62:	77fb      	strb	r3, [r7, #31]
 8008b64:	e0eb      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008b66:	2308      	movs	r3, #8
 8008b68:	77fb      	strb	r3, [r7, #31]
 8008b6a:	e0e8      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008b6c:	2310      	movs	r3, #16
 8008b6e:	77fb      	strb	r3, [r7, #31]
 8008b70:	bf00      	nop
 8008b72:	e0e4      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a5f      	ldr	r2, [pc, #380]	; (8008cf8 <UART_SetConfig+0x308>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d120      	bne.n	8008bc0 <UART_SetConfig+0x1d0>
 8008b7e:	4b5b      	ldr	r3, [pc, #364]	; (8008cec <UART_SetConfig+0x2fc>)
 8008b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b88:	2b40      	cmp	r3, #64	; 0x40
 8008b8a:	d00f      	beq.n	8008bac <UART_SetConfig+0x1bc>
 8008b8c:	2b40      	cmp	r3, #64	; 0x40
 8008b8e:	d802      	bhi.n	8008b96 <UART_SetConfig+0x1a6>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <UART_SetConfig+0x1b0>
 8008b94:	e010      	b.n	8008bb8 <UART_SetConfig+0x1c8>
 8008b96:	2b80      	cmp	r3, #128	; 0x80
 8008b98:	d005      	beq.n	8008ba6 <UART_SetConfig+0x1b6>
 8008b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b9c:	d009      	beq.n	8008bb2 <UART_SetConfig+0x1c2>
 8008b9e:	e00b      	b.n	8008bb8 <UART_SetConfig+0x1c8>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	77fb      	strb	r3, [r7, #31]
 8008ba4:	e0cb      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008ba6:	2302      	movs	r3, #2
 8008ba8:	77fb      	strb	r3, [r7, #31]
 8008baa:	e0c8      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008bac:	2304      	movs	r3, #4
 8008bae:	77fb      	strb	r3, [r7, #31]
 8008bb0:	e0c5      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008bb2:	2308      	movs	r3, #8
 8008bb4:	77fb      	strb	r3, [r7, #31]
 8008bb6:	e0c2      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008bb8:	2310      	movs	r3, #16
 8008bba:	77fb      	strb	r3, [r7, #31]
 8008bbc:	bf00      	nop
 8008bbe:	e0be      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a4d      	ldr	r2, [pc, #308]	; (8008cfc <UART_SetConfig+0x30c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d124      	bne.n	8008c14 <UART_SetConfig+0x224>
 8008bca:	4b48      	ldr	r3, [pc, #288]	; (8008cec <UART_SetConfig+0x2fc>)
 8008bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bd8:	d012      	beq.n	8008c00 <UART_SetConfig+0x210>
 8008bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bde:	d802      	bhi.n	8008be6 <UART_SetConfig+0x1f6>
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d007      	beq.n	8008bf4 <UART_SetConfig+0x204>
 8008be4:	e012      	b.n	8008c0c <UART_SetConfig+0x21c>
 8008be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bea:	d006      	beq.n	8008bfa <UART_SetConfig+0x20a>
 8008bec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bf0:	d009      	beq.n	8008c06 <UART_SetConfig+0x216>
 8008bf2:	e00b      	b.n	8008c0c <UART_SetConfig+0x21c>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	77fb      	strb	r3, [r7, #31]
 8008bf8:	e0a1      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008bfa:	2302      	movs	r3, #2
 8008bfc:	77fb      	strb	r3, [r7, #31]
 8008bfe:	e09e      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008c00:	2304      	movs	r3, #4
 8008c02:	77fb      	strb	r3, [r7, #31]
 8008c04:	e09b      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008c06:	2308      	movs	r3, #8
 8008c08:	77fb      	strb	r3, [r7, #31]
 8008c0a:	e098      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008c0c:	2310      	movs	r3, #16
 8008c0e:	77fb      	strb	r3, [r7, #31]
 8008c10:	bf00      	nop
 8008c12:	e094      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4a39      	ldr	r2, [pc, #228]	; (8008d00 <UART_SetConfig+0x310>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d124      	bne.n	8008c68 <UART_SetConfig+0x278>
 8008c1e:	4b33      	ldr	r3, [pc, #204]	; (8008cec <UART_SetConfig+0x2fc>)
 8008c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c2c:	d012      	beq.n	8008c54 <UART_SetConfig+0x264>
 8008c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c32:	d802      	bhi.n	8008c3a <UART_SetConfig+0x24a>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d007      	beq.n	8008c48 <UART_SetConfig+0x258>
 8008c38:	e012      	b.n	8008c60 <UART_SetConfig+0x270>
 8008c3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c3e:	d006      	beq.n	8008c4e <UART_SetConfig+0x25e>
 8008c40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c44:	d009      	beq.n	8008c5a <UART_SetConfig+0x26a>
 8008c46:	e00b      	b.n	8008c60 <UART_SetConfig+0x270>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	77fb      	strb	r3, [r7, #31]
 8008c4c:	e077      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008c4e:	2302      	movs	r3, #2
 8008c50:	77fb      	strb	r3, [r7, #31]
 8008c52:	e074      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008c54:	2304      	movs	r3, #4
 8008c56:	77fb      	strb	r3, [r7, #31]
 8008c58:	e071      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008c5a:	2308      	movs	r3, #8
 8008c5c:	77fb      	strb	r3, [r7, #31]
 8008c5e:	e06e      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008c60:	2310      	movs	r3, #16
 8008c62:	77fb      	strb	r3, [r7, #31]
 8008c64:	bf00      	nop
 8008c66:	e06a      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a25      	ldr	r2, [pc, #148]	; (8008d04 <UART_SetConfig+0x314>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d124      	bne.n	8008cbc <UART_SetConfig+0x2cc>
 8008c72:	4b1e      	ldr	r3, [pc, #120]	; (8008cec <UART_SetConfig+0x2fc>)
 8008c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c78:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008c7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c80:	d012      	beq.n	8008ca8 <UART_SetConfig+0x2b8>
 8008c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c86:	d802      	bhi.n	8008c8e <UART_SetConfig+0x29e>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d007      	beq.n	8008c9c <UART_SetConfig+0x2ac>
 8008c8c:	e012      	b.n	8008cb4 <UART_SetConfig+0x2c4>
 8008c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c92:	d006      	beq.n	8008ca2 <UART_SetConfig+0x2b2>
 8008c94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c98:	d009      	beq.n	8008cae <UART_SetConfig+0x2be>
 8008c9a:	e00b      	b.n	8008cb4 <UART_SetConfig+0x2c4>
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	77fb      	strb	r3, [r7, #31]
 8008ca0:	e04d      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008ca2:	2302      	movs	r3, #2
 8008ca4:	77fb      	strb	r3, [r7, #31]
 8008ca6:	e04a      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008ca8:	2304      	movs	r3, #4
 8008caa:	77fb      	strb	r3, [r7, #31]
 8008cac:	e047      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008cae:	2308      	movs	r3, #8
 8008cb0:	77fb      	strb	r3, [r7, #31]
 8008cb2:	e044      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008cb4:	2310      	movs	r3, #16
 8008cb6:	77fb      	strb	r3, [r7, #31]
 8008cb8:	bf00      	nop
 8008cba:	e040      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	4a11      	ldr	r2, [pc, #68]	; (8008d08 <UART_SetConfig+0x318>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d139      	bne.n	8008d3a <UART_SetConfig+0x34a>
 8008cc6:	4b09      	ldr	r3, [pc, #36]	; (8008cec <UART_SetConfig+0x2fc>)
 8008cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008cd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cd4:	d027      	beq.n	8008d26 <UART_SetConfig+0x336>
 8008cd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cda:	d817      	bhi.n	8008d0c <UART_SetConfig+0x31c>
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d01c      	beq.n	8008d1a <UART_SetConfig+0x32a>
 8008ce0:	e027      	b.n	8008d32 <UART_SetConfig+0x342>
 8008ce2:	bf00      	nop
 8008ce4:	efff69f3 	.word	0xefff69f3
 8008ce8:	40011000 	.word	0x40011000
 8008cec:	40023800 	.word	0x40023800
 8008cf0:	40004400 	.word	0x40004400
 8008cf4:	40004800 	.word	0x40004800
 8008cf8:	40004c00 	.word	0x40004c00
 8008cfc:	40005000 	.word	0x40005000
 8008d00:	40011400 	.word	0x40011400
 8008d04:	40007800 	.word	0x40007800
 8008d08:	40007c00 	.word	0x40007c00
 8008d0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d10:	d006      	beq.n	8008d20 <UART_SetConfig+0x330>
 8008d12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008d16:	d009      	beq.n	8008d2c <UART_SetConfig+0x33c>
 8008d18:	e00b      	b.n	8008d32 <UART_SetConfig+0x342>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	77fb      	strb	r3, [r7, #31]
 8008d1e:	e00e      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008d20:	2302      	movs	r3, #2
 8008d22:	77fb      	strb	r3, [r7, #31]
 8008d24:	e00b      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008d26:	2304      	movs	r3, #4
 8008d28:	77fb      	strb	r3, [r7, #31]
 8008d2a:	e008      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008d2c:	2308      	movs	r3, #8
 8008d2e:	77fb      	strb	r3, [r7, #31]
 8008d30:	e005      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008d32:	2310      	movs	r3, #16
 8008d34:	77fb      	strb	r3, [r7, #31]
 8008d36:	bf00      	nop
 8008d38:	e001      	b.n	8008d3e <UART_SetConfig+0x34e>
 8008d3a:	2310      	movs	r3, #16
 8008d3c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d46:	d17f      	bne.n	8008e48 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8008d48:	7ffb      	ldrb	r3, [r7, #31]
 8008d4a:	2b08      	cmp	r3, #8
 8008d4c:	d85c      	bhi.n	8008e08 <UART_SetConfig+0x418>
 8008d4e:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <UART_SetConfig+0x364>)
 8008d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d54:	08008d79 	.word	0x08008d79
 8008d58:	08008d99 	.word	0x08008d99
 8008d5c:	08008db9 	.word	0x08008db9
 8008d60:	08008e09 	.word	0x08008e09
 8008d64:	08008dd1 	.word	0x08008dd1
 8008d68:	08008e09 	.word	0x08008e09
 8008d6c:	08008e09 	.word	0x08008e09
 8008d70:	08008e09 	.word	0x08008e09
 8008d74:	08008df1 	.word	0x08008df1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d78:	f7fc fa84 	bl	8005284 <HAL_RCC_GetPCLK1Freq>
 8008d7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	005a      	lsls	r2, r3, #1
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	085b      	lsrs	r3, r3, #1
 8008d88:	441a      	add	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	61bb      	str	r3, [r7, #24]
        break;
 8008d96:	e03a      	b.n	8008e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d98:	f7fc fa88 	bl	80052ac <HAL_RCC_GetPCLK2Freq>
 8008d9c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	005a      	lsls	r2, r3, #1
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	085b      	lsrs	r3, r3, #1
 8008da8:	441a      	add	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	61bb      	str	r3, [r7, #24]
        break;
 8008db6:	e02a      	b.n	8008e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	085a      	lsrs	r2, r3, #1
 8008dbe:	4b5f      	ldr	r3, [pc, #380]	; (8008f3c <UART_SetConfig+0x54c>)
 8008dc0:	4413      	add	r3, r2
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	6852      	ldr	r2, [r2, #4]
 8008dc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	61bb      	str	r3, [r7, #24]
        break;
 8008dce:	e01e      	b.n	8008e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008dd0:	f7fc f99a 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 8008dd4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	005a      	lsls	r2, r3, #1
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	085b      	lsrs	r3, r3, #1
 8008de0:	441a      	add	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	61bb      	str	r3, [r7, #24]
        break;
 8008dee:	e00e      	b.n	8008e0e <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	085b      	lsrs	r3, r3, #1
 8008df6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	61bb      	str	r3, [r7, #24]
        break;
 8008e06:	e002      	b.n	8008e0e <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75fb      	strb	r3, [r7, #23]
        break;
 8008e0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	2b0f      	cmp	r3, #15
 8008e12:	d916      	bls.n	8008e42 <UART_SetConfig+0x452>
 8008e14:	69bb      	ldr	r3, [r7, #24]
 8008e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e1a:	d212      	bcs.n	8008e42 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008e1c:	69bb      	ldr	r3, [r7, #24]
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	f023 030f 	bic.w	r3, r3, #15
 8008e24:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	085b      	lsrs	r3, r3, #1
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	f003 0307 	and.w	r3, r3, #7
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	897b      	ldrh	r3, [r7, #10]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	897a      	ldrh	r2, [r7, #10]
 8008e3e:	60da      	str	r2, [r3, #12]
 8008e40:	e070      	b.n	8008f24 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008e42:	2301      	movs	r3, #1
 8008e44:	75fb      	strb	r3, [r7, #23]
 8008e46:	e06d      	b.n	8008f24 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8008e48:	7ffb      	ldrb	r3, [r7, #31]
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d859      	bhi.n	8008f02 <UART_SetConfig+0x512>
 8008e4e:	a201      	add	r2, pc, #4	; (adr r2, 8008e54 <UART_SetConfig+0x464>)
 8008e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e54:	08008e79 	.word	0x08008e79
 8008e58:	08008e97 	.word	0x08008e97
 8008e5c:	08008eb5 	.word	0x08008eb5
 8008e60:	08008f03 	.word	0x08008f03
 8008e64:	08008ecd 	.word	0x08008ecd
 8008e68:	08008f03 	.word	0x08008f03
 8008e6c:	08008f03 	.word	0x08008f03
 8008e70:	08008f03 	.word	0x08008f03
 8008e74:	08008eeb 	.word	0x08008eeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e78:	f7fc fa04 	bl	8005284 <HAL_RCC_GetPCLK1Freq>
 8008e7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	085a      	lsrs	r2, r3, #1
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	441a      	add	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	61bb      	str	r3, [r7, #24]
        break;
 8008e94:	e038      	b.n	8008f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e96:	f7fc fa09 	bl	80052ac <HAL_RCC_GetPCLK2Freq>
 8008e9a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	085a      	lsrs	r2, r3, #1
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	441a      	add	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eae:	b29b      	uxth	r3, r3
 8008eb0:	61bb      	str	r3, [r7, #24]
        break;
 8008eb2:	e029      	b.n	8008f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	085a      	lsrs	r2, r3, #1
 8008eba:	4b21      	ldr	r3, [pc, #132]	; (8008f40 <UART_SetConfig+0x550>)
 8008ebc:	4413      	add	r3, r2
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	6852      	ldr	r2, [r2, #4]
 8008ec2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	61bb      	str	r3, [r7, #24]
        break;
 8008eca:	e01d      	b.n	8008f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ecc:	f7fc f91c 	bl	8005108 <HAL_RCC_GetSysClockFreq>
 8008ed0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	085a      	lsrs	r2, r3, #1
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	441a      	add	r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	61bb      	str	r3, [r7, #24]
        break;
 8008ee8:	e00e      	b.n	8008f08 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	085b      	lsrs	r3, r3, #1
 8008ef0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008efc:	b29b      	uxth	r3, r3
 8008efe:	61bb      	str	r3, [r7, #24]
        break;
 8008f00:	e002      	b.n	8008f08 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	75fb      	strb	r3, [r7, #23]
        break;
 8008f06:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	2b0f      	cmp	r3, #15
 8008f0c:	d908      	bls.n	8008f20 <UART_SetConfig+0x530>
 8008f0e:	69bb      	ldr	r3, [r7, #24]
 8008f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f14:	d204      	bcs.n	8008f20 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	60da      	str	r2, [r3, #12]
 8008f1e:	e001      	b.n	8008f24 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8008f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3720      	adds	r7, #32
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	01e84800 	.word	0x01e84800
 8008f40:	00f42400 	.word	0x00f42400

08008f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00a      	beq.n	8008f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	430a      	orrs	r2, r1
 8008f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	f003 0302 	and.w	r3, r3, #2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	f003 0304 	and.w	r3, r3, #4
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	f003 0308 	and.w	r3, r3, #8
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00a      	beq.n	8008fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	430a      	orrs	r2, r1
 8008fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00a      	beq.n	8008ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	430a      	orrs	r2, r1
 8008ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffa:	f003 0320 	and.w	r3, r3, #32
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00a      	beq.n	8009018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	430a      	orrs	r2, r1
 8009016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009020:	2b00      	cmp	r3, #0
 8009022:	d01a      	beq.n	800905a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	430a      	orrs	r2, r1
 8009038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009042:	d10a      	bne.n	800905a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00a      	beq.n	800907c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	430a      	orrs	r2, r1
 800907a:	605a      	str	r2, [r3, #4]
  }
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af02      	add	r7, sp, #8
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2200      	movs	r2, #0
 8009094:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009096:	f7fa f86d 	bl	8003174 <HAL_GetTick>
 800909a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0308 	and.w	r3, r3, #8
 80090a6:	2b08      	cmp	r3, #8
 80090a8:	d10e      	bne.n	80090c8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 f82a 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e020      	b.n	800910a <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b04      	cmp	r3, #4
 80090d4:	d10e      	bne.n	80090f4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80090d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	2200      	movs	r2, #0
 80090e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 f814 	bl	8009112 <UART_WaitOnFlagUntilTimeout>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d001      	beq.n	80090f4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e00a      	b.n	800910a <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2220      	movs	r2, #32
 80090f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2220      	movs	r2, #32
 80090fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	60f8      	str	r0, [r7, #12]
 800911a:	60b9      	str	r1, [r7, #8]
 800911c:	603b      	str	r3, [r7, #0]
 800911e:	4613      	mov	r3, r2
 8009120:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009122:	e05d      	b.n	80091e0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800912a:	d059      	beq.n	80091e0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800912c:	f7fa f822 	bl	8003174 <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	429a      	cmp	r2, r3
 800913a:	d302      	bcc.n	8009142 <UART_WaitOnFlagUntilTimeout+0x30>
 800913c:	69bb      	ldr	r3, [r7, #24]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d11b      	bne.n	800917a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009150:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f022 0201 	bic.w	r2, r2, #1
 8009160:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2220      	movs	r2, #32
 8009166:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2220      	movs	r2, #32
 800916c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	2200      	movs	r2, #0
 8009172:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e042      	b.n	8009200 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0304 	and.w	r3, r3, #4
 8009184:	2b00      	cmp	r3, #0
 8009186:	d02b      	beq.n	80091e0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009196:	d123      	bne.n	80091e0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091a0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	689a      	ldr	r2, [r3, #8]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f022 0201 	bic.w	r2, r2, #1
 80091c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2220      	movs	r2, #32
 80091c6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2220      	movs	r2, #32
 80091d2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e00f      	b.n	8009200 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	69da      	ldr	r2, [r3, #28]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	4013      	ands	r3, r2
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	bf0c      	ite	eq
 80091f0:	2301      	moveq	r3, #1
 80091f2:	2300      	movne	r3, #0
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	461a      	mov	r2, r3
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d092      	beq.n	8009124 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80091fe:	2300      	movs	r3, #0
}
 8009200:	4618      	mov	r0, r3
 8009202:	3710      	adds	r7, #16
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800921e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689a      	ldr	r2, [r3, #8]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 0201 	bic.w	r2, r2, #1
 800922e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2220      	movs	r2, #32
 8009234:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009254:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2200      	movs	r2, #0
 8009262:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009266:	68f8      	ldr	r0, [r7, #12]
 8009268:	f7ff fbae 	bl	80089c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800926c:	bf00      	nop
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800928a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2220      	movs	r2, #32
 8009290:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f7ff fb8b 	bl	80089b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800929e:	bf00      	nop
 80092a0:	3708      	adds	r7, #8
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80092b4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092ba:	2b22      	cmp	r3, #34	; 0x22
 80092bc:	d13a      	bne.n	8009334 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c4:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092c6:	89bb      	ldrh	r3, [r7, #12]
 80092c8:	b2d9      	uxtb	r1, r3
 80092ca:	89fb      	ldrh	r3, [r7, #14]
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092d2:	400a      	ands	r2, r1
 80092d4:	b2d2      	uxtb	r2, r2
 80092d6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092dc:	1c5a      	adds	r2, r3, #1
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	3b01      	subs	r3, #1
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d121      	bne.n	8009344 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800930e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689a      	ldr	r2, [r3, #8]
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f022 0201 	bic.w	r2, r2, #1
 800931e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2220      	movs	r2, #32
 8009324:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2200      	movs	r2, #0
 800932a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7f8 fc4b 	bl	8001bc8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009332:	e007      	b.n	8009344 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	699a      	ldr	r2, [r3, #24]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f042 0208 	orr.w	r2, r2, #8
 8009342:	619a      	str	r2, [r3, #24]
}
 8009344:	bf00      	nop
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800935a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009360:	2b22      	cmp	r3, #34	; 0x22
 8009362:	d13a      	bne.n	80093da <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009370:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009372:	89ba      	ldrh	r2, [r7, #12]
 8009374:	89fb      	ldrh	r3, [r7, #14]
 8009376:	4013      	ands	r3, r2
 8009378:	b29a      	uxth	r2, r3
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009382:	1c9a      	adds	r2, r3, #2
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800938e:	b29b      	uxth	r3, r3
 8009390:	3b01      	subs	r3, #1
 8009392:	b29a      	uxth	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d121      	bne.n	80093ea <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80093b4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689a      	ldr	r2, [r3, #8]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f022 0201 	bic.w	r2, r2, #1
 80093c4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2220      	movs	r2, #32
 80093ca:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7f8 fbf8 	bl	8001bc8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093d8:	e007      	b.n	80093ea <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	699a      	ldr	r2, [r3, #24]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f042 0208 	orr.w	r2, r2, #8
 80093e8:	619a      	str	r2, [r3, #24]
}
 80093ea:	bf00      	nop
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <atoi>:
 80093f2:	220a      	movs	r2, #10
 80093f4:	2100      	movs	r1, #0
 80093f6:	f000 b939 	b.w	800966c <strtol>
	...

080093fc <__errno>:
 80093fc:	4b01      	ldr	r3, [pc, #4]	; (8009404 <__errno+0x8>)
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20000014 	.word	0x20000014

08009408 <__libc_init_array>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	4e0d      	ldr	r6, [pc, #52]	; (8009440 <__libc_init_array+0x38>)
 800940c:	4c0d      	ldr	r4, [pc, #52]	; (8009444 <__libc_init_array+0x3c>)
 800940e:	1ba4      	subs	r4, r4, r6
 8009410:	10a4      	asrs	r4, r4, #2
 8009412:	2500      	movs	r5, #0
 8009414:	42a5      	cmp	r5, r4
 8009416:	d109      	bne.n	800942c <__libc_init_array+0x24>
 8009418:	4e0b      	ldr	r6, [pc, #44]	; (8009448 <__libc_init_array+0x40>)
 800941a:	4c0c      	ldr	r4, [pc, #48]	; (800944c <__libc_init_array+0x44>)
 800941c:	f000 fd4e 	bl	8009ebc <_init>
 8009420:	1ba4      	subs	r4, r4, r6
 8009422:	10a4      	asrs	r4, r4, #2
 8009424:	2500      	movs	r5, #0
 8009426:	42a5      	cmp	r5, r4
 8009428:	d105      	bne.n	8009436 <__libc_init_array+0x2e>
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009430:	4798      	blx	r3
 8009432:	3501      	adds	r5, #1
 8009434:	e7ee      	b.n	8009414 <__libc_init_array+0xc>
 8009436:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800943a:	4798      	blx	r3
 800943c:	3501      	adds	r5, #1
 800943e:	e7f2      	b.n	8009426 <__libc_init_array+0x1e>
 8009440:	0800a178 	.word	0x0800a178
 8009444:	0800a178 	.word	0x0800a178
 8009448:	0800a178 	.word	0x0800a178
 800944c:	0800a17c 	.word	0x0800a17c

08009450 <memset>:
 8009450:	4402      	add	r2, r0
 8009452:	4603      	mov	r3, r0
 8009454:	4293      	cmp	r3, r2
 8009456:	d100      	bne.n	800945a <memset+0xa>
 8009458:	4770      	bx	lr
 800945a:	f803 1b01 	strb.w	r1, [r3], #1
 800945e:	e7f9      	b.n	8009454 <memset+0x4>

08009460 <siprintf>:
 8009460:	b40e      	push	{r1, r2, r3}
 8009462:	b500      	push	{lr}
 8009464:	b09c      	sub	sp, #112	; 0x70
 8009466:	ab1d      	add	r3, sp, #116	; 0x74
 8009468:	9002      	str	r0, [sp, #8]
 800946a:	9006      	str	r0, [sp, #24]
 800946c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009470:	4809      	ldr	r0, [pc, #36]	; (8009498 <siprintf+0x38>)
 8009472:	9107      	str	r1, [sp, #28]
 8009474:	9104      	str	r1, [sp, #16]
 8009476:	4909      	ldr	r1, [pc, #36]	; (800949c <siprintf+0x3c>)
 8009478:	f853 2b04 	ldr.w	r2, [r3], #4
 800947c:	9105      	str	r1, [sp, #20]
 800947e:	6800      	ldr	r0, [r0, #0]
 8009480:	9301      	str	r3, [sp, #4]
 8009482:	a902      	add	r1, sp, #8
 8009484:	f000 fa28 	bl	80098d8 <_svfiprintf_r>
 8009488:	9b02      	ldr	r3, [sp, #8]
 800948a:	2200      	movs	r2, #0
 800948c:	701a      	strb	r2, [r3, #0]
 800948e:	b01c      	add	sp, #112	; 0x70
 8009490:	f85d eb04 	ldr.w	lr, [sp], #4
 8009494:	b003      	add	sp, #12
 8009496:	4770      	bx	lr
 8009498:	20000014 	.word	0x20000014
 800949c:	ffff0208 	.word	0xffff0208

080094a0 <strncpy>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	3901      	subs	r1, #1
 80094a4:	4604      	mov	r4, r0
 80094a6:	b902      	cbnz	r2, 80094aa <strncpy+0xa>
 80094a8:	bd70      	pop	{r4, r5, r6, pc}
 80094aa:	4623      	mov	r3, r4
 80094ac:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80094b0:	f803 5b01 	strb.w	r5, [r3], #1
 80094b4:	1e56      	subs	r6, r2, #1
 80094b6:	b92d      	cbnz	r5, 80094c4 <strncpy+0x24>
 80094b8:	4414      	add	r4, r2
 80094ba:	42a3      	cmp	r3, r4
 80094bc:	d0f4      	beq.n	80094a8 <strncpy+0x8>
 80094be:	f803 5b01 	strb.w	r5, [r3], #1
 80094c2:	e7fa      	b.n	80094ba <strncpy+0x1a>
 80094c4:	461c      	mov	r4, r3
 80094c6:	4632      	mov	r2, r6
 80094c8:	e7ed      	b.n	80094a6 <strncpy+0x6>
	...

080094cc <strtok>:
 80094cc:	4b13      	ldr	r3, [pc, #76]	; (800951c <strtok+0x50>)
 80094ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d2:	681d      	ldr	r5, [r3, #0]
 80094d4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80094d6:	4606      	mov	r6, r0
 80094d8:	460f      	mov	r7, r1
 80094da:	b9b4      	cbnz	r4, 800950a <strtok+0x3e>
 80094dc:	2050      	movs	r0, #80	; 0x50
 80094de:	f000 f8df 	bl	80096a0 <malloc>
 80094e2:	65a8      	str	r0, [r5, #88]	; 0x58
 80094e4:	e9c0 4400 	strd	r4, r4, [r0]
 80094e8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80094ec:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80094f0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80094f4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80094f8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80094fc:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009500:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009504:	6184      	str	r4, [r0, #24]
 8009506:	7704      	strb	r4, [r0, #28]
 8009508:	6244      	str	r4, [r0, #36]	; 0x24
 800950a:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800950c:	4639      	mov	r1, r7
 800950e:	4630      	mov	r0, r6
 8009510:	2301      	movs	r3, #1
 8009512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	f000 b803 	b.w	8009520 <__strtok_r>
 800951a:	bf00      	nop
 800951c:	20000014 	.word	0x20000014

08009520 <__strtok_r>:
 8009520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009522:	b918      	cbnz	r0, 800952c <__strtok_r+0xc>
 8009524:	6810      	ldr	r0, [r2, #0]
 8009526:	b908      	cbnz	r0, 800952c <__strtok_r+0xc>
 8009528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800952a:	4620      	mov	r0, r4
 800952c:	4604      	mov	r4, r0
 800952e:	460f      	mov	r7, r1
 8009530:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009534:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009538:	b91e      	cbnz	r6, 8009542 <__strtok_r+0x22>
 800953a:	b96d      	cbnz	r5, 8009558 <__strtok_r+0x38>
 800953c:	6015      	str	r5, [r2, #0]
 800953e:	4628      	mov	r0, r5
 8009540:	e7f2      	b.n	8009528 <__strtok_r+0x8>
 8009542:	42b5      	cmp	r5, r6
 8009544:	d1f6      	bne.n	8009534 <__strtok_r+0x14>
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1ef      	bne.n	800952a <__strtok_r+0xa>
 800954a:	6014      	str	r4, [r2, #0]
 800954c:	7003      	strb	r3, [r0, #0]
 800954e:	e7eb      	b.n	8009528 <__strtok_r+0x8>
 8009550:	462b      	mov	r3, r5
 8009552:	e00d      	b.n	8009570 <__strtok_r+0x50>
 8009554:	b926      	cbnz	r6, 8009560 <__strtok_r+0x40>
 8009556:	461c      	mov	r4, r3
 8009558:	4623      	mov	r3, r4
 800955a:	460f      	mov	r7, r1
 800955c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009560:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009564:	42b5      	cmp	r5, r6
 8009566:	d1f5      	bne.n	8009554 <__strtok_r+0x34>
 8009568:	2d00      	cmp	r5, #0
 800956a:	d0f1      	beq.n	8009550 <__strtok_r+0x30>
 800956c:	2100      	movs	r1, #0
 800956e:	7021      	strb	r1, [r4, #0]
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	e7d9      	b.n	8009528 <__strtok_r+0x8>

08009574 <_strtol_l.isra.0>:
 8009574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009578:	4680      	mov	r8, r0
 800957a:	4689      	mov	r9, r1
 800957c:	4692      	mov	sl, r2
 800957e:	461e      	mov	r6, r3
 8009580:	460f      	mov	r7, r1
 8009582:	463d      	mov	r5, r7
 8009584:	9808      	ldr	r0, [sp, #32]
 8009586:	f815 4b01 	ldrb.w	r4, [r5], #1
 800958a:	f000 f885 	bl	8009698 <__locale_ctype_ptr_l>
 800958e:	4420      	add	r0, r4
 8009590:	7843      	ldrb	r3, [r0, #1]
 8009592:	f013 0308 	ands.w	r3, r3, #8
 8009596:	d132      	bne.n	80095fe <_strtol_l.isra.0+0x8a>
 8009598:	2c2d      	cmp	r4, #45	; 0x2d
 800959a:	d132      	bne.n	8009602 <_strtol_l.isra.0+0x8e>
 800959c:	787c      	ldrb	r4, [r7, #1]
 800959e:	1cbd      	adds	r5, r7, #2
 80095a0:	2201      	movs	r2, #1
 80095a2:	2e00      	cmp	r6, #0
 80095a4:	d05d      	beq.n	8009662 <_strtol_l.isra.0+0xee>
 80095a6:	2e10      	cmp	r6, #16
 80095a8:	d109      	bne.n	80095be <_strtol_l.isra.0+0x4a>
 80095aa:	2c30      	cmp	r4, #48	; 0x30
 80095ac:	d107      	bne.n	80095be <_strtol_l.isra.0+0x4a>
 80095ae:	782b      	ldrb	r3, [r5, #0]
 80095b0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80095b4:	2b58      	cmp	r3, #88	; 0x58
 80095b6:	d14f      	bne.n	8009658 <_strtol_l.isra.0+0xe4>
 80095b8:	786c      	ldrb	r4, [r5, #1]
 80095ba:	2610      	movs	r6, #16
 80095bc:	3502      	adds	r5, #2
 80095be:	2a00      	cmp	r2, #0
 80095c0:	bf14      	ite	ne
 80095c2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80095c6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80095ca:	2700      	movs	r7, #0
 80095cc:	fbb1 fcf6 	udiv	ip, r1, r6
 80095d0:	4638      	mov	r0, r7
 80095d2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80095d6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80095da:	2b09      	cmp	r3, #9
 80095dc:	d817      	bhi.n	800960e <_strtol_l.isra.0+0x9a>
 80095de:	461c      	mov	r4, r3
 80095e0:	42a6      	cmp	r6, r4
 80095e2:	dd23      	ble.n	800962c <_strtol_l.isra.0+0xb8>
 80095e4:	1c7b      	adds	r3, r7, #1
 80095e6:	d007      	beq.n	80095f8 <_strtol_l.isra.0+0x84>
 80095e8:	4584      	cmp	ip, r0
 80095ea:	d31c      	bcc.n	8009626 <_strtol_l.isra.0+0xb2>
 80095ec:	d101      	bne.n	80095f2 <_strtol_l.isra.0+0x7e>
 80095ee:	45a6      	cmp	lr, r4
 80095f0:	db19      	blt.n	8009626 <_strtol_l.isra.0+0xb2>
 80095f2:	fb00 4006 	mla	r0, r0, r6, r4
 80095f6:	2701      	movs	r7, #1
 80095f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095fc:	e7eb      	b.n	80095d6 <_strtol_l.isra.0+0x62>
 80095fe:	462f      	mov	r7, r5
 8009600:	e7bf      	b.n	8009582 <_strtol_l.isra.0+0xe>
 8009602:	2c2b      	cmp	r4, #43	; 0x2b
 8009604:	bf04      	itt	eq
 8009606:	1cbd      	addeq	r5, r7, #2
 8009608:	787c      	ldrbeq	r4, [r7, #1]
 800960a:	461a      	mov	r2, r3
 800960c:	e7c9      	b.n	80095a2 <_strtol_l.isra.0+0x2e>
 800960e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009612:	2b19      	cmp	r3, #25
 8009614:	d801      	bhi.n	800961a <_strtol_l.isra.0+0xa6>
 8009616:	3c37      	subs	r4, #55	; 0x37
 8009618:	e7e2      	b.n	80095e0 <_strtol_l.isra.0+0x6c>
 800961a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800961e:	2b19      	cmp	r3, #25
 8009620:	d804      	bhi.n	800962c <_strtol_l.isra.0+0xb8>
 8009622:	3c57      	subs	r4, #87	; 0x57
 8009624:	e7dc      	b.n	80095e0 <_strtol_l.isra.0+0x6c>
 8009626:	f04f 37ff 	mov.w	r7, #4294967295
 800962a:	e7e5      	b.n	80095f8 <_strtol_l.isra.0+0x84>
 800962c:	1c7b      	adds	r3, r7, #1
 800962e:	d108      	bne.n	8009642 <_strtol_l.isra.0+0xce>
 8009630:	2322      	movs	r3, #34	; 0x22
 8009632:	f8c8 3000 	str.w	r3, [r8]
 8009636:	4608      	mov	r0, r1
 8009638:	f1ba 0f00 	cmp.w	sl, #0
 800963c:	d107      	bne.n	800964e <_strtol_l.isra.0+0xda>
 800963e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009642:	b102      	cbz	r2, 8009646 <_strtol_l.isra.0+0xd2>
 8009644:	4240      	negs	r0, r0
 8009646:	f1ba 0f00 	cmp.w	sl, #0
 800964a:	d0f8      	beq.n	800963e <_strtol_l.isra.0+0xca>
 800964c:	b10f      	cbz	r7, 8009652 <_strtol_l.isra.0+0xde>
 800964e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009652:	f8ca 9000 	str.w	r9, [sl]
 8009656:	e7f2      	b.n	800963e <_strtol_l.isra.0+0xca>
 8009658:	2430      	movs	r4, #48	; 0x30
 800965a:	2e00      	cmp	r6, #0
 800965c:	d1af      	bne.n	80095be <_strtol_l.isra.0+0x4a>
 800965e:	2608      	movs	r6, #8
 8009660:	e7ad      	b.n	80095be <_strtol_l.isra.0+0x4a>
 8009662:	2c30      	cmp	r4, #48	; 0x30
 8009664:	d0a3      	beq.n	80095ae <_strtol_l.isra.0+0x3a>
 8009666:	260a      	movs	r6, #10
 8009668:	e7a9      	b.n	80095be <_strtol_l.isra.0+0x4a>
	...

0800966c <strtol>:
 800966c:	4b08      	ldr	r3, [pc, #32]	; (8009690 <strtol+0x24>)
 800966e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009670:	681c      	ldr	r4, [r3, #0]
 8009672:	4d08      	ldr	r5, [pc, #32]	; (8009694 <strtol+0x28>)
 8009674:	6a23      	ldr	r3, [r4, #32]
 8009676:	2b00      	cmp	r3, #0
 8009678:	bf08      	it	eq
 800967a:	462b      	moveq	r3, r5
 800967c:	9300      	str	r3, [sp, #0]
 800967e:	4613      	mov	r3, r2
 8009680:	460a      	mov	r2, r1
 8009682:	4601      	mov	r1, r0
 8009684:	4620      	mov	r0, r4
 8009686:	f7ff ff75 	bl	8009574 <_strtol_l.isra.0>
 800968a:	b003      	add	sp, #12
 800968c:	bd30      	pop	{r4, r5, pc}
 800968e:	bf00      	nop
 8009690:	20000014 	.word	0x20000014
 8009694:	20000078 	.word	0x20000078

08009698 <__locale_ctype_ptr_l>:
 8009698:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800969c:	4770      	bx	lr
	...

080096a0 <malloc>:
 80096a0:	4b02      	ldr	r3, [pc, #8]	; (80096ac <malloc+0xc>)
 80096a2:	4601      	mov	r1, r0
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	f000 b863 	b.w	8009770 <_malloc_r>
 80096aa:	bf00      	nop
 80096ac:	20000014 	.word	0x20000014

080096b0 <__ascii_mbtowc>:
 80096b0:	b082      	sub	sp, #8
 80096b2:	b901      	cbnz	r1, 80096b6 <__ascii_mbtowc+0x6>
 80096b4:	a901      	add	r1, sp, #4
 80096b6:	b142      	cbz	r2, 80096ca <__ascii_mbtowc+0x1a>
 80096b8:	b14b      	cbz	r3, 80096ce <__ascii_mbtowc+0x1e>
 80096ba:	7813      	ldrb	r3, [r2, #0]
 80096bc:	600b      	str	r3, [r1, #0]
 80096be:	7812      	ldrb	r2, [r2, #0]
 80096c0:	1c10      	adds	r0, r2, #0
 80096c2:	bf18      	it	ne
 80096c4:	2001      	movne	r0, #1
 80096c6:	b002      	add	sp, #8
 80096c8:	4770      	bx	lr
 80096ca:	4610      	mov	r0, r2
 80096cc:	e7fb      	b.n	80096c6 <__ascii_mbtowc+0x16>
 80096ce:	f06f 0001 	mvn.w	r0, #1
 80096d2:	e7f8      	b.n	80096c6 <__ascii_mbtowc+0x16>

080096d4 <_free_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4605      	mov	r5, r0
 80096d8:	2900      	cmp	r1, #0
 80096da:	d045      	beq.n	8009768 <_free_r+0x94>
 80096dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096e0:	1f0c      	subs	r4, r1, #4
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	bfb8      	it	lt
 80096e6:	18e4      	addlt	r4, r4, r3
 80096e8:	f000 fbb7 	bl	8009e5a <__malloc_lock>
 80096ec:	4a1f      	ldr	r2, [pc, #124]	; (800976c <_free_r+0x98>)
 80096ee:	6813      	ldr	r3, [r2, #0]
 80096f0:	4610      	mov	r0, r2
 80096f2:	b933      	cbnz	r3, 8009702 <_free_r+0x2e>
 80096f4:	6063      	str	r3, [r4, #4]
 80096f6:	6014      	str	r4, [r2, #0]
 80096f8:	4628      	mov	r0, r5
 80096fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096fe:	f000 bbad 	b.w	8009e5c <__malloc_unlock>
 8009702:	42a3      	cmp	r3, r4
 8009704:	d90c      	bls.n	8009720 <_free_r+0x4c>
 8009706:	6821      	ldr	r1, [r4, #0]
 8009708:	1862      	adds	r2, r4, r1
 800970a:	4293      	cmp	r3, r2
 800970c:	bf04      	itt	eq
 800970e:	681a      	ldreq	r2, [r3, #0]
 8009710:	685b      	ldreq	r3, [r3, #4]
 8009712:	6063      	str	r3, [r4, #4]
 8009714:	bf04      	itt	eq
 8009716:	1852      	addeq	r2, r2, r1
 8009718:	6022      	streq	r2, [r4, #0]
 800971a:	6004      	str	r4, [r0, #0]
 800971c:	e7ec      	b.n	80096f8 <_free_r+0x24>
 800971e:	4613      	mov	r3, r2
 8009720:	685a      	ldr	r2, [r3, #4]
 8009722:	b10a      	cbz	r2, 8009728 <_free_r+0x54>
 8009724:	42a2      	cmp	r2, r4
 8009726:	d9fa      	bls.n	800971e <_free_r+0x4a>
 8009728:	6819      	ldr	r1, [r3, #0]
 800972a:	1858      	adds	r0, r3, r1
 800972c:	42a0      	cmp	r0, r4
 800972e:	d10b      	bne.n	8009748 <_free_r+0x74>
 8009730:	6820      	ldr	r0, [r4, #0]
 8009732:	4401      	add	r1, r0
 8009734:	1858      	adds	r0, r3, r1
 8009736:	4282      	cmp	r2, r0
 8009738:	6019      	str	r1, [r3, #0]
 800973a:	d1dd      	bne.n	80096f8 <_free_r+0x24>
 800973c:	6810      	ldr	r0, [r2, #0]
 800973e:	6852      	ldr	r2, [r2, #4]
 8009740:	605a      	str	r2, [r3, #4]
 8009742:	4401      	add	r1, r0
 8009744:	6019      	str	r1, [r3, #0]
 8009746:	e7d7      	b.n	80096f8 <_free_r+0x24>
 8009748:	d902      	bls.n	8009750 <_free_r+0x7c>
 800974a:	230c      	movs	r3, #12
 800974c:	602b      	str	r3, [r5, #0]
 800974e:	e7d3      	b.n	80096f8 <_free_r+0x24>
 8009750:	6820      	ldr	r0, [r4, #0]
 8009752:	1821      	adds	r1, r4, r0
 8009754:	428a      	cmp	r2, r1
 8009756:	bf04      	itt	eq
 8009758:	6811      	ldreq	r1, [r2, #0]
 800975a:	6852      	ldreq	r2, [r2, #4]
 800975c:	6062      	str	r2, [r4, #4]
 800975e:	bf04      	itt	eq
 8009760:	1809      	addeq	r1, r1, r0
 8009762:	6021      	streq	r1, [r4, #0]
 8009764:	605c      	str	r4, [r3, #4]
 8009766:	e7c7      	b.n	80096f8 <_free_r+0x24>
 8009768:	bd38      	pop	{r3, r4, r5, pc}
 800976a:	bf00      	nop
 800976c:	2000020c 	.word	0x2000020c

08009770 <_malloc_r>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	1ccd      	adds	r5, r1, #3
 8009774:	f025 0503 	bic.w	r5, r5, #3
 8009778:	3508      	adds	r5, #8
 800977a:	2d0c      	cmp	r5, #12
 800977c:	bf38      	it	cc
 800977e:	250c      	movcc	r5, #12
 8009780:	2d00      	cmp	r5, #0
 8009782:	4606      	mov	r6, r0
 8009784:	db01      	blt.n	800978a <_malloc_r+0x1a>
 8009786:	42a9      	cmp	r1, r5
 8009788:	d903      	bls.n	8009792 <_malloc_r+0x22>
 800978a:	230c      	movs	r3, #12
 800978c:	6033      	str	r3, [r6, #0]
 800978e:	2000      	movs	r0, #0
 8009790:	bd70      	pop	{r4, r5, r6, pc}
 8009792:	f000 fb62 	bl	8009e5a <__malloc_lock>
 8009796:	4a21      	ldr	r2, [pc, #132]	; (800981c <_malloc_r+0xac>)
 8009798:	6814      	ldr	r4, [r2, #0]
 800979a:	4621      	mov	r1, r4
 800979c:	b991      	cbnz	r1, 80097c4 <_malloc_r+0x54>
 800979e:	4c20      	ldr	r4, [pc, #128]	; (8009820 <_malloc_r+0xb0>)
 80097a0:	6823      	ldr	r3, [r4, #0]
 80097a2:	b91b      	cbnz	r3, 80097ac <_malloc_r+0x3c>
 80097a4:	4630      	mov	r0, r6
 80097a6:	f000 fb17 	bl	8009dd8 <_sbrk_r>
 80097aa:	6020      	str	r0, [r4, #0]
 80097ac:	4629      	mov	r1, r5
 80097ae:	4630      	mov	r0, r6
 80097b0:	f000 fb12 	bl	8009dd8 <_sbrk_r>
 80097b4:	1c43      	adds	r3, r0, #1
 80097b6:	d124      	bne.n	8009802 <_malloc_r+0x92>
 80097b8:	230c      	movs	r3, #12
 80097ba:	6033      	str	r3, [r6, #0]
 80097bc:	4630      	mov	r0, r6
 80097be:	f000 fb4d 	bl	8009e5c <__malloc_unlock>
 80097c2:	e7e4      	b.n	800978e <_malloc_r+0x1e>
 80097c4:	680b      	ldr	r3, [r1, #0]
 80097c6:	1b5b      	subs	r3, r3, r5
 80097c8:	d418      	bmi.n	80097fc <_malloc_r+0x8c>
 80097ca:	2b0b      	cmp	r3, #11
 80097cc:	d90f      	bls.n	80097ee <_malloc_r+0x7e>
 80097ce:	600b      	str	r3, [r1, #0]
 80097d0:	50cd      	str	r5, [r1, r3]
 80097d2:	18cc      	adds	r4, r1, r3
 80097d4:	4630      	mov	r0, r6
 80097d6:	f000 fb41 	bl	8009e5c <__malloc_unlock>
 80097da:	f104 000b 	add.w	r0, r4, #11
 80097de:	1d23      	adds	r3, r4, #4
 80097e0:	f020 0007 	bic.w	r0, r0, #7
 80097e4:	1ac3      	subs	r3, r0, r3
 80097e6:	d0d3      	beq.n	8009790 <_malloc_r+0x20>
 80097e8:	425a      	negs	r2, r3
 80097ea:	50e2      	str	r2, [r4, r3]
 80097ec:	e7d0      	b.n	8009790 <_malloc_r+0x20>
 80097ee:	428c      	cmp	r4, r1
 80097f0:	684b      	ldr	r3, [r1, #4]
 80097f2:	bf16      	itet	ne
 80097f4:	6063      	strne	r3, [r4, #4]
 80097f6:	6013      	streq	r3, [r2, #0]
 80097f8:	460c      	movne	r4, r1
 80097fa:	e7eb      	b.n	80097d4 <_malloc_r+0x64>
 80097fc:	460c      	mov	r4, r1
 80097fe:	6849      	ldr	r1, [r1, #4]
 8009800:	e7cc      	b.n	800979c <_malloc_r+0x2c>
 8009802:	1cc4      	adds	r4, r0, #3
 8009804:	f024 0403 	bic.w	r4, r4, #3
 8009808:	42a0      	cmp	r0, r4
 800980a:	d005      	beq.n	8009818 <_malloc_r+0xa8>
 800980c:	1a21      	subs	r1, r4, r0
 800980e:	4630      	mov	r0, r6
 8009810:	f000 fae2 	bl	8009dd8 <_sbrk_r>
 8009814:	3001      	adds	r0, #1
 8009816:	d0cf      	beq.n	80097b8 <_malloc_r+0x48>
 8009818:	6025      	str	r5, [r4, #0]
 800981a:	e7db      	b.n	80097d4 <_malloc_r+0x64>
 800981c:	2000020c 	.word	0x2000020c
 8009820:	20000210 	.word	0x20000210

08009824 <__ssputs_r>:
 8009824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009828:	688e      	ldr	r6, [r1, #8]
 800982a:	429e      	cmp	r6, r3
 800982c:	4682      	mov	sl, r0
 800982e:	460c      	mov	r4, r1
 8009830:	4690      	mov	r8, r2
 8009832:	4699      	mov	r9, r3
 8009834:	d837      	bhi.n	80098a6 <__ssputs_r+0x82>
 8009836:	898a      	ldrh	r2, [r1, #12]
 8009838:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800983c:	d031      	beq.n	80098a2 <__ssputs_r+0x7e>
 800983e:	6825      	ldr	r5, [r4, #0]
 8009840:	6909      	ldr	r1, [r1, #16]
 8009842:	1a6f      	subs	r7, r5, r1
 8009844:	6965      	ldr	r5, [r4, #20]
 8009846:	2302      	movs	r3, #2
 8009848:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800984c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009850:	f109 0301 	add.w	r3, r9, #1
 8009854:	443b      	add	r3, r7
 8009856:	429d      	cmp	r5, r3
 8009858:	bf38      	it	cc
 800985a:	461d      	movcc	r5, r3
 800985c:	0553      	lsls	r3, r2, #21
 800985e:	d530      	bpl.n	80098c2 <__ssputs_r+0x9e>
 8009860:	4629      	mov	r1, r5
 8009862:	f7ff ff85 	bl	8009770 <_malloc_r>
 8009866:	4606      	mov	r6, r0
 8009868:	b950      	cbnz	r0, 8009880 <__ssputs_r+0x5c>
 800986a:	230c      	movs	r3, #12
 800986c:	f8ca 3000 	str.w	r3, [sl]
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009876:	81a3      	strh	r3, [r4, #12]
 8009878:	f04f 30ff 	mov.w	r0, #4294967295
 800987c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009880:	463a      	mov	r2, r7
 8009882:	6921      	ldr	r1, [r4, #16]
 8009884:	f000 fac5 	bl	8009e12 <memcpy>
 8009888:	89a3      	ldrh	r3, [r4, #12]
 800988a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800988e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	6126      	str	r6, [r4, #16]
 8009896:	6165      	str	r5, [r4, #20]
 8009898:	443e      	add	r6, r7
 800989a:	1bed      	subs	r5, r5, r7
 800989c:	6026      	str	r6, [r4, #0]
 800989e:	60a5      	str	r5, [r4, #8]
 80098a0:	464e      	mov	r6, r9
 80098a2:	454e      	cmp	r6, r9
 80098a4:	d900      	bls.n	80098a8 <__ssputs_r+0x84>
 80098a6:	464e      	mov	r6, r9
 80098a8:	4632      	mov	r2, r6
 80098aa:	4641      	mov	r1, r8
 80098ac:	6820      	ldr	r0, [r4, #0]
 80098ae:	f000 fabb 	bl	8009e28 <memmove>
 80098b2:	68a3      	ldr	r3, [r4, #8]
 80098b4:	1b9b      	subs	r3, r3, r6
 80098b6:	60a3      	str	r3, [r4, #8]
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	441e      	add	r6, r3
 80098bc:	6026      	str	r6, [r4, #0]
 80098be:	2000      	movs	r0, #0
 80098c0:	e7dc      	b.n	800987c <__ssputs_r+0x58>
 80098c2:	462a      	mov	r2, r5
 80098c4:	f000 facb 	bl	8009e5e <_realloc_r>
 80098c8:	4606      	mov	r6, r0
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d1e2      	bne.n	8009894 <__ssputs_r+0x70>
 80098ce:	6921      	ldr	r1, [r4, #16]
 80098d0:	4650      	mov	r0, sl
 80098d2:	f7ff feff 	bl	80096d4 <_free_r>
 80098d6:	e7c8      	b.n	800986a <__ssputs_r+0x46>

080098d8 <_svfiprintf_r>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	461d      	mov	r5, r3
 80098de:	898b      	ldrh	r3, [r1, #12]
 80098e0:	061f      	lsls	r7, r3, #24
 80098e2:	b09d      	sub	sp, #116	; 0x74
 80098e4:	4680      	mov	r8, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	4616      	mov	r6, r2
 80098ea:	d50f      	bpl.n	800990c <_svfiprintf_r+0x34>
 80098ec:	690b      	ldr	r3, [r1, #16]
 80098ee:	b96b      	cbnz	r3, 800990c <_svfiprintf_r+0x34>
 80098f0:	2140      	movs	r1, #64	; 0x40
 80098f2:	f7ff ff3d 	bl	8009770 <_malloc_r>
 80098f6:	6020      	str	r0, [r4, #0]
 80098f8:	6120      	str	r0, [r4, #16]
 80098fa:	b928      	cbnz	r0, 8009908 <_svfiprintf_r+0x30>
 80098fc:	230c      	movs	r3, #12
 80098fe:	f8c8 3000 	str.w	r3, [r8]
 8009902:	f04f 30ff 	mov.w	r0, #4294967295
 8009906:	e0c8      	b.n	8009a9a <_svfiprintf_r+0x1c2>
 8009908:	2340      	movs	r3, #64	; 0x40
 800990a:	6163      	str	r3, [r4, #20]
 800990c:	2300      	movs	r3, #0
 800990e:	9309      	str	r3, [sp, #36]	; 0x24
 8009910:	2320      	movs	r3, #32
 8009912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009916:	2330      	movs	r3, #48	; 0x30
 8009918:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800991c:	9503      	str	r5, [sp, #12]
 800991e:	f04f 0b01 	mov.w	fp, #1
 8009922:	4637      	mov	r7, r6
 8009924:	463d      	mov	r5, r7
 8009926:	f815 3b01 	ldrb.w	r3, [r5], #1
 800992a:	b10b      	cbz	r3, 8009930 <_svfiprintf_r+0x58>
 800992c:	2b25      	cmp	r3, #37	; 0x25
 800992e:	d13e      	bne.n	80099ae <_svfiprintf_r+0xd6>
 8009930:	ebb7 0a06 	subs.w	sl, r7, r6
 8009934:	d00b      	beq.n	800994e <_svfiprintf_r+0x76>
 8009936:	4653      	mov	r3, sl
 8009938:	4632      	mov	r2, r6
 800993a:	4621      	mov	r1, r4
 800993c:	4640      	mov	r0, r8
 800993e:	f7ff ff71 	bl	8009824 <__ssputs_r>
 8009942:	3001      	adds	r0, #1
 8009944:	f000 80a4 	beq.w	8009a90 <_svfiprintf_r+0x1b8>
 8009948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800994a:	4453      	add	r3, sl
 800994c:	9309      	str	r3, [sp, #36]	; 0x24
 800994e:	783b      	ldrb	r3, [r7, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 809d 	beq.w	8009a90 <_svfiprintf_r+0x1b8>
 8009956:	2300      	movs	r3, #0
 8009958:	f04f 32ff 	mov.w	r2, #4294967295
 800995c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009960:	9304      	str	r3, [sp, #16]
 8009962:	9307      	str	r3, [sp, #28]
 8009964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009968:	931a      	str	r3, [sp, #104]	; 0x68
 800996a:	462f      	mov	r7, r5
 800996c:	2205      	movs	r2, #5
 800996e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009972:	4850      	ldr	r0, [pc, #320]	; (8009ab4 <_svfiprintf_r+0x1dc>)
 8009974:	f7f6 fc7c 	bl	8000270 <memchr>
 8009978:	9b04      	ldr	r3, [sp, #16]
 800997a:	b9d0      	cbnz	r0, 80099b2 <_svfiprintf_r+0xda>
 800997c:	06d9      	lsls	r1, r3, #27
 800997e:	bf44      	itt	mi
 8009980:	2220      	movmi	r2, #32
 8009982:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009986:	071a      	lsls	r2, r3, #28
 8009988:	bf44      	itt	mi
 800998a:	222b      	movmi	r2, #43	; 0x2b
 800998c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009990:	782a      	ldrb	r2, [r5, #0]
 8009992:	2a2a      	cmp	r2, #42	; 0x2a
 8009994:	d015      	beq.n	80099c2 <_svfiprintf_r+0xea>
 8009996:	9a07      	ldr	r2, [sp, #28]
 8009998:	462f      	mov	r7, r5
 800999a:	2000      	movs	r0, #0
 800999c:	250a      	movs	r5, #10
 800999e:	4639      	mov	r1, r7
 80099a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099a4:	3b30      	subs	r3, #48	; 0x30
 80099a6:	2b09      	cmp	r3, #9
 80099a8:	d94d      	bls.n	8009a46 <_svfiprintf_r+0x16e>
 80099aa:	b1b8      	cbz	r0, 80099dc <_svfiprintf_r+0x104>
 80099ac:	e00f      	b.n	80099ce <_svfiprintf_r+0xf6>
 80099ae:	462f      	mov	r7, r5
 80099b0:	e7b8      	b.n	8009924 <_svfiprintf_r+0x4c>
 80099b2:	4a40      	ldr	r2, [pc, #256]	; (8009ab4 <_svfiprintf_r+0x1dc>)
 80099b4:	1a80      	subs	r0, r0, r2
 80099b6:	fa0b f000 	lsl.w	r0, fp, r0
 80099ba:	4318      	orrs	r0, r3
 80099bc:	9004      	str	r0, [sp, #16]
 80099be:	463d      	mov	r5, r7
 80099c0:	e7d3      	b.n	800996a <_svfiprintf_r+0x92>
 80099c2:	9a03      	ldr	r2, [sp, #12]
 80099c4:	1d11      	adds	r1, r2, #4
 80099c6:	6812      	ldr	r2, [r2, #0]
 80099c8:	9103      	str	r1, [sp, #12]
 80099ca:	2a00      	cmp	r2, #0
 80099cc:	db01      	blt.n	80099d2 <_svfiprintf_r+0xfa>
 80099ce:	9207      	str	r2, [sp, #28]
 80099d0:	e004      	b.n	80099dc <_svfiprintf_r+0x104>
 80099d2:	4252      	negs	r2, r2
 80099d4:	f043 0302 	orr.w	r3, r3, #2
 80099d8:	9207      	str	r2, [sp, #28]
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	783b      	ldrb	r3, [r7, #0]
 80099de:	2b2e      	cmp	r3, #46	; 0x2e
 80099e0:	d10c      	bne.n	80099fc <_svfiprintf_r+0x124>
 80099e2:	787b      	ldrb	r3, [r7, #1]
 80099e4:	2b2a      	cmp	r3, #42	; 0x2a
 80099e6:	d133      	bne.n	8009a50 <_svfiprintf_r+0x178>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	1d1a      	adds	r2, r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	9203      	str	r2, [sp, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bfb8      	it	lt
 80099f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099f8:	3702      	adds	r7, #2
 80099fa:	9305      	str	r3, [sp, #20]
 80099fc:	4d2e      	ldr	r5, [pc, #184]	; (8009ab8 <_svfiprintf_r+0x1e0>)
 80099fe:	7839      	ldrb	r1, [r7, #0]
 8009a00:	2203      	movs	r2, #3
 8009a02:	4628      	mov	r0, r5
 8009a04:	f7f6 fc34 	bl	8000270 <memchr>
 8009a08:	b138      	cbz	r0, 8009a1a <_svfiprintf_r+0x142>
 8009a0a:	2340      	movs	r3, #64	; 0x40
 8009a0c:	1b40      	subs	r0, r0, r5
 8009a0e:	fa03 f000 	lsl.w	r0, r3, r0
 8009a12:	9b04      	ldr	r3, [sp, #16]
 8009a14:	4303      	orrs	r3, r0
 8009a16:	3701      	adds	r7, #1
 8009a18:	9304      	str	r3, [sp, #16]
 8009a1a:	7839      	ldrb	r1, [r7, #0]
 8009a1c:	4827      	ldr	r0, [pc, #156]	; (8009abc <_svfiprintf_r+0x1e4>)
 8009a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a22:	2206      	movs	r2, #6
 8009a24:	1c7e      	adds	r6, r7, #1
 8009a26:	f7f6 fc23 	bl	8000270 <memchr>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d038      	beq.n	8009aa0 <_svfiprintf_r+0x1c8>
 8009a2e:	4b24      	ldr	r3, [pc, #144]	; (8009ac0 <_svfiprintf_r+0x1e8>)
 8009a30:	bb13      	cbnz	r3, 8009a78 <_svfiprintf_r+0x1a0>
 8009a32:	9b03      	ldr	r3, [sp, #12]
 8009a34:	3307      	adds	r3, #7
 8009a36:	f023 0307 	bic.w	r3, r3, #7
 8009a3a:	3308      	adds	r3, #8
 8009a3c:	9303      	str	r3, [sp, #12]
 8009a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a40:	444b      	add	r3, r9
 8009a42:	9309      	str	r3, [sp, #36]	; 0x24
 8009a44:	e76d      	b.n	8009922 <_svfiprintf_r+0x4a>
 8009a46:	fb05 3202 	mla	r2, r5, r2, r3
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	460f      	mov	r7, r1
 8009a4e:	e7a6      	b.n	800999e <_svfiprintf_r+0xc6>
 8009a50:	2300      	movs	r3, #0
 8009a52:	3701      	adds	r7, #1
 8009a54:	9305      	str	r3, [sp, #20]
 8009a56:	4619      	mov	r1, r3
 8009a58:	250a      	movs	r5, #10
 8009a5a:	4638      	mov	r0, r7
 8009a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a60:	3a30      	subs	r2, #48	; 0x30
 8009a62:	2a09      	cmp	r2, #9
 8009a64:	d903      	bls.n	8009a6e <_svfiprintf_r+0x196>
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0c8      	beq.n	80099fc <_svfiprintf_r+0x124>
 8009a6a:	9105      	str	r1, [sp, #20]
 8009a6c:	e7c6      	b.n	80099fc <_svfiprintf_r+0x124>
 8009a6e:	fb05 2101 	mla	r1, r5, r1, r2
 8009a72:	2301      	movs	r3, #1
 8009a74:	4607      	mov	r7, r0
 8009a76:	e7f0      	b.n	8009a5a <_svfiprintf_r+0x182>
 8009a78:	ab03      	add	r3, sp, #12
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	4622      	mov	r2, r4
 8009a7e:	4b11      	ldr	r3, [pc, #68]	; (8009ac4 <_svfiprintf_r+0x1ec>)
 8009a80:	a904      	add	r1, sp, #16
 8009a82:	4640      	mov	r0, r8
 8009a84:	f3af 8000 	nop.w
 8009a88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009a8c:	4681      	mov	r9, r0
 8009a8e:	d1d6      	bne.n	8009a3e <_svfiprintf_r+0x166>
 8009a90:	89a3      	ldrh	r3, [r4, #12]
 8009a92:	065b      	lsls	r3, r3, #25
 8009a94:	f53f af35 	bmi.w	8009902 <_svfiprintf_r+0x2a>
 8009a98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9a:	b01d      	add	sp, #116	; 0x74
 8009a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa0:	ab03      	add	r3, sp, #12
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	4622      	mov	r2, r4
 8009aa6:	4b07      	ldr	r3, [pc, #28]	; (8009ac4 <_svfiprintf_r+0x1ec>)
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	4640      	mov	r0, r8
 8009aac:	f000 f882 	bl	8009bb4 <_printf_i>
 8009ab0:	e7ea      	b.n	8009a88 <_svfiprintf_r+0x1b0>
 8009ab2:	bf00      	nop
 8009ab4:	0800a03a 	.word	0x0800a03a
 8009ab8:	0800a040 	.word	0x0800a040
 8009abc:	0800a044 	.word	0x0800a044
 8009ac0:	00000000 	.word	0x00000000
 8009ac4:	08009825 	.word	0x08009825

08009ac8 <_printf_common>:
 8009ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009acc:	4691      	mov	r9, r2
 8009ace:	461f      	mov	r7, r3
 8009ad0:	688a      	ldr	r2, [r1, #8]
 8009ad2:	690b      	ldr	r3, [r1, #16]
 8009ad4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	bfb8      	it	lt
 8009adc:	4613      	movlt	r3, r2
 8009ade:	f8c9 3000 	str.w	r3, [r9]
 8009ae2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ae6:	4606      	mov	r6, r0
 8009ae8:	460c      	mov	r4, r1
 8009aea:	b112      	cbz	r2, 8009af2 <_printf_common+0x2a>
 8009aec:	3301      	adds	r3, #1
 8009aee:	f8c9 3000 	str.w	r3, [r9]
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	0699      	lsls	r1, r3, #26
 8009af6:	bf42      	ittt	mi
 8009af8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009afc:	3302      	addmi	r3, #2
 8009afe:	f8c9 3000 	strmi.w	r3, [r9]
 8009b02:	6825      	ldr	r5, [r4, #0]
 8009b04:	f015 0506 	ands.w	r5, r5, #6
 8009b08:	d107      	bne.n	8009b1a <_printf_common+0x52>
 8009b0a:	f104 0a19 	add.w	sl, r4, #25
 8009b0e:	68e3      	ldr	r3, [r4, #12]
 8009b10:	f8d9 2000 	ldr.w	r2, [r9]
 8009b14:	1a9b      	subs	r3, r3, r2
 8009b16:	42ab      	cmp	r3, r5
 8009b18:	dc28      	bgt.n	8009b6c <_printf_common+0xa4>
 8009b1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009b1e:	6822      	ldr	r2, [r4, #0]
 8009b20:	3300      	adds	r3, #0
 8009b22:	bf18      	it	ne
 8009b24:	2301      	movne	r3, #1
 8009b26:	0692      	lsls	r2, r2, #26
 8009b28:	d42d      	bmi.n	8009b86 <_printf_common+0xbe>
 8009b2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b2e:	4639      	mov	r1, r7
 8009b30:	4630      	mov	r0, r6
 8009b32:	47c0      	blx	r8
 8009b34:	3001      	adds	r0, #1
 8009b36:	d020      	beq.n	8009b7a <_printf_common+0xb2>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	68e5      	ldr	r5, [r4, #12]
 8009b3c:	f8d9 2000 	ldr.w	r2, [r9]
 8009b40:	f003 0306 	and.w	r3, r3, #6
 8009b44:	2b04      	cmp	r3, #4
 8009b46:	bf08      	it	eq
 8009b48:	1aad      	subeq	r5, r5, r2
 8009b4a:	68a3      	ldr	r3, [r4, #8]
 8009b4c:	6922      	ldr	r2, [r4, #16]
 8009b4e:	bf0c      	ite	eq
 8009b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b54:	2500      	movne	r5, #0
 8009b56:	4293      	cmp	r3, r2
 8009b58:	bfc4      	itt	gt
 8009b5a:	1a9b      	subgt	r3, r3, r2
 8009b5c:	18ed      	addgt	r5, r5, r3
 8009b5e:	f04f 0900 	mov.w	r9, #0
 8009b62:	341a      	adds	r4, #26
 8009b64:	454d      	cmp	r5, r9
 8009b66:	d11a      	bne.n	8009b9e <_printf_common+0xd6>
 8009b68:	2000      	movs	r0, #0
 8009b6a:	e008      	b.n	8009b7e <_printf_common+0xb6>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	4652      	mov	r2, sl
 8009b70:	4639      	mov	r1, r7
 8009b72:	4630      	mov	r0, r6
 8009b74:	47c0      	blx	r8
 8009b76:	3001      	adds	r0, #1
 8009b78:	d103      	bne.n	8009b82 <_printf_common+0xba>
 8009b7a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b82:	3501      	adds	r5, #1
 8009b84:	e7c3      	b.n	8009b0e <_printf_common+0x46>
 8009b86:	18e1      	adds	r1, r4, r3
 8009b88:	1c5a      	adds	r2, r3, #1
 8009b8a:	2030      	movs	r0, #48	; 0x30
 8009b8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b90:	4422      	add	r2, r4
 8009b92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b9a:	3302      	adds	r3, #2
 8009b9c:	e7c5      	b.n	8009b2a <_printf_common+0x62>
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	4622      	mov	r2, r4
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	47c0      	blx	r8
 8009ba8:	3001      	adds	r0, #1
 8009baa:	d0e6      	beq.n	8009b7a <_printf_common+0xb2>
 8009bac:	f109 0901 	add.w	r9, r9, #1
 8009bb0:	e7d8      	b.n	8009b64 <_printf_common+0x9c>
	...

08009bb4 <_printf_i>:
 8009bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009bbc:	460c      	mov	r4, r1
 8009bbe:	7e09      	ldrb	r1, [r1, #24]
 8009bc0:	b085      	sub	sp, #20
 8009bc2:	296e      	cmp	r1, #110	; 0x6e
 8009bc4:	4617      	mov	r7, r2
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	4698      	mov	r8, r3
 8009bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009bcc:	f000 80b3 	beq.w	8009d36 <_printf_i+0x182>
 8009bd0:	d822      	bhi.n	8009c18 <_printf_i+0x64>
 8009bd2:	2963      	cmp	r1, #99	; 0x63
 8009bd4:	d036      	beq.n	8009c44 <_printf_i+0x90>
 8009bd6:	d80a      	bhi.n	8009bee <_printf_i+0x3a>
 8009bd8:	2900      	cmp	r1, #0
 8009bda:	f000 80b9 	beq.w	8009d50 <_printf_i+0x19c>
 8009bde:	2958      	cmp	r1, #88	; 0x58
 8009be0:	f000 8083 	beq.w	8009cea <_printf_i+0x136>
 8009be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009be8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009bec:	e032      	b.n	8009c54 <_printf_i+0xa0>
 8009bee:	2964      	cmp	r1, #100	; 0x64
 8009bf0:	d001      	beq.n	8009bf6 <_printf_i+0x42>
 8009bf2:	2969      	cmp	r1, #105	; 0x69
 8009bf4:	d1f6      	bne.n	8009be4 <_printf_i+0x30>
 8009bf6:	6820      	ldr	r0, [r4, #0]
 8009bf8:	6813      	ldr	r3, [r2, #0]
 8009bfa:	0605      	lsls	r5, r0, #24
 8009bfc:	f103 0104 	add.w	r1, r3, #4
 8009c00:	d52a      	bpl.n	8009c58 <_printf_i+0xa4>
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	6011      	str	r1, [r2, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	da03      	bge.n	8009c12 <_printf_i+0x5e>
 8009c0a:	222d      	movs	r2, #45	; 0x2d
 8009c0c:	425b      	negs	r3, r3
 8009c0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009c12:	486f      	ldr	r0, [pc, #444]	; (8009dd0 <_printf_i+0x21c>)
 8009c14:	220a      	movs	r2, #10
 8009c16:	e039      	b.n	8009c8c <_printf_i+0xd8>
 8009c18:	2973      	cmp	r1, #115	; 0x73
 8009c1a:	f000 809d 	beq.w	8009d58 <_printf_i+0x1a4>
 8009c1e:	d808      	bhi.n	8009c32 <_printf_i+0x7e>
 8009c20:	296f      	cmp	r1, #111	; 0x6f
 8009c22:	d020      	beq.n	8009c66 <_printf_i+0xb2>
 8009c24:	2970      	cmp	r1, #112	; 0x70
 8009c26:	d1dd      	bne.n	8009be4 <_printf_i+0x30>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	f043 0320 	orr.w	r3, r3, #32
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	e003      	b.n	8009c3a <_printf_i+0x86>
 8009c32:	2975      	cmp	r1, #117	; 0x75
 8009c34:	d017      	beq.n	8009c66 <_printf_i+0xb2>
 8009c36:	2978      	cmp	r1, #120	; 0x78
 8009c38:	d1d4      	bne.n	8009be4 <_printf_i+0x30>
 8009c3a:	2378      	movs	r3, #120	; 0x78
 8009c3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c40:	4864      	ldr	r0, [pc, #400]	; (8009dd4 <_printf_i+0x220>)
 8009c42:	e055      	b.n	8009cf0 <_printf_i+0x13c>
 8009c44:	6813      	ldr	r3, [r2, #0]
 8009c46:	1d19      	adds	r1, r3, #4
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	6011      	str	r1, [r2, #0]
 8009c4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c54:	2301      	movs	r3, #1
 8009c56:	e08c      	b.n	8009d72 <_printf_i+0x1be>
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6011      	str	r1, [r2, #0]
 8009c5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c60:	bf18      	it	ne
 8009c62:	b21b      	sxthne	r3, r3
 8009c64:	e7cf      	b.n	8009c06 <_printf_i+0x52>
 8009c66:	6813      	ldr	r3, [r2, #0]
 8009c68:	6825      	ldr	r5, [r4, #0]
 8009c6a:	1d18      	adds	r0, r3, #4
 8009c6c:	6010      	str	r0, [r2, #0]
 8009c6e:	0628      	lsls	r0, r5, #24
 8009c70:	d501      	bpl.n	8009c76 <_printf_i+0xc2>
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	e002      	b.n	8009c7c <_printf_i+0xc8>
 8009c76:	0668      	lsls	r0, r5, #25
 8009c78:	d5fb      	bpl.n	8009c72 <_printf_i+0xbe>
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	4854      	ldr	r0, [pc, #336]	; (8009dd0 <_printf_i+0x21c>)
 8009c7e:	296f      	cmp	r1, #111	; 0x6f
 8009c80:	bf14      	ite	ne
 8009c82:	220a      	movne	r2, #10
 8009c84:	2208      	moveq	r2, #8
 8009c86:	2100      	movs	r1, #0
 8009c88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c8c:	6865      	ldr	r5, [r4, #4]
 8009c8e:	60a5      	str	r5, [r4, #8]
 8009c90:	2d00      	cmp	r5, #0
 8009c92:	f2c0 8095 	blt.w	8009dc0 <_printf_i+0x20c>
 8009c96:	6821      	ldr	r1, [r4, #0]
 8009c98:	f021 0104 	bic.w	r1, r1, #4
 8009c9c:	6021      	str	r1, [r4, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d13d      	bne.n	8009d1e <_printf_i+0x16a>
 8009ca2:	2d00      	cmp	r5, #0
 8009ca4:	f040 808e 	bne.w	8009dc4 <_printf_i+0x210>
 8009ca8:	4665      	mov	r5, ip
 8009caa:	2a08      	cmp	r2, #8
 8009cac:	d10b      	bne.n	8009cc6 <_printf_i+0x112>
 8009cae:	6823      	ldr	r3, [r4, #0]
 8009cb0:	07db      	lsls	r3, r3, #31
 8009cb2:	d508      	bpl.n	8009cc6 <_printf_i+0x112>
 8009cb4:	6923      	ldr	r3, [r4, #16]
 8009cb6:	6862      	ldr	r2, [r4, #4]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	bfde      	ittt	le
 8009cbc:	2330      	movle	r3, #48	; 0x30
 8009cbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009cc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cc6:	ebac 0305 	sub.w	r3, ip, r5
 8009cca:	6123      	str	r3, [r4, #16]
 8009ccc:	f8cd 8000 	str.w	r8, [sp]
 8009cd0:	463b      	mov	r3, r7
 8009cd2:	aa03      	add	r2, sp, #12
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4630      	mov	r0, r6
 8009cd8:	f7ff fef6 	bl	8009ac8 <_printf_common>
 8009cdc:	3001      	adds	r0, #1
 8009cde:	d14d      	bne.n	8009d7c <_printf_i+0x1c8>
 8009ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce4:	b005      	add	sp, #20
 8009ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cea:	4839      	ldr	r0, [pc, #228]	; (8009dd0 <_printf_i+0x21c>)
 8009cec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009cf0:	6813      	ldr	r3, [r2, #0]
 8009cf2:	6821      	ldr	r1, [r4, #0]
 8009cf4:	1d1d      	adds	r5, r3, #4
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	6015      	str	r5, [r2, #0]
 8009cfa:	060a      	lsls	r2, r1, #24
 8009cfc:	d50b      	bpl.n	8009d16 <_printf_i+0x162>
 8009cfe:	07ca      	lsls	r2, r1, #31
 8009d00:	bf44      	itt	mi
 8009d02:	f041 0120 	orrmi.w	r1, r1, #32
 8009d06:	6021      	strmi	r1, [r4, #0]
 8009d08:	b91b      	cbnz	r3, 8009d12 <_printf_i+0x15e>
 8009d0a:	6822      	ldr	r2, [r4, #0]
 8009d0c:	f022 0220 	bic.w	r2, r2, #32
 8009d10:	6022      	str	r2, [r4, #0]
 8009d12:	2210      	movs	r2, #16
 8009d14:	e7b7      	b.n	8009c86 <_printf_i+0xd2>
 8009d16:	064d      	lsls	r5, r1, #25
 8009d18:	bf48      	it	mi
 8009d1a:	b29b      	uxthmi	r3, r3
 8009d1c:	e7ef      	b.n	8009cfe <_printf_i+0x14a>
 8009d1e:	4665      	mov	r5, ip
 8009d20:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d24:	fb02 3311 	mls	r3, r2, r1, r3
 8009d28:	5cc3      	ldrb	r3, [r0, r3]
 8009d2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009d2e:	460b      	mov	r3, r1
 8009d30:	2900      	cmp	r1, #0
 8009d32:	d1f5      	bne.n	8009d20 <_printf_i+0x16c>
 8009d34:	e7b9      	b.n	8009caa <_printf_i+0xf6>
 8009d36:	6813      	ldr	r3, [r2, #0]
 8009d38:	6825      	ldr	r5, [r4, #0]
 8009d3a:	6961      	ldr	r1, [r4, #20]
 8009d3c:	1d18      	adds	r0, r3, #4
 8009d3e:	6010      	str	r0, [r2, #0]
 8009d40:	0628      	lsls	r0, r5, #24
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	d501      	bpl.n	8009d4a <_printf_i+0x196>
 8009d46:	6019      	str	r1, [r3, #0]
 8009d48:	e002      	b.n	8009d50 <_printf_i+0x19c>
 8009d4a:	066a      	lsls	r2, r5, #25
 8009d4c:	d5fb      	bpl.n	8009d46 <_printf_i+0x192>
 8009d4e:	8019      	strh	r1, [r3, #0]
 8009d50:	2300      	movs	r3, #0
 8009d52:	6123      	str	r3, [r4, #16]
 8009d54:	4665      	mov	r5, ip
 8009d56:	e7b9      	b.n	8009ccc <_printf_i+0x118>
 8009d58:	6813      	ldr	r3, [r2, #0]
 8009d5a:	1d19      	adds	r1, r3, #4
 8009d5c:	6011      	str	r1, [r2, #0]
 8009d5e:	681d      	ldr	r5, [r3, #0]
 8009d60:	6862      	ldr	r2, [r4, #4]
 8009d62:	2100      	movs	r1, #0
 8009d64:	4628      	mov	r0, r5
 8009d66:	f7f6 fa83 	bl	8000270 <memchr>
 8009d6a:	b108      	cbz	r0, 8009d70 <_printf_i+0x1bc>
 8009d6c:	1b40      	subs	r0, r0, r5
 8009d6e:	6060      	str	r0, [r4, #4]
 8009d70:	6863      	ldr	r3, [r4, #4]
 8009d72:	6123      	str	r3, [r4, #16]
 8009d74:	2300      	movs	r3, #0
 8009d76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d7a:	e7a7      	b.n	8009ccc <_printf_i+0x118>
 8009d7c:	6923      	ldr	r3, [r4, #16]
 8009d7e:	462a      	mov	r2, r5
 8009d80:	4639      	mov	r1, r7
 8009d82:	4630      	mov	r0, r6
 8009d84:	47c0      	blx	r8
 8009d86:	3001      	adds	r0, #1
 8009d88:	d0aa      	beq.n	8009ce0 <_printf_i+0x12c>
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	079b      	lsls	r3, r3, #30
 8009d8e:	d413      	bmi.n	8009db8 <_printf_i+0x204>
 8009d90:	68e0      	ldr	r0, [r4, #12]
 8009d92:	9b03      	ldr	r3, [sp, #12]
 8009d94:	4298      	cmp	r0, r3
 8009d96:	bfb8      	it	lt
 8009d98:	4618      	movlt	r0, r3
 8009d9a:	e7a3      	b.n	8009ce4 <_printf_i+0x130>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	464a      	mov	r2, r9
 8009da0:	4639      	mov	r1, r7
 8009da2:	4630      	mov	r0, r6
 8009da4:	47c0      	blx	r8
 8009da6:	3001      	adds	r0, #1
 8009da8:	d09a      	beq.n	8009ce0 <_printf_i+0x12c>
 8009daa:	3501      	adds	r5, #1
 8009dac:	68e3      	ldr	r3, [r4, #12]
 8009dae:	9a03      	ldr	r2, [sp, #12]
 8009db0:	1a9b      	subs	r3, r3, r2
 8009db2:	42ab      	cmp	r3, r5
 8009db4:	dcf2      	bgt.n	8009d9c <_printf_i+0x1e8>
 8009db6:	e7eb      	b.n	8009d90 <_printf_i+0x1dc>
 8009db8:	2500      	movs	r5, #0
 8009dba:	f104 0919 	add.w	r9, r4, #25
 8009dbe:	e7f5      	b.n	8009dac <_printf_i+0x1f8>
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d1ac      	bne.n	8009d1e <_printf_i+0x16a>
 8009dc4:	7803      	ldrb	r3, [r0, #0]
 8009dc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dce:	e76c      	b.n	8009caa <_printf_i+0xf6>
 8009dd0:	0800a04b 	.word	0x0800a04b
 8009dd4:	0800a05c 	.word	0x0800a05c

08009dd8 <_sbrk_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4c06      	ldr	r4, [pc, #24]	; (8009df4 <_sbrk_r+0x1c>)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4605      	mov	r5, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	6023      	str	r3, [r4, #0]
 8009de4:	f7f9 f90a 	bl	8002ffc <_sbrk>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_sbrk_r+0x1a>
 8009dec:	6823      	ldr	r3, [r4, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_sbrk_r+0x1a>
 8009df0:	602b      	str	r3, [r5, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	2005aa14 	.word	0x2005aa14

08009df8 <__ascii_wctomb>:
 8009df8:	b149      	cbz	r1, 8009e0e <__ascii_wctomb+0x16>
 8009dfa:	2aff      	cmp	r2, #255	; 0xff
 8009dfc:	bf85      	ittet	hi
 8009dfe:	238a      	movhi	r3, #138	; 0x8a
 8009e00:	6003      	strhi	r3, [r0, #0]
 8009e02:	700a      	strbls	r2, [r1, #0]
 8009e04:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e08:	bf98      	it	ls
 8009e0a:	2001      	movls	r0, #1
 8009e0c:	4770      	bx	lr
 8009e0e:	4608      	mov	r0, r1
 8009e10:	4770      	bx	lr

08009e12 <memcpy>:
 8009e12:	b510      	push	{r4, lr}
 8009e14:	1e43      	subs	r3, r0, #1
 8009e16:	440a      	add	r2, r1
 8009e18:	4291      	cmp	r1, r2
 8009e1a:	d100      	bne.n	8009e1e <memcpy+0xc>
 8009e1c:	bd10      	pop	{r4, pc}
 8009e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e26:	e7f7      	b.n	8009e18 <memcpy+0x6>

08009e28 <memmove>:
 8009e28:	4288      	cmp	r0, r1
 8009e2a:	b510      	push	{r4, lr}
 8009e2c:	eb01 0302 	add.w	r3, r1, r2
 8009e30:	d807      	bhi.n	8009e42 <memmove+0x1a>
 8009e32:	1e42      	subs	r2, r0, #1
 8009e34:	4299      	cmp	r1, r3
 8009e36:	d00a      	beq.n	8009e4e <memmove+0x26>
 8009e38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e3c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e40:	e7f8      	b.n	8009e34 <memmove+0xc>
 8009e42:	4283      	cmp	r3, r0
 8009e44:	d9f5      	bls.n	8009e32 <memmove+0xa>
 8009e46:	1881      	adds	r1, r0, r2
 8009e48:	1ad2      	subs	r2, r2, r3
 8009e4a:	42d3      	cmn	r3, r2
 8009e4c:	d100      	bne.n	8009e50 <memmove+0x28>
 8009e4e:	bd10      	pop	{r4, pc}
 8009e50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e54:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e58:	e7f7      	b.n	8009e4a <memmove+0x22>

08009e5a <__malloc_lock>:
 8009e5a:	4770      	bx	lr

08009e5c <__malloc_unlock>:
 8009e5c:	4770      	bx	lr

08009e5e <_realloc_r>:
 8009e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e60:	4607      	mov	r7, r0
 8009e62:	4614      	mov	r4, r2
 8009e64:	460e      	mov	r6, r1
 8009e66:	b921      	cbnz	r1, 8009e72 <_realloc_r+0x14>
 8009e68:	4611      	mov	r1, r2
 8009e6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e6e:	f7ff bc7f 	b.w	8009770 <_malloc_r>
 8009e72:	b922      	cbnz	r2, 8009e7e <_realloc_r+0x20>
 8009e74:	f7ff fc2e 	bl	80096d4 <_free_r>
 8009e78:	4625      	mov	r5, r4
 8009e7a:	4628      	mov	r0, r5
 8009e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e7e:	f000 f814 	bl	8009eaa <_malloc_usable_size_r>
 8009e82:	42a0      	cmp	r0, r4
 8009e84:	d20f      	bcs.n	8009ea6 <_realloc_r+0x48>
 8009e86:	4621      	mov	r1, r4
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7ff fc71 	bl	8009770 <_malloc_r>
 8009e8e:	4605      	mov	r5, r0
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d0f2      	beq.n	8009e7a <_realloc_r+0x1c>
 8009e94:	4631      	mov	r1, r6
 8009e96:	4622      	mov	r2, r4
 8009e98:	f7ff ffbb 	bl	8009e12 <memcpy>
 8009e9c:	4631      	mov	r1, r6
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f7ff fc18 	bl	80096d4 <_free_r>
 8009ea4:	e7e9      	b.n	8009e7a <_realloc_r+0x1c>
 8009ea6:	4635      	mov	r5, r6
 8009ea8:	e7e7      	b.n	8009e7a <_realloc_r+0x1c>

08009eaa <_malloc_usable_size_r>:
 8009eaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009eae:	1f18      	subs	r0, r3, #4
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	bfbc      	itt	lt
 8009eb4:	580b      	ldrlt	r3, [r1, r0]
 8009eb6:	18c0      	addlt	r0, r0, r3
 8009eb8:	4770      	bx	lr
	...

08009ebc <_init>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	bf00      	nop
 8009ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec2:	bc08      	pop	{r3}
 8009ec4:	469e      	mov	lr, r3
 8009ec6:	4770      	bx	lr

08009ec8 <_fini>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	bf00      	nop
 8009ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ece:	bc08      	pop	{r3}
 8009ed0:	469e      	mov	lr, r3
 8009ed2:	4770      	bx	lr
