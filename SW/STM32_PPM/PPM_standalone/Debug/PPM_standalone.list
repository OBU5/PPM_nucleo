
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3e0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800a5e0  0800a5e0  0001a5e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8a8  0800a8a8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8a8  0800a8a8  0001a8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8b0  0800a8b0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8b0  0800a8b0  0001a8b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8b4  0800a8b4  0001a8b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a8b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005a7f8  200001dc  0800aa94  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2005a9d4  0800aa94  0002a9d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018368  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000032a0  00000000  00000000  00038572  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001678  00000000  00000000  0003b818  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001518  00000000  00000000  0003ce90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a3fb  00000000  00000000  0003e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012560  00000000  00000000  000687a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00103d20  00000000  00000000  0007ad03  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017ea23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062d0  00000000  00000000  0017eaa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a5c8 	.word	0x0800a5c8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	0800a5c8 	.word	0x0800a5c8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <parseText>:

uint8_t receivedCharIndex;



int parseText(UART_HandleTypeDef huart) {
 8000610:	b084      	sub	sp, #16
 8000612:	b5b0      	push	{r4, r5, r7, lr}
 8000614:	b0a6      	sub	sp, #152	; 0x98
 8000616:	af00      	add	r7, sp, #0
 8000618:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800061c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//-------------------------------------------------------------------------------------
	//check if there is character "<" and ">"
	//-------------------------------------------------------------------------------------
	state.newDataInBuffer = 0;
 8000620:	4bce      	ldr	r3, [pc, #824]	; (800095c <parseText+0x34c>)
 8000622:	2200      	movs	r2, #0
 8000624:	759a      	strb	r2, [r3, #22]

	uint8_t i, indexOfHead, indexOfTail, tailCount = 0, headCount = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 800062c:	2300      	movs	r3, #0
 800062e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	char msg_buffers[80];
	char receivedCommand[50];

	for (i = 0; i < strlen(receivedCommand); i++) {
 8000632:	2300      	movs	r3, #0
 8000634:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000638:	e00c      	b.n	8000654 <parseText+0x44>
		receivedCommand[i] = '\0';
 800063a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800063e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000642:	4413      	add	r3, r2
 8000644:	2200      	movs	r2, #0
 8000646:	f803 2c98 	strb.w	r2, [r3, #-152]
	for (i = 0; i < strlen(receivedCommand); i++) {
 800064a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800064e:	3301      	adds	r3, #1
 8000650:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000654:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8000658:	463b      	mov	r3, r7
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fdfa 	bl	8000254 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	429c      	cmp	r4, r3
 8000664:	d3e9      	bcc.n	800063a <parseText+0x2a>
	}
	for (i = 0; i < strlen(msg_buffers); i++) {
 8000666:	2300      	movs	r3, #0
 8000668:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800066c:	e00c      	b.n	8000688 <parseText+0x78>
		msg_buffers[i] = '\0';
 800066e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000672:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000676:	4413      	add	r3, r2
 8000678:	2200      	movs	r2, #0
 800067a:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (i = 0; i < strlen(msg_buffers); i++) {
 800067e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000682:	3301      	adds	r3, #1
 8000684:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000688:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 800068c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fddf 	bl	8000254 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	429c      	cmp	r4, r3
 800069a:	d3e8      	bcc.n	800066e <parseText+0x5e>
	}
	for (i = 0; i < strlen(receivedChars); i++) {
 800069c:	2300      	movs	r3, #0
 800069e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80006a2:	e023      	b.n	80006ec <parseText+0xdc>
		//head of the message
		if (receivedChars[i] == '<') {
 80006a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006a8:	4aad      	ldr	r2, [pc, #692]	; (8000960 <parseText+0x350>)
 80006aa:	5cd3      	ldrb	r3, [r2, r3]
 80006ac:	2b3c      	cmp	r3, #60	; 0x3c
 80006ae:	d109      	bne.n	80006c4 <parseText+0xb4>
			indexOfHead = i;
 80006b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006b4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			headCount++;
 80006b8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80006bc:	3301      	adds	r3, #1
 80006be:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80006c2:	e00e      	b.n	80006e2 <parseText+0xd2>
		}
		//tail of the message
		else if (receivedChars[i] == '>') {
 80006c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006c8:	4aa5      	ldr	r2, [pc, #660]	; (8000960 <parseText+0x350>)
 80006ca:	5cd3      	ldrb	r3, [r2, r3]
 80006cc:	2b3e      	cmp	r3, #62	; 0x3e
 80006ce:	d108      	bne.n	80006e2 <parseText+0xd2>
			indexOfTail = i;
 80006d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006d4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			tailCount++;
 80006d8:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80006dc:	3301      	adds	r3, #1
 80006de:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	for (i = 0; i < strlen(receivedChars); i++) {
 80006e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006e6:	3301      	adds	r3, #1
 80006e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80006ec:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 80006f0:	489b      	ldr	r0, [pc, #620]	; (8000960 <parseText+0x350>)
 80006f2:	f7ff fdaf 	bl	8000254 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	429c      	cmp	r4, r3
 80006fa:	d3d3      	bcc.n	80006a4 <parseText+0x94>
		}
	}
	//received message is not complete
	if (headCount > tailCount) {
 80006fc:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8000700:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000704:	429a      	cmp	r2, r3
 8000706:	d901      	bls.n	800070c <parseText+0xfc>
		return 0;
 8000708:	2300      	movs	r3, #0
 800070a:	e1d4      	b.n	8000ab6 <parseText+0x4a6>
	}
	// received message is complete ->
	else if (headCount == tailCount && headCount > 0 && tailCount > 0) {
 800070c:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8000710:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000714:	429a      	cmp	r2, r3
 8000716:	d15d      	bne.n	80007d4 <parseText+0x1c4>
 8000718:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800071c:	2b00      	cmp	r3, #0
 800071e:	d059      	beq.n	80007d4 <parseText+0x1c4>
 8000720:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000724:	2b00      	cmp	r3, #0
 8000726:	d055      	beq.n	80007d4 <parseText+0x1c4>
		sprintf(msg_buffers, "<INFO:Message accepted>\n");
 8000728:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800072c:	4a8d      	ldr	r2, [pc, #564]	; (8000964 <parseText+0x354>)
 800072e:	461c      	mov	r4, r3
 8000730:	4615      	mov	r5, r2
 8000732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000736:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073a:	c403      	stmia	r4!, {r0, r1}
 800073c:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800073e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fd86 	bl	8000254 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8000758:	f008 fa38 	bl	8008bcc <HAL_UART_Transmit>
	else if (headCount == tailCount && headCount > 0 && tailCount > 0) {
 800075c:	bf00      	nop
	}

	//-------------------------------------------------------------------------------------
	// get string between special chars (Only if specialCharCount == 2)
	//-------------------------------------------------------------------------------------
	strncpy(receivedCommand, receivedChars + indexOfHead + 1, indexOfTail - indexOfHead - 1);
 800075e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000762:	3301      	adds	r3, #1
 8000764:	4a7e      	ldr	r2, [pc, #504]	; (8000960 <parseText+0x350>)
 8000766:	1899      	adds	r1, r3, r2
 8000768:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 800076c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	3b01      	subs	r3, #1
 8000774:	461a      	mov	r2, r3
 8000776:	463b      	mov	r3, r7
 8000778:	4618      	mov	r0, r3
 800077a:	f009 fa23 	bl	8009bc4 <strncpy>
	receivedCommand[indexOfTail - indexOfHead - 1] = '\0';
 800077e:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8000782:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	3b01      	subs	r3, #1
 800078a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800078e:	4413      	add	r3, r2
 8000790:	2200      	movs	r2, #0
 8000792:	f803 2c98 	strb.w	r2, [r3, #-152]

	char *command = strtok(receivedCommand, ":");
 8000796:	463b      	mov	r3, r7
 8000798:	4973      	ldr	r1, [pc, #460]	; (8000968 <parseText+0x358>)
 800079a:	4618      	mov	r0, r3
 800079c:	f009 fa28 	bl	8009bf0 <strtok>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	char *method = strtok(NULL, ":");
 80007a6:	4970      	ldr	r1, [pc, #448]	; (8000968 <parseText+0x358>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f009 fa21 	bl	8009bf0 <strtok>
 80007ae:	4603      	mov	r3, r0
 80007b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	char *count = strtok(NULL, ":");
 80007b4:	496c      	ldr	r1, [pc, #432]	; (8000968 <parseText+0x358>)
 80007b6:	2000      	movs	r0, #0
 80007b8:	f009 fa1a 	bl	8009bf0 <strtok>
 80007bc:	4603      	mov	r3, r0
 80007be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	//-------------------------------------------------------------------------------------
	// Perform action based on received message
	//-------------------------------------------------------------------------------------

	//<IDN> - identification
	if (strcmp(command, "IDN") == 0) {
 80007c2:	496a      	ldr	r1, [pc, #424]	; (800096c <parseText+0x35c>)
 80007c4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80007c8:	f7ff fd3a 	bl	8000240 <strcmp>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d12d      	bne.n	800082e <parseText+0x21e>
 80007d2:	e00b      	b.n	80007ec <parseText+0x1dc>
	else if ((headCount < tailCount)) {
 80007d4:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 80007d8:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80007dc:	429a      	cmp	r2, r3
 80007de:	d203      	bcs.n	80007e8 <parseText+0x1d8>
		clearReceivedCharsBuffer(); // receivedChars needs to be cleared
 80007e0:	f000 fb4c 	bl	8000e7c <clearReceivedCharsBuffer>
		return 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e166      	b.n	8000ab6 <parseText+0x4a6>
		return 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	e164      	b.n	8000ab6 <parseText+0x4a6>
		sprintf(msg_buffers, "<INFO:This is proton precession magnetometer - version 1>\n");
 80007ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007f0:	4a5f      	ldr	r2, [pc, #380]	; (8000970 <parseText+0x360>)
 80007f2:	461c      	mov	r4, r3
 80007f4:	4615      	mov	r5, r2
 80007f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000802:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000806:	c403      	stmia	r4!, {r0, r1}
 8000808:	8022      	strh	r2, [r4, #0]
 800080a:	3402      	adds	r4, #2
 800080c:	0c13      	lsrs	r3, r2, #16
 800080e:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000810:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fd1d 	bl	8000254 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b29a      	uxth	r2, r3
 800081e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 800082a:	f008 f9cf 	bl	8008bcc <HAL_UART_Transmit>
	}

	//<IDLE> - initialization state
	if (strcmp(command, "IDLE") == 0) {
 800082e:	4951      	ldr	r1, [pc, #324]	; (8000974 <parseText+0x364>)
 8000830:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000834:	f7ff fd04 	bl	8000240 <strcmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <parseText+0x232>
		setStateToIdle();
 800083e:	f001 ff3b 	bl	80026b8 <setStateToIdle>
	}
	//<DEFAULT> - initialization state
	if (strcmp(command, "DEFAULT") == 0) {
 8000842:	494d      	ldr	r1, [pc, #308]	; (8000978 <parseText+0x368>)
 8000844:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000848:	f7ff fcfa 	bl	8000240 <strcmp>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <parseText+0x246>
		setStateToDefault();
 8000852:	f001 fe8f 	bl	8002574 <setStateToDefault>
	}
	//<SET:parameter:value>
	if (strcmp(command, "SET") == 0) {
 8000856:	4949      	ldr	r1, [pc, #292]	; (800097c <parseText+0x36c>)
 8000858:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800085c:	f7ff fcf0 	bl	8000240 <strcmp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d105      	bne.n	8000872 <parseText+0x262>
		//polarization time
		if (strcmp(method, "polT") == 0) {
 8000866:	4946      	ldr	r1, [pc, #280]	; (8000980 <parseText+0x370>)
 8000868:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800086c:	f7ff fce8 	bl	8000240 <strcmp>
 8000870:	e11f      	b.n	8000ab2 <parseText+0x4a2>
			//convert received string to integer
			//polarizationTime = atoi(count);
		}
	}
	//<MEAS:method:count>
	else if (strcmp(command, "MEAS") == 0) {
 8000872:	4944      	ldr	r1, [pc, #272]	; (8000984 <parseText+0x374>)
 8000874:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000878:	f7ff fce2 	bl	8000240 <strcmp>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	f040 8117 	bne.w	8000ab2 <parseText+0x4a2>
		//external ADC only
		if (strcmp(method, "extADC") == 0) {
 8000884:	4940      	ldr	r1, [pc, #256]	; (8000988 <parseText+0x378>)
 8000886:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800088a:	f7ff fcd9 	bl	8000240 <strcmp>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d110      	bne.n	80008b6 <parseText+0x2a6>
			state.extAdcSetState = 1;
 8000894:	4b31      	ldr	r3, [pc, #196]	; (800095c <parseText+0x34c>)
 8000896:	2201      	movs	r2, #1
 8000898:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 0;
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <parseText+0x34c>)
 800089c:	2200      	movs	r2, #0
 800089e:	72da      	strb	r2, [r3, #11]
			state.compSetState = 0;
 80008a0:	4b2e      	ldr	r3, [pc, #184]	; (800095c <parseText+0x34c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <parseText+0x34c>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 80008ac:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80008b0:	f001 fdd6 	bl	8002460 <setMeasurementPeriod>
 80008b4:	e0d4      	b.n	8000a60 <parseText+0x450>
		}
		//internal ADC only
		else if (strcmp(method, "intADC") == 0) {
 80008b6:	4935      	ldr	r1, [pc, #212]	; (800098c <parseText+0x37c>)
 80008b8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80008bc:	f7ff fcc0 	bl	8000240 <strcmp>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d110      	bne.n	80008e8 <parseText+0x2d8>
			state.extAdcSetState = 0;
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <parseText+0x34c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <parseText+0x34c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	72da      	strb	r2, [r3, #11]
			state.compSetState = 0;
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <parseText+0x34c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <parseText+0x34c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 80008de:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80008e2:	f001 fdbd 	bl	8002460 <setMeasurementPeriod>
 80008e6:	e0bb      	b.n	8000a60 <parseText+0x450>
		}
		//comparator only
		else if (strcmp(method, "comp") == 0) {
 80008e8:	4929      	ldr	r1, [pc, #164]	; (8000990 <parseText+0x380>)
 80008ea:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80008ee:	f7ff fca7 	bl	8000240 <strcmp>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d110      	bne.n	800091a <parseText+0x30a>
			state.extAdcSetState = 0;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <parseText+0x34c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 0;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <parseText+0x34c>)
 8000900:	2200      	movs	r2, #0
 8000902:	72da      	strb	r2, [r3, #11]
			state.compSetState = 1;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <parseText+0x34c>)
 8000906:	2201      	movs	r2, #1
 8000908:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <parseText+0x34c>)
 800090c:	2201      	movs	r2, #1
 800090e:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(5000);
 8000910:	f241 3088 	movw	r0, #5000	; 0x1388
 8000914:	f001 fda4 	bl	8002460 <setMeasurementPeriod>
 8000918:	e0a2      	b.n	8000a60 <parseText+0x450>
		}
		//external ADC + internal ADC
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 800091a:	491e      	ldr	r1, [pc, #120]	; (8000994 <parseText+0x384>)
 800091c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000920:	f7ff fc8e 	bl	8000240 <strcmp>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d007      	beq.n	800093a <parseText+0x32a>
 800092a:	491b      	ldr	r1, [pc, #108]	; (8000998 <parseText+0x388>)
 800092c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000930:	f7ff fc86 	bl	8000240 <strcmp>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d130      	bne.n	800099c <parseText+0x38c>
			state.extAdcSetState = 1;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <parseText+0x34c>)
 800093c:	2201      	movs	r2, #1
 800093e:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <parseText+0x34c>)
 8000942:	2201      	movs	r2, #1
 8000944:	72da      	strb	r2, [r3, #11]
			state.compSetState = 0;
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <parseText+0x34c>)
 8000948:	2200      	movs	r2, #0
 800094a:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <parseText+0x34c>)
 800094e:	2201      	movs	r2, #1
 8000950:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(13000);
 8000952:	f243 20c8 	movw	r0, #13000	; 0x32c8
 8000956:	f001 fd83 	bl	8002460 <setMeasurementPeriod>
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 800095a:	e081      	b.n	8000a60 <parseText+0x450>
 800095c:	2002f1a8 	.word	0x2002f1a8
 8000960:	2002f1cc 	.word	0x2002f1cc
 8000964:	0800a5e0 	.word	0x0800a5e0
 8000968:	0800a5fc 	.word	0x0800a5fc
 800096c:	0800a600 	.word	0x0800a600
 8000970:	0800a604 	.word	0x0800a604
 8000974:	0800a640 	.word	0x0800a640
 8000978:	0800a648 	.word	0x0800a648
 800097c:	0800a650 	.word	0x0800a650
 8000980:	0800a654 	.word	0x0800a654
 8000984:	0800a65c 	.word	0x0800a65c
 8000988:	0800a664 	.word	0x0800a664
 800098c:	0800a66c 	.word	0x0800a66c
 8000990:	0800a674 	.word	0x0800a674
 8000994:	0800a67c 	.word	0x0800a67c
 8000998:	0800a68c 	.word	0x0800a68c
		}
		//external ADC + comparator
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 800099c:	4949      	ldr	r1, [pc, #292]	; (8000ac4 <parseText+0x4b4>)
 800099e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80009a2:	f7ff fc4d 	bl	8000240 <strcmp>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d007      	beq.n	80009bc <parseText+0x3ac>
 80009ac:	4946      	ldr	r1, [pc, #280]	; (8000ac8 <parseText+0x4b8>)
 80009ae:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80009b2:	f7ff fc45 	bl	8000240 <strcmp>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d110      	bne.n	80009de <parseText+0x3ce>
			state.extAdcSetState = 1;
 80009bc:	4b43      	ldr	r3, [pc, #268]	; (8000acc <parseText+0x4bc>)
 80009be:	2201      	movs	r2, #1
 80009c0:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 0;
 80009c2:	4b42      	ldr	r3, [pc, #264]	; (8000acc <parseText+0x4bc>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	72da      	strb	r2, [r3, #11]
			state.compSetState = 1;
 80009c8:	4b40      	ldr	r3, [pc, #256]	; (8000acc <parseText+0x4bc>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 80009ce:	4b3f      	ldr	r3, [pc, #252]	; (8000acc <parseText+0x4bc>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 80009d4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80009d8:	f001 fd42 	bl	8002460 <setMeasurementPeriod>
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 80009dc:	e040      	b.n	8000a60 <parseText+0x450>
		}
		//internal ADC + comparator
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 80009de:	493c      	ldr	r1, [pc, #240]	; (8000ad0 <parseText+0x4c0>)
 80009e0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80009e4:	f7ff fc2c 	bl	8000240 <strcmp>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d007      	beq.n	80009fe <parseText+0x3ee>
 80009ee:	4939      	ldr	r1, [pc, #228]	; (8000ad4 <parseText+0x4c4>)
 80009f0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80009f4:	f7ff fc24 	bl	8000240 <strcmp>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d110      	bne.n	8000a20 <parseText+0x410>
			state.extAdcSetState = 0;
 80009fe:	4b33      	ldr	r3, [pc, #204]	; (8000acc <parseText+0x4bc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <parseText+0x4bc>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	72da      	strb	r2, [r3, #11]
			state.compSetState = 1;
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <parseText+0x4bc>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 8000a10:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <parseText+0x4bc>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 8000a16:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000a1a:	f001 fd21 	bl	8002460 <setMeasurementPeriod>
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 8000a1e:	e01f      	b.n	8000a60 <parseText+0x450>
		}
		//external ADC + internal ADC + comparator
		else if ((strcmp(method, "extADC+intADC+comp") == 0) || (strcmp(method, "intADC+extADC+comp") == 0)) {
 8000a20:	492d      	ldr	r1, [pc, #180]	; (8000ad8 <parseText+0x4c8>)
 8000a22:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000a26:	f7ff fc0b 	bl	8000240 <strcmp>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d007      	beq.n	8000a40 <parseText+0x430>
 8000a30:	492a      	ldr	r1, [pc, #168]	; (8000adc <parseText+0x4cc>)
 8000a32:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000a36:	f7ff fc03 	bl	8000240 <strcmp>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10f      	bne.n	8000a60 <parseText+0x450>
			state.compSetState = 1;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <parseText+0x4bc>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	731a      	strb	r2, [r3, #12]
			state.extAdcSetState = 1;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <parseText+0x4bc>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <parseText+0x4bc>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <parseText+0x4bc>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(13000);
 8000a58:	f243 20c8 	movw	r0, #13000	; 0x32c8
 8000a5c:	f001 fd00 	bl	8002460 <setMeasurementPeriod>
		} else /* default: */
		{

		}
		if (strcmp(count, "INF") == 0) {
 8000a60:	491f      	ldr	r1, [pc, #124]	; (8000ae0 <parseText+0x4d0>)
 8000a62:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000a66:	f7ff fbeb 	bl	8000240 <strcmp>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d104      	bne.n	8000a7a <parseText+0x46a>
			state.setMeasurements = -1;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <parseText+0x4bc>)
 8000a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a76:	821a      	strh	r2, [r3, #16]
 8000a78:	e01b      	b.n	8000ab2 <parseText+0x4a2>
		} else if (strcmp(count, "") == 0) {
 8000a7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d103      	bne.n	8000a8c <parseText+0x47c>
			state.setMeasurements = 1;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <parseText+0x4bc>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	821a      	strh	r2, [r3, #16]
 8000a8a:	e012      	b.n	8000ab2 <parseText+0x4a2>
		} else if (strcmp(count, "onSync") == 0) {
 8000a8c:	4915      	ldr	r1, [pc, #84]	; (8000ae4 <parseText+0x4d4>)
 8000a8e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000a92:	f7ff fbd5 	bl	8000240 <strcmp>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <parseText+0x492>
			setStateToMeasureOnSync();
 8000a9c:	f001 fdb2 	bl	8002604 <setStateToMeasureOnSync>
 8000aa0:	e007      	b.n	8000ab2 <parseText+0x4a2>
		}

		else {
			state.setMeasurements = atoi(count);
 8000aa2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000aa6:	f009 f82a 	bl	8009afe <atoi>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <parseText+0x4bc>)
 8000ab0:	821a      	strh	r2, [r3, #16]
	}
	/* more else if clauses */
	else /* default: */
	{
	}
	clearReceivedCharsBuffer();
 8000ab2:	f000 f9e3 	bl	8000e7c <clearReceivedCharsBuffer>
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3798      	adds	r7, #152	; 0x98
 8000aba:	46bd      	mov	sp, r7
 8000abc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr
 8000ac4:	0800a69c 	.word	0x0800a69c
 8000ac8:	0800a6a8 	.word	0x0800a6a8
 8000acc:	2002f1a8 	.word	0x2002f1a8
 8000ad0:	0800a6b4 	.word	0x0800a6b4
 8000ad4:	0800a6c0 	.word	0x0800a6c0
 8000ad8:	0800a6cc 	.word	0x0800a6cc
 8000adc:	0800a6e0 	.word	0x0800a6e0
 8000ae0:	0800a6f4 	.word	0x0800a6f4
 8000ae4:	0800a6f8 	.word	0x0800a6f8

08000ae8 <sendMeasuredData>:


void sendMeasuredData(UART_HandleTypeDef huart) {
 8000ae8:	b084      	sub	sp, #16
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b094      	sub	sp, #80	; 0x50
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	f107 0c58 	add.w	ip, r7, #88	; 0x58
 8000af4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char msg_freq[16];
	char msg_buffers[50];
	uint16_t adc = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int i = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c
	if ((state.extAdcReadyToSend == 1)) {
 8000b02:	4bab      	ldr	r3, [pc, #684]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000b04:	785b      	ldrb	r3, [r3, #1]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d175      	bne.n	8000bf6 <sendMeasuredData+0x10e>
		sprintf(msg_buffers, "<MEAS:%u:extADC:\n", state.index);
 8000b0a:	4ba9      	ldr	r3, [pc, #676]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000b0c:	69da      	ldr	r2, [r3, #28]
 8000b0e:	463b      	mov	r3, r7
 8000b10:	49a8      	ldr	r1, [pc, #672]	; (8000db4 <sendMeasuredData+0x2cc>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f009 f836 	bl	8009b84 <siprintf>
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fb9a 	bl	8000254 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4639      	mov	r1, r7
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000b2e:	f008 f84d 	bl	8008bcc <HAL_UART_Transmit>

		// first buffer

		for (i = 0; i < samplesPerPeriod; i++) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b36:	e01c      	b.n	8000b72 <sendMeasuredData+0x8a>
			adc = (buffer_extAdc_1.uint16[i]);
 8000b38:	4a9f      	ldr	r2, [pc, #636]	; (8000db8 <sendMeasuredData+0x2d0>)
 8000b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8000b44:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000b48:	463b      	mov	r3, r7
 8000b4a:	499c      	ldr	r1, [pc, #624]	; (8000dbc <sendMeasuredData+0x2d4>)
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f009 f819 	bl	8009b84 <siprintf>
			HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000b52:	463b      	mov	r3, r7
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb7d 	bl	8000254 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4639      	mov	r1, r7
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000b68:	f008 f830 	bl	8008bcc <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8000b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b6e:	3301      	adds	r3, #1
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b74:	f64a 4243 	movw	r2, #44099	; 0xac43
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	dddd      	ble.n	8000b38 <sendMeasuredData+0x50>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b80:	e01c      	b.n	8000bbc <sendMeasuredData+0xd4>
			adc = (buffer_extAdc_2.uint16[i]);
 8000b82:	4a8f      	ldr	r2, [pc, #572]	; (8000dc0 <sendMeasuredData+0x2d8>)
 8000b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b8a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8000b8e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000b92:	463b      	mov	r3, r7
 8000b94:	4989      	ldr	r1, [pc, #548]	; (8000dbc <sendMeasuredData+0x2d4>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f008 fff4 	bl	8009b84 <siprintf>
			HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fb58 	bl	8000254 <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4639      	mov	r1, r7
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000bb2:	f008 f80b 	bl	8008bcc <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8000bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb8:	3301      	adds	r3, #1
 8000bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bbe:	f64a 4243 	movw	r2, #44099	; 0xac43
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	dddd      	ble.n	8000b82 <sendMeasuredData+0x9a>
		}
		sprintf(msg_buffers, ">\n");
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4a7e      	ldr	r2, [pc, #504]	; (8000dc4 <sendMeasuredData+0x2dc>)
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	4611      	mov	r1, r2
 8000bce:	8019      	strh	r1, [r3, #0]
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	0c12      	lsrs	r2, r2, #16
 8000bd4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fb3b 	bl	8000254 <strlen>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4639      	mov	r1, r7
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000bec:	f007 ffee 	bl	8008bcc <HAL_UART_Transmit>
		state.extAdcReadyToSend = 0;
 8000bf0:	4b6f      	ldr	r3, [pc, #444]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	705a      	strb	r2, [r3, #1]
	}

	if ((state.intAdcReadyToSend == 1)) {
 8000bf6:	4b6e      	ldr	r3, [pc, #440]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000bf8:	789b      	ldrb	r3, [r3, #2]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d175      	bne.n	8000cea <sendMeasuredData+0x202>
		sprintf(msg_buffers, "<MEAS:%u:intADC:\n", state.index);
 8000bfe:	4b6c      	ldr	r3, [pc, #432]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000c00:	69da      	ldr	r2, [r3, #28]
 8000c02:	463b      	mov	r3, r7
 8000c04:	4970      	ldr	r1, [pc, #448]	; (8000dc8 <sendMeasuredData+0x2e0>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f008 ffbc 	bl	8009b84 <siprintf>
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fb20 	bl	8000254 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4639      	mov	r1, r7
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000c22:	f007 ffd3 	bl	8008bcc <HAL_UART_Transmit>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c2a:	e01c      	b.n	8000c66 <sendMeasuredData+0x17e>
			adc = (buffer_intAdc_1.uint16[i]);
 8000c2c:	4a67      	ldr	r2, [pc, #412]	; (8000dcc <sendMeasuredData+0x2e4>)
 8000c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8000c38:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	495f      	ldr	r1, [pc, #380]	; (8000dbc <sendMeasuredData+0x2d4>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f008 ff9f 	bl	8009b84 <siprintf>
			HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000c46:	463b      	mov	r3, r7
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fb03 	bl	8000254 <strlen>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4639      	mov	r1, r7
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000c5c:	f007 ffb6 	bl	8008bcc <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8000c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c62:	3301      	adds	r3, #1
 8000c64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c68:	f64a 4243 	movw	r2, #44099	; 0xac43
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	dddd      	ble.n	8000c2c <sendMeasuredData+0x144>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8000c70:	2300      	movs	r3, #0
 8000c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c74:	e01c      	b.n	8000cb0 <sendMeasuredData+0x1c8>
			adc = (buffer_intAdc_2.uint16[i]);
 8000c76:	4a56      	ldr	r2, [pc, #344]	; (8000dd0 <sendMeasuredData+0x2e8>)
 8000c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8000c82:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000c86:	463b      	mov	r3, r7
 8000c88:	494c      	ldr	r1, [pc, #304]	; (8000dbc <sendMeasuredData+0x2d4>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f008 ff7a 	bl	8009b84 <siprintf>
			HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000c90:	463b      	mov	r3, r7
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fade 	bl	8000254 <strlen>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000ca6:	f007 ff91 	bl	8008bcc <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8000caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cac:	3301      	adds	r3, #1
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cb2:	f64a 4243 	movw	r2, #44099	; 0xac43
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	dddd      	ble.n	8000c76 <sendMeasuredData+0x18e>
		}
		sprintf(msg_buffers, ">\n");
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4a41      	ldr	r2, [pc, #260]	; (8000dc4 <sendMeasuredData+0x2dc>)
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	8019      	strh	r1, [r3, #0]
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	0c12      	lsrs	r2, r2, #16
 8000cc8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fac1 	bl	8000254 <strlen>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cdc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000ce0:	f007 ff74 	bl	8008bcc <HAL_UART_Transmit>
		state.intAdcReadyToSend = 0;
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	709a      	strb	r2, [r3, #2]
	}

	if ((state.compReadyToSend == 1)) {
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000cec:	78db      	ldrb	r3, [r3, #3]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d156      	bne.n	8000da0 <sendMeasuredData+0x2b8>
		//send frequency
		sprintf(msg_buffers, "<MEAS:%u:comp:\n", state.index);
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000cf4:	69da      	ldr	r2, [r3, #28]
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4936      	ldr	r1, [pc, #216]	; (8000dd4 <sendMeasuredData+0x2ec>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f008 ff42 	bl	8009b84 <siprintf>
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000d00:	463b      	mov	r3, r7
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff faa6 	bl	8000254 <strlen>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000d16:	f007 ff59 	bl	8008bcc <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d1e:	e023      	b.n	8000d68 <sendMeasuredData+0x280>
			uint32_t freq = buffer_comp[i + 1] - buffer_comp[i];
 8000d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a2c      	ldr	r2, [pc, #176]	; (8000dd8 <sendMeasuredData+0x2f0>)
 8000d26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d2a:	492b      	ldr	r1, [pc, #172]	; (8000dd8 <sendMeasuredData+0x2f0>)
 8000d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	647b      	str	r3, [r7, #68]	; 0x44
			sprintf(msg_freq, "%d\n", freq);
 8000d36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d3c:	4927      	ldr	r1, [pc, #156]	; (8000ddc <sendMeasuredData+0x2f4>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f008 ff20 	bl	8009b84 <siprintf>
			HAL_UART_Transmit(&huart, (uint8_t*) msg_freq, strlen(msg_freq), HAL_MAX_DELAY);
 8000d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fa83 	bl	8000254 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000d5e:	f007 ff35 	bl	8008bcc <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 8000d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d64:	3301      	adds	r3, #1
 8000d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d6a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d6e:	dbd7      	blt.n	8000d20 <sendMeasuredData+0x238>
		}
		sprintf(msg_buffers, ">\n");
 8000d70:	463b      	mov	r3, r7
 8000d72:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <sendMeasuredData+0x2dc>)
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	4611      	mov	r1, r2
 8000d78:	8019      	strh	r1, [r3, #0]
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	0c12      	lsrs	r2, r2, #16
 8000d7e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000d80:	463b      	mov	r3, r7
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fa66 	bl	8000254 <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000d96:	f007 ff19 	bl	8008bcc <HAL_UART_Transmit>
		state.compReadyToSend = 0;
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	70da      	strb	r2, [r3, #3]
	}
}
 8000da0:	bf00      	nop
 8000da2:	3750      	adds	r7, #80	; 0x50
 8000da4:	46bd      	mov	sp, r7
 8000da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000daa:	b004      	add	sp, #16
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2002f1a8 	.word	0x2002f1a8
 8000db4:	0800a700 	.word	0x0800a700
 8000db8:	20044abc 	.word	0x20044abc
 8000dbc:	0800a714 	.word	0x0800a714
 8000dc0:	20019920 	.word	0x20019920
 8000dc4:	0800a71c 	.word	0x0800a71c
 8000dc8:	0800a720 	.word	0x0800a720
 8000dcc:	2002f234 	.word	0x2002f234
 8000dd0:	20004098 	.word	0x20004098
 8000dd4:	0800a734 	.word	0x0800a734
 8000dd8:	20000208 	.word	0x20000208
 8000ddc:	0800a744 	.word	0x0800a744

08000de0 <newDataInBuffer>:

int newDataInBuffer() {
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	return (state.newDataInBuffer);
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <newDataInBuffer+0x14>)
 8000de6:	7d9b      	ldrb	r3, [r3, #22]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2002f1a8 	.word	0x2002f1a8

08000df8 <dataReadyToSend>:


int dataReadyToSend() {
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
	return (state.extAdcReadyToSend || state.intAdcReadyToSend || state.compReadyToSend);
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <dataReadyToSend+0x2c>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d107      	bne.n	8000e14 <dataReadyToSend+0x1c>
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <dataReadyToSend+0x2c>)
 8000e06:	789b      	ldrb	r3, [r3, #2]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d103      	bne.n	8000e14 <dataReadyToSend+0x1c>
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <dataReadyToSend+0x2c>)
 8000e0e:	78db      	ldrb	r3, [r3, #3]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <dataReadyToSend+0x20>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <dataReadyToSend+0x22>
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	2002f1a8 	.word	0x2002f1a8

08000e28 <dataReadyToSendAfterMeasurement>:

//data should be sent after measurement only in "mode 1" or when it is the last measurement
int dataReadyToSendAfterMeasurement() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	return (dataReadyToSend() && (lastMeasurement() || state.waitForSync == 1));
 8000e2c:	f7ff ffe4 	bl	8000df8 <dataReadyToSend>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00a      	beq.n	8000e4c <dataReadyToSendAfterMeasurement+0x24>
 8000e36:	f001 fc85 	bl	8002744 <lastMeasurement>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d103      	bne.n	8000e48 <dataReadyToSendAfterMeasurement+0x20>
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <dataReadyToSendAfterMeasurement+0x2c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d101      	bne.n	8000e4c <dataReadyToSendAfterMeasurement+0x24>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e000      	b.n	8000e4e <dataReadyToSendAfterMeasurement+0x26>
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2002f1a8 	.word	0x2002f1a8

08000e58 <dataReadyToSendBeforeMeasurement>:

//data should be sent before measurement only in "mode 0", when it's just right after polarization
int dataReadyToSendBeforeMeasurement() {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	return (dataReadyToSend() && state.waitForSync == 0);
 8000e5c:	f7ff ffcc 	bl	8000df8 <dataReadyToSend>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d005      	beq.n	8000e72 <dataReadyToSendBeforeMeasurement+0x1a>
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <dataReadyToSendBeforeMeasurement+0x20>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <dataReadyToSendBeforeMeasurement+0x1a>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <dataReadyToSendBeforeMeasurement+0x1c>
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2002f1a8 	.word	0x2002f1a8

08000e7c <clearReceivedCharsBuffer>:

void clearReceivedCharsBuffer() {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
	int i = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
	//keep everything in range
	if (receivedCharIndex > 50) {
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <clearReceivedCharsBuffer+0x4c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b32      	cmp	r3, #50	; 0x32
 8000e8c:	d902      	bls.n	8000e94 <clearReceivedCharsBuffer+0x18>
		receivedCharIndex = 50;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <clearReceivedCharsBuffer+0x4c>)
 8000e90:	2232      	movs	r2, #50	; 0x32
 8000e92:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < receivedCharIndex; i++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	e007      	b.n	8000eaa <clearReceivedCharsBuffer+0x2e>
		receivedChars[i] = '\0';
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <clearReceivedCharsBuffer+0x50>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < receivedCharIndex; i++) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <clearReceivedCharsBuffer+0x4c>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	dbf1      	blt.n	8000e9a <clearReceivedCharsBuffer+0x1e>
	}
	receivedCharIndex = 0;
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <clearReceivedCharsBuffer+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	2002f230 	.word	0x2002f230
 8000ecc:	2002f1cc 	.word	0x2002f1cc

08000ed0 <characterReceived>:


void characterReceived(UART_HandleTypeDef huart) {
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	f107 0c08 	add.w	ip, r7, #8
 8000eda:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Receive_IT(&huart, buffer_uart_rx, 1);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4910      	ldr	r1, [pc, #64]	; (8000f24 <characterReceived+0x54>)
 8000ee2:	f107 0008 	add.w	r0, r7, #8
 8000ee6:	f007 ff03 	bl	8008cf0 <HAL_UART_Receive_IT>
	//receivedCharIndex shouldn't exceed 100
	receivedChars[(receivedCharIndex++) % 100] = buffer_uart_rx[0];
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <characterReceived+0x58>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	b2d1      	uxtb	r1, r2
 8000ef2:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <characterReceived+0x58>)
 8000ef4:	7011      	strb	r1, [r2, #0]
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <characterReceived+0x5c>)
 8000ef8:	fba2 1203 	umull	r1, r2, r2, r3
 8000efc:	0952      	lsrs	r2, r2, #5
 8000efe:	2164      	movs	r1, #100	; 0x64
 8000f00:	fb01 f202 	mul.w	r2, r1, r2
 8000f04:	1a9b      	subs	r3, r3, r2
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <characterReceived+0x54>)
 8000f0c:	7819      	ldrb	r1, [r3, #0]
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <characterReceived+0x60>)
 8000f10:	5499      	strb	r1, [r3, r2]
	state.newDataInBuffer = 1;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <characterReceived+0x64>)
 8000f14:	2201      	movs	r2, #1
 8000f16:	759a      	strb	r2, [r3, #22]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr
 8000f24:	20004090 	.word	0x20004090
 8000f28:	2002f230 	.word	0x2002f230
 8000f2c:	51eb851f 	.word	0x51eb851f
 8000f30:	2002f1cc 	.word	0x2002f1cc
 8000f34:	2002f1a8 	.word	0x2002f1a8

08000f38 <delay_us>:
 */

#include "delay.h"
#include"main.h"

void delay_us(uint32_t delay_us) {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <delay_us+0x24>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0);
 8000f46:	bf00      	nop
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <delay_us+0x24>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1fb      	bne.n	8000f48 <delay_us+0x10>
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	2002f1c8 	.word	0x2002f1c8

08000f60 <delay_ms>:

void delay_ms(uint32_t delay_us) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us * 1000;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <delay_ms+0x2c>)
 8000f74:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0);
 8000f76:	bf00      	nop
 8000f78:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <delay_ms+0x2c>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d1fb      	bne.n	8000f78 <delay_ms+0x18>
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	2002f1c8 	.word	0x2002f1c8

08000f90 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d11d      	bne.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x4e>
		if (timeIndex > 0) {
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d004      	beq.n	8000fb4 <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -= 50;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	3b32      	subs	r3, #50	; 0x32
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000fb2:	6013      	str	r3, [r2, #0]
		}
		if (remainingTimeToNextMeasurement > 0) {
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d005      	beq.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x38>
			remainingTimeToNextMeasurement -= 50;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3b32      	subs	r3, #50	; 0x32
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e001      	b.n	8000fcc <HAL_TIM_PeriodElapsedCallback+0x3c>
		} else {
			prepareForPolarizationPhaseIfPossible();
 8000fc8:	f001 fcbc 	bl	8002944 <prepareForPolarizationPhaseIfPossible>
		}
		if (remainingPolarizationTime > 0) {
 8000fcc:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d004      	beq.n	8000fde <HAL_TIM_PeriodElapsedCallback+0x4e>
			remainingPolarizationTime -= 50;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3b32      	subs	r3, #50	; 0x32
 8000fda:	4a06      	ldr	r2, [pc, #24]	; (8000ff4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000fdc:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40000c00 	.word	0x40000c00
 8000fec:	2002f1c8 	.word	0x2002f1c8
 8000ff0:	20004094 	.word	0x20004094
 8000ff4:	2000408c 	.word	0x2000408c

08000ff8 <set_LED1>:

#include "gpio.h"



void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	460b      	mov	r3, r1
 8001004:	71bb      	strb	r3, [r7, #6]
 8001006:	4613      	mov	r3, r2
 8001008:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, G);
 800100a:	79bb      	ldrb	r3, [r7, #6]
 800100c:	461a      	mov	r2, r3
 800100e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001012:	480a      	ldr	r0, [pc, #40]	; (800103c <set_LED1+0x44>)
 8001014:	f003 feaa 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, B);
 8001018:	797b      	ldrb	r3, [r7, #5]
 800101a:	461a      	mov	r2, r3
 800101c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <set_LED1+0x44>)
 8001022:	f003 fea3 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, R);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	461a      	mov	r2, r3
 800102a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800102e:	4803      	ldr	r0, [pc, #12]	; (800103c <set_LED1+0x44>)
 8001030:	f003 fe9c 	bl	8004d6c <HAL_GPIO_WritePin>
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40020c00 	.word	0x40020c00

08001040 <set_LED2>:
void set_LED2(uint8_t val) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val);
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	461a      	mov	r2, r3
 800104e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001052:	4803      	ldr	r0, [pc, #12]	; (8001060 <set_LED2+0x20>)
 8001054:	f003 fe8a 	bl	8004d6c <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40020c00 	.word	0x40020c00

08001064 <set_LED3>:

void set_LED3(uint8_t val) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, val);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	461a      	mov	r2, r3
 8001072:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001076:	4803      	ldr	r0, [pc, #12]	; (8001084 <set_LED3+0x20>)
 8001078:	f003 fe78 	bl	8004d6c <HAL_GPIO_WritePin>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40020c00 	.word	0x40020c00

08001088 <set_LED4>:

void set_LED4(uint8_t val) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, val);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	461a      	mov	r2, r3
 8001096:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <set_LED4+0x20>)
 800109c:	f003 fe66 	bl	8004d6c <HAL_GPIO_WritePin>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40020c00 	.word	0x40020c00

080010ac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
	// change state
	if (GPIO_Pin == BTN1_Pin) {
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	2b80      	cmp	r3, #128	; 0x80
 80010ba:	d102      	bne.n	80010c2 <HAL_GPIO_EXTI_Callback+0x16>
		changeStateMode();
 80010bc:	f001 f9ec 	bl	8002498 <changeStateMode>
	} else if (GPIO_Pin == BTN2_Pin || GPIO_Pin == SYNC_Pin) {
		if (isWaitingForSync()) {
			state.preparedToRunMeasurementPhase = 1;
		}
	}
}
 80010c0:	e00f      	b.n	80010e2 <HAL_GPIO_EXTI_Callback+0x36>
	} else if (GPIO_Pin == BTN2_Pin || GPIO_Pin == SYNC_Pin) {
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_EXTI_Callback+0x26>
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010d0:	d107      	bne.n	80010e2 <HAL_GPIO_EXTI_Callback+0x36>
		if (isWaitingForSync()) {
 80010d2:	f001 fbc1 	bl	8002858 <isWaitingForSync>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HAL_GPIO_EXTI_Callback+0x36>
			state.preparedToRunMeasurementPhase = 1;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GPIO_EXTI_Callback+0x40>)
 80010de:	2201      	movs	r2, #1
 80010e0:	765a      	strb	r2, [r3, #25]
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	2002f1a8 	.word	0x2002f1a8

080010f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b09d      	sub	sp, #116	; 0x74
 80010f4:	af1c      	add	r7, sp, #112	; 0x70
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010f6:	f002 fb5a 	bl	80037ae <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010fa:	f000 f889 	bl	8001210 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010fe:	f000 fea1 	bl	8001e44 <MX_GPIO_Init>
	MX_DMA_Init();
 8001102:	f000 fe65 	bl	8001dd0 <MX_DMA_Init>
	MX_ADC1_Init();
 8001106:	f000 f923 	bl	8001350 <MX_ADC1_Init>
	MX_SPI1_Init();
 800110a:	f000 f9f3 	bl	80014f4 <MX_SPI1_Init>
	MX_TIM1_Init();
 800110e:	f000 fa69 	bl	80015e4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001112:	f000 fb27 	bl	8001764 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001116:	f000 fb79 	bl	800180c <MX_TIM3_Init>
	MX_TIM4_Init();
 800111a:	f000 fbef 	bl	80018fc <MX_TIM4_Init>
	MX_TIM8_Init();
 800111e:	f000 fccb 	bl	8001ab8 <MX_TIM8_Init>
	MX_USART1_UART_Init();
 8001122:	f000 fdc5 	bl	8001cb0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8001126:	f000 fdf3 	bl	8001d10 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800112a:	f000 fe21 	bl	8001d70 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 800112e:	f000 f961 	bl	80013f4 <MX_I2C1_Init>
	MX_I2C3_Init();
 8001132:	f000 f99f 	bl	8001474 <MX_I2C3_Init>
	MX_SPI4_Init();
 8001136:	f000 fa17 	bl	8001568 <MX_SPI4_Init>
	MX_TIM5_Init();
 800113a:	f000 fc39 	bl	80019b0 <MX_TIM5_Init>
	MX_UART7_Init();
 800113e:	f000 fd87 	bl	8001c50 <MX_UART7_Init>
	MX_TIM6_Init();
 8001142:	f000 fc83 	bl	8001a4c <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	initialization();
 8001146:	f000 ff33 	bl	8001fb0 <initialization>
	HAL_Delay(10);
 800114a:	200a      	movs	r0, #10
 800114c:	f002 fb8c 	bl	8003868 <HAL_Delay>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//parse text every time before polarization
		if (newDataInBuffer()) {
 8001150:	f7ff fe46 	bl	8000de0 <newDataInBuffer>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <main+0x82>
			parseText(huart3);
 800115a:	4c2c      	ldr	r4, [pc, #176]	; (800120c <main+0x11c>)
 800115c:	4668      	mov	r0, sp
 800115e:	f104 0310 	add.w	r3, r4, #16
 8001162:	2270      	movs	r2, #112	; 0x70
 8001164:	4619      	mov	r1, r3
 8001166:	f008 fcf9 	bl	8009b5c <memcpy>
 800116a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800116e:	f7ff fa4f 	bl	8000610 <parseText>
		}

		// if new measurement technique was updated - change state regarding to the update
		if (stateCanBeUpdated()) {
 8001172:	f001 f9b7 	bl	80024e4 <stateCanBeUpdated>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <main+0x90>
			updateState();
 800117c:	f001 f9da 	bl	8002534 <updateState>
		}

		// normal mode with polarization
		if (ploarizationCanRun()) {
 8001180:	f001 faf2 	bl	8002768 <ploarizationCanRun>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d012      	beq.n	80011b0 <main+0xc0>
			runPolarizationSequence();
 800118a:	f002 f95d 	bl	8003448 <runPolarizationSequence>
			if (dataReadyToSendBeforeMeasurement()) {
 800118e:	f7ff fe63 	bl	8000e58 <dataReadyToSendBeforeMeasurement>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00b      	beq.n	80011b0 <main+0xc0>
				sendMeasuredData(huart3);
 8001198:	4c1c      	ldr	r4, [pc, #112]	; (800120c <main+0x11c>)
 800119a:	4668      	mov	r0, sp
 800119c:	f104 0310 	add.w	r3, r4, #16
 80011a0:	2270      	movs	r2, #112	; 0x70
 80011a2:	4619      	mov	r1, r3
 80011a4:	f008 fcda 	bl	8009b5c <memcpy>
 80011a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011ac:	f7ff fc9c 	bl	8000ae8 <sendMeasuredData>
			}
		}

		// measurement
		if (measurementCanRun()) {
 80011b0:	f001 fb00 	bl	80027b4 <measurementCanRun>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <main+0xce>
			runMeasurementMethod();
 80011ba:	f000 ff23 	bl	8002004 <runMeasurementMethod>
		}

		//
		if (dataReadyToSendAfterMeasurement()) {
 80011be:	f7ff fe33 	bl	8000e28 <dataReadyToSendAfterMeasurement>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00b      	beq.n	80011e0 <main+0xf0>
			sendMeasuredData(huart3);
 80011c8:	4c10      	ldr	r4, [pc, #64]	; (800120c <main+0x11c>)
 80011ca:	4668      	mov	r0, sp
 80011cc:	f104 0310 	add.w	r3, r4, #16
 80011d0:	2270      	movs	r2, #112	; 0x70
 80011d2:	4619      	mov	r1, r3
 80011d4:	f008 fcc2 	bl	8009b5c <memcpy>
 80011d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011dc:	f7ff fc84 	bl	8000ae8 <sendMeasuredData>
		}
		if (isWaitingForSync()) {
 80011e0:	f001 fb3a 	bl	8002858 <isWaitingForSync>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d004      	beq.n	80011f4 <main+0x104>
			set_LED1(0, 0, 1);
 80011ea:	2201      	movs	r2, #1
 80011ec:	2100      	movs	r1, #0
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff ff02 	bl	8000ff8 <set_LED1>
		}

		// idle state - if no method is active and there are no data to be sent
		if (stateIsIdle()) {
 80011f4:	f001 fb0c 	bl	8002810 <stateIsIdle>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0a8      	beq.n	8001150 <main+0x60>
			set_LED1(0, 0, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	2100      	movs	r1, #0
 8001202:	2000      	movs	r0, #0
 8001204:	f7ff fef8 	bl	8000ff8 <set_LED1>
		if (newDataInBuffer()) {
 8001208:	e7a2      	b.n	8001150 <main+0x60>
 800120a:	bf00      	nop
 800120c:	2005a4f0 	.word	0x2005a4f0

08001210 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b0b8      	sub	sp, #224	; 0xe0
 8001214:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001216:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800121a:	2234      	movs	r2, #52	; 0x34
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f008 fca7 	bl	8009b72 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001224:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001234:	f107 0308 	add.w	r3, r7, #8
 8001238:	2290      	movs	r2, #144	; 0x90
 800123a:	2100      	movs	r1, #0
 800123c:	4618      	mov	r0, r3
 800123e:	f008 fc98 	bl	8009b72 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001242:	f003 feed 	bl	8005020 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001246:	4b3f      	ldr	r3, [pc, #252]	; (8001344 <SystemClock_Config+0x134>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a3e      	ldr	r2, [pc, #248]	; (8001344 <SystemClock_Config+0x134>)
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <SystemClock_Config+0x134>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800125e:	4b3a      	ldr	r3, [pc, #232]	; (8001348 <SystemClock_Config+0x138>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a39      	ldr	r2, [pc, #228]	; (8001348 <SystemClock_Config+0x138>)
 8001264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	4b37      	ldr	r3, [pc, #220]	; (8001348 <SystemClock_Config+0x138>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001272:	603b      	str	r3, [r7, #0]
 8001274:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001276:	2301      	movs	r3, #1
 8001278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800127c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001284:	2302      	movs	r3, #2
 8001286:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800128e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 5;
 8001292:	2305      	movs	r3, #5
 8001294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001298:	23d8      	movs	r3, #216	; 0xd8
 800129a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800129e:	2302      	movs	r3, #2
 80012a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012aa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 ff16 	bl	80050e0 <HAL_RCC_OscConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0xae>
		Error_Handler();
 80012ba:	f001 f885 	bl	80023c8 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80012be:	f003 febf 	bl	8005040 <HAL_PWREx_EnableOverDrive>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0xbc>
		Error_Handler();
 80012c8:	f001 f87e 	bl	80023c8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80012cc:	230f      	movs	r3, #15
 80012ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d2:	2302      	movs	r3, #2
 80012d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80012ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80012f2:	2107      	movs	r1, #7
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 f9a1 	bl	800563c <HAL_RCC_ClockConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0xf4>
		Error_Handler();
 8001300:	f001 f862 	bl	80023c8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C3;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <SystemClock_Config+0x13c>)
 8001306:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001308:	2300      	movs	r3, #0
 800130a:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800130c:	2300      	movs	r3, #0
 800130e:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001310:	2300      	movs	r3, #0
 8001312:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001314:	2300      	movs	r3, #0
 8001316:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001318:	2300      	movs	r3, #0
 800131a:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800131c:	2300      	movs	r3, #0
 800131e:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8001320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001324:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4618      	mov	r0, r3
 800132c:	f004 fb58 	bl	80059e0 <HAL_RCCEx_PeriphCLKConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0x12a>
		Error_Handler();
 8001336:	f001 f847 	bl	80023c8 <Error_Handler>
	}
}
 800133a:	bf00      	nop
 800133c:	37e0      	adds	r7, #224	; 0xe0
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000
 800134c:	000151d0 	.word	0x000151d0

08001350 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001356:	463b      	mov	r3, r7
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <MX_ADC1_Init+0x9c>)
 8001364:	4a22      	ldr	r2, [pc, #136]	; (80013f0 <MX_ADC1_Init+0xa0>)
 8001366:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_ADC1_Init+0x9c>)
 800136a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800136e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001370:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_ADC1_Init+0x9c>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <MX_ADC1_Init+0x9c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800137c:	4b1b      	ldr	r3, [pc, #108]	; (80013ec <MX_ADC1_Init+0x9c>)
 800137e:	2200      	movs	r2, #0
 8001380:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001382:	4b1a      	ldr	r3, [pc, #104]	; (80013ec <MX_ADC1_Init+0x9c>)
 8001384:	2200      	movs	r2, #0
 8001386:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <MX_ADC1_Init+0x9c>)
 800138c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <MX_ADC1_Init+0x9c>)
 8001394:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8001398:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800139a:	4b14      	ldr	r3, [pc, #80]	; (80013ec <MX_ADC1_Init+0x9c>)
 800139c:	2200      	movs	r2, #0
 800139e:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <MX_ADC1_Init+0x9c>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_ADC1_Init+0x9c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ae:	4b0f      	ldr	r3, [pc, #60]	; (80013ec <MX_ADC1_Init+0x9c>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_ADC1_Init+0x9c>)
 80013b6:	f002 fa79 	bl	80038ac <HAL_ADC_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC1_Init+0x74>
		Error_Handler();
 80013c0:	f001 f802 	bl	80023c8 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80013c8:	2301      	movs	r3, #1
 80013ca:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80013cc:	2301      	movs	r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80013d0:	463b      	mov	r3, r7
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_ADC1_Init+0x9c>)
 80013d6:	f002 fbaf 	bl	8003b38 <HAL_ADC_ConfigChannel>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_ADC1_Init+0x94>
		Error_Handler();
 80013e0:	f000 fff2 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	2005a63c 	.word	0x2005a63c
 80013f0:	40012000 	.word	0x40012000

080013f4 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_I2C1_Init+0x74>)
 80013fa:	4a1c      	ldr	r2, [pc, #112]	; (800146c <MX_I2C1_Init+0x78>)
 80013fc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20404768;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_I2C1_Init+0x74>)
 8001400:	4a1b      	ldr	r2, [pc, #108]	; (8001470 <MX_I2C1_Init+0x7c>)
 8001402:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_I2C1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_I2C1_Init+0x74>)
 800140c:	2201      	movs	r2, #1
 800140e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_I2C1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800141c:	4b12      	ldr	r3, [pc, #72]	; (8001468 <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <MX_I2C1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001428:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <MX_I2C1_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <MX_I2C1_Init+0x74>)
 8001430:	f003 fcce 	bl	8004dd0 <HAL_I2C_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_I2C1_Init+0x4a>
		Error_Handler();
 800143a:	f000 ffc5 	bl	80023c8 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 800143e:	2100      	movs	r1, #0
 8001440:	4809      	ldr	r0, [pc, #36]	; (8001468 <MX_I2C1_Init+0x74>)
 8001442:	f003 fd55 	bl	8004ef0 <HAL_I2CEx_ConfigAnalogFilter>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_I2C1_Init+0x5c>
		Error_Handler();
 800144c:	f000 ffbc 	bl	80023c8 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001450:	2100      	movs	r1, #0
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_I2C1_Init+0x74>)
 8001454:	f003 fd97 	bl	8004f86 <HAL_I2CEx_ConfigDigitalFilter>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_I2C1_Init+0x6e>
		Error_Handler();
 800145e:	f000 ffb3 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	2005a570 	.word	0x2005a570
 800146c:	40005400 	.word	0x40005400
 8001470:	20404768 	.word	0x20404768

08001474 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <MX_I2C3_Init+0x74>)
 800147a:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <MX_I2C3_Init+0x78>)
 800147c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x20404768;
 800147e:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <MX_I2C3_Init+0x74>)
 8001480:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <MX_I2C3_Init+0x7c>)
 8001482:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_I2C3_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_I2C3_Init+0x74>)
 800148c:	2201      	movs	r2, #1
 800148e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_I2C3_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_I2C3_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <MX_I2C3_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <MX_I2C3_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a8:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_I2C3_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 80014ae:	480e      	ldr	r0, [pc, #56]	; (80014e8 <MX_I2C3_Init+0x74>)
 80014b0:	f003 fc8e 	bl	8004dd0 <HAL_I2C_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_I2C3_Init+0x4a>
		Error_Handler();
 80014ba:	f000 ff85 	bl	80023c8 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80014be:	2100      	movs	r1, #0
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <MX_I2C3_Init+0x74>)
 80014c2:	f003 fd15 	bl	8004ef0 <HAL_I2CEx_ConfigAnalogFilter>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_I2C3_Init+0x5c>
		Error_Handler();
 80014cc:	f000 ff7c 	bl	80023c8 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 80014d0:	2100      	movs	r1, #0
 80014d2:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_I2C3_Init+0x74>)
 80014d4:	f003 fd57 	bl	8004f86 <HAL_I2CEx_ConfigDigitalFilter>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_I2C3_Init+0x6e>
		Error_Handler();
 80014de:	f000 ff73 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	2005a344 	.word	0x2005a344
 80014ec:	40005c00 	.word	0x40005c00
 80014f0:	20404768 	.word	0x20404768

080014f4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80014f8:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_SPI1_Init+0x6c>)
 80014fa:	4a1a      	ldr	r2, [pc, #104]	; (8001564 <MX_SPI1_Init+0x70>)
 80014fc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 80014fe:	4b18      	ldr	r3, [pc, #96]	; (8001560 <MX_SPI1_Init+0x6c>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <MX_SPI1_Init+0x6c>)
 8001506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800150c:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_SPI1_Init+0x6c>)
 800150e:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8001512:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_SPI1_Init+0x6c>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_SPI1_Init+0x6c>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001520:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_SPI1_Init+0x6c>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_SPI1_Init+0x6c>)
 8001528:	2200      	movs	r2, #0
 800152a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_SPI1_Init+0x6c>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_SPI1_Init+0x6c>)
 8001534:	2200      	movs	r2, #0
 8001536:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_SPI1_Init+0x6c>)
 800153a:	2207      	movs	r2, #7
 800153c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_SPI1_Init+0x6c>)
 8001540:	2200      	movs	r2, #0
 8001542:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_SPI1_Init+0x6c>)
 8001546:	2200      	movs	r2, #0
 8001548:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_SPI1_Init+0x6c>)
 800154c:	f004 fe6e 	bl	800622c <HAL_SPI_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_SPI1_Init+0x66>
		Error_Handler();
 8001556:	f000 ff37 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2005a848 	.word	0x2005a848
 8001564:	40013000 	.word	0x40013000

08001568 <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <MX_SPI4_Init+0x74>)
 800156e:	4a1c      	ldr	r2, [pc, #112]	; (80015e0 <MX_SPI4_Init+0x78>)
 8001570:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_SPI4_Init+0x74>)
 8001574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001578:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 800157a:	4b18      	ldr	r3, [pc, #96]	; (80015dc <MX_SPI4_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <MX_SPI4_Init+0x74>)
 8001582:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001586:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_SPI4_Init+0x74>)
 800158a:	2200      	movs	r2, #0
 800158c:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_SPI4_Init+0x74>)
 8001590:	2200      	movs	r2, #0
 8001592:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_SPI4_Init+0x74>)
 8001596:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800159a:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <MX_SPI4_Init+0x74>)
 800159e:	2200      	movs	r2, #0
 80015a0:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_SPI4_Init+0x74>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <MX_SPI4_Init+0x74>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_SPI4_Init+0x74>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 7;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_SPI4_Init+0x74>)
 80015b6:	2207      	movs	r2, #7
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	; (80015dc <MX_SPI4_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	631a      	str	r2, [r3, #48]	; 0x30
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_SPI4_Init+0x74>)
 80015c2:	2208      	movs	r2, #8
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_SPI4_Init+0x74>)
 80015c8:	f004 fe30 	bl	800622c <HAL_SPI_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_SPI4_Init+0x6e>
		Error_Handler();
 80015d2:	f000 fef9 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	2005a704 	.word	0x2005a704
 80015e0:	40013400 	.word	0x40013400

080015e4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b09a      	sub	sp, #104	; 0x68
 80015e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80015ea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001604:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]
 8001612:	611a      	str	r2, [r3, #16]
 8001614:	615a      	str	r2, [r3, #20]
 8001616:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	222c      	movs	r2, #44	; 0x2c
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f008 faa7 	bl	8009b72 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001624:	4b4d      	ldr	r3, [pc, #308]	; (800175c <MX_TIM1_Init+0x178>)
 8001626:	4a4e      	ldr	r2, [pc, #312]	; (8001760 <MX_TIM1_Init+0x17c>)
 8001628:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800162a:	4b4c      	ldr	r3, [pc, #304]	; (800175c <MX_TIM1_Init+0x178>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001630:	4b4a      	ldr	r3, [pc, #296]	; (800175c <MX_TIM1_Init+0x178>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4898 - 1;
 8001636:	4b49      	ldr	r3, [pc, #292]	; (800175c <MX_TIM1_Init+0x178>)
 8001638:	f241 3221 	movw	r2, #4897	; 0x1321
 800163c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <MX_TIM1_Init+0x178>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001644:	4b45      	ldr	r3, [pc, #276]	; (800175c <MX_TIM1_Init+0x178>)
 8001646:	2200      	movs	r2, #0
 8001648:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <MX_TIM1_Init+0x178>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001650:	4842      	ldr	r0, [pc, #264]	; (800175c <MX_TIM1_Init+0x178>)
 8001652:	f005 fb8a 	bl	8006d6a <HAL_TIM_Base_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM1_Init+0x7c>
		Error_Handler();
 800165c:	f000 feb4 	bl	80023c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001664:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800166a:	4619      	mov	r1, r3
 800166c:	483b      	ldr	r0, [pc, #236]	; (800175c <MX_TIM1_Init+0x178>)
 800166e:	f006 fa15 	bl	8007a9c <HAL_TIM_ConfigClockSource>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM1_Init+0x98>
		Error_Handler();
 8001678:	f000 fea6 	bl	80023c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800167c:	4837      	ldr	r0, [pc, #220]	; (800175c <MX_TIM1_Init+0x178>)
 800167e:	f005 fbf4 	bl	8006e6a <HAL_TIM_PWM_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM1_Init+0xa8>
		Error_Handler();
 8001688:	f000 fe9e 	bl	80023c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800168c:	2320      	movs	r3, #32
 800168e:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001690:	2300      	movs	r3, #0
 8001692:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001698:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800169c:	4619      	mov	r1, r3
 800169e:	482f      	ldr	r0, [pc, #188]	; (800175c <MX_TIM1_Init+0x178>)
 80016a0:	f007 f91c 	bl	80088dc <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM1_Init+0xca>
		Error_Handler();
 80016aa:	f000 fe8d 	bl	80023c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80016ae:	2370      	movs	r3, #112	; 0x70
 80016b0:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 864 + 10;
 80016b2:	f240 336a 	movw	r3, #874	; 0x36a
 80016b6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80016b8:	2302      	movs	r3, #2
 80016ba:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016bc:	2300      	movs	r3, #0
 80016be:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80016c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80016ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4821      	ldr	r0, [pc, #132]	; (800175c <MX_TIM1_Init+0x178>)
 80016d8:	f006 f8c8 	bl	800786c <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM1_Init+0x102>
		Error_Handler();
 80016e2:	f000 fe71 	bl	80023c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e6:	2360      	movs	r3, #96	; 0x60
 80016e8:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 3000;
 80016ea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80016ee:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 80016f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016f4:	2204      	movs	r2, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4818      	ldr	r0, [pc, #96]	; (800175c <MX_TIM1_Init+0x178>)
 80016fa:	f006 f8b7 	bl	800786c <HAL_TIM_PWM_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x124>
		Error_Handler();
 8001704:	f000 fe60 	bl	80023c8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800170c:	2300      	movs	r3, #0
 800170e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001714:	2300      	movs	r3, #0
 8001716:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800171c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001720:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800172a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	4619      	mov	r1, r3
 800173c:	4807      	ldr	r0, [pc, #28]	; (800175c <MX_TIM1_Init+0x178>)
 800173e:	f007 f95b 	bl	80089f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0x168>
		Error_Handler();
 8001748:	f000 fe3e 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800174c:	4803      	ldr	r0, [pc, #12]	; (800175c <MX_TIM1_Init+0x178>)
 800174e:	f001 fc33 	bl	8002fb8 <HAL_TIM_MspPostInit>

}
 8001752:	bf00      	nop
 8001754:	3768      	adds	r7, #104	; 0x68
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2005a808 	.word	0x2005a808
 8001760:	40010000 	.word	0x40010000

08001764 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001782:	4b21      	ldr	r3, [pc, #132]	; (8001808 <MX_TIM2_Init+0xa4>)
 8001784:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001788:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <MX_TIM2_Init+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001790:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <MX_TIM2_Init+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 8001796:	4b1c      	ldr	r3, [pc, #112]	; (8001808 <MX_TIM2_Init+0xa4>)
 8001798:	f04f 32ff 	mov.w	r2, #4294967295
 800179c:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_TIM2_Init+0xa4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_TIM2_Init+0xa4>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 80017aa:	4817      	ldr	r0, [pc, #92]	; (8001808 <MX_TIM2_Init+0xa4>)
 80017ac:	f005 fcac 	bl	8007108 <HAL_TIM_IC_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0x56>
		Error_Handler();
 80017b6:	f000 fe07 	bl	80023c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	480f      	ldr	r0, [pc, #60]	; (8001808 <MX_TIM2_Init+0xa4>)
 80017ca:	f007 f887 	bl	80088dc <HAL_TIMEx_MasterConfigSynchronization>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM2_Init+0x74>
		Error_Handler();
 80017d4:	f000 fdf8 	bl	80023c8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017dc:	2301      	movs	r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80017e8:	1d3b      	adds	r3, r7, #4
 80017ea:	2200      	movs	r2, #0
 80017ec:	4619      	mov	r1, r3
 80017ee:	4806      	ldr	r0, [pc, #24]	; (8001808 <MX_TIM2_Init+0xa4>)
 80017f0:	f005 ff9f 	bl	8007732 <HAL_TIM_IC_ConfigChannel>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM2_Init+0x9a>
		Error_Handler();
 80017fa:	f000 fde5 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	3720      	adds	r7, #32
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	2005a8ac 	.word	0x2005a8ac

0800180c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b090      	sub	sp, #64	; 0x40
 8001810:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001812:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	615a      	str	r2, [r3, #20]
 800183e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001840:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <MX_TIM3_Init+0xe8>)
 8001842:	4a2d      	ldr	r2, [pc, #180]	; (80018f8 <MX_TIM3_Init+0xec>)
 8001844:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001846:	4b2b      	ldr	r3, [pc, #172]	; (80018f4 <MX_TIM3_Init+0xe8>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <MX_TIM3_Init+0xe8>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0;
 8001852:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <MX_TIM3_Init+0xe8>)
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001858:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <MX_TIM3_Init+0xe8>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <MX_TIM3_Init+0xe8>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001864:	4823      	ldr	r0, [pc, #140]	; (80018f4 <MX_TIM3_Init+0xe8>)
 8001866:	f005 fa80 	bl	8006d6a <HAL_TIM_Base_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM3_Init+0x68>
		Error_Handler();
 8001870:	f000 fdaa 	bl	80023c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8001874:	481f      	ldr	r0, [pc, #124]	; (80018f4 <MX_TIM3_Init+0xe8>)
 8001876:	f005 faf8 	bl	8006e6a <HAL_TIM_PWM_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0x78>
		Error_Handler();
 8001880:	f000 fda2 	bl	80023c8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001888:	2300      	movs	r3, #0
 800188a:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 800188c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001890:	4619      	mov	r1, r3
 8001892:	4818      	ldr	r0, [pc, #96]	; (80018f4 <MX_TIM3_Init+0xe8>)
 8001894:	f006 f9bc 	bl	8007c10 <HAL_TIM_SlaveConfigSynchro>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM3_Init+0x96>
		Error_Handler();
 800189e:	f000 fd93 	bl	80023c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a2:	2300      	movs	r3, #0
 80018a4:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	4619      	mov	r1, r3
 80018b0:	4810      	ldr	r0, [pc, #64]	; (80018f4 <MX_TIM3_Init+0xe8>)
 80018b2:	f007 f813 	bl	80088dc <HAL_TIMEx_MasterConfigSynchronization>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM3_Init+0xb4>
		Error_Handler();
 80018bc:	f000 fd84 	bl	80023c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c0:	2360      	movs	r3, #96	; 0x60
 80018c2:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4807      	ldr	r0, [pc, #28]	; (80018f4 <MX_TIM3_Init+0xe8>)
 80018d8:	f005 ffc8 	bl	800786c <HAL_TIM_PWM_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM3_Init+0xda>
		Error_Handler();
 80018e2:	f000 fd71 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80018e6:	4803      	ldr	r0, [pc, #12]	; (80018f4 <MX_TIM3_Init+0xe8>)
 80018e8:	f001 fb66 	bl	8002fb8 <HAL_TIM_MspPostInit>

}
 80018ec:	bf00      	nop
 80018ee:	3740      	adds	r7, #64	; 0x40
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	2005a5fc 	.word	0x2005a5fc
 80018f8:	40000400 	.word	0x40000400

080018fc <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001902:	f107 031c 	add.w	r3, r7, #28
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800190e:	463b      	mov	r3, r7
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
 800191c:	615a      	str	r2, [r3, #20]
 800191e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001920:	4b21      	ldr	r3, [pc, #132]	; (80019a8 <MX_TIM4_Init+0xac>)
 8001922:	4a22      	ldr	r2, [pc, #136]	; (80019ac <MX_TIM4_Init+0xb0>)
 8001924:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <MX_TIM4_Init+0xac>)
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192c:	4b1e      	ldr	r3, [pc, #120]	; (80019a8 <MX_TIM4_Init+0xac>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0;
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <MX_TIM4_Init+0xac>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <MX_TIM4_Init+0xac>)
 800193a:	2200      	movs	r2, #0
 800193c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_TIM4_Init+0xac>)
 8001940:	2280      	movs	r2, #128	; 0x80
 8001942:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8001944:	4818      	ldr	r0, [pc, #96]	; (80019a8 <MX_TIM4_Init+0xac>)
 8001946:	f005 fa90 	bl	8006e6a <HAL_TIM_PWM_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM4_Init+0x58>
		Error_Handler();
 8001950:	f000 fd3a 	bl	80023c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001954:	2320      	movs	r3, #32
 8001956:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	4811      	ldr	r0, [pc, #68]	; (80019a8 <MX_TIM4_Init+0xac>)
 8001964:	f006 ffba 	bl	80088dc <HAL_TIMEx_MasterConfigSynchronization>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM4_Init+0x76>
		Error_Handler();
 800196e:	f000 fd2b 	bl	80023c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001972:	2360      	movs	r3, #96	; 0x60
 8001974:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197a:	2300      	movs	r3, #0
 800197c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001982:	463b      	mov	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	4619      	mov	r1, r3
 8001988:	4807      	ldr	r0, [pc, #28]	; (80019a8 <MX_TIM4_Init+0xac>)
 800198a:	f005 ff6f 	bl	800786c <HAL_TIM_PWM_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_TIM4_Init+0x9c>
		Error_Handler();
 8001994:	f000 fd18 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <MX_TIM4_Init+0xac>)
 800199a:	f001 fb0d 	bl	8002fb8 <HAL_TIM_MspPostInit>

}
 800199e:	bf00      	nop
 80019a0:	3728      	adds	r7, #40	; 0x28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2005a4b0 	.word	0x2005a4b0
 80019ac:	40000800 	.word	0x40000800

080019b0 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019c4:	1d3b      	adds	r3, r7, #4
 80019c6:	2200      	movs	r2, #0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	605a      	str	r2, [r3, #4]
 80019cc:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	; (8001a44 <MX_TIM5_Init+0x94>)
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <MX_TIM5_Init+0x98>)
 80019d2:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	; (8001a44 <MX_TIM5_Init+0x94>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019da:	4b1a      	ldr	r3, [pc, #104]	; (8001a44 <MX_TIM5_Init+0x94>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = (21600 / 2) - 1;
 80019e0:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <MX_TIM5_Init+0x94>)
 80019e2:	f642 222f 	movw	r2, #10799	; 0x2a2f
 80019e6:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e8:	4b16      	ldr	r3, [pc, #88]	; (8001a44 <MX_TIM5_Init+0x94>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <MX_TIM5_Init+0x94>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 80019f4:	4813      	ldr	r0, [pc, #76]	; (8001a44 <MX_TIM5_Init+0x94>)
 80019f6:	f005 f9b8 	bl	8006d6a <HAL_TIM_Base_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM5_Init+0x54>
		Error_Handler();
 8001a00:	f000 fce2 	bl	80023c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a08:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480c      	ldr	r0, [pc, #48]	; (8001a44 <MX_TIM5_Init+0x94>)
 8001a12:	f006 f843 	bl	8007a9c <HAL_TIM_ConfigClockSource>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM5_Init+0x70>
		Error_Handler();
 8001a1c:	f000 fcd4 	bl	80023c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4805      	ldr	r0, [pc, #20]	; (8001a44 <MX_TIM5_Init+0x94>)
 8001a2e:	f006 ff55 	bl	80088dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM5_Init+0x8c>
		Error_Handler();
 8001a38:	f000 fcc6 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8001a3c:	bf00      	nop
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	2005a5bc 	.word	0x2005a5bc
 8001a48:	40000c00 	.word	0x40000c00

08001a4c <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a5e:	4a15      	ldr	r2, [pc, #84]	; (8001ab4 <MX_TIM6_Init+0x68>)
 8001a60:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 4898 - 1;
 8001a6e:	4b10      	ldr	r3, [pc, #64]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a70:	f241 3221 	movw	r2, #4897	; 0x1321
 8001a74:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001a7c:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a7e:	f005 f974 	bl	8006d6a <HAL_TIM_Base_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_TIM6_Init+0x40>
		Error_Handler();
 8001a88:	f000 fc9e 	bl	80023c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <MX_TIM6_Init+0x64>)
 8001a9a:	f006 ff1f 	bl	80088dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <MX_TIM6_Init+0x5c>
		Error_Handler();
 8001aa4:	f000 fc90 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2005a7c8 	.word	0x2005a7c8
 8001ab4:	40001000 	.word	0x40001000

08001ab8 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b09e      	sub	sp, #120	; 0x78
 8001abc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001abe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001acc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001adc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
 8001af8:	615a      	str	r2, [r3, #20]
 8001afa:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001afc:	463b      	mov	r3, r7
 8001afe:	222c      	movs	r2, #44	; 0x2c
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f008 f835 	bl	8009b72 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001b08:	4b4f      	ldr	r3, [pc, #316]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b0a:	4a50      	ldr	r2, [pc, #320]	; (8001c4c <MX_TIM8_Init+0x194>)
 8001b0c:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001b0e:	4b4e      	ldr	r3, [pc, #312]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b14:	4b4c      	ldr	r3, [pc, #304]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 108 - 1;
 8001b1a:	4b4b      	ldr	r3, [pc, #300]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b1c:	226b      	movs	r2, #107	; 0x6b
 8001b1e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b20:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 24;
 8001b26:	4b48      	ldr	r3, [pc, #288]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b28:	2218      	movs	r2, #24
 8001b2a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2c:	4b46      	ldr	r3, [pc, #280]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8001b32:	4845      	ldr	r0, [pc, #276]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b34:	f005 f919 	bl	8006d6a <HAL_TIM_Base_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM8_Init+0x8a>
		Error_Handler();
 8001b3e:	f000 fc43 	bl	80023c8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b46:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001b48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	483e      	ldr	r0, [pc, #248]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b50:	f005 ffa4 	bl	8007a9c <HAL_TIM_ConfigClockSource>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM8_Init+0xa6>
		Error_Handler();
 8001b5a:	f000 fc35 	bl	80023c8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001b5e:	483a      	ldr	r0, [pc, #232]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b60:	f005 f983 	bl	8006e6a <HAL_TIM_PWM_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_TIM8_Init+0xb6>
		Error_Handler();
 8001b6a:	f000 fc2d 	bl	80023c8 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK) {
 8001b6e:	2108      	movs	r1, #8
 8001b70:	4835      	ldr	r0, [pc, #212]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b72:	f005 fc79 	bl	8007468 <HAL_TIM_OnePulse_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM8_Init+0xc8>
		Error_Handler();
 8001b7c:	f000 fc24 	bl	80023c8 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001b80:	2306      	movs	r3, #6
 8001b82:	657b      	str	r3, [r7, #84]	; 0x54
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK) {
 8001b88:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	482e      	ldr	r0, [pc, #184]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001b90:	f006 f83e 	bl	8007c10 <HAL_TIM_SlaveConfigSynchro>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM8_Init+0xe6>
		Error_Handler();
 8001b9a:	f000 fc15 	bl	80023c8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	64bb      	str	r3, [r7, #72]	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8001baa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4825      	ldr	r0, [pc, #148]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001bb2:	f006 fe93 	bl	80088dc <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM8_Init+0x108>
		Error_Handler();
 8001bbc:	f000 fc04 	bl	80023c8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001bc0:	2370      	movs	r3, #112	; 0x70
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 54;
 8001bc4:	2336      	movs	r3, #54	; 0x36
 8001bc6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001bdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	4818      	ldr	r0, [pc, #96]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001be6:	f005 fe41 	bl	800786c <HAL_TIM_PWM_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM8_Init+0x13c>
		Error_Handler();
 8001bf0:	f000 fbea 	bl	80023c8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c04:	2300      	movs	r3, #0
 8001c06:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c1a:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8001c24:	463b      	mov	r3, r7
 8001c26:	4619      	mov	r1, r3
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001c2a:	f006 fee5 	bl	80089f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM8_Init+0x180>
		Error_Handler();
 8001c34:	f000 fbc8 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001c38:	4803      	ldr	r0, [pc, #12]	; (8001c48 <MX_TIM8_Init+0x190>)
 8001c3a:	f001 f9bd 	bl	8002fb8 <HAL_TIM_MspPostInit>

}
 8001c3e:	bf00      	nop
 8001c40:	3778      	adds	r7, #120	; 0x78
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2005a470 	.word	0x2005a470
 8001c4c:	40010400 	.word	0x40010400

08001c50 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8001c54:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <MX_UART7_Init+0x58>)
 8001c56:	4a15      	ldr	r2, [pc, #84]	; (8001cac <MX_UART7_Init+0x5c>)
 8001c58:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 8001c5a:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <MX_UART7_Init+0x58>)
 8001c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c60:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <MX_UART7_Init+0x58>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <MX_UART7_Init+0x58>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <MX_UART7_Init+0x58>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <MX_UART7_Init+0x58>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <MX_UART7_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <MX_UART7_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c86:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <MX_UART7_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8c:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <MX_UART7_Init+0x58>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8001c92:	4805      	ldr	r0, [pc, #20]	; (8001ca8 <MX_UART7_Init+0x58>)
 8001c94:	f006 ff4c 	bl	8008b30 <HAL_UART_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_UART7_Init+0x52>
		Error_Handler();
 8001c9e:	f000 fb93 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2005a3f0 	.word	0x2005a3f0
 8001cac:	40007800 	.word	0x40007800

08001cb0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001cb4:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cb6:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <MX_USART1_UART_Init+0x5c>)
 8001cb8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cc0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001cf2:	4805      	ldr	r0, [pc, #20]	; (8001d08 <MX_USART1_UART_Init+0x58>)
 8001cf4:	f006 ff1c 	bl	8008b30 <HAL_UART_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001cfe:	f000 fb63 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	2005a684 	.word	0x2005a684
 8001d0c:	40011000 	.word	0x40011000

08001d10 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001d14:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d16:	4a15      	ldr	r2, [pc, #84]	; (8001d6c <MX_USART2_UART_Init+0x5c>)
 8001d18:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001d1a:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d20:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d36:	220c      	movs	r2, #12
 8001d38:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_USART2_UART_Init+0x58>)
 8001d54:	f006 feec 	bl	8008b30 <HAL_UART_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001d5e:	f000 fb33 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2005a8ec 	.word	0x2005a8ec
 8001d6c:	40004400 	.word	0x40004400

08001d70 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <MX_USART3_UART_Init+0x54>)
 8001d76:	4a14      	ldr	r2, [pc, #80]	; (8001dc8 <MX_USART3_UART_Init+0x58>)
 8001d78:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 2000000;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_USART3_UART_Init+0x54>)
 8001d7c:	4a13      	ldr	r2, [pc, #76]	; (8001dcc <MX_USART3_UART_Init+0x5c>)
 8001d7e:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d80:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <MX_USART3_UART_Init+0x54>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001d86:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_USART3_UART_Init+0x54>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <MX_USART3_UART_Init+0x54>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_USART3_UART_Init+0x54>)
 8001d94:	220c      	movs	r2, #12
 8001d96:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <MX_USART3_UART_Init+0x54>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_USART3_UART_Init+0x54>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <MX_USART3_UART_Init+0x54>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_USART3_UART_Init+0x54>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MX_USART3_UART_Init+0x54>)
 8001db2:	f006 febd 	bl	8008b30 <HAL_UART_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_USART3_UART_Init+0x50>
		Error_Handler();
 8001dbc:	f000 fb04 	bl	80023c8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2005a4f0 	.word	0x2005a4f0
 8001dc8:	40004800 	.word	0x40004800
 8001dcc:	001e8480 	.word	0x001e8480

08001dd0 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_DMA_Init+0x70>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a19      	ldr	r2, [pc, #100]	; (8001e40 <MX_DMA_Init+0x70>)
 8001ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <MX_DMA_Init+0x70>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001dee:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <MX_DMA_Init+0x70>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <MX_DMA_Init+0x70>)
 8001df4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <MX_DMA_Init+0x70>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001e06:	2200      	movs	r2, #0
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2010      	movs	r0, #16
 8001e0c:	f002 fa35 	bl	800427a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001e10:	2010      	movs	r0, #16
 8001e12:	f002 fa4e 	bl	80042b2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	203a      	movs	r0, #58	; 0x3a
 8001e1c:	f002 fa2d 	bl	800427a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e20:	203a      	movs	r0, #58	; 0x3a
 8001e22:	f002 fa46 	bl	80042b2 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2100      	movs	r1, #0
 8001e2a:	203c      	movs	r0, #60	; 0x3c
 8001e2c:	f002 fa25 	bl	800427a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001e30:	203c      	movs	r0, #60	; 0x3c
 8001e32:	f002 fa3e 	bl	80042b2 <HAL_NVIC_EnableIRQ>

}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023800 	.word	0x40023800

08001e44 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	; 0x30
 8001e48:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
 8001e54:	609a      	str	r2, [r3, #8]
 8001e56:	60da      	str	r2, [r3, #12]
 8001e58:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001e5a:	4b4f      	ldr	r3, [pc, #316]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a4e      	ldr	r2, [pc, #312]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001e60:	f043 0310 	orr.w	r3, r3, #16
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b4c      	ldr	r3, [pc, #304]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	61bb      	str	r3, [r7, #24]
 8001e70:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e72:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a48      	ldr	r2, [pc, #288]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	617b      	str	r3, [r7, #20]
 8001e88:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8a:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a42      	ldr	r2, [pc, #264]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b40      	ldr	r3, [pc, #256]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a3c      	ldr	r2, [pc, #240]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b3a      	ldr	r3, [pc, #232]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a36      	ldr	r2, [pc, #216]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001ec0:	f043 0302 	orr.w	r3, r3, #2
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed2:	4b31      	ldr	r3, [pc, #196]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a30      	ldr	r2, [pc, #192]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001ed8:	f043 0308 	orr.w	r3, r3, #8
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b2e      	ldr	r3, [pc, #184]	; (8001f98 <MX_GPIO_Init+0x154>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2108      	movs	r1, #8
 8001eee:	482b      	ldr	r0, [pc, #172]	; (8001f9c <MX_GPIO_Init+0x158>)
 8001ef0:	f002 ff3c 	bl	8004d6c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f64e 717f 	movw	r1, #61311	; 0xef7f
 8001efa:	4829      	ldr	r0, [pc, #164]	; (8001fa0 <MX_GPIO_Init+0x15c>)
 8001efc:	f002 ff36 	bl	8004d6c <HAL_GPIO_WritePin>
	LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : SN6505_EN_Pin */
	GPIO_InitStruct.Pin = SN6505_EN_Pin;
 8001f00:	2308      	movs	r3, #8
 8001f02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	4821      	ldr	r0, [pc, #132]	; (8001f9c <MX_GPIO_Init+0x158>)
 8001f18:	f002 fd7e 	bl	8004a18 <HAL_GPIO_Init>

	/*Configure GPIO pin : SYNC_Pin */
	GPIO_InitStruct.Pin = SYNC_Pin;
 8001f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <MX_GPIO_Init+0x160>)
 8001f24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(SYNC_GPIO_Port, &GPIO_InitStruct);
 8001f2a:	f107 031c 	add.w	r3, r7, #28
 8001f2e:	4619      	mov	r1, r3
 8001f30:	481d      	ldr	r0, [pc, #116]	; (8001fa8 <MX_GPIO_Init+0x164>)
 8001f32:	f002 fd71 	bl	8004a18 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin
	 LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin
	 S1_Pin S2_Pin S3_Pin S4_Pin
	 S5_Pin S6_Pin */
	GPIO_InitStruct.Pin = LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin;
 8001f36:	f64e 737f 	movw	r3, #61311	; 0xef7f
 8001f3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4814      	ldr	r0, [pc, #80]	; (8001fa0 <MX_GPIO_Init+0x15c>)
 8001f50:	f002 fd62 	bl	8004a18 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin;
 8001f54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001f58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f5a:	4b14      	ldr	r3, [pc, #80]	; (8001fac <MX_GPIO_Init+0x168>)
 8001f5c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	480c      	ldr	r0, [pc, #48]	; (8001f9c <MX_GPIO_Init+0x158>)
 8001f6a:	f002 fd55 	bl	8004a18 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2017      	movs	r0, #23
 8001f74:	f002 f981 	bl	800427a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f78:	2017      	movs	r0, #23
 8001f7a:	f002 f99a 	bl	80042b2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	2028      	movs	r0, #40	; 0x28
 8001f84:	f002 f979 	bl	800427a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f88:	2028      	movs	r0, #40	; 0x28
 8001f8a:	f002 f992 	bl	80042b2 <HAL_NVIC_EnableIRQ>

}
 8001f8e:	bf00      	nop
 8001f90:	3730      	adds	r7, #48	; 0x30
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	40020c00 	.word	0x40020c00
 8001fa4:	10110000 	.word	0x10110000
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	10210000 	.word	0x10210000

08001fb0 <initialization>:

/* USER CODE BEGIN 4 */


void initialization() {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	//setStateToMeasureOnlyNoPolarization();
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);	// start listening to commands
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	490d      	ldr	r1, [pc, #52]	; (8001fec <initialization+0x3c>)
 8001fb8:	480d      	ldr	r0, [pc, #52]	; (8001ff0 <initialization+0x40>)
 8001fba:	f006 fe99 	bl	8008cf0 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim5); 						// start timer for delay measuring
 8001fbe:	480d      	ldr	r0, [pc, #52]	; (8001ff4 <initialization+0x44>)
 8001fc0:	f004 fefe 	bl	8006dc0 <HAL_TIM_Base_Start_IT>
	switchingCircuitIdle();
 8001fc4:	f001 fb5e 	bl	8003684 <switchingCircuitIdle>
	timeIndex = 0;
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <initialization+0x48>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
	remainingPolarizationTime = 0;
 8001fce:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <initialization+0x4c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
	remainingTimeToNextMeasurement = 0;
 8001fd4:	4b0a      	ldr	r3, [pc, #40]	; (8002000 <initialization+0x50>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
	set_LED1(0, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7ff f80a 	bl	8000ff8 <set_LED1>
	setStateToDefault();								// set state in order to polarize with period 5 seconds
 8001fe4:	f000 fac6 	bl	8002574 <setStateToDefault>
}
 8001fe8:	bf00      	nop
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	20004090 	.word	0x20004090
 8001ff0:	2005a4f0 	.word	0x2005a4f0
 8001ff4:	2005a5bc 	.word	0x2005a5bc
 8001ff8:	2002f1c8 	.word	0x2002f1c8
 8001ffc:	2000408c 	.word	0x2000408c
 8002000:	20004094 	.word	0x20004094

08002004 <runMeasurementMethod>:


void runMeasurementMethod() {
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b09d      	sub	sp, #116	; 0x74
 8002008:	af1c      	add	r7, sp, #112	; 0x70
	//there is no need to run measurement sequence, when the mode is "measureOnSync"
	if(!isModeMeasureOnSync()){
 800200a:	f000 fc8b 	bl	8002924 <isModeMeasureOnSync>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d101      	bne.n	8002018 <runMeasurementMethod+0x14>
		runMeasurementSequence();
 8002014:	f001 fa84 	bl	8003520 <runMeasurementSequence>
	}
	//if measurement method is set, run it
	if ((state.remainingMeasurements > 0) || (state.remainingMeasurements == -1) && ((state.extAdcActiveState == 1) || (state.intAdcActiveState == 1) || (state.compActiveState == 1))) {
 8002018:	4b22      	ldr	r3, [pc, #136]	; (80020a4 <runMeasurementMethod+0xa0>)
 800201a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800201e:	2b00      	cmp	r3, #0
 8002020:	dc11      	bgt.n	8002046 <runMeasurementMethod+0x42>
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <runMeasurementMethod+0xa0>)
 8002024:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800202c:	d135      	bne.n	800209a <runMeasurementMethod+0x96>
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <runMeasurementMethod+0xa0>)
 8002030:	791b      	ldrb	r3, [r3, #4]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d007      	beq.n	8002046 <runMeasurementMethod+0x42>
 8002036:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <runMeasurementMethod+0xa0>)
 8002038:	795b      	ldrb	r3, [r3, #5]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d003      	beq.n	8002046 <runMeasurementMethod+0x42>
 800203e:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <runMeasurementMethod+0xa0>)
 8002040:	799b      	ldrb	r3, [r3, #6]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d129      	bne.n	800209a <runMeasurementMethod+0x96>
		// check, if there isn't new user update before starting measurement
		if (newDataInBuffer()) {
 8002046:	f7fe fecb 	bl	8000de0 <newDataInBuffer>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d00b      	beq.n	8002068 <runMeasurementMethod+0x64>
			parseText(huart3);
 8002050:	4c15      	ldr	r4, [pc, #84]	; (80020a8 <runMeasurementMethod+0xa4>)
 8002052:	4668      	mov	r0, sp
 8002054:	f104 0310 	add.w	r3, r4, #16
 8002058:	2270      	movs	r2, #112	; 0x70
 800205a:	4619      	mov	r1, r3
 800205c:	f007 fd7e 	bl	8009b5c <memcpy>
 8002060:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002064:	f7fe fad4 	bl	8000610 <parseText>
		}
		// also update the state
		if (stateCanBeUpdated()) {
 8002068:	f000 fa3c 	bl	80024e4 <stateCanBeUpdated>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <runMeasurementMethod+0x72>
			updateState();
 8002072:	f000 fa5f 	bl	8002534 <updateState>
		}
		if (state.extAdcActiveState == 1) {
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <runMeasurementMethod+0xa0>)
 8002078:	791b      	ldrb	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d101      	bne.n	8002082 <runMeasurementMethod+0x7e>
			measureWithExtADC();
 800207e:	f000 f815 	bl	80020ac <measureWithExtADC>
		}
		if (state.intAdcActiveState == 1) {
 8002082:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <runMeasurementMethod+0xa0>)
 8002084:	795b      	ldrb	r3, [r3, #5]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <runMeasurementMethod+0x8a>
			measureWithIntADC();
 800208a:	f000 f83d 	bl	8002108 <measureWithIntADC>
		}
		if (state.compActiveState == 1) {
 800208e:	4b05      	ldr	r3, [pc, #20]	; (80020a4 <runMeasurementMethod+0xa0>)
 8002090:	799b      	ldrb	r3, [r3, #6]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d101      	bne.n	800209a <runMeasurementMethod+0x96>
			measureWithComp();
 8002096:	f000 f85b 	bl	8002150 <measureWithComp>
		}
	}
}
 800209a:	bf00      	nop
 800209c:	3704      	adds	r7, #4
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd90      	pop	{r4, r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2002f1a8 	.word	0x2002f1a8
 80020a8:	2005a4f0 	.word	0x2005a4f0

080020ac <measureWithExtADC>:


void measureWithExtADC() {
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	// visualise with green color
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_1.uint8, samplesPerPeriod);
 80020b0:	f64a 4244 	movw	r2, #44100	; 0xac44
 80020b4:	490f      	ldr	r1, [pc, #60]	; (80020f4 <measureWithExtADC+0x48>)
 80020b6:	4810      	ldr	r0, [pc, #64]	; (80020f8 <measureWithExtADC+0x4c>)
 80020b8:	f004 f94a 	bl	8006350 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 80020bc:	2100      	movs	r1, #0
 80020be:	480f      	ldr	r0, [pc, #60]	; (80020fc <measureWithExtADC+0x50>)
 80020c0:	f004 fefe 	bl	8006ec0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 80020c4:	2104      	movs	r1, #4
 80020c6:	480d      	ldr	r0, [pc, #52]	; (80020fc <measureWithExtADC+0x50>)
 80020c8:	f004 fefa 	bl	8006ec0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 80020cc:	2100      	movs	r1, #0
 80020ce:	480c      	ldr	r0, [pc, #48]	; (8002100 <measureWithExtADC+0x54>)
 80020d0:	f004 fef6 	bl	8006ec0 <HAL_TIM_PWM_Start_IT>
	set_LED2(1);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f7fe ffb3 	bl	8001040 <set_LED2>
	set_LED1(0, 1, 0); // v
 80020da:	2200      	movs	r2, #0
 80020dc:	2101      	movs	r1, #1
 80020de:	2000      	movs	r0, #0
 80020e0:	f7fe ff8a 	bl	8000ff8 <set_LED1>
	state.extAdcMeasuring = 1;
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <measureWithExtADC+0x58>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	71da      	strb	r2, [r3, #7]
	//keep "preparedToRunMeasurementPhase" low -> when mode is 1, in interrupt it can be set to high...
	state.preparedToRunMeasurementPhase = 0;
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <measureWithExtADC+0x58>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	765a      	strb	r2, [r3, #25]
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20044abc 	.word	0x20044abc
 80020f8:	2005a848 	.word	0x2005a848
 80020fc:	2005a808 	.word	0x2005a808
 8002100:	2005a470 	.word	0x2005a470
 8002104:	2002f1a8 	.word	0x2002f1a8

08002108 <measureWithIntADC>:

void measureWithIntADC() {
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2101      	movs	r1, #1
 8002110:	2000      	movs	r0, #0
 8002112:	f7fe ff71 	bl	8000ff8 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_1.uint16, samplesPerPeriod);
 8002116:	f64a 4244 	movw	r2, #44100	; 0xac44
 800211a:	4909      	ldr	r1, [pc, #36]	; (8002140 <measureWithIntADC+0x38>)
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <measureWithIntADC+0x3c>)
 800211e:	f001 fc09 	bl	8003934 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 8002122:	4809      	ldr	r0, [pc, #36]	; (8002148 <measureWithIntADC+0x40>)
 8002124:	f004 fe4c 	bl	8006dc0 <HAL_TIM_Base_Start_IT>
	set_LED3(1);
 8002128:	2001      	movs	r0, #1
 800212a:	f7fe ff9b 	bl	8001064 <set_LED3>
	state.intAdcMeasuring = 1;
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <measureWithIntADC+0x44>)
 8002130:	2201      	movs	r2, #1
 8002132:	721a      	strb	r2, [r3, #8]
	//keep "preparedToRunMeasurementPhase" low -> when mode is 1, in interrupt it can be set to high...
	state.preparedToRunMeasurementPhase = 0;
 8002134:	4b05      	ldr	r3, [pc, #20]	; (800214c <measureWithIntADC+0x44>)
 8002136:	2200      	movs	r2, #0
 8002138:	765a      	strb	r2, [r3, #25]
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	2002f234 	.word	0x2002f234
 8002144:	2005a63c 	.word	0x2005a63c
 8002148:	2005a7c8 	.word	0x2005a7c8
 800214c:	2002f1a8 	.word	0x2002f1a8

08002150 <measureWithComp>:

void measureWithComp() {
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 8002154:	2200      	movs	r2, #0
 8002156:	2101      	movs	r1, #1
 8002158:	2000      	movs	r0, #0
 800215a:	f7fe ff4d 	bl	8000ff8 <set_LED1>
	// run the timer 4001 - 2 seconds for 2 kHz
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, buffer_comp, 4001);
 800215e:	f640 73a1 	movw	r3, #4001	; 0xfa1
 8002162:	4a08      	ldr	r2, [pc, #32]	; (8002184 <measureWithComp+0x34>)
 8002164:	2100      	movs	r1, #0
 8002166:	4808      	ldr	r0, [pc, #32]	; (8002188 <measureWithComp+0x38>)
 8002168:	f004 fffa 	bl	8007160 <HAL_TIM_IC_Start_DMA>
	set_LED4(1);
 800216c:	2001      	movs	r0, #1
 800216e:	f7fe ff8b 	bl	8001088 <set_LED4>
	state.compMeasuring = 1;
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <measureWithComp+0x3c>)
 8002174:	2201      	movs	r2, #1
 8002176:	725a      	strb	r2, [r3, #9]
	//keep "preparedToRunMeasurementPhase" low -> when mode is 1, in interrupt it can be set to high...
	state.preparedToRunMeasurementPhase = 0;
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <measureWithComp+0x3c>)
 800217a:	2200      	movs	r2, #0
 800217c:	765a      	strb	r2, [r3, #25]
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	20000208 	.word	0x20000208
 8002188:	2005a8ac 	.word	0x2005a8ac
 800218c:	2002f1a8 	.word	0x2002f1a8

08002190 <measurementWithExtAdcDone>:

void measurementWithExtAdcDone() {
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0

	//stop DMA
	SPI1->CR2 &= ~SPI_CR2_RXDMAEN;
 8002194:	4b22      	ldr	r3, [pc, #136]	; (8002220 <measurementWithExtAdcDone+0x90>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a21      	ldr	r2, [pc, #132]	; (8002220 <measurementWithExtAdcDone+0x90>)
 800219a:	f023 0301 	bic.w	r3, r3, #1
 800219e:	6053      	str	r3, [r2, #4]

	filledBuffersExtADC++;
 80021a0:	4b20      	ldr	r3, [pc, #128]	; (8002224 <measurementWithExtAdcDone+0x94>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b1e      	ldr	r3, [pc, #120]	; (8002224 <measurementWithExtAdcDone+0x94>)
 80021aa:	701a      	strb	r2, [r3, #0]
	//first buffer is filled
	if (filledBuffersExtADC == 1) {
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <measurementWithExtAdcDone+0x94>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d106      	bne.n	80021c2 <measurementWithExtAdcDone+0x32>
		//start DMA again with second buffer
		HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_2.uint8, samplesPerPeriod);
 80021b4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80021b8:	491b      	ldr	r1, [pc, #108]	; (8002228 <measurementWithExtAdcDone+0x98>)
 80021ba:	481c      	ldr	r0, [pc, #112]	; (800222c <measurementWithExtAdcDone+0x9c>)
 80021bc:	f004 f8c8 	bl	8006350 <HAL_SPI_Receive_DMA>
			state.extAdcSetState = 0;
		} else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 80021c0:	e02b      	b.n	800221a <measurementWithExtAdcDone+0x8a>
	else if (filledBuffersExtADC == 2) {
 80021c2:	4b18      	ldr	r3, [pc, #96]	; (8002224 <measurementWithExtAdcDone+0x94>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d127      	bne.n	800221a <measurementWithExtAdcDone+0x8a>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80021ca:	2100      	movs	r1, #0
 80021cc:	4818      	ldr	r0, [pc, #96]	; (8002230 <measurementWithExtAdcDone+0xa0>)
 80021ce:	f004 ff01 	bl	8006fd4 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 80021d2:	2104      	movs	r1, #4
 80021d4:	4816      	ldr	r0, [pc, #88]	; (8002230 <measurementWithExtAdcDone+0xa0>)
 80021d6:	f004 fefd 	bl	8006fd4 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 80021da:	2100      	movs	r1, #0
 80021dc:	4815      	ldr	r0, [pc, #84]	; (8002234 <measurementWithExtAdcDone+0xa4>)
 80021de:	f004 fef9 	bl	8006fd4 <HAL_TIM_PWM_Stop_IT>
		set_LED2(0);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7fe ff2c 	bl	8001040 <set_LED2>
		state.extAdcReadyToSend = 1;
 80021e8:	4b13      	ldr	r3, [pc, #76]	; (8002238 <measurementWithExtAdcDone+0xa8>)
 80021ea:	2201      	movs	r2, #1
 80021ec:	705a      	strb	r2, [r3, #1]
		state.extAdcMeasuring = 0;
 80021ee:	4b12      	ldr	r3, [pc, #72]	; (8002238 <measurementWithExtAdcDone+0xa8>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	71da      	strb	r2, [r3, #7]
		filledBuffersExtADC = 0;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <measurementWithExtAdcDone+0x94>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
		goToIdleAfterMeasurement();
 80021fa:	f000 f8ed 	bl	80023d8 <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 80021fe:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <measurementWithExtAdcDone+0xa8>)
 8002200:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d106      	bne.n	8002216 <measurementWithExtAdcDone+0x86>
			state.extAdcActiveState = 0;
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <measurementWithExtAdcDone+0xa8>)
 800220a:	2200      	movs	r2, #0
 800220c:	711a      	strb	r2, [r3, #4]
			state.extAdcSetState = 0;
 800220e:	4b0a      	ldr	r3, [pc, #40]	; (8002238 <measurementWithExtAdcDone+0xa8>)
 8002210:	2200      	movs	r2, #0
 8002212:	729a      	strb	r2, [r3, #10]
}
 8002214:	e001      	b.n	800221a <measurementWithExtAdcDone+0x8a>
			prepareForPolarizationPhaseIfPossible();
 8002216:	f000 fb95 	bl	8002944 <prepareForPolarizationPhaseIfPossible>
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40013000 	.word	0x40013000
 8002224:	200001f8 	.word	0x200001f8
 8002228:	20019920 	.word	0x20019920
 800222c:	2005a848 	.word	0x2005a848
 8002230:	2005a808 	.word	0x2005a808
 8002234:	2005a470 	.word	0x2005a470
 8002238:	2002f1a8 	.word	0x2002f1a8

0800223c <measurementWithIntAdcDone>:

void measurementWithIntAdcDone() {
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	//stop the ADC when in interrupt
	//if function HAL_ADC_Stop_DMA(&hadc1) would be called, it wouldn't be possible to Start DMA again.
	ADC1->CR2 &= ~ADC_CR2_DMA;
 8002240:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <measurementWithIntAdcDone+0x7c>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a1c      	ldr	r2, [pc, #112]	; (80022b8 <measurementWithIntAdcDone+0x7c>)
 8002246:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800224a:	6093      	str	r3, [r2, #8]

	filledBuffersIntADC++;
 800224c:	4b1b      	ldr	r3, [pc, #108]	; (80022bc <measurementWithIntAdcDone+0x80>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	3301      	adds	r3, #1
 8002252:	b2da      	uxtb	r2, r3
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <measurementWithIntAdcDone+0x80>)
 8002256:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffersIntADC == 1) {
 8002258:	4b18      	ldr	r3, [pc, #96]	; (80022bc <measurementWithIntAdcDone+0x80>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d106      	bne.n	800226e <measurementWithIntAdcDone+0x32>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_2.uint16, samplesPerPeriod);
 8002260:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002264:	4916      	ldr	r1, [pc, #88]	; (80022c0 <measurementWithIntAdcDone+0x84>)
 8002266:	4817      	ldr	r0, [pc, #92]	; (80022c4 <measurementWithIntAdcDone+0x88>)
 8002268:	f001 fb64 	bl	8003934 <HAL_ADC_Start_DMA>
		// if there are remaning
		else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 800226c:	e022      	b.n	80022b4 <measurementWithIntAdcDone+0x78>
	else if (filledBuffersIntADC == 2) {
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <measurementWithIntAdcDone+0x80>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d11e      	bne.n	80022b4 <measurementWithIntAdcDone+0x78>
		HAL_TIM_Base_Stop_IT(&htim6);
 8002276:	4814      	ldr	r0, [pc, #80]	; (80022c8 <measurementWithIntAdcDone+0x8c>)
 8002278:	f004 fdcc 	bl	8006e14 <HAL_TIM_Base_Stop_IT>
		set_LED3(0);
 800227c:	2000      	movs	r0, #0
 800227e:	f7fe fef1 	bl	8001064 <set_LED3>
		filledBuffersIntADC = 0;
 8002282:	4b0e      	ldr	r3, [pc, #56]	; (80022bc <measurementWithIntAdcDone+0x80>)
 8002284:	2200      	movs	r2, #0
 8002286:	701a      	strb	r2, [r3, #0]
		state.intAdcReadyToSend = 1;
 8002288:	4b10      	ldr	r3, [pc, #64]	; (80022cc <measurementWithIntAdcDone+0x90>)
 800228a:	2201      	movs	r2, #1
 800228c:	709a      	strb	r2, [r3, #2]
		state.intAdcMeasuring = 0;
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <measurementWithIntAdcDone+0x90>)
 8002290:	2200      	movs	r2, #0
 8002292:	721a      	strb	r2, [r3, #8]
		goToIdleAfterMeasurement();
 8002294:	f000 f8a0 	bl	80023d8 <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <measurementWithIntAdcDone+0x90>)
 800229a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d106      	bne.n	80022b0 <measurementWithIntAdcDone+0x74>
			state.intAdcActiveState = 0;
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <measurementWithIntAdcDone+0x90>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	715a      	strb	r2, [r3, #5]
			state.intAdcSetState = 0;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <measurementWithIntAdcDone+0x90>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	72da      	strb	r2, [r3, #11]
}
 80022ae:	e001      	b.n	80022b4 <measurementWithIntAdcDone+0x78>
			prepareForPolarizationPhaseIfPossible();
 80022b0:	f000 fb48 	bl	8002944 <prepareForPolarizationPhaseIfPossible>
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40012000 	.word	0x40012000
 80022bc:	200001f9 	.word	0x200001f9
 80022c0:	20004098 	.word	0x20004098
 80022c4:	2005a63c 	.word	0x2005a63c
 80022c8:	2005a7c8 	.word	0x2005a7c8
 80022cc:	2002f1a8 	.word	0x2002f1a8

080022d0 <measurementWithCompDone>:

void measurementWithCompDone(TIM_HandleTypeDef *htim) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80022d8:	2100      	movs	r1, #0
 80022da:	4810      	ldr	r0, [pc, #64]	; (800231c <measurementWithCompDone+0x4c>)
 80022dc:	f005 f83c 	bl	8007358 <HAL_TIM_IC_Stop_DMA>
	set_LED4(0);
 80022e0:	2000      	movs	r0, #0
 80022e2:	f7fe fed1 	bl	8001088 <set_LED4>
	state.compReadyToSend = 1;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <measurementWithCompDone+0x50>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	70da      	strb	r2, [r3, #3]
	state.compMeasuring = 0;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <measurementWithCompDone+0x50>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	725a      	strb	r2, [r3, #9]

	goToIdleAfterMeasurement();
 80022f2:	f000 f871 	bl	80023d8 <goToIdleAfterMeasurement>

	//if freq should be measured only once, after the measurement, go to idle state
	if (state.remainingMeasurements == 0) {
 80022f6:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <measurementWithCompDone+0x50>)
 80022f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d106      	bne.n	800230e <measurementWithCompDone+0x3e>
		state.compActiveState = 0;
 8002300:	4b07      	ldr	r3, [pc, #28]	; (8002320 <measurementWithCompDone+0x50>)
 8002302:	2200      	movs	r2, #0
 8002304:	719a      	strb	r2, [r3, #6]
		state.compSetState = 0;
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <measurementWithCompDone+0x50>)
 8002308:	2200      	movs	r2, #0
 800230a:	731a      	strb	r2, [r3, #12]
	} else {
		prepareForPolarizationPhaseIfPossible();
	}
}
 800230c:	e001      	b.n	8002312 <measurementWithCompDone+0x42>
		prepareForPolarizationPhaseIfPossible();
 800230e:	f000 fb19 	bl	8002944 <prepareForPolarizationPhaseIfPossible>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2005a8ac 	.word	0x2005a8ac
 8002320:	2002f1a8 	.word	0x2002f1a8

08002324 <HAL_TIM_IC_CaptureCallback>:

//comparator finished measuring
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002334:	d102      	bne.n	800233c <HAL_TIM_IC_CaptureCallback+0x18>
		measurementWithCompDone(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7ff ffca 	bl	80022d0 <measurementWithCompDone>
	}
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_ADC_ConvCpltCallback>:

//intADC - buffer filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_ADC_ConvCpltCallback+0x20>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d101      	bne.n	800235a <HAL_ADC_ConvCpltCallback+0x16>
		measurementWithIntAdcDone();
 8002356:	f7ff ff71 	bl	800223c <measurementWithIntAdcDone>
	}
}
 800235a:	bf00      	nop
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40012000 	.word	0x40012000

08002368 <HAL_UART_RxCpltCallback>:

//char received with via USB
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b09f      	sub	sp, #124	; 0x7c
 800236c:	af1c      	add	r7, sp, #112	; 0x70
 800236e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_UART_RxCpltCallback+0x34>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10b      	bne.n	8002392 <HAL_UART_RxCpltCallback+0x2a>
		characterReceived(huart3);
 800237a:	4c09      	ldr	r4, [pc, #36]	; (80023a0 <HAL_UART_RxCpltCallback+0x38>)
 800237c:	4668      	mov	r0, sp
 800237e:	f104 0310 	add.w	r3, r4, #16
 8002382:	2270      	movs	r2, #112	; 0x70
 8002384:	4619      	mov	r1, r3
 8002386:	f007 fbe9 	bl	8009b5c <memcpy>
 800238a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800238e:	f7fe fd9f 	bl	8000ed0 <characterReceived>
	}
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bd90      	pop	{r4, r7, pc}
 800239a:	bf00      	nop
 800239c:	40004800 	.word	0x40004800
 80023a0:	2005a4f0 	.word	0x2005a4f0

080023a4 <HAL_SPI_RxCpltCallback>:

//extADC - buffer filled
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a04      	ldr	r2, [pc, #16]	; (80023c4 <HAL_SPI_RxCpltCallback+0x20>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_SPI_RxCpltCallback+0x16>
		measurementWithExtAdcDone();
 80023b6:	f7ff feeb 	bl	8002190 <measurementWithExtAdcDone>
	}
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40013000 	.word	0x40013000

080023c8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80023cc:	bf00      	nop
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
	...

080023d8 <goToIdleAfterMeasurement>:

#include "measruementController.h"
#include"main.h"


void goToIdleAfterMeasurement() {
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
	//only if all measurements were done
	if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 80023dc:	4b1f      	ldr	r3, [pc, #124]	; (800245c <goToIdleAfterMeasurement+0x84>)
 80023de:	79db      	ldrb	r3, [r3, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d138      	bne.n	8002456 <goToIdleAfterMeasurement+0x7e>
 80023e4:	4b1d      	ldr	r3, [pc, #116]	; (800245c <goToIdleAfterMeasurement+0x84>)
 80023e6:	7a1b      	ldrb	r3, [r3, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d134      	bne.n	8002456 <goToIdleAfterMeasurement+0x7e>
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <goToIdleAfterMeasurement+0x84>)
 80023ee:	7a5b      	ldrb	r3, [r3, #9]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d130      	bne.n	8002456 <goToIdleAfterMeasurement+0x7e>
		switchingCircuitIdle();
 80023f4:	f001 f946 	bl	8003684 <switchingCircuitIdle>
		set_LED1(0, 0, 0);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2100      	movs	r1, #0
 80023fc:	2000      	movs	r0, #0
 80023fe:	f7fe fdfb 	bl	8000ff8 <set_LED1>
		state.index++;
 8002402:	4b16      	ldr	r3, [pc, #88]	; (800245c <goToIdleAfterMeasurement+0x84>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	3301      	adds	r3, #1
 8002408:	4a14      	ldr	r2, [pc, #80]	; (800245c <goToIdleAfterMeasurement+0x84>)
 800240a:	61d3      	str	r3, [r2, #28]
		// -1 indicates infinity measurements
		if (canDecreaseRemainingMeasurements()) {
 800240c:	f000 fa6c 	bl	80028e8 <canDecreaseRemainingMeasurements>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d01f      	beq.n	8002456 <goToIdleAfterMeasurement+0x7e>
			state.remainingMeasurements--;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <goToIdleAfterMeasurement+0x84>)
 8002418:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29b      	uxth	r3, r3
 8002422:	b21a      	sxth	r2, r3
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <goToIdleAfterMeasurement+0x84>)
 8002426:	81da      	strh	r2, [r3, #14]
			//if this was the last measurement - set all states to 0
			if (state.remainingMeasurements == 0) {
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <goToIdleAfterMeasurement+0x84>)
 800242a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d111      	bne.n	8002456 <goToIdleAfterMeasurement+0x7e>
				state.extAdcActiveState = 0;
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <goToIdleAfterMeasurement+0x84>)
 8002434:	2200      	movs	r2, #0
 8002436:	711a      	strb	r2, [r3, #4]
				state.extAdcSetState = 0;
 8002438:	4b08      	ldr	r3, [pc, #32]	; (800245c <goToIdleAfterMeasurement+0x84>)
 800243a:	2200      	movs	r2, #0
 800243c:	729a      	strb	r2, [r3, #10]
				state.intAdcActiveState = 0;
 800243e:	4b07      	ldr	r3, [pc, #28]	; (800245c <goToIdleAfterMeasurement+0x84>)
 8002440:	2200      	movs	r2, #0
 8002442:	715a      	strb	r2, [r3, #5]
				state.intAdcSetState = 0;
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <goToIdleAfterMeasurement+0x84>)
 8002446:	2200      	movs	r2, #0
 8002448:	72da      	strb	r2, [r3, #11]
				state.compActiveState = 0;
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <goToIdleAfterMeasurement+0x84>)
 800244c:	2200      	movs	r2, #0
 800244e:	719a      	strb	r2, [r3, #6]
				state.compSetState = 0;
 8002450:	4b02      	ldr	r3, [pc, #8]	; (800245c <goToIdleAfterMeasurement+0x84>)
 8002452:	2200      	movs	r2, #0
 8002454:	731a      	strb	r2, [r3, #12]
			}
		}
	}
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	2002f1a8 	.word	0x2002f1a8

08002460 <setMeasurementPeriod>:



void setMeasurementPeriod(uint16_t time) {
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	80fb      	strh	r3, [r7, #6]
	if (time > 2000) {
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002470:	d90a      	bls.n	8002488 <setMeasurementPeriod+0x28>
		state.polarizationPeriod = time - 2100;
 8002472:	88fb      	ldrh	r3, [r7, #6]
 8002474:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 8002478:	b29b      	uxth	r3, r3
 800247a:	b21a      	sxth	r2, r3
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <setMeasurementPeriod+0x34>)
 800247e:	829a      	strh	r2, [r3, #20]
		state.wholeMeasurementPeriod = time;
 8002480:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <setMeasurementPeriod+0x34>)
 8002486:	825a      	strh	r2, [r3, #18]
	}
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	2002f1a8 	.word	0x2002f1a8

08002498 <changeStateMode>:
 *      Author: OBU
 */

#include "stateController.h"

void changeStateMode() {
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	if (state.waitForSync == 0) {
 800249c:	4b10      	ldr	r3, [pc, #64]	; (80024e0 <changeStateMode+0x48>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d114      	bne.n	80024ce <changeStateMode+0x36>
		state.extAdcSetState = 1;
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <changeStateMode+0x48>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	729a      	strb	r2, [r3, #10]
		state.intAdcSetState = 0;
 80024aa:	4b0d      	ldr	r3, [pc, #52]	; (80024e0 <changeStateMode+0x48>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	72da      	strb	r2, [r3, #11]
		state.compSetState = 0;
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <changeStateMode+0x48>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	731a      	strb	r2, [r3, #12]

		state.extAdcActiveState = 1;
 80024b6:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <changeStateMode+0x48>)
 80024b8:	2201      	movs	r2, #1
 80024ba:	711a      	strb	r2, [r3, #4]
		state.intAdcActiveState = 0;
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <changeStateMode+0x48>)
 80024be:	2200      	movs	r2, #0
 80024c0:	715a      	strb	r2, [r3, #5]
		state.compActiveState = 0;
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <changeStateMode+0x48>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	719a      	strb	r2, [r3, #6]

		setStateToMeasureOnSync();
 80024c8:	f000 f89c 	bl	8002604 <setStateToMeasureOnSync>
	} else if (state.waitForSync == 1) {
		state.waitForSync = 0;

	}
}
 80024cc:	e006      	b.n	80024dc <changeStateMode+0x44>
	} else if (state.waitForSync == 1) {
 80024ce:	4b04      	ldr	r3, [pc, #16]	; (80024e0 <changeStateMode+0x48>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d102      	bne.n	80024dc <changeStateMode+0x44>
		state.waitForSync = 0;
 80024d6:	4b02      	ldr	r3, [pc, #8]	; (80024e0 <changeStateMode+0x48>)
 80024d8:	2200      	movs	r2, #0
 80024da:	701a      	strb	r2, [r3, #0]
}
 80024dc:	bf00      	nop
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	2002f1a8 	.word	0x2002f1a8

080024e4 <stateCanBeUpdated>:

int stateCanBeUpdated() {
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
	return (state.measureTechniqueUpdated && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 80024e8:	4b11      	ldr	r3, [pc, #68]	; (8002530 <stateCanBeUpdated+0x4c>)
 80024ea:	7ddb      	ldrb	r3, [r3, #23]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d019      	beq.n	8002524 <stateCanBeUpdated+0x40>
 80024f0:	4b0f      	ldr	r3, [pc, #60]	; (8002530 <stateCanBeUpdated+0x4c>)
 80024f2:	79db      	ldrb	r3, [r3, #7]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d115      	bne.n	8002524 <stateCanBeUpdated+0x40>
 80024f8:	4b0d      	ldr	r3, [pc, #52]	; (8002530 <stateCanBeUpdated+0x4c>)
 80024fa:	7a1b      	ldrb	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d111      	bne.n	8002524 <stateCanBeUpdated+0x40>
 8002500:	4b0b      	ldr	r3, [pc, #44]	; (8002530 <stateCanBeUpdated+0x4c>)
 8002502:	7a5b      	ldrb	r3, [r3, #9]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10d      	bne.n	8002524 <stateCanBeUpdated+0x40>
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <stateCanBeUpdated+0x4c>)
 800250a:	785b      	ldrb	r3, [r3, #1]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <stateCanBeUpdated+0x40>
 8002510:	4b07      	ldr	r3, [pc, #28]	; (8002530 <stateCanBeUpdated+0x4c>)
 8002512:	789b      	ldrb	r3, [r3, #2]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d105      	bne.n	8002524 <stateCanBeUpdated+0x40>
 8002518:	4b05      	ldr	r3, [pc, #20]	; (8002530 <stateCanBeUpdated+0x4c>)
 800251a:	78db      	ldrb	r3, [r3, #3]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <stateCanBeUpdated+0x40>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <stateCanBeUpdated+0x42>
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	2002f1a8 	.word	0x2002f1a8

08002534 <updateState>:

void updateState() {
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
	state.remainingMeasurements = state.setMeasurements;
 8002538:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <updateState+0x3c>)
 800253a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <updateState+0x3c>)
 8002540:	81da      	strh	r2, [r3, #14]
	state.extAdcActiveState = state.extAdcSetState;
 8002542:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <updateState+0x3c>)
 8002544:	7a9a      	ldrb	r2, [r3, #10]
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <updateState+0x3c>)
 8002548:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = state.intAdcSetState;
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <updateState+0x3c>)
 800254c:	7ada      	ldrb	r2, [r3, #11]
 800254e:	4b08      	ldr	r3, [pc, #32]	; (8002570 <updateState+0x3c>)
 8002550:	715a      	strb	r2, [r3, #5]
	state.compActiveState = state.compSetState;
 8002552:	4b07      	ldr	r3, [pc, #28]	; (8002570 <updateState+0x3c>)
 8002554:	7b1a      	ldrb	r2, [r3, #12]
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <updateState+0x3c>)
 8002558:	719a      	strb	r2, [r3, #6]
	state.preparedToRunPolarizationPhase = 1;
 800255a:	4b05      	ldr	r3, [pc, #20]	; (8002570 <updateState+0x3c>)
 800255c:	2201      	movs	r2, #1
 800255e:	761a      	strb	r2, [r3, #24]
	state.measureTechniqueUpdated = 0;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <updateState+0x3c>)
 8002562:	2200      	movs	r2, #0
 8002564:	75da      	strb	r2, [r3, #23]
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	2002f1a8 	.word	0x2002f1a8

08002574 <setStateToDefault>:


void setStateToDefault() {
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
	state.waitForSync = 0;
 8002578:	4b21      	ldr	r3, [pc, #132]	; (8002600 <setStateToDefault+0x8c>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
	state.extAdcReadyToSend = 0;
 800257e:	4b20      	ldr	r3, [pc, #128]	; (8002600 <setStateToDefault+0x8c>)
 8002580:	2200      	movs	r2, #0
 8002582:	705a      	strb	r2, [r3, #1]
	state.intAdcReadyToSend = 0;
 8002584:	4b1e      	ldr	r3, [pc, #120]	; (8002600 <setStateToDefault+0x8c>)
 8002586:	2200      	movs	r2, #0
 8002588:	709a      	strb	r2, [r3, #2]
	state.compReadyToSend = 0;
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <setStateToDefault+0x8c>)
 800258c:	2200      	movs	r2, #0
 800258e:	70da      	strb	r2, [r3, #3]

	state.extAdcActiveState = 1;
 8002590:	4b1b      	ldr	r3, [pc, #108]	; (8002600 <setStateToDefault+0x8c>)
 8002592:	2201      	movs	r2, #1
 8002594:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = 0;
 8002596:	4b1a      	ldr	r3, [pc, #104]	; (8002600 <setStateToDefault+0x8c>)
 8002598:	2200      	movs	r2, #0
 800259a:	715a      	strb	r2, [r3, #5]
	state.compActiveState = 1;
 800259c:	4b18      	ldr	r3, [pc, #96]	; (8002600 <setStateToDefault+0x8c>)
 800259e:	2201      	movs	r2, #1
 80025a0:	719a      	strb	r2, [r3, #6]

	state.extAdcMeasuring = 0;
 80025a2:	4b17      	ldr	r3, [pc, #92]	; (8002600 <setStateToDefault+0x8c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	71da      	strb	r2, [r3, #7]
	state.intAdcMeasuring = 0;
 80025a8:	4b15      	ldr	r3, [pc, #84]	; (8002600 <setStateToDefault+0x8c>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	721a      	strb	r2, [r3, #8]
	state.compMeasuring = 0;
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <setStateToDefault+0x8c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	725a      	strb	r2, [r3, #9]

	state.extAdcSetState = 1;
 80025b4:	4b12      	ldr	r3, [pc, #72]	; (8002600 <setStateToDefault+0x8c>)
 80025b6:	2201      	movs	r2, #1
 80025b8:	729a      	strb	r2, [r3, #10]
	state.intAdcSetState = 0;
 80025ba:	4b11      	ldr	r3, [pc, #68]	; (8002600 <setStateToDefault+0x8c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	72da      	strb	r2, [r3, #11]
	state.compSetState = 0;
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <setStateToDefault+0x8c>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	731a      	strb	r2, [r3, #12]

	state.remainingMeasurements = -1;
 80025c6:	4b0e      	ldr	r3, [pc, #56]	; (8002600 <setStateToDefault+0x8c>)
 80025c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025cc:	81da      	strh	r2, [r3, #14]
	state.setMeasurements = -1;
 80025ce:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <setStateToDefault+0x8c>)
 80025d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d4:	821a      	strh	r2, [r3, #16]
	setMeasurementPeriod(8000);		//8 sec
 80025d6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80025da:	f7ff ff41 	bl	8002460 <setMeasurementPeriod>

	state.newDataInBuffer = 0;
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <setStateToDefault+0x8c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	759a      	strb	r2, [r3, #22]
	state.measureTechniqueUpdated = 0;
 80025e4:	4b06      	ldr	r3, [pc, #24]	; (8002600 <setStateToDefault+0x8c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	75da      	strb	r2, [r3, #23]
	state.preparedToRunPolarizationPhase = 1;
 80025ea:	4b05      	ldr	r3, [pc, #20]	; (8002600 <setStateToDefault+0x8c>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	761a      	strb	r2, [r3, #24]
	state.preparedToRunMeasurementPhase = 0;
 80025f0:	4b03      	ldr	r3, [pc, #12]	; (8002600 <setStateToDefault+0x8c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	765a      	strb	r2, [r3, #25]
	state.index = 0;
 80025f6:	4b02      	ldr	r3, [pc, #8]	; (8002600 <setStateToDefault+0x8c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	61da      	str	r2, [r3, #28]

}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	2002f1a8 	.word	0x2002f1a8

08002604 <setStateToMeasureOnSync>:

void setStateToMeasureOnSync() {
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
	state.waitForSync = 1;
 8002608:	4b28      	ldr	r3, [pc, #160]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]

	state.extAdcReadyToSend = 0;
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002610:	2200      	movs	r2, #0
 8002612:	705a      	strb	r2, [r3, #1]
	state.intAdcReadyToSend = 0;
 8002614:	4b25      	ldr	r3, [pc, #148]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002616:	2200      	movs	r2, #0
 8002618:	709a      	strb	r2, [r3, #2]
	state.compReadyToSend = 0;
 800261a:	4b24      	ldr	r3, [pc, #144]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 800261c:	2200      	movs	r2, #0
 800261e:	70da      	strb	r2, [r3, #3]

	state.extAdcActiveState = state.extAdcSetState;
 8002620:	4b22      	ldr	r3, [pc, #136]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002622:	7a9a      	ldrb	r2, [r3, #10]
 8002624:	4b21      	ldr	r3, [pc, #132]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002626:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = state.intAdcSetState;
 8002628:	4b20      	ldr	r3, [pc, #128]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 800262a:	7ada      	ldrb	r2, [r3, #11]
 800262c:	4b1f      	ldr	r3, [pc, #124]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 800262e:	715a      	strb	r2, [r3, #5]
	state.compActiveState = state.compSetState;
 8002630:	4b1e      	ldr	r3, [pc, #120]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002632:	7b1a      	ldrb	r2, [r3, #12]
 8002634:	4b1d      	ldr	r3, [pc, #116]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002636:	719a      	strb	r2, [r3, #6]

	state.extAdcMeasuring = 0;
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 800263a:	2200      	movs	r2, #0
 800263c:	71da      	strb	r2, [r3, #7]
	state.intAdcMeasuring = 0;
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002640:	2200      	movs	r2, #0
 8002642:	721a      	strb	r2, [r3, #8]
	state.compMeasuring = 0;
 8002644:	4b19      	ldr	r3, [pc, #100]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002646:	2200      	movs	r2, #0
 8002648:	725a      	strb	r2, [r3, #9]

	state.remainingMeasurements = -1;
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 800264c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002650:	81da      	strh	r2, [r3, #14]
	state.setMeasurements = -1;
 8002652:	4b16      	ldr	r3, [pc, #88]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002658:	821a      	strh	r2, [r3, #16]
	state.wholeMeasurementPeriod = 0; 	//in ms -> 5 sec
 800265a:	4b14      	ldr	r3, [pc, #80]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 800265c:	2200      	movs	r2, #0
 800265e:	825a      	strh	r2, [r3, #18]
	state.polarizationPeriod = 0; 		//in ms -> 3 sec
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002662:	2200      	movs	r2, #0
 8002664:	829a      	strh	r2, [r3, #20]

	remainingTimeToNextMeasurement = 0;
 8002666:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <setStateToMeasureOnSync+0xac>)
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
	remainingPolarizationTime = 0;
 800266c:	4b11      	ldr	r3, [pc, #68]	; (80026b4 <setStateToMeasureOnSync+0xb0>)
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
	setMeasurementPeriod(2000);
 8002672:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002676:	f7ff fef3 	bl	8002460 <setMeasurementPeriod>

	state.newDataInBuffer = 0;
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 800267c:	2200      	movs	r2, #0
 800267e:	759a      	strb	r2, [r3, #22]
	state.measureTechniqueUpdated = 0;
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002682:	2200      	movs	r2, #0
 8002684:	75da      	strb	r2, [r3, #23]
	state.preparedToRunPolarizationPhase = 0;
 8002686:	4b09      	ldr	r3, [pc, #36]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002688:	2200      	movs	r2, #0
 800268a:	761a      	strb	r2, [r3, #24]
	state.preparedToRunMeasurementPhase = 0;
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 800268e:	2200      	movs	r2, #0
 8002690:	765a      	strb	r2, [r3, #25]
	state.index = 0;
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <setStateToMeasureOnSync+0xa8>)
 8002694:	2200      	movs	r2, #0
 8002696:	61da      	str	r2, [r3, #28]

	set_LED1(0, 0, 0);
 8002698:	2200      	movs	r2, #0
 800269a:	2100      	movs	r1, #0
 800269c:	2000      	movs	r0, #0
 800269e:	f7fe fcab 	bl	8000ff8 <set_LED1>
	switchingCircuitIdle();
 80026a2:	f000 ffef 	bl	8003684 <switchingCircuitIdle>

}
 80026a6:	bf00      	nop
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	2002f1a8 	.word	0x2002f1a8
 80026b0:	20004094 	.word	0x20004094
 80026b4:	2000408c 	.word	0x2000408c

080026b8 <setStateToIdle>:

void setStateToIdle() {
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
	state.extAdcReadyToSend = 0;
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <setStateToIdle+0x88>)
 80026be:	2200      	movs	r2, #0
 80026c0:	705a      	strb	r2, [r3, #1]
	state.intAdcReadyToSend = 0;
 80026c2:	4b1f      	ldr	r3, [pc, #124]	; (8002740 <setStateToIdle+0x88>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	709a      	strb	r2, [r3, #2]
	state.compReadyToSend = 0;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <setStateToIdle+0x88>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	70da      	strb	r2, [r3, #3]

	state.extAdcActiveState = 0;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <setStateToIdle+0x88>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = 0;
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <setStateToIdle+0x88>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	715a      	strb	r2, [r3, #5]
	state.compActiveState = 0;
 80026da:	4b19      	ldr	r3, [pc, #100]	; (8002740 <setStateToIdle+0x88>)
 80026dc:	2200      	movs	r2, #0
 80026de:	719a      	strb	r2, [r3, #6]

	state.extAdcMeasuring = 0;
 80026e0:	4b17      	ldr	r3, [pc, #92]	; (8002740 <setStateToIdle+0x88>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	71da      	strb	r2, [r3, #7]
	state.intAdcMeasuring = 0;
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <setStateToIdle+0x88>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	721a      	strb	r2, [r3, #8]
	state.compMeasuring = 0;
 80026ec:	4b14      	ldr	r3, [pc, #80]	; (8002740 <setStateToIdle+0x88>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	725a      	strb	r2, [r3, #9]

	state.extAdcSetState = 0;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <setStateToIdle+0x88>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	729a      	strb	r2, [r3, #10]
	state.intAdcSetState = 0;
 80026f8:	4b11      	ldr	r3, [pc, #68]	; (8002740 <setStateToIdle+0x88>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	72da      	strb	r2, [r3, #11]
	state.compSetState = 0;
 80026fe:	4b10      	ldr	r3, [pc, #64]	; (8002740 <setStateToIdle+0x88>)
 8002700:	2200      	movs	r2, #0
 8002702:	731a      	strb	r2, [r3, #12]

	state.remainingMeasurements = 0;
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <setStateToIdle+0x88>)
 8002706:	2200      	movs	r2, #0
 8002708:	81da      	strh	r2, [r3, #14]
	state.setMeasurements = 0;
 800270a:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <setStateToIdle+0x88>)
 800270c:	2200      	movs	r2, #0
 800270e:	821a      	strh	r2, [r3, #16]
	state.wholeMeasurementPeriod = 0; 	//in ms -> 5 sec
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <setStateToIdle+0x88>)
 8002712:	2200      	movs	r2, #0
 8002714:	825a      	strh	r2, [r3, #18]
	state.polarizationPeriod = 0; 		//in ms -> 3 sec
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <setStateToIdle+0x88>)
 8002718:	2200      	movs	r2, #0
 800271a:	829a      	strh	r2, [r3, #20]

	state.measureTechniqueUpdated = 0;
 800271c:	4b08      	ldr	r3, [pc, #32]	; (8002740 <setStateToIdle+0x88>)
 800271e:	2200      	movs	r2, #0
 8002720:	75da      	strb	r2, [r3, #23]
	state.preparedToRunPolarizationPhase = 0;
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <setStateToIdle+0x88>)
 8002724:	2200      	movs	r2, #0
 8002726:	761a      	strb	r2, [r3, #24]
	state.preparedToRunMeasurementPhase = 0;
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <setStateToIdle+0x88>)
 800272a:	2200      	movs	r2, #0
 800272c:	765a      	strb	r2, [r3, #25]
	state.index = 0;
 800272e:	4b04      	ldr	r3, [pc, #16]	; (8002740 <setStateToIdle+0x88>)
 8002730:	2200      	movs	r2, #0
 8002732:	61da      	str	r2, [r3, #28]
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	2002f1a8 	.word	0x2002f1a8

08002744 <lastMeasurement>:


int lastMeasurement() {
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
	return (state.remainingMeasurements == 0);
 8002748:	4b06      	ldr	r3, [pc, #24]	; (8002764 <lastMeasurement+0x20>)
 800274a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800274e:	2b00      	cmp	r3, #0
 8002750:	bf0c      	ite	eq
 8002752:	2301      	moveq	r3, #1
 8002754:	2300      	movne	r3, #0
 8002756:	b2db      	uxtb	r3, r3
}
 8002758:	4618      	mov	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	2002f1a8 	.word	0x2002f1a8

08002768 <ploarizationCanRun>:


// polarization can run even if data are sending
int ploarizationCanRun() {
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
	return (state.waitForSync == 0 && remainingTimeToNextMeasurement == 0 && state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring);
 800276c:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <ploarizationCanRun+0x44>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d115      	bne.n	80027a0 <ploarizationCanRun+0x38>
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <ploarizationCanRun+0x48>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d111      	bne.n	80027a0 <ploarizationCanRun+0x38>
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <ploarizationCanRun+0x44>)
 800277e:	7e1b      	ldrb	r3, [r3, #24]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <ploarizationCanRun+0x38>
 8002784:	4b09      	ldr	r3, [pc, #36]	; (80027ac <ploarizationCanRun+0x44>)
 8002786:	79db      	ldrb	r3, [r3, #7]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d109      	bne.n	80027a0 <ploarizationCanRun+0x38>
 800278c:	4b07      	ldr	r3, [pc, #28]	; (80027ac <ploarizationCanRun+0x44>)
 800278e:	7a1b      	ldrb	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d105      	bne.n	80027a0 <ploarizationCanRun+0x38>
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <ploarizationCanRun+0x44>)
 8002796:	7a5b      	ldrb	r3, [r3, #9]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <ploarizationCanRun+0x38>
 800279c:	2301      	movs	r3, #1
 800279e:	e000      	b.n	80027a2 <ploarizationCanRun+0x3a>
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	2002f1a8 	.word	0x2002f1a8
 80027b0:	20004094 	.word	0x20004094

080027b4 <measurementCanRun>:

// measurement sequence can run if polarization can run and all the data
int measurementCanRun() {
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
	return (remainingPolarizationTime == 0 && state.preparedToRunMeasurementPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend
 80027b8:	4b13      	ldr	r3, [pc, #76]	; (8002808 <measurementCanRun+0x54>)
 80027ba:	681b      	ldr	r3, [r3, #0]
			&& !state.intAdcReadyToSend && !state.compReadyToSend);
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d11d      	bne.n	80027fc <measurementCanRun+0x48>
	return (remainingPolarizationTime == 0 && state.preparedToRunMeasurementPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <measurementCanRun+0x58>)
 80027c2:	7e5b      	ldrb	r3, [r3, #25]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d019      	beq.n	80027fc <measurementCanRun+0x48>
 80027c8:	4b10      	ldr	r3, [pc, #64]	; (800280c <measurementCanRun+0x58>)
 80027ca:	79db      	ldrb	r3, [r3, #7]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d115      	bne.n	80027fc <measurementCanRun+0x48>
 80027d0:	4b0e      	ldr	r3, [pc, #56]	; (800280c <measurementCanRun+0x58>)
 80027d2:	7a1b      	ldrb	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d111      	bne.n	80027fc <measurementCanRun+0x48>
 80027d8:	4b0c      	ldr	r3, [pc, #48]	; (800280c <measurementCanRun+0x58>)
 80027da:	7a5b      	ldrb	r3, [r3, #9]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10d      	bne.n	80027fc <measurementCanRun+0x48>
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <measurementCanRun+0x58>)
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <measurementCanRun+0x48>
			&& !state.intAdcReadyToSend && !state.compReadyToSend);
 80027e8:	4b08      	ldr	r3, [pc, #32]	; (800280c <measurementCanRun+0x58>)
 80027ea:	789b      	ldrb	r3, [r3, #2]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <measurementCanRun+0x48>
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <measurementCanRun+0x58>)
 80027f2:	78db      	ldrb	r3, [r3, #3]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <measurementCanRun+0x48>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <measurementCanRun+0x4a>
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	2000408c 	.word	0x2000408c
 800280c:	2002f1a8 	.word	0x2002f1a8

08002810 <stateIsIdle>:

int stateIsIdle() {
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
	return (!state.extAdcActiveState && !state.intAdcActiveState && !state.compActiveState && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <stateIsIdle+0x44>)
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d115      	bne.n	8002848 <stateIsIdle+0x38>
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <stateIsIdle+0x44>)
 800281e:	795b      	ldrb	r3, [r3, #5]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d111      	bne.n	8002848 <stateIsIdle+0x38>
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <stateIsIdle+0x44>)
 8002826:	799b      	ldrb	r3, [r3, #6]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10d      	bne.n	8002848 <stateIsIdle+0x38>
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <stateIsIdle+0x44>)
 800282e:	785b      	ldrb	r3, [r3, #1]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <stateIsIdle+0x38>
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <stateIsIdle+0x44>)
 8002836:	789b      	ldrb	r3, [r3, #2]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <stateIsIdle+0x38>
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <stateIsIdle+0x44>)
 800283e:	78db      	ldrb	r3, [r3, #3]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <stateIsIdle+0x38>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <stateIsIdle+0x3a>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	2002f1a8 	.word	0x2002f1a8

08002858 <isWaitingForSync>:

int isWaitingForSync() {
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
	return (state.waitForSync == 1 && !isMeasuring() && !isSending());
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <isWaitingForSync+0x2c>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d10b      	bne.n	800287c <isWaitingForSync+0x24>
 8002864:	f000 f810 	bl	8002888 <isMeasuring>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <isWaitingForSync+0x24>
 800286e:	f000 f823 	bl	80028b8 <isSending>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <isWaitingForSync+0x24>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <isWaitingForSync+0x26>
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2002f1a8 	.word	0x2002f1a8

08002888 <isMeasuring>:

int  isMeasuring(){
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
	return (state.extAdcMeasuring || state.intAdcMeasuring || state.compMeasuring);
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <isMeasuring+0x2c>)
 800288e:	79db      	ldrb	r3, [r3, #7]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d107      	bne.n	80028a4 <isMeasuring+0x1c>
 8002894:	4b07      	ldr	r3, [pc, #28]	; (80028b4 <isMeasuring+0x2c>)
 8002896:	7a1b      	ldrb	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d103      	bne.n	80028a4 <isMeasuring+0x1c>
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <isMeasuring+0x2c>)
 800289e:	7a5b      	ldrb	r3, [r3, #9]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <isMeasuring+0x20>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <isMeasuring+0x22>
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	2002f1a8 	.word	0x2002f1a8

080028b8 <isSending>:
int isSending() {
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
	return (state.extAdcReadyToSend || state.intAdcReadyToSend || state.compReadyToSend);
 80028bc:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <isSending+0x2c>)
 80028be:	785b      	ldrb	r3, [r3, #1]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d107      	bne.n	80028d4 <isSending+0x1c>
 80028c4:	4b07      	ldr	r3, [pc, #28]	; (80028e4 <isSending+0x2c>)
 80028c6:	789b      	ldrb	r3, [r3, #2]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d103      	bne.n	80028d4 <isSending+0x1c>
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <isSending+0x2c>)
 80028ce:	78db      	ldrb	r3, [r3, #3]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <isSending+0x20>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <isSending+0x22>
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	2002f1a8 	.word	0x2002f1a8

080028e8 <canDecreaseRemainingMeasurements>:

int canDecreaseRemainingMeasurements() {
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
	return ((state.remainingMeasurements > 0) && (state.intAdcActiveState || state.extAdcActiveState || state.compActiveState));
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <canDecreaseRemainingMeasurements+0x38>)
 80028ee:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	dd0d      	ble.n	8002912 <canDecreaseRemainingMeasurements+0x2a>
 80028f6:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <canDecreaseRemainingMeasurements+0x38>)
 80028f8:	795b      	ldrb	r3, [r3, #5]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d107      	bne.n	800290e <canDecreaseRemainingMeasurements+0x26>
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <canDecreaseRemainingMeasurements+0x38>)
 8002900:	791b      	ldrb	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d103      	bne.n	800290e <canDecreaseRemainingMeasurements+0x26>
 8002906:	4b06      	ldr	r3, [pc, #24]	; (8002920 <canDecreaseRemainingMeasurements+0x38>)
 8002908:	799b      	ldrb	r3, [r3, #6]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <canDecreaseRemainingMeasurements+0x2a>
 800290e:	2301      	movs	r3, #1
 8002910:	e000      	b.n	8002914 <canDecreaseRemainingMeasurements+0x2c>
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	2002f1a8 	.word	0x2002f1a8

08002924 <isModeMeasureOnSync>:

int isModeMeasureOnSync() {
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
	return (state.waitForSync == 1);
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <isModeMeasureOnSync+0x1c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
}
 8002936:	4618      	mov	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	2002f1a8 	.word	0x2002f1a8

08002944 <prepareForPolarizationPhaseIfPossible>:


void prepareForPolarizationPhaseIfPossible() {
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
	if ((state.waitForSync == 0) && (state.remainingMeasurements != 0) && (state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8002948:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <prepareForPolarizationPhaseIfPossible+0x40>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d113      	bne.n	8002978 <prepareForPolarizationPhaseIfPossible+0x34>
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <prepareForPolarizationPhaseIfPossible+0x40>)
 8002952:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00e      	beq.n	8002978 <prepareForPolarizationPhaseIfPossible+0x34>
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <prepareForPolarizationPhaseIfPossible+0x40>)
 800295c:	79db      	ldrb	r3, [r3, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <prepareForPolarizationPhaseIfPossible+0x34>
 8002962:	4b08      	ldr	r3, [pc, #32]	; (8002984 <prepareForPolarizationPhaseIfPossible+0x40>)
 8002964:	7a1b      	ldrb	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d106      	bne.n	8002978 <prepareForPolarizationPhaseIfPossible+0x34>
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <prepareForPolarizationPhaseIfPossible+0x40>)
 800296c:	7a5b      	ldrb	r3, [r3, #9]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d102      	bne.n	8002978 <prepareForPolarizationPhaseIfPossible+0x34>
		state.preparedToRunPolarizationPhase = 1;
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <prepareForPolarizationPhaseIfPossible+0x40>)
 8002974:	2201      	movs	r2, #1
 8002976:	761a      	strb	r2, [r3, #24]
	}
}
 8002978:	bf00      	nop
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	2002f1a8 	.word	0x2002f1a8

08002988 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_MspInit+0x44>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <HAL_MspInit+0x44>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <HAL_MspInit+0x44>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	607b      	str	r3, [r7, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_MspInit+0x44>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a08      	ldr	r2, [pc, #32]	; (80029cc <HAL_MspInit+0x44>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_MspInit+0x44>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	603b      	str	r3, [r7, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800

080029d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0314 	add.w	r3, r7, #20
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a2c      	ldr	r2, [pc, #176]	; (8002aa0 <HAL_ADC_MspInit+0xd0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d152      	bne.n	8002a98 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029f2:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <HAL_ADC_MspInit+0xd4>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	4a2b      	ldr	r2, [pc, #172]	; (8002aa4 <HAL_ADC_MspInit+0xd4>)
 80029f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fc:	6453      	str	r3, [r2, #68]	; 0x44
 80029fe:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_ADC_MspInit+0xd4>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_ADC_MspInit+0xd4>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a25      	ldr	r2, [pc, #148]	; (8002aa4 <HAL_ADC_MspInit+0xd4>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b23      	ldr	r3, [pc, #140]	; (8002aa4 <HAL_ADC_MspInit+0xd4>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 8002a22:	2301      	movs	r3, #1
 8002a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a26:	2303      	movs	r3, #3
 8002a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 8002a2e:	f107 0314 	add.w	r3, r7, #20
 8002a32:	4619      	mov	r1, r3
 8002a34:	481c      	ldr	r0, [pc, #112]	; (8002aa8 <HAL_ADC_MspInit+0xd8>)
 8002a36:	f001 ffef 	bl	8004a18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a3c:	4a1c      	ldr	r2, [pc, #112]	; (8002ab0 <HAL_ADC_MspInit+0xe0>)
 8002a3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a46:	4b19      	ldr	r3, [pc, #100]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a4c:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a58:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a60:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a68:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a6a:	4b10      	ldr	r3, [pc, #64]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a70:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a76:	4b0d      	ldr	r3, [pc, #52]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a7c:	480b      	ldr	r0, [pc, #44]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a7e:	f001 fc33 	bl	80042e8 <HAL_DMA_Init>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8002a88:	f7ff fc9e 	bl	80023c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a07      	ldr	r2, [pc, #28]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a90:	639a      	str	r2, [r3, #56]	; 0x38
 8002a92:	4a06      	ldr	r2, [pc, #24]	; (8002aac <HAL_ADC_MspInit+0xdc>)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a98:	bf00      	nop
 8002a9a:	3728      	adds	r7, #40	; 0x28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40012000 	.word	0x40012000
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	2005a768 	.word	0x2005a768
 8002ab0:	40026470 	.word	0x40026470

08002ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08c      	sub	sp, #48	; 0x30
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 031c 	add.w	r3, r7, #28
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
 8002aca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a3d      	ldr	r2, [pc, #244]	; (8002bc8 <HAL_I2C_MspInit+0x114>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d128      	bne.n	8002b28 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ada:	4a3c      	ldr	r2, [pc, #240]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002adc:	f043 0302 	orr.w	r3, r3, #2
 8002ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aee:	23c0      	movs	r3, #192	; 0xc0
 8002af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002af2:	2312      	movs	r3, #18
 8002af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002af6:	2301      	movs	r3, #1
 8002af8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afa:	2303      	movs	r3, #3
 8002afc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002afe:	2304      	movs	r3, #4
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b02:	f107 031c 	add.w	r3, r7, #28
 8002b06:	4619      	mov	r1, r3
 8002b08:	4831      	ldr	r0, [pc, #196]	; (8002bd0 <HAL_I2C_MspInit+0x11c>)
 8002b0a:	f001 ff85 	bl	8004a18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	4a2e      	ldr	r2, [pc, #184]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b18:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1a:	4b2c      	ldr	r3, [pc, #176]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b26:	e04a      	b.n	8002bbe <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a29      	ldr	r2, [pc, #164]	; (8002bd4 <HAL_I2C_MspInit+0x120>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d145      	bne.n	8002bbe <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b32:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a25      	ldr	r2, [pc, #148]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b23      	ldr	r3, [pc, #140]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4a:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	4a1f      	ldr	r2, [pc, #124]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6313      	str	r3, [r2, #48]	; 0x30
 8002b56:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b68:	2312      	movs	r3, #18
 8002b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b70:	2303      	movs	r3, #3
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b74:	2304      	movs	r3, #4
 8002b76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b78:	f107 031c 	add.w	r3, r7, #28
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4816      	ldr	r0, [pc, #88]	; (8002bd8 <HAL_I2C_MspInit+0x124>)
 8002b80:	f001 ff4a 	bl	8004a18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b8a:	2312      	movs	r3, #18
 8002b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b92:	2303      	movs	r3, #3
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b96:	2304      	movs	r3, #4
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b9a:	f107 031c 	add.w	r3, r7, #28
 8002b9e:	4619      	mov	r1, r3
 8002ba0:	480e      	ldr	r0, [pc, #56]	; (8002bdc <HAL_I2C_MspInit+0x128>)
 8002ba2:	f001 ff39 	bl	8004a18 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	4a08      	ldr	r2, [pc, #32]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002bac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_I2C_MspInit+0x118>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
}
 8002bbe:	bf00      	nop
 8002bc0:	3730      	adds	r7, #48	; 0x30
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40005400 	.word	0x40005400
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40005c00 	.word	0x40005c00
 8002bd8:	40020800 	.word	0x40020800
 8002bdc:	40020000 	.word	0x40020000

08002be0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08c      	sub	sp, #48	; 0x30
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be8:	f107 031c 	add.w	r3, r7, #28
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a46      	ldr	r2, [pc, #280]	; (8002d18 <HAL_SPI_MspInit+0x138>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d159      	bne.n	8002cb6 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c02:	4b46      	ldr	r3, [pc, #280]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c06:	4a45      	ldr	r2, [pc, #276]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002c08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002c0e:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a3f      	ldr	r2, [pc, #252]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b3d      	ldr	r3, [pc, #244]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	617b      	str	r3, [r7, #20]
 8002c30:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 8002c32:	23b0      	movs	r3, #176	; 0xb0
 8002c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c42:	2305      	movs	r3, #5
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 031c 	add.w	r3, r7, #28
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4834      	ldr	r0, [pc, #208]	; (8002d20 <HAL_SPI_MspInit+0x140>)
 8002c4e:	f001 fee3 	bl	8004a18 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8002c52:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002c54:	4a34      	ldr	r2, [pc, #208]	; (8002d28 <HAL_SPI_MspInit+0x148>)
 8002c56:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002c58:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002c5a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002c5e:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c60:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c66:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c72:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c74:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002c76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c7a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c7c:	4b29      	ldr	r3, [pc, #164]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c82:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c8a:	4b26      	ldr	r3, [pc, #152]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002c8c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c90:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002c98:	4822      	ldr	r0, [pc, #136]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002c9a:	f001 fb25 	bl	80042e8 <HAL_DMA_Init>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 8002ca4:	f7ff fb90 	bl	80023c8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a1e      	ldr	r2, [pc, #120]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002cac:	659a      	str	r2, [r3, #88]	; 0x58
 8002cae:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <HAL_SPI_MspInit+0x144>)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002cb4:	e02c      	b.n	8002d10 <HAL_SPI_MspInit+0x130>
  else if(hspi->Instance==SPI4)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a1c      	ldr	r2, [pc, #112]	; (8002d2c <HAL_SPI_MspInit+0x14c>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d127      	bne.n	8002d10 <HAL_SPI_MspInit+0x130>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002cc0:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc4:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002cc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cca:	6453      	str	r3, [r2, #68]	; 0x44
 8002ccc:	4b13      	ldr	r3, [pc, #76]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	4a0f      	ldr	r2, [pc, #60]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002cde:	f043 0310 	orr.w	r3, r3, #16
 8002ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce4:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <HAL_SPI_MspInit+0x13c>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002cf0:	2374      	movs	r3, #116	; 0x74
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d00:	2305      	movs	r3, #5
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d04:	f107 031c 	add.w	r3, r7, #28
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4809      	ldr	r0, [pc, #36]	; (8002d30 <HAL_SPI_MspInit+0x150>)
 8002d0c:	f001 fe84 	bl	8004a18 <HAL_GPIO_Init>
}
 8002d10:	bf00      	nop
 8002d12:	3730      	adds	r7, #48	; 0x30
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40013000 	.word	0x40013000
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	40020000 	.word	0x40020000
 8002d24:	2005a96c 	.word	0x2005a96c
 8002d28:	40026440 	.word	0x40026440
 8002d2c:	40013400 	.word	0x40013400
 8002d30:	40021000 	.word	0x40021000

08002d34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a45      	ldr	r2, [pc, #276]	; (8002e58 <HAL_TIM_Base_MspInit+0x124>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d11c      	bne.n	8002d80 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d46:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	4a44      	ldr	r2, [pc, #272]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	6453      	str	r3, [r2, #68]	; 0x44
 8002d52:	4b42      	ldr	r3, [pc, #264]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	61fb      	str	r3, [r7, #28]
 8002d5c:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2100      	movs	r1, #0
 8002d62:	2018      	movs	r0, #24
 8002d64:	f001 fa89 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002d68:	2018      	movs	r0, #24
 8002d6a:	f001 faa2 	bl	80042b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	2019      	movs	r0, #25
 8002d74:	f001 fa81 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d78:	2019      	movs	r0, #25
 8002d7a:	f001 fa9a 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002d7e:	e066      	b.n	8002e4e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM3)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a36      	ldr	r2, [pc, #216]	; (8002e60 <HAL_TIM_Base_MspInit+0x12c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d114      	bne.n	8002db4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d8a:	4b34      	ldr	r3, [pc, #208]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a33      	ldr	r2, [pc, #204]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002d90:	f043 0302 	orr.w	r3, r3, #2
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b31      	ldr	r3, [pc, #196]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	61bb      	str	r3, [r7, #24]
 8002da0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2101      	movs	r1, #1
 8002da6:	201d      	movs	r0, #29
 8002da8:	f001 fa67 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dac:	201d      	movs	r0, #29
 8002dae:	f001 fa80 	bl	80042b2 <HAL_NVIC_EnableIRQ>
}
 8002db2:	e04c      	b.n	8002e4e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM5)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a2a      	ldr	r2, [pc, #168]	; (8002e64 <HAL_TIM_Base_MspInit+0x130>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d114      	bne.n	8002de8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002dbe:	4b27      	ldr	r3, [pc, #156]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a26      	ldr	r2, [pc, #152]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002dc4:	f043 0308 	orr.w	r3, r3, #8
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b24      	ldr	r3, [pc, #144]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 0308 	and.w	r3, r3, #8
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2101      	movs	r1, #1
 8002dda:	2032      	movs	r0, #50	; 0x32
 8002ddc:	f001 fa4d 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002de0:	2032      	movs	r0, #50	; 0x32
 8002de2:	f001 fa66 	bl	80042b2 <HAL_NVIC_EnableIRQ>
}
 8002de6:	e032      	b.n	8002e4e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM6)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1e      	ldr	r2, [pc, #120]	; (8002e68 <HAL_TIM_Base_MspInit+0x134>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d114      	bne.n	8002e1c <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002df8:	f043 0310 	orr.w	r3, r3, #16
 8002dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dfe:	4b17      	ldr	r3, [pc, #92]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f003 0310 	and.w	r3, r3, #16
 8002e06:	613b      	str	r3, [r7, #16]
 8002e08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	2036      	movs	r0, #54	; 0x36
 8002e10:	f001 fa33 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e14:	2036      	movs	r0, #54	; 0x36
 8002e16:	f001 fa4c 	bl	80042b2 <HAL_NVIC_EnableIRQ>
}
 8002e1a:	e018      	b.n	8002e4e <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM8)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a12      	ldr	r2, [pc, #72]	; (8002e6c <HAL_TIM_Base_MspInit+0x138>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d113      	bne.n	8002e4e <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2a:	4a0c      	ldr	r2, [pc, #48]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6453      	str	r3, [r2, #68]	; 0x44
 8002e32:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <HAL_TIM_Base_MspInit+0x128>)
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2101      	movs	r1, #1
 8002e42:	202e      	movs	r0, #46	; 0x2e
 8002e44:	f001 fa19 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002e48:	202e      	movs	r0, #46	; 0x2e
 8002e4a:	f001 fa32 	bl	80042b2 <HAL_NVIC_EnableIRQ>
}
 8002e4e:	bf00      	nop
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40010000 	.word	0x40010000
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40000c00 	.word	0x40000c00
 8002e68:	40001000 	.word	0x40001000
 8002e6c:	40010400 	.word	0x40010400

08002e70 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 0314 	add.w	r3, r7, #20
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e90:	d160      	bne.n	8002f54 <HAL_TIM_IC_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e92:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_TIM_IC_MspInit+0xec>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a31      	ldr	r2, [pc, #196]	; (8002f5c <HAL_TIM_IC_MspInit+0xec>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_TIM_IC_MspInit+0xec>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eaa:	4b2c      	ldr	r3, [pc, #176]	; (8002f5c <HAL_TIM_IC_MspInit+0xec>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <HAL_TIM_IC_MspInit+0xec>)
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <HAL_TIM_IC_MspInit+0xec>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8002ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	4619      	mov	r1, r3
 8002ede:	4820      	ldr	r0, [pc, #128]	; (8002f60 <HAL_TIM_IC_MspInit+0xf0>)
 8002ee0:	f001 fd9a 	bl	8004a18 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002ee4:	4b1f      	ldr	r3, [pc, #124]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002ee6:	4a20      	ldr	r2, [pc, #128]	; (8002f68 <HAL_TIM_IC_MspInit+0xf8>)
 8002ee8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002eea:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002eec:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002ef0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ef2:	4b1c      	ldr	r3, [pc, #112]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef8:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002efe:	4b19      	ldr	r3, [pc, #100]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002f00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f04:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f06:	4b17      	ldr	r3, [pc, #92]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002f08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f0c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f0e:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002f10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f14:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002f16:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002f28:	480e      	ldr	r0, [pc, #56]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002f2a:	f001 f9dd 	bl	80042e8 <HAL_DMA_Init>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <HAL_TIM_IC_MspInit+0xc8>
    {
      Error_Handler();
 8002f34:	f7ff fa48 	bl	80023c8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24
 8002f3e:	4a09      	ldr	r2, [pc, #36]	; (8002f64 <HAL_TIM_IC_MspInit+0xf4>)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002f44:	2200      	movs	r2, #0
 8002f46:	2101      	movs	r1, #1
 8002f48:	201c      	movs	r0, #28
 8002f4a:	f001 f996 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f4e:	201c      	movs	r0, #28
 8002f50:	f001 f9af 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f54:	bf00      	nop
 8002f56:	3728      	adds	r7, #40	; 0x28
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020000 	.word	0x40020000
 8002f64:	2005a390 	.word	0x2005a390
 8002f68:	40026088 	.word	0x40026088

08002f6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0d      	ldr	r2, [pc, #52]	; (8002fb0 <HAL_TIM_PWM_MspInit+0x44>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d113      	bne.n	8002fa6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_TIM_PWM_MspInit+0x48>)
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <HAL_TIM_PWM_MspInit+0x48>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6413      	str	r3, [r2, #64]	; 0x40
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	; (8002fb4 <HAL_TIM_PWM_MspInit+0x48>)
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	60fb      	str	r3, [r7, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002f96:	2200      	movs	r2, #0
 8002f98:	2101      	movs	r1, #1
 8002f9a:	201e      	movs	r0, #30
 8002f9c:	f001 f96d 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002fa0:	201e      	movs	r0, #30
 8002fa2:	f001 f986 	bl	80042b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002fa6:	bf00      	nop
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40000800 	.word	0x40000800
 8002fb4:	40023800 	.word	0x40023800

08002fb8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b08c      	sub	sp, #48	; 0x30
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	f107 031c 	add.w	r3, r7, #28
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a45      	ldr	r2, [pc, #276]	; (80030ec <HAL_TIM_MspPostInit+0x134>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d11d      	bne.n	8003016 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fda:	4b45      	ldr	r3, [pc, #276]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	4a44      	ldr	r2, [pc, #272]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 8002fe0:	f043 0310 	orr.w	r3, r3, #16
 8002fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe6:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	61bb      	str	r3, [r7, #24]
 8002ff0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 8002ff2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002ff6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003000:	2300      	movs	r3, #0
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003004:	2301      	movs	r3, #1
 8003006:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003008:	f107 031c 	add.w	r3, r7, #28
 800300c:	4619      	mov	r1, r3
 800300e:	4839      	ldr	r0, [pc, #228]	; (80030f4 <HAL_TIM_MspPostInit+0x13c>)
 8003010:	f001 fd02 	bl	8004a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003014:	e065      	b.n	80030e2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a37      	ldr	r2, [pc, #220]	; (80030f8 <HAL_TIM_MspPostInit+0x140>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d11c      	bne.n	800305a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003020:	4b33      	ldr	r3, [pc, #204]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 8003022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003024:	4a32      	ldr	r2, [pc, #200]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	6313      	str	r3, [r2, #48]	; 0x30
 800302c:	4b30      	ldr	r3, [pc, #192]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 8003038:	2340      	movs	r3, #64	; 0x40
 800303a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303c:	2302      	movs	r3, #2
 800303e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003044:	2300      	movs	r3, #0
 8003046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003048:	2302      	movs	r3, #2
 800304a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 800304c:	f107 031c 	add.w	r3, r7, #28
 8003050:	4619      	mov	r1, r3
 8003052:	482a      	ldr	r0, [pc, #168]	; (80030fc <HAL_TIM_MspPostInit+0x144>)
 8003054:	f001 fce0 	bl	8004a18 <HAL_GPIO_Init>
}
 8003058:	e043      	b.n	80030e2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a28      	ldr	r2, [pc, #160]	; (8003100 <HAL_TIM_MspPostInit+0x148>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d11d      	bne.n	80030a0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003064:	4b22      	ldr	r3, [pc, #136]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	4a21      	ldr	r2, [pc, #132]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 800306a:	f043 0308 	orr.w	r3, r3, #8
 800306e:	6313      	str	r3, [r2, #48]	; 0x30
 8003070:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 800307c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003082:	2302      	movs	r3, #2
 8003084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003086:	2300      	movs	r3, #0
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308a:	2300      	movs	r3, #0
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800308e:	2302      	movs	r3, #2
 8003090:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 8003092:	f107 031c 	add.w	r3, r7, #28
 8003096:	4619      	mov	r1, r3
 8003098:	481a      	ldr	r0, [pc, #104]	; (8003104 <HAL_TIM_MspPostInit+0x14c>)
 800309a:	f001 fcbd 	bl	8004a18 <HAL_GPIO_Init>
}
 800309e:	e020      	b.n	80030e2 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a18      	ldr	r2, [pc, #96]	; (8003108 <HAL_TIM_MspPostInit+0x150>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d11b      	bne.n	80030e2 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030aa:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4a10      	ldr	r2, [pc, #64]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	6313      	str	r3, [r2, #48]	; 0x30
 80030b6:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <HAL_TIM_MspPostInit+0x138>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 80030c2:	2340      	movs	r3, #64	; 0x40
 80030c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	2302      	movs	r3, #2
 80030c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ca:	2300      	movs	r3, #0
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ce:	2300      	movs	r3, #0
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80030d2:	2303      	movs	r3, #3
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 80030d6:	f107 031c 	add.w	r3, r7, #28
 80030da:	4619      	mov	r1, r3
 80030dc:	480b      	ldr	r0, [pc, #44]	; (800310c <HAL_TIM_MspPostInit+0x154>)
 80030de:	f001 fc9b 	bl	8004a18 <HAL_GPIO_Init>
}
 80030e2:	bf00      	nop
 80030e4:	3730      	adds	r7, #48	; 0x30
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	40010000 	.word	0x40010000
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40000400 	.word	0x40000400
 80030fc:	40020000 	.word	0x40020000
 8003100:	40000800 	.word	0x40000800
 8003104:	40020c00 	.word	0x40020c00
 8003108:	40010400 	.word	0x40010400
 800310c:	40020800 	.word	0x40020800

08003110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b090      	sub	sp, #64	; 0x40
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a61      	ldr	r2, [pc, #388]	; (80032b4 <HAL_UART_MspInit+0x1a4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d129      	bne.n	8003186 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003132:	4b61      	ldr	r3, [pc, #388]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	4a60      	ldr	r2, [pc, #384]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800313c:	6413      	str	r3, [r2, #64]	; 0x40
 800313e:	4b5e      	ldr	r3, [pc, #376]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003146:	62bb      	str	r3, [r7, #40]	; 0x28
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800314a:	4b5b      	ldr	r3, [pc, #364]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	4a5a      	ldr	r2, [pc, #360]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003150:	f043 0310 	orr.w	r3, r3, #16
 8003154:	6313      	str	r3, [r2, #48]	; 0x30
 8003156:	4b58      	ldr	r3, [pc, #352]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f003 0310 	and.w	r3, r3, #16
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003162:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003166:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2300      	movs	r3, #0
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003170:	2303      	movs	r3, #3
 8003172:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003174:	2308      	movs	r3, #8
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800317c:	4619      	mov	r1, r3
 800317e:	484f      	ldr	r0, [pc, #316]	; (80032bc <HAL_UART_MspInit+0x1ac>)
 8003180:	f001 fc4a 	bl	8004a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003184:	e092      	b.n	80032ac <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a4d      	ldr	r2, [pc, #308]	; (80032c0 <HAL_UART_MspInit+0x1b0>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d129      	bne.n	80031e4 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003190:	4b49      	ldr	r3, [pc, #292]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	4a48      	ldr	r2, [pc, #288]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003196:	f043 0310 	orr.w	r3, r3, #16
 800319a:	6453      	str	r3, [r2, #68]	; 0x44
 800319c:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 800319e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	623b      	str	r3, [r7, #32]
 80031a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031a8:	4b43      	ldr	r3, [pc, #268]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	4a42      	ldr	r2, [pc, #264]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 80031ae:	f043 0302 	orr.w	r3, r3, #2
 80031b2:	6313      	str	r3, [r2, #48]	; 0x30
 80031b4:	4b40      	ldr	r3, [pc, #256]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 80031b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	61fb      	str	r3, [r7, #28]
 80031be:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 80031c0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c6:	2302      	movs	r3, #2
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ca:	2300      	movs	r3, #0
 80031cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ce:	2303      	movs	r3, #3
 80031d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80031d2:	2304      	movs	r3, #4
 80031d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031da:	4619      	mov	r1, r3
 80031dc:	4839      	ldr	r0, [pc, #228]	; (80032c4 <HAL_UART_MspInit+0x1b4>)
 80031de:	f001 fc1b 	bl	8004a18 <HAL_GPIO_Init>
}
 80031e2:	e063      	b.n	80032ac <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a37      	ldr	r2, [pc, #220]	; (80032c8 <HAL_UART_MspInit+0x1b8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d128      	bne.n	8003240 <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ee:	4b32      	ldr	r3, [pc, #200]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	4a31      	ldr	r2, [pc, #196]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 80031f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
 80031fa:	4b2f      	ldr	r3, [pc, #188]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003206:	4b2c      	ldr	r3, [pc, #176]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	4a2b      	ldr	r2, [pc, #172]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 800320c:	f043 0301 	orr.w	r3, r3, #1
 8003210:	6313      	str	r3, [r2, #48]	; 0x30
 8003212:	4b29      	ldr	r3, [pc, #164]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	617b      	str	r3, [r7, #20]
 800321c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 800321e:	230c      	movs	r3, #12
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003222:	2302      	movs	r3, #2
 8003224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	2300      	movs	r3, #0
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800322a:	2303      	movs	r3, #3
 800322c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800322e:	2307      	movs	r3, #7
 8003230:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003236:	4619      	mov	r1, r3
 8003238:	4824      	ldr	r0, [pc, #144]	; (80032cc <HAL_UART_MspInit+0x1bc>)
 800323a:	f001 fbed 	bl	8004a18 <HAL_GPIO_Init>
}
 800323e:	e035      	b.n	80032ac <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <HAL_UART_MspInit+0x1c0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d130      	bne.n	80032ac <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800324a:	4b1b      	ldr	r3, [pc, #108]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	4a1a      	ldr	r2, [pc, #104]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003254:	6413      	str	r3, [r2, #64]	; 0x40
 8003256:	4b18      	ldr	r3, [pc, #96]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003262:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b12      	ldr	r3, [pc, #72]	; (80032b8 <HAL_UART_MspInit+0x1a8>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 800327a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003280:	2302      	movs	r3, #2
 8003282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003284:	2300      	movs	r3, #0
 8003286:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003288:	2303      	movs	r3, #3
 800328a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800328c:	2307      	movs	r3, #7
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003294:	4619      	mov	r1, r3
 8003296:	480b      	ldr	r0, [pc, #44]	; (80032c4 <HAL_UART_MspInit+0x1b4>)
 8003298:	f001 fbbe 	bl	8004a18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800329c:	2200      	movs	r2, #0
 800329e:	2100      	movs	r1, #0
 80032a0:	2027      	movs	r0, #39	; 0x27
 80032a2:	f000 ffea 	bl	800427a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80032a6:	2027      	movs	r0, #39	; 0x27
 80032a8:	f001 f803 	bl	80042b2 <HAL_NVIC_EnableIRQ>
}
 80032ac:	bf00      	nop
 80032ae:	3740      	adds	r7, #64	; 0x40
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40007800 	.word	0x40007800
 80032b8:	40023800 	.word	0x40023800
 80032bc:	40021000 	.word	0x40021000
 80032c0:	40011000 	.word	0x40011000
 80032c4:	40020400 	.word	0x40020400
 80032c8:	40004400 	.word	0x40004400
 80032cc:	40020000 	.word	0x40020000
 80032d0:	40004800 	.word	0x40004800

080032d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032e6:	e7fe      	b.n	80032e6 <HardFault_Handler+0x4>

080032e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032ec:	e7fe      	b.n	80032ec <MemManage_Handler+0x4>

080032ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ee:	b480      	push	{r7}
 80032f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032f2:	e7fe      	b.n	80032f2 <BusFault_Handler+0x4>

080032f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032f8:	e7fe      	b.n	80032f8 <UsageFault_Handler+0x4>

080032fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032fa:	b480      	push	{r7}
 80032fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003308:	b480      	push	{r7}
 800330a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800330c:	bf00      	nop
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003316:	b480      	push	{r7}
 8003318:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800331a:	bf00      	nop
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003328:	f000 fa7e 	bl	8003828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800332c:	bf00      	nop
 800332e:	bd80      	pop	{r7, pc}

08003330 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003334:	4802      	ldr	r0, [pc, #8]	; (8003340 <DMA1_Stream5_IRQHandler+0x10>)
 8003336:	f001 f907 	bl	8004548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	2005a390 	.word	0x2005a390

08003344 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003348:	2080      	movs	r0, #128	; 0x80
 800334a:	f001 fd29 	bl	8004da0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800334e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003352:	f001 fd25 	bl	8004da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
	...

0800335c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003360:	4802      	ldr	r0, [pc, #8]	; (800336c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003362:	f004 f8c7 	bl	80074f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003366:	bf00      	nop
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	2005a808 	.word	0x2005a808

08003370 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003374:	4802      	ldr	r0, [pc, #8]	; (8003380 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003376:	f004 f8bd 	bl	80074f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	2005a808 	.word	0x2005a808

08003384 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003388:	4802      	ldr	r0, [pc, #8]	; (8003394 <TIM2_IRQHandler+0x10>)
 800338a:	f004 f8b3 	bl	80074f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	2005a8ac 	.word	0x2005a8ac

08003398 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800339c:	4802      	ldr	r0, [pc, #8]	; (80033a8 <TIM3_IRQHandler+0x10>)
 800339e:	f004 f8a9 	bl	80074f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	2005a5fc 	.word	0x2005a5fc

080033ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033b0:	4802      	ldr	r0, [pc, #8]	; (80033bc <TIM4_IRQHandler+0x10>)
 80033b2:	f004 f89f 	bl	80074f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	2005a4b0 	.word	0x2005a4b0

080033c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80033c4:	4802      	ldr	r0, [pc, #8]	; (80033d0 <USART3_IRQHandler+0x10>)
 80033c6:	f005 fd35 	bl	8008e34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	2005a4f0 	.word	0x2005a4f0

080033d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80033d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80033dc:	f001 fce0 	bl	8004da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <TIM8_CC_IRQHandler+0x10>)
 80033ea:	f004 f883 	bl	80074f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2005a470 	.word	0x2005a470

080033f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <TIM5_IRQHandler+0x10>)
 80033fe:	f004 f879 	bl	80074f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	2005a5bc 	.word	0x2005a5bc

0800340c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003410:	4802      	ldr	r0, [pc, #8]	; (800341c <TIM6_DAC_IRQHandler+0x10>)
 8003412:	f004 f86f 	bl	80074f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	2005a7c8 	.word	0x2005a7c8

08003420 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <DMA2_Stream2_IRQHandler+0x10>)
 8003426:	f001 f88f 	bl	8004548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	2005a96c 	.word	0x2005a96c

08003434 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <DMA2_Stream4_IRQHandler+0x10>)
 800343a:	f001 f885 	bl	8004548 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	2005a768 	.word	0x2005a768

08003448 <runPolarizationSequence>:
 *      Author: OBU
 */

#include "switchingCircuitController.h"

void runPolarizationSequence() {
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 800344c:	4b30      	ldr	r3, [pc, #192]	; (8003510 <runPolarizationSequence+0xc8>)
 800344e:	2200      	movs	r2, #0
 8003450:	761a      	strb	r2, [r3, #24]
	remainingTimeToNextMeasurement = state.wholeMeasurementPeriod * 1000; // convert ms to us
 8003452:	4b2f      	ldr	r3, [pc, #188]	; (8003510 <runPolarizationSequence+0xc8>)
 8003454:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003458:	461a      	mov	r2, r3
 800345a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800345e:	fb03 f302 	mul.w	r3, r3, r2
 8003462:	461a      	mov	r2, r3
 8003464:	4b2b      	ldr	r3, [pc, #172]	; (8003514 <runPolarizationSequence+0xcc>)
 8003466:	601a      	str	r2, [r3, #0]
	remainingPolarizationTime = state.polarizationPeriod * 1000; // convert ms to us
 8003468:	4b29      	ldr	r3, [pc, #164]	; (8003510 <runPolarizationSequence+0xc8>)
 800346a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800346e:	461a      	mov	r2, r3
 8003470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003474:	fb03 f302 	mul.w	r3, r3, r2
 8003478:	461a      	mov	r2, r3
 800347a:	4b27      	ldr	r3, [pc, #156]	; (8003518 <runPolarizationSequence+0xd0>)
 800347c:	601a      	str	r2, [r3, #0]

	// visualise
	set_LED1(1, 1, 1);
 800347e:	2201      	movs	r2, #1
 8003480:	2101      	movs	r1, #1
 8003482:	2001      	movs	r0, #1
 8003484:	f7fd fdb8 	bl	8000ff8 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8003488:	2201      	movs	r2, #1
 800348a:	2102      	movs	r1, #2
 800348c:	4823      	ldr	r0, [pc, #140]	; (800351c <runPolarizationSequence+0xd4>)
 800348e:	f001 fc6d 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8003492:	2200      	movs	r2, #0
 8003494:	2104      	movs	r1, #4
 8003496:	4821      	ldr	r0, [pc, #132]	; (800351c <runPolarizationSequence+0xd4>)
 8003498:	f001 fc68 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800349c:	2201      	movs	r2, #1
 800349e:	2108      	movs	r1, #8
 80034a0:	481e      	ldr	r0, [pc, #120]	; (800351c <runPolarizationSequence+0xd4>)
 80034a2:	f001 fc63 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80034a6:	2200      	movs	r2, #0
 80034a8:	2110      	movs	r1, #16
 80034aa:	481c      	ldr	r0, [pc, #112]	; (800351c <runPolarizationSequence+0xd4>)
 80034ac:	f001 fc5e 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80034b0:	2200      	movs	r2, #0
 80034b2:	2120      	movs	r1, #32
 80034b4:	4819      	ldr	r0, [pc, #100]	; (800351c <runPolarizationSequence+0xd4>)
 80034b6:	f001 fc59 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80034ba:	2201      	movs	r2, #1
 80034bc:	2140      	movs	r1, #64	; 0x40
 80034be:	4817      	ldr	r0, [pc, #92]	; (800351c <runPolarizationSequence+0xd4>)
 80034c0:	f001 fc54 	bl	8004d6c <HAL_GPIO_WritePin>
	delay_ms(5);
 80034c4:	2005      	movs	r0, #5
 80034c6:	f7fd fd4b 	bl	8000f60 <delay_ms>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 80034ca:	2201      	movs	r2, #1
 80034cc:	2102      	movs	r1, #2
 80034ce:	4813      	ldr	r0, [pc, #76]	; (800351c <runPolarizationSequence+0xd4>)
 80034d0:	f001 fc4c 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80034d4:	2200      	movs	r2, #0
 80034d6:	2104      	movs	r1, #4
 80034d8:	4810      	ldr	r0, [pc, #64]	; (800351c <runPolarizationSequence+0xd4>)
 80034da:	f001 fc47 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80034de:	2201      	movs	r2, #1
 80034e0:	2108      	movs	r1, #8
 80034e2:	480e      	ldr	r0, [pc, #56]	; (800351c <runPolarizationSequence+0xd4>)
 80034e4:	f001 fc42 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80034e8:	2201      	movs	r2, #1
 80034ea:	2110      	movs	r1, #16
 80034ec:	480b      	ldr	r0, [pc, #44]	; (800351c <runPolarizationSequence+0xd4>)
 80034ee:	f001 fc3d 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2120      	movs	r1, #32
 80034f6:	4809      	ldr	r0, [pc, #36]	; (800351c <runPolarizationSequence+0xd4>)
 80034f8:	f001 fc38 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80034fc:	2201      	movs	r2, #1
 80034fe:	2140      	movs	r1, #64	; 0x40
 8003500:	4806      	ldr	r0, [pc, #24]	; (800351c <runPolarizationSequence+0xd4>)
 8003502:	f001 fc33 	bl	8004d6c <HAL_GPIO_WritePin>
	state.preparedToRunMeasurementPhase = 1;
 8003506:	4b02      	ldr	r3, [pc, #8]	; (8003510 <runPolarizationSequence+0xc8>)
 8003508:	2201      	movs	r2, #1
 800350a:	765a      	strb	r2, [r3, #25]

}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}
 8003510:	2002f1a8 	.word	0x2002f1a8
 8003514:	20004094 	.word	0x20004094
 8003518:	2000408c 	.word	0x2000408c
 800351c:	40020c00 	.word	0x40020c00

08003520 <runMeasurementSequence>:

void runMeasurementSequence() {
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
	state.preparedToRunMeasurementPhase = 0;
 8003524:	4b55      	ldr	r3, [pc, #340]	; (800367c <runMeasurementSequence+0x15c>)
 8003526:	2200      	movs	r2, #0
 8003528:	765a      	strb	r2, [r3, #25]
	set_LED1(0, 1, 0);
 800352a:	2200      	movs	r2, #0
 800352c:	2101      	movs	r1, #1
 800352e:	2000      	movs	r0, #0
 8003530:	f7fd fd62 	bl	8000ff8 <set_LED1>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8003534:	2200      	movs	r2, #0
 8003536:	2102      	movs	r1, #2
 8003538:	4851      	ldr	r0, [pc, #324]	; (8003680 <runMeasurementSequence+0x160>)
 800353a:	f001 fc17 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800353e:	2200      	movs	r2, #0
 8003540:	2104      	movs	r1, #4
 8003542:	484f      	ldr	r0, [pc, #316]	; (8003680 <runMeasurementSequence+0x160>)
 8003544:	f001 fc12 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8003548:	2201      	movs	r2, #1
 800354a:	2108      	movs	r1, #8
 800354c:	484c      	ldr	r0, [pc, #304]	; (8003680 <runMeasurementSequence+0x160>)
 800354e:	f001 fc0d 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8003552:	2200      	movs	r2, #0
 8003554:	2110      	movs	r1, #16
 8003556:	484a      	ldr	r0, [pc, #296]	; (8003680 <runMeasurementSequence+0x160>)
 8003558:	f001 fc08 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800355c:	2200      	movs	r2, #0
 800355e:	2120      	movs	r1, #32
 8003560:	4847      	ldr	r0, [pc, #284]	; (8003680 <runMeasurementSequence+0x160>)
 8003562:	f001 fc03 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8003566:	2201      	movs	r2, #1
 8003568:	2140      	movs	r1, #64	; 0x40
 800356a:	4845      	ldr	r0, [pc, #276]	; (8003680 <runMeasurementSequence+0x160>)
 800356c:	f001 fbfe 	bl	8004d6c <HAL_GPIO_WritePin>
	delay_us(50);
 8003570:	2032      	movs	r0, #50	; 0x32
 8003572:	f7fd fce1 	bl	8000f38 <delay_us>

	//run sequnece T5 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8003576:	2200      	movs	r2, #0
 8003578:	2102      	movs	r1, #2
 800357a:	4841      	ldr	r0, [pc, #260]	; (8003680 <runMeasurementSequence+0x160>)
 800357c:	f001 fbf6 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8003580:	2200      	movs	r2, #0
 8003582:	2104      	movs	r1, #4
 8003584:	483e      	ldr	r0, [pc, #248]	; (8003680 <runMeasurementSequence+0x160>)
 8003586:	f001 fbf1 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 800358a:	2201      	movs	r2, #1
 800358c:	2108      	movs	r1, #8
 800358e:	483c      	ldr	r0, [pc, #240]	; (8003680 <runMeasurementSequence+0x160>)
 8003590:	f001 fbec 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8003594:	2200      	movs	r2, #0
 8003596:	2110      	movs	r1, #16
 8003598:	4839      	ldr	r0, [pc, #228]	; (8003680 <runMeasurementSequence+0x160>)
 800359a:	f001 fbe7 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 800359e:	2201      	movs	r2, #1
 80035a0:	2120      	movs	r1, #32
 80035a2:	4837      	ldr	r0, [pc, #220]	; (8003680 <runMeasurementSequence+0x160>)
 80035a4:	f001 fbe2 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80035a8:	2201      	movs	r2, #1
 80035aa:	2140      	movs	r1, #64	; 0x40
 80035ac:	4834      	ldr	r0, [pc, #208]	; (8003680 <runMeasurementSequence+0x160>)
 80035ae:	f001 fbdd 	bl	8004d6c <HAL_GPIO_WritePin>
	delay_ms(10);
 80035b2:	200a      	movs	r0, #10
 80035b4:	f7fd fcd4 	bl	8000f60 <delay_ms>

	//run sequnece T7 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2102      	movs	r1, #2
 80035bc:	4830      	ldr	r0, [pc, #192]	; (8003680 <runMeasurementSequence+0x160>)
 80035be:	f001 fbd5 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80035c2:	2200      	movs	r2, #0
 80035c4:	2104      	movs	r1, #4
 80035c6:	482e      	ldr	r0, [pc, #184]	; (8003680 <runMeasurementSequence+0x160>)
 80035c8:	f001 fbd0 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80035cc:	2201      	movs	r2, #1
 80035ce:	2108      	movs	r1, #8
 80035d0:	482b      	ldr	r0, [pc, #172]	; (8003680 <runMeasurementSequence+0x160>)
 80035d2:	f001 fbcb 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2110      	movs	r1, #16
 80035da:	4829      	ldr	r0, [pc, #164]	; (8003680 <runMeasurementSequence+0x160>)
 80035dc:	f001 fbc6 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80035e0:	2201      	movs	r2, #1
 80035e2:	2120      	movs	r1, #32
 80035e4:	4826      	ldr	r0, [pc, #152]	; (8003680 <runMeasurementSequence+0x160>)
 80035e6:	f001 fbc1 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80035ea:	2200      	movs	r2, #0
 80035ec:	2140      	movs	r1, #64	; 0x40
 80035ee:	4824      	ldr	r0, [pc, #144]	; (8003680 <runMeasurementSequence+0x160>)
 80035f0:	f001 fbbc 	bl	8004d6c <HAL_GPIO_WritePin>
	delay_ms(10);
 80035f4:	200a      	movs	r0, #10
 80035f6:	f7fd fcb3 	bl	8000f60 <delay_ms>

	//run sequnece T8 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80035fa:	2200      	movs	r2, #0
 80035fc:	2102      	movs	r1, #2
 80035fe:	4820      	ldr	r0, [pc, #128]	; (8003680 <runMeasurementSequence+0x160>)
 8003600:	f001 fbb4 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8003604:	2200      	movs	r2, #0
 8003606:	2104      	movs	r1, #4
 8003608:	481d      	ldr	r0, [pc, #116]	; (8003680 <runMeasurementSequence+0x160>)
 800360a:	f001 fbaf 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2108      	movs	r1, #8
 8003612:	481b      	ldr	r0, [pc, #108]	; (8003680 <runMeasurementSequence+0x160>)
 8003614:	f001 fbaa 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8003618:	2200      	movs	r2, #0
 800361a:	2110      	movs	r1, #16
 800361c:	4818      	ldr	r0, [pc, #96]	; (8003680 <runMeasurementSequence+0x160>)
 800361e:	f001 fba5 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8003622:	2201      	movs	r2, #1
 8003624:	2120      	movs	r1, #32
 8003626:	4816      	ldr	r0, [pc, #88]	; (8003680 <runMeasurementSequence+0x160>)
 8003628:	f001 fba0 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800362c:	2200      	movs	r2, #0
 800362e:	2140      	movs	r1, #64	; 0x40
 8003630:	4813      	ldr	r0, [pc, #76]	; (8003680 <runMeasurementSequence+0x160>)
 8003632:	f001 fb9b 	bl	8004d6c <HAL_GPIO_WritePin>
	delay_ms(10);
 8003636:	200a      	movs	r0, #10
 8003638:	f7fd fc92 	bl	8000f60 <delay_ms>

	//run sequnece T9 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800363c:	2200      	movs	r2, #0
 800363e:	2102      	movs	r1, #2
 8003640:	480f      	ldr	r0, [pc, #60]	; (8003680 <runMeasurementSequence+0x160>)
 8003642:	f001 fb93 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 8003646:	2201      	movs	r2, #1
 8003648:	2104      	movs	r1, #4
 800364a:	480d      	ldr	r0, [pc, #52]	; (8003680 <runMeasurementSequence+0x160>)
 800364c:	f001 fb8e 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 8003650:	2200      	movs	r2, #0
 8003652:	2108      	movs	r1, #8
 8003654:	480a      	ldr	r0, [pc, #40]	; (8003680 <runMeasurementSequence+0x160>)
 8003656:	f001 fb89 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800365a:	2200      	movs	r2, #0
 800365c:	2110      	movs	r1, #16
 800365e:	4808      	ldr	r0, [pc, #32]	; (8003680 <runMeasurementSequence+0x160>)
 8003660:	f001 fb84 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8003664:	2201      	movs	r2, #1
 8003666:	2120      	movs	r1, #32
 8003668:	4805      	ldr	r0, [pc, #20]	; (8003680 <runMeasurementSequence+0x160>)
 800366a:	f001 fb7f 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800366e:	2200      	movs	r2, #0
 8003670:	2140      	movs	r1, #64	; 0x40
 8003672:	4803      	ldr	r0, [pc, #12]	; (8003680 <runMeasurementSequence+0x160>)
 8003674:	f001 fb7a 	bl	8004d6c <HAL_GPIO_WritePin>
}
 8003678:	bf00      	nop
 800367a:	bd80      	pop	{r7, pc}
 800367c:	2002f1a8 	.word	0x2002f1a8
 8003680:	40020c00 	.word	0x40020c00

08003684 <switchingCircuitIdle>:

void switchingCircuitIdle() {
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 8003688:	2200      	movs	r2, #0
 800368a:	2101      	movs	r1, #1
 800368c:	4811      	ldr	r0, [pc, #68]	; (80036d4 <switchingCircuitIdle+0x50>)
 800368e:	f001 fb6d 	bl	8004d6c <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8003692:	2200      	movs	r2, #0
 8003694:	2102      	movs	r1, #2
 8003696:	480f      	ldr	r0, [pc, #60]	; (80036d4 <switchingCircuitIdle+0x50>)
 8003698:	f001 fb68 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800369c:	2200      	movs	r2, #0
 800369e:	2104      	movs	r1, #4
 80036a0:	480c      	ldr	r0, [pc, #48]	; (80036d4 <switchingCircuitIdle+0x50>)
 80036a2:	f001 fb63 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80036a6:	2201      	movs	r2, #1
 80036a8:	2108      	movs	r1, #8
 80036aa:	480a      	ldr	r0, [pc, #40]	; (80036d4 <switchingCircuitIdle+0x50>)
 80036ac:	f001 fb5e 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80036b0:	2200      	movs	r2, #0
 80036b2:	2110      	movs	r1, #16
 80036b4:	4807      	ldr	r0, [pc, #28]	; (80036d4 <switchingCircuitIdle+0x50>)
 80036b6:	f001 fb59 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80036ba:	2200      	movs	r2, #0
 80036bc:	2120      	movs	r1, #32
 80036be:	4805      	ldr	r0, [pc, #20]	; (80036d4 <switchingCircuitIdle+0x50>)
 80036c0:	f001 fb54 	bl	8004d6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80036c4:	2200      	movs	r2, #0
 80036c6:	2140      	movs	r1, #64	; 0x40
 80036c8:	4802      	ldr	r0, [pc, #8]	; (80036d4 <switchingCircuitIdle+0x50>)
 80036ca:	f001 fb4f 	bl	8004d6c <HAL_GPIO_WritePin>
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40020c00 	.word	0x40020c00

080036d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <_sbrk+0x50>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d102      	bne.n	80036ee <_sbrk+0x16>
		heap_end = &end;
 80036e8:	4b0f      	ldr	r3, [pc, #60]	; (8003728 <_sbrk+0x50>)
 80036ea:	4a10      	ldr	r2, [pc, #64]	; (800372c <_sbrk+0x54>)
 80036ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80036ee:	4b0e      	ldr	r3, [pc, #56]	; (8003728 <_sbrk+0x50>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80036f4:	4b0c      	ldr	r3, [pc, #48]	; (8003728 <_sbrk+0x50>)
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4413      	add	r3, r2
 80036fc:	466a      	mov	r2, sp
 80036fe:	4293      	cmp	r3, r2
 8003700:	d907      	bls.n	8003712 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003702:	f006 fa01 	bl	8009b08 <__errno>
 8003706:	4602      	mov	r2, r0
 8003708:	230c      	movs	r3, #12
 800370a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800370c:	f04f 33ff 	mov.w	r3, #4294967295
 8003710:	e006      	b.n	8003720 <_sbrk+0x48>
	}

	heap_end += incr;
 8003712:	4b05      	ldr	r3, [pc, #20]	; (8003728 <_sbrk+0x50>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4413      	add	r3, r2
 800371a:	4a03      	ldr	r2, [pc, #12]	; (8003728 <_sbrk+0x50>)
 800371c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800371e:	68fb      	ldr	r3, [r7, #12]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200001fc 	.word	0x200001fc
 800372c:	2005a9d8 	.word	0x2005a9d8

08003730 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003734:	4b08      	ldr	r3, [pc, #32]	; (8003758 <SystemInit+0x28>)
 8003736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800373a:	4a07      	ldr	r2, [pc, #28]	; (8003758 <SystemInit+0x28>)
 800373c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003744:	4b04      	ldr	r3, [pc, #16]	; (8003758 <SystemInit+0x28>)
 8003746:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800374a:	609a      	str	r2, [r3, #8]
#endif
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800375c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003794 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003760:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003762:	e003      	b.n	800376c <LoopCopyDataInit>

08003764 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003766:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003768:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800376a:	3104      	adds	r1, #4

0800376c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800376c:	480b      	ldr	r0, [pc, #44]	; (800379c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800376e:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003770:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003772:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003774:	d3f6      	bcc.n	8003764 <CopyDataInit>
  ldr  r2, =_sbss
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003778:	e002      	b.n	8003780 <LoopFillZerobss>

0800377a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800377a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800377c:	f842 3b04 	str.w	r3, [r2], #4

08003780 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003780:	4b09      	ldr	r3, [pc, #36]	; (80037a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003782:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003784:	d3f9      	bcc.n	800377a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003786:	f7ff ffd3 	bl	8003730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800378a:	f006 f9c3 	bl	8009b14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800378e:	f7fd fcaf 	bl	80010f0 <main>
  bx  lr    
 8003792:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003794:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003798:	0800a8b8 	.word	0x0800a8b8
  ldr  r0, =_sdata
 800379c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037a0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80037a4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80037a8:	2005a9d4 	.word	0x2005a9d4

080037ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037ac:	e7fe      	b.n	80037ac <ADC_IRQHandler>

080037ae <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037b2:	2003      	movs	r0, #3
 80037b4:	f000 fd56 	bl	8004264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037b8:	2000      	movs	r0, #0
 80037ba:	f000 f805 	bl	80037c8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80037be:	f7ff f8e3 	bl	8002988 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037d0:	4b12      	ldr	r3, [pc, #72]	; (800381c <HAL_InitTick+0x54>)
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_InitTick+0x58>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	4619      	mov	r1, r3
 80037da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037de:	fbb3 f3f1 	udiv	r3, r3, r1
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fd71 	bl	80042ce <HAL_SYSTICK_Config>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e00e      	b.n	8003814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b0f      	cmp	r3, #15
 80037fa:	d80a      	bhi.n	8003812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037fc:	2200      	movs	r2, #0
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	f000 fd39 	bl	800427a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003808:	4a06      	ldr	r2, [pc, #24]	; (8003824 <HAL_InitTick+0x5c>)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	e000      	b.n	8003814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
}
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20000000 	.word	0x20000000
 8003820:	20000008 	.word	0x20000008
 8003824:	20000004 	.word	0x20000004

08003828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_IncTick+0x20>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_IncTick+0x24>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4413      	add	r3, r2
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <HAL_IncTick+0x24>)
 800383a:	6013      	str	r3, [r2, #0]
}
 800383c:	bf00      	nop
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	20000008 	.word	0x20000008
 800384c:	2005a9cc 	.word	0x2005a9cc

08003850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return uwTick;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_GetTick+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	2005a9cc 	.word	0x2005a9cc

08003868 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003870:	f7ff ffee 	bl	8003850 <HAL_GetTick>
 8003874:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003880:	d005      	beq.n	800388e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003882:	4b09      	ldr	r3, [pc, #36]	; (80038a8 <HAL_Delay+0x40>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	461a      	mov	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4413      	add	r3, r2
 800388c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800388e:	bf00      	nop
 8003890:	f7ff ffde 	bl	8003850 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	429a      	cmp	r2, r3
 800389e:	d8f7      	bhi.n	8003890 <HAL_Delay+0x28>
  {
  }
}
 80038a0:	bf00      	nop
 80038a2:	3710      	adds	r7, #16
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	20000008 	.word	0x20000008

080038ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e031      	b.n	8003926 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff f880 	bl	80029d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d116      	bne.n	8003918 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <HAL_ADC_Init+0x84>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	f043 0202 	orr.w	r2, r3, #2
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 fa66 	bl	8003dcc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	f043 0201 	orr.w	r2, r3, #1
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	641a      	str	r2, [r3, #64]	; 0x40
 8003916:	e001      	b.n	800391c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	ffffeefd 	.word	0xffffeefd

08003934 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003940:	2300      	movs	r3, #0
 8003942:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <HAL_ADC_Start_DMA+0x1e>
 800394e:	2302      	movs	r3, #2
 8003950:	e0c7      	b.n	8003ae2 <HAL_ADC_Start_DMA+0x1ae>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d018      	beq.n	800399a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f042 0201 	orr.w	r2, r2, #1
 8003976:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003978:	4b5c      	ldr	r3, [pc, #368]	; (8003aec <HAL_ADC_Start_DMA+0x1b8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a5c      	ldr	r2, [pc, #368]	; (8003af0 <HAL_ADC_Start_DMA+0x1bc>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0c9a      	lsrs	r2, r3, #18
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800398c:	e002      	b.n	8003994 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3b01      	subs	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f9      	bne.n	800398e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	f040 809b 	bne.w	8003ae0 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ae:	4b51      	ldr	r3, [pc, #324]	; (8003af4 <HAL_ADC_Start_DMA+0x1c0>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e4:	d106      	bne.n	80039f4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f023 0206 	bic.w	r2, r3, #6
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
 80039f2:	e002      	b.n	80039fa <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	4a3c      	ldr	r2, [pc, #240]	; (8003af8 <HAL_ADC_Start_DMA+0x1c4>)
 8003a08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	4a3b      	ldr	r2, [pc, #236]	; (8003afc <HAL_ADC_Start_DMA+0x1c8>)
 8003a10:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	4a3a      	ldr	r2, [pc, #232]	; (8003b00 <HAL_ADC_Start_DMA+0x1cc>)
 8003a18:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a22:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003a32:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a42:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	334c      	adds	r3, #76	; 0x4c
 8003a4e:	4619      	mov	r1, r3
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f000 fcf6 	bl	8004444 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003a58:	4b2a      	ldr	r3, [pc, #168]	; (8003b04 <HAL_ADC_Start_DMA+0x1d0>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f003 031f 	and.w	r3, r3, #31
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10f      	bne.n	8003a84 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d136      	bne.n	8003ae0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	e02d      	b.n	8003ae0 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1f      	ldr	r2, [pc, #124]	; (8003b08 <HAL_ADC_Start_DMA+0x1d4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10e      	bne.n	8003aac <HAL_ADC_Start_DMA+0x178>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003aaa:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003aac:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <HAL_ADC_Start_DMA+0x1d0>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f003 0310 	and.w	r3, r3, #16
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d113      	bne.n	8003ae0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a13      	ldr	r2, [pc, #76]	; (8003b0c <HAL_ADC_Start_DMA+0x1d8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_ADC_Start_DMA+0x1ac>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d107      	bne.n	8003ae0 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003ade:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000000 	.word	0x20000000
 8003af0:	431bde83 	.word	0x431bde83
 8003af4:	fffff8fe 	.word	0xfffff8fe
 8003af8:	08003fc1 	.word	0x08003fc1
 8003afc:	0800407b 	.word	0x0800407b
 8003b00:	08004097 	.word	0x08004097
 8003b04:	40012300 	.word	0x40012300
 8003b08:	40012000 	.word	0x40012000
 8003b0c:	40012200 	.word	0x40012200

08003b10 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr

08003b24 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x1c>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e12a      	b.n	8003daa <HAL_ADC_ConfigChannel+0x272>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b09      	cmp	r3, #9
 8003b62:	d93a      	bls.n	8003bda <HAL_ADC_ConfigChannel+0xa2>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b6c:	d035      	beq.n	8003bda <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68d9      	ldr	r1, [r3, #12]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	4413      	add	r3, r2
 8003b82:	3b1e      	subs	r3, #30
 8003b84:	2207      	movs	r2, #7
 8003b86:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8a:	43da      	mvns	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	400a      	ands	r2, r1
 8003b92:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a87      	ldr	r2, [pc, #540]	; (8003db8 <HAL_ADC_ConfigChannel+0x280>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10a      	bne.n	8003bb4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	68d9      	ldr	r1, [r3, #12]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	061a      	lsls	r2, r3, #24
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bb2:	e035      	b.n	8003c20 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68d9      	ldr	r1, [r3, #12]
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4403      	add	r3, r0
 8003bcc:	3b1e      	subs	r3, #30
 8003bce:	409a      	lsls	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bd8:	e022      	b.n	8003c20 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6919      	ldr	r1, [r3, #16]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	461a      	mov	r2, r3
 8003be8:	4613      	mov	r3, r2
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	4413      	add	r3, r2
 8003bee:	2207      	movs	r2, #7
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43da      	mvns	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	400a      	ands	r2, r1
 8003bfc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6919      	ldr	r1, [r3, #16]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	4618      	mov	r0, r3
 8003c10:	4603      	mov	r3, r0
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	4403      	add	r3, r0
 8003c16:	409a      	lsls	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	430a      	orrs	r2, r1
 8003c1e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d824      	bhi.n	8003c72 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685a      	ldr	r2, [r3, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	3b05      	subs	r3, #5
 8003c3a:	221f      	movs	r2, #31
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	43da      	mvns	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	400a      	ands	r2, r1
 8003c48:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	4618      	mov	r0, r3
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	3b05      	subs	r3, #5
 8003c64:	fa00 f203 	lsl.w	r2, r0, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	430a      	orrs	r2, r1
 8003c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8003c70:	e04c      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b0c      	cmp	r3, #12
 8003c78:	d824      	bhi.n	8003cc4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	3b23      	subs	r3, #35	; 0x23
 8003c8c:	221f      	movs	r2, #31
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43da      	mvns	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	400a      	ands	r2, r1
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	4618      	mov	r0, r3
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3b23      	subs	r3, #35	; 0x23
 8003cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8003cc2:	e023      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3b41      	subs	r3, #65	; 0x41
 8003cd6:	221f      	movs	r2, #31
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43da      	mvns	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	400a      	ands	r2, r1
 8003ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	009b      	lsls	r3, r3, #2
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3b41      	subs	r3, #65	; 0x41
 8003d00:	fa00 f203 	lsl.w	r2, r0, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2a      	ldr	r2, [pc, #168]	; (8003dbc <HAL_ADC_ConfigChannel+0x284>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d10a      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x1f4>
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1e:	d105      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003d20:	4b27      	ldr	r3, [pc, #156]	; (8003dc0 <HAL_ADC_ConfigChannel+0x288>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	4a26      	ldr	r2, [pc, #152]	; (8003dc0 <HAL_ADC_ConfigChannel+0x288>)
 8003d26:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003d2a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a22      	ldr	r2, [pc, #136]	; (8003dbc <HAL_ADC_ConfigChannel+0x284>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d109      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x212>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b12      	cmp	r3, #18
 8003d3c:	d105      	bne.n	8003d4a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003d3e:	4b20      	ldr	r3, [pc, #128]	; (8003dc0 <HAL_ADC_ConfigChannel+0x288>)
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	4a1f      	ldr	r2, [pc, #124]	; (8003dc0 <HAL_ADC_ConfigChannel+0x288>)
 8003d44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d48:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a1b      	ldr	r2, [pc, #108]	; (8003dbc <HAL_ADC_ConfigChannel+0x284>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d125      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x268>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a17      	ldr	r2, [pc, #92]	; (8003db8 <HAL_ADC_ConfigChannel+0x280>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <HAL_ADC_ConfigChannel+0x22e>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b11      	cmp	r3, #17
 8003d64:	d11c      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003d66:	4b16      	ldr	r3, [pc, #88]	; (8003dc0 <HAL_ADC_ConfigChannel+0x288>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <HAL_ADC_ConfigChannel+0x288>)
 8003d6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d70:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a10      	ldr	r2, [pc, #64]	; (8003db8 <HAL_ADC_ConfigChannel+0x280>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d111      	bne.n	8003da0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003d7c:	4b11      	ldr	r3, [pc, #68]	; (8003dc4 <HAL_ADC_ConfigChannel+0x28c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a11      	ldr	r2, [pc, #68]	; (8003dc8 <HAL_ADC_ConfigChannel+0x290>)
 8003d82:	fba2 2303 	umull	r2, r3, r2, r3
 8003d86:	0c9a      	lsrs	r2, r3, #18
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d92:	e002      	b.n	8003d9a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3b01      	subs	r3, #1
 8003d98:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f9      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3714      	adds	r7, #20
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	10000012 	.word	0x10000012
 8003dbc:	40012000 	.word	0x40012000
 8003dc0:	40012300 	.word	0x40012300
 8003dc4:	20000000 	.word	0x20000000
 8003dc8:	431bde83 	.word	0x431bde83

08003dcc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003dd4:	4b78      	ldr	r3, [pc, #480]	; (8003fb8 <ADC_Init+0x1ec>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4a77      	ldr	r2, [pc, #476]	; (8003fb8 <ADC_Init+0x1ec>)
 8003dda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003dde:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003de0:	4b75      	ldr	r3, [pc, #468]	; (8003fb8 <ADC_Init+0x1ec>)
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	4973      	ldr	r1, [pc, #460]	; (8003fb8 <ADC_Init+0x1ec>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	6859      	ldr	r1, [r3, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	021a      	lsls	r2, r3, #8
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003e20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6859      	ldr	r1, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689a      	ldr	r2, [r3, #8]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6899      	ldr	r1, [r3, #8]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	4a58      	ldr	r2, [pc, #352]	; (8003fbc <ADC_Init+0x1f0>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d022      	beq.n	8003ea6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6899      	ldr	r1, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6899      	ldr	r1, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	e00f      	b.n	8003ec6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	689a      	ldr	r2, [r3, #8]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003eb4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ec4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0202 	bic.w	r2, r2, #2
 8003ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6899      	ldr	r1, [r3, #8]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	005a      	lsls	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d01b      	beq.n	8003f2c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6859      	ldr	r1, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	035a      	lsls	r2, r3, #13
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	430a      	orrs	r2, r1
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	e007      	b.n	8003f3c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	051a      	lsls	r2, r3, #20
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6899      	ldr	r1, [r3, #8]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f7e:	025a      	lsls	r2, r3, #9
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	430a      	orrs	r2, r1
 8003f86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689a      	ldr	r2, [r3, #8]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	6899      	ldr	r1, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	029a      	lsls	r2, r3, #10
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	609a      	str	r2, [r3, #8]
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	40012300 	.word	0x40012300
 8003fbc:	0f000001 	.word	0x0f000001

08003fc0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fcc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d13c      	bne.n	8004054 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d12b      	bne.n	800404c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d127      	bne.n	800404c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004002:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004006:	2b00      	cmp	r3, #0
 8004008:	d006      	beq.n	8004018 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004014:	2b00      	cmp	r3, #0
 8004016:	d119      	bne.n	800404c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685a      	ldr	r2, [r3, #4]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0220 	bic.w	r2, r2, #32
 8004026:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d105      	bne.n	800404c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004044:	f043 0201 	orr.w	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f7fe f979 	bl	8002344 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004052:	e00e      	b.n	8004072 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	f003 0310 	and.w	r3, r3, #16
 800405c:	2b00      	cmp	r3, #0
 800405e:	d003      	beq.n	8004068 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f7ff fd5f 	bl	8003b24 <HAL_ADC_ErrorCallback>
}
 8004066:	e004      	b.n	8004072 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	4798      	blx	r3
}
 8004072:	bf00      	nop
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004086:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff fd41 	bl	8003b10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2240      	movs	r2, #64	; 0x40
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	f043 0204 	orr.w	r2, r3, #4
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff fd34 	bl	8003b24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040bc:	bf00      	nop
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <__NVIC_SetPriorityGrouping+0x40>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040e0:	4013      	ands	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <__NVIC_SetPriorityGrouping+0x44>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040f2:	4a04      	ldr	r2, [pc, #16]	; (8004104 <__NVIC_SetPriorityGrouping+0x40>)
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	60d3      	str	r3, [r2, #12]
}
 80040f8:	bf00      	nop
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	e000ed00 	.word	0xe000ed00
 8004108:	05fa0000 	.word	0x05fa0000

0800410c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <__NVIC_GetPriorityGrouping+0x18>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	0a1b      	lsrs	r3, r3, #8
 8004116:	f003 0307 	and.w	r3, r3, #7
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004136:	2b00      	cmp	r3, #0
 8004138:	db0b      	blt.n	8004152 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	f003 021f 	and.w	r2, r3, #31
 8004140:	4907      	ldr	r1, [pc, #28]	; (8004160 <__NVIC_EnableIRQ+0x38>)
 8004142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	2001      	movs	r0, #1
 800414a:	fa00 f202 	lsl.w	r2, r0, r2
 800414e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000e100 	.word	0xe000e100

08004164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	6039      	str	r1, [r7, #0]
 800416e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004174:	2b00      	cmp	r3, #0
 8004176:	db0a      	blt.n	800418e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	b2da      	uxtb	r2, r3
 800417c:	490c      	ldr	r1, [pc, #48]	; (80041b0 <__NVIC_SetPriority+0x4c>)
 800417e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004182:	0112      	lsls	r2, r2, #4
 8004184:	b2d2      	uxtb	r2, r2
 8004186:	440b      	add	r3, r1
 8004188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800418c:	e00a      	b.n	80041a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	b2da      	uxtb	r2, r3
 8004192:	4908      	ldr	r1, [pc, #32]	; (80041b4 <__NVIC_SetPriority+0x50>)
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	3b04      	subs	r3, #4
 800419c:	0112      	lsls	r2, r2, #4
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	440b      	add	r3, r1
 80041a2:	761a      	strb	r2, [r3, #24]
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	e000e100 	.word	0xe000e100
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b089      	sub	sp, #36	; 0x24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	f1c3 0307 	rsb	r3, r3, #7
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	bf28      	it	cs
 80041d6:	2304      	movcs	r3, #4
 80041d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	3304      	adds	r3, #4
 80041de:	2b06      	cmp	r3, #6
 80041e0:	d902      	bls.n	80041e8 <NVIC_EncodePriority+0x30>
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	3b03      	subs	r3, #3
 80041e6:	e000      	b.n	80041ea <NVIC_EncodePriority+0x32>
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041ec:	f04f 32ff 	mov.w	r2, #4294967295
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43da      	mvns	r2, r3
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	401a      	ands	r2, r3
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004200:	f04f 31ff 	mov.w	r1, #4294967295
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	fa01 f303 	lsl.w	r3, r1, r3
 800420a:	43d9      	mvns	r1, r3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004210:	4313      	orrs	r3, r2
         );
}
 8004212:	4618      	mov	r0, r3
 8004214:	3724      	adds	r7, #36	; 0x24
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	3b01      	subs	r3, #1
 800422c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004230:	d301      	bcc.n	8004236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004232:	2301      	movs	r3, #1
 8004234:	e00f      	b.n	8004256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004236:	4a0a      	ldr	r2, [pc, #40]	; (8004260 <SysTick_Config+0x40>)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	3b01      	subs	r3, #1
 800423c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800423e:	210f      	movs	r1, #15
 8004240:	f04f 30ff 	mov.w	r0, #4294967295
 8004244:	f7ff ff8e 	bl	8004164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <SysTick_Config+0x40>)
 800424a:	2200      	movs	r2, #0
 800424c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800424e:	4b04      	ldr	r3, [pc, #16]	; (8004260 <SysTick_Config+0x40>)
 8004250:	2207      	movs	r2, #7
 8004252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	e000e010 	.word	0xe000e010

08004264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b082      	sub	sp, #8
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f7ff ff29 	bl	80040c4 <__NVIC_SetPriorityGrouping>
}
 8004272:	bf00      	nop
 8004274:	3708      	adds	r7, #8
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800427a:	b580      	push	{r7, lr}
 800427c:	b086      	sub	sp, #24
 800427e:	af00      	add	r7, sp, #0
 8004280:	4603      	mov	r3, r0
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800428c:	f7ff ff3e 	bl	800410c <__NVIC_GetPriorityGrouping>
 8004290:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	6978      	ldr	r0, [r7, #20]
 8004298:	f7ff ff8e 	bl	80041b8 <NVIC_EncodePriority>
 800429c:	4602      	mov	r2, r0
 800429e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042a2:	4611      	mov	r1, r2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7ff ff5d 	bl	8004164 <__NVIC_SetPriority>
}
 80042aa:	bf00      	nop
 80042ac:	3718      	adds	r7, #24
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b082      	sub	sp, #8
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	4603      	mov	r3, r0
 80042ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff ff31 	bl	8004128 <__NVIC_EnableIRQ>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b082      	sub	sp, #8
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ffa2 	bl	8004220 <SysTick_Config>
 80042dc:	4603      	mov	r3, r0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042f4:	f7ff faac 	bl	8003850 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e099      	b.n	8004438 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0201 	bic.w	r2, r2, #1
 8004322:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004324:	e00f      	b.n	8004346 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004326:	f7ff fa93 	bl	8003850 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b05      	cmp	r3, #5
 8004332:	d908      	bls.n	8004346 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2203      	movs	r2, #3
 800433e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e078      	b.n	8004438 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e8      	bne.n	8004326 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	4b38      	ldr	r3, [pc, #224]	; (8004440 <HAL_DMA_Init+0x158>)
 8004360:	4013      	ands	r3, r2
 8004362:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004372:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800437e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800438a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	2b04      	cmp	r3, #4
 800439e:	d107      	bne.n	80043b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	4313      	orrs	r3, r2
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f023 0307 	bic.w	r3, r3, #7
 80043c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d117      	bne.n	800440a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00e      	beq.n	800440a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 fa99 	bl	8004924 <DMA_CheckFifoParam>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2240      	movs	r2, #64	; 0x40
 80043fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004406:	2301      	movs	r3, #1
 8004408:	e016      	b.n	8004438 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fa50 	bl	80048b8 <DMA_CalcBaseAndBitshift>
 8004418:	4603      	mov	r3, r0
 800441a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004420:	223f      	movs	r2, #63	; 0x3f
 8004422:	409a      	lsls	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004436:	2300      	movs	r3, #0
}
 8004438:	4618      	mov	r0, r3
 800443a:	3718      	adds	r7, #24
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	e010803f 	.word	0xe010803f

08004444 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800445a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_DMA_Start_IT+0x26>
 8004466:	2302      	movs	r3, #2
 8004468:	e048      	b.n	80044fc <HAL_DMA_Start_IT+0xb8>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004478:	b2db      	uxtb	r3, r3
 800447a:	2b01      	cmp	r3, #1
 800447c:	d137      	bne.n	80044ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2202      	movs	r2, #2
 8004482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	68f8      	ldr	r0, [r7, #12]
 8004494:	f000 f9e2 	bl	800485c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	223f      	movs	r2, #63	; 0x3f
 800449e:	409a      	lsls	r2, r3
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0216 	orr.w	r2, r2, #22
 80044b2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044c2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d007      	beq.n	80044dc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0208 	orr.w	r2, r2, #8
 80044da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	e005      	b.n	80044fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044f6:	2302      	movs	r3, #2
 80044f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d004      	beq.n	8004522 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2280      	movs	r2, #128	; 0x80
 800451c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e00c      	b.n	800453c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2205      	movs	r2, #5
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0201 	bic.w	r2, r2, #1
 8004538:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b086      	sub	sp, #24
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004554:	4b92      	ldr	r3, [pc, #584]	; (80047a0 <HAL_DMA_IRQHandler+0x258>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a92      	ldr	r2, [pc, #584]	; (80047a4 <HAL_DMA_IRQHandler+0x25c>)
 800455a:	fba2 2303 	umull	r2, r3, r2, r3
 800455e:	0a9b      	lsrs	r3, r3, #10
 8004560:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004566:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004572:	2208      	movs	r2, #8
 8004574:	409a      	lsls	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4013      	ands	r3, r2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d01a      	beq.n	80045b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0204 	bic.w	r2, r2, #4
 800459a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a0:	2208      	movs	r2, #8
 80045a2:	409a      	lsls	r2, r3
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ac:	f043 0201 	orr.w	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b8:	2201      	movs	r2, #1
 80045ba:	409a      	lsls	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d012      	beq.n	80045ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00b      	beq.n	80045ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d6:	2201      	movs	r2, #1
 80045d8:	409a      	lsls	r2, r3
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f043 0202 	orr.w	r2, r3, #2
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ee:	2204      	movs	r2, #4
 80045f0:	409a      	lsls	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4013      	ands	r3, r2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d012      	beq.n	8004620 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0302 	and.w	r3, r3, #2
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00b      	beq.n	8004620 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460c:	2204      	movs	r2, #4
 800460e:	409a      	lsls	r2, r3
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	f043 0204 	orr.w	r2, r3, #4
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004624:	2210      	movs	r2, #16
 8004626:	409a      	lsls	r2, r3
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d043      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0308 	and.w	r3, r3, #8
 800463a:	2b00      	cmp	r3, #0
 800463c:	d03c      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004642:	2210      	movs	r2, #16
 8004644:	409a      	lsls	r2, r3
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d018      	beq.n	800468a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d108      	bne.n	8004678 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d024      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	4798      	blx	r3
 8004676:	e01f      	b.n	80046b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01b      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	4798      	blx	r3
 8004688:	e016      	b.n	80046b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d107      	bne.n	80046a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0208 	bic.w	r2, r2, #8
 80046a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046bc:	2220      	movs	r2, #32
 80046be:	409a      	lsls	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4013      	ands	r3, r2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f000 808e 	beq.w	80047e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 0310 	and.w	r3, r3, #16
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8086 	beq.w	80047e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	2220      	movs	r2, #32
 80046e0:	409a      	lsls	r2, r3
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b05      	cmp	r3, #5
 80046f0:	d136      	bne.n	8004760 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0216 	bic.w	r2, r2, #22
 8004700:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695a      	ldr	r2, [r3, #20]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004710:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <HAL_DMA_IRQHandler+0x1da>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471e:	2b00      	cmp	r3, #0
 8004720:	d007      	beq.n	8004732 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0208 	bic.w	r2, r2, #8
 8004730:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004736:	223f      	movs	r2, #63	; 0x3f
 8004738:	409a      	lsls	r2, r3
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004752:	2b00      	cmp	r3, #0
 8004754:	d07d      	beq.n	8004852 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	4798      	blx	r3
        }
        return;
 800475e:	e078      	b.n	8004852 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d01c      	beq.n	80047a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d108      	bne.n	800478e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004780:	2b00      	cmp	r3, #0
 8004782:	d030      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	4798      	blx	r3
 800478c:	e02b      	b.n	80047e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	2b00      	cmp	r3, #0
 8004794:	d027      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	4798      	blx	r3
 800479e:	e022      	b.n	80047e6 <HAL_DMA_IRQHandler+0x29e>
 80047a0:	20000000 	.word	0x20000000
 80047a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10f      	bne.n	80047d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0210 	bic.w	r2, r2, #16
 80047c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d032      	beq.n	8004854 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d022      	beq.n	8004840 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2205      	movs	r2, #5
 80047fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	3301      	adds	r3, #1
 8004816:	60bb      	str	r3, [r7, #8]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	429a      	cmp	r2, r3
 800481c:	d307      	bcc.n	800482e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d1f2      	bne.n	8004812 <HAL_DMA_IRQHandler+0x2ca>
 800482c:	e000      	b.n	8004830 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800482e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	4798      	blx	r3
 8004850:	e000      	b.n	8004854 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004852:	bf00      	nop
    }
  }
}
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop

0800485c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004878:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	683a      	ldr	r2, [r7, #0]
 8004880:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d108      	bne.n	800489c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800489a:	e007      	b.n	80048ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	60da      	str	r2, [r3, #12]
}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	3b10      	subs	r3, #16
 80048c8:	4a13      	ldr	r2, [pc, #76]	; (8004918 <DMA_CalcBaseAndBitshift+0x60>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048d2:	4a12      	ldr	r2, [pc, #72]	; (800491c <DMA_CalcBaseAndBitshift+0x64>)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	461a      	mov	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d908      	bls.n	80048f8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <DMA_CalcBaseAndBitshift+0x68>)
 80048ee:	4013      	ands	r3, r2
 80048f0:	1d1a      	adds	r2, r3, #4
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	659a      	str	r2, [r3, #88]	; 0x58
 80048f6:	e006      	b.n	8004906 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	461a      	mov	r2, r3
 80048fe:	4b08      	ldr	r3, [pc, #32]	; (8004920 <DMA_CalcBaseAndBitshift+0x68>)
 8004900:	4013      	ands	r3, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	aaaaaaab 	.word	0xaaaaaaab
 800491c:	0800a760 	.word	0x0800a760
 8004920:	fffffc00 	.word	0xfffffc00

08004924 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800492c:	2300      	movs	r3, #0
 800492e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004934:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d11f      	bne.n	800497e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2b03      	cmp	r3, #3
 8004942:	d855      	bhi.n	80049f0 <DMA_CheckFifoParam+0xcc>
 8004944:	a201      	add	r2, pc, #4	; (adr r2, 800494c <DMA_CheckFifoParam+0x28>)
 8004946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494a:	bf00      	nop
 800494c:	0800495d 	.word	0x0800495d
 8004950:	0800496f 	.word	0x0800496f
 8004954:	0800495d 	.word	0x0800495d
 8004958:	080049f1 	.word	0x080049f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d045      	beq.n	80049f4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800496c:	e042      	b.n	80049f4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004972:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004976:	d13f      	bne.n	80049f8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497c:	e03c      	b.n	80049f8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004986:	d121      	bne.n	80049cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b03      	cmp	r3, #3
 800498c:	d836      	bhi.n	80049fc <DMA_CheckFifoParam+0xd8>
 800498e:	a201      	add	r2, pc, #4	; (adr r2, 8004994 <DMA_CheckFifoParam+0x70>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049a5 	.word	0x080049a5
 8004998:	080049ab 	.word	0x080049ab
 800499c:	080049a5 	.word	0x080049a5
 80049a0:	080049bd 	.word	0x080049bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
      break;
 80049a8:	e02f      	b.n	8004a0a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d024      	beq.n	8004a00 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049ba:	e021      	b.n	8004a00 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80049c4:	d11e      	bne.n	8004a04 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049ca:	e01b      	b.n	8004a04 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d902      	bls.n	80049d8 <DMA_CheckFifoParam+0xb4>
 80049d2:	2b03      	cmp	r3, #3
 80049d4:	d003      	beq.n	80049de <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049d6:	e018      	b.n	8004a0a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	73fb      	strb	r3, [r7, #15]
      break;
 80049dc:	e015      	b.n	8004a0a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00e      	beq.n	8004a08 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
      break;
 80049ee:	e00b      	b.n	8004a08 <DMA_CheckFifoParam+0xe4>
      break;
 80049f0:	bf00      	nop
 80049f2:	e00a      	b.n	8004a0a <DMA_CheckFifoParam+0xe6>
      break;
 80049f4:	bf00      	nop
 80049f6:	e008      	b.n	8004a0a <DMA_CheckFifoParam+0xe6>
      break;
 80049f8:	bf00      	nop
 80049fa:	e006      	b.n	8004a0a <DMA_CheckFifoParam+0xe6>
      break;
 80049fc:	bf00      	nop
 80049fe:	e004      	b.n	8004a0a <DMA_CheckFifoParam+0xe6>
      break;
 8004a00:	bf00      	nop
 8004a02:	e002      	b.n	8004a0a <DMA_CheckFifoParam+0xe6>
      break;   
 8004a04:	bf00      	nop
 8004a06:	e000      	b.n	8004a0a <DMA_CheckFifoParam+0xe6>
      break;
 8004a08:	bf00      	nop
    }
  } 
  
  return status; 
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b089      	sub	sp, #36	; 0x24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004a26:	2300      	movs	r3, #0
 8004a28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	61fb      	str	r3, [r7, #28]
 8004a36:	e175      	b.n	8004d24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a38:	2201      	movs	r2, #1
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	f040 8164 	bne.w	8004d1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d00b      	beq.n	8004a76 <HAL_GPIO_Init+0x5e>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d007      	beq.n	8004a76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a6a:	2b11      	cmp	r3, #17
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b12      	cmp	r3, #18
 8004a74:	d130      	bne.n	8004ad8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aac:	2201      	movs	r2, #1
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 0201 	and.w	r2, r3, #1
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	2203      	movs	r2, #3
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	43db      	mvns	r3, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	689a      	ldr	r2, [r3, #8]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	69ba      	ldr	r2, [r7, #24]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d003      	beq.n	8004b18 <HAL_GPIO_Init+0x100>
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2b12      	cmp	r3, #18
 8004b16:	d123      	bne.n	8004b60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	08da      	lsrs	r2, r3, #3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3208      	adds	r2, #8
 8004b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	220f      	movs	r2, #15
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f003 0307 	and.w	r3, r3, #7
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	08da      	lsrs	r2, r3, #3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3208      	adds	r2, #8
 8004b5a:	69b9      	ldr	r1, [r7, #24]
 8004b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	2203      	movs	r2, #3
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	69ba      	ldr	r2, [r7, #24]
 8004b74:	4013      	ands	r3, r2
 8004b76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f003 0203 	and.w	r2, r3, #3
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	fa02 f303 	lsl.w	r3, r2, r3
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80be 	beq.w	8004d1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ba2:	4b65      	ldr	r3, [pc, #404]	; (8004d38 <HAL_GPIO_Init+0x320>)
 8004ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba6:	4a64      	ldr	r2, [pc, #400]	; (8004d38 <HAL_GPIO_Init+0x320>)
 8004ba8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bac:	6453      	str	r3, [r2, #68]	; 0x44
 8004bae:	4b62      	ldr	r3, [pc, #392]	; (8004d38 <HAL_GPIO_Init+0x320>)
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004bba:	4a60      	ldr	r2, [pc, #384]	; (8004d3c <HAL_GPIO_Init+0x324>)
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	089b      	lsrs	r3, r3, #2
 8004bc0:	3302      	adds	r3, #2
 8004bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 0303 	and.w	r3, r3, #3
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	220f      	movs	r2, #15
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a57      	ldr	r2, [pc, #348]	; (8004d40 <HAL_GPIO_Init+0x328>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d037      	beq.n	8004c56 <HAL_GPIO_Init+0x23e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a56      	ldr	r2, [pc, #344]	; (8004d44 <HAL_GPIO_Init+0x32c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d031      	beq.n	8004c52 <HAL_GPIO_Init+0x23a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a55      	ldr	r2, [pc, #340]	; (8004d48 <HAL_GPIO_Init+0x330>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d02b      	beq.n	8004c4e <HAL_GPIO_Init+0x236>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a54      	ldr	r2, [pc, #336]	; (8004d4c <HAL_GPIO_Init+0x334>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d025      	beq.n	8004c4a <HAL_GPIO_Init+0x232>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a53      	ldr	r2, [pc, #332]	; (8004d50 <HAL_GPIO_Init+0x338>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d01f      	beq.n	8004c46 <HAL_GPIO_Init+0x22e>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a52      	ldr	r2, [pc, #328]	; (8004d54 <HAL_GPIO_Init+0x33c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d019      	beq.n	8004c42 <HAL_GPIO_Init+0x22a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a51      	ldr	r2, [pc, #324]	; (8004d58 <HAL_GPIO_Init+0x340>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d013      	beq.n	8004c3e <HAL_GPIO_Init+0x226>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a50      	ldr	r2, [pc, #320]	; (8004d5c <HAL_GPIO_Init+0x344>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00d      	beq.n	8004c3a <HAL_GPIO_Init+0x222>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a4f      	ldr	r2, [pc, #316]	; (8004d60 <HAL_GPIO_Init+0x348>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d007      	beq.n	8004c36 <HAL_GPIO_Init+0x21e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a4e      	ldr	r2, [pc, #312]	; (8004d64 <HAL_GPIO_Init+0x34c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d101      	bne.n	8004c32 <HAL_GPIO_Init+0x21a>
 8004c2e:	2309      	movs	r3, #9
 8004c30:	e012      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c32:	230a      	movs	r3, #10
 8004c34:	e010      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c36:	2308      	movs	r3, #8
 8004c38:	e00e      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c3a:	2307      	movs	r3, #7
 8004c3c:	e00c      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c3e:	2306      	movs	r3, #6
 8004c40:	e00a      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c42:	2305      	movs	r3, #5
 8004c44:	e008      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c46:	2304      	movs	r3, #4
 8004c48:	e006      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e004      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e002      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <HAL_GPIO_Init+0x240>
 8004c56:	2300      	movs	r3, #0
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	f002 0203 	and.w	r2, r2, #3
 8004c5e:	0092      	lsls	r2, r2, #2
 8004c60:	4093      	lsls	r3, r2
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c68:	4934      	ldr	r1, [pc, #208]	; (8004d3c <HAL_GPIO_Init+0x324>)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	089b      	lsrs	r3, r3, #2
 8004c6e:	3302      	adds	r3, #2
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c76:	4b3c      	ldr	r3, [pc, #240]	; (8004d68 <HAL_GPIO_Init+0x350>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	43db      	mvns	r3, r3
 8004c80:	69ba      	ldr	r2, [r7, #24]
 8004c82:	4013      	ands	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c92:	69ba      	ldr	r2, [r7, #24]
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c9a:	4a33      	ldr	r2, [pc, #204]	; (8004d68 <HAL_GPIO_Init+0x350>)
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ca0:	4b31      	ldr	r3, [pc, #196]	; (8004d68 <HAL_GPIO_Init+0x350>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	43db      	mvns	r3, r3
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	4013      	ands	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004cbc:	69ba      	ldr	r2, [r7, #24]
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cc4:	4a28      	ldr	r2, [pc, #160]	; (8004d68 <HAL_GPIO_Init+0x350>)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cca:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <HAL_GPIO_Init+0x350>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004ce6:	69ba      	ldr	r2, [r7, #24]
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cee:	4a1e      	ldr	r2, [pc, #120]	; (8004d68 <HAL_GPIO_Init+0x350>)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cf4:	4b1c      	ldr	r3, [pc, #112]	; (8004d68 <HAL_GPIO_Init+0x350>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	43db      	mvns	r3, r3
 8004cfe:	69ba      	ldr	r2, [r7, #24]
 8004d00:	4013      	ands	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d003      	beq.n	8004d18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004d10:	69ba      	ldr	r2, [r7, #24]
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d18:	4a13      	ldr	r2, [pc, #76]	; (8004d68 <HAL_GPIO_Init+0x350>)
 8004d1a:	69bb      	ldr	r3, [r7, #24]
 8004d1c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	3301      	adds	r3, #1
 8004d22:	61fb      	str	r3, [r7, #28]
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	2b0f      	cmp	r3, #15
 8004d28:	f67f ae86 	bls.w	8004a38 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	3724      	adds	r7, #36	; 0x24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40013800 	.word	0x40013800
 8004d40:	40020000 	.word	0x40020000
 8004d44:	40020400 	.word	0x40020400
 8004d48:	40020800 	.word	0x40020800
 8004d4c:	40020c00 	.word	0x40020c00
 8004d50:	40021000 	.word	0x40021000
 8004d54:	40021400 	.word	0x40021400
 8004d58:	40021800 	.word	0x40021800
 8004d5c:	40021c00 	.word	0x40021c00
 8004d60:	40022000 	.word	0x40022000
 8004d64:	40022400 	.word	0x40022400
 8004d68:	40013c00 	.word	0x40013c00

08004d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	460b      	mov	r3, r1
 8004d76:	807b      	strh	r3, [r7, #2]
 8004d78:	4613      	mov	r3, r2
 8004d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d7c:	787b      	ldrb	r3, [r7, #1]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d003      	beq.n	8004d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d82:	887a      	ldrh	r2, [r7, #2]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d88:	e003      	b.n	8004d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d8a:	887b      	ldrh	r3, [r7, #2]
 8004d8c:	041a      	lsls	r2, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	619a      	str	r2, [r3, #24]
}
 8004d92:	bf00      	nop
 8004d94:	370c      	adds	r7, #12
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
	...

08004da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	4603      	mov	r3, r0
 8004da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004daa:	4b08      	ldr	r3, [pc, #32]	; (8004dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	4013      	ands	r3, r2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d006      	beq.n	8004dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004db6:	4a05      	ldr	r2, [pc, #20]	; (8004dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004db8:	88fb      	ldrh	r3, [r7, #6]
 8004dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dbc:	88fb      	ldrh	r3, [r7, #6]
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fc f974 	bl	80010ac <HAL_GPIO_EXTI_Callback>
  }
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40013c00 	.word	0x40013c00

08004dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e07f      	b.n	8004ee2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fd fe5c 	bl	8002ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2224      	movs	r2, #36	; 0x24
 8004e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0201 	bic.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d107      	bne.n	8004e4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e46:	609a      	str	r2, [r3, #8]
 8004e48:	e006      	b.n	8004e58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d104      	bne.n	8004e6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6859      	ldr	r1, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	4b1d      	ldr	r3, [pc, #116]	; (8004eec <HAL_I2C_Init+0x11c>)
 8004e76:	430b      	orrs	r3, r1
 8004e78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	ea42 0103 	orr.w	r1, r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	021a      	lsls	r2, r3, #8
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69d9      	ldr	r1, [r3, #28]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a1a      	ldr	r2, [r3, #32]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	02008000 	.word	0x02008000

08004ef0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b20      	cmp	r3, #32
 8004f04:	d138      	bne.n	8004f78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d101      	bne.n	8004f14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004f10:	2302      	movs	r3, #2
 8004f12:	e032      	b.n	8004f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2224      	movs	r2, #36	; 0x24
 8004f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f022 0201 	bic.w	r2, r2, #1
 8004f32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6819      	ldr	r1, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e000      	b.n	8004f7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b085      	sub	sp, #20
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d139      	bne.n	8005010 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e033      	b.n	8005012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2224      	movs	r2, #36	; 0x24
 8004fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 0201 	bic.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800500c:	2300      	movs	r3, #0
 800500e:	e000      	b.n	8005012 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005010:	2302      	movs	r3, #2
  }
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
	...

08005020 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a04      	ldr	r2, [pc, #16]	; (800503c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800502a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800502e:	6013      	str	r3, [r2, #0]
}
 8005030:	bf00      	nop
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40007000 	.word	0x40007000

08005040 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800504a:	4b23      	ldr	r3, [pc, #140]	; (80050d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	4a22      	ldr	r2, [pc, #136]	; (80050d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005054:	6413      	str	r3, [r2, #64]	; 0x40
 8005056:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_PWREx_EnableOverDrive+0x98>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505e:	603b      	str	r3, [r7, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005062:	4b1e      	ldr	r3, [pc, #120]	; (80050dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1d      	ldr	r2, [pc, #116]	; (80050dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800506c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800506e:	f7fe fbef 	bl	8003850 <HAL_GetTick>
 8005072:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005074:	e009      	b.n	800508a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005076:	f7fe fbeb 	bl	8003850 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005084:	d901      	bls.n	800508a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e022      	b.n	80050d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800508a:	4b14      	ldr	r3, [pc, #80]	; (80050dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005096:	d1ee      	bne.n	8005076 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005098:	4b10      	ldr	r3, [pc, #64]	; (80050dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a0f      	ldr	r2, [pc, #60]	; (80050dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800509e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050a2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050a4:	f7fe fbd4 	bl	8003850 <HAL_GetTick>
 80050a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050aa:	e009      	b.n	80050c0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80050ac:	f7fe fbd0 	bl	8003850 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050ba:	d901      	bls.n	80050c0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e007      	b.n	80050d0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <HAL_PWREx_EnableOverDrive+0x9c>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050cc:	d1ee      	bne.n	80050ac <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	40023800 	.word	0x40023800
 80050dc:	40007000 	.word	0x40007000

080050e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80050e8:	2300      	movs	r3, #0
 80050ea:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e29b      	b.n	800562e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 8087 	beq.w	8005212 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005104:	4b96      	ldr	r3, [pc, #600]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b04      	cmp	r3, #4
 800510e:	d00c      	beq.n	800512a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005110:	4b93      	ldr	r3, [pc, #588]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b08      	cmp	r3, #8
 800511a:	d112      	bne.n	8005142 <HAL_RCC_OscConfig+0x62>
 800511c:	4b90      	ldr	r3, [pc, #576]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005128:	d10b      	bne.n	8005142 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800512a:	4b8d      	ldr	r3, [pc, #564]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d06c      	beq.n	8005210 <HAL_RCC_OscConfig+0x130>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d168      	bne.n	8005210 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e275      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800514a:	d106      	bne.n	800515a <HAL_RCC_OscConfig+0x7a>
 800514c:	4b84      	ldr	r3, [pc, #528]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a83      	ldr	r2, [pc, #524]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	e02e      	b.n	80051b8 <HAL_RCC_OscConfig+0xd8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10c      	bne.n	800517c <HAL_RCC_OscConfig+0x9c>
 8005162:	4b7f      	ldr	r3, [pc, #508]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a7e      	ldr	r2, [pc, #504]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	4b7c      	ldr	r3, [pc, #496]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a7b      	ldr	r2, [pc, #492]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005178:	6013      	str	r3, [r2, #0]
 800517a:	e01d      	b.n	80051b8 <HAL_RCC_OscConfig+0xd8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005184:	d10c      	bne.n	80051a0 <HAL_RCC_OscConfig+0xc0>
 8005186:	4b76      	ldr	r3, [pc, #472]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a75      	ldr	r2, [pc, #468]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800518c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	4b73      	ldr	r3, [pc, #460]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a72      	ldr	r2, [pc, #456]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	e00b      	b.n	80051b8 <HAL_RCC_OscConfig+0xd8>
 80051a0:	4b6f      	ldr	r3, [pc, #444]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a6e      	ldr	r2, [pc, #440]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 80051a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051aa:	6013      	str	r3, [r2, #0]
 80051ac:	4b6c      	ldr	r3, [pc, #432]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a6b      	ldr	r2, [pc, #428]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 80051b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d013      	beq.n	80051e8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c0:	f7fe fb46 	bl	8003850 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051c8:	f7fe fb42 	bl	8003850 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b64      	cmp	r3, #100	; 0x64
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e229      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051da:	4b61      	ldr	r3, [pc, #388]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0xe8>
 80051e6:	e014      	b.n	8005212 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e8:	f7fe fb32 	bl	8003850 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051f0:	f7fe fb2e 	bl	8003850 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b64      	cmp	r3, #100	; 0x64
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e215      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005202:	4b57      	ldr	r3, [pc, #348]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x110>
 800520e:	e000      	b.n	8005212 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d069      	beq.n	80052f2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800521e:	4b50      	ldr	r3, [pc, #320]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00b      	beq.n	8005242 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800522a:	4b4d      	ldr	r3, [pc, #308]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
 8005232:	2b08      	cmp	r3, #8
 8005234:	d11c      	bne.n	8005270 <HAL_RCC_OscConfig+0x190>
 8005236:	4b4a      	ldr	r3, [pc, #296]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523e:	2b00      	cmp	r3, #0
 8005240:	d116      	bne.n	8005270 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005242:	4b47      	ldr	r3, [pc, #284]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_RCC_OscConfig+0x17a>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	2b01      	cmp	r3, #1
 8005254:	d001      	beq.n	800525a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e1e9      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800525a:	4b41      	ldr	r3, [pc, #260]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	00db      	lsls	r3, r3, #3
 8005268:	493d      	ldr	r1, [pc, #244]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800526e:	e040      	b.n	80052f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d023      	beq.n	80052c0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005278:	4b39      	ldr	r3, [pc, #228]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a38      	ldr	r2, [pc, #224]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800527e:	f043 0301 	orr.w	r3, r3, #1
 8005282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fe fae4 	bl	8003850 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800528c:	f7fe fae0 	bl	8003850 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e1c7      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800529e:	4b30      	ldr	r3, [pc, #192]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0302 	and.w	r3, r3, #2
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052aa:	4b2d      	ldr	r3, [pc, #180]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4929      	ldr	r1, [pc, #164]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	600b      	str	r3, [r1, #0]
 80052be:	e018      	b.n	80052f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052c0:	4b27      	ldr	r3, [pc, #156]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a26      	ldr	r2, [pc, #152]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 80052c6:	f023 0301 	bic.w	r3, r3, #1
 80052ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fe fac0 	bl	8003850 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d4:	f7fe fabc 	bl	8003850 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e1a3      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052e6:	4b1e      	ldr	r3, [pc, #120]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f0      	bne.n	80052d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0308 	and.w	r3, r3, #8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d038      	beq.n	8005370 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d019      	beq.n	800533a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005306:	4b16      	ldr	r3, [pc, #88]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800530a:	4a15      	ldr	r2, [pc, #84]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005312:	f7fe fa9d 	bl	8003850 <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005318:	e008      	b.n	800532c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800531a:	f7fe fa99 	bl	8003850 <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e180      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800532c:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800532e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d0f0      	beq.n	800531a <HAL_RCC_OscConfig+0x23a>
 8005338:	e01a      	b.n	8005370 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 800533c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533e:	4a08      	ldr	r2, [pc, #32]	; (8005360 <HAL_RCC_OscConfig+0x280>)
 8005340:	f023 0301 	bic.w	r3, r3, #1
 8005344:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005346:	f7fe fa83 	bl	8003850 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800534c:	e00a      	b.n	8005364 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800534e:	f7fe fa7f 	bl	8003850 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b02      	cmp	r3, #2
 800535a:	d903      	bls.n	8005364 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	e166      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
 8005360:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005364:	4b92      	ldr	r3, [pc, #584]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1ee      	bne.n	800534e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 80a4 	beq.w	80054c6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800537e:	4b8c      	ldr	r3, [pc, #560]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d10d      	bne.n	80053a6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800538a:	4b89      	ldr	r3, [pc, #548]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	4a88      	ldr	r2, [pc, #544]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005394:	6413      	str	r3, [r2, #64]	; 0x40
 8005396:	4b86      	ldr	r3, [pc, #536]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539e:	60bb      	str	r3, [r7, #8]
 80053a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053a2:	2301      	movs	r3, #1
 80053a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053a6:	4b83      	ldr	r3, [pc, #524]	; (80055b4 <HAL_RCC_OscConfig+0x4d4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d118      	bne.n	80053e4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80053b2:	4b80      	ldr	r3, [pc, #512]	; (80055b4 <HAL_RCC_OscConfig+0x4d4>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a7f      	ldr	r2, [pc, #508]	; (80055b4 <HAL_RCC_OscConfig+0x4d4>)
 80053b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053be:	f7fe fa47 	bl	8003850 <HAL_GetTick>
 80053c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c4:	e008      	b.n	80053d8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053c6:	f7fe fa43 	bl	8003850 <HAL_GetTick>
 80053ca:	4602      	mov	r2, r0
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	2b64      	cmp	r3, #100	; 0x64
 80053d2:	d901      	bls.n	80053d8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80053d4:	2303      	movs	r3, #3
 80053d6:	e12a      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053d8:	4b76      	ldr	r3, [pc, #472]	; (80055b4 <HAL_RCC_OscConfig+0x4d4>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d0f0      	beq.n	80053c6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d106      	bne.n	80053fa <HAL_RCC_OscConfig+0x31a>
 80053ec:	4b70      	ldr	r3, [pc, #448]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 80053ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f0:	4a6f      	ldr	r2, [pc, #444]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 80053f2:	f043 0301 	orr.w	r3, r3, #1
 80053f6:	6713      	str	r3, [r2, #112]	; 0x70
 80053f8:	e02d      	b.n	8005456 <HAL_RCC_OscConfig+0x376>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10c      	bne.n	800541c <HAL_RCC_OscConfig+0x33c>
 8005402:	4b6b      	ldr	r3, [pc, #428]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005406:	4a6a      	ldr	r2, [pc, #424]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005408:	f023 0301 	bic.w	r3, r3, #1
 800540c:	6713      	str	r3, [r2, #112]	; 0x70
 800540e:	4b68      	ldr	r3, [pc, #416]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005412:	4a67      	ldr	r2, [pc, #412]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005414:	f023 0304 	bic.w	r3, r3, #4
 8005418:	6713      	str	r3, [r2, #112]	; 0x70
 800541a:	e01c      	b.n	8005456 <HAL_RCC_OscConfig+0x376>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	2b05      	cmp	r3, #5
 8005422:	d10c      	bne.n	800543e <HAL_RCC_OscConfig+0x35e>
 8005424:	4b62      	ldr	r3, [pc, #392]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	4a61      	ldr	r2, [pc, #388]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 800542a:	f043 0304 	orr.w	r3, r3, #4
 800542e:	6713      	str	r3, [r2, #112]	; 0x70
 8005430:	4b5f      	ldr	r3, [pc, #380]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	4a5e      	ldr	r2, [pc, #376]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	6713      	str	r3, [r2, #112]	; 0x70
 800543c:	e00b      	b.n	8005456 <HAL_RCC_OscConfig+0x376>
 800543e:	4b5c      	ldr	r3, [pc, #368]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005442:	4a5b      	ldr	r2, [pc, #364]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	6713      	str	r3, [r2, #112]	; 0x70
 800544a:	4b59      	ldr	r3, [pc, #356]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 800544c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544e:	4a58      	ldr	r2, [pc, #352]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005450:	f023 0304 	bic.w	r3, r3, #4
 8005454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d015      	beq.n	800548a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800545e:	f7fe f9f7 	bl	8003850 <HAL_GetTick>
 8005462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005464:	e00a      	b.n	800547c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005466:	f7fe f9f3 	bl	8003850 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	f241 3288 	movw	r2, #5000	; 0x1388
 8005474:	4293      	cmp	r3, r2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e0d8      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800547c:	4b4c      	ldr	r3, [pc, #304]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 800547e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d0ee      	beq.n	8005466 <HAL_RCC_OscConfig+0x386>
 8005488:	e014      	b.n	80054b4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548a:	f7fe f9e1 	bl	8003850 <HAL_GetTick>
 800548e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005490:	e00a      	b.n	80054a8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005492:	f7fe f9dd 	bl	8003850 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e0c2      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054a8:	4b41      	ldr	r3, [pc, #260]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 80054aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1ee      	bne.n	8005492 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d105      	bne.n	80054c6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054ba:	4b3d      	ldr	r3, [pc, #244]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	4a3c      	ldr	r2, [pc, #240]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 80054c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80ae 	beq.w	800562c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054d0:	4b37      	ldr	r3, [pc, #220]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	f003 030c 	and.w	r3, r3, #12
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d06d      	beq.n	80055b8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d14b      	bne.n	800557c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e4:	4b32      	ldr	r3, [pc, #200]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a31      	ldr	r2, [pc, #196]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 80054ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f0:	f7fe f9ae 	bl	8003850 <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f6:	e008      	b.n	800550a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054f8:	f7fe f9aa 	bl	8003850 <HAL_GetTick>
 80054fc:	4602      	mov	r2, r0
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	2b02      	cmp	r3, #2
 8005504:	d901      	bls.n	800550a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005506:	2303      	movs	r3, #3
 8005508:	e091      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800550a:	4b29      	ldr	r3, [pc, #164]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1f0      	bne.n	80054f8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	69da      	ldr	r2, [r3, #28]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	019b      	lsls	r3, r3, #6
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552c:	085b      	lsrs	r3, r3, #1
 800552e:	3b01      	subs	r3, #1
 8005530:	041b      	lsls	r3, r3, #16
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005538:	061b      	lsls	r3, r3, #24
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	071b      	lsls	r3, r3, #28
 8005542:	491b      	ldr	r1, [pc, #108]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005544:	4313      	orrs	r3, r2
 8005546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005548:	4b19      	ldr	r3, [pc, #100]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a18      	ldr	r2, [pc, #96]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 800554e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fe f97c 	bl	8003850 <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800555c:	f7fe f978 	bl	8003850 <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e05f      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800556e:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d0f0      	beq.n	800555c <HAL_RCC_OscConfig+0x47c>
 800557a:	e057      	b.n	800562c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800557c:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a0b      	ldr	r2, [pc, #44]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 8005582:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005586:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005588:	f7fe f962 	bl	8003850 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005590:	f7fe f95e 	bl	8003850 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e045      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055a2:	4b03      	ldr	r3, [pc, #12]	; (80055b0 <HAL_RCC_OscConfig+0x4d0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1f0      	bne.n	8005590 <HAL_RCC_OscConfig+0x4b0>
 80055ae:	e03d      	b.n	800562c <HAL_RCC_OscConfig+0x54c>
 80055b0:	40023800 	.word	0x40023800
 80055b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80055b8:	4b1f      	ldr	r3, [pc, #124]	; (8005638 <HAL_RCC_OscConfig+0x558>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d030      	beq.n	8005628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d129      	bne.n	8005628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055de:	429a      	cmp	r2, r3
 80055e0:	d122      	bne.n	8005628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055e8:	4013      	ands	r3, r2
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d119      	bne.n	8005628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	085b      	lsrs	r3, r3, #1
 8005600:	3b01      	subs	r3, #1
 8005602:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005604:	429a      	cmp	r2, r3
 8005606:	d10f      	bne.n	8005628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005612:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005614:	429a      	cmp	r2, r3
 8005616:	d107      	bne.n	8005628 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005622:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005624:	429a      	cmp	r2, r3
 8005626:	d001      	beq.n	800562c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800562c:	2300      	movs	r3, #0
}
 800562e:	4618      	mov	r0, r3
 8005630:	3718      	adds	r7, #24
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800

0800563c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005646:	2300      	movs	r3, #0
 8005648:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0d0      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005654:	4b6a      	ldr	r3, [pc, #424]	; (8005800 <HAL_RCC_ClockConfig+0x1c4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d910      	bls.n	8005684 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b67      	ldr	r3, [pc, #412]	; (8005800 <HAL_RCC_ClockConfig+0x1c4>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f023 020f 	bic.w	r2, r3, #15
 800566a:	4965      	ldr	r1, [pc, #404]	; (8005800 <HAL_RCC_ClockConfig+0x1c4>)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	4313      	orrs	r3, r2
 8005670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005672:	4b63      	ldr	r3, [pc, #396]	; (8005800 <HAL_RCC_ClockConfig+0x1c4>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e0b8      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d020      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0304 	and.w	r3, r3, #4
 8005698:	2b00      	cmp	r3, #0
 800569a:	d005      	beq.n	80056a8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800569c:	4b59      	ldr	r3, [pc, #356]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	4a58      	ldr	r2, [pc, #352]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 80056a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0308 	and.w	r3, r3, #8
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056b4:	4b53      	ldr	r3, [pc, #332]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	4a52      	ldr	r2, [pc, #328]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 80056ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056c0:	4b50      	ldr	r3, [pc, #320]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	494d      	ldr	r1, [pc, #308]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d040      	beq.n	8005760 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d107      	bne.n	80056f6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e6:	4b47      	ldr	r3, [pc, #284]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d115      	bne.n	800571e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e07f      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d107      	bne.n	800570e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056fe:	4b41      	ldr	r3, [pc, #260]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e073      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800570e:	4b3d      	ldr	r3, [pc, #244]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0302 	and.w	r3, r3, #2
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e06b      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800571e:	4b39      	ldr	r3, [pc, #228]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f023 0203 	bic.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	4936      	ldr	r1, [pc, #216]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 800572c:	4313      	orrs	r3, r2
 800572e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005730:	f7fe f88e 	bl	8003850 <HAL_GetTick>
 8005734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005736:	e00a      	b.n	800574e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005738:	f7fe f88a 	bl	8003850 <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	f241 3288 	movw	r2, #5000	; 0x1388
 8005746:	4293      	cmp	r3, r2
 8005748:	d901      	bls.n	800574e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e053      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800574e:	4b2d      	ldr	r3, [pc, #180]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 020c 	and.w	r2, r3, #12
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	429a      	cmp	r2, r3
 800575e:	d1eb      	bne.n	8005738 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005760:	4b27      	ldr	r3, [pc, #156]	; (8005800 <HAL_RCC_ClockConfig+0x1c4>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 030f 	and.w	r3, r3, #15
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d210      	bcs.n	8005790 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800576e:	4b24      	ldr	r3, [pc, #144]	; (8005800 <HAL_RCC_ClockConfig+0x1c4>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f023 020f 	bic.w	r2, r3, #15
 8005776:	4922      	ldr	r1, [pc, #136]	; (8005800 <HAL_RCC_ClockConfig+0x1c4>)
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	4313      	orrs	r3, r2
 800577c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577e:	4b20      	ldr	r3, [pc, #128]	; (8005800 <HAL_RCC_ClockConfig+0x1c4>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	429a      	cmp	r2, r3
 800578a:	d001      	beq.n	8005790 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e032      	b.n	80057f6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d008      	beq.n	80057ae <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800579c:	4b19      	ldr	r3, [pc, #100]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	4916      	ldr	r1, [pc, #88]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0308 	and.w	r3, r3, #8
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80057ba:	4b12      	ldr	r3, [pc, #72]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	00db      	lsls	r3, r3, #3
 80057c8:	490e      	ldr	r1, [pc, #56]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057ce:	f000 f821 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 80057d2:	4601      	mov	r1, r0
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_RCC_ClockConfig+0x1c8>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	4a0a      	ldr	r2, [pc, #40]	; (8005808 <HAL_RCC_ClockConfig+0x1cc>)
 80057e0:	5cd3      	ldrb	r3, [r2, r3]
 80057e2:	fa21 f303 	lsr.w	r3, r1, r3
 80057e6:	4a09      	ldr	r2, [pc, #36]	; (800580c <HAL_RCC_ClockConfig+0x1d0>)
 80057e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_RCC_ClockConfig+0x1d4>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fd ffea 	bl	80037c8 <HAL_InitTick>

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	40023c00 	.word	0x40023c00
 8005804:	40023800 	.word	0x40023800
 8005808:	0800a748 	.word	0x0800a748
 800580c:	20000000 	.word	0x20000000
 8005810:	20000004 	.word	0x20000004

08005814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	607b      	str	r3, [r7, #4]
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	2300      	movs	r3, #0
 8005824:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800582a:	4b50      	ldr	r3, [pc, #320]	; (800596c <HAL_RCC_GetSysClockFreq+0x158>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b04      	cmp	r3, #4
 8005834:	d007      	beq.n	8005846 <HAL_RCC_GetSysClockFreq+0x32>
 8005836:	2b08      	cmp	r3, #8
 8005838:	d008      	beq.n	800584c <HAL_RCC_GetSysClockFreq+0x38>
 800583a:	2b00      	cmp	r3, #0
 800583c:	f040 808d 	bne.w	800595a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005840:	4b4b      	ldr	r3, [pc, #300]	; (8005970 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005842:	60bb      	str	r3, [r7, #8]
      break;
 8005844:	e08c      	b.n	8005960 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005846:	4b4b      	ldr	r3, [pc, #300]	; (8005974 <HAL_RCC_GetSysClockFreq+0x160>)
 8005848:	60bb      	str	r3, [r7, #8]
      break;
 800584a:	e089      	b.n	8005960 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800584c:	4b47      	ldr	r3, [pc, #284]	; (800596c <HAL_RCC_GetSysClockFreq+0x158>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005854:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005856:	4b45      	ldr	r3, [pc, #276]	; (800596c <HAL_RCC_GetSysClockFreq+0x158>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d023      	beq.n	80058aa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005862:	4b42      	ldr	r3, [pc, #264]	; (800596c <HAL_RCC_GetSysClockFreq+0x158>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	099b      	lsrs	r3, r3, #6
 8005868:	f04f 0400 	mov.w	r4, #0
 800586c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005870:	f04f 0200 	mov.w	r2, #0
 8005874:	ea03 0501 	and.w	r5, r3, r1
 8005878:	ea04 0602 	and.w	r6, r4, r2
 800587c:	4a3d      	ldr	r2, [pc, #244]	; (8005974 <HAL_RCC_GetSysClockFreq+0x160>)
 800587e:	fb02 f106 	mul.w	r1, r2, r6
 8005882:	2200      	movs	r2, #0
 8005884:	fb02 f205 	mul.w	r2, r2, r5
 8005888:	440a      	add	r2, r1
 800588a:	493a      	ldr	r1, [pc, #232]	; (8005974 <HAL_RCC_GetSysClockFreq+0x160>)
 800588c:	fba5 0101 	umull	r0, r1, r5, r1
 8005890:	1853      	adds	r3, r2, r1
 8005892:	4619      	mov	r1, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f04f 0400 	mov.w	r4, #0
 800589a:	461a      	mov	r2, r3
 800589c:	4623      	mov	r3, r4
 800589e:	f7fa fd37 	bl	8000310 <__aeabi_uldivmod>
 80058a2:	4603      	mov	r3, r0
 80058a4:	460c      	mov	r4, r1
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e049      	b.n	800593e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80058aa:	4b30      	ldr	r3, [pc, #192]	; (800596c <HAL_RCC_GetSysClockFreq+0x158>)
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	099b      	lsrs	r3, r3, #6
 80058b0:	f04f 0400 	mov.w	r4, #0
 80058b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80058b8:	f04f 0200 	mov.w	r2, #0
 80058bc:	ea03 0501 	and.w	r5, r3, r1
 80058c0:	ea04 0602 	and.w	r6, r4, r2
 80058c4:	4629      	mov	r1, r5
 80058c6:	4632      	mov	r2, r6
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	f04f 0400 	mov.w	r4, #0
 80058d0:	0154      	lsls	r4, r2, #5
 80058d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80058d6:	014b      	lsls	r3, r1, #5
 80058d8:	4619      	mov	r1, r3
 80058da:	4622      	mov	r2, r4
 80058dc:	1b49      	subs	r1, r1, r5
 80058de:	eb62 0206 	sbc.w	r2, r2, r6
 80058e2:	f04f 0300 	mov.w	r3, #0
 80058e6:	f04f 0400 	mov.w	r4, #0
 80058ea:	0194      	lsls	r4, r2, #6
 80058ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058f0:	018b      	lsls	r3, r1, #6
 80058f2:	1a5b      	subs	r3, r3, r1
 80058f4:	eb64 0402 	sbc.w	r4, r4, r2
 80058f8:	f04f 0100 	mov.w	r1, #0
 80058fc:	f04f 0200 	mov.w	r2, #0
 8005900:	00e2      	lsls	r2, r4, #3
 8005902:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005906:	00d9      	lsls	r1, r3, #3
 8005908:	460b      	mov	r3, r1
 800590a:	4614      	mov	r4, r2
 800590c:	195b      	adds	r3, r3, r5
 800590e:	eb44 0406 	adc.w	r4, r4, r6
 8005912:	f04f 0100 	mov.w	r1, #0
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	02a2      	lsls	r2, r4, #10
 800591c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005920:	0299      	lsls	r1, r3, #10
 8005922:	460b      	mov	r3, r1
 8005924:	4614      	mov	r4, r2
 8005926:	4618      	mov	r0, r3
 8005928:	4621      	mov	r1, r4
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f04f 0400 	mov.w	r4, #0
 8005930:	461a      	mov	r2, r3
 8005932:	4623      	mov	r3, r4
 8005934:	f7fa fcec 	bl	8000310 <__aeabi_uldivmod>
 8005938:	4603      	mov	r3, r0
 800593a:	460c      	mov	r4, r1
 800593c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800593e:	4b0b      	ldr	r3, [pc, #44]	; (800596c <HAL_RCC_GetSysClockFreq+0x158>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	0c1b      	lsrs	r3, r3, #16
 8005944:	f003 0303 	and.w	r3, r3, #3
 8005948:	3301      	adds	r3, #1
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	fbb2 f3f3 	udiv	r3, r2, r3
 8005956:	60bb      	str	r3, [r7, #8]
      break;
 8005958:	e002      	b.n	8005960 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800595a:	4b05      	ldr	r3, [pc, #20]	; (8005970 <HAL_RCC_GetSysClockFreq+0x15c>)
 800595c:	60bb      	str	r3, [r7, #8]
      break;
 800595e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005960:	68bb      	ldr	r3, [r7, #8]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800
 8005970:	00f42400 	.word	0x00f42400
 8005974:	00989680 	.word	0x00989680

08005978 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800597c:	4b03      	ldr	r3, [pc, #12]	; (800598c <HAL_RCC_GetHCLKFreq+0x14>)
 800597e:	681b      	ldr	r3, [r3, #0]
}
 8005980:	4618      	mov	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	20000000 	.word	0x20000000

08005990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005994:	f7ff fff0 	bl	8005978 <HAL_RCC_GetHCLKFreq>
 8005998:	4601      	mov	r1, r0
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	0a9b      	lsrs	r3, r3, #10
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	4a03      	ldr	r2, [pc, #12]	; (80059b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a6:	5cd3      	ldrb	r3, [r2, r3]
 80059a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40023800 	.word	0x40023800
 80059b4:	0800a758 	.word	0x0800a758

080059b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059bc:	f7ff ffdc 	bl	8005978 <HAL_RCC_GetHCLKFreq>
 80059c0:	4601      	mov	r1, r0
 80059c2:	4b05      	ldr	r3, [pc, #20]	; (80059d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	0b5b      	lsrs	r3, r3, #13
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	4a03      	ldr	r2, [pc, #12]	; (80059dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80059ce:	5cd3      	ldrb	r3, [r2, r3]
 80059d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	40023800 	.word	0x40023800
 80059dc:	0800a758 	.word	0x0800a758

080059e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80059f4:	2300      	movs	r3, #0
 80059f6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d012      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a08:	4b69      	ldr	r3, [pc, #420]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4a68      	ldr	r2, [pc, #416]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005a12:	6093      	str	r3, [r2, #8]
 8005a14:	4b66      	ldr	r3, [pc, #408]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1c:	4964      	ldr	r1, [pc, #400]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d017      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a3a:	4b5d      	ldr	r3, [pc, #372]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a48:	4959      	ldr	r1, [pc, #356]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a58:	d101      	bne.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005a66:	2301      	movs	r3, #1
 8005a68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d017      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a76:	4b4e      	ldr	r3, [pc, #312]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	494a      	ldr	r1, [pc, #296]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a94:	d101      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005a96:	2301      	movs	r3, #1
 8005a98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d001      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f000 808b 	beq.w	8005bda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ac4:	4b3a      	ldr	r3, [pc, #232]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac8:	4a39      	ldr	r2, [pc, #228]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005aca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ace:	6413      	str	r3, [r2, #64]	; 0x40
 8005ad0:	4b37      	ldr	r3, [pc, #220]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ad8:	60bb      	str	r3, [r7, #8]
 8005ada:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005adc:	4b35      	ldr	r3, [pc, #212]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a34      	ldr	r2, [pc, #208]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae8:	f7fd feb2 	bl	8003850 <HAL_GetTick>
 8005aec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005aee:	e008      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005af0:	f7fd feae 	bl	8003850 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b64      	cmp	r3, #100	; 0x64
 8005afc:	d901      	bls.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e38d      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005b02:	4b2c      	ldr	r3, [pc, #176]	; (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0f0      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b0e:	4b28      	ldr	r3, [pc, #160]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d035      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d02e      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b2c:	4b20      	ldr	r3, [pc, #128]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b36:	4b1e      	ldr	r3, [pc, #120]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b3a:	4a1d      	ldr	r2, [pc, #116]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b42:	4b1b      	ldr	r3, [pc, #108]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b46:	4a1a      	ldr	r2, [pc, #104]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b4e:	4a18      	ldr	r2, [pc, #96]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b54:	4b16      	ldr	r3, [pc, #88]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b58:	f003 0301 	and.w	r3, r3, #1
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d114      	bne.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7fd fe76 	bl	8003850 <HAL_GetTick>
 8005b64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b66:	e00a      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b68:	f7fd fe72 	bl	8003850 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d901      	bls.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e34f      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7e:	4b0c      	ldr	r3, [pc, #48]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0ee      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b96:	d111      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ba4:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ba6:	400b      	ands	r3, r1
 8005ba8:	4901      	ldr	r1, [pc, #4]	; (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	608b      	str	r3, [r1, #8]
 8005bae:	e00b      	b.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	40007000 	.word	0x40007000
 8005bb8:	0ffffcff 	.word	0x0ffffcff
 8005bbc:	4bb3      	ldr	r3, [pc, #716]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4ab2      	ldr	r2, [pc, #712]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005bc6:	6093      	str	r3, [r2, #8]
 8005bc8:	4bb0      	ldr	r3, [pc, #704]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bd4:	49ad      	ldr	r1, [pc, #692]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0310 	and.w	r3, r3, #16
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d010      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005be6:	4ba9      	ldr	r3, [pc, #676]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005be8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bec:	4aa7      	ldr	r2, [pc, #668]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bf6:	4ba5      	ldr	r3, [pc, #660]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bf8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c00:	49a2      	ldr	r1, [pc, #648]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00a      	beq.n	8005c2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005c14:	4b9d      	ldr	r3, [pc, #628]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c22:	499a      	ldr	r1, [pc, #616]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c24:	4313      	orrs	r3, r2
 8005c26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c36:	4b95      	ldr	r3, [pc, #596]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c44:	4991      	ldr	r1, [pc, #580]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00a      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c58:	4b8c      	ldr	r3, [pc, #560]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c66:	4989      	ldr	r1, [pc, #548]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00a      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c7a:	4b84      	ldr	r3, [pc, #528]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	4980      	ldr	r1, [pc, #512]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c9c:	4b7b      	ldr	r3, [pc, #492]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ca2:	f023 0203 	bic.w	r2, r3, #3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005caa:	4978      	ldr	r1, [pc, #480]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cac:	4313      	orrs	r3, r2
 8005cae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cbe:	4b73      	ldr	r3, [pc, #460]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc4:	f023 020c 	bic.w	r2, r3, #12
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ccc:	496f      	ldr	r1, [pc, #444]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ce0:	4b6a      	ldr	r3, [pc, #424]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cee:	4967      	ldr	r1, [pc, #412]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00a      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005d02:	4b62      	ldr	r3, [pc, #392]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d08:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d10:	495e      	ldr	r1, [pc, #376]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00a      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d24:	4b59      	ldr	r3, [pc, #356]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	4956      	ldr	r1, [pc, #344]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00a      	beq.n	8005d5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d46:	4b51      	ldr	r3, [pc, #324]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d4c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d54:	494d      	ldr	r1, [pc, #308]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00a      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d68:	4b48      	ldr	r3, [pc, #288]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d76:	4945      	ldr	r1, [pc, #276]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00a      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d8a:	4b40      	ldr	r3, [pc, #256]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d90:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d98:	493c      	ldr	r1, [pc, #240]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d00a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005dac:	4b37      	ldr	r3, [pc, #220]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005db2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dba:	4934      	ldr	r1, [pc, #208]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d011      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005dce:	4b2f      	ldr	r3, [pc, #188]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ddc:	492b      	ldr	r1, [pc, #172]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dec:	d101      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005dee:	2301      	movs	r3, #1
 8005df0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d001      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00a      	beq.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e0e:	4b1f      	ldr	r3, [pc, #124]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e14:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1c:	491b      	ldr	r1, [pc, #108]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e30:	4b16      	ldr	r3, [pc, #88]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e40:	4912      	ldr	r1, [pc, #72]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00b      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005e54:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e64:	4909      	ldr	r1, [pc, #36]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e66:	4313      	orrs	r3, r2
 8005e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00f      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e78:	4b04      	ldr	r3, [pc, #16]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e88:	e002      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005e8a:	bf00      	nop
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	4985      	ldr	r1, [pc, #532]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ea4:	4b80      	ldr	r3, [pc, #512]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ea6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eaa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb4:	497c      	ldr	r1, [pc, #496]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d005      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005eca:	f040 80d6 	bne.w	800607a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005ece:	4b76      	ldr	r3, [pc, #472]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a75      	ldr	r2, [pc, #468]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ed4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ed8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eda:	f7fd fcb9 	bl	8003850 <HAL_GetTick>
 8005ede:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ee2:	f7fd fcb5 	bl	8003850 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b64      	cmp	r3, #100	; 0x64
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e194      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ef4:	4b6c      	ldr	r3, [pc, #432]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1f0      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d021      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d11d      	bne.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f14:	4b64      	ldr	r3, [pc, #400]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f1a:	0c1b      	lsrs	r3, r3, #16
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005f22:	4b61      	ldr	r3, [pc, #388]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f28:	0e1b      	lsrs	r3, r3, #24
 8005f2a:	f003 030f 	and.w	r3, r3, #15
 8005f2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	019a      	lsls	r2, r3, #6
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	041b      	lsls	r3, r3, #16
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	061b      	lsls	r3, r3, #24
 8005f40:	431a      	orrs	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	071b      	lsls	r3, r3, #28
 8005f48:	4957      	ldr	r1, [pc, #348]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f64:	d00a      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d02e      	beq.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f7a:	d129      	bne.n	8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f7c:	4b4a      	ldr	r3, [pc, #296]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f82:	0c1b      	lsrs	r3, r3, #16
 8005f84:	f003 0303 	and.w	r3, r3, #3
 8005f88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f8a:	4b47      	ldr	r3, [pc, #284]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f90:	0f1b      	lsrs	r3, r3, #28
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	019a      	lsls	r2, r3, #6
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	041b      	lsls	r3, r3, #16
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	061b      	lsls	r3, r3, #24
 8005faa:	431a      	orrs	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	071b      	lsls	r3, r3, #28
 8005fb0:	493d      	ldr	r1, [pc, #244]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005fb8:	4b3b      	ldr	r3, [pc, #236]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fbe:	f023 021f 	bic.w	r2, r3, #31
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	4937      	ldr	r1, [pc, #220]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01d      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fdc:	4b32      	ldr	r3, [pc, #200]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fe2:	0e1b      	lsrs	r3, r3, #24
 8005fe4:	f003 030f 	and.w	r3, r3, #15
 8005fe8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fea:	4b2f      	ldr	r3, [pc, #188]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ff0:	0f1b      	lsrs	r3, r3, #28
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	019a      	lsls	r2, r3, #6
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	041b      	lsls	r3, r3, #16
 8006004:	431a      	orrs	r2, r3
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	061b      	lsls	r3, r3, #24
 800600a:	431a      	orrs	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	071b      	lsls	r3, r3, #28
 8006010:	4925      	ldr	r1, [pc, #148]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006012:	4313      	orrs	r3, r2
 8006014:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d011      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	019a      	lsls	r2, r3, #6
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	041b      	lsls	r3, r3, #16
 8006030:	431a      	orrs	r2, r3
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	061b      	lsls	r3, r3, #24
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	071b      	lsls	r3, r3, #28
 8006040:	4919      	ldr	r1, [pc, #100]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006048:	4b17      	ldr	r3, [pc, #92]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a16      	ldr	r2, [pc, #88]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800604e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006054:	f7fd fbfc 	bl	8003850 <HAL_GetTick>
 8006058:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800605a:	e008      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800605c:	f7fd fbf8 	bl	8003850 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b64      	cmp	r3, #100	; 0x64
 8006068:	d901      	bls.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e0d7      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d0f0      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	2b01      	cmp	r3, #1
 800607e:	f040 80cd 	bne.w	800621c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006082:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a08      	ldr	r2, [pc, #32]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800608e:	f7fd fbdf 	bl	8003850 <HAL_GetTick>
 8006092:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006094:	e00a      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006096:	f7fd fbdb 	bl	8003850 <HAL_GetTick>
 800609a:	4602      	mov	r2, r0
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	2b64      	cmp	r3, #100	; 0x64
 80060a2:	d903      	bls.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060a4:	2303      	movs	r3, #3
 80060a6:	e0ba      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80060a8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060ac:	4b5e      	ldr	r3, [pc, #376]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80060b8:	d0ed      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d009      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d02e      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d12a      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80060e2:	4b51      	ldr	r3, [pc, #324]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e8:	0c1b      	lsrs	r3, r3, #16
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060f0:	4b4d      	ldr	r3, [pc, #308]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	0f1b      	lsrs	r3, r3, #28
 80060f8:	f003 0307 	and.w	r3, r3, #7
 80060fc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	695b      	ldr	r3, [r3, #20]
 8006102:	019a      	lsls	r2, r3, #6
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	061b      	lsls	r3, r3, #24
 8006110:	431a      	orrs	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	071b      	lsls	r3, r3, #28
 8006116:	4944      	ldr	r1, [pc, #272]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800611e:	4b42      	ldr	r3, [pc, #264]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006124:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	3b01      	subs	r3, #1
 800612e:	021b      	lsls	r3, r3, #8
 8006130:	493d      	ldr	r1, [pc, #244]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006132:	4313      	orrs	r3, r2
 8006134:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006140:	2b00      	cmp	r3, #0
 8006142:	d022      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006148:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800614c:	d11d      	bne.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800614e:	4b36      	ldr	r3, [pc, #216]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006154:	0e1b      	lsrs	r3, r3, #24
 8006156:	f003 030f 	and.w	r3, r3, #15
 800615a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800615c:	4b32      	ldr	r3, [pc, #200]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800615e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006162:	0f1b      	lsrs	r3, r3, #28
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	695b      	ldr	r3, [r3, #20]
 800616e:	019a      	lsls	r2, r3, #6
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a1b      	ldr	r3, [r3, #32]
 8006174:	041b      	lsls	r3, r3, #16
 8006176:	431a      	orrs	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	061b      	lsls	r3, r3, #24
 800617c:	431a      	orrs	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	071b      	lsls	r3, r3, #28
 8006182:	4929      	ldr	r1, [pc, #164]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d028      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006196:	4b24      	ldr	r3, [pc, #144]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800619c:	0e1b      	lsrs	r3, r3, #24
 800619e:	f003 030f 	and.w	r3, r3, #15
 80061a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80061a4:	4b20      	ldr	r3, [pc, #128]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061aa:	0c1b      	lsrs	r3, r3, #16
 80061ac:	f003 0303 	and.w	r3, r3, #3
 80061b0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	019a      	lsls	r2, r3, #6
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	041b      	lsls	r3, r3, #16
 80061bc:	431a      	orrs	r2, r3
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	061b      	lsls	r3, r3, #24
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	071b      	lsls	r3, r3, #28
 80061ca:	4917      	ldr	r1, [pc, #92]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80061d2:	4b15      	ldr	r3, [pc, #84]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e0:	4911      	ldr	r1, [pc, #68]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80061e8:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a0e      	ldr	r2, [pc, #56]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f4:	f7fd fb2c 	bl	8003850 <HAL_GetTick>
 80061f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061fa:	e008      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061fc:	f7fd fb28 	bl	8003850 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b64      	cmp	r3, #100	; 0x64
 8006208:	d901      	bls.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e007      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800620e:	4b06      	ldr	r3, [pc, #24]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800621a:	d1ef      	bne.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3720      	adds	r7, #32
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	40023800 	.word	0x40023800

0800622c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e084      	b.n	8006348 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d106      	bne.n	800625e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f7fc fcc1 	bl	8002be0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006274:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800627e:	d902      	bls.n	8006286 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006280:	2300      	movs	r3, #0
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	e002      	b.n	800628c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006286:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800628a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006294:	d007      	beq.n	80062a6 <HAL_SPI_Init+0x7a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800629e:	d002      	beq.n	80062a6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d10b      	bne.n	80062c6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062b6:	d903      	bls.n	80062c0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	631a      	str	r2, [r3, #48]	; 0x30
 80062be:	e002      	b.n	80062c6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	431a      	orrs	r2, r3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	699b      	ldr	r3, [r3, #24]
 80062e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062e4:	431a      	orrs	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a1b      	ldr	r3, [r3, #32]
 80062f0:	ea42 0103 	orr.w	r1, r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	0c1b      	lsrs	r3, r3, #16
 8006306:	f003 0204 	and.w	r2, r3, #4
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	431a      	orrs	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006314:	431a      	orrs	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	ea42 0103 	orr.w	r1, r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	430a      	orrs	r2, r1
 8006326:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69da      	ldr	r2, [r3, #28]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006336:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3710      	adds	r7, #16
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	4613      	mov	r3, r2
 800635c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d110      	bne.n	800638c <HAL_SPI_Receive_DMA+0x3c>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006372:	d10b      	bne.n	800638c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2204      	movs	r2, #4
 8006378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	68ba      	ldr	r2, [r7, #8]
 8006380:	68b9      	ldr	r1, [r7, #8]
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 f900 	bl	8006588 <HAL_SPI_TransmitReceive_DMA>
 8006388:	4603      	mov	r3, r0
 800638a:	e0f3      	b.n	8006574 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_SPI_Receive_DMA+0x4a>
 8006396:	2302      	movs	r3, #2
 8006398:	e0ec      	b.n	8006574 <HAL_SPI_Receive_DMA+0x224>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d002      	beq.n	80063b4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
 80063b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063b2:	e0da      	b.n	800656a <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <HAL_SPI_Receive_DMA+0x70>
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063c4:	e0d1      	b.n	800656a <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2204      	movs	r2, #4
 80063ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68ba      	ldr	r2, [r7, #8]
 80063d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	88fa      	ldrh	r2, [r7, #6]
 80063de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	88fa      	ldrh	r2, [r7, #6]
 80063e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2200      	movs	r2, #0
 8006400:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800640a:	d107      	bne.n	800641c <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800641a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	685a      	ldr	r2, [r3, #4]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800642a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006434:	d908      	bls.n	8006448 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006444:	605a      	str	r2, [r3, #4]
 8006446:	e042      	b.n	80064ce <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006456:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006462:	d134      	bne.n	80064ce <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006472:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800647a:	b29b      	uxth	r3, r3
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d111      	bne.n	80064a8 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006492:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800649a:	b29b      	uxth	r3, r3
 800649c:	085b      	lsrs	r3, r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80064a6:	e012      	b.n	80064ce <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064b6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064be:	b29b      	uxth	r3, r3
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3301      	adds	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d2:	4a2a      	ldr	r2, [pc, #168]	; (800657c <HAL_SPI_Receive_DMA+0x22c>)
 80064d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064da:	4a29      	ldr	r2, [pc, #164]	; (8006580 <HAL_SPI_Receive_DMA+0x230>)
 80064dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e2:	4a28      	ldr	r2, [pc, #160]	; (8006584 <HAL_SPI_Receive_DMA+0x234>)
 80064e4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ea:	2200      	movs	r2, #0
 80064ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	330c      	adds	r3, #12
 80064f8:	4619      	mov	r1, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	461a      	mov	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006506:	b29b      	uxth	r3, r3
 8006508:	f7fd ff9c 	bl	8004444 <HAL_DMA_Start_IT>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d00c      	beq.n	800652c <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006516:	f043 0210 	orr.w	r2, r3, #16
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800652a:	e01e      	b.n	800656a <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006536:	2b40      	cmp	r3, #64	; 0x40
 8006538:	d007      	beq.n	800654a <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006548:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f042 0220 	orr.w	r2, r2, #32
 8006558:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685a      	ldr	r2, [r3, #4]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0201 	orr.w	r2, r2, #1
 8006568:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006572:	7dfb      	ldrb	r3, [r7, #23]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3718      	adds	r7, #24
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	08006a09 	.word	0x08006a09
 8006580:	080068f1 	.word	0x080068f1
 8006584:	08006a41 	.word	0x08006a41

08006588 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	607a      	str	r2, [r7, #4]
 8006594:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006596:	2300      	movs	r3, #0
 8006598:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_SPI_TransmitReceive_DMA+0x20>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e16c      	b.n	8006882 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065b6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80065be:	7dbb      	ldrb	r3, [r7, #22]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d00d      	beq.n	80065e0 <HAL_SPI_TransmitReceive_DMA+0x58>
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ca:	d106      	bne.n	80065da <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d102      	bne.n	80065da <HAL_SPI_TransmitReceive_DMA+0x52>
 80065d4:	7dbb      	ldrb	r3, [r7, #22]
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d002      	beq.n	80065e0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80065da:	2302      	movs	r3, #2
 80065dc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065de:	e14b      	b.n	8006878 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d005      	beq.n	80065f2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d002      	beq.n	80065f2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80065ec:	887b      	ldrh	r3, [r7, #2]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d102      	bne.n	80065f8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065f6:	e13f      	b.n	8006878 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065fe:	b2db      	uxtb	r3, r3
 8006600:	2b04      	cmp	r3, #4
 8006602:	d003      	beq.n	800660c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2205      	movs	r2, #5
 8006608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	887a      	ldrh	r2, [r7, #2]
 800661c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	887a      	ldrh	r2, [r7, #2]
 8006622:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	887a      	ldrh	r2, [r7, #2]
 800662e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	887a      	ldrh	r2, [r7, #2]
 8006636:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8006654:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800665e:	d908      	bls.n	8006672 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800666e:	605a      	str	r2, [r3, #4]
 8006670:	e06f      	b.n	8006752 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006680:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800668c:	d126      	bne.n	80066dc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10f      	bne.n	80066ba <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066a8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	085b      	lsrs	r3, r3, #1
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066b8:	e010      	b.n	80066dc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685a      	ldr	r2, [r3, #4]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066c8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	b29b      	uxth	r3, r3
 80066d4:	3301      	adds	r3, #1
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066e6:	d134      	bne.n	8006752 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066f6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066fe:	b29b      	uxth	r3, r3
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	d111      	bne.n	800672c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006716:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800671e:	b29b      	uxth	r3, r3
 8006720:	085b      	lsrs	r3, r3, #1
 8006722:	b29a      	uxth	r2, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800672a:	e012      	b.n	8006752 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685a      	ldr	r2, [r3, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800673a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006742:	b29b      	uxth	r3, r3
 8006744:	085b      	lsrs	r3, r3, #1
 8006746:	b29b      	uxth	r3, r3
 8006748:	3301      	adds	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b04      	cmp	r3, #4
 800675c:	d108      	bne.n	8006770 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006762:	4a4a      	ldr	r2, [pc, #296]	; (800688c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006764:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676a:	4a49      	ldr	r2, [pc, #292]	; (8006890 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800676c:	63da      	str	r2, [r3, #60]	; 0x3c
 800676e:	e007      	b.n	8006780 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006774:	4a47      	ldr	r2, [pc, #284]	; (8006894 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8006776:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677c:	4a46      	ldr	r2, [pc, #280]	; (8006898 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800677e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006784:	4a45      	ldr	r2, [pc, #276]	; (800689c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8006786:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800678c:	2200      	movs	r2, #0
 800678e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	330c      	adds	r3, #12
 800679a:	4619      	mov	r1, r3
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	461a      	mov	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	f7fd fe4b 	bl	8004444 <HAL_DMA_Start_IT>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00c      	beq.n	80067ce <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067b8:	f043 0210 	orr.w	r2, r3, #16
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80067cc:	e054      	b.n	8006878 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f042 0201 	orr.w	r2, r2, #1
 80067dc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e2:	2200      	movs	r2, #0
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ea:	2200      	movs	r2, #0
 80067ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	2200      	movs	r2, #0
 80067f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fa:	2200      	movs	r2, #0
 80067fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006806:	4619      	mov	r1, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	461a      	mov	r2, r3
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006814:	b29b      	uxth	r3, r3
 8006816:	f7fd fe15 	bl	8004444 <HAL_DMA_Start_IT>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00c      	beq.n	800683a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006824:	f043 0210 	orr.w	r2, r3, #16
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006838:	e01e      	b.n	8006878 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	2b40      	cmp	r3, #64	; 0x40
 8006846:	d007      	beq.n	8006858 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006856:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f042 0220 	orr.w	r2, r2, #32
 8006866:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f042 0202 	orr.w	r2, r2, #2
 8006876:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	08006a09 	.word	0x08006a09
 8006890:	080068f1 	.word	0x080068f1
 8006894:	08006a25 	.word	0x08006a25
 8006898:	08006977 	.word	0x08006977
 800689c:	08006a41 	.word	0x08006a41

080068a0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068fe:	f7fc ffa7 	bl	8003850 <HAL_GetTick>
 8006902:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006912:	d02a      	beq.n	800696a <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685a      	ldr	r2, [r3, #4]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0220 	bic.w	r2, r2, #32
 8006922:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685a      	ldr	r2, [r3, #4]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f022 0203 	bic.w	r2, r2, #3
 8006932:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006934:	68ba      	ldr	r2, [r7, #8]
 8006936:	2164      	movs	r1, #100	; 0x64
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 f978 	bl	8006c2e <SPI_EndRxTransaction>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006962:	68f8      	ldr	r0, [r7, #12]
 8006964:	f7ff ffba 	bl	80068dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006968:	e002      	b.n	8006970 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f7fb fd1a 	bl	80023a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006982:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006984:	f7fc ff64 	bl	8003850 <HAL_GetTick>
 8006988:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006998:	d030      	beq.n	80069fc <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0220 	bic.w	r2, r2, #32
 80069a8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	2164      	movs	r1, #100	; 0x64
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f995 	bl	8006cde <SPI_EndRxTxTransaction>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069be:	f043 0220 	orr.w	r2, r3, #32
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0203 	bic.w	r2, r2, #3
 80069d4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d003      	beq.n	80069fc <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f7ff ff71 	bl	80068dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80069fa:	e002      	b.n	8006a02 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f7ff ff4f 	bl	80068a0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a14:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f7ff ff4c 	bl	80068b4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a1c:	bf00      	nop
 8006a1e:	3710      	adds	r7, #16
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f7ff ff48 	bl	80068c8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0203 	bic.w	r2, r2, #3
 8006a5c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a62:	f043 0210 	orr.w	r2, r3, #16
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff ff32 	bl	80068dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a78:	bf00      	nop
 8006a7a:	3710      	adds	r7, #16
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a90:	e04c      	b.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a98:	d048      	beq.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006a9a:	f7fc fed9 	bl	8003850 <HAL_GetTick>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d902      	bls.n	8006ab0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d13d      	bne.n	8006b2c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685a      	ldr	r2, [r3, #4]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006abe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ac8:	d111      	bne.n	8006aee <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ad2:	d004      	beq.n	8006ade <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006adc:	d107      	bne.n	8006aee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af6:	d10f      	bne.n	8006b18 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e00f      	b.n	8006b4c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4013      	ands	r3, r2
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2301      	moveq	r3, #1
 8006b3e:	2300      	movne	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d1a3      	bne.n	8006a92 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3710      	adds	r7, #16
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b62:	e057      	b.n	8006c14 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b6a:	d106      	bne.n	8006b7a <SPI_WaitFifoStateUntilTimeout+0x26>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d103      	bne.n	8006b7a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	330c      	adds	r3, #12
 8006b78:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b80:	d048      	beq.n	8006c14 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006b82:	f7fc fe65 	bl	8003850 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d902      	bls.n	8006b98 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d13d      	bne.n	8006c14 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	685a      	ldr	r2, [r3, #4]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ba6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bb0:	d111      	bne.n	8006bd6 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bba:	d004      	beq.n	8006bc6 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc4:	d107      	bne.n	8006bd6 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bde:	d10f      	bne.n	8006c00 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bfe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e008      	b.n	8006c26 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	689a      	ldr	r2, [r3, #8]
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d19f      	bne.n	8006b64 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b086      	sub	sp, #24
 8006c32:	af02      	add	r7, sp, #8
 8006c34:	60f8      	str	r0, [r7, #12]
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c42:	d111      	bne.n	8006c68 <SPI_EndRxTransaction+0x3a>
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c4c:	d004      	beq.n	8006c58 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c56:	d107      	bne.n	8006c68 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c66:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2180      	movs	r1, #128	; 0x80
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f7ff ff04 	bl	8006a80 <SPI_WaitFlagStateUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d007      	beq.n	8006c8e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c82:	f043 0220 	orr.w	r2, r3, #32
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c8a:	2303      	movs	r3, #3
 8006c8c:	e023      	b.n	8006cd6 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c96:	d11d      	bne.n	8006cd4 <SPI_EndRxTransaction+0xa6>
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ca0:	d004      	beq.n	8006cac <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006caa:	d113      	bne.n	8006cd4 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f7ff ff4b 	bl	8006b54 <SPI_WaitFifoStateUntilTimeout>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d007      	beq.n	8006cd4 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cc8:	f043 0220 	orr.w	r2, r3, #32
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e000      	b.n	8006cd6 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3710      	adds	r7, #16
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}

08006cde <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006cde:	b580      	push	{r7, lr}
 8006ce0:	b086      	sub	sp, #24
 8006ce2:	af02      	add	r7, sp, #8
 8006ce4:	60f8      	str	r0, [r7, #12]
 8006ce6:	60b9      	str	r1, [r7, #8]
 8006ce8:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006cf6:	68f8      	ldr	r0, [r7, #12]
 8006cf8:	f7ff ff2c 	bl	8006b54 <SPI_WaitFifoStateUntilTimeout>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d007      	beq.n	8006d12 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d06:	f043 0220 	orr.w	r2, r3, #32
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d0e:	2303      	movs	r3, #3
 8006d10:	e027      	b.n	8006d62 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2180      	movs	r1, #128	; 0x80
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff feaf 	bl	8006a80 <SPI_WaitFlagStateUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2c:	f043 0220 	orr.w	r2, r3, #32
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d34:	2303      	movs	r3, #3
 8006d36:	e014      	b.n	8006d62 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f7ff ff05 	bl	8006b54 <SPI_WaitFifoStateUntilTimeout>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d007      	beq.n	8006d60 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d54:	f043 0220 	orr.w	r2, r3, #32
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e000      	b.n	8006d62 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b082      	sub	sp, #8
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d101      	bne.n	8006d7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e01d      	b.n	8006db8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d106      	bne.n	8006d96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fb ffcf 	bl	8002d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2202      	movs	r2, #2
 8006d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	3304      	adds	r3, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f001 f827 	bl	8007dfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006db6:	2300      	movs	r3, #0
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3708      	adds	r7, #8
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68da      	ldr	r2, [r3, #12]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <HAL_TIM_Base_Start_IT+0x50>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b06      	cmp	r3, #6
 8006de8:	d00b      	beq.n	8006e02 <HAL_TIM_Base_Start_IT+0x42>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df0:	d007      	beq.n	8006e02 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f042 0201 	orr.w	r2, r2, #1
 8006e00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr
 8006e10:	00010007 	.word	0x00010007

08006e14 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	68da      	ldr	r2, [r3, #12]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f022 0201 	bic.w	r2, r2, #1
 8006e2a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6a1a      	ldr	r2, [r3, #32]
 8006e32:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e36:	4013      	ands	r3, r2
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10f      	bne.n	8006e5c <HAL_TIM_Base_Stop_IT+0x48>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6a1a      	ldr	r2, [r3, #32]
 8006e42:	f240 4344 	movw	r3, #1092	; 0x444
 8006e46:	4013      	ands	r3, r2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d107      	bne.n	8006e5c <HAL_TIM_Base_Stop_IT+0x48>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f022 0201 	bic.w	r2, r2, #1
 8006e5a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	370c      	adds	r7, #12
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr

08006e6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e6a:	b580      	push	{r7, lr}
 8006e6c:	b082      	sub	sp, #8
 8006e6e:	af00      	add	r7, sp, #0
 8006e70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e01d      	b.n	8006eb8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fc f86b 	bl	8002f6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2202      	movs	r2, #2
 8006e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681a      	ldr	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f000 ffa7 	bl	8007dfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b0c      	cmp	r3, #12
 8006ece:	d841      	bhi.n	8006f54 <HAL_TIM_PWM_Start_IT+0x94>
 8006ed0:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <HAL_TIM_PWM_Start_IT+0x18>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006f0d 	.word	0x08006f0d
 8006edc:	08006f55 	.word	0x08006f55
 8006ee0:	08006f55 	.word	0x08006f55
 8006ee4:	08006f55 	.word	0x08006f55
 8006ee8:	08006f1f 	.word	0x08006f1f
 8006eec:	08006f55 	.word	0x08006f55
 8006ef0:	08006f55 	.word	0x08006f55
 8006ef4:	08006f55 	.word	0x08006f55
 8006ef8:	08006f31 	.word	0x08006f31
 8006efc:	08006f55 	.word	0x08006f55
 8006f00:	08006f55 	.word	0x08006f55
 8006f04:	08006f55 	.word	0x08006f55
 8006f08:	08006f43 	.word	0x08006f43
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	68da      	ldr	r2, [r3, #12]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f042 0202 	orr.w	r2, r2, #2
 8006f1a:	60da      	str	r2, [r3, #12]
      break;
 8006f1c:	e01b      	b.n	8006f56 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0204 	orr.w	r2, r2, #4
 8006f2c:	60da      	str	r2, [r3, #12]
      break;
 8006f2e:	e012      	b.n	8006f56 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68da      	ldr	r2, [r3, #12]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0208 	orr.w	r2, r2, #8
 8006f3e:	60da      	str	r2, [r3, #12]
      break;
 8006f40:	e009      	b.n	8006f56 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f042 0210 	orr.w	r2, r2, #16
 8006f50:	60da      	str	r2, [r3, #12]
      break;
 8006f52:	e000      	b.n	8006f56 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8006f54:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 fc96 	bl	8008890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a17      	ldr	r2, [pc, #92]	; (8006fc8 <HAL_TIM_PWM_Start_IT+0x108>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d004      	beq.n	8006f78 <HAL_TIM_PWM_Start_IT+0xb8>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a16      	ldr	r2, [pc, #88]	; (8006fcc <HAL_TIM_PWM_Start_IT+0x10c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d101      	bne.n	8006f7c <HAL_TIM_PWM_Start_IT+0xbc>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e000      	b.n	8006f7e <HAL_TIM_PWM_Start_IT+0xbe>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <HAL_TIM_PWM_Start_IT+0x110>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b06      	cmp	r3, #6
 8006fa2:	d00b      	beq.n	8006fbc <HAL_TIM_PWM_Start_IT+0xfc>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006faa:	d007      	beq.n	8006fbc <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40010400 	.word	0x40010400
 8006fd0:	00010007 	.word	0x00010007

08006fd4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b0c      	cmp	r3, #12
 8006fe2:	d841      	bhi.n	8007068 <HAL_TIM_PWM_Stop_IT+0x94>
 8006fe4:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <HAL_TIM_PWM_Stop_IT+0x18>)
 8006fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fea:	bf00      	nop
 8006fec:	08007021 	.word	0x08007021
 8006ff0:	08007069 	.word	0x08007069
 8006ff4:	08007069 	.word	0x08007069
 8006ff8:	08007069 	.word	0x08007069
 8006ffc:	08007033 	.word	0x08007033
 8007000:	08007069 	.word	0x08007069
 8007004:	08007069 	.word	0x08007069
 8007008:	08007069 	.word	0x08007069
 800700c:	08007045 	.word	0x08007045
 8007010:	08007069 	.word	0x08007069
 8007014:	08007069 	.word	0x08007069
 8007018:	08007069 	.word	0x08007069
 800701c:	08007057 	.word	0x08007057
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 0202 	bic.w	r2, r2, #2
 800702e:	60da      	str	r2, [r3, #12]
      break;
 8007030:	e01b      	b.n	800706a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	68da      	ldr	r2, [r3, #12]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0204 	bic.w	r2, r2, #4
 8007040:	60da      	str	r2, [r3, #12]
      break;
 8007042:	e012      	b.n	800706a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0208 	bic.w	r2, r2, #8
 8007052:	60da      	str	r2, [r3, #12]
      break;
 8007054:	e009      	b.n	800706a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0210 	bic.w	r2, r2, #16
 8007064:	60da      	str	r2, [r3, #12]
      break;
 8007066:	e000      	b.n	800706a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8007068:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2200      	movs	r2, #0
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f001 fc0c 	bl	8008890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a20      	ldr	r2, [pc, #128]	; (8007100 <HAL_TIM_PWM_Stop_IT+0x12c>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d004      	beq.n	800708c <HAL_TIM_PWM_Stop_IT+0xb8>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1f      	ldr	r2, [pc, #124]	; (8007104 <HAL_TIM_PWM_Stop_IT+0x130>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d101      	bne.n	8007090 <HAL_TIM_PWM_Stop_IT+0xbc>
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <HAL_TIM_PWM_Stop_IT+0xbe>
 8007090:	2300      	movs	r3, #0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d017      	beq.n	80070c6 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6a1a      	ldr	r2, [r3, #32]
 800709c:	f241 1311 	movw	r3, #4369	; 0x1111
 80070a0:	4013      	ands	r3, r2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10f      	bne.n	80070c6 <HAL_TIM_PWM_Stop_IT+0xf2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6a1a      	ldr	r2, [r3, #32]
 80070ac:	f240 4344 	movw	r3, #1092	; 0x444
 80070b0:	4013      	ands	r3, r2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d107      	bne.n	80070c6 <HAL_TIM_PWM_Stop_IT+0xf2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6a1a      	ldr	r2, [r3, #32]
 80070cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80070d0:	4013      	ands	r3, r2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d10f      	bne.n	80070f6 <HAL_TIM_PWM_Stop_IT+0x122>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6a1a      	ldr	r2, [r3, #32]
 80070dc:	f240 4344 	movw	r3, #1092	; 0x444
 80070e0:	4013      	ands	r3, r2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d107      	bne.n	80070f6 <HAL_TIM_PWM_Stop_IT+0x122>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 0201 	bic.w	r2, r2, #1
 80070f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40010000 	.word	0x40010000
 8007104:	40010400 	.word	0x40010400

08007108 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e01d      	b.n	8007156 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7fb fe9e 	bl	8002e70 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3304      	adds	r3, #4
 8007144:	4619      	mov	r1, r3
 8007146:	4610      	mov	r0, r2
 8007148:	f000 fe58 	bl	8007dfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
	...

08007160 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b086      	sub	sp, #24
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d101      	bne.n	800717e <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800717a:	2302      	movs	r3, #2
 800717c:	e0e0      	b.n	8007340 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b01      	cmp	r3, #1
 8007188:	d10b      	bne.n	80071a2 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d104      	bne.n	800719a <HAL_TIM_IC_Start_DMA+0x3a>
 8007190:	887b      	ldrh	r3, [r7, #2]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e0d2      	b.n	8007340 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2202      	movs	r2, #2
 800719e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2b0c      	cmp	r3, #12
 80071a6:	f200 80ad 	bhi.w	8007304 <HAL_TIM_IC_Start_DMA+0x1a4>
 80071aa:	a201      	add	r2, pc, #4	; (adr r2, 80071b0 <HAL_TIM_IC_Start_DMA+0x50>)
 80071ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b0:	080071e5 	.word	0x080071e5
 80071b4:	08007305 	.word	0x08007305
 80071b8:	08007305 	.word	0x08007305
 80071bc:	08007305 	.word	0x08007305
 80071c0:	0800722d 	.word	0x0800722d
 80071c4:	08007305 	.word	0x08007305
 80071c8:	08007305 	.word	0x08007305
 80071cc:	08007305 	.word	0x08007305
 80071d0:	08007275 	.word	0x08007275
 80071d4:	08007305 	.word	0x08007305
 80071d8:	08007305 	.word	0x08007305
 80071dc:	08007305 	.word	0x08007305
 80071e0:	080072bd 	.word	0x080072bd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	4a57      	ldr	r2, [pc, #348]	; (8007348 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80071ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f0:	4a56      	ldr	r2, [pc, #344]	; (800734c <HAL_TIM_IC_Start_DMA+0x1ec>)
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f8:	4a55      	ldr	r2, [pc, #340]	; (8007350 <HAL_TIM_IC_Start_DMA+0x1f0>)
 80071fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	3334      	adds	r3, #52	; 0x34
 8007206:	4619      	mov	r1, r3
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	887b      	ldrh	r3, [r7, #2]
 800720c:	f7fd f91a 	bl	8004444 <HAL_DMA_Start_IT>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e092      	b.n	8007340 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68da      	ldr	r2, [r3, #12]
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007228:	60da      	str	r2, [r3, #12]
      break;
 800722a:	e06c      	b.n	8007306 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007230:	4a45      	ldr	r2, [pc, #276]	; (8007348 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8007232:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007238:	4a44      	ldr	r2, [pc, #272]	; (800734c <HAL_TIM_IC_Start_DMA+0x1ec>)
 800723a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007240:	4a43      	ldr	r2, [pc, #268]	; (8007350 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8007242:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3338      	adds	r3, #56	; 0x38
 800724e:	4619      	mov	r1, r3
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	887b      	ldrh	r3, [r7, #2]
 8007254:	f7fd f8f6 	bl	8004444 <HAL_DMA_Start_IT>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e06e      	b.n	8007340 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68da      	ldr	r2, [r3, #12]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007270:	60da      	str	r2, [r3, #12]
      break;
 8007272:	e048      	b.n	8007306 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007278:	4a33      	ldr	r2, [pc, #204]	; (8007348 <HAL_TIM_IC_Start_DMA+0x1e8>)
 800727a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007280:	4a32      	ldr	r2, [pc, #200]	; (800734c <HAL_TIM_IC_Start_DMA+0x1ec>)
 8007282:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007288:	4a31      	ldr	r2, [pc, #196]	; (8007350 <HAL_TIM_IC_Start_DMA+0x1f0>)
 800728a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	333c      	adds	r3, #60	; 0x3c
 8007296:	4619      	mov	r1, r3
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	887b      	ldrh	r3, [r7, #2]
 800729c:	f7fd f8d2 	bl	8004444 <HAL_DMA_Start_IT>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e04a      	b.n	8007340 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072b8:	60da      	str	r2, [r3, #12]
      break;
 80072ba:	e024      	b.n	8007306 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c0:	4a21      	ldr	r2, [pc, #132]	; (8007348 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80072c2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c8:	4a20      	ldr	r2, [pc, #128]	; (800734c <HAL_TIM_IC_Start_DMA+0x1ec>)
 80072ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d0:	4a1f      	ldr	r2, [pc, #124]	; (8007350 <HAL_TIM_IC_Start_DMA+0x1f0>)
 80072d2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3340      	adds	r3, #64	; 0x40
 80072de:	4619      	mov	r1, r3
 80072e0:	687a      	ldr	r2, [r7, #4]
 80072e2:	887b      	ldrh	r3, [r7, #2]
 80072e4:	f7fd f8ae 	bl	8004444 <HAL_DMA_Start_IT>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e026      	b.n	8007340 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007300:	60da      	str	r2, [r3, #12]
      break;
 8007302:	e000      	b.n	8007306 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8007304:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2201      	movs	r2, #1
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	4618      	mov	r0, r3
 8007310:	f001 fabe 	bl	8008890 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	4b0e      	ldr	r3, [pc, #56]	; (8007354 <HAL_TIM_IC_Start_DMA+0x1f4>)
 800731c:	4013      	ands	r3, r2
 800731e:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2b06      	cmp	r3, #6
 8007324:	d00b      	beq.n	800733e <HAL_TIM_IC_Start_DMA+0x1de>
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800732c:	d007      	beq.n	800733e <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f042 0201 	orr.w	r2, r2, #1
 800733c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3718      	adds	r7, #24
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	08007d1d 	.word	0x08007d1d
 800734c:	08007d8d 	.word	0x08007d8d
 8007350:	08007cf9 	.word	0x08007cf9
 8007354:	00010007 	.word	0x00010007

08007358 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b0c      	cmp	r3, #12
 8007366:	d855      	bhi.n	8007414 <HAL_TIM_IC_Stop_DMA+0xbc>
 8007368:	a201      	add	r2, pc, #4	; (adr r2, 8007370 <HAL_TIM_IC_Stop_DMA+0x18>)
 800736a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800736e:	bf00      	nop
 8007370:	080073a5 	.word	0x080073a5
 8007374:	08007415 	.word	0x08007415
 8007378:	08007415 	.word	0x08007415
 800737c:	08007415 	.word	0x08007415
 8007380:	080073c1 	.word	0x080073c1
 8007384:	08007415 	.word	0x08007415
 8007388:	08007415 	.word	0x08007415
 800738c:	08007415 	.word	0x08007415
 8007390:	080073dd 	.word	0x080073dd
 8007394:	08007415 	.word	0x08007415
 8007398:	08007415 	.word	0x08007415
 800739c:	08007415 	.word	0x08007415
 80073a0:	080073f9 	.word	0x080073f9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80073b2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fd f8a3 	bl	8004504 <HAL_DMA_Abort_IT>
      break;
 80073be:	e02a      	b.n	8007416 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fd f895 	bl	8004504 <HAL_DMA_Abort_IT>
      break;
 80073da:	e01c      	b.n	8007416 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	68da      	ldr	r2, [r3, #12]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073ea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fd f887 	bl	8004504 <HAL_DMA_Abort_IT>
      break;
 80073f6:	e00e      	b.n	8007416 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007406:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	4618      	mov	r0, r3
 800740e:	f7fd f879 	bl	8004504 <HAL_DMA_Abort_IT>
      break;
 8007412:	e000      	b.n	8007416 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 8007414:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2200      	movs	r2, #0
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	4618      	mov	r0, r3
 8007420:	f001 fa36 	bl	8008890 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6a1a      	ldr	r2, [r3, #32]
 800742a:	f241 1311 	movw	r3, #4369	; 0x1111
 800742e:	4013      	ands	r3, r2
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10f      	bne.n	8007454 <HAL_TIM_IC_Stop_DMA+0xfc>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6a1a      	ldr	r2, [r3, #32]
 800743a:	f240 4344 	movw	r3, #1092	; 0x444
 800743e:	4013      	ands	r3, r2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d107      	bne.n	8007454 <HAL_TIM_IC_Stop_DMA+0xfc>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0201 	bic.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3708      	adds	r7, #8
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop

08007468 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d101      	bne.n	800747c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	e02d      	b.n	80074d8 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d106      	bne.n	8007496 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f000 f825 	bl	80074e0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2202      	movs	r2, #2
 800749a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3304      	adds	r3, #4
 80074a6:	4619      	mov	r1, r3
 80074a8:	4610      	mov	r0, r2
 80074aa:	f000 fca7 	bl	8007dfc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0208 	bic.w	r2, r2, #8
 80074bc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6819      	ldr	r1, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3708      	adds	r7, #8
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}

080074e0 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	f003 0302 	and.w	r3, r3, #2
 8007506:	2b02      	cmp	r3, #2
 8007508:	d122      	bne.n	8007550 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b02      	cmp	r3, #2
 8007516:	d11b      	bne.n	8007550 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f06f 0202 	mvn.w	r2, #2
 8007520:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2201      	movs	r2, #1
 8007526:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	f003 0303 	and.w	r3, r3, #3
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fa fef4 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 800753c:	e005      	b.n	800754a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 fba8 	bl	8007c94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fbb9 	bl	8007cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b04      	cmp	r3, #4
 800755c:	d122      	bne.n	80075a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0304 	and.w	r3, r3, #4
 8007568:	2b04      	cmp	r3, #4
 800756a:	d11b      	bne.n	80075a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f06f 0204 	mvn.w	r2, #4
 8007574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007586:	2b00      	cmp	r3, #0
 8007588:	d003      	beq.n	8007592 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7fa feca 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 8007590:	e005      	b.n	800759e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fb7e 	bl	8007c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f000 fb8f 	bl	8007cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f003 0308 	and.w	r3, r3, #8
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	d122      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f003 0308 	and.w	r3, r3, #8
 80075bc:	2b08      	cmp	r3, #8
 80075be:	d11b      	bne.n	80075f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f06f 0208 	mvn.w	r2, #8
 80075c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2204      	movs	r2, #4
 80075ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	69db      	ldr	r3, [r3, #28]
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d003      	beq.n	80075e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fa fea0 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 80075e4:	e005      	b.n	80075f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fb54 	bl	8007c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 fb65 	bl	8007cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	f003 0310 	and.w	r3, r3, #16
 8007602:	2b10      	cmp	r3, #16
 8007604:	d122      	bne.n	800764c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	f003 0310 	and.w	r3, r3, #16
 8007610:	2b10      	cmp	r3, #16
 8007612:	d11b      	bne.n	800764c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f06f 0210 	mvn.w	r2, #16
 800761c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2208      	movs	r2, #8
 8007622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69db      	ldr	r3, [r3, #28]
 800762a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fa fe76 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
 8007638:	e005      	b.n	8007646 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fb2a 	bl	8007c94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fb3b 	bl	8007cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	2b01      	cmp	r3, #1
 8007658:	d10e      	bne.n	8007678 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b01      	cmp	r3, #1
 8007666:	d107      	bne.n	8007678 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f06f 0201 	mvn.w	r2, #1
 8007670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f7f9 fc8c 	bl	8000f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007682:	2b80      	cmp	r3, #128	; 0x80
 8007684:	d10e      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007690:	2b80      	cmp	r3, #128	; 0x80
 8007692:	d107      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800769c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f001 fa32 	bl	8008b08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b2:	d10e      	bne.n	80076d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68db      	ldr	r3, [r3, #12]
 80076ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076be:	2b80      	cmp	r3, #128	; 0x80
 80076c0:	d107      	bne.n	80076d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 fa25 	bl	8008b1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076dc:	2b40      	cmp	r3, #64	; 0x40
 80076de:	d10e      	bne.n	80076fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	d107      	bne.n	80076fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fae9 	bl	8007cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f003 0320 	and.w	r3, r3, #32
 8007708:	2b20      	cmp	r3, #32
 800770a:	d10e      	bne.n	800772a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b20      	cmp	r3, #32
 8007718:	d107      	bne.n	800772a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f06f 0220 	mvn.w	r2, #32
 8007722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 f9e5 	bl	8008af4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800772a:	bf00      	nop
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_TIM_IC_ConfigChannel+0x1a>
 8007748:	2302      	movs	r3, #2
 800774a:	e08a      	b.n	8007862 <HAL_TIM_IC_ConfigChannel+0x130>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2202      	movs	r2, #2
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d11b      	bne.n	800779a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	6818      	ldr	r0, [r3, #0]
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	6819      	ldr	r1, [r3, #0]
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f000 fec9 	bl	8008508 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	699a      	ldr	r2, [r3, #24]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f022 020c 	bic.w	r2, r2, #12
 8007784:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6999      	ldr	r1, [r3, #24]
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	619a      	str	r2, [r3, #24]
 8007798:	e05a      	b.n	8007850 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2b04      	cmp	r3, #4
 800779e:	d11c      	bne.n	80077da <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	6818      	ldr	r0, [r3, #0]
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	6819      	ldr	r1, [r3, #0]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f000 ff4d 	bl	800864e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	699a      	ldr	r2, [r3, #24]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80077c2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6999      	ldr	r1, [r3, #24]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	021a      	lsls	r2, r3, #8
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	619a      	str	r2, [r3, #24]
 80077d8:	e03a      	b.n	8007850 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b08      	cmp	r3, #8
 80077de:	d11b      	bne.n	8007818 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6818      	ldr	r0, [r3, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	6819      	ldr	r1, [r3, #0]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	685a      	ldr	r2, [r3, #4]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f000 ff9a 	bl	8008728 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	69da      	ldr	r2, [r3, #28]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f022 020c 	bic.w	r2, r2, #12
 8007802:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69d9      	ldr	r1, [r3, #28]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	689a      	ldr	r2, [r3, #8]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	61da      	str	r2, [r3, #28]
 8007816:	e01b      	b.n	8007850 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	6818      	ldr	r0, [r3, #0]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	6819      	ldr	r1, [r3, #0]
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	685a      	ldr	r2, [r3, #4]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f000 ffba 	bl	80087a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	69da      	ldr	r2, [r3, #28]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800783a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69d9      	ldr	r1, [r3, #28]
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	021a      	lsls	r2, r3, #8
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	430a      	orrs	r2, r1
 800784e:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
	...

0800786c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	60b9      	str	r1, [r7, #8]
 8007876:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800787e:	2b01      	cmp	r3, #1
 8007880:	d101      	bne.n	8007886 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007882:	2302      	movs	r3, #2
 8007884:	e105      	b.n	8007a92 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2202      	movs	r2, #2
 8007892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b14      	cmp	r3, #20
 800789a:	f200 80f0 	bhi.w	8007a7e <HAL_TIM_PWM_ConfigChannel+0x212>
 800789e:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078f9 	.word	0x080078f9
 80078a8:	08007a7f 	.word	0x08007a7f
 80078ac:	08007a7f 	.word	0x08007a7f
 80078b0:	08007a7f 	.word	0x08007a7f
 80078b4:	08007939 	.word	0x08007939
 80078b8:	08007a7f 	.word	0x08007a7f
 80078bc:	08007a7f 	.word	0x08007a7f
 80078c0:	08007a7f 	.word	0x08007a7f
 80078c4:	0800797b 	.word	0x0800797b
 80078c8:	08007a7f 	.word	0x08007a7f
 80078cc:	08007a7f 	.word	0x08007a7f
 80078d0:	08007a7f 	.word	0x08007a7f
 80078d4:	080079bb 	.word	0x080079bb
 80078d8:	08007a7f 	.word	0x08007a7f
 80078dc:	08007a7f 	.word	0x08007a7f
 80078e0:	08007a7f 	.word	0x08007a7f
 80078e4:	080079fd 	.word	0x080079fd
 80078e8:	08007a7f 	.word	0x08007a7f
 80078ec:	08007a7f 	.word	0x08007a7f
 80078f0:	08007a7f 	.word	0x08007a7f
 80078f4:	08007a3d 	.word	0x08007a3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68b9      	ldr	r1, [r7, #8]
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fb1c 	bl	8007f3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f042 0208 	orr.w	r2, r2, #8
 8007912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699a      	ldr	r2, [r3, #24]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f022 0204 	bic.w	r2, r2, #4
 8007922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6999      	ldr	r1, [r3, #24]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	430a      	orrs	r2, r1
 8007934:	619a      	str	r2, [r3, #24]
      break;
 8007936:	e0a3      	b.n	8007a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68b9      	ldr	r1, [r7, #8]
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fb6e 	bl	8008020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6999      	ldr	r1, [r3, #24]
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	021a      	lsls	r2, r3, #8
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	430a      	orrs	r2, r1
 8007976:	619a      	str	r2, [r3, #24]
      break;
 8007978:	e082      	b.n	8007a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68b9      	ldr	r1, [r7, #8]
 8007980:	4618      	mov	r0, r3
 8007982:	f000 fbc5 	bl	8008110 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	69da      	ldr	r2, [r3, #28]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f042 0208 	orr.w	r2, r2, #8
 8007994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0204 	bic.w	r2, r2, #4
 80079a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69d9      	ldr	r1, [r3, #28]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	691a      	ldr	r2, [r3, #16]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	61da      	str	r2, [r3, #28]
      break;
 80079b8:	e062      	b.n	8007a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68b9      	ldr	r1, [r7, #8]
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fc1b 	bl	80081fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69da      	ldr	r2, [r3, #28]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69d9      	ldr	r1, [r3, #28]
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	021a      	lsls	r2, r3, #8
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	61da      	str	r2, [r3, #28]
      break;
 80079fa:	e041      	b.n	8007a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 fc52 	bl	80082ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f042 0208 	orr.w	r2, r2, #8
 8007a16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 0204 	bic.w	r2, r2, #4
 8007a26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	691a      	ldr	r2, [r3, #16]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	430a      	orrs	r2, r1
 8007a38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a3a:	e021      	b.n	8007a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68b9      	ldr	r1, [r7, #8]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f000 fc84 	bl	8008350 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	021a      	lsls	r2, r3, #8
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	430a      	orrs	r2, r1
 8007a7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a7c:	e000      	b.n	8007a80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007a7e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop

08007a9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d101      	bne.n	8007ab4 <HAL_TIM_ConfigClockSource+0x18>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e0a6      	b.n	8007c02 <HAL_TIM_ConfigClockSource+0x166>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	4b4f      	ldr	r3, [pc, #316]	; (8007c0c <HAL_TIM_ConfigClockSource+0x170>)
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ada:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	2b40      	cmp	r3, #64	; 0x40
 8007aea:	d067      	beq.n	8007bbc <HAL_TIM_ConfigClockSource+0x120>
 8007aec:	2b40      	cmp	r3, #64	; 0x40
 8007aee:	d80b      	bhi.n	8007b08 <HAL_TIM_ConfigClockSource+0x6c>
 8007af0:	2b10      	cmp	r3, #16
 8007af2:	d073      	beq.n	8007bdc <HAL_TIM_ConfigClockSource+0x140>
 8007af4:	2b10      	cmp	r3, #16
 8007af6:	d802      	bhi.n	8007afe <HAL_TIM_ConfigClockSource+0x62>
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d06f      	beq.n	8007bdc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007afc:	e078      	b.n	8007bf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007afe:	2b20      	cmp	r3, #32
 8007b00:	d06c      	beq.n	8007bdc <HAL_TIM_ConfigClockSource+0x140>
 8007b02:	2b30      	cmp	r3, #48	; 0x30
 8007b04:	d06a      	beq.n	8007bdc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007b06:	e073      	b.n	8007bf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007b08:	2b70      	cmp	r3, #112	; 0x70
 8007b0a:	d00d      	beq.n	8007b28 <HAL_TIM_ConfigClockSource+0x8c>
 8007b0c:	2b70      	cmp	r3, #112	; 0x70
 8007b0e:	d804      	bhi.n	8007b1a <HAL_TIM_ConfigClockSource+0x7e>
 8007b10:	2b50      	cmp	r3, #80	; 0x50
 8007b12:	d033      	beq.n	8007b7c <HAL_TIM_ConfigClockSource+0xe0>
 8007b14:	2b60      	cmp	r3, #96	; 0x60
 8007b16:	d041      	beq.n	8007b9c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007b18:	e06a      	b.n	8007bf0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b1e:	d066      	beq.n	8007bee <HAL_TIM_ConfigClockSource+0x152>
 8007b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b24:	d017      	beq.n	8007b56 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007b26:	e063      	b.n	8007bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6818      	ldr	r0, [r3, #0]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	6899      	ldr	r1, [r3, #8]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	685a      	ldr	r2, [r3, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	f000 fe8a 	bl	8008850 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b4a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	609a      	str	r2, [r3, #8]
      break;
 8007b54:	e04c      	b.n	8007bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6818      	ldr	r0, [r3, #0]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	6899      	ldr	r1, [r3, #8]
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	f000 fe73 	bl	8008850 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b78:	609a      	str	r2, [r3, #8]
      break;
 8007b7a:	e039      	b.n	8007bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6818      	ldr	r0, [r3, #0]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	6859      	ldr	r1, [r3, #4]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	f000 fd31 	bl	80085f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	2150      	movs	r1, #80	; 0x50
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 fe40 	bl	800881a <TIM_ITRx_SetConfig>
      break;
 8007b9a:	e029      	b.n	8007bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6818      	ldr	r0, [r3, #0]
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	6859      	ldr	r1, [r3, #4]
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	68db      	ldr	r3, [r3, #12]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	f000 fd8d 	bl	80086c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2160      	movs	r1, #96	; 0x60
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fe30 	bl	800881a <TIM_ITRx_SetConfig>
      break;
 8007bba:	e019      	b.n	8007bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6818      	ldr	r0, [r3, #0]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	6859      	ldr	r1, [r3, #4]
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f000 fd11 	bl	80085f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2140      	movs	r1, #64	; 0x40
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fe20 	bl	800881a <TIM_ITRx_SetConfig>
      break;
 8007bda:	e009      	b.n	8007bf0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4619      	mov	r1, r3
 8007be6:	4610      	mov	r0, r2
 8007be8:	f000 fe17 	bl	800881a <TIM_ITRx_SetConfig>
      break;
 8007bec:	e000      	b.n	8007bf0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007bee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	fffeff88 	.word	0xfffeff88

08007c10 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d101      	bne.n	8007c28 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007c24:	2302      	movs	r3, #2
 8007c26:	e031      	b.n	8007c8c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fbdc 	bl	80083f8 <TIM_SlaveTimer_SetConfig>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007c56:	2301      	movs	r3, #1
 8007c58:	e018      	b.n	8007c8c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c68:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68da      	ldr	r2, [r3, #12]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c78:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007cb0:	bf00      	nop
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f7ff ffe8 	bl	8007ce4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007d14:	bf00      	nop
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d28:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d103      	bne.n	8007d44 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	771a      	strb	r2, [r3, #28]
 8007d42:	e019      	b.n	8007d78 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d103      	bne.n	8007d56 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2202      	movs	r2, #2
 8007d52:	771a      	strb	r2, [r3, #28]
 8007d54:	e010      	b.n	8007d78 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d103      	bne.n	8007d68 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2204      	movs	r2, #4
 8007d64:	771a      	strb	r2, [r3, #28]
 8007d66:	e007      	b.n	8007d78 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d102      	bne.n	8007d78 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2208      	movs	r2, #8
 8007d76:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7fa fad3 	bl	8002324 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2200      	movs	r2, #0
 8007d82:	771a      	strb	r2, [r3, #28]
}
 8007d84:	bf00      	nop
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d98:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d103      	bne.n	8007db4 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2201      	movs	r2, #1
 8007db0:	771a      	strb	r2, [r3, #28]
 8007db2:	e019      	b.n	8007de8 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d103      	bne.n	8007dc6 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	771a      	strb	r2, [r3, #28]
 8007dc4:	e010      	b.n	8007de8 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d103      	bne.n	8007dd8 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2204      	movs	r2, #4
 8007dd4:	771a      	strb	r2, [r3, #28]
 8007dd6:	e007      	b.n	8007de8 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d102      	bne.n	8007de8 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2208      	movs	r2, #8
 8007de6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7ff ff5d 	bl	8007ca8 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	771a      	strb	r2, [r3, #28]
}
 8007df4:	bf00      	nop
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a40      	ldr	r2, [pc, #256]	; (8007f10 <TIM_Base_SetConfig+0x114>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d013      	beq.n	8007e3c <TIM_Base_SetConfig+0x40>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1a:	d00f      	beq.n	8007e3c <TIM_Base_SetConfig+0x40>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a3d      	ldr	r2, [pc, #244]	; (8007f14 <TIM_Base_SetConfig+0x118>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00b      	beq.n	8007e3c <TIM_Base_SetConfig+0x40>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a3c      	ldr	r2, [pc, #240]	; (8007f18 <TIM_Base_SetConfig+0x11c>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d007      	beq.n	8007e3c <TIM_Base_SetConfig+0x40>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a3b      	ldr	r2, [pc, #236]	; (8007f1c <TIM_Base_SetConfig+0x120>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d003      	beq.n	8007e3c <TIM_Base_SetConfig+0x40>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a3a      	ldr	r2, [pc, #232]	; (8007f20 <TIM_Base_SetConfig+0x124>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d108      	bne.n	8007e4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a2f      	ldr	r2, [pc, #188]	; (8007f10 <TIM_Base_SetConfig+0x114>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d02b      	beq.n	8007eae <TIM_Base_SetConfig+0xb2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e5c:	d027      	beq.n	8007eae <TIM_Base_SetConfig+0xb2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a2c      	ldr	r2, [pc, #176]	; (8007f14 <TIM_Base_SetConfig+0x118>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d023      	beq.n	8007eae <TIM_Base_SetConfig+0xb2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a2b      	ldr	r2, [pc, #172]	; (8007f18 <TIM_Base_SetConfig+0x11c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d01f      	beq.n	8007eae <TIM_Base_SetConfig+0xb2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a2a      	ldr	r2, [pc, #168]	; (8007f1c <TIM_Base_SetConfig+0x120>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d01b      	beq.n	8007eae <TIM_Base_SetConfig+0xb2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a29      	ldr	r2, [pc, #164]	; (8007f20 <TIM_Base_SetConfig+0x124>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d017      	beq.n	8007eae <TIM_Base_SetConfig+0xb2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a28      	ldr	r2, [pc, #160]	; (8007f24 <TIM_Base_SetConfig+0x128>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d013      	beq.n	8007eae <TIM_Base_SetConfig+0xb2>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a27      	ldr	r2, [pc, #156]	; (8007f28 <TIM_Base_SetConfig+0x12c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d00f      	beq.n	8007eae <TIM_Base_SetConfig+0xb2>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a26      	ldr	r2, [pc, #152]	; (8007f2c <TIM_Base_SetConfig+0x130>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d00b      	beq.n	8007eae <TIM_Base_SetConfig+0xb2>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a25      	ldr	r2, [pc, #148]	; (8007f30 <TIM_Base_SetConfig+0x134>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d007      	beq.n	8007eae <TIM_Base_SetConfig+0xb2>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a24      	ldr	r2, [pc, #144]	; (8007f34 <TIM_Base_SetConfig+0x138>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d003      	beq.n	8007eae <TIM_Base_SetConfig+0xb2>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a23      	ldr	r2, [pc, #140]	; (8007f38 <TIM_Base_SetConfig+0x13c>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d108      	bne.n	8007ec0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	689a      	ldr	r2, [r3, #8]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a0a      	ldr	r2, [pc, #40]	; (8007f10 <TIM_Base_SetConfig+0x114>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d003      	beq.n	8007ef4 <TIM_Base_SetConfig+0xf8>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a0c      	ldr	r2, [pc, #48]	; (8007f20 <TIM_Base_SetConfig+0x124>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d103      	bne.n	8007efc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	691a      	ldr	r2, [r3, #16]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	615a      	str	r2, [r3, #20]
}
 8007f02:	bf00      	nop
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	40010000 	.word	0x40010000
 8007f14:	40000400 	.word	0x40000400
 8007f18:	40000800 	.word	0x40000800
 8007f1c:	40000c00 	.word	0x40000c00
 8007f20:	40010400 	.word	0x40010400
 8007f24:	40014000 	.word	0x40014000
 8007f28:	40014400 	.word	0x40014400
 8007f2c:	40014800 	.word	0x40014800
 8007f30:	40001800 	.word	0x40001800
 8007f34:	40001c00 	.word	0x40001c00
 8007f38:	40002000 	.word	0x40002000

08007f3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	f023 0201 	bic.w	r2, r3, #1
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	699b      	ldr	r3, [r3, #24]
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	4b2b      	ldr	r3, [pc, #172]	; (8008014 <TIM_OC1_SetConfig+0xd8>)
 8007f68:	4013      	ands	r3, r2
 8007f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f023 0303 	bic.w	r3, r3, #3
 8007f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68fa      	ldr	r2, [r7, #12]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f023 0302 	bic.w	r3, r3, #2
 8007f84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a21      	ldr	r2, [pc, #132]	; (8008018 <TIM_OC1_SetConfig+0xdc>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d003      	beq.n	8007fa0 <TIM_OC1_SetConfig+0x64>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a20      	ldr	r2, [pc, #128]	; (800801c <TIM_OC1_SetConfig+0xe0>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d10c      	bne.n	8007fba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	f023 0308 	bic.w	r3, r3, #8
 8007fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	f023 0304 	bic.w	r3, r3, #4
 8007fb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a16      	ldr	r2, [pc, #88]	; (8008018 <TIM_OC1_SetConfig+0xdc>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d003      	beq.n	8007fca <TIM_OC1_SetConfig+0x8e>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a15      	ldr	r2, [pc, #84]	; (800801c <TIM_OC1_SetConfig+0xe0>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d111      	bne.n	8007fee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	693a      	ldr	r2, [r7, #16]
 8007ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	621a      	str	r2, [r3, #32]
}
 8008008:	bf00      	nop
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	fffeff8f 	.word	0xfffeff8f
 8008018:	40010000 	.word	0x40010000
 800801c:	40010400 	.word	0x40010400

08008020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008020:	b480      	push	{r7}
 8008022:	b087      	sub	sp, #28
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	f023 0210 	bic.w	r2, r3, #16
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4b2e      	ldr	r3, [pc, #184]	; (8008104 <TIM_OC2_SetConfig+0xe4>)
 800804c:	4013      	ands	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	4313      	orrs	r3, r2
 8008062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f023 0320 	bic.w	r3, r3, #32
 800806a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	4313      	orrs	r3, r2
 8008076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a23      	ldr	r2, [pc, #140]	; (8008108 <TIM_OC2_SetConfig+0xe8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d003      	beq.n	8008088 <TIM_OC2_SetConfig+0x68>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a22      	ldr	r2, [pc, #136]	; (800810c <TIM_OC2_SetConfig+0xec>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d10d      	bne.n	80080a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800808e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	011b      	lsls	r3, r3, #4
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	4313      	orrs	r3, r2
 800809a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a18      	ldr	r2, [pc, #96]	; (8008108 <TIM_OC2_SetConfig+0xe8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d003      	beq.n	80080b4 <TIM_OC2_SetConfig+0x94>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a17      	ldr	r2, [pc, #92]	; (800810c <TIM_OC2_SetConfig+0xec>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d113      	bne.n	80080dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	695b      	ldr	r3, [r3, #20]
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	009b      	lsls	r3, r3, #2
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	4313      	orrs	r3, r2
 80080da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685a      	ldr	r2, [r3, #4]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	621a      	str	r2, [r3, #32]
}
 80080f6:	bf00      	nop
 80080f8:	371c      	adds	r7, #28
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	feff8fff 	.word	0xfeff8fff
 8008108:	40010000 	.word	0x40010000
 800810c:	40010400 	.word	0x40010400

08008110 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a1b      	ldr	r3, [r3, #32]
 800812a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	69db      	ldr	r3, [r3, #28]
 8008136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	4b2d      	ldr	r3, [pc, #180]	; (80081f0 <TIM_OC3_SetConfig+0xe0>)
 800813c:	4013      	ands	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f023 0303 	bic.w	r3, r3, #3
 8008146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	021b      	lsls	r3, r3, #8
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	4313      	orrs	r3, r2
 8008164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a22      	ldr	r2, [pc, #136]	; (80081f4 <TIM_OC3_SetConfig+0xe4>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d003      	beq.n	8008176 <TIM_OC3_SetConfig+0x66>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	4a21      	ldr	r2, [pc, #132]	; (80081f8 <TIM_OC3_SetConfig+0xe8>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d10d      	bne.n	8008192 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800817c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	021b      	lsls	r3, r3, #8
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a17      	ldr	r2, [pc, #92]	; (80081f4 <TIM_OC3_SetConfig+0xe4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d003      	beq.n	80081a2 <TIM_OC3_SetConfig+0x92>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a16      	ldr	r2, [pc, #88]	; (80081f8 <TIM_OC3_SetConfig+0xe8>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d113      	bne.n	80081ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	011b      	lsls	r3, r3, #4
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	693a      	ldr	r2, [r7, #16]
 80081ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	697a      	ldr	r2, [r7, #20]
 80081e2:	621a      	str	r2, [r3, #32]
}
 80081e4:	bf00      	nop
 80081e6:	371c      	adds	r7, #28
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	fffeff8f 	.word	0xfffeff8f
 80081f4:	40010000 	.word	0x40010000
 80081f8:	40010400 	.word	0x40010400

080081fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b087      	sub	sp, #28
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a1b      	ldr	r3, [r3, #32]
 800820a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6a1b      	ldr	r3, [r3, #32]
 8008216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	69db      	ldr	r3, [r3, #28]
 8008222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	4b1e      	ldr	r3, [pc, #120]	; (80082a0 <TIM_OC4_SetConfig+0xa4>)
 8008228:	4013      	ands	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	021b      	lsls	r3, r3, #8
 800823a:	68fa      	ldr	r2, [r7, #12]
 800823c:	4313      	orrs	r3, r2
 800823e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	031b      	lsls	r3, r3, #12
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	4313      	orrs	r3, r2
 8008252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a13      	ldr	r2, [pc, #76]	; (80082a4 <TIM_OC4_SetConfig+0xa8>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d003      	beq.n	8008264 <TIM_OC4_SetConfig+0x68>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a12      	ldr	r2, [pc, #72]	; (80082a8 <TIM_OC4_SetConfig+0xac>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d109      	bne.n	8008278 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800826a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	695b      	ldr	r3, [r3, #20]
 8008270:	019b      	lsls	r3, r3, #6
 8008272:	697a      	ldr	r2, [r7, #20]
 8008274:	4313      	orrs	r3, r2
 8008276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685a      	ldr	r2, [r3, #4]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	621a      	str	r2, [r3, #32]
}
 8008292:	bf00      	nop
 8008294:	371c      	adds	r7, #28
 8008296:	46bd      	mov	sp, r7
 8008298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	feff8fff 	.word	0xfeff8fff
 80082a4:	40010000 	.word	0x40010000
 80082a8:	40010400 	.word	0x40010400

080082ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6a1b      	ldr	r3, [r3, #32]
 80082ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	4b1b      	ldr	r3, [pc, #108]	; (8008344 <TIM_OC5_SetConfig+0x98>)
 80082d8:	4013      	ands	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80082ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	041b      	lsls	r3, r3, #16
 80082f4:	693a      	ldr	r2, [r7, #16]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a12      	ldr	r2, [pc, #72]	; (8008348 <TIM_OC5_SetConfig+0x9c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d003      	beq.n	800830a <TIM_OC5_SetConfig+0x5e>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a11      	ldr	r2, [pc, #68]	; (800834c <TIM_OC5_SetConfig+0xa0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d109      	bne.n	800831e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008310:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	695b      	ldr	r3, [r3, #20]
 8008316:	021b      	lsls	r3, r3, #8
 8008318:	697a      	ldr	r2, [r7, #20]
 800831a:	4313      	orrs	r3, r2
 800831c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	621a      	str	r2, [r3, #32]
}
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	fffeff8f 	.word	0xfffeff8f
 8008348:	40010000 	.word	0x40010000
 800834c:	40010400 	.word	0x40010400

08008350 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	4b1c      	ldr	r3, [pc, #112]	; (80083ec <TIM_OC6_SetConfig+0x9c>)
 800837c:	4013      	ands	r3, r2
 800837e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	021b      	lsls	r3, r3, #8
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	4313      	orrs	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	051b      	lsls	r3, r3, #20
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	4313      	orrs	r3, r2
 800839e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a13      	ldr	r2, [pc, #76]	; (80083f0 <TIM_OC6_SetConfig+0xa0>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d003      	beq.n	80083b0 <TIM_OC6_SetConfig+0x60>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a12      	ldr	r2, [pc, #72]	; (80083f4 <TIM_OC6_SetConfig+0xa4>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d109      	bne.n	80083c4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	029b      	lsls	r3, r3, #10
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	697a      	ldr	r2, [r7, #20]
 80083c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	621a      	str	r2, [r3, #32]
}
 80083de:	bf00      	nop
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	feff8fff 	.word	0xfeff8fff
 80083f0:	40010000 	.word	0x40010000
 80083f4:	40010400 	.word	0x40010400

080083f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008410:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4313      	orrs	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800841c:	697a      	ldr	r2, [r7, #20]
 800841e:	4b39      	ldr	r3, [pc, #228]	; (8008504 <TIM_SlaveTimer_SetConfig+0x10c>)
 8008420:	4013      	ands	r3, r2
 8008422:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	697a      	ldr	r2, [r7, #20]
 800842a:	4313      	orrs	r3, r2
 800842c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	2b30      	cmp	r3, #48	; 0x30
 800843c:	d05c      	beq.n	80084f8 <TIM_SlaveTimer_SetConfig+0x100>
 800843e:	2b30      	cmp	r3, #48	; 0x30
 8008440:	d806      	bhi.n	8008450 <TIM_SlaveTimer_SetConfig+0x58>
 8008442:	2b10      	cmp	r3, #16
 8008444:	d058      	beq.n	80084f8 <TIM_SlaveTimer_SetConfig+0x100>
 8008446:	2b20      	cmp	r3, #32
 8008448:	d056      	beq.n	80084f8 <TIM_SlaveTimer_SetConfig+0x100>
 800844a:	2b00      	cmp	r3, #0
 800844c:	d054      	beq.n	80084f8 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800844e:	e054      	b.n	80084fa <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008450:	2b50      	cmp	r3, #80	; 0x50
 8008452:	d03d      	beq.n	80084d0 <TIM_SlaveTimer_SetConfig+0xd8>
 8008454:	2b50      	cmp	r3, #80	; 0x50
 8008456:	d802      	bhi.n	800845e <TIM_SlaveTimer_SetConfig+0x66>
 8008458:	2b40      	cmp	r3, #64	; 0x40
 800845a:	d010      	beq.n	800847e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800845c:	e04d      	b.n	80084fa <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800845e:	2b60      	cmp	r3, #96	; 0x60
 8008460:	d040      	beq.n	80084e4 <TIM_SlaveTimer_SetConfig+0xec>
 8008462:	2b70      	cmp	r3, #112	; 0x70
 8008464:	d000      	beq.n	8008468 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8008466:	e048      	b.n	80084fa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6818      	ldr	r0, [r3, #0]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	68d9      	ldr	r1, [r3, #12]
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	689a      	ldr	r2, [r3, #8]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	691b      	ldr	r3, [r3, #16]
 8008478:	f000 f9ea 	bl	8008850 <TIM_ETR_SetConfig>
      break;
 800847c:	e03d      	b.n	80084fa <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b05      	cmp	r3, #5
 8008484:	d101      	bne.n	800848a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e038      	b.n	80084fc <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	6a1a      	ldr	r2, [r3, #32]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0201 	bic.w	r2, r2, #1
 80084a0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084b0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	691b      	ldr	r3, [r3, #16]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68fa      	ldr	r2, [r7, #12]
 80084c4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	621a      	str	r2, [r3, #32]
      break;
 80084ce:	e014      	b.n	80084fa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6818      	ldr	r0, [r3, #0]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	6899      	ldr	r1, [r3, #8]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	461a      	mov	r2, r3
 80084de:	f000 f887 	bl	80085f0 <TIM_TI1_ConfigInputStage>
      break;
 80084e2:	e00a      	b.n	80084fa <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	6899      	ldr	r1, [r3, #8]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	691b      	ldr	r3, [r3, #16]
 80084f0:	461a      	mov	r2, r3
 80084f2:	f000 f8e9 	bl	80086c8 <TIM_TI2_ConfigInputStage>
      break;
 80084f6:	e000      	b.n	80084fa <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80084f8:	bf00      	nop
  }
  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	fffefff8 	.word	0xfffefff8

08008508 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008508:	b480      	push	{r7}
 800850a:	b087      	sub	sp, #28
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	f023 0201 	bic.w	r2, r3, #1
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6a1b      	ldr	r3, [r3, #32]
 800852c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4a28      	ldr	r2, [pc, #160]	; (80085d4 <TIM_TI1_SetConfig+0xcc>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d01b      	beq.n	800856e <TIM_TI1_SetConfig+0x66>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800853c:	d017      	beq.n	800856e <TIM_TI1_SetConfig+0x66>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4a25      	ldr	r2, [pc, #148]	; (80085d8 <TIM_TI1_SetConfig+0xd0>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d013      	beq.n	800856e <TIM_TI1_SetConfig+0x66>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4a24      	ldr	r2, [pc, #144]	; (80085dc <TIM_TI1_SetConfig+0xd4>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d00f      	beq.n	800856e <TIM_TI1_SetConfig+0x66>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	4a23      	ldr	r2, [pc, #140]	; (80085e0 <TIM_TI1_SetConfig+0xd8>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d00b      	beq.n	800856e <TIM_TI1_SetConfig+0x66>
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	4a22      	ldr	r2, [pc, #136]	; (80085e4 <TIM_TI1_SetConfig+0xdc>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d007      	beq.n	800856e <TIM_TI1_SetConfig+0x66>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4a21      	ldr	r2, [pc, #132]	; (80085e8 <TIM_TI1_SetConfig+0xe0>)
 8008562:	4293      	cmp	r3, r2
 8008564:	d003      	beq.n	800856e <TIM_TI1_SetConfig+0x66>
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	4a20      	ldr	r2, [pc, #128]	; (80085ec <TIM_TI1_SetConfig+0xe4>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d101      	bne.n	8008572 <TIM_TI1_SetConfig+0x6a>
 800856e:	2301      	movs	r3, #1
 8008570:	e000      	b.n	8008574 <TIM_TI1_SetConfig+0x6c>
 8008572:	2300      	movs	r3, #0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d008      	beq.n	800858a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f023 0303 	bic.w	r3, r3, #3
 800857e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4313      	orrs	r3, r2
 8008586:	617b      	str	r3, [r7, #20]
 8008588:	e003      	b.n	8008592 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	f043 0301 	orr.w	r3, r3, #1
 8008590:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008598:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	011b      	lsls	r3, r3, #4
 800859e:	b2db      	uxtb	r3, r3
 80085a0:	697a      	ldr	r2, [r7, #20]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f023 030a 	bic.w	r3, r3, #10
 80085ac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	f003 030a 	and.w	r3, r3, #10
 80085b4:	693a      	ldr	r2, [r7, #16]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	693a      	ldr	r2, [r7, #16]
 80085c4:	621a      	str	r2, [r3, #32]
}
 80085c6:	bf00      	nop
 80085c8:	371c      	adds	r7, #28
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr
 80085d2:	bf00      	nop
 80085d4:	40010000 	.word	0x40010000
 80085d8:	40000400 	.word	0x40000400
 80085dc:	40000800 	.word	0x40000800
 80085e0:	40000c00 	.word	0x40000c00
 80085e4:	40010400 	.word	0x40010400
 80085e8:	40014000 	.word	0x40014000
 80085ec:	40001800 	.word	0x40001800

080085f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	f023 0201 	bic.w	r2, r3, #1
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800861a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	4313      	orrs	r3, r2
 8008624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f023 030a 	bic.w	r3, r3, #10
 800862c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	4313      	orrs	r3, r2
 8008634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	621a      	str	r2, [r3, #32]
}
 8008642:	bf00      	nop
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800864e:	b480      	push	{r7}
 8008650:	b087      	sub	sp, #28
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
 800865a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6a1b      	ldr	r3, [r3, #32]
 8008660:	f023 0210 	bic.w	r2, r3, #16
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	699b      	ldr	r3, [r3, #24]
 800866c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800867a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	021b      	lsls	r3, r3, #8
 8008680:	697a      	ldr	r2, [r7, #20]
 8008682:	4313      	orrs	r3, r2
 8008684:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800868c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	031b      	lsls	r3, r3, #12
 8008692:	b29b      	uxth	r3, r3
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	4313      	orrs	r3, r2
 8008698:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086a0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	011b      	lsls	r3, r3, #4
 80086a6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80086aa:	693a      	ldr	r2, [r7, #16]
 80086ac:	4313      	orrs	r3, r2
 80086ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	697a      	ldr	r2, [r7, #20]
 80086b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	621a      	str	r2, [r3, #32]
}
 80086bc:	bf00      	nop
 80086be:	371c      	adds	r7, #28
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6a1b      	ldr	r3, [r3, #32]
 80086d8:	f023 0210 	bic.w	r2, r3, #16
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6a1b      	ldr	r3, [r3, #32]
 80086ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	031b      	lsls	r3, r3, #12
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008704:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	011b      	lsls	r3, r3, #4
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	4313      	orrs	r3, r2
 800870e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	697a      	ldr	r2, [r7, #20]
 8008714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	693a      	ldr	r2, [r7, #16]
 800871a:	621a      	str	r2, [r3, #32]
}
 800871c:	bf00      	nop
 800871e:	371c      	adds	r7, #28
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008728:	b480      	push	{r7}
 800872a:	b087      	sub	sp, #28
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6a1b      	ldr	r3, [r3, #32]
 800874c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	f023 0303 	bic.w	r3, r3, #3
 8008754:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4313      	orrs	r3, r2
 800875c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008764:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	011b      	lsls	r3, r3, #4
 800876a:	b2db      	uxtb	r3, r3
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	4313      	orrs	r3, r2
 8008770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008778:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	021b      	lsls	r3, r3, #8
 800877e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4313      	orrs	r3, r2
 8008786:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	693a      	ldr	r2, [r7, #16]
 8008792:	621a      	str	r2, [r3, #32]
}
 8008794:	bf00      	nop
 8008796:	371c      	adds	r7, #28
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b087      	sub	sp, #28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6a1b      	ldr	r3, [r3, #32]
 80087c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	021b      	lsls	r3, r3, #8
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	4313      	orrs	r3, r2
 80087d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	031b      	lsls	r3, r3, #12
 80087e4:	b29b      	uxth	r3, r3
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	4313      	orrs	r3, r2
 80087ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80087f2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	031b      	lsls	r3, r3, #12
 80087f8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80087fc:	693a      	ldr	r2, [r7, #16]
 80087fe:	4313      	orrs	r3, r2
 8008800:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	621a      	str	r2, [r3, #32]
}
 800880e:	bf00      	nop
 8008810:	371c      	adds	r7, #28
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800881a:	b480      	push	{r7}
 800881c:	b085      	sub	sp, #20
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
 8008822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008832:	683a      	ldr	r2, [r7, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	4313      	orrs	r3, r2
 8008838:	f043 0307 	orr.w	r3, r3, #7
 800883c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	68fa      	ldr	r2, [r7, #12]
 8008842:	609a      	str	r2, [r3, #8]
}
 8008844:	bf00      	nop
 8008846:	3714      	adds	r7, #20
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008850:	b480      	push	{r7}
 8008852:	b087      	sub	sp, #28
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	607a      	str	r2, [r7, #4]
 800885c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800886a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	021a      	lsls	r2, r3, #8
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	431a      	orrs	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	4313      	orrs	r3, r2
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	4313      	orrs	r3, r2
 800887c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	697a      	ldr	r2, [r7, #20]
 8008882:	609a      	str	r2, [r3, #8]
}
 8008884:	bf00      	nop
 8008886:	371c      	adds	r7, #28
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f003 031f 	and.w	r3, r3, #31
 80088a2:	2201      	movs	r2, #1
 80088a4:	fa02 f303 	lsl.w	r3, r2, r3
 80088a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6a1a      	ldr	r2, [r3, #32]
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	43db      	mvns	r3, r3
 80088b2:	401a      	ands	r2, r3
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6a1a      	ldr	r2, [r3, #32]
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	f003 031f 	and.w	r3, r3, #31
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	fa01 f303 	lsl.w	r3, r1, r3
 80088c8:	431a      	orrs	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	621a      	str	r2, [r3, #32]
}
 80088ce:	bf00      	nop
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
	...

080088dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e06d      	b.n	80089d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2202      	movs	r2, #2
 8008900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a30      	ldr	r2, [pc, #192]	; (80089dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d004      	beq.n	8008928 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4a2f      	ldr	r2, [pc, #188]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d108      	bne.n	800893a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800892e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	4313      	orrs	r3, r2
 8008938:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008940:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	4313      	orrs	r3, r2
 800894a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a20      	ldr	r2, [pc, #128]	; (80089dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d022      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008966:	d01d      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d018      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1c      	ldr	r2, [pc, #112]	; (80089e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d013      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a1a      	ldr	r2, [pc, #104]	; (80089ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00e      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a15      	ldr	r2, [pc, #84]	; (80089e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d009      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a16      	ldr	r2, [pc, #88]	; (80089f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d004      	beq.n	80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a15      	ldr	r2, [pc, #84]	; (80089f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d10c      	bne.n	80089be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3714      	adds	r7, #20
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr
 80089dc:	40010000 	.word	0x40010000
 80089e0:	40010400 	.word	0x40010400
 80089e4:	40000400 	.word	0x40000400
 80089e8:	40000800 	.word	0x40000800
 80089ec:	40000c00 	.word	0x40000c00
 80089f0:	40014000 	.word	0x40014000
 80089f4:	40001800 	.word	0x40001800

080089f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b085      	sub	sp, #20
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
 8008a00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a02:	2300      	movs	r3, #0
 8008a04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d101      	bne.n	8008a14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a10:	2302      	movs	r3, #2
 8008a12:	e065      	b.n	8008ae0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	041b      	lsls	r3, r3, #16
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a16      	ldr	r2, [pc, #88]	; (8008aec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d004      	beq.n	8008aa2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a14      	ldr	r2, [pc, #80]	; (8008af0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d115      	bne.n	8008ace <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aac:	051b      	lsls	r3, r3, #20
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	69db      	ldr	r3, [r3, #28]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68fa      	ldr	r2, [r7, #12]
 8008ad4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	40010000 	.word	0x40010000
 8008af0:	40010400 	.word	0x40010400

08008af4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e040      	b.n	8008bc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d106      	bne.n	8008b58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7fa fadc 	bl	8003110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2224      	movs	r2, #36	; 0x24
 8008b5c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f022 0201 	bic.w	r2, r2, #1
 8008b6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f000 fac4 	bl	80090fc <UART_SetConfig>
 8008b74:	4603      	mov	r3, r0
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d101      	bne.n	8008b7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	e022      	b.n	8008bc4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d002      	beq.n	8008b8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fd62 	bl	8009650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685a      	ldr	r2, [r3, #4]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0201 	orr.w	r2, r2, #1
 8008bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fde9 	bl	8009794 <UART_CheckIdleState>
 8008bc2:	4603      	mov	r3, r0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3708      	adds	r7, #8
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08a      	sub	sp, #40	; 0x28
 8008bd0:	af02      	add	r7, sp, #8
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	603b      	str	r3, [r7, #0]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	d17f      	bne.n	8008ce4 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d002      	beq.n	8008bf0 <HAL_UART_Transmit+0x24>
 8008bea:	88fb      	ldrh	r3, [r7, #6]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d101      	bne.n	8008bf4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e078      	b.n	8008ce6 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	d101      	bne.n	8008c02 <HAL_UART_Transmit+0x36>
 8008bfe:	2302      	movs	r3, #2
 8008c00:	e071      	b.n	8008ce6 <HAL_UART_Transmit+0x11a>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2201      	movs	r2, #1
 8008c06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2221      	movs	r2, #33	; 0x21
 8008c14:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008c16:	f7fa fe1b 	bl	8003850 <HAL_GetTick>
 8008c1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	88fa      	ldrh	r2, [r7, #6]
 8008c20:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	88fa      	ldrh	r2, [r7, #6]
 8008c28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c34:	d108      	bne.n	8008c48 <HAL_UART_Transmit+0x7c>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d104      	bne.n	8008c48 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	61bb      	str	r3, [r7, #24]
 8008c46:	e003      	b.n	8008c50 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008c58:	e02c      	b.n	8008cb4 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2200      	movs	r2, #0
 8008c62:	2180      	movs	r1, #128	; 0x80
 8008c64:	68f8      	ldr	r0, [r7, #12]
 8008c66:	f000 fdda 	bl	800981e <UART_WaitOnFlagUntilTimeout>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e038      	b.n	8008ce6 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10b      	bne.n	8008c92 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	461a      	mov	r2, r3
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	61bb      	str	r3, [r7, #24]
 8008c90:	e007      	b.n	8008ca2 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	781a      	ldrb	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	3b01      	subs	r3, #1
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1cc      	bne.n	8008c5a <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	2140      	movs	r1, #64	; 0x40
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 fda7 	bl	800981e <UART_WaitOnFlagUntilTimeout>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d001      	beq.n	8008cda <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008cd6:	2303      	movs	r3, #3
 8008cd8:	e005      	b.n	8008ce6 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2220      	movs	r2, #32
 8008cde:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	e000      	b.n	8008ce6 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008ce4:	2302      	movs	r3, #2
  }
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3720      	adds	r7, #32
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
	...

08008cf0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	4613      	mov	r3, r2
 8008cfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d02:	2b20      	cmp	r3, #32
 8008d04:	f040 808a 	bne.w	8008e1c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d002      	beq.n	8008d14 <HAL_UART_Receive_IT+0x24>
 8008d0e:	88fb      	ldrh	r3, [r7, #6]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e082      	b.n	8008e1e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d101      	bne.n	8008d26 <HAL_UART_Receive_IT+0x36>
 8008d22:	2302      	movs	r3, #2
 8008d24:	e07b      	b.n	8008e1e <HAL_UART_Receive_IT+0x12e>
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	88fa      	ldrh	r2, [r7, #6]
 8008d38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	88fa      	ldrh	r2, [r7, #6]
 8008d40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2200      	movs	r2, #0
 8008d48:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d52:	d10e      	bne.n	8008d72 <HAL_UART_Receive_IT+0x82>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d105      	bne.n	8008d68 <HAL_UART_Receive_IT+0x78>
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008d62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d66:	e02d      	b.n	8008dc4 <HAL_UART_Receive_IT+0xd4>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	22ff      	movs	r2, #255	; 0xff
 8008d6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d70:	e028      	b.n	8008dc4 <HAL_UART_Receive_IT+0xd4>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10d      	bne.n	8008d96 <HAL_UART_Receive_IT+0xa6>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d104      	bne.n	8008d8c <HAL_UART_Receive_IT+0x9c>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	22ff      	movs	r2, #255	; 0xff
 8008d86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d8a:	e01b      	b.n	8008dc4 <HAL_UART_Receive_IT+0xd4>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	227f      	movs	r2, #127	; 0x7f
 8008d90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d94:	e016      	b.n	8008dc4 <HAL_UART_Receive_IT+0xd4>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d9e:	d10d      	bne.n	8008dbc <HAL_UART_Receive_IT+0xcc>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d104      	bne.n	8008db2 <HAL_UART_Receive_IT+0xc2>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	227f      	movs	r2, #127	; 0x7f
 8008dac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008db0:	e008      	b.n	8008dc4 <HAL_UART_Receive_IT+0xd4>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	223f      	movs	r2, #63	; 0x3f
 8008db6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008dba:	e003      	b.n	8008dc4 <HAL_UART_Receive_IT+0xd4>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	2222      	movs	r2, #34	; 0x22
 8008dce:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	689a      	ldr	r2, [r3, #8]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f042 0201 	orr.w	r2, r2, #1
 8008dde:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de8:	d107      	bne.n	8008dfa <HAL_UART_Receive_IT+0x10a>
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d103      	bne.n	8008dfa <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	4a0d      	ldr	r2, [pc, #52]	; (8008e2c <HAL_UART_Receive_IT+0x13c>)
 8008df6:	661a      	str	r2, [r3, #96]	; 0x60
 8008df8:	e002      	b.n	8008e00 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4a0c      	ldr	r2, [pc, #48]	; (8008e30 <HAL_UART_Receive_IT+0x140>)
 8008dfe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008e16:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	e000      	b.n	8008e1e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8008e1c:	2302      	movs	r3, #2
  }
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	08009a59 	.word	0x08009a59
 8008e30:	080099b3 	.word	0x080099b3

08008e34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	689b      	ldr	r3, [r3, #8]
 8008e52:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e54:	69fa      	ldr	r2, [r7, #28]
 8008e56:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e5a:	4013      	ands	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d113      	bne.n	8008e8c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f003 0320 	and.w	r3, r3, #32
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00e      	beq.n	8008e8c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e6e:	69bb      	ldr	r3, [r7, #24]
 8008e70:	f003 0320 	and.w	r3, r3, #32
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d009      	beq.n	8008e8c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	f000 8114 	beq.w	80090aa <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4798      	blx	r3
      }
      return;
 8008e8a:	e10e      	b.n	80090aa <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 80d6 	beq.w	8009040 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f003 0301 	and.w	r3, r3, #1
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d105      	bne.n	8008eaa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f000 80cb 	beq.w	8009040 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00e      	beq.n	8008ed2 <HAL_UART_IRQHandler+0x9e>
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d009      	beq.n	8008ed2 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eca:	f043 0201 	orr.w	r2, r3, #1
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	f003 0302 	and.w	r3, r3, #2
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00e      	beq.n	8008efa <HAL_UART_IRQHandler+0xc6>
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d009      	beq.n	8008efa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2202      	movs	r2, #2
 8008eec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ef2:	f043 0204 	orr.w	r2, r3, #4
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	f003 0304 	and.w	r3, r3, #4
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00e      	beq.n	8008f22 <HAL_UART_IRQHandler+0xee>
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d009      	beq.n	8008f22 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2204      	movs	r2, #4
 8008f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f1a:	f043 0202 	orr.w	r2, r3, #2
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f22:	69fb      	ldr	r3, [r7, #28]
 8008f24:	f003 0308 	and.w	r3, r3, #8
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d013      	beq.n	8008f54 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f2c:	69bb      	ldr	r3, [r7, #24]
 8008f2e:	f003 0320 	and.w	r3, r3, #32
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d104      	bne.n	8008f40 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d009      	beq.n	8008f54 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	2208      	movs	r2, #8
 8008f46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f4c:	f043 0208 	orr.w	r2, r3, #8
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00f      	beq.n	8008f7e <HAL_UART_IRQHandler+0x14a>
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d00a      	beq.n	8008f7e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f76:	f043 0220 	orr.w	r2, r3, #32
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 8093 	beq.w	80090ae <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	f003 0320 	and.w	r3, r3, #32
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00c      	beq.n	8008fac <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	f003 0320 	and.w	r3, r3, #32
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d007      	beq.n	8008fac <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fb0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
 8008fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fbc:	2b40      	cmp	r3, #64	; 0x40
 8008fbe:	d004      	beq.n	8008fca <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d031      	beq.n	800902e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fca2 	bl	8009914 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fda:	2b40      	cmp	r3, #64	; 0x40
 8008fdc:	d123      	bne.n	8009026 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689a      	ldr	r2, [r3, #8]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fec:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d013      	beq.n	800901e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ffa:	4a30      	ldr	r2, [pc, #192]	; (80090bc <HAL_UART_IRQHandler+0x288>)
 8008ffc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009002:	4618      	mov	r0, r3
 8009004:	f7fb fa7e 	bl	8004504 <HAL_DMA_Abort_IT>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d016      	beq.n	800903c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009018:	4610      	mov	r0, r2
 800901a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800901c:	e00e      	b.n	800903c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f858 	bl	80090d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009024:	e00a      	b.n	800903c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 f854 	bl	80090d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800902c:	e006      	b.n	800903c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 f850 	bl	80090d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800903a:	e038      	b.n	80090ae <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800903c:	bf00      	nop
    return;
 800903e:	e036      	b.n	80090ae <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d00d      	beq.n	8009066 <HAL_UART_IRQHandler+0x232>
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d008      	beq.n	8009066 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800905c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f842 	bl	80090e8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009064:	e026      	b.n	80090b4 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00d      	beq.n	800908c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009076:	2b00      	cmp	r3, #0
 8009078:	d008      	beq.n	800908c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800907e:	2b00      	cmp	r3, #0
 8009080:	d017      	beq.n	80090b2 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	4798      	blx	r3
    }
    return;
 800908a:	e012      	b.n	80090b2 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800908c:	69fb      	ldr	r3, [r7, #28]
 800908e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00e      	beq.n	80090b4 <HAL_UART_IRQHandler+0x280>
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800909c:	2b00      	cmp	r3, #0
 800909e:	d009      	beq.n	80090b4 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 fc6d 	bl	8009980 <UART_EndTransmit_IT>
    return;
 80090a6:	bf00      	nop
 80090a8:	e004      	b.n	80090b4 <HAL_UART_IRQHandler+0x280>
      return;
 80090aa:	bf00      	nop
 80090ac:	e002      	b.n	80090b4 <HAL_UART_IRQHandler+0x280>
    return;
 80090ae:	bf00      	nop
 80090b0:	e000      	b.n	80090b4 <HAL_UART_IRQHandler+0x280>
    return;
 80090b2:	bf00      	nop
  }

}
 80090b4:	3720      	adds	r7, #32
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	08009955 	.word	0x08009955

080090c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b088      	sub	sp, #32
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009104:	2300      	movs	r3, #0
 8009106:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	689a      	ldr	r2, [r3, #8]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	431a      	orrs	r2, r3
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	695b      	ldr	r3, [r3, #20]
 800911a:	431a      	orrs	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	4bb1      	ldr	r3, [pc, #708]	; (80093f0 <UART_SetConfig+0x2f4>)
 800912c:	4013      	ands	r3, r2
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	6812      	ldr	r2, [r2, #0]
 8009132:	6939      	ldr	r1, [r7, #16]
 8009134:	430b      	orrs	r3, r1
 8009136:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	68da      	ldr	r2, [r3, #12]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	430a      	orrs	r2, r1
 800914c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	4313      	orrs	r3, r2
 800915c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	430a      	orrs	r2, r1
 8009170:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a9f      	ldr	r2, [pc, #636]	; (80093f4 <UART_SetConfig+0x2f8>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d121      	bne.n	80091c0 <UART_SetConfig+0xc4>
 800917c:	4b9e      	ldr	r3, [pc, #632]	; (80093f8 <UART_SetConfig+0x2fc>)
 800917e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009182:	f003 0303 	and.w	r3, r3, #3
 8009186:	2b03      	cmp	r3, #3
 8009188:	d816      	bhi.n	80091b8 <UART_SetConfig+0xbc>
 800918a:	a201      	add	r2, pc, #4	; (adr r2, 8009190 <UART_SetConfig+0x94>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	080091a1 	.word	0x080091a1
 8009194:	080091ad 	.word	0x080091ad
 8009198:	080091a7 	.word	0x080091a7
 800919c:	080091b3 	.word	0x080091b3
 80091a0:	2301      	movs	r3, #1
 80091a2:	77fb      	strb	r3, [r7, #31]
 80091a4:	e151      	b.n	800944a <UART_SetConfig+0x34e>
 80091a6:	2302      	movs	r3, #2
 80091a8:	77fb      	strb	r3, [r7, #31]
 80091aa:	e14e      	b.n	800944a <UART_SetConfig+0x34e>
 80091ac:	2304      	movs	r3, #4
 80091ae:	77fb      	strb	r3, [r7, #31]
 80091b0:	e14b      	b.n	800944a <UART_SetConfig+0x34e>
 80091b2:	2308      	movs	r3, #8
 80091b4:	77fb      	strb	r3, [r7, #31]
 80091b6:	e148      	b.n	800944a <UART_SetConfig+0x34e>
 80091b8:	2310      	movs	r3, #16
 80091ba:	77fb      	strb	r3, [r7, #31]
 80091bc:	bf00      	nop
 80091be:	e144      	b.n	800944a <UART_SetConfig+0x34e>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a8d      	ldr	r2, [pc, #564]	; (80093fc <UART_SetConfig+0x300>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d134      	bne.n	8009234 <UART_SetConfig+0x138>
 80091ca:	4b8b      	ldr	r3, [pc, #556]	; (80093f8 <UART_SetConfig+0x2fc>)
 80091cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d0:	f003 030c 	and.w	r3, r3, #12
 80091d4:	2b0c      	cmp	r3, #12
 80091d6:	d829      	bhi.n	800922c <UART_SetConfig+0x130>
 80091d8:	a201      	add	r2, pc, #4	; (adr r2, 80091e0 <UART_SetConfig+0xe4>)
 80091da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091de:	bf00      	nop
 80091e0:	08009215 	.word	0x08009215
 80091e4:	0800922d 	.word	0x0800922d
 80091e8:	0800922d 	.word	0x0800922d
 80091ec:	0800922d 	.word	0x0800922d
 80091f0:	08009221 	.word	0x08009221
 80091f4:	0800922d 	.word	0x0800922d
 80091f8:	0800922d 	.word	0x0800922d
 80091fc:	0800922d 	.word	0x0800922d
 8009200:	0800921b 	.word	0x0800921b
 8009204:	0800922d 	.word	0x0800922d
 8009208:	0800922d 	.word	0x0800922d
 800920c:	0800922d 	.word	0x0800922d
 8009210:	08009227 	.word	0x08009227
 8009214:	2300      	movs	r3, #0
 8009216:	77fb      	strb	r3, [r7, #31]
 8009218:	e117      	b.n	800944a <UART_SetConfig+0x34e>
 800921a:	2302      	movs	r3, #2
 800921c:	77fb      	strb	r3, [r7, #31]
 800921e:	e114      	b.n	800944a <UART_SetConfig+0x34e>
 8009220:	2304      	movs	r3, #4
 8009222:	77fb      	strb	r3, [r7, #31]
 8009224:	e111      	b.n	800944a <UART_SetConfig+0x34e>
 8009226:	2308      	movs	r3, #8
 8009228:	77fb      	strb	r3, [r7, #31]
 800922a:	e10e      	b.n	800944a <UART_SetConfig+0x34e>
 800922c:	2310      	movs	r3, #16
 800922e:	77fb      	strb	r3, [r7, #31]
 8009230:	bf00      	nop
 8009232:	e10a      	b.n	800944a <UART_SetConfig+0x34e>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a71      	ldr	r2, [pc, #452]	; (8009400 <UART_SetConfig+0x304>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d120      	bne.n	8009280 <UART_SetConfig+0x184>
 800923e:	4b6e      	ldr	r3, [pc, #440]	; (80093f8 <UART_SetConfig+0x2fc>)
 8009240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009244:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009248:	2b10      	cmp	r3, #16
 800924a:	d00f      	beq.n	800926c <UART_SetConfig+0x170>
 800924c:	2b10      	cmp	r3, #16
 800924e:	d802      	bhi.n	8009256 <UART_SetConfig+0x15a>
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <UART_SetConfig+0x164>
 8009254:	e010      	b.n	8009278 <UART_SetConfig+0x17c>
 8009256:	2b20      	cmp	r3, #32
 8009258:	d005      	beq.n	8009266 <UART_SetConfig+0x16a>
 800925a:	2b30      	cmp	r3, #48	; 0x30
 800925c:	d009      	beq.n	8009272 <UART_SetConfig+0x176>
 800925e:	e00b      	b.n	8009278 <UART_SetConfig+0x17c>
 8009260:	2300      	movs	r3, #0
 8009262:	77fb      	strb	r3, [r7, #31]
 8009264:	e0f1      	b.n	800944a <UART_SetConfig+0x34e>
 8009266:	2302      	movs	r3, #2
 8009268:	77fb      	strb	r3, [r7, #31]
 800926a:	e0ee      	b.n	800944a <UART_SetConfig+0x34e>
 800926c:	2304      	movs	r3, #4
 800926e:	77fb      	strb	r3, [r7, #31]
 8009270:	e0eb      	b.n	800944a <UART_SetConfig+0x34e>
 8009272:	2308      	movs	r3, #8
 8009274:	77fb      	strb	r3, [r7, #31]
 8009276:	e0e8      	b.n	800944a <UART_SetConfig+0x34e>
 8009278:	2310      	movs	r3, #16
 800927a:	77fb      	strb	r3, [r7, #31]
 800927c:	bf00      	nop
 800927e:	e0e4      	b.n	800944a <UART_SetConfig+0x34e>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a5f      	ldr	r2, [pc, #380]	; (8009404 <UART_SetConfig+0x308>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d120      	bne.n	80092cc <UART_SetConfig+0x1d0>
 800928a:	4b5b      	ldr	r3, [pc, #364]	; (80093f8 <UART_SetConfig+0x2fc>)
 800928c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009290:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009294:	2b40      	cmp	r3, #64	; 0x40
 8009296:	d00f      	beq.n	80092b8 <UART_SetConfig+0x1bc>
 8009298:	2b40      	cmp	r3, #64	; 0x40
 800929a:	d802      	bhi.n	80092a2 <UART_SetConfig+0x1a6>
 800929c:	2b00      	cmp	r3, #0
 800929e:	d005      	beq.n	80092ac <UART_SetConfig+0x1b0>
 80092a0:	e010      	b.n	80092c4 <UART_SetConfig+0x1c8>
 80092a2:	2b80      	cmp	r3, #128	; 0x80
 80092a4:	d005      	beq.n	80092b2 <UART_SetConfig+0x1b6>
 80092a6:	2bc0      	cmp	r3, #192	; 0xc0
 80092a8:	d009      	beq.n	80092be <UART_SetConfig+0x1c2>
 80092aa:	e00b      	b.n	80092c4 <UART_SetConfig+0x1c8>
 80092ac:	2300      	movs	r3, #0
 80092ae:	77fb      	strb	r3, [r7, #31]
 80092b0:	e0cb      	b.n	800944a <UART_SetConfig+0x34e>
 80092b2:	2302      	movs	r3, #2
 80092b4:	77fb      	strb	r3, [r7, #31]
 80092b6:	e0c8      	b.n	800944a <UART_SetConfig+0x34e>
 80092b8:	2304      	movs	r3, #4
 80092ba:	77fb      	strb	r3, [r7, #31]
 80092bc:	e0c5      	b.n	800944a <UART_SetConfig+0x34e>
 80092be:	2308      	movs	r3, #8
 80092c0:	77fb      	strb	r3, [r7, #31]
 80092c2:	e0c2      	b.n	800944a <UART_SetConfig+0x34e>
 80092c4:	2310      	movs	r3, #16
 80092c6:	77fb      	strb	r3, [r7, #31]
 80092c8:	bf00      	nop
 80092ca:	e0be      	b.n	800944a <UART_SetConfig+0x34e>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	4a4d      	ldr	r2, [pc, #308]	; (8009408 <UART_SetConfig+0x30c>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d124      	bne.n	8009320 <UART_SetConfig+0x224>
 80092d6:	4b48      	ldr	r3, [pc, #288]	; (80093f8 <UART_SetConfig+0x2fc>)
 80092d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e4:	d012      	beq.n	800930c <UART_SetConfig+0x210>
 80092e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ea:	d802      	bhi.n	80092f2 <UART_SetConfig+0x1f6>
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d007      	beq.n	8009300 <UART_SetConfig+0x204>
 80092f0:	e012      	b.n	8009318 <UART_SetConfig+0x21c>
 80092f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092f6:	d006      	beq.n	8009306 <UART_SetConfig+0x20a>
 80092f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092fc:	d009      	beq.n	8009312 <UART_SetConfig+0x216>
 80092fe:	e00b      	b.n	8009318 <UART_SetConfig+0x21c>
 8009300:	2300      	movs	r3, #0
 8009302:	77fb      	strb	r3, [r7, #31]
 8009304:	e0a1      	b.n	800944a <UART_SetConfig+0x34e>
 8009306:	2302      	movs	r3, #2
 8009308:	77fb      	strb	r3, [r7, #31]
 800930a:	e09e      	b.n	800944a <UART_SetConfig+0x34e>
 800930c:	2304      	movs	r3, #4
 800930e:	77fb      	strb	r3, [r7, #31]
 8009310:	e09b      	b.n	800944a <UART_SetConfig+0x34e>
 8009312:	2308      	movs	r3, #8
 8009314:	77fb      	strb	r3, [r7, #31]
 8009316:	e098      	b.n	800944a <UART_SetConfig+0x34e>
 8009318:	2310      	movs	r3, #16
 800931a:	77fb      	strb	r3, [r7, #31]
 800931c:	bf00      	nop
 800931e:	e094      	b.n	800944a <UART_SetConfig+0x34e>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4a39      	ldr	r2, [pc, #228]	; (800940c <UART_SetConfig+0x310>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d124      	bne.n	8009374 <UART_SetConfig+0x278>
 800932a:	4b33      	ldr	r3, [pc, #204]	; (80093f8 <UART_SetConfig+0x2fc>)
 800932c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009338:	d012      	beq.n	8009360 <UART_SetConfig+0x264>
 800933a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800933e:	d802      	bhi.n	8009346 <UART_SetConfig+0x24a>
 8009340:	2b00      	cmp	r3, #0
 8009342:	d007      	beq.n	8009354 <UART_SetConfig+0x258>
 8009344:	e012      	b.n	800936c <UART_SetConfig+0x270>
 8009346:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800934a:	d006      	beq.n	800935a <UART_SetConfig+0x25e>
 800934c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009350:	d009      	beq.n	8009366 <UART_SetConfig+0x26a>
 8009352:	e00b      	b.n	800936c <UART_SetConfig+0x270>
 8009354:	2301      	movs	r3, #1
 8009356:	77fb      	strb	r3, [r7, #31]
 8009358:	e077      	b.n	800944a <UART_SetConfig+0x34e>
 800935a:	2302      	movs	r3, #2
 800935c:	77fb      	strb	r3, [r7, #31]
 800935e:	e074      	b.n	800944a <UART_SetConfig+0x34e>
 8009360:	2304      	movs	r3, #4
 8009362:	77fb      	strb	r3, [r7, #31]
 8009364:	e071      	b.n	800944a <UART_SetConfig+0x34e>
 8009366:	2308      	movs	r3, #8
 8009368:	77fb      	strb	r3, [r7, #31]
 800936a:	e06e      	b.n	800944a <UART_SetConfig+0x34e>
 800936c:	2310      	movs	r3, #16
 800936e:	77fb      	strb	r3, [r7, #31]
 8009370:	bf00      	nop
 8009372:	e06a      	b.n	800944a <UART_SetConfig+0x34e>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	4a25      	ldr	r2, [pc, #148]	; (8009410 <UART_SetConfig+0x314>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d124      	bne.n	80093c8 <UART_SetConfig+0x2cc>
 800937e:	4b1e      	ldr	r3, [pc, #120]	; (80093f8 <UART_SetConfig+0x2fc>)
 8009380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009384:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800938c:	d012      	beq.n	80093b4 <UART_SetConfig+0x2b8>
 800938e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009392:	d802      	bhi.n	800939a <UART_SetConfig+0x29e>
 8009394:	2b00      	cmp	r3, #0
 8009396:	d007      	beq.n	80093a8 <UART_SetConfig+0x2ac>
 8009398:	e012      	b.n	80093c0 <UART_SetConfig+0x2c4>
 800939a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800939e:	d006      	beq.n	80093ae <UART_SetConfig+0x2b2>
 80093a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80093a4:	d009      	beq.n	80093ba <UART_SetConfig+0x2be>
 80093a6:	e00b      	b.n	80093c0 <UART_SetConfig+0x2c4>
 80093a8:	2300      	movs	r3, #0
 80093aa:	77fb      	strb	r3, [r7, #31]
 80093ac:	e04d      	b.n	800944a <UART_SetConfig+0x34e>
 80093ae:	2302      	movs	r3, #2
 80093b0:	77fb      	strb	r3, [r7, #31]
 80093b2:	e04a      	b.n	800944a <UART_SetConfig+0x34e>
 80093b4:	2304      	movs	r3, #4
 80093b6:	77fb      	strb	r3, [r7, #31]
 80093b8:	e047      	b.n	800944a <UART_SetConfig+0x34e>
 80093ba:	2308      	movs	r3, #8
 80093bc:	77fb      	strb	r3, [r7, #31]
 80093be:	e044      	b.n	800944a <UART_SetConfig+0x34e>
 80093c0:	2310      	movs	r3, #16
 80093c2:	77fb      	strb	r3, [r7, #31]
 80093c4:	bf00      	nop
 80093c6:	e040      	b.n	800944a <UART_SetConfig+0x34e>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a11      	ldr	r2, [pc, #68]	; (8009414 <UART_SetConfig+0x318>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d139      	bne.n	8009446 <UART_SetConfig+0x34a>
 80093d2:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <UART_SetConfig+0x2fc>)
 80093d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80093dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093e0:	d027      	beq.n	8009432 <UART_SetConfig+0x336>
 80093e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093e6:	d817      	bhi.n	8009418 <UART_SetConfig+0x31c>
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d01c      	beq.n	8009426 <UART_SetConfig+0x32a>
 80093ec:	e027      	b.n	800943e <UART_SetConfig+0x342>
 80093ee:	bf00      	nop
 80093f0:	efff69f3 	.word	0xefff69f3
 80093f4:	40011000 	.word	0x40011000
 80093f8:	40023800 	.word	0x40023800
 80093fc:	40004400 	.word	0x40004400
 8009400:	40004800 	.word	0x40004800
 8009404:	40004c00 	.word	0x40004c00
 8009408:	40005000 	.word	0x40005000
 800940c:	40011400 	.word	0x40011400
 8009410:	40007800 	.word	0x40007800
 8009414:	40007c00 	.word	0x40007c00
 8009418:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800941c:	d006      	beq.n	800942c <UART_SetConfig+0x330>
 800941e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009422:	d009      	beq.n	8009438 <UART_SetConfig+0x33c>
 8009424:	e00b      	b.n	800943e <UART_SetConfig+0x342>
 8009426:	2300      	movs	r3, #0
 8009428:	77fb      	strb	r3, [r7, #31]
 800942a:	e00e      	b.n	800944a <UART_SetConfig+0x34e>
 800942c:	2302      	movs	r3, #2
 800942e:	77fb      	strb	r3, [r7, #31]
 8009430:	e00b      	b.n	800944a <UART_SetConfig+0x34e>
 8009432:	2304      	movs	r3, #4
 8009434:	77fb      	strb	r3, [r7, #31]
 8009436:	e008      	b.n	800944a <UART_SetConfig+0x34e>
 8009438:	2308      	movs	r3, #8
 800943a:	77fb      	strb	r3, [r7, #31]
 800943c:	e005      	b.n	800944a <UART_SetConfig+0x34e>
 800943e:	2310      	movs	r3, #16
 8009440:	77fb      	strb	r3, [r7, #31]
 8009442:	bf00      	nop
 8009444:	e001      	b.n	800944a <UART_SetConfig+0x34e>
 8009446:	2310      	movs	r3, #16
 8009448:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009452:	d17f      	bne.n	8009554 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009454:	7ffb      	ldrb	r3, [r7, #31]
 8009456:	2b08      	cmp	r3, #8
 8009458:	d85c      	bhi.n	8009514 <UART_SetConfig+0x418>
 800945a:	a201      	add	r2, pc, #4	; (adr r2, 8009460 <UART_SetConfig+0x364>)
 800945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009460:	08009485 	.word	0x08009485
 8009464:	080094a5 	.word	0x080094a5
 8009468:	080094c5 	.word	0x080094c5
 800946c:	08009515 	.word	0x08009515
 8009470:	080094dd 	.word	0x080094dd
 8009474:	08009515 	.word	0x08009515
 8009478:	08009515 	.word	0x08009515
 800947c:	08009515 	.word	0x08009515
 8009480:	080094fd 	.word	0x080094fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009484:	f7fc fa84 	bl	8005990 <HAL_RCC_GetPCLK1Freq>
 8009488:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	005a      	lsls	r2, r3, #1
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	085b      	lsrs	r3, r3, #1
 8009494:	441a      	add	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	fbb2 f3f3 	udiv	r3, r2, r3
 800949e:	b29b      	uxth	r3, r3
 80094a0:	61bb      	str	r3, [r7, #24]
        break;
 80094a2:	e03a      	b.n	800951a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094a4:	f7fc fa88 	bl	80059b8 <HAL_RCC_GetPCLK2Freq>
 80094a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	005a      	lsls	r2, r3, #1
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	085b      	lsrs	r3, r3, #1
 80094b4:	441a      	add	r2, r3
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80094be:	b29b      	uxth	r3, r3
 80094c0:	61bb      	str	r3, [r7, #24]
        break;
 80094c2:	e02a      	b.n	800951a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	085a      	lsrs	r2, r3, #1
 80094ca:	4b5f      	ldr	r3, [pc, #380]	; (8009648 <UART_SetConfig+0x54c>)
 80094cc:	4413      	add	r3, r2
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	6852      	ldr	r2, [r2, #4]
 80094d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80094d6:	b29b      	uxth	r3, r3
 80094d8:	61bb      	str	r3, [r7, #24]
        break;
 80094da:	e01e      	b.n	800951a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094dc:	f7fc f99a 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 80094e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	005a      	lsls	r2, r3, #1
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	085b      	lsrs	r3, r3, #1
 80094ec:	441a      	add	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	61bb      	str	r3, [r7, #24]
        break;
 80094fa:	e00e      	b.n	800951a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	085b      	lsrs	r3, r3, #1
 8009502:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	fbb2 f3f3 	udiv	r3, r2, r3
 800950e:	b29b      	uxth	r3, r3
 8009510:	61bb      	str	r3, [r7, #24]
        break;
 8009512:	e002      	b.n	800951a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	75fb      	strb	r3, [r7, #23]
        break;
 8009518:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	2b0f      	cmp	r3, #15
 800951e:	d916      	bls.n	800954e <UART_SetConfig+0x452>
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009526:	d212      	bcs.n	800954e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	b29b      	uxth	r3, r3
 800952c:	f023 030f 	bic.w	r3, r3, #15
 8009530:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	085b      	lsrs	r3, r3, #1
 8009536:	b29b      	uxth	r3, r3
 8009538:	f003 0307 	and.w	r3, r3, #7
 800953c:	b29a      	uxth	r2, r3
 800953e:	897b      	ldrh	r3, [r7, #10]
 8009540:	4313      	orrs	r3, r2
 8009542:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	897a      	ldrh	r2, [r7, #10]
 800954a:	60da      	str	r2, [r3, #12]
 800954c:	e070      	b.n	8009630 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800954e:	2301      	movs	r3, #1
 8009550:	75fb      	strb	r3, [r7, #23]
 8009552:	e06d      	b.n	8009630 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009554:	7ffb      	ldrb	r3, [r7, #31]
 8009556:	2b08      	cmp	r3, #8
 8009558:	d859      	bhi.n	800960e <UART_SetConfig+0x512>
 800955a:	a201      	add	r2, pc, #4	; (adr r2, 8009560 <UART_SetConfig+0x464>)
 800955c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009560:	08009585 	.word	0x08009585
 8009564:	080095a3 	.word	0x080095a3
 8009568:	080095c1 	.word	0x080095c1
 800956c:	0800960f 	.word	0x0800960f
 8009570:	080095d9 	.word	0x080095d9
 8009574:	0800960f 	.word	0x0800960f
 8009578:	0800960f 	.word	0x0800960f
 800957c:	0800960f 	.word	0x0800960f
 8009580:	080095f7 	.word	0x080095f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009584:	f7fc fa04 	bl	8005990 <HAL_RCC_GetPCLK1Freq>
 8009588:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	085a      	lsrs	r2, r3, #1
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	441a      	add	r2, r3
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	fbb2 f3f3 	udiv	r3, r2, r3
 800959c:	b29b      	uxth	r3, r3
 800959e:	61bb      	str	r3, [r7, #24]
        break;
 80095a0:	e038      	b.n	8009614 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095a2:	f7fc fa09 	bl	80059b8 <HAL_RCC_GetPCLK2Freq>
 80095a6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	085a      	lsrs	r2, r3, #1
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	441a      	add	r2, r3
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
 80095b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	61bb      	str	r3, [r7, #24]
        break;
 80095be:	e029      	b.n	8009614 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	085a      	lsrs	r2, r3, #1
 80095c6:	4b21      	ldr	r3, [pc, #132]	; (800964c <UART_SetConfig+0x550>)
 80095c8:	4413      	add	r3, r2
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	6852      	ldr	r2, [r2, #4]
 80095ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	61bb      	str	r3, [r7, #24]
        break;
 80095d6:	e01d      	b.n	8009614 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095d8:	f7fc f91c 	bl	8005814 <HAL_RCC_GetSysClockFreq>
 80095dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	085a      	lsrs	r2, r3, #1
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	441a      	add	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	61bb      	str	r3, [r7, #24]
        break;
 80095f4:	e00e      	b.n	8009614 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	085b      	lsrs	r3, r3, #1
 80095fc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	fbb2 f3f3 	udiv	r3, r2, r3
 8009608:	b29b      	uxth	r3, r3
 800960a:	61bb      	str	r3, [r7, #24]
        break;
 800960c:	e002      	b.n	8009614 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	75fb      	strb	r3, [r7, #23]
        break;
 8009612:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	2b0f      	cmp	r3, #15
 8009618:	d908      	bls.n	800962c <UART_SetConfig+0x530>
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009620:	d204      	bcs.n	800962c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	69ba      	ldr	r2, [r7, #24]
 8009628:	60da      	str	r2, [r3, #12]
 800962a:	e001      	b.n	8009630 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2200      	movs	r2, #0
 800963a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800963c:	7dfb      	ldrb	r3, [r7, #23]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3720      	adds	r7, #32
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	01e84800 	.word	0x01e84800
 800964c:	00f42400 	.word	0x00f42400

08009650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009650:	b480      	push	{r7}
 8009652:	b083      	sub	sp, #12
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965c:	f003 0301 	and.w	r3, r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	d00a      	beq.n	800967a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	f003 0302 	and.w	r3, r3, #2
 8009682:	2b00      	cmp	r3, #0
 8009684:	d00a      	beq.n	800969c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	430a      	orrs	r2, r1
 800969a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d00a      	beq.n	80096be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c2:	f003 0308 	and.w	r3, r3, #8
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d00a      	beq.n	80096e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	430a      	orrs	r2, r1
 80096de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e4:	f003 0310 	and.w	r3, r3, #16
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d00a      	beq.n	8009702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	430a      	orrs	r2, r1
 8009700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	f003 0320 	and.w	r3, r3, #32
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00a      	beq.n	8009724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	430a      	orrs	r2, r1
 8009722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800972c:	2b00      	cmp	r3, #0
 800972e:	d01a      	beq.n	8009766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	430a      	orrs	r2, r1
 8009744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800974e:	d10a      	bne.n	8009766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	430a      	orrs	r2, r1
 8009764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800976a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00a      	beq.n	8009788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	430a      	orrs	r2, r1
 8009786:	605a      	str	r2, [r3, #4]
  }
}
 8009788:	bf00      	nop
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b086      	sub	sp, #24
 8009798:	af02      	add	r7, sp, #8
 800979a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80097a2:	f7fa f855 	bl	8003850 <HAL_GetTick>
 80097a6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0308 	and.w	r3, r3, #8
 80097b2:	2b08      	cmp	r3, #8
 80097b4:	d10e      	bne.n	80097d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2200      	movs	r2, #0
 80097c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 f82a 	bl	800981e <UART_WaitOnFlagUntilTimeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	e020      	b.n	8009816 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0304 	and.w	r3, r3, #4
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d10e      	bne.n	8009800 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097e2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f814 	bl	800981e <UART_WaitOnFlagUntilTimeout>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e00a      	b.n	8009816 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2220      	movs	r2, #32
 8009804:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2220      	movs	r2, #32
 800980a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	60f8      	str	r0, [r7, #12]
 8009826:	60b9      	str	r1, [r7, #8]
 8009828:	603b      	str	r3, [r7, #0]
 800982a:	4613      	mov	r3, r2
 800982c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800982e:	e05d      	b.n	80098ec <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009830:	69bb      	ldr	r3, [r7, #24]
 8009832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009836:	d059      	beq.n	80098ec <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009838:	f7fa f80a 	bl	8003850 <HAL_GetTick>
 800983c:	4602      	mov	r2, r0
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	1ad3      	subs	r3, r2, r3
 8009842:	69ba      	ldr	r2, [r7, #24]
 8009844:	429a      	cmp	r2, r3
 8009846:	d302      	bcc.n	800984e <UART_WaitOnFlagUntilTimeout+0x30>
 8009848:	69bb      	ldr	r3, [r7, #24]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d11b      	bne.n	8009886 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800985c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	689a      	ldr	r2, [r3, #8]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f022 0201 	bic.w	r2, r2, #1
 800986c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2220      	movs	r2, #32
 8009872:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	2220      	movs	r2, #32
 8009878:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	e042      	b.n	800990c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d02b      	beq.n	80098ec <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800989e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098a2:	d123      	bne.n	80098ec <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098ac:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80098bc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	689a      	ldr	r2, [r3, #8]
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0201 	bic.w	r2, r2, #1
 80098cc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2220      	movs	r2, #32
 80098d2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2220      	movs	r2, #32
 80098d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2220      	movs	r2, #32
 80098de:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	e00f      	b.n	800990c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	69da      	ldr	r2, [r3, #28]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	4013      	ands	r3, r2
 80098f6:	68ba      	ldr	r2, [r7, #8]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	bf0c      	ite	eq
 80098fc:	2301      	moveq	r3, #1
 80098fe:	2300      	movne	r3, #0
 8009900:	b2db      	uxtb	r3, r3
 8009902:	461a      	mov	r2, r3
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	429a      	cmp	r2, r3
 8009908:	d092      	beq.n	8009830 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800992a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	689a      	ldr	r2, [r3, #8]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f022 0201 	bic.w	r2, r2, #1
 800993a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2220      	movs	r2, #32
 8009940:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009960:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2200      	movs	r2, #0
 8009966:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f7ff fbae 	bl	80090d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009978:	bf00      	nop
 800997a:	3710      	adds	r7, #16
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}

08009980 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681a      	ldr	r2, [r3, #0]
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009996:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2220      	movs	r2, #32
 800999c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f7ff fb8b 	bl	80090c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099aa:	bf00      	nop
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80099b2:	b580      	push	{r7, lr}
 80099b4:	b084      	sub	sp, #16
 80099b6:	af00      	add	r7, sp, #0
 80099b8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099c0:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099c6:	2b22      	cmp	r3, #34	; 0x22
 80099c8:	d13a      	bne.n	8009a40 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099d0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80099d2:	89bb      	ldrh	r3, [r7, #12]
 80099d4:	b2d9      	uxtb	r1, r3
 80099d6:	89fb      	ldrh	r3, [r7, #14]
 80099d8:	b2da      	uxtb	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099de:	400a      	ands	r2, r1
 80099e0:	b2d2      	uxtb	r2, r2
 80099e2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e8:	1c5a      	adds	r2, r3, #1
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	3b01      	subs	r3, #1
 80099f8:	b29a      	uxth	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d121      	bne.n	8009a50 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a1a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	689a      	ldr	r2, [r3, #8]
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	f022 0201 	bic.w	r2, r2, #1
 8009a2a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2220      	movs	r2, #32
 8009a30:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f7f8 fc95 	bl	8002368 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a3e:	e007      	b.n	8009a50 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	699a      	ldr	r2, [r3, #24]
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f042 0208 	orr.w	r2, r2, #8
 8009a4e:	619a      	str	r2, [r3, #24]
}
 8009a50:	bf00      	nop
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a66:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a6c:	2b22      	cmp	r3, #34	; 0x22
 8009a6e:	d13a      	bne.n	8009ae6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a7c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a7e:	89ba      	ldrh	r2, [r7, #12]
 8009a80:	89fb      	ldrh	r3, [r7, #14]
 8009a82:	4013      	ands	r3, r2
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a8e:	1c9a      	adds	r2, r3, #2
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	b29a      	uxth	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d121      	bne.n	8009af6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009ac0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689a      	ldr	r2, [r3, #8]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f022 0201 	bic.w	r2, r2, #1
 8009ad0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2200      	movs	r2, #0
 8009adc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f7f8 fc42 	bl	8002368 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ae4:	e007      	b.n	8009af6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	699a      	ldr	r2, [r3, #24]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f042 0208 	orr.w	r2, r2, #8
 8009af4:	619a      	str	r2, [r3, #24]
}
 8009af6:	bf00      	nop
 8009af8:	3710      	adds	r7, #16
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <atoi>:
 8009afe:	220a      	movs	r2, #10
 8009b00:	2100      	movs	r1, #0
 8009b02:	f000 b945 	b.w	8009d90 <strtol>
	...

08009b08 <__errno>:
 8009b08:	4b01      	ldr	r3, [pc, #4]	; (8009b10 <__errno+0x8>)
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	4770      	bx	lr
 8009b0e:	bf00      	nop
 8009b10:	2000000c 	.word	0x2000000c

08009b14 <__libc_init_array>:
 8009b14:	b570      	push	{r4, r5, r6, lr}
 8009b16:	4e0d      	ldr	r6, [pc, #52]	; (8009b4c <__libc_init_array+0x38>)
 8009b18:	4c0d      	ldr	r4, [pc, #52]	; (8009b50 <__libc_init_array+0x3c>)
 8009b1a:	1ba4      	subs	r4, r4, r6
 8009b1c:	10a4      	asrs	r4, r4, #2
 8009b1e:	2500      	movs	r5, #0
 8009b20:	42a5      	cmp	r5, r4
 8009b22:	d109      	bne.n	8009b38 <__libc_init_array+0x24>
 8009b24:	4e0b      	ldr	r6, [pc, #44]	; (8009b54 <__libc_init_array+0x40>)
 8009b26:	4c0c      	ldr	r4, [pc, #48]	; (8009b58 <__libc_init_array+0x44>)
 8009b28:	f000 fd4e 	bl	800a5c8 <_init>
 8009b2c:	1ba4      	subs	r4, r4, r6
 8009b2e:	10a4      	asrs	r4, r4, #2
 8009b30:	2500      	movs	r5, #0
 8009b32:	42a5      	cmp	r5, r4
 8009b34:	d105      	bne.n	8009b42 <__libc_init_array+0x2e>
 8009b36:	bd70      	pop	{r4, r5, r6, pc}
 8009b38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b3c:	4798      	blx	r3
 8009b3e:	3501      	adds	r5, #1
 8009b40:	e7ee      	b.n	8009b20 <__libc_init_array+0xc>
 8009b42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b46:	4798      	blx	r3
 8009b48:	3501      	adds	r5, #1
 8009b4a:	e7f2      	b.n	8009b32 <__libc_init_array+0x1e>
 8009b4c:	0800a8b0 	.word	0x0800a8b0
 8009b50:	0800a8b0 	.word	0x0800a8b0
 8009b54:	0800a8b0 	.word	0x0800a8b0
 8009b58:	0800a8b4 	.word	0x0800a8b4

08009b5c <memcpy>:
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	1e43      	subs	r3, r0, #1
 8009b60:	440a      	add	r2, r1
 8009b62:	4291      	cmp	r1, r2
 8009b64:	d100      	bne.n	8009b68 <memcpy+0xc>
 8009b66:	bd10      	pop	{r4, pc}
 8009b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b70:	e7f7      	b.n	8009b62 <memcpy+0x6>

08009b72 <memset>:
 8009b72:	4402      	add	r2, r0
 8009b74:	4603      	mov	r3, r0
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d100      	bne.n	8009b7c <memset+0xa>
 8009b7a:	4770      	bx	lr
 8009b7c:	f803 1b01 	strb.w	r1, [r3], #1
 8009b80:	e7f9      	b.n	8009b76 <memset+0x4>
	...

08009b84 <siprintf>:
 8009b84:	b40e      	push	{r1, r2, r3}
 8009b86:	b500      	push	{lr}
 8009b88:	b09c      	sub	sp, #112	; 0x70
 8009b8a:	ab1d      	add	r3, sp, #116	; 0x74
 8009b8c:	9002      	str	r0, [sp, #8]
 8009b8e:	9006      	str	r0, [sp, #24]
 8009b90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b94:	4809      	ldr	r0, [pc, #36]	; (8009bbc <siprintf+0x38>)
 8009b96:	9107      	str	r1, [sp, #28]
 8009b98:	9104      	str	r1, [sp, #16]
 8009b9a:	4909      	ldr	r1, [pc, #36]	; (8009bc0 <siprintf+0x3c>)
 8009b9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ba0:	9105      	str	r1, [sp, #20]
 8009ba2:	6800      	ldr	r0, [r0, #0]
 8009ba4:	9301      	str	r3, [sp, #4]
 8009ba6:	a902      	add	r1, sp, #8
 8009ba8:	f000 fa28 	bl	8009ffc <_svfiprintf_r>
 8009bac:	9b02      	ldr	r3, [sp, #8]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	701a      	strb	r2, [r3, #0]
 8009bb2:	b01c      	add	sp, #112	; 0x70
 8009bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bb8:	b003      	add	sp, #12
 8009bba:	4770      	bx	lr
 8009bbc:	2000000c 	.word	0x2000000c
 8009bc0:	ffff0208 	.word	0xffff0208

08009bc4 <strncpy>:
 8009bc4:	b570      	push	{r4, r5, r6, lr}
 8009bc6:	3901      	subs	r1, #1
 8009bc8:	4604      	mov	r4, r0
 8009bca:	b902      	cbnz	r2, 8009bce <strncpy+0xa>
 8009bcc:	bd70      	pop	{r4, r5, r6, pc}
 8009bce:	4623      	mov	r3, r4
 8009bd0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009bd4:	f803 5b01 	strb.w	r5, [r3], #1
 8009bd8:	1e56      	subs	r6, r2, #1
 8009bda:	b92d      	cbnz	r5, 8009be8 <strncpy+0x24>
 8009bdc:	4414      	add	r4, r2
 8009bde:	42a3      	cmp	r3, r4
 8009be0:	d0f4      	beq.n	8009bcc <strncpy+0x8>
 8009be2:	f803 5b01 	strb.w	r5, [r3], #1
 8009be6:	e7fa      	b.n	8009bde <strncpy+0x1a>
 8009be8:	461c      	mov	r4, r3
 8009bea:	4632      	mov	r2, r6
 8009bec:	e7ed      	b.n	8009bca <strncpy+0x6>
	...

08009bf0 <strtok>:
 8009bf0:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <strtok+0x50>)
 8009bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bf6:	681d      	ldr	r5, [r3, #0]
 8009bf8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009bfa:	4606      	mov	r6, r0
 8009bfc:	460f      	mov	r7, r1
 8009bfe:	b9b4      	cbnz	r4, 8009c2e <strtok+0x3e>
 8009c00:	2050      	movs	r0, #80	; 0x50
 8009c02:	f000 f8df 	bl	8009dc4 <malloc>
 8009c06:	65a8      	str	r0, [r5, #88]	; 0x58
 8009c08:	e9c0 4400 	strd	r4, r4, [r0]
 8009c0c:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009c10:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009c14:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009c18:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009c1c:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009c20:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009c24:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009c28:	6184      	str	r4, [r0, #24]
 8009c2a:	7704      	strb	r4, [r0, #28]
 8009c2c:	6244      	str	r4, [r0, #36]	; 0x24
 8009c2e:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009c30:	4639      	mov	r1, r7
 8009c32:	4630      	mov	r0, r6
 8009c34:	2301      	movs	r3, #1
 8009c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c3a:	f000 b803 	b.w	8009c44 <__strtok_r>
 8009c3e:	bf00      	nop
 8009c40:	2000000c 	.word	0x2000000c

08009c44 <__strtok_r>:
 8009c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c46:	b918      	cbnz	r0, 8009c50 <__strtok_r+0xc>
 8009c48:	6810      	ldr	r0, [r2, #0]
 8009c4a:	b908      	cbnz	r0, 8009c50 <__strtok_r+0xc>
 8009c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c4e:	4620      	mov	r0, r4
 8009c50:	4604      	mov	r4, r0
 8009c52:	460f      	mov	r7, r1
 8009c54:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009c58:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c5c:	b91e      	cbnz	r6, 8009c66 <__strtok_r+0x22>
 8009c5e:	b96d      	cbnz	r5, 8009c7c <__strtok_r+0x38>
 8009c60:	6015      	str	r5, [r2, #0]
 8009c62:	4628      	mov	r0, r5
 8009c64:	e7f2      	b.n	8009c4c <__strtok_r+0x8>
 8009c66:	42b5      	cmp	r5, r6
 8009c68:	d1f6      	bne.n	8009c58 <__strtok_r+0x14>
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1ef      	bne.n	8009c4e <__strtok_r+0xa>
 8009c6e:	6014      	str	r4, [r2, #0]
 8009c70:	7003      	strb	r3, [r0, #0]
 8009c72:	e7eb      	b.n	8009c4c <__strtok_r+0x8>
 8009c74:	462b      	mov	r3, r5
 8009c76:	e00d      	b.n	8009c94 <__strtok_r+0x50>
 8009c78:	b926      	cbnz	r6, 8009c84 <__strtok_r+0x40>
 8009c7a:	461c      	mov	r4, r3
 8009c7c:	4623      	mov	r3, r4
 8009c7e:	460f      	mov	r7, r1
 8009c80:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009c84:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c88:	42b5      	cmp	r5, r6
 8009c8a:	d1f5      	bne.n	8009c78 <__strtok_r+0x34>
 8009c8c:	2d00      	cmp	r5, #0
 8009c8e:	d0f1      	beq.n	8009c74 <__strtok_r+0x30>
 8009c90:	2100      	movs	r1, #0
 8009c92:	7021      	strb	r1, [r4, #0]
 8009c94:	6013      	str	r3, [r2, #0]
 8009c96:	e7d9      	b.n	8009c4c <__strtok_r+0x8>

08009c98 <_strtol_l.isra.0>:
 8009c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	4689      	mov	r9, r1
 8009ca0:	4692      	mov	sl, r2
 8009ca2:	461e      	mov	r6, r3
 8009ca4:	460f      	mov	r7, r1
 8009ca6:	463d      	mov	r5, r7
 8009ca8:	9808      	ldr	r0, [sp, #32]
 8009caa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cae:	f000 f885 	bl	8009dbc <__locale_ctype_ptr_l>
 8009cb2:	4420      	add	r0, r4
 8009cb4:	7843      	ldrb	r3, [r0, #1]
 8009cb6:	f013 0308 	ands.w	r3, r3, #8
 8009cba:	d132      	bne.n	8009d22 <_strtol_l.isra.0+0x8a>
 8009cbc:	2c2d      	cmp	r4, #45	; 0x2d
 8009cbe:	d132      	bne.n	8009d26 <_strtol_l.isra.0+0x8e>
 8009cc0:	787c      	ldrb	r4, [r7, #1]
 8009cc2:	1cbd      	adds	r5, r7, #2
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	2e00      	cmp	r6, #0
 8009cc8:	d05d      	beq.n	8009d86 <_strtol_l.isra.0+0xee>
 8009cca:	2e10      	cmp	r6, #16
 8009ccc:	d109      	bne.n	8009ce2 <_strtol_l.isra.0+0x4a>
 8009cce:	2c30      	cmp	r4, #48	; 0x30
 8009cd0:	d107      	bne.n	8009ce2 <_strtol_l.isra.0+0x4a>
 8009cd2:	782b      	ldrb	r3, [r5, #0]
 8009cd4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009cd8:	2b58      	cmp	r3, #88	; 0x58
 8009cda:	d14f      	bne.n	8009d7c <_strtol_l.isra.0+0xe4>
 8009cdc:	786c      	ldrb	r4, [r5, #1]
 8009cde:	2610      	movs	r6, #16
 8009ce0:	3502      	adds	r5, #2
 8009ce2:	2a00      	cmp	r2, #0
 8009ce4:	bf14      	ite	ne
 8009ce6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009cea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009cee:	2700      	movs	r7, #0
 8009cf0:	fbb1 fcf6 	udiv	ip, r1, r6
 8009cf4:	4638      	mov	r0, r7
 8009cf6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009cfa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009cfe:	2b09      	cmp	r3, #9
 8009d00:	d817      	bhi.n	8009d32 <_strtol_l.isra.0+0x9a>
 8009d02:	461c      	mov	r4, r3
 8009d04:	42a6      	cmp	r6, r4
 8009d06:	dd23      	ble.n	8009d50 <_strtol_l.isra.0+0xb8>
 8009d08:	1c7b      	adds	r3, r7, #1
 8009d0a:	d007      	beq.n	8009d1c <_strtol_l.isra.0+0x84>
 8009d0c:	4584      	cmp	ip, r0
 8009d0e:	d31c      	bcc.n	8009d4a <_strtol_l.isra.0+0xb2>
 8009d10:	d101      	bne.n	8009d16 <_strtol_l.isra.0+0x7e>
 8009d12:	45a6      	cmp	lr, r4
 8009d14:	db19      	blt.n	8009d4a <_strtol_l.isra.0+0xb2>
 8009d16:	fb00 4006 	mla	r0, r0, r6, r4
 8009d1a:	2701      	movs	r7, #1
 8009d1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d20:	e7eb      	b.n	8009cfa <_strtol_l.isra.0+0x62>
 8009d22:	462f      	mov	r7, r5
 8009d24:	e7bf      	b.n	8009ca6 <_strtol_l.isra.0+0xe>
 8009d26:	2c2b      	cmp	r4, #43	; 0x2b
 8009d28:	bf04      	itt	eq
 8009d2a:	1cbd      	addeq	r5, r7, #2
 8009d2c:	787c      	ldrbeq	r4, [r7, #1]
 8009d2e:	461a      	mov	r2, r3
 8009d30:	e7c9      	b.n	8009cc6 <_strtol_l.isra.0+0x2e>
 8009d32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009d36:	2b19      	cmp	r3, #25
 8009d38:	d801      	bhi.n	8009d3e <_strtol_l.isra.0+0xa6>
 8009d3a:	3c37      	subs	r4, #55	; 0x37
 8009d3c:	e7e2      	b.n	8009d04 <_strtol_l.isra.0+0x6c>
 8009d3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009d42:	2b19      	cmp	r3, #25
 8009d44:	d804      	bhi.n	8009d50 <_strtol_l.isra.0+0xb8>
 8009d46:	3c57      	subs	r4, #87	; 0x57
 8009d48:	e7dc      	b.n	8009d04 <_strtol_l.isra.0+0x6c>
 8009d4a:	f04f 37ff 	mov.w	r7, #4294967295
 8009d4e:	e7e5      	b.n	8009d1c <_strtol_l.isra.0+0x84>
 8009d50:	1c7b      	adds	r3, r7, #1
 8009d52:	d108      	bne.n	8009d66 <_strtol_l.isra.0+0xce>
 8009d54:	2322      	movs	r3, #34	; 0x22
 8009d56:	f8c8 3000 	str.w	r3, [r8]
 8009d5a:	4608      	mov	r0, r1
 8009d5c:	f1ba 0f00 	cmp.w	sl, #0
 8009d60:	d107      	bne.n	8009d72 <_strtol_l.isra.0+0xda>
 8009d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d66:	b102      	cbz	r2, 8009d6a <_strtol_l.isra.0+0xd2>
 8009d68:	4240      	negs	r0, r0
 8009d6a:	f1ba 0f00 	cmp.w	sl, #0
 8009d6e:	d0f8      	beq.n	8009d62 <_strtol_l.isra.0+0xca>
 8009d70:	b10f      	cbz	r7, 8009d76 <_strtol_l.isra.0+0xde>
 8009d72:	f105 39ff 	add.w	r9, r5, #4294967295
 8009d76:	f8ca 9000 	str.w	r9, [sl]
 8009d7a:	e7f2      	b.n	8009d62 <_strtol_l.isra.0+0xca>
 8009d7c:	2430      	movs	r4, #48	; 0x30
 8009d7e:	2e00      	cmp	r6, #0
 8009d80:	d1af      	bne.n	8009ce2 <_strtol_l.isra.0+0x4a>
 8009d82:	2608      	movs	r6, #8
 8009d84:	e7ad      	b.n	8009ce2 <_strtol_l.isra.0+0x4a>
 8009d86:	2c30      	cmp	r4, #48	; 0x30
 8009d88:	d0a3      	beq.n	8009cd2 <_strtol_l.isra.0+0x3a>
 8009d8a:	260a      	movs	r6, #10
 8009d8c:	e7a9      	b.n	8009ce2 <_strtol_l.isra.0+0x4a>
	...

08009d90 <strtol>:
 8009d90:	4b08      	ldr	r3, [pc, #32]	; (8009db4 <strtol+0x24>)
 8009d92:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d94:	681c      	ldr	r4, [r3, #0]
 8009d96:	4d08      	ldr	r5, [pc, #32]	; (8009db8 <strtol+0x28>)
 8009d98:	6a23      	ldr	r3, [r4, #32]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	bf08      	it	eq
 8009d9e:	462b      	moveq	r3, r5
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	4613      	mov	r3, r2
 8009da4:	460a      	mov	r2, r1
 8009da6:	4601      	mov	r1, r0
 8009da8:	4620      	mov	r0, r4
 8009daa:	f7ff ff75 	bl	8009c98 <_strtol_l.isra.0>
 8009dae:	b003      	add	sp, #12
 8009db0:	bd30      	pop	{r4, r5, pc}
 8009db2:	bf00      	nop
 8009db4:	2000000c 	.word	0x2000000c
 8009db8:	20000070 	.word	0x20000070

08009dbc <__locale_ctype_ptr_l>:
 8009dbc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009dc0:	4770      	bx	lr
	...

08009dc4 <malloc>:
 8009dc4:	4b02      	ldr	r3, [pc, #8]	; (8009dd0 <malloc+0xc>)
 8009dc6:	4601      	mov	r1, r0
 8009dc8:	6818      	ldr	r0, [r3, #0]
 8009dca:	f000 b863 	b.w	8009e94 <_malloc_r>
 8009dce:	bf00      	nop
 8009dd0:	2000000c 	.word	0x2000000c

08009dd4 <__ascii_mbtowc>:
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	b901      	cbnz	r1, 8009dda <__ascii_mbtowc+0x6>
 8009dd8:	a901      	add	r1, sp, #4
 8009dda:	b142      	cbz	r2, 8009dee <__ascii_mbtowc+0x1a>
 8009ddc:	b14b      	cbz	r3, 8009df2 <__ascii_mbtowc+0x1e>
 8009dde:	7813      	ldrb	r3, [r2, #0]
 8009de0:	600b      	str	r3, [r1, #0]
 8009de2:	7812      	ldrb	r2, [r2, #0]
 8009de4:	1c10      	adds	r0, r2, #0
 8009de6:	bf18      	it	ne
 8009de8:	2001      	movne	r0, #1
 8009dea:	b002      	add	sp, #8
 8009dec:	4770      	bx	lr
 8009dee:	4610      	mov	r0, r2
 8009df0:	e7fb      	b.n	8009dea <__ascii_mbtowc+0x16>
 8009df2:	f06f 0001 	mvn.w	r0, #1
 8009df6:	e7f8      	b.n	8009dea <__ascii_mbtowc+0x16>

08009df8 <_free_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	2900      	cmp	r1, #0
 8009dfe:	d045      	beq.n	8009e8c <_free_r+0x94>
 8009e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e04:	1f0c      	subs	r4, r1, #4
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bfb8      	it	lt
 8009e0a:	18e4      	addlt	r4, r4, r3
 8009e0c:	f000 fbac 	bl	800a568 <__malloc_lock>
 8009e10:	4a1f      	ldr	r2, [pc, #124]	; (8009e90 <_free_r+0x98>)
 8009e12:	6813      	ldr	r3, [r2, #0]
 8009e14:	4610      	mov	r0, r2
 8009e16:	b933      	cbnz	r3, 8009e26 <_free_r+0x2e>
 8009e18:	6063      	str	r3, [r4, #4]
 8009e1a:	6014      	str	r4, [r2, #0]
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e22:	f000 bba2 	b.w	800a56a <__malloc_unlock>
 8009e26:	42a3      	cmp	r3, r4
 8009e28:	d90c      	bls.n	8009e44 <_free_r+0x4c>
 8009e2a:	6821      	ldr	r1, [r4, #0]
 8009e2c:	1862      	adds	r2, r4, r1
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	bf04      	itt	eq
 8009e32:	681a      	ldreq	r2, [r3, #0]
 8009e34:	685b      	ldreq	r3, [r3, #4]
 8009e36:	6063      	str	r3, [r4, #4]
 8009e38:	bf04      	itt	eq
 8009e3a:	1852      	addeq	r2, r2, r1
 8009e3c:	6022      	streq	r2, [r4, #0]
 8009e3e:	6004      	str	r4, [r0, #0]
 8009e40:	e7ec      	b.n	8009e1c <_free_r+0x24>
 8009e42:	4613      	mov	r3, r2
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	b10a      	cbz	r2, 8009e4c <_free_r+0x54>
 8009e48:	42a2      	cmp	r2, r4
 8009e4a:	d9fa      	bls.n	8009e42 <_free_r+0x4a>
 8009e4c:	6819      	ldr	r1, [r3, #0]
 8009e4e:	1858      	adds	r0, r3, r1
 8009e50:	42a0      	cmp	r0, r4
 8009e52:	d10b      	bne.n	8009e6c <_free_r+0x74>
 8009e54:	6820      	ldr	r0, [r4, #0]
 8009e56:	4401      	add	r1, r0
 8009e58:	1858      	adds	r0, r3, r1
 8009e5a:	4282      	cmp	r2, r0
 8009e5c:	6019      	str	r1, [r3, #0]
 8009e5e:	d1dd      	bne.n	8009e1c <_free_r+0x24>
 8009e60:	6810      	ldr	r0, [r2, #0]
 8009e62:	6852      	ldr	r2, [r2, #4]
 8009e64:	605a      	str	r2, [r3, #4]
 8009e66:	4401      	add	r1, r0
 8009e68:	6019      	str	r1, [r3, #0]
 8009e6a:	e7d7      	b.n	8009e1c <_free_r+0x24>
 8009e6c:	d902      	bls.n	8009e74 <_free_r+0x7c>
 8009e6e:	230c      	movs	r3, #12
 8009e70:	602b      	str	r3, [r5, #0]
 8009e72:	e7d3      	b.n	8009e1c <_free_r+0x24>
 8009e74:	6820      	ldr	r0, [r4, #0]
 8009e76:	1821      	adds	r1, r4, r0
 8009e78:	428a      	cmp	r2, r1
 8009e7a:	bf04      	itt	eq
 8009e7c:	6811      	ldreq	r1, [r2, #0]
 8009e7e:	6852      	ldreq	r2, [r2, #4]
 8009e80:	6062      	str	r2, [r4, #4]
 8009e82:	bf04      	itt	eq
 8009e84:	1809      	addeq	r1, r1, r0
 8009e86:	6021      	streq	r1, [r4, #0]
 8009e88:	605c      	str	r4, [r3, #4]
 8009e8a:	e7c7      	b.n	8009e1c <_free_r+0x24>
 8009e8c:	bd38      	pop	{r3, r4, r5, pc}
 8009e8e:	bf00      	nop
 8009e90:	20000200 	.word	0x20000200

08009e94 <_malloc_r>:
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	1ccd      	adds	r5, r1, #3
 8009e98:	f025 0503 	bic.w	r5, r5, #3
 8009e9c:	3508      	adds	r5, #8
 8009e9e:	2d0c      	cmp	r5, #12
 8009ea0:	bf38      	it	cc
 8009ea2:	250c      	movcc	r5, #12
 8009ea4:	2d00      	cmp	r5, #0
 8009ea6:	4606      	mov	r6, r0
 8009ea8:	db01      	blt.n	8009eae <_malloc_r+0x1a>
 8009eaa:	42a9      	cmp	r1, r5
 8009eac:	d903      	bls.n	8009eb6 <_malloc_r+0x22>
 8009eae:	230c      	movs	r3, #12
 8009eb0:	6033      	str	r3, [r6, #0]
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	bd70      	pop	{r4, r5, r6, pc}
 8009eb6:	f000 fb57 	bl	800a568 <__malloc_lock>
 8009eba:	4a21      	ldr	r2, [pc, #132]	; (8009f40 <_malloc_r+0xac>)
 8009ebc:	6814      	ldr	r4, [r2, #0]
 8009ebe:	4621      	mov	r1, r4
 8009ec0:	b991      	cbnz	r1, 8009ee8 <_malloc_r+0x54>
 8009ec2:	4c20      	ldr	r4, [pc, #128]	; (8009f44 <_malloc_r+0xb0>)
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	b91b      	cbnz	r3, 8009ed0 <_malloc_r+0x3c>
 8009ec8:	4630      	mov	r0, r6
 8009eca:	f000 fb17 	bl	800a4fc <_sbrk_r>
 8009ece:	6020      	str	r0, [r4, #0]
 8009ed0:	4629      	mov	r1, r5
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	f000 fb12 	bl	800a4fc <_sbrk_r>
 8009ed8:	1c43      	adds	r3, r0, #1
 8009eda:	d124      	bne.n	8009f26 <_malloc_r+0x92>
 8009edc:	230c      	movs	r3, #12
 8009ede:	6033      	str	r3, [r6, #0]
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f000 fb42 	bl	800a56a <__malloc_unlock>
 8009ee6:	e7e4      	b.n	8009eb2 <_malloc_r+0x1e>
 8009ee8:	680b      	ldr	r3, [r1, #0]
 8009eea:	1b5b      	subs	r3, r3, r5
 8009eec:	d418      	bmi.n	8009f20 <_malloc_r+0x8c>
 8009eee:	2b0b      	cmp	r3, #11
 8009ef0:	d90f      	bls.n	8009f12 <_malloc_r+0x7e>
 8009ef2:	600b      	str	r3, [r1, #0]
 8009ef4:	50cd      	str	r5, [r1, r3]
 8009ef6:	18cc      	adds	r4, r1, r3
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f000 fb36 	bl	800a56a <__malloc_unlock>
 8009efe:	f104 000b 	add.w	r0, r4, #11
 8009f02:	1d23      	adds	r3, r4, #4
 8009f04:	f020 0007 	bic.w	r0, r0, #7
 8009f08:	1ac3      	subs	r3, r0, r3
 8009f0a:	d0d3      	beq.n	8009eb4 <_malloc_r+0x20>
 8009f0c:	425a      	negs	r2, r3
 8009f0e:	50e2      	str	r2, [r4, r3]
 8009f10:	e7d0      	b.n	8009eb4 <_malloc_r+0x20>
 8009f12:	428c      	cmp	r4, r1
 8009f14:	684b      	ldr	r3, [r1, #4]
 8009f16:	bf16      	itet	ne
 8009f18:	6063      	strne	r3, [r4, #4]
 8009f1a:	6013      	streq	r3, [r2, #0]
 8009f1c:	460c      	movne	r4, r1
 8009f1e:	e7eb      	b.n	8009ef8 <_malloc_r+0x64>
 8009f20:	460c      	mov	r4, r1
 8009f22:	6849      	ldr	r1, [r1, #4]
 8009f24:	e7cc      	b.n	8009ec0 <_malloc_r+0x2c>
 8009f26:	1cc4      	adds	r4, r0, #3
 8009f28:	f024 0403 	bic.w	r4, r4, #3
 8009f2c:	42a0      	cmp	r0, r4
 8009f2e:	d005      	beq.n	8009f3c <_malloc_r+0xa8>
 8009f30:	1a21      	subs	r1, r4, r0
 8009f32:	4630      	mov	r0, r6
 8009f34:	f000 fae2 	bl	800a4fc <_sbrk_r>
 8009f38:	3001      	adds	r0, #1
 8009f3a:	d0cf      	beq.n	8009edc <_malloc_r+0x48>
 8009f3c:	6025      	str	r5, [r4, #0]
 8009f3e:	e7db      	b.n	8009ef8 <_malloc_r+0x64>
 8009f40:	20000200 	.word	0x20000200
 8009f44:	20000204 	.word	0x20000204

08009f48 <__ssputs_r>:
 8009f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f4c:	688e      	ldr	r6, [r1, #8]
 8009f4e:	429e      	cmp	r6, r3
 8009f50:	4682      	mov	sl, r0
 8009f52:	460c      	mov	r4, r1
 8009f54:	4690      	mov	r8, r2
 8009f56:	4699      	mov	r9, r3
 8009f58:	d837      	bhi.n	8009fca <__ssputs_r+0x82>
 8009f5a:	898a      	ldrh	r2, [r1, #12]
 8009f5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f60:	d031      	beq.n	8009fc6 <__ssputs_r+0x7e>
 8009f62:	6825      	ldr	r5, [r4, #0]
 8009f64:	6909      	ldr	r1, [r1, #16]
 8009f66:	1a6f      	subs	r7, r5, r1
 8009f68:	6965      	ldr	r5, [r4, #20]
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f70:	fb95 f5f3 	sdiv	r5, r5, r3
 8009f74:	f109 0301 	add.w	r3, r9, #1
 8009f78:	443b      	add	r3, r7
 8009f7a:	429d      	cmp	r5, r3
 8009f7c:	bf38      	it	cc
 8009f7e:	461d      	movcc	r5, r3
 8009f80:	0553      	lsls	r3, r2, #21
 8009f82:	d530      	bpl.n	8009fe6 <__ssputs_r+0x9e>
 8009f84:	4629      	mov	r1, r5
 8009f86:	f7ff ff85 	bl	8009e94 <_malloc_r>
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	b950      	cbnz	r0, 8009fa4 <__ssputs_r+0x5c>
 8009f8e:	230c      	movs	r3, #12
 8009f90:	f8ca 3000 	str.w	r3, [sl]
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa4:	463a      	mov	r2, r7
 8009fa6:	6921      	ldr	r1, [r4, #16]
 8009fa8:	f7ff fdd8 	bl	8009b5c <memcpy>
 8009fac:	89a3      	ldrh	r3, [r4, #12]
 8009fae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb6:	81a3      	strh	r3, [r4, #12]
 8009fb8:	6126      	str	r6, [r4, #16]
 8009fba:	6165      	str	r5, [r4, #20]
 8009fbc:	443e      	add	r6, r7
 8009fbe:	1bed      	subs	r5, r5, r7
 8009fc0:	6026      	str	r6, [r4, #0]
 8009fc2:	60a5      	str	r5, [r4, #8]
 8009fc4:	464e      	mov	r6, r9
 8009fc6:	454e      	cmp	r6, r9
 8009fc8:	d900      	bls.n	8009fcc <__ssputs_r+0x84>
 8009fca:	464e      	mov	r6, r9
 8009fcc:	4632      	mov	r2, r6
 8009fce:	4641      	mov	r1, r8
 8009fd0:	6820      	ldr	r0, [r4, #0]
 8009fd2:	f000 fab0 	bl	800a536 <memmove>
 8009fd6:	68a3      	ldr	r3, [r4, #8]
 8009fd8:	1b9b      	subs	r3, r3, r6
 8009fda:	60a3      	str	r3, [r4, #8]
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	441e      	add	r6, r3
 8009fe0:	6026      	str	r6, [r4, #0]
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	e7dc      	b.n	8009fa0 <__ssputs_r+0x58>
 8009fe6:	462a      	mov	r2, r5
 8009fe8:	f000 fac0 	bl	800a56c <_realloc_r>
 8009fec:	4606      	mov	r6, r0
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d1e2      	bne.n	8009fb8 <__ssputs_r+0x70>
 8009ff2:	6921      	ldr	r1, [r4, #16]
 8009ff4:	4650      	mov	r0, sl
 8009ff6:	f7ff feff 	bl	8009df8 <_free_r>
 8009ffa:	e7c8      	b.n	8009f8e <__ssputs_r+0x46>

08009ffc <_svfiprintf_r>:
 8009ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a000:	461d      	mov	r5, r3
 800a002:	898b      	ldrh	r3, [r1, #12]
 800a004:	061f      	lsls	r7, r3, #24
 800a006:	b09d      	sub	sp, #116	; 0x74
 800a008:	4680      	mov	r8, r0
 800a00a:	460c      	mov	r4, r1
 800a00c:	4616      	mov	r6, r2
 800a00e:	d50f      	bpl.n	800a030 <_svfiprintf_r+0x34>
 800a010:	690b      	ldr	r3, [r1, #16]
 800a012:	b96b      	cbnz	r3, 800a030 <_svfiprintf_r+0x34>
 800a014:	2140      	movs	r1, #64	; 0x40
 800a016:	f7ff ff3d 	bl	8009e94 <_malloc_r>
 800a01a:	6020      	str	r0, [r4, #0]
 800a01c:	6120      	str	r0, [r4, #16]
 800a01e:	b928      	cbnz	r0, 800a02c <_svfiprintf_r+0x30>
 800a020:	230c      	movs	r3, #12
 800a022:	f8c8 3000 	str.w	r3, [r8]
 800a026:	f04f 30ff 	mov.w	r0, #4294967295
 800a02a:	e0c8      	b.n	800a1be <_svfiprintf_r+0x1c2>
 800a02c:	2340      	movs	r3, #64	; 0x40
 800a02e:	6163      	str	r3, [r4, #20]
 800a030:	2300      	movs	r3, #0
 800a032:	9309      	str	r3, [sp, #36]	; 0x24
 800a034:	2320      	movs	r3, #32
 800a036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a03a:	2330      	movs	r3, #48	; 0x30
 800a03c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a040:	9503      	str	r5, [sp, #12]
 800a042:	f04f 0b01 	mov.w	fp, #1
 800a046:	4637      	mov	r7, r6
 800a048:	463d      	mov	r5, r7
 800a04a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a04e:	b10b      	cbz	r3, 800a054 <_svfiprintf_r+0x58>
 800a050:	2b25      	cmp	r3, #37	; 0x25
 800a052:	d13e      	bne.n	800a0d2 <_svfiprintf_r+0xd6>
 800a054:	ebb7 0a06 	subs.w	sl, r7, r6
 800a058:	d00b      	beq.n	800a072 <_svfiprintf_r+0x76>
 800a05a:	4653      	mov	r3, sl
 800a05c:	4632      	mov	r2, r6
 800a05e:	4621      	mov	r1, r4
 800a060:	4640      	mov	r0, r8
 800a062:	f7ff ff71 	bl	8009f48 <__ssputs_r>
 800a066:	3001      	adds	r0, #1
 800a068:	f000 80a4 	beq.w	800a1b4 <_svfiprintf_r+0x1b8>
 800a06c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a06e:	4453      	add	r3, sl
 800a070:	9309      	str	r3, [sp, #36]	; 0x24
 800a072:	783b      	ldrb	r3, [r7, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 809d 	beq.w	800a1b4 <_svfiprintf_r+0x1b8>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f04f 32ff 	mov.w	r2, #4294967295
 800a080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	9307      	str	r3, [sp, #28]
 800a088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a08c:	931a      	str	r3, [sp, #104]	; 0x68
 800a08e:	462f      	mov	r7, r5
 800a090:	2205      	movs	r2, #5
 800a092:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a096:	4850      	ldr	r0, [pc, #320]	; (800a1d8 <_svfiprintf_r+0x1dc>)
 800a098:	f7f6 f8ea 	bl	8000270 <memchr>
 800a09c:	9b04      	ldr	r3, [sp, #16]
 800a09e:	b9d0      	cbnz	r0, 800a0d6 <_svfiprintf_r+0xda>
 800a0a0:	06d9      	lsls	r1, r3, #27
 800a0a2:	bf44      	itt	mi
 800a0a4:	2220      	movmi	r2, #32
 800a0a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0aa:	071a      	lsls	r2, r3, #28
 800a0ac:	bf44      	itt	mi
 800a0ae:	222b      	movmi	r2, #43	; 0x2b
 800a0b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0b4:	782a      	ldrb	r2, [r5, #0]
 800a0b6:	2a2a      	cmp	r2, #42	; 0x2a
 800a0b8:	d015      	beq.n	800a0e6 <_svfiprintf_r+0xea>
 800a0ba:	9a07      	ldr	r2, [sp, #28]
 800a0bc:	462f      	mov	r7, r5
 800a0be:	2000      	movs	r0, #0
 800a0c0:	250a      	movs	r5, #10
 800a0c2:	4639      	mov	r1, r7
 800a0c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0c8:	3b30      	subs	r3, #48	; 0x30
 800a0ca:	2b09      	cmp	r3, #9
 800a0cc:	d94d      	bls.n	800a16a <_svfiprintf_r+0x16e>
 800a0ce:	b1b8      	cbz	r0, 800a100 <_svfiprintf_r+0x104>
 800a0d0:	e00f      	b.n	800a0f2 <_svfiprintf_r+0xf6>
 800a0d2:	462f      	mov	r7, r5
 800a0d4:	e7b8      	b.n	800a048 <_svfiprintf_r+0x4c>
 800a0d6:	4a40      	ldr	r2, [pc, #256]	; (800a1d8 <_svfiprintf_r+0x1dc>)
 800a0d8:	1a80      	subs	r0, r0, r2
 800a0da:	fa0b f000 	lsl.w	r0, fp, r0
 800a0de:	4318      	orrs	r0, r3
 800a0e0:	9004      	str	r0, [sp, #16]
 800a0e2:	463d      	mov	r5, r7
 800a0e4:	e7d3      	b.n	800a08e <_svfiprintf_r+0x92>
 800a0e6:	9a03      	ldr	r2, [sp, #12]
 800a0e8:	1d11      	adds	r1, r2, #4
 800a0ea:	6812      	ldr	r2, [r2, #0]
 800a0ec:	9103      	str	r1, [sp, #12]
 800a0ee:	2a00      	cmp	r2, #0
 800a0f0:	db01      	blt.n	800a0f6 <_svfiprintf_r+0xfa>
 800a0f2:	9207      	str	r2, [sp, #28]
 800a0f4:	e004      	b.n	800a100 <_svfiprintf_r+0x104>
 800a0f6:	4252      	negs	r2, r2
 800a0f8:	f043 0302 	orr.w	r3, r3, #2
 800a0fc:	9207      	str	r2, [sp, #28]
 800a0fe:	9304      	str	r3, [sp, #16]
 800a100:	783b      	ldrb	r3, [r7, #0]
 800a102:	2b2e      	cmp	r3, #46	; 0x2e
 800a104:	d10c      	bne.n	800a120 <_svfiprintf_r+0x124>
 800a106:	787b      	ldrb	r3, [r7, #1]
 800a108:	2b2a      	cmp	r3, #42	; 0x2a
 800a10a:	d133      	bne.n	800a174 <_svfiprintf_r+0x178>
 800a10c:	9b03      	ldr	r3, [sp, #12]
 800a10e:	1d1a      	adds	r2, r3, #4
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	9203      	str	r2, [sp, #12]
 800a114:	2b00      	cmp	r3, #0
 800a116:	bfb8      	it	lt
 800a118:	f04f 33ff 	movlt.w	r3, #4294967295
 800a11c:	3702      	adds	r7, #2
 800a11e:	9305      	str	r3, [sp, #20]
 800a120:	4d2e      	ldr	r5, [pc, #184]	; (800a1dc <_svfiprintf_r+0x1e0>)
 800a122:	7839      	ldrb	r1, [r7, #0]
 800a124:	2203      	movs	r2, #3
 800a126:	4628      	mov	r0, r5
 800a128:	f7f6 f8a2 	bl	8000270 <memchr>
 800a12c:	b138      	cbz	r0, 800a13e <_svfiprintf_r+0x142>
 800a12e:	2340      	movs	r3, #64	; 0x40
 800a130:	1b40      	subs	r0, r0, r5
 800a132:	fa03 f000 	lsl.w	r0, r3, r0
 800a136:	9b04      	ldr	r3, [sp, #16]
 800a138:	4303      	orrs	r3, r0
 800a13a:	3701      	adds	r7, #1
 800a13c:	9304      	str	r3, [sp, #16]
 800a13e:	7839      	ldrb	r1, [r7, #0]
 800a140:	4827      	ldr	r0, [pc, #156]	; (800a1e0 <_svfiprintf_r+0x1e4>)
 800a142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a146:	2206      	movs	r2, #6
 800a148:	1c7e      	adds	r6, r7, #1
 800a14a:	f7f6 f891 	bl	8000270 <memchr>
 800a14e:	2800      	cmp	r0, #0
 800a150:	d038      	beq.n	800a1c4 <_svfiprintf_r+0x1c8>
 800a152:	4b24      	ldr	r3, [pc, #144]	; (800a1e4 <_svfiprintf_r+0x1e8>)
 800a154:	bb13      	cbnz	r3, 800a19c <_svfiprintf_r+0x1a0>
 800a156:	9b03      	ldr	r3, [sp, #12]
 800a158:	3307      	adds	r3, #7
 800a15a:	f023 0307 	bic.w	r3, r3, #7
 800a15e:	3308      	adds	r3, #8
 800a160:	9303      	str	r3, [sp, #12]
 800a162:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a164:	444b      	add	r3, r9
 800a166:	9309      	str	r3, [sp, #36]	; 0x24
 800a168:	e76d      	b.n	800a046 <_svfiprintf_r+0x4a>
 800a16a:	fb05 3202 	mla	r2, r5, r2, r3
 800a16e:	2001      	movs	r0, #1
 800a170:	460f      	mov	r7, r1
 800a172:	e7a6      	b.n	800a0c2 <_svfiprintf_r+0xc6>
 800a174:	2300      	movs	r3, #0
 800a176:	3701      	adds	r7, #1
 800a178:	9305      	str	r3, [sp, #20]
 800a17a:	4619      	mov	r1, r3
 800a17c:	250a      	movs	r5, #10
 800a17e:	4638      	mov	r0, r7
 800a180:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a184:	3a30      	subs	r2, #48	; 0x30
 800a186:	2a09      	cmp	r2, #9
 800a188:	d903      	bls.n	800a192 <_svfiprintf_r+0x196>
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d0c8      	beq.n	800a120 <_svfiprintf_r+0x124>
 800a18e:	9105      	str	r1, [sp, #20]
 800a190:	e7c6      	b.n	800a120 <_svfiprintf_r+0x124>
 800a192:	fb05 2101 	mla	r1, r5, r1, r2
 800a196:	2301      	movs	r3, #1
 800a198:	4607      	mov	r7, r0
 800a19a:	e7f0      	b.n	800a17e <_svfiprintf_r+0x182>
 800a19c:	ab03      	add	r3, sp, #12
 800a19e:	9300      	str	r3, [sp, #0]
 800a1a0:	4622      	mov	r2, r4
 800a1a2:	4b11      	ldr	r3, [pc, #68]	; (800a1e8 <_svfiprintf_r+0x1ec>)
 800a1a4:	a904      	add	r1, sp, #16
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	f3af 8000 	nop.w
 800a1ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a1b0:	4681      	mov	r9, r0
 800a1b2:	d1d6      	bne.n	800a162 <_svfiprintf_r+0x166>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	065b      	lsls	r3, r3, #25
 800a1b8:	f53f af35 	bmi.w	800a026 <_svfiprintf_r+0x2a>
 800a1bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1be:	b01d      	add	sp, #116	; 0x74
 800a1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c4:	ab03      	add	r3, sp, #12
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	4622      	mov	r2, r4
 800a1ca:	4b07      	ldr	r3, [pc, #28]	; (800a1e8 <_svfiprintf_r+0x1ec>)
 800a1cc:	a904      	add	r1, sp, #16
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	f000 f882 	bl	800a2d8 <_printf_i>
 800a1d4:	e7ea      	b.n	800a1ac <_svfiprintf_r+0x1b0>
 800a1d6:	bf00      	nop
 800a1d8:	0800a772 	.word	0x0800a772
 800a1dc:	0800a778 	.word	0x0800a778
 800a1e0:	0800a77c 	.word	0x0800a77c
 800a1e4:	00000000 	.word	0x00000000
 800a1e8:	08009f49 	.word	0x08009f49

0800a1ec <_printf_common>:
 800a1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1f0:	4691      	mov	r9, r2
 800a1f2:	461f      	mov	r7, r3
 800a1f4:	688a      	ldr	r2, [r1, #8]
 800a1f6:	690b      	ldr	r3, [r1, #16]
 800a1f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	bfb8      	it	lt
 800a200:	4613      	movlt	r3, r2
 800a202:	f8c9 3000 	str.w	r3, [r9]
 800a206:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a20a:	4606      	mov	r6, r0
 800a20c:	460c      	mov	r4, r1
 800a20e:	b112      	cbz	r2, 800a216 <_printf_common+0x2a>
 800a210:	3301      	adds	r3, #1
 800a212:	f8c9 3000 	str.w	r3, [r9]
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	0699      	lsls	r1, r3, #26
 800a21a:	bf42      	ittt	mi
 800a21c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a220:	3302      	addmi	r3, #2
 800a222:	f8c9 3000 	strmi.w	r3, [r9]
 800a226:	6825      	ldr	r5, [r4, #0]
 800a228:	f015 0506 	ands.w	r5, r5, #6
 800a22c:	d107      	bne.n	800a23e <_printf_common+0x52>
 800a22e:	f104 0a19 	add.w	sl, r4, #25
 800a232:	68e3      	ldr	r3, [r4, #12]
 800a234:	f8d9 2000 	ldr.w	r2, [r9]
 800a238:	1a9b      	subs	r3, r3, r2
 800a23a:	42ab      	cmp	r3, r5
 800a23c:	dc28      	bgt.n	800a290 <_printf_common+0xa4>
 800a23e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a242:	6822      	ldr	r2, [r4, #0]
 800a244:	3300      	adds	r3, #0
 800a246:	bf18      	it	ne
 800a248:	2301      	movne	r3, #1
 800a24a:	0692      	lsls	r2, r2, #26
 800a24c:	d42d      	bmi.n	800a2aa <_printf_common+0xbe>
 800a24e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a252:	4639      	mov	r1, r7
 800a254:	4630      	mov	r0, r6
 800a256:	47c0      	blx	r8
 800a258:	3001      	adds	r0, #1
 800a25a:	d020      	beq.n	800a29e <_printf_common+0xb2>
 800a25c:	6823      	ldr	r3, [r4, #0]
 800a25e:	68e5      	ldr	r5, [r4, #12]
 800a260:	f8d9 2000 	ldr.w	r2, [r9]
 800a264:	f003 0306 	and.w	r3, r3, #6
 800a268:	2b04      	cmp	r3, #4
 800a26a:	bf08      	it	eq
 800a26c:	1aad      	subeq	r5, r5, r2
 800a26e:	68a3      	ldr	r3, [r4, #8]
 800a270:	6922      	ldr	r2, [r4, #16]
 800a272:	bf0c      	ite	eq
 800a274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a278:	2500      	movne	r5, #0
 800a27a:	4293      	cmp	r3, r2
 800a27c:	bfc4      	itt	gt
 800a27e:	1a9b      	subgt	r3, r3, r2
 800a280:	18ed      	addgt	r5, r5, r3
 800a282:	f04f 0900 	mov.w	r9, #0
 800a286:	341a      	adds	r4, #26
 800a288:	454d      	cmp	r5, r9
 800a28a:	d11a      	bne.n	800a2c2 <_printf_common+0xd6>
 800a28c:	2000      	movs	r0, #0
 800a28e:	e008      	b.n	800a2a2 <_printf_common+0xb6>
 800a290:	2301      	movs	r3, #1
 800a292:	4652      	mov	r2, sl
 800a294:	4639      	mov	r1, r7
 800a296:	4630      	mov	r0, r6
 800a298:	47c0      	blx	r8
 800a29a:	3001      	adds	r0, #1
 800a29c:	d103      	bne.n	800a2a6 <_printf_common+0xba>
 800a29e:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2a6:	3501      	adds	r5, #1
 800a2a8:	e7c3      	b.n	800a232 <_printf_common+0x46>
 800a2aa:	18e1      	adds	r1, r4, r3
 800a2ac:	1c5a      	adds	r2, r3, #1
 800a2ae:	2030      	movs	r0, #48	; 0x30
 800a2b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2b4:	4422      	add	r2, r4
 800a2b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2be:	3302      	adds	r3, #2
 800a2c0:	e7c5      	b.n	800a24e <_printf_common+0x62>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4622      	mov	r2, r4
 800a2c6:	4639      	mov	r1, r7
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	47c0      	blx	r8
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	d0e6      	beq.n	800a29e <_printf_common+0xb2>
 800a2d0:	f109 0901 	add.w	r9, r9, #1
 800a2d4:	e7d8      	b.n	800a288 <_printf_common+0x9c>
	...

0800a2d8 <_printf_i>:
 800a2d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a2e0:	460c      	mov	r4, r1
 800a2e2:	7e09      	ldrb	r1, [r1, #24]
 800a2e4:	b085      	sub	sp, #20
 800a2e6:	296e      	cmp	r1, #110	; 0x6e
 800a2e8:	4617      	mov	r7, r2
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	4698      	mov	r8, r3
 800a2ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2f0:	f000 80b3 	beq.w	800a45a <_printf_i+0x182>
 800a2f4:	d822      	bhi.n	800a33c <_printf_i+0x64>
 800a2f6:	2963      	cmp	r1, #99	; 0x63
 800a2f8:	d036      	beq.n	800a368 <_printf_i+0x90>
 800a2fa:	d80a      	bhi.n	800a312 <_printf_i+0x3a>
 800a2fc:	2900      	cmp	r1, #0
 800a2fe:	f000 80b9 	beq.w	800a474 <_printf_i+0x19c>
 800a302:	2958      	cmp	r1, #88	; 0x58
 800a304:	f000 8083 	beq.w	800a40e <_printf_i+0x136>
 800a308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a30c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a310:	e032      	b.n	800a378 <_printf_i+0xa0>
 800a312:	2964      	cmp	r1, #100	; 0x64
 800a314:	d001      	beq.n	800a31a <_printf_i+0x42>
 800a316:	2969      	cmp	r1, #105	; 0x69
 800a318:	d1f6      	bne.n	800a308 <_printf_i+0x30>
 800a31a:	6820      	ldr	r0, [r4, #0]
 800a31c:	6813      	ldr	r3, [r2, #0]
 800a31e:	0605      	lsls	r5, r0, #24
 800a320:	f103 0104 	add.w	r1, r3, #4
 800a324:	d52a      	bpl.n	800a37c <_printf_i+0xa4>
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	6011      	str	r1, [r2, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	da03      	bge.n	800a336 <_printf_i+0x5e>
 800a32e:	222d      	movs	r2, #45	; 0x2d
 800a330:	425b      	negs	r3, r3
 800a332:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a336:	486f      	ldr	r0, [pc, #444]	; (800a4f4 <_printf_i+0x21c>)
 800a338:	220a      	movs	r2, #10
 800a33a:	e039      	b.n	800a3b0 <_printf_i+0xd8>
 800a33c:	2973      	cmp	r1, #115	; 0x73
 800a33e:	f000 809d 	beq.w	800a47c <_printf_i+0x1a4>
 800a342:	d808      	bhi.n	800a356 <_printf_i+0x7e>
 800a344:	296f      	cmp	r1, #111	; 0x6f
 800a346:	d020      	beq.n	800a38a <_printf_i+0xb2>
 800a348:	2970      	cmp	r1, #112	; 0x70
 800a34a:	d1dd      	bne.n	800a308 <_printf_i+0x30>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	f043 0320 	orr.w	r3, r3, #32
 800a352:	6023      	str	r3, [r4, #0]
 800a354:	e003      	b.n	800a35e <_printf_i+0x86>
 800a356:	2975      	cmp	r1, #117	; 0x75
 800a358:	d017      	beq.n	800a38a <_printf_i+0xb2>
 800a35a:	2978      	cmp	r1, #120	; 0x78
 800a35c:	d1d4      	bne.n	800a308 <_printf_i+0x30>
 800a35e:	2378      	movs	r3, #120	; 0x78
 800a360:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a364:	4864      	ldr	r0, [pc, #400]	; (800a4f8 <_printf_i+0x220>)
 800a366:	e055      	b.n	800a414 <_printf_i+0x13c>
 800a368:	6813      	ldr	r3, [r2, #0]
 800a36a:	1d19      	adds	r1, r3, #4
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	6011      	str	r1, [r2, #0]
 800a370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a378:	2301      	movs	r3, #1
 800a37a:	e08c      	b.n	800a496 <_printf_i+0x1be>
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	6011      	str	r1, [r2, #0]
 800a380:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a384:	bf18      	it	ne
 800a386:	b21b      	sxthne	r3, r3
 800a388:	e7cf      	b.n	800a32a <_printf_i+0x52>
 800a38a:	6813      	ldr	r3, [r2, #0]
 800a38c:	6825      	ldr	r5, [r4, #0]
 800a38e:	1d18      	adds	r0, r3, #4
 800a390:	6010      	str	r0, [r2, #0]
 800a392:	0628      	lsls	r0, r5, #24
 800a394:	d501      	bpl.n	800a39a <_printf_i+0xc2>
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	e002      	b.n	800a3a0 <_printf_i+0xc8>
 800a39a:	0668      	lsls	r0, r5, #25
 800a39c:	d5fb      	bpl.n	800a396 <_printf_i+0xbe>
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	4854      	ldr	r0, [pc, #336]	; (800a4f4 <_printf_i+0x21c>)
 800a3a2:	296f      	cmp	r1, #111	; 0x6f
 800a3a4:	bf14      	ite	ne
 800a3a6:	220a      	movne	r2, #10
 800a3a8:	2208      	moveq	r2, #8
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3b0:	6865      	ldr	r5, [r4, #4]
 800a3b2:	60a5      	str	r5, [r4, #8]
 800a3b4:	2d00      	cmp	r5, #0
 800a3b6:	f2c0 8095 	blt.w	800a4e4 <_printf_i+0x20c>
 800a3ba:	6821      	ldr	r1, [r4, #0]
 800a3bc:	f021 0104 	bic.w	r1, r1, #4
 800a3c0:	6021      	str	r1, [r4, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d13d      	bne.n	800a442 <_printf_i+0x16a>
 800a3c6:	2d00      	cmp	r5, #0
 800a3c8:	f040 808e 	bne.w	800a4e8 <_printf_i+0x210>
 800a3cc:	4665      	mov	r5, ip
 800a3ce:	2a08      	cmp	r2, #8
 800a3d0:	d10b      	bne.n	800a3ea <_printf_i+0x112>
 800a3d2:	6823      	ldr	r3, [r4, #0]
 800a3d4:	07db      	lsls	r3, r3, #31
 800a3d6:	d508      	bpl.n	800a3ea <_printf_i+0x112>
 800a3d8:	6923      	ldr	r3, [r4, #16]
 800a3da:	6862      	ldr	r2, [r4, #4]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	bfde      	ittt	le
 800a3e0:	2330      	movle	r3, #48	; 0x30
 800a3e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3ea:	ebac 0305 	sub.w	r3, ip, r5
 800a3ee:	6123      	str	r3, [r4, #16]
 800a3f0:	f8cd 8000 	str.w	r8, [sp]
 800a3f4:	463b      	mov	r3, r7
 800a3f6:	aa03      	add	r2, sp, #12
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f7ff fef6 	bl	800a1ec <_printf_common>
 800a400:	3001      	adds	r0, #1
 800a402:	d14d      	bne.n	800a4a0 <_printf_i+0x1c8>
 800a404:	f04f 30ff 	mov.w	r0, #4294967295
 800a408:	b005      	add	sp, #20
 800a40a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a40e:	4839      	ldr	r0, [pc, #228]	; (800a4f4 <_printf_i+0x21c>)
 800a410:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a414:	6813      	ldr	r3, [r2, #0]
 800a416:	6821      	ldr	r1, [r4, #0]
 800a418:	1d1d      	adds	r5, r3, #4
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6015      	str	r5, [r2, #0]
 800a41e:	060a      	lsls	r2, r1, #24
 800a420:	d50b      	bpl.n	800a43a <_printf_i+0x162>
 800a422:	07ca      	lsls	r2, r1, #31
 800a424:	bf44      	itt	mi
 800a426:	f041 0120 	orrmi.w	r1, r1, #32
 800a42a:	6021      	strmi	r1, [r4, #0]
 800a42c:	b91b      	cbnz	r3, 800a436 <_printf_i+0x15e>
 800a42e:	6822      	ldr	r2, [r4, #0]
 800a430:	f022 0220 	bic.w	r2, r2, #32
 800a434:	6022      	str	r2, [r4, #0]
 800a436:	2210      	movs	r2, #16
 800a438:	e7b7      	b.n	800a3aa <_printf_i+0xd2>
 800a43a:	064d      	lsls	r5, r1, #25
 800a43c:	bf48      	it	mi
 800a43e:	b29b      	uxthmi	r3, r3
 800a440:	e7ef      	b.n	800a422 <_printf_i+0x14a>
 800a442:	4665      	mov	r5, ip
 800a444:	fbb3 f1f2 	udiv	r1, r3, r2
 800a448:	fb02 3311 	mls	r3, r2, r1, r3
 800a44c:	5cc3      	ldrb	r3, [r0, r3]
 800a44e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a452:	460b      	mov	r3, r1
 800a454:	2900      	cmp	r1, #0
 800a456:	d1f5      	bne.n	800a444 <_printf_i+0x16c>
 800a458:	e7b9      	b.n	800a3ce <_printf_i+0xf6>
 800a45a:	6813      	ldr	r3, [r2, #0]
 800a45c:	6825      	ldr	r5, [r4, #0]
 800a45e:	6961      	ldr	r1, [r4, #20]
 800a460:	1d18      	adds	r0, r3, #4
 800a462:	6010      	str	r0, [r2, #0]
 800a464:	0628      	lsls	r0, r5, #24
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	d501      	bpl.n	800a46e <_printf_i+0x196>
 800a46a:	6019      	str	r1, [r3, #0]
 800a46c:	e002      	b.n	800a474 <_printf_i+0x19c>
 800a46e:	066a      	lsls	r2, r5, #25
 800a470:	d5fb      	bpl.n	800a46a <_printf_i+0x192>
 800a472:	8019      	strh	r1, [r3, #0]
 800a474:	2300      	movs	r3, #0
 800a476:	6123      	str	r3, [r4, #16]
 800a478:	4665      	mov	r5, ip
 800a47a:	e7b9      	b.n	800a3f0 <_printf_i+0x118>
 800a47c:	6813      	ldr	r3, [r2, #0]
 800a47e:	1d19      	adds	r1, r3, #4
 800a480:	6011      	str	r1, [r2, #0]
 800a482:	681d      	ldr	r5, [r3, #0]
 800a484:	6862      	ldr	r2, [r4, #4]
 800a486:	2100      	movs	r1, #0
 800a488:	4628      	mov	r0, r5
 800a48a:	f7f5 fef1 	bl	8000270 <memchr>
 800a48e:	b108      	cbz	r0, 800a494 <_printf_i+0x1bc>
 800a490:	1b40      	subs	r0, r0, r5
 800a492:	6060      	str	r0, [r4, #4]
 800a494:	6863      	ldr	r3, [r4, #4]
 800a496:	6123      	str	r3, [r4, #16]
 800a498:	2300      	movs	r3, #0
 800a49a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a49e:	e7a7      	b.n	800a3f0 <_printf_i+0x118>
 800a4a0:	6923      	ldr	r3, [r4, #16]
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	4639      	mov	r1, r7
 800a4a6:	4630      	mov	r0, r6
 800a4a8:	47c0      	blx	r8
 800a4aa:	3001      	adds	r0, #1
 800a4ac:	d0aa      	beq.n	800a404 <_printf_i+0x12c>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	079b      	lsls	r3, r3, #30
 800a4b2:	d413      	bmi.n	800a4dc <_printf_i+0x204>
 800a4b4:	68e0      	ldr	r0, [r4, #12]
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	4298      	cmp	r0, r3
 800a4ba:	bfb8      	it	lt
 800a4bc:	4618      	movlt	r0, r3
 800a4be:	e7a3      	b.n	800a408 <_printf_i+0x130>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	464a      	mov	r2, r9
 800a4c4:	4639      	mov	r1, r7
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	47c0      	blx	r8
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	d09a      	beq.n	800a404 <_printf_i+0x12c>
 800a4ce:	3501      	adds	r5, #1
 800a4d0:	68e3      	ldr	r3, [r4, #12]
 800a4d2:	9a03      	ldr	r2, [sp, #12]
 800a4d4:	1a9b      	subs	r3, r3, r2
 800a4d6:	42ab      	cmp	r3, r5
 800a4d8:	dcf2      	bgt.n	800a4c0 <_printf_i+0x1e8>
 800a4da:	e7eb      	b.n	800a4b4 <_printf_i+0x1dc>
 800a4dc:	2500      	movs	r5, #0
 800a4de:	f104 0919 	add.w	r9, r4, #25
 800a4e2:	e7f5      	b.n	800a4d0 <_printf_i+0x1f8>
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1ac      	bne.n	800a442 <_printf_i+0x16a>
 800a4e8:	7803      	ldrb	r3, [r0, #0]
 800a4ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4f2:	e76c      	b.n	800a3ce <_printf_i+0xf6>
 800a4f4:	0800a783 	.word	0x0800a783
 800a4f8:	0800a794 	.word	0x0800a794

0800a4fc <_sbrk_r>:
 800a4fc:	b538      	push	{r3, r4, r5, lr}
 800a4fe:	4c06      	ldr	r4, [pc, #24]	; (800a518 <_sbrk_r+0x1c>)
 800a500:	2300      	movs	r3, #0
 800a502:	4605      	mov	r5, r0
 800a504:	4608      	mov	r0, r1
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	f7f9 f8e6 	bl	80036d8 <_sbrk>
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d102      	bne.n	800a516 <_sbrk_r+0x1a>
 800a510:	6823      	ldr	r3, [r4, #0]
 800a512:	b103      	cbz	r3, 800a516 <_sbrk_r+0x1a>
 800a514:	602b      	str	r3, [r5, #0]
 800a516:	bd38      	pop	{r3, r4, r5, pc}
 800a518:	2005a9d0 	.word	0x2005a9d0

0800a51c <__ascii_wctomb>:
 800a51c:	b149      	cbz	r1, 800a532 <__ascii_wctomb+0x16>
 800a51e:	2aff      	cmp	r2, #255	; 0xff
 800a520:	bf85      	ittet	hi
 800a522:	238a      	movhi	r3, #138	; 0x8a
 800a524:	6003      	strhi	r3, [r0, #0]
 800a526:	700a      	strbls	r2, [r1, #0]
 800a528:	f04f 30ff 	movhi.w	r0, #4294967295
 800a52c:	bf98      	it	ls
 800a52e:	2001      	movls	r0, #1
 800a530:	4770      	bx	lr
 800a532:	4608      	mov	r0, r1
 800a534:	4770      	bx	lr

0800a536 <memmove>:
 800a536:	4288      	cmp	r0, r1
 800a538:	b510      	push	{r4, lr}
 800a53a:	eb01 0302 	add.w	r3, r1, r2
 800a53e:	d807      	bhi.n	800a550 <memmove+0x1a>
 800a540:	1e42      	subs	r2, r0, #1
 800a542:	4299      	cmp	r1, r3
 800a544:	d00a      	beq.n	800a55c <memmove+0x26>
 800a546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a54a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a54e:	e7f8      	b.n	800a542 <memmove+0xc>
 800a550:	4283      	cmp	r3, r0
 800a552:	d9f5      	bls.n	800a540 <memmove+0xa>
 800a554:	1881      	adds	r1, r0, r2
 800a556:	1ad2      	subs	r2, r2, r3
 800a558:	42d3      	cmn	r3, r2
 800a55a:	d100      	bne.n	800a55e <memmove+0x28>
 800a55c:	bd10      	pop	{r4, pc}
 800a55e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a562:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a566:	e7f7      	b.n	800a558 <memmove+0x22>

0800a568 <__malloc_lock>:
 800a568:	4770      	bx	lr

0800a56a <__malloc_unlock>:
 800a56a:	4770      	bx	lr

0800a56c <_realloc_r>:
 800a56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56e:	4607      	mov	r7, r0
 800a570:	4614      	mov	r4, r2
 800a572:	460e      	mov	r6, r1
 800a574:	b921      	cbnz	r1, 800a580 <_realloc_r+0x14>
 800a576:	4611      	mov	r1, r2
 800a578:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a57c:	f7ff bc8a 	b.w	8009e94 <_malloc_r>
 800a580:	b922      	cbnz	r2, 800a58c <_realloc_r+0x20>
 800a582:	f7ff fc39 	bl	8009df8 <_free_r>
 800a586:	4625      	mov	r5, r4
 800a588:	4628      	mov	r0, r5
 800a58a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a58c:	f000 f814 	bl	800a5b8 <_malloc_usable_size_r>
 800a590:	42a0      	cmp	r0, r4
 800a592:	d20f      	bcs.n	800a5b4 <_realloc_r+0x48>
 800a594:	4621      	mov	r1, r4
 800a596:	4638      	mov	r0, r7
 800a598:	f7ff fc7c 	bl	8009e94 <_malloc_r>
 800a59c:	4605      	mov	r5, r0
 800a59e:	2800      	cmp	r0, #0
 800a5a0:	d0f2      	beq.n	800a588 <_realloc_r+0x1c>
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	f7ff fad9 	bl	8009b5c <memcpy>
 800a5aa:	4631      	mov	r1, r6
 800a5ac:	4638      	mov	r0, r7
 800a5ae:	f7ff fc23 	bl	8009df8 <_free_r>
 800a5b2:	e7e9      	b.n	800a588 <_realloc_r+0x1c>
 800a5b4:	4635      	mov	r5, r6
 800a5b6:	e7e7      	b.n	800a588 <_realloc_r+0x1c>

0800a5b8 <_malloc_usable_size_r>:
 800a5b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5bc:	1f18      	subs	r0, r3, #4
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	bfbc      	itt	lt
 800a5c2:	580b      	ldrlt	r3, [r1, r0]
 800a5c4:	18c0      	addlt	r0, r0, r3
 800a5c6:	4770      	bx	lr

0800a5c8 <_init>:
 800a5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ca:	bf00      	nop
 800a5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5ce:	bc08      	pop	{r3}
 800a5d0:	469e      	mov	lr, r3
 800a5d2:	4770      	bx	lr

0800a5d4 <_fini>:
 800a5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5d6:	bf00      	nop
 800a5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5da:	bc08      	pop	{r3}
 800a5dc:	469e      	mov	lr, r3
 800a5de:	4770      	bx	lr
