
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a170  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800a370  0800a370  0001a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a630  0800a630  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a630  0800a630  0001a630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a638  0800a638  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a638  0800a638  0001a638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a63c  0800a63c  0001a63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005a874  200001e0  0800a820  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2005aa54  0800a820  0002aa54  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d48  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002886  00000000  00000000  00035f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a0  00000000  00000000  000387e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  00039d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029847  00000000  00000000  0003b208  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fbac  00000000  00000000  00064a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00103b26  00000000  00000000  000745fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00178121  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006130  00000000  00000000  0017819c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a358 	.word	0x0800a358

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800a358 	.word	0x0800a358

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000614:	f002 ffab 	bl	800356e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000618:	f000 f866 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061c:	f000 feb0 	bl	8001380 <MX_GPIO_Init>
  MX_DMA_Init();
 8000620:	f000 fe74 	bl	800130c <MX_DMA_Init>
  MX_ADC1_Init();
 8000624:	f000 f902 	bl	800082c <MX_ADC1_Init>
  MX_SPI1_Init();
 8000628:	f000 f9d2 	bl	80009d0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800062c:	f000 fa48 	bl	8000ac0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000630:	f000 fb06 	bl	8000c40 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000634:	f000 fb58 	bl	8000ce8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000638:	f000 fbce 	bl	8000dd8 <MX_TIM4_Init>
  MX_TIM8_Init();
 800063c:	f000 fcaa 	bl	8000f94 <MX_TIM8_Init>
  MX_UART5_Init();
 8000640:	f000 fd74 	bl	800112c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000644:	f000 fdd2 	bl	80011ec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000648:	f000 fe00 	bl	800124c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800064c:	f000 fe2e 	bl	80012ac <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000650:	f000 f93e 	bl	80008d0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000654:	f000 f97c 	bl	8000950 <MX_I2C3_Init>
  MX_SPI4_Init();
 8000658:	f000 f9f4 	bl	8000a44 <MX_SPI4_Init>
  MX_TIM5_Init();
 800065c:	f000 fc16 	bl	8000e8c <MX_TIM5_Init>
  MX_UART7_Init();
 8000660:	f000 fd94 	bl	800118c <MX_UART7_Init>
  MX_TIM6_Init();
 8000664:	f000 fc60 	bl	8000f28 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	initialization();
 8000668:	f001 fbec 	bl	8001e44 <initialization>
	HAL_Delay(10);
 800066c:	200a      	movs	r0, #10
 800066e:	f002 ffdb 	bl	8003628 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		//parse text every time before polarization
		if(newDataInBuffer()){
 8000672:	f002 f963 	bl	800293c <newDataInBuffer>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <main+0x70>
			parseText();
 800067c:	f001 fc70 	bl	8001f60 <parseText>
		}
		// if new measurement technique was updated - change state regarding to the update
		if (stateCanBeUpdated()) {
 8000680:	f002 f8a2 	bl	80027c8 <stateCanBeUpdated>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <main+0x7e>
			updateState();
 800068a:	f002 f853 	bl	8002734 <updateState>
		}

		if (ploarizationCanRun()) {
 800068e:	f002 f8c3 	bl	8002818 <ploarizationCanRun>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d008      	beq.n	80006aa <main+0x9a>
			runPolarizationSequence();
 8000698:	f000 ff44 	bl	8001524 <runPolarizationSequence>
			if (dataReadyToSend()) {
 800069c:	f002 f86a 	bl	8002774 <dataReadyToSend>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <main+0x9a>
				sendMeasuredData();
 80006a6:	f001 fed9 	bl	800245c <sendMeasuredData>
			}
		}
		//send data
		if (measurementCanRun()) {
 80006aa:	f002 f8d7 	bl	800285c <measurementCanRun>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <main+0xa8>
			runMeasurementMethod();
 80006b4:	f000 fef6 	bl	80014a4 <runMeasurementMethod>
		}
		if(dataReadyToSend() && lastMeasurement()){
 80006b8:	f002 f85c 	bl	8002774 <dataReadyToSend>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d006      	beq.n	80006d0 <main+0xc0>
 80006c2:	f002 f86f 	bl	80027a4 <lastMeasurement>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <main+0xc0>
			sendMeasuredData();
 80006cc:	f001 fec6 	bl	800245c <sendMeasuredData>
		}
		// idle state - if no method is active and there are no data to be sent
		if (stateIsIdle()) {
 80006d0:	f002 f8f2 	bl	80028b8 <stateIsIdle>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0cb      	beq.n	8000672 <main+0x62>
			set_LED1(0, 0, 0);
 80006da:	2200      	movs	r2, #0
 80006dc:	2100      	movs	r1, #0
 80006de:	2000      	movs	r0, #0
 80006e0:	f001 f83e 	bl	8001760 <set_LED1>
		if(newDataInBuffer()){
 80006e4:	e7c5      	b.n	8000672 <main+0x62>
	...

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b0b8      	sub	sp, #224	; 0xe0
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006f2:	2234      	movs	r2, #52	; 0x34
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f009 f8f8 	bl	80098ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800070c:	f107 0308 	add.w	r3, r7, #8
 8000710:	2290      	movs	r2, #144	; 0x90
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f009 f8e9 	bl	80098ec <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800071a:	f004 fb49 	bl	8004db0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b40      	ldr	r3, [pc, #256]	; (8000820 <SystemClock_Config+0x138>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000722:	4a3f      	ldr	r2, [pc, #252]	; (8000820 <SystemClock_Config+0x138>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6413      	str	r3, [r2, #64]	; 0x40
 800072a:	4b3d      	ldr	r3, [pc, #244]	; (8000820 <SystemClock_Config+0x138>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000736:	4b3b      	ldr	r3, [pc, #236]	; (8000824 <SystemClock_Config+0x13c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a3a      	ldr	r2, [pc, #232]	; (8000824 <SystemClock_Config+0x13c>)
 800073c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000740:	6013      	str	r3, [r2, #0]
 8000742:	4b38      	ldr	r3, [pc, #224]	; (8000824 <SystemClock_Config+0x13c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800074e:	2301      	movs	r3, #1
 8000750:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075c:	2302      	movs	r3, #2
 800075e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 5;
 800076a:	2305      	movs	r3, #5
 800076c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000770:	23d8      	movs	r3, #216	; 0xd8
 8000772:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000776:	2302      	movs	r3, #2
 8000778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800077c:	2302      	movs	r3, #2
 800077e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000786:	4618      	mov	r0, r3
 8000788:	f004 fb72 	bl	8004e70 <HAL_RCC_OscConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000792:	f002 f8fb 	bl	800298c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000796:	f004 fb1b 	bl	8004dd0 <HAL_PWREx_EnableOverDrive>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007a0:	f002 f8f4 	bl	800298c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a4:	230f      	movs	r3, #15
 80007a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007aa:	2302      	movs	r3, #2
 80007ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80007c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007ca:	2107      	movs	r1, #7
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 fdfd 	bl	80053cc <HAL_RCC_ClockConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80007d8:	f002 f8d8 	bl	800298c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM|RCC_PERIPHCLK_USART1
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <SystemClock_Config+0x140>)
 80007de:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
                              |RCC_PERIPHCLK_UART5|RCC_PERIPHCLK_UART7
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80007e0:	2300      	movs	r3, #0
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007f4:	2300      	movs	r3, #0
 80007f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80007fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000800:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000802:	f107 0308 	add.w	r3, r7, #8
 8000806:	4618      	mov	r0, r3
 8000808:	f004 ffb2 	bl	8005770 <HAL_RCCEx_PeriphCLKConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 8000812:	f002 f8bb 	bl	800298c <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	37e0      	adds	r7, #224	; 0xe0
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800
 8000824:	40007000 	.word	0x40007000
 8000828:	000155d0 	.word	0x000155d0

0800082c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800083e:	4b22      	ldr	r3, [pc, #136]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000840:	4a22      	ldr	r2, [pc, #136]	; (80008cc <MX_ADC1_Init+0xa0>)
 8000842:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000844:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000846:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800084a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <MX_ADC1_Init+0x9c>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <MX_ADC1_Init+0x9c>)
 800085a:	2200      	movs	r2, #0
 800085c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000860:	2200      	movs	r2, #0
 8000862:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000866:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800086e:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000870:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8000874:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_ADC1_Init+0x9c>)
 800087e:	2201      	movs	r2, #1
 8000880:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000884:	2200      	movs	r2, #0
 8000886:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800088a:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_ADC1_Init+0x9c>)
 800088c:	2201      	movs	r2, #1
 800088e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000890:	480d      	ldr	r0, [pc, #52]	; (80008c8 <MX_ADC1_Init+0x9c>)
 8000892:	f002 feeb 	bl	800366c <HAL_ADC_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800089c:	f002 f876 	bl	800298c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a4:	2301      	movs	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80008a8:	2301      	movs	r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ac:	463b      	mov	r3, r7
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	; (80008c8 <MX_ADC1_Init+0x9c>)
 80008b2:	f003 f821 	bl	80038f8 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80008bc:	f002 f866 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2002f544 	.word	0x2002f544
 80008cc:	40012000 	.word	0x40012000

080008d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_I2C1_Init+0x74>)
 80008d6:	4a1c      	ldr	r2, [pc, #112]	; (8000948 <MX_I2C1_Init+0x78>)
 80008d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_I2C1_Init+0x74>)
 80008dc:	4a1b      	ldr	r2, [pc, #108]	; (800094c <MX_I2C1_Init+0x7c>)
 80008de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008e0:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008e6:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_I2C1_Init+0x74>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ec:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_I2C1_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008f2:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_I2C1_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x74>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x74>)
 8000900:	2200      	movs	r2, #0
 8000902:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x74>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800090a:	480e      	ldr	r0, [pc, #56]	; (8000944 <MX_I2C1_Init+0x74>)
 800090c:	f004 f928 	bl	8004b60 <HAL_I2C_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000916:	f002 f839 	bl	800298c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800091a:	2100      	movs	r1, #0
 800091c:	4809      	ldr	r0, [pc, #36]	; (8000944 <MX_I2C1_Init+0x74>)
 800091e:	f004 f9af 	bl	8004c80 <HAL_I2CEx_ConfigAnalogFilter>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000928:	f002 f830 	bl	800298c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_I2C1_Init+0x74>)
 8000930:	f004 f9f1 	bl	8004d16 <HAL_I2CEx_ConfigDigitalFilter>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800093a:	f002 f827 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	200042c4 	.word	0x200042c4
 8000948:	40005400 	.word	0x40005400
 800094c:	20404768 	.word	0x20404768

08000950 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000956:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <MX_I2C3_Init+0x78>)
 8000958:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_I2C3_Init+0x74>)
 800095c:	4a1b      	ldr	r2, [pc, #108]	; (80009cc <MX_I2C3_Init+0x7c>)
 800095e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000968:	2201      	movs	r2, #1
 800096a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_I2C3_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_I2C3_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_I2C3_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800098a:	480e      	ldr	r0, [pc, #56]	; (80009c4 <MX_I2C3_Init+0x74>)
 800098c:	f004 f8e8 	bl	8004b60 <HAL_I2C_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000996:	f001 fff9 	bl	800298c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800099a:	2100      	movs	r1, #0
 800099c:	4809      	ldr	r0, [pc, #36]	; (80009c4 <MX_I2C3_Init+0x74>)
 800099e:	f004 f96f 	bl	8004c80 <HAL_I2CEx_ConfigAnalogFilter>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80009a8:	f001 fff0 	bl	800298c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009ac:	2100      	movs	r1, #0
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_I2C3_Init+0x74>)
 80009b0:	f004 f9b1 	bl	8004d16 <HAL_I2CEx_ConfigDigitalFilter>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80009ba:	f001 ffe7 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20004098 	.word	0x20004098
 80009c8:	40005c00 	.word	0x40005c00
 80009cc:	20404768 	.word	0x20404768

080009d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009d4:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009d6:	4a1a      	ldr	r2, [pc, #104]	; (8000a40 <MX_SPI1_Init+0x70>)
 80009d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009ea:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80009ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_SPI1_Init+0x6c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a16:	2207      	movs	r2, #7
 8000a18:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_SPI1_Init+0x6c>)
 8000a28:	f005 fac8 	bl	8005fbc <HAL_SPI_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000a32:	f001 ffab 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	2002f7b8 	.word	0x2002f7b8
 8000a40:	40013000 	.word	0x40013000

08000a44 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000a48:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a4a:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <MX_SPI4_Init+0x78>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a54:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a5e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a62:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a72:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a76:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a92:	2207      	movs	r2, #7
 8000a94:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000a9e:	2208      	movs	r2, #8
 8000aa0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_SPI4_Init+0x74>)
 8000aa4:	f005 fa8a 	bl	8005fbc <HAL_SPI_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_SPI4_Init+0x6e>
  {
    Error_Handler();
 8000aae:	f001 ff6d 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2002f60c 	.word	0x2002f60c
 8000abc:	40013400 	.word	0x40013400

08000ac0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b09a      	sub	sp, #104	; 0x68
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	222c      	movs	r2, #44	; 0x2c
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f008 fef6 	bl	80098ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b00:	4b4d      	ldr	r3, [pc, #308]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b02:	4a4e      	ldr	r2, [pc, #312]	; (8000c3c <MX_TIM1_Init+0x17c>)
 8000b04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b06:	4b4c      	ldr	r3, [pc, #304]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4898-1;
 8000b12:	4b49      	ldr	r3, [pc, #292]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b14:	f241 3221 	movw	r2, #4897	; 0x1321
 8000b18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b1a:	4b47      	ldr	r3, [pc, #284]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b20:	4b45      	ldr	r3, [pc, #276]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b26:	4b44      	ldr	r3, [pc, #272]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b2c:	4842      	ldr	r0, [pc, #264]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b2e:	f005 ffe4 	bl	8006afa <HAL_TIM_Base_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f001 ff28 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b40:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b42:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b46:	4619      	mov	r1, r3
 8000b48:	483b      	ldr	r0, [pc, #236]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b4a:	f006 fe6f 	bl	800782c <HAL_TIM_ConfigClockSource>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000b54:	f001 ff1a 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b58:	4837      	ldr	r0, [pc, #220]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b5a:	f006 f84e 	bl	8006bfa <HAL_TIM_PWM_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000b64:	f001 ff12 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b68:	2320      	movs	r3, #32
 8000b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b74:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b78:	4619      	mov	r1, r3
 8000b7a:	482f      	ldr	r0, [pc, #188]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000b7c:	f007 fd76 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000b86:	f001 ff01 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b8a:	2370      	movs	r3, #112	; 0x70
 8000b8c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 864+10;
 8000b8e:	f240 336a 	movw	r3, #874	; 0x36a
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b94:	2302      	movs	r3, #2
 8000b96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8000ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000baa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4821      	ldr	r0, [pc, #132]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000bb4:	f006 fd22 	bl	80075fc <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8000bbe:	f001 fee5 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bc2:	2360      	movs	r3, #96	; 0x60
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 3000;
 8000bc6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000bca:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4818      	ldr	r0, [pc, #96]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000bd6:	f006 fd11 	bl	80075fc <HAL_TIM_PWM_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000be0:	f001 fed4 	bl	800298c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4807      	ldr	r0, [pc, #28]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000c1a:	f007 fdb5 	bl	8008788 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM1_Init+0x168>
  {
    Error_Handler();
 8000c24:	f001 feb2 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c28:	4803      	ldr	r0, [pc, #12]	; (8000c38 <MX_TIM1_Init+0x178>)
 8000c2a:	f002 f9cf 	bl	8002fcc <HAL_TIM_MspPostInit>

}
 8000c2e:	bf00      	nop
 8000c30:	3768      	adds	r7, #104	; 0x68
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2002f778 	.word	0x2002f778
 8000c3c:	40010000 	.word	0x40010000

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffffffff;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c86:	4817      	ldr	r0, [pc, #92]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000c88:	f006 f906 	bl	8006e98 <HAL_TIM_IC_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c92:	f001 fe7b 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480f      	ldr	r0, [pc, #60]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000ca6:	f007 fce1 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000cb0:	f001 fe6c 	bl	800298c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <MX_TIM2_Init+0xa4>)
 8000ccc:	f006 fbf9 	bl	80074c2 <HAL_TIM_IC_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cd6:	f001 fe59 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	3720      	adds	r7, #32
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	2002f81c 	.word	0x2002f81c

08000ce8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b090      	sub	sp, #64	; 0x40
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfe:	f107 0320 	add.w	r3, r7, #32
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0a:	1d3b      	adds	r3, r7, #4
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]
 8000d18:	615a      	str	r2, [r3, #20]
 8000d1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d1c:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d1e:	4a2d      	ldr	r2, [pc, #180]	; (8000dd4 <MX_TIM3_Init+0xec>)
 8000d20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d22:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b29      	ldr	r3, [pc, #164]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000d2e:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d34:	4b26      	ldr	r3, [pc, #152]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d40:	4823      	ldr	r0, [pc, #140]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d42:	f005 feda 	bl	8006afa <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d4c:	f001 fe1e 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d50:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d52:	f005 ff52 	bl	8006bfa <HAL_TIM_PWM_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d5c:	f001 fe16 	bl	800298c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d70:	f006 fe16 	bl	80079a0 <HAL_TIM_SlaveConfigSynchro>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000d7a:	f001 fe07 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d86:	f107 0320 	add.w	r3, r7, #32
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4810      	ldr	r0, [pc, #64]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000d8e:	f007 fc6d 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000d98:	f001 fdf8 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9c:	2360      	movs	r3, #96	; 0x60
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	4619      	mov	r1, r3
 8000db2:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000db4:	f006 fc22 	bl	80075fc <HAL_TIM_PWM_ConfigChannel>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000dbe:	f001 fde5 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dc2:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM3_Init+0xe8>)
 8000dc4:	f002 f902 	bl	8002fcc <HAL_TIM_MspPostInit>

}
 8000dc8:	bf00      	nop
 8000dca:	3740      	adds	r7, #64	; 0x40
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2002f468 	.word	0x2002f468
 8000dd4:	40000400 	.word	0x40000400

08000dd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dde:	f107 031c 	add.w	r3, r7, #28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dea:	463b      	mov	r3, r7
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000dfc:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000dfe:	4a22      	ldr	r2, [pc, #136]	; (8000e88 <MX_TIM4_Init+0xb0>)
 8000e00:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000e02:	4b20      	ldr	r3, [pc, #128]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e08:	4b1e      	ldr	r3, [pc, #120]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8000e0e:	4b1d      	ldr	r3, [pc, #116]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e14:	4b1b      	ldr	r3, [pc, #108]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e1a:	4b1a      	ldr	r3, [pc, #104]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e1c:	2280      	movs	r2, #128	; 0x80
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e20:	4818      	ldr	r0, [pc, #96]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e22:	f005 feea 	bl	8006bfa <HAL_TIM_PWM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000e2c:	f001 fdae 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e30:	2320      	movs	r3, #32
 8000e32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e38:	f107 031c 	add.w	r3, r7, #28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e40:	f007 fc14 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000e4a:	f001 fd9f 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4e:	2360      	movs	r3, #96	; 0x60
 8000e50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	4619      	mov	r1, r3
 8000e64:	4807      	ldr	r0, [pc, #28]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e66:	f006 fbc9 	bl	80075fc <HAL_TIM_PWM_ConfigChannel>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000e70:	f001 fd8c 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <MX_TIM4_Init+0xac>)
 8000e76:	f002 f8a9 	bl	8002fcc <HAL_TIM_MspPostInit>

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20004204 	.word	0x20004204
 8000e88:	40000800 	.word	0x40000800

08000e8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e92:	f107 0310 	add.w	r3, r7, #16
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
 8000e9c:	609a      	str	r2, [r3, #8]
 8000e9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000eac:	4a1d      	ldr	r2, [pc, #116]	; (8000f24 <MX_TIM5_Init+0x98>)
 8000eae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = (21600/2) -1;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000ebe:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000ec2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000ed2:	f005 fe12 	bl	8006afa <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000edc:	f001 fd56 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ee6:	f107 0310 	add.w	r3, r7, #16
 8000eea:	4619      	mov	r1, r3
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000eee:	f006 fc9d 	bl	800782c <HAL_TIM_ConfigClockSource>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ef8:	f001 fd48 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_TIM5_Init+0x94>)
 8000f0a:	f007 fbaf 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000f14:	f001 fd3a 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	3720      	adds	r7, #32
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	2002f428 	.word	0x2002f428
 8000f24:	40000c00 	.word	0x40000c00

08000f28 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f3a:	4a15      	ldr	r2, [pc, #84]	; (8000f90 <MX_TIM6_Init+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4898-1;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f4c:	f241 3221 	movw	r2, #4897	; 0x1321
 8000f50:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000f58:	480c      	ldr	r0, [pc, #48]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f5a:	f005 fdce 	bl	8006afa <HAL_TIM_Base_Init>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000f64:	f001 fd12 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000f68:	2320      	movs	r3, #32
 8000f6a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <MX_TIM6_Init+0x64>)
 8000f76:	f007 fb79 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000f80:	f001 fd04 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	2002f734 	.word	0x2002f734
 8000f90:	40001000 	.word	0x40001000

08000f94 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b09e      	sub	sp, #120	; 0x78
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f9a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	605a      	str	r2, [r3, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
 8000fb4:	60da      	str	r2, [r3, #12]
 8000fb6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
 8000fd4:	615a      	str	r2, [r3, #20]
 8000fd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	222c      	movs	r2, #44	; 0x2c
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f008 fc84 	bl	80098ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fe4:	4b4f      	ldr	r3, [pc, #316]	; (8001124 <MX_TIM8_Init+0x190>)
 8000fe6:	4a50      	ldr	r2, [pc, #320]	; (8001128 <MX_TIM8_Init+0x194>)
 8000fe8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fea:	4b4e      	ldr	r3, [pc, #312]	; (8001124 <MX_TIM8_Init+0x190>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ff0:	4b4c      	ldr	r3, [pc, #304]	; (8001124 <MX_TIM8_Init+0x190>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 108-1;
 8000ff6:	4b4b      	ldr	r3, [pc, #300]	; (8001124 <MX_TIM8_Init+0x190>)
 8000ff8:	226b      	movs	r2, #107	; 0x6b
 8000ffa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffc:	4b49      	ldr	r3, [pc, #292]	; (8001124 <MX_TIM8_Init+0x190>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 24;
 8001002:	4b48      	ldr	r3, [pc, #288]	; (8001124 <MX_TIM8_Init+0x190>)
 8001004:	2218      	movs	r2, #24
 8001006:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b46      	ldr	r3, [pc, #280]	; (8001124 <MX_TIM8_Init+0x190>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800100e:	4845      	ldr	r0, [pc, #276]	; (8001124 <MX_TIM8_Init+0x190>)
 8001010:	f005 fd73 	bl	8006afa <HAL_TIM_Base_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800101a:	f001 fcb7 	bl	800298c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001024:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001028:	4619      	mov	r1, r3
 800102a:	483e      	ldr	r0, [pc, #248]	; (8001124 <MX_TIM8_Init+0x190>)
 800102c:	f006 fbfe 	bl	800782c <HAL_TIM_ConfigClockSource>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001036:	f001 fca9 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800103a:	483a      	ldr	r0, [pc, #232]	; (8001124 <MX_TIM8_Init+0x190>)
 800103c:	f005 fddd 	bl	8006bfa <HAL_TIM_PWM_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8001046:	f001 fca1 	bl	800298c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 800104a:	2108      	movs	r1, #8
 800104c:	4835      	ldr	r0, [pc, #212]	; (8001124 <MX_TIM8_Init+0x190>)
 800104e:	f006 f8d3 	bl	80071f8 <HAL_TIM_OnePulse_Init>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM8_Init+0xc8>
  {
    Error_Handler();
 8001058:	f001 fc98 	bl	800298c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800105c:	2306      	movs	r3, #6
 800105e:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001060:	2300      	movs	r3, #0
 8001062:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8001064:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001068:	4619      	mov	r1, r3
 800106a:	482e      	ldr	r0, [pc, #184]	; (8001124 <MX_TIM8_Init+0x190>)
 800106c:	f006 fc98 	bl	80079a0 <HAL_TIM_SlaveConfigSynchro>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM8_Init+0xe6>
  {
    Error_Handler();
 8001076:	f001 fc89 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	64bb      	str	r3, [r7, #72]	; 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001086:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800108a:	4619      	mov	r1, r3
 800108c:	4825      	ldr	r0, [pc, #148]	; (8001124 <MX_TIM8_Init+0x190>)
 800108e:	f007 faed 	bl	800866c <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001098:	f001 fc78 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800109c:	2370      	movs	r3, #112	; 0x70
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 54;
 80010a0:	2336      	movs	r3, #54	; 0x36
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b0:	2300      	movs	r3, #0
 80010b2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010bc:	2200      	movs	r2, #0
 80010be:	4619      	mov	r1, r3
 80010c0:	4818      	ldr	r0, [pc, #96]	; (8001124 <MX_TIM8_Init+0x190>)
 80010c2:	f006 fa9b 	bl	80075fc <HAL_TIM_PWM_ConfigChannel>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM8_Init+0x13c>
  {
    Error_Handler();
 80010cc:	f001 fc5e 	bl	800298c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <MX_TIM8_Init+0x190>)
 8001106:	f007 fb3f 	bl	8008788 <HAL_TIMEx_ConfigBreakDeadTime>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM8_Init+0x180>
  {
    Error_Handler();
 8001110:	f001 fc3c 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <MX_TIM8_Init+0x190>)
 8001116:	f001 ff59 	bl	8002fcc <HAL_TIM_MspPostInit>

}
 800111a:	bf00      	nop
 800111c:	3778      	adds	r7, #120	; 0x78
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200041c4 	.word	0x200041c4
 8001128:	40010400 	.word	0x40010400

0800112c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_UART5_Init+0x58>)
 8001132:	4a15      	ldr	r2, [pc, #84]	; (8001188 <MX_UART5_Init+0x5c>)
 8001134:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_UART5_Init+0x58>)
 8001138:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800113c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800113e:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_UART5_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_UART5_Init+0x58>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <MX_UART5_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <MX_UART5_Init+0x58>)
 8001152:	220c      	movs	r2, #12
 8001154:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <MX_UART5_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <MX_UART5_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <MX_UART5_Init+0x58>)
 8001164:	2200      	movs	r2, #0
 8001166:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <MX_UART5_Init+0x58>)
 800116a:	2200      	movs	r2, #0
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	; (8001184 <MX_UART5_Init+0x58>)
 8001170:	f007 fba6 	bl	80088c0 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800117a:	f001 fc07 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2002f4c4 	.word	0x2002f4c4
 8001188:	40005000 	.word	0x40005000

0800118c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001190:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_UART7_Init+0x58>)
 8001192:	4a15      	ldr	r2, [pc, #84]	; (80011e8 <MX_UART7_Init+0x5c>)
 8001194:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <MX_UART7_Init+0x58>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_UART7_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_UART7_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <MX_UART7_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_UART7_Init+0x58>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <MX_UART7_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <MX_UART7_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <MX_UART7_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <MX_UART7_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_UART7_Init+0x58>)
 80011d0:	f007 fb76 	bl	80088c0 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80011da:	f001 fbd7 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20004144 	.word	0x20004144
 80011e8:	40007800 	.word	0x40007800

080011ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_USART1_UART_Init+0x58>)
 80011f2:	4a15      	ldr	r2, [pc, #84]	; (8001248 <MX_USART1_UART_Init+0x5c>)
 80011f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_USART1_UART_Init+0x58>)
 80011f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001206:	2200      	movs	r2, #0
 8001208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART1_UART_Init+0x58>)
 800120c:	2200      	movs	r2, #0
 800120e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001212:	220c      	movs	r2, #12
 8001214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART1_UART_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART1_UART_Init+0x58>)
 800122a:	2200      	movs	r2, #0
 800122c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART1_UART_Init+0x58>)
 8001230:	f007 fb46 	bl	80088c0 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800123a:	f001 fba7 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2002f58c 	.word	0x2002f58c
 8001248:	40011000 	.word	0x40011000

0800124c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001252:	4a15      	ldr	r2, [pc, #84]	; (80012a8 <MX_USART2_UART_Init+0x5c>)
 8001254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001282:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128e:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_USART2_UART_Init+0x58>)
 8001290:	f007 fb16 	bl	80088c0 <HAL_UART_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800129a:	f001 fb77 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2002f85c 	.word	0x2002f85c
 80012a8:	40004400 	.word	0x40004400

080012ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012b0:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_USART3_UART_Init+0x54>)
 80012b2:	4a14      	ldr	r2, [pc, #80]	; (8001304 <MX_USART3_UART_Init+0x58>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_USART3_UART_Init+0x54>)
 80012b8:	4a13      	ldr	r2, [pc, #76]	; (8001308 <MX_USART3_UART_Init+0x5c>)
 80012ba:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012bc:	4b10      	ldr	r3, [pc, #64]	; (8001300 <MX_USART3_UART_Init+0x54>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012c2:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_USART3_UART_Init+0x54>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012c8:	4b0d      	ldr	r3, [pc, #52]	; (8001300 <MX_USART3_UART_Init+0x54>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_USART3_UART_Init+0x54>)
 80012d0:	220c      	movs	r2, #12
 80012d2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_USART3_UART_Init+0x54>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_USART3_UART_Init+0x54>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_USART3_UART_Init+0x54>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_USART3_UART_Init+0x54>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_USART3_UART_Init+0x54>)
 80012ee:	f007 fae7 	bl	80088c0 <HAL_UART_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 80012f8:	f001 fb48 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20004244 	.word	0x20004244
 8001304:	40004800 	.word	0x40004800
 8001308:	001e8480 	.word	0x001e8480

0800130c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001312:	4b1a      	ldr	r3, [pc, #104]	; (800137c <MX_DMA_Init+0x70>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a19      	ldr	r2, [pc, #100]	; (800137c <MX_DMA_Init+0x70>)
 8001318:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b17      	ldr	r3, [pc, #92]	; (800137c <MX_DMA_Init+0x70>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800132a:	4b14      	ldr	r3, [pc, #80]	; (800137c <MX_DMA_Init+0x70>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a13      	ldr	r2, [pc, #76]	; (800137c <MX_DMA_Init+0x70>)
 8001330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <MX_DMA_Init+0x70>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2010      	movs	r0, #16
 8001348:	f002 fe77 	bl	800403a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800134c:	2010      	movs	r0, #16
 800134e:	f002 fe90 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	203a      	movs	r0, #58	; 0x3a
 8001358:	f002 fe6f 	bl	800403a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800135c:	203a      	movs	r0, #58	; 0x3a
 800135e:	f002 fe88 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2100      	movs	r1, #0
 8001366:	203c      	movs	r0, #60	; 0x3c
 8001368:	f002 fe67 	bl	800403a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800136c:	203c      	movs	r0, #60	; 0x3c
 800136e:	f002 fe80 	bl	8004072 <HAL_NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 031c 	add.w	r3, r7, #28
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001396:	4b40      	ldr	r3, [pc, #256]	; (8001498 <MX_GPIO_Init+0x118>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a3f      	ldr	r2, [pc, #252]	; (8001498 <MX_GPIO_Init+0x118>)
 800139c:	f043 0310 	orr.w	r3, r3, #16
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <MX_GPIO_Init+0x118>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0310 	and.w	r3, r3, #16
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <MX_GPIO_Init+0x118>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a39      	ldr	r2, [pc, #228]	; (8001498 <MX_GPIO_Init+0x118>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b37      	ldr	r3, [pc, #220]	; (8001498 <MX_GPIO_Init+0x118>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <MX_GPIO_Init+0x118>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a33      	ldr	r2, [pc, #204]	; (8001498 <MX_GPIO_Init+0x118>)
 80013cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <MX_GPIO_Init+0x118>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <MX_GPIO_Init+0x118>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <MX_GPIO_Init+0x118>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <MX_GPIO_Init+0x118>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <MX_GPIO_Init+0x118>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a27      	ldr	r2, [pc, #156]	; (8001498 <MX_GPIO_Init+0x118>)
 80013fc:	f043 0302 	orr.w	r3, r3, #2
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <MX_GPIO_Init+0x118>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800140e:	4b22      	ldr	r3, [pc, #136]	; (8001498 <MX_GPIO_Init+0x118>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a21      	ldr	r2, [pc, #132]	; (8001498 <MX_GPIO_Init+0x118>)
 8001414:	f043 0308 	orr.w	r3, r3, #8
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <MX_GPIO_Init+0x118>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2108      	movs	r1, #8
 800142a:	481c      	ldr	r0, [pc, #112]	; (800149c <MX_GPIO_Init+0x11c>)
 800142c:	f003 fb7e 	bl	8004b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 8001430:	2200      	movs	r2, #0
 8001432:	f64e 717f 	movw	r1, #61311	; 0xef7f
 8001436:	481a      	ldr	r0, [pc, #104]	; (80014a0 <MX_GPIO_Init+0x120>)
 8001438:	f003 fb78 	bl	8004b2c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SN6505_EN_Pin */
  GPIO_InitStruct.Pin = SN6505_EN_Pin;
 800143c:	2308      	movs	r3, #8
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001440:	2301      	movs	r3, #1
 8001442:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001448:	2300      	movs	r3, #0
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	4619      	mov	r1, r3
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <MX_GPIO_Init+0x11c>)
 8001454:	f003 f9c0 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin 
                           LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin 
                           S1_Pin S2_Pin S3_Pin S4_Pin 
                           S5_Pin S6_Pin */
  GPIO_InitStruct.Pin = LED1_R_Pin|LED1_G_Pin|LED1_B_Pin|SN6505_END11_Pin 
 8001458:	f64e 737f 	movw	r3, #61311	; 0xef7f
 800145c:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin|LED3_Pin|LED4_Pin|Switches_driver_enable_Pin 
                          |S1_Pin|S2_Pin|S3_Pin|S4_Pin 
                          |S5_Pin|S6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	480b      	ldr	r0, [pc, #44]	; (80014a0 <MX_GPIO_Init+0x120>)
 8001472:	f003 f9b1 	bl	80047d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8001476:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4619      	mov	r1, r3
 800148a:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_GPIO_Init+0x11c>)
 800148c:	f003 f9a4 	bl	80047d8 <HAL_GPIO_Init>

}
 8001490:	bf00      	nop
 8001492:	3730      	adds	r7, #48	; 0x30
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40020800 	.word	0x40020800
 80014a0:	40020c00 	.word	0x40020c00

080014a4 <runMeasurementMethod>:

/* USER CODE BEGIN 4 */

void runMeasurementMethod() {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	runMeasurementSequence();
 80014a8:	f000 f8a8 	bl	80015fc <runMeasurementSequence>
	//if measurement method is set, run the polarization sequence
	if ((state.remainingMeasurements > 0) || (state.remainingMeasurements == -1) && ((state.extAdcActiveState == 1) || (state.intAdcActiveState == 1) || (state.compActiveState == 1))) {
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <runMeasurementMethod+0x7c>)
 80014ae:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	dc11      	bgt.n	80014da <runMeasurementMethod+0x36>
 80014b6:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <runMeasurementMethod+0x7c>)
 80014b8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d12b      	bne.n	800151a <runMeasurementMethod+0x76>
 80014c2:	4b17      	ldr	r3, [pc, #92]	; (8001520 <runMeasurementMethod+0x7c>)
 80014c4:	78db      	ldrb	r3, [r3, #3]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d007      	beq.n	80014da <runMeasurementMethod+0x36>
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <runMeasurementMethod+0x7c>)
 80014cc:	791b      	ldrb	r3, [r3, #4]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d003      	beq.n	80014da <runMeasurementMethod+0x36>
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <runMeasurementMethod+0x7c>)
 80014d4:	795b      	ldrb	r3, [r3, #5]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d11f      	bne.n	800151a <runMeasurementMethod+0x76>
		// check, if there isn't new user update before starting measurement
		if(newDataInBuffer()){
 80014da:	f001 fa2f 	bl	800293c <newDataInBuffer>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <runMeasurementMethod+0x44>
			parseText();
 80014e4:	f000 fd3c 	bl	8001f60 <parseText>
		}
		if (stateCanBeUpdated()) {
 80014e8:	f001 f96e 	bl	80027c8 <stateCanBeUpdated>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <runMeasurementMethod+0x52>
			updateState();
 80014f2:	f001 f91f 	bl	8002734 <updateState>
		}
		if (state.extAdcActiveState == 1) {
 80014f6:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <runMeasurementMethod+0x7c>)
 80014f8:	78db      	ldrb	r3, [r3, #3]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <runMeasurementMethod+0x5e>
			measureWithExtADC();
 80014fe:	f000 fa13 	bl	8001928 <measureWithExtADC>
		}
		if (state.intAdcActiveState == 1) {
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <runMeasurementMethod+0x7c>)
 8001504:	791b      	ldrb	r3, [r3, #4]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <runMeasurementMethod+0x6a>
			measureWithIntADC();
 800150a:	f000 fa3d 	bl	8001988 <measureWithIntADC>
		}
		if (state.compActiveState == 1) {
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <runMeasurementMethod+0x7c>)
 8001510:	795b      	ldrb	r3, [r3, #5]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d101      	bne.n	800151a <runMeasurementMethod+0x76>
			measureWithComp();
 8001516:	f000 fa5b 	bl	80019d0 <measureWithComp>
		}
	}
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2002f4a8 	.word	0x2002f4a8

08001524 <runPolarizationSequence>:

void runPolarizationSequence() {
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 8001528:	4b30      	ldr	r3, [pc, #192]	; (80015ec <runPolarizationSequence+0xc8>)
 800152a:	2200      	movs	r2, #0
 800152c:	759a      	strb	r2, [r3, #22]
	remainingTimeToNextMeasurement = state.wholeMeasurementPeriod * 1000; // convert ms to us
 800152e:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <runPolarizationSequence+0xc8>)
 8001530:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001534:	461a      	mov	r2, r3
 8001536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153a:	fb03 f302 	mul.w	r3, r3, r2
 800153e:	461a      	mov	r2, r3
 8001540:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <runPolarizationSequence+0xcc>)
 8001542:	601a      	str	r2, [r3, #0]
	remainingPolarizationTime = state.polarizationPeriod * 1000; // convert ms to us
 8001544:	4b29      	ldr	r3, [pc, #164]	; (80015ec <runPolarizationSequence+0xc8>)
 8001546:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800154a:	461a      	mov	r2, r3
 800154c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001550:	fb03 f302 	mul.w	r3, r3, r2
 8001554:	461a      	mov	r2, r3
 8001556:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <runPolarizationSequence+0xd0>)
 8001558:	601a      	str	r2, [r3, #0]

	// visualise
	set_LED1(1, 1, 1);
 800155a:	2201      	movs	r2, #1
 800155c:	2101      	movs	r1, #1
 800155e:	2001      	movs	r0, #1
 8001560:	f000 f8fe 	bl	8001760 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8001564:	2201      	movs	r2, #1
 8001566:	2102      	movs	r1, #2
 8001568:	4823      	ldr	r0, [pc, #140]	; (80015f8 <runPolarizationSequence+0xd4>)
 800156a:	f003 fadf 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2104      	movs	r1, #4
 8001572:	4821      	ldr	r0, [pc, #132]	; (80015f8 <runPolarizationSequence+0xd4>)
 8001574:	f003 fada 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001578:	2201      	movs	r2, #1
 800157a:	2108      	movs	r1, #8
 800157c:	481e      	ldr	r0, [pc, #120]	; (80015f8 <runPolarizationSequence+0xd4>)
 800157e:	f003 fad5 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2110      	movs	r1, #16
 8001586:	481c      	ldr	r0, [pc, #112]	; (80015f8 <runPolarizationSequence+0xd4>)
 8001588:	f003 fad0 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2120      	movs	r1, #32
 8001590:	4819      	ldr	r0, [pc, #100]	; (80015f8 <runPolarizationSequence+0xd4>)
 8001592:	f003 facb 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	2140      	movs	r1, #64	; 0x40
 800159a:	4817      	ldr	r0, [pc, #92]	; (80015f8 <runPolarizationSequence+0xd4>)
 800159c:	f003 fac6 	bl	8004b2c <HAL_GPIO_WritePin>
	delay_ms(5);
 80015a0:	2005      	movs	r0, #5
 80015a2:	f000 f9a9 	bl	80018f8 <delay_ms>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 80015a6:	2201      	movs	r2, #1
 80015a8:	2102      	movs	r1, #2
 80015aa:	4813      	ldr	r0, [pc, #76]	; (80015f8 <runPolarizationSequence+0xd4>)
 80015ac:	f003 fabe 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2104      	movs	r1, #4
 80015b4:	4810      	ldr	r0, [pc, #64]	; (80015f8 <runPolarizationSequence+0xd4>)
 80015b6:	f003 fab9 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2108      	movs	r1, #8
 80015be:	480e      	ldr	r0, [pc, #56]	; (80015f8 <runPolarizationSequence+0xd4>)
 80015c0:	f003 fab4 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2110      	movs	r1, #16
 80015c8:	480b      	ldr	r0, [pc, #44]	; (80015f8 <runPolarizationSequence+0xd4>)
 80015ca:	f003 faaf 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2120      	movs	r1, #32
 80015d2:	4809      	ldr	r0, [pc, #36]	; (80015f8 <runPolarizationSequence+0xd4>)
 80015d4:	f003 faaa 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80015d8:	2201      	movs	r2, #1
 80015da:	2140      	movs	r1, #64	; 0x40
 80015dc:	4806      	ldr	r0, [pc, #24]	; (80015f8 <runPolarizationSequence+0xd4>)
 80015de:	f003 faa5 	bl	8004b2c <HAL_GPIO_WritePin>
	state.preparedToRunMeasurementPhase = 1;
 80015e2:	4b02      	ldr	r3, [pc, #8]	; (80015ec <runPolarizationSequence+0xc8>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	75da      	strb	r2, [r3, #23]

}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2002f4a8 	.word	0x2002f4a8
 80015f0:	20004314 	.word	0x20004314
 80015f4:	20000204 	.word	0x20000204
 80015f8:	40020c00 	.word	0x40020c00

080015fc <runMeasurementSequence>:

void runMeasurementSequence() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
	state.preparedToRunMeasurementPhase = 0;
 8001600:	4b55      	ldr	r3, [pc, #340]	; (8001758 <runMeasurementSequence+0x15c>)
 8001602:	2200      	movs	r2, #0
 8001604:	75da      	strb	r2, [r3, #23]
	set_LED1(0, 1, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2101      	movs	r1, #1
 800160a:	2000      	movs	r0, #0
 800160c:	f000 f8a8 	bl	8001760 <set_LED1>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001610:	2200      	movs	r2, #0
 8001612:	2102      	movs	r1, #2
 8001614:	4851      	ldr	r0, [pc, #324]	; (800175c <runMeasurementSequence+0x160>)
 8001616:	f003 fa89 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2104      	movs	r1, #4
 800161e:	484f      	ldr	r0, [pc, #316]	; (800175c <runMeasurementSequence+0x160>)
 8001620:	f003 fa84 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001624:	2201      	movs	r2, #1
 8001626:	2108      	movs	r1, #8
 8001628:	484c      	ldr	r0, [pc, #304]	; (800175c <runMeasurementSequence+0x160>)
 800162a:	f003 fa7f 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2110      	movs	r1, #16
 8001632:	484a      	ldr	r0, [pc, #296]	; (800175c <runMeasurementSequence+0x160>)
 8001634:	f003 fa7a 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8001638:	2200      	movs	r2, #0
 800163a:	2120      	movs	r1, #32
 800163c:	4847      	ldr	r0, [pc, #284]	; (800175c <runMeasurementSequence+0x160>)
 800163e:	f003 fa75 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	2140      	movs	r1, #64	; 0x40
 8001646:	4845      	ldr	r0, [pc, #276]	; (800175c <runMeasurementSequence+0x160>)
 8001648:	f003 fa70 	bl	8004b2c <HAL_GPIO_WritePin>
	delay_us(50);
 800164c:	2032      	movs	r0, #50	; 0x32
 800164e:	f000 f93f 	bl	80018d0 <delay_us>

	//run sequnece T5 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2102      	movs	r1, #2
 8001656:	4841      	ldr	r0, [pc, #260]	; (800175c <runMeasurementSequence+0x160>)
 8001658:	f003 fa68 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800165c:	2200      	movs	r2, #0
 800165e:	2104      	movs	r1, #4
 8001660:	483e      	ldr	r0, [pc, #248]	; (800175c <runMeasurementSequence+0x160>)
 8001662:	f003 fa63 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001666:	2201      	movs	r2, #1
 8001668:	2108      	movs	r1, #8
 800166a:	483c      	ldr	r0, [pc, #240]	; (800175c <runMeasurementSequence+0x160>)
 800166c:	f003 fa5e 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2110      	movs	r1, #16
 8001674:	4839      	ldr	r0, [pc, #228]	; (800175c <runMeasurementSequence+0x160>)
 8001676:	f003 fa59 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 800167a:	2201      	movs	r2, #1
 800167c:	2120      	movs	r1, #32
 800167e:	4837      	ldr	r0, [pc, #220]	; (800175c <runMeasurementSequence+0x160>)
 8001680:	f003 fa54 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8001684:	2201      	movs	r2, #1
 8001686:	2140      	movs	r1, #64	; 0x40
 8001688:	4834      	ldr	r0, [pc, #208]	; (800175c <runMeasurementSequence+0x160>)
 800168a:	f003 fa4f 	bl	8004b2c <HAL_GPIO_WritePin>
	delay_ms(5);
 800168e:	2005      	movs	r0, #5
 8001690:	f000 f932 	bl	80018f8 <delay_ms>

	//run sequnece T6 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2102      	movs	r1, #2
 8001698:	4830      	ldr	r0, [pc, #192]	; (800175c <runMeasurementSequence+0x160>)
 800169a:	f003 fa47 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2104      	movs	r1, #4
 80016a2:	482e      	ldr	r0, [pc, #184]	; (800175c <runMeasurementSequence+0x160>)
 80016a4:	f003 fa42 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80016a8:	2201      	movs	r2, #1
 80016aa:	2108      	movs	r1, #8
 80016ac:	482b      	ldr	r0, [pc, #172]	; (800175c <runMeasurementSequence+0x160>)
 80016ae:	f003 fa3d 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2110      	movs	r1, #16
 80016b6:	4829      	ldr	r0, [pc, #164]	; (800175c <runMeasurementSequence+0x160>)
 80016b8:	f003 fa38 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80016bc:	2201      	movs	r2, #1
 80016be:	2120      	movs	r1, #32
 80016c0:	4826      	ldr	r0, [pc, #152]	; (800175c <runMeasurementSequence+0x160>)
 80016c2:	f003 fa33 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2140      	movs	r1, #64	; 0x40
 80016ca:	4824      	ldr	r0, [pc, #144]	; (800175c <runMeasurementSequence+0x160>)
 80016cc:	f003 fa2e 	bl	8004b2c <HAL_GPIO_WritePin>
	delay_ms(5);
 80016d0:	2005      	movs	r0, #5
 80016d2:	f000 f911 	bl	80018f8 <delay_ms>
	//run sequnece T7 - TurnOn measure T
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2102      	movs	r1, #2
 80016da:	4820      	ldr	r0, [pc, #128]	; (800175c <runMeasurementSequence+0x160>)
 80016dc:	f003 fa26 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 80016e0:	2201      	movs	r2, #1
 80016e2:	2104      	movs	r1, #4
 80016e4:	481d      	ldr	r0, [pc, #116]	; (800175c <runMeasurementSequence+0x160>)
 80016e6:	f003 fa21 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2108      	movs	r1, #8
 80016ee:	481b      	ldr	r0, [pc, #108]	; (800175c <runMeasurementSequence+0x160>)
 80016f0:	f003 fa1c 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80016f4:	2200      	movs	r2, #0
 80016f6:	2110      	movs	r1, #16
 80016f8:	4818      	ldr	r0, [pc, #96]	; (800175c <runMeasurementSequence+0x160>)
 80016fa:	f003 fa17 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80016fe:	2201      	movs	r2, #1
 8001700:	2120      	movs	r1, #32
 8001702:	4816      	ldr	r0, [pc, #88]	; (800175c <runMeasurementSequence+0x160>)
 8001704:	f003 fa12 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	2140      	movs	r1, #64	; 0x40
 800170c:	4813      	ldr	r0, [pc, #76]	; (800175c <runMeasurementSequence+0x160>)
 800170e:	f003 fa0d 	bl	8004b2c <HAL_GPIO_WritePin>
	delay_ms(3);
 8001712:	2003      	movs	r0, #3
 8001714:	f000 f8f0 	bl	80018f8 <delay_ms>
	//run sequnece T8 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001718:	2200      	movs	r2, #0
 800171a:	2102      	movs	r1, #2
 800171c:	480f      	ldr	r0, [pc, #60]	; (800175c <runMeasurementSequence+0x160>)
 800171e:	f003 fa05 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 8001722:	2201      	movs	r2, #1
 8001724:	2104      	movs	r1, #4
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <runMeasurementSequence+0x160>)
 8001728:	f003 fa00 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800172c:	2200      	movs	r2, #0
 800172e:	2108      	movs	r1, #8
 8001730:	480a      	ldr	r0, [pc, #40]	; (800175c <runMeasurementSequence+0x160>)
 8001732:	f003 f9fb 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001736:	2200      	movs	r2, #0
 8001738:	2110      	movs	r1, #16
 800173a:	4808      	ldr	r0, [pc, #32]	; (800175c <runMeasurementSequence+0x160>)
 800173c:	f003 f9f6 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8001740:	2201      	movs	r2, #1
 8001742:	2120      	movs	r1, #32
 8001744:	4805      	ldr	r0, [pc, #20]	; (800175c <runMeasurementSequence+0x160>)
 8001746:	f003 f9f1 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2140      	movs	r1, #64	; 0x40
 800174e:	4803      	ldr	r0, [pc, #12]	; (800175c <runMeasurementSequence+0x160>)
 8001750:	f003 f9ec 	bl	8004b2c <HAL_GPIO_WritePin>
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2002f4a8 	.word	0x2002f4a8
 800175c:	40020c00 	.word	0x40020c00

08001760 <set_LED1>:

void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
 800176a:	460b      	mov	r3, r1
 800176c:	71bb      	strb	r3, [r7, #6]
 800176e:	4613      	mov	r3, r2
 8001770:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, G);
 8001772:	79bb      	ldrb	r3, [r7, #6]
 8001774:	461a      	mov	r2, r3
 8001776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800177a:	480a      	ldr	r0, [pc, #40]	; (80017a4 <set_LED1+0x44>)
 800177c:	f003 f9d6 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, B);
 8001780:	797b      	ldrb	r3, [r7, #5]
 8001782:	461a      	mov	r2, r3
 8001784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001788:	4806      	ldr	r0, [pc, #24]	; (80017a4 <set_LED1+0x44>)
 800178a:	f003 f9cf 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, R);
 800178e:	79fb      	ldrb	r3, [r7, #7]
 8001790:	461a      	mov	r2, r3
 8001792:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001796:	4803      	ldr	r0, [pc, #12]	; (80017a4 <set_LED1+0x44>)
 8001798:	f003 f9c8 	bl	8004b2c <HAL_GPIO_WritePin>
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40020c00 	.word	0x40020c00

080017a8 <set_LED2>:
void set_LED2(uint8_t val) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val);
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	461a      	mov	r2, r3
 80017b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017ba:	4803      	ldr	r0, [pc, #12]	; (80017c8 <set_LED2+0x20>)
 80017bc:	f003 f9b6 	bl	8004b2c <HAL_GPIO_WritePin>
}
 80017c0:	bf00      	nop
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40020c00 	.word	0x40020c00

080017cc <set_LED3>:

void set_LED3(uint8_t val) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, val);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	461a      	mov	r2, r3
 80017da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017de:	4803      	ldr	r0, [pc, #12]	; (80017ec <set_LED3+0x20>)
 80017e0:	f003 f9a4 	bl	8004b2c <HAL_GPIO_WritePin>
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40020c00 	.word	0x40020c00

080017f0 <set_LED4>:

void set_LED4(uint8_t val) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, val);
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	461a      	mov	r2, r3
 80017fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001802:	4803      	ldr	r0, [pc, #12]	; (8001810 <set_LED4+0x20>)
 8001804:	f003 f992 	bl	8004b2c <HAL_GPIO_WritePin>
}
 8001808:	bf00      	nop
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40020c00 	.word	0x40020c00

08001814 <switchingCircuitIdle>:

void switchingCircuitIdle() {
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 8001818:	2200      	movs	r2, #0
 800181a:	2101      	movs	r1, #1
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <switchingCircuitIdle+0x50>)
 800181e:	f003 f985 	bl	8004b2c <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8001822:	2200      	movs	r2, #0
 8001824:	2102      	movs	r1, #2
 8001826:	480f      	ldr	r0, [pc, #60]	; (8001864 <switchingCircuitIdle+0x50>)
 8001828:	f003 f980 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800182c:	2200      	movs	r2, #0
 800182e:	2104      	movs	r1, #4
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <switchingCircuitIdle+0x50>)
 8001832:	f003 f97b 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8001836:	2201      	movs	r2, #1
 8001838:	2108      	movs	r1, #8
 800183a:	480a      	ldr	r0, [pc, #40]	; (8001864 <switchingCircuitIdle+0x50>)
 800183c:	f003 f976 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8001840:	2200      	movs	r2, #0
 8001842:	2110      	movs	r1, #16
 8001844:	4807      	ldr	r0, [pc, #28]	; (8001864 <switchingCircuitIdle+0x50>)
 8001846:	f003 f971 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	2120      	movs	r1, #32
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <switchingCircuitIdle+0x50>)
 8001850:	f003 f96c 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	4802      	ldr	r0, [pc, #8]	; (8001864 <switchingCircuitIdle+0x50>)
 800185a:	f003 f967 	bl	8004b2c <HAL_GPIO_WritePin>
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40020c00 	.word	0x40020c00

08001868 <HAL_TIM_PeriodElapsedCallback>:
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d11d      	bne.n	80018b6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		if (timeIndex > 0) {
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d004      	beq.n	800188c <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -= 50;
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	3b32      	subs	r3, #50	; 0x32
 8001888:	4a0e      	ldr	r2, [pc, #56]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800188a:	6013      	str	r3, [r2, #0]
		}
		if (remainingTimeToNextMeasurement > 0) {
 800188c:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d005      	beq.n	80018a0 <HAL_TIM_PeriodElapsedCallback+0x38>
			remainingTimeToNextMeasurement -= 50;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3b32      	subs	r3, #50	; 0x32
 800189a:	4a0b      	ldr	r2, [pc, #44]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e001      	b.n	80018a4 <HAL_TIM_PeriodElapsedCallback+0x3c>
		}
		else{
			prepareForPolarizationPhaseIfPossible();
 80018a0:	f000 f9c8 	bl	8001c34 <prepareForPolarizationPhaseIfPossible>
		}
		if (remainingPolarizationTime > 0) {
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <HAL_TIM_PeriodElapsedCallback+0x4e>
			remainingPolarizationTime -= 50;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3b32      	subs	r3, #50	; 0x32
 80018b2:	4a06      	ldr	r2, [pc, #24]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80018b4:	6013      	str	r3, [r2, #0]
		}
	}
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40000c00 	.word	0x40000c00
 80018c4:	20000200 	.word	0x20000200
 80018c8:	20004314 	.word	0x20004314
 80018cc:	20000204 	.word	0x20000204

080018d0 <delay_us>:

void delay_us(uint32_t delay_us) {
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <delay_us+0x24>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 80018de:	bf00      	nop
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <delay_us+0x24>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1fb      	bne.n	80018e0 <delay_us+0x10>
		;
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	20000200 	.word	0x20000200

080018f8 <delay_ms>:

void delay_ms(uint32_t delay_us) {
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us * 1000;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001906:	fb02 f303 	mul.w	r3, r2, r3
 800190a:	4a06      	ldr	r2, [pc, #24]	; (8001924 <delay_ms+0x2c>)
 800190c:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0)
 800190e:	bf00      	nop
 8001910:	4b04      	ldr	r3, [pc, #16]	; (8001924 <delay_ms+0x2c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1fb      	bne.n	8001910 <delay_ms+0x18>
		;
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	20000200 	.word	0x20000200

08001928 <measureWithExtADC>:

void measureWithExtADC() {
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2101      	movs	r1, #1
 8001930:	2000      	movs	r0, #0
 8001932:	f7ff ff15 	bl	8001760 <set_LED1>
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_1.uint8, samplesPerPeriod);
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <measureWithExtADC+0x48>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	b29b      	uxth	r3, r3
 800193c:	461a      	mov	r2, r3
 800193e:	490d      	ldr	r1, [pc, #52]	; (8001974 <measureWithExtADC+0x4c>)
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <measureWithExtADC+0x50>)
 8001942:	f004 fbcd 	bl	80060e0 <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 8001946:	2100      	movs	r1, #0
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <measureWithExtADC+0x54>)
 800194a:	f005 f981 	bl	8006c50 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 800194e:	2104      	movs	r1, #4
 8001950:	480a      	ldr	r0, [pc, #40]	; (800197c <measureWithExtADC+0x54>)
 8001952:	f005 f97d 	bl	8006c50 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 8001956:	2100      	movs	r1, #0
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <measureWithExtADC+0x58>)
 800195a:	f005 f979 	bl	8006c50 <HAL_TIM_PWM_Start_IT>
	set_LED2(1);
 800195e:	2001      	movs	r0, #1
 8001960:	f7ff ff22 	bl	80017a8 <set_LED2>
	state.extAdcMeasuring = 1;
 8001964:	4b07      	ldr	r3, [pc, #28]	; (8001984 <measureWithExtADC+0x5c>)
 8001966:	2201      	movs	r2, #1
 8001968:	719a      	strb	r2, [r3, #6]
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000000 	.word	0x20000000
 8001974:	200451c4 	.word	0x200451c4
 8001978:	2002f7b8 	.word	0x2002f7b8
 800197c:	2002f778 	.word	0x2002f778
 8001980:	200041c4 	.word	0x200041c4
 8001984:	2002f4a8 	.word	0x2002f4a8

08001988 <measureWithIntADC>:

void measureWithIntADC() {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2101      	movs	r1, #1
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff fee5 	bl	8001760 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_1.uint16, samplesPerPeriod);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <measureWithIntADC+0x34>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	4908      	ldr	r1, [pc, #32]	; (80019c0 <measureWithIntADC+0x38>)
 800199e:	4809      	ldr	r0, [pc, #36]	; (80019c4 <measureWithIntADC+0x3c>)
 80019a0:	f001 fea8 	bl	80036f4 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 80019a4:	4808      	ldr	r0, [pc, #32]	; (80019c8 <measureWithIntADC+0x40>)
 80019a6:	f005 f8d3 	bl	8006b50 <HAL_TIM_Base_Start_IT>
	set_LED3(1);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f7ff ff0e 	bl	80017cc <set_LED3>
	state.intAdcMeasuring = 1;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <measureWithIntADC+0x44>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	71da      	strb	r2, [r3, #7]
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000000 	.word	0x20000000
 80019c0:	2002f8dc 	.word	0x2002f8dc
 80019c4:	2002f544 	.word	0x2002f544
 80019c8:	2002f734 	.word	0x2002f734
 80019cc:	2002f4a8 	.word	0x2002f4a8

080019d0 <measureWithComp>:

void measureWithComp() {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2101      	movs	r1, #1
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff fec1 	bl	8001760 <set_LED1>
	// run the timer 4001 - 2 seconds for 2 kHz
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, buffer_comp, 4001);
 80019de:	f640 73a1 	movw	r3, #4001	; 0xfa1
 80019e2:	4a06      	ldr	r2, [pc, #24]	; (80019fc <measureWithComp+0x2c>)
 80019e4:	2100      	movs	r1, #0
 80019e6:	4806      	ldr	r0, [pc, #24]	; (8001a00 <measureWithComp+0x30>)
 80019e8:	f005 fa82 	bl	8006ef0 <HAL_TIM_IC_Start_DMA>
	set_LED4(1);
 80019ec:	2001      	movs	r0, #1
 80019ee:	f7ff feff 	bl	80017f0 <set_LED4>
	state.compMeasuring = 1;
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <measureWithComp+0x34>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	721a      	strb	r2, [r3, #8]
}
 80019f8:	bf00      	nop
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000214 	.word	0x20000214
 8001a00:	2002f81c 	.word	0x2002f81c
 8001a04:	2002f4a8 	.word	0x2002f4a8

08001a08 <measurementWithExtAdcDone>:

void measurementWithExtAdcDone() {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0

	//stop DMA
	SPI1->CR2 &= ~SPI_CR2_RXDMAEN;
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <measurementWithExtAdcDone+0x94>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4a22      	ldr	r2, [pc, #136]	; (8001a9c <measurementWithExtAdcDone+0x94>)
 8001a12:	f023 0301 	bic.w	r3, r3, #1
 8001a16:	6053      	str	r3, [r2, #4]

	filledBuffersExtADC++;
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <measurementWithExtAdcDone+0x98>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <measurementWithExtAdcDone+0x98>)
 8001a22:	701a      	strb	r2, [r3, #0]
	//first buffer is filled
	if (filledBuffersExtADC == 1) {
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <measurementWithExtAdcDone+0x98>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d108      	bne.n	8001a3e <measurementWithExtAdcDone+0x36>
		//start DMA again with second buffer
		HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_2.uint8, samplesPerPeriod);
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <measurementWithExtAdcDone+0x9c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	461a      	mov	r2, r3
 8001a34:	491c      	ldr	r1, [pc, #112]	; (8001aa8 <measurementWithExtAdcDone+0xa0>)
 8001a36:	481d      	ldr	r0, [pc, #116]	; (8001aac <measurementWithExtAdcDone+0xa4>)
 8001a38:	f004 fb52 	bl	80060e0 <HAL_SPI_Receive_DMA>
			state.extAdcSetState = 0;
		} else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 8001a3c:	e02b      	b.n	8001a96 <measurementWithExtAdcDone+0x8e>
	else if (filledBuffersExtADC == 2) {
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <measurementWithExtAdcDone+0x98>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d127      	bne.n	8001a96 <measurementWithExtAdcDone+0x8e>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001a46:	2100      	movs	r1, #0
 8001a48:	4819      	ldr	r0, [pc, #100]	; (8001ab0 <measurementWithExtAdcDone+0xa8>)
 8001a4a:	f005 f98b 	bl	8006d64 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 8001a4e:	2104      	movs	r1, #4
 8001a50:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <measurementWithExtAdcDone+0xa8>)
 8001a52:	f005 f987 	bl	8006d64 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8001a56:	2100      	movs	r1, #0
 8001a58:	4816      	ldr	r0, [pc, #88]	; (8001ab4 <measurementWithExtAdcDone+0xac>)
 8001a5a:	f005 f983 	bl	8006d64 <HAL_TIM_PWM_Stop_IT>
		set_LED2(0);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fea2 	bl	80017a8 <set_LED2>
		state.extAdcReadyToSend = 1;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <measurementWithExtAdcDone+0xb0>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
		state.extAdcMeasuring = 0;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <measurementWithExtAdcDone+0xb0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	719a      	strb	r2, [r3, #6]
		filledBuffersExtADC = 0;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <measurementWithExtAdcDone+0x98>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
		goToIdleAfterMeasurement();
 8001a76:	f000 f899 	bl	8001bac <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 8001a7a:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <measurementWithExtAdcDone+0xb0>)
 8001a7c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d106      	bne.n	8001a92 <measurementWithExtAdcDone+0x8a>
			state.extAdcActiveState = 0;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <measurementWithExtAdcDone+0xb0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	70da      	strb	r2, [r3, #3]
			state.extAdcSetState = 0;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <measurementWithExtAdcDone+0xb0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	725a      	strb	r2, [r3, #9]
}
 8001a90:	e001      	b.n	8001a96 <measurementWithExtAdcDone+0x8e>
			prepareForPolarizationPhaseIfPossible();
 8001a92:	f000 f8cf 	bl	8001c34 <prepareForPolarizationPhaseIfPossible>
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40013000 	.word	0x40013000
 8001aa0:	200001fc 	.word	0x200001fc
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	20019ba0 	.word	0x20019ba0
 8001aac:	2002f7b8 	.word	0x2002f7b8
 8001ab0:	2002f778 	.word	0x2002f778
 8001ab4:	200041c4 	.word	0x200041c4
 8001ab8:	2002f4a8 	.word	0x2002f4a8

08001abc <measurementWithIntAdcDone>:

void measurementWithIntAdcDone() {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	//stop the ADC when in interrupt
	//if function HAL_ADC_Stop_DMA(&hadc1) would be called, it wouldn't be possible to Start DMA again.
	ADC1->CR2 &= ~ADC_CR2_DMA;
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	; (8001b3c <measurementWithIntAdcDone+0x80>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	; (8001b3c <measurementWithIntAdcDone+0x80>)
 8001ac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001aca:	6093      	str	r3, [r2, #8]

	filledBuffersIntADC++;
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <measurementWithIntAdcDone+0x84>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	; (8001b40 <measurementWithIntAdcDone+0x84>)
 8001ad6:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffersIntADC == 1) {
 8001ad8:	4b19      	ldr	r3, [pc, #100]	; (8001b40 <measurementWithIntAdcDone+0x84>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d107      	bne.n	8001af0 <measurementWithIntAdcDone+0x34>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_2.uint16, samplesPerPeriod);
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <measurementWithIntAdcDone+0x88>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	4918      	ldr	r1, [pc, #96]	; (8001b48 <measurementWithIntAdcDone+0x8c>)
 8001ae8:	4818      	ldr	r0, [pc, #96]	; (8001b4c <measurementWithIntAdcDone+0x90>)
 8001aea:	f001 fe03 	bl	80036f4 <HAL_ADC_Start_DMA>
		// if there are remaning
		else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 8001aee:	e022      	b.n	8001b36 <measurementWithIntAdcDone+0x7a>
	else if (filledBuffersIntADC == 2) {
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <measurementWithIntAdcDone+0x84>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d11e      	bne.n	8001b36 <measurementWithIntAdcDone+0x7a>
		HAL_TIM_Base_Stop_IT(&htim6);
 8001af8:	4815      	ldr	r0, [pc, #84]	; (8001b50 <measurementWithIntAdcDone+0x94>)
 8001afa:	f005 f853 	bl	8006ba4 <HAL_TIM_Base_Stop_IT>
		set_LED3(0);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff fe64 	bl	80017cc <set_LED3>
		filledBuffersIntADC = 0;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <measurementWithIntAdcDone+0x84>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
		state.intAdcReadyToSend = 1;
 8001b0a:	4b12      	ldr	r3, [pc, #72]	; (8001b54 <measurementWithIntAdcDone+0x98>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	705a      	strb	r2, [r3, #1]
		state.intAdcMeasuring = 0;
 8001b10:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <measurementWithIntAdcDone+0x98>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	71da      	strb	r2, [r3, #7]
		goToIdleAfterMeasurement();
 8001b16:	f000 f849 	bl	8001bac <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <measurementWithIntAdcDone+0x98>)
 8001b1c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <measurementWithIntAdcDone+0x76>
			state.intAdcActiveState = 0;
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <measurementWithIntAdcDone+0x98>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	711a      	strb	r2, [r3, #4]
			state.intAdcSetState = 0;
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	; (8001b54 <measurementWithIntAdcDone+0x98>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	729a      	strb	r2, [r3, #10]
}
 8001b30:	e001      	b.n	8001b36 <measurementWithIntAdcDone+0x7a>
			prepareForPolarizationPhaseIfPossible();
 8001b32:	f000 f87f 	bl	8001c34 <prepareForPolarizationPhaseIfPossible>
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40012000 	.word	0x40012000
 8001b40:	200001fd 	.word	0x200001fd
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20004318 	.word	0x20004318
 8001b4c:	2002f544 	.word	0x2002f544
 8001b50:	2002f734 	.word	0x2002f734
 8001b54:	2002f4a8 	.word	0x2002f4a8

08001b58 <measurementWithCompDone>:

void measurementWithCompDone(TIM_HandleTypeDef *htim) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8001b60:	2100      	movs	r1, #0
 8001b62:	4810      	ldr	r0, [pc, #64]	; (8001ba4 <measurementWithCompDone+0x4c>)
 8001b64:	f005 fac0 	bl	80070e8 <HAL_TIM_IC_Stop_DMA>
	set_LED4(0);
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff fe41 	bl	80017f0 <set_LED4>
	state.compReadyToSend = 1;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <measurementWithCompDone+0x50>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	709a      	strb	r2, [r3, #2]
	state.compMeasuring = 0;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <measurementWithCompDone+0x50>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	721a      	strb	r2, [r3, #8]

	goToIdleAfterMeasurement();
 8001b7a:	f000 f817 	bl	8001bac <goToIdleAfterMeasurement>

	//if freq should be measured only once, after the measurement, go to idle state
	if (state.remainingMeasurements == 0) {
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <measurementWithCompDone+0x50>)
 8001b80:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d106      	bne.n	8001b96 <measurementWithCompDone+0x3e>
		state.compActiveState = 0;
 8001b88:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <measurementWithCompDone+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	715a      	strb	r2, [r3, #5]
		state.compSetState = 0;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <measurementWithCompDone+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	72da      	strb	r2, [r3, #11]
	} else {
		prepareForPolarizationPhaseIfPossible();
	}
}
 8001b94:	e001      	b.n	8001b9a <measurementWithCompDone+0x42>
		prepareForPolarizationPhaseIfPossible();
 8001b96:	f000 f84d 	bl	8001c34 <prepareForPolarizationPhaseIfPossible>
}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	2002f81c 	.word	0x2002f81c
 8001ba8:	2002f4a8 	.word	0x2002f4a8

08001bac <goToIdleAfterMeasurement>:

void goToIdleAfterMeasurement() {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	//only if all measurements were done
	if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001bb0:	4b1f      	ldr	r3, [pc, #124]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bb2:	799b      	ldrb	r3, [r3, #6]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d138      	bne.n	8001c2a <goToIdleAfterMeasurement+0x7e>
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bba:	79db      	ldrb	r3, [r3, #7]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d134      	bne.n	8001c2a <goToIdleAfterMeasurement+0x7e>
 8001bc0:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bc2:	7a1b      	ldrb	r3, [r3, #8]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d130      	bne.n	8001c2a <goToIdleAfterMeasurement+0x7e>
		switchingCircuitIdle();
 8001bc8:	f7ff fe24 	bl	8001814 <switchingCircuitIdle>
		set_LED1(0, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff fdc5 	bl	8001760 <set_LED1>
		state.index++;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bde:	6193      	str	r3, [r2, #24]
		// -1 indicates infinity measurements
		if (canDecreaseRemainingMeasurements()) {
 8001be0:	f000 fe8e 	bl	8002900 <canDecreaseRemainingMeasurements>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d01f      	beq.n	8001c2a <goToIdleAfterMeasurement+0x7e>
			state.remainingMeasurements--;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bec:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	b21a      	sxth	r2, r3
 8001bf8:	4b0d      	ldr	r3, [pc, #52]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bfa:	819a      	strh	r2, [r3, #12]
			//if this was the last measurement - set all states to 0
			if (state.remainingMeasurements == 0) {
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001bfe:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d111      	bne.n	8001c2a <goToIdleAfterMeasurement+0x7e>
				state.extAdcActiveState = 0;
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	70da      	strb	r2, [r3, #3]
				state.extAdcSetState = 0;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	725a      	strb	r2, [r3, #9]
				state.intAdcActiveState = 0;
 8001c12:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	711a      	strb	r2, [r3, #4]
				state.intAdcSetState = 0;
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	729a      	strb	r2, [r3, #10]
				state.compActiveState = 0;
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	715a      	strb	r2, [r3, #5]
				state.compSetState = 0;
 8001c24:	4b02      	ldr	r3, [pc, #8]	; (8001c30 <goToIdleAfterMeasurement+0x84>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	72da      	strb	r2, [r3, #11]
			}
		}
	}
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2002f4a8 	.word	0x2002f4a8

08001c34 <prepareForPolarizationPhaseIfPossible>:

void prepareForPolarizationPhaseIfPossible() {
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
	if ((state.remainingMeasurements != 0) && (state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <prepareForPolarizationPhaseIfPossible+0x38>)
 8001c3a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00e      	beq.n	8001c60 <prepareForPolarizationPhaseIfPossible+0x2c>
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <prepareForPolarizationPhaseIfPossible+0x38>)
 8001c44:	799b      	ldrb	r3, [r3, #6]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10a      	bne.n	8001c60 <prepareForPolarizationPhaseIfPossible+0x2c>
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <prepareForPolarizationPhaseIfPossible+0x38>)
 8001c4c:	79db      	ldrb	r3, [r3, #7]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <prepareForPolarizationPhaseIfPossible+0x2c>
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <prepareForPolarizationPhaseIfPossible+0x38>)
 8001c54:	7a1b      	ldrb	r3, [r3, #8]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d102      	bne.n	8001c60 <prepareForPolarizationPhaseIfPossible+0x2c>
		state.preparedToRunPolarizationPhase = 1;
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <prepareForPolarizationPhaseIfPossible+0x38>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	759a      	strb	r2, [r3, #22]
	}
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	2002f4a8 	.word	0x2002f4a8

08001c70 <setStateToDefault>:

void setStateToDefault(){
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
	state.extAdcReadyToSend = 0;
 8001c74:	4b23      	ldr	r3, [pc, #140]	; (8001d04 <setStateToDefault+0x94>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]
	state.intAdcReadyToSend = 0;
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <setStateToDefault+0x94>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	705a      	strb	r2, [r3, #1]
	state.compReadyToSend = 0;
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <setStateToDefault+0x94>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	709a      	strb	r2, [r3, #2]

	state.extAdcActiveState = 0;
 8001c86:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <setStateToDefault+0x94>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	70da      	strb	r2, [r3, #3]
	state.intAdcActiveState = 0;
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <setStateToDefault+0x94>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	711a      	strb	r2, [r3, #4]
	state.compActiveState = 1;
 8001c92:	4b1c      	ldr	r3, [pc, #112]	; (8001d04 <setStateToDefault+0x94>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	715a      	strb	r2, [r3, #5]

	state.extAdcMeasuring = 0;
 8001c98:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <setStateToDefault+0x94>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	719a      	strb	r2, [r3, #6]
	state.intAdcMeasuring = 0;
 8001c9e:	4b19      	ldr	r3, [pc, #100]	; (8001d04 <setStateToDefault+0x94>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	71da      	strb	r2, [r3, #7]
	state.compMeasuring = 0;
 8001ca4:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <setStateToDefault+0x94>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	721a      	strb	r2, [r3, #8]

	state.extAdcSetState = 0;
 8001caa:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <setStateToDefault+0x94>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	725a      	strb	r2, [r3, #9]
	state.intAdcSetState = 0;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <setStateToDefault+0x94>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	729a      	strb	r2, [r3, #10]
	state.compSetState = 1;
 8001cb6:	4b13      	ldr	r3, [pc, #76]	; (8001d04 <setStateToDefault+0x94>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	72da      	strb	r2, [r3, #11]

	state.remainingMeasurements = -1;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <setStateToDefault+0x94>)
 8001cbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cc2:	819a      	strh	r2, [r3, #12]
	state.setMeasurements = -1;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <setStateToDefault+0x94>)
 8001cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cca:	81da      	strh	r2, [r3, #14]
	state.wholeMeasurementPeriod = 5000; 	//in ms -> 5 sec
 8001ccc:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <setStateToDefault+0x94>)
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	821a      	strh	r2, [r3, #16]
	state.polarizationPeriod = 3000; 		//in ms -> 3 sec
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	; (8001d04 <setStateToDefault+0x94>)
 8001cd6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cda:	825a      	strh	r2, [r3, #18]

	state.newDataInBuffer = 0;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <setStateToDefault+0x94>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	751a      	strb	r2, [r3, #20]
	state.measureTechniqueUpdated = 0;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <setStateToDefault+0x94>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	755a      	strb	r2, [r3, #21]
	state.preparedToRunPolarizationPhase = 1;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <setStateToDefault+0x94>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	759a      	strb	r2, [r3, #22]
	state.preparedToRunMeasurementPhase = 0;
 8001cee:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <setStateToDefault+0x94>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	75da      	strb	r2, [r3, #23]
	state.index = 0;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <setStateToDefault+0x94>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
	
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	2002f4a8 	.word	0x2002f4a8

08001d08 <setStateToMeasureOnlyNoPolarization>:


void setStateToMeasureOnlyNoPolarization(){
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
	state.extAdcReadyToSend = 0;
 8001d0c:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
	state.intAdcReadyToSend = 0;
 8001d12:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	705a      	strb	r2, [r3, #1]
	state.compReadyToSend = 0;
 8001d18:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	709a      	strb	r2, [r3, #2]

	state.extAdcActiveState = 1;
 8001d1e:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	70da      	strb	r2, [r3, #3]
	state.intAdcActiveState = 0;
 8001d24:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	711a      	strb	r2, [r3, #4]
	state.compActiveState = 0;
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	715a      	strb	r2, [r3, #5]

	state.extAdcMeasuring = 0;
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	719a      	strb	r2, [r3, #6]
	state.intAdcMeasuring = 0;
 8001d36:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	71da      	strb	r2, [r3, #7]
	state.compMeasuring = 0;
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	721a      	strb	r2, [r3, #8]

	state.extAdcSetState = 1;
 8001d42:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	725a      	strb	r2, [r3, #9]
	state.intAdcSetState = 0;
 8001d48:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	729a      	strb	r2, [r3, #10]
	state.compSetState = 0;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	72da      	strb	r2, [r3, #11]

	state.remainingMeasurements = -1;
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5a:	819a      	strh	r2, [r3, #12]
	state.setMeasurements = -1;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d62:	81da      	strh	r2, [r3, #14]
	state.wholeMeasurementPeriod = 7000; 	//in ms -> 5 sec
 8001d64:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d66:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001d6a:	821a      	strh	r2, [r3, #16]
	state.polarizationPeriod = 5000; 		//in ms -> 3 sec
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d72:	825a      	strh	r2, [r3, #18]

	remainingTimeToNextMeasurement = 2000000;
 8001d74:	4b0d      	ldr	r3, [pc, #52]	; (8001dac <setStateToMeasureOnlyNoPolarization+0xa4>)
 8001d76:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <setStateToMeasureOnlyNoPolarization+0xa8>)
 8001d78:	601a      	str	r2, [r3, #0]
	remainingPolarizationTime = 0;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <setStateToMeasureOnlyNoPolarization+0xac>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

	state.newDataInBuffer = 0;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	751a      	strb	r2, [r3, #20]
	state.measureTechniqueUpdated = 0;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	755a      	strb	r2, [r3, #21]
	state.preparedToRunPolarizationPhase = 0;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	759a      	strb	r2, [r3, #22]
	state.preparedToRunMeasurementPhase = 1;
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	75da      	strb	r2, [r3, #23]
	state.index = 0;
 8001d98:	4b03      	ldr	r3, [pc, #12]	; (8001da8 <setStateToMeasureOnlyNoPolarization+0xa0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]

}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	2002f4a8 	.word	0x2002f4a8
 8001dac:	20004314 	.word	0x20004314
 8001db0:	001e8480 	.word	0x001e8480
 8001db4:	20000204 	.word	0x20000204

08001db8 <setStateToIdle>:
void setStateToIdle(){
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
	state.extAdcReadyToSend = 0;
 8001dbc:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <setStateToIdle+0x88>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
	state.intAdcReadyToSend = 0;
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <setStateToIdle+0x88>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	705a      	strb	r2, [r3, #1]
	state.compReadyToSend = 0;
 8001dc8:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <setStateToIdle+0x88>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	709a      	strb	r2, [r3, #2]

	state.extAdcActiveState = 0;
 8001dce:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <setStateToIdle+0x88>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	70da      	strb	r2, [r3, #3]
	state.intAdcActiveState = 0;
 8001dd4:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <setStateToIdle+0x88>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	711a      	strb	r2, [r3, #4]
	state.compActiveState = 0;
 8001dda:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <setStateToIdle+0x88>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	715a      	strb	r2, [r3, #5]

	state.extAdcMeasuring = 0;
 8001de0:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <setStateToIdle+0x88>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	719a      	strb	r2, [r3, #6]
	state.intAdcMeasuring = 0;
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <setStateToIdle+0x88>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	71da      	strb	r2, [r3, #7]
	state.compMeasuring = 0;
 8001dec:	4b14      	ldr	r3, [pc, #80]	; (8001e40 <setStateToIdle+0x88>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	721a      	strb	r2, [r3, #8]

	state.extAdcSetState = 0;
 8001df2:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <setStateToIdle+0x88>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	725a      	strb	r2, [r3, #9]
	state.intAdcSetState = 0;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <setStateToIdle+0x88>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	729a      	strb	r2, [r3, #10]
	state.compSetState = 0;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <setStateToIdle+0x88>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	72da      	strb	r2, [r3, #11]

	state.remainingMeasurements = 0;
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <setStateToIdle+0x88>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	819a      	strh	r2, [r3, #12]
	state.setMeasurements = 0;
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <setStateToIdle+0x88>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	81da      	strh	r2, [r3, #14]
	state.wholeMeasurementPeriod = 0; 	//in ms -> 5 sec
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <setStateToIdle+0x88>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	821a      	strh	r2, [r3, #16]
	state.polarizationPeriod = 0; 		//in ms -> 3 sec
 8001e16:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <setStateToIdle+0x88>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	825a      	strh	r2, [r3, #18]

	state.measureTechniqueUpdated = 0;
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <setStateToIdle+0x88>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	755a      	strb	r2, [r3, #21]
	state.preparedToRunPolarizationPhase = 0;
 8001e22:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <setStateToIdle+0x88>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	759a      	strb	r2, [r3, #22]
	state.preparedToRunMeasurementPhase = 0;
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <setStateToIdle+0x88>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	75da      	strb	r2, [r3, #23]
	state.index = 0;
 8001e2e:	4b04      	ldr	r3, [pc, #16]	; (8001e40 <setStateToIdle+0x88>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
	
}
 8001e34:	bf00      	nop
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	2002f4a8 	.word	0x2002f4a8

08001e44 <initialization>:

void initialization() {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
	setStateToMeasureOnlyNoPolarization();
 8001e48:	f7ff ff5e 	bl	8001d08 <setStateToMeasureOnlyNoPolarization>

	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);	// start listening to commands
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4908      	ldr	r1, [pc, #32]	; (8001e70 <initialization+0x2c>)
 8001e50:	4808      	ldr	r0, [pc, #32]	; (8001e74 <initialization+0x30>)
 8001e52:	f006 fe15 	bl	8008a80 <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim5); 						// start timer for delay measuring
 8001e56:	4808      	ldr	r0, [pc, #32]	; (8001e78 <initialization+0x34>)
 8001e58:	f004 fe7a 	bl	8006b50 <HAL_TIM_Base_Start_IT>
	switchingCircuitIdle();
 8001e5c:	f7ff fcda 	bl	8001814 <switchingCircuitIdle>
	set_LED1(0, 0, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2100      	movs	r1, #0
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7ff fc7b 	bl	8001760 <set_LED1>
	//setStateToDefault();								// set state in order to polarize with period 5 seconds
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20004310 	.word	0x20004310
 8001e74:	20004244 	.word	0x20004244
 8001e78:	2002f428 	.word	0x2002f428

08001e7c <HAL_TIM_IC_CaptureCallback>:

//comparator finished measuring
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8c:	d102      	bne.n	8001e94 <HAL_TIM_IC_CaptureCallback+0x18>
		measurementWithCompDone(htim);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fe62 	bl	8001b58 <measurementWithCompDone>
	}
}
 8001e94:	bf00      	nop
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <HAL_ADC_ConvCpltCallback>:

//intADC - buffer filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <HAL_ADC_ConvCpltCallback+0x20>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_ConvCpltCallback+0x16>
		measurementWithIntAdcDone();
 8001eae:	f7ff fe05 	bl	8001abc <measurementWithIntAdcDone>
	}
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40012000 	.word	0x40012000

08001ec0 <HAL_UART_RxCpltCallback>:

//char received with via USB
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <HAL_UART_RxCpltCallback+0x20>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d101      	bne.n	8001ed6 <HAL_UART_RxCpltCallback+0x16>
		characterReceived();
 8001ed2:	f000 f807 	bl	8001ee4 <characterReceived>
	}
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	40004800 	.word	0x40004800

08001ee4 <characterReceived>:

void characterReceived() {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	490e      	ldr	r1, [pc, #56]	; (8001f24 <characterReceived+0x40>)
 8001eec:	480e      	ldr	r0, [pc, #56]	; (8001f28 <characterReceived+0x44>)
 8001eee:	f006 fdc7 	bl	8008a80 <HAL_UART_Receive_IT>
	//receivedCharIndex shouldn't exceed 100
	receivedChars[(receivedCharIndex++) % 100] = buffer_uart_rx[0];
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <characterReceived+0x48>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	b2d1      	uxtb	r1, r2
 8001efa:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <characterReceived+0x48>)
 8001efc:	7011      	strb	r1, [r2, #0]
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <characterReceived+0x4c>)
 8001f00:	fba2 1203 	umull	r1, r2, r2, r3
 8001f04:	0952      	lsrs	r2, r2, #5
 8001f06:	2164      	movs	r1, #100	; 0x64
 8001f08:	fb01 f202 	mul.w	r2, r1, r2
 8001f0c:	1a9b      	subs	r3, r3, r2
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <characterReceived+0x40>)
 8001f14:	7819      	ldrb	r1, [r3, #0]
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <characterReceived+0x50>)
 8001f18:	5499      	strb	r1, [r3, r2]
	state.newDataInBuffer = 1;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <characterReceived+0x54>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	751a      	strb	r2, [r3, #20]
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20004310 	.word	0x20004310
 8001f28:	20004244 	.word	0x20004244
 8001f2c:	2002f774 	.word	0x2002f774
 8001f30:	51eb851f 	.word	0x51eb851f
 8001f34:	2002f6d0 	.word	0x2002f6d0
 8001f38:	2002f4a8 	.word	0x2002f4a8

08001f3c <HAL_SPI_RxCpltCallback>:

//extADC - buffer filled
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <HAL_SPI_RxCpltCallback+0x20>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d101      	bne.n	8001f52 <HAL_SPI_RxCpltCallback+0x16>
		measurementWithExtAdcDone();
 8001f4e:	f7ff fd5b 	bl	8001a08 <measurementWithExtAdcDone>
	}
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40013000 	.word	0x40013000

08001f60 <parseText>:

int parseText() {
 8001f60:	b5b0      	push	{r4, r5, r7, lr}
 8001f62:	b0a6      	sub	sp, #152	; 0x98
 8001f64:	af00      	add	r7, sp, #0
	//-------------------------------------------------------------------------------------
	//check if there is character "<" and ">"
	//-------------------------------------------------------------------------------------
	state.newDataInBuffer = 0;
 8001f66:	4bcc      	ldr	r3, [pc, #816]	; (8002298 <parseText+0x338>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	751a      	strb	r2, [r3, #20]


	uint8_t i, indexOfHead, indexOfTail, tailCount = 0, headCount = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 8001f72:	2300      	movs	r3, #0
 8001f74:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	char msg_buffers[80];
	char receivedCommand[50];

	for (i = 0; i < strlen(receivedCommand); i++) {
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001f7e:	e00c      	b.n	8001f9a <parseText+0x3a>
		receivedCommand[i] = '\0';
 8001f80:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001f84:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001f88:	4413      	add	r3, r2
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f803 2c98 	strb.w	r2, [r3, #-152]
	for (i = 0; i < strlen(receivedCommand); i++) {
 8001f90:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001f94:	3301      	adds	r3, #1
 8001f96:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001f9a:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7fe f957 	bl	8000254 <strlen>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	429c      	cmp	r4, r3
 8001faa:	d3e9      	bcc.n	8001f80 <parseText+0x20>
	}
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001fac:	2300      	movs	r3, #0
 8001fae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001fb2:	e00c      	b.n	8001fce <parseText+0x6e>
		msg_buffers[i] = '\0';
 8001fb4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001fb8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8001fbc:	4413      	add	r3, r2
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (i = 0; i < strlen(msg_buffers); i++) {
 8001fc4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001fc8:	3301      	adds	r3, #1
 8001fca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001fce:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8001fd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe f93c 	bl	8000254 <strlen>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	429c      	cmp	r4, r3
 8001fe0:	d3e8      	bcc.n	8001fb4 <parseText+0x54>
	}
	for (i = 0; i < strlen(receivedChars); i++) {
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001fe8:	e023      	b.n	8002032 <parseText+0xd2>
		//head of the message
		if (receivedChars[i] == '<') {
 8001fea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001fee:	4aab      	ldr	r2, [pc, #684]	; (800229c <parseText+0x33c>)
 8001ff0:	5cd3      	ldrb	r3, [r2, r3]
 8001ff2:	2b3c      	cmp	r3, #60	; 0x3c
 8001ff4:	d109      	bne.n	800200a <parseText+0xaa>
			indexOfHead = i;
 8001ff6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001ffa:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			headCount++;
 8001ffe:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002002:	3301      	adds	r3, #1
 8002004:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 8002008:	e00e      	b.n	8002028 <parseText+0xc8>
		}
		//tail of the message
		else if (receivedChars[i] == '>') {
 800200a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800200e:	4aa3      	ldr	r2, [pc, #652]	; (800229c <parseText+0x33c>)
 8002010:	5cd3      	ldrb	r3, [r2, r3]
 8002012:	2b3e      	cmp	r3, #62	; 0x3e
 8002014:	d108      	bne.n	8002028 <parseText+0xc8>
			indexOfTail = i;
 8002016:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800201a:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			tailCount++;
 800201e:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8002022:	3301      	adds	r3, #1
 8002024:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	for (i = 0; i < strlen(receivedChars); i++) {
 8002028:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800202c:	3301      	adds	r3, #1
 800202e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002032:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8002036:	4899      	ldr	r0, [pc, #612]	; (800229c <parseText+0x33c>)
 8002038:	f7fe f90c 	bl	8000254 <strlen>
 800203c:	4603      	mov	r3, r0
 800203e:	429c      	cmp	r4, r3
 8002040:	d3d3      	bcc.n	8001fea <parseText+0x8a>
		}
	}
	//received message is not complete
	if (headCount > tailCount) {
 8002042:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8002046:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800204a:	429a      	cmp	r2, r3
 800204c:	d901      	bls.n	8002052 <parseText+0xf2>
		return 0;
 800204e:	2300      	movs	r3, #0
 8002050:	e1c6      	b.n	80023e0 <parseText+0x480>
	}
	// received message is complete ->
	else if (headCount == tailCount && headCount > 0 && tailCount > 0) {
 8002052:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8002056:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800205a:	429a      	cmp	r2, r3
 800205c:	d158      	bne.n	8002110 <parseText+0x1b0>
 800205e:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8002062:	2b00      	cmp	r3, #0
 8002064:	d054      	beq.n	8002110 <parseText+0x1b0>
 8002066:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800206a:	2b00      	cmp	r3, #0
 800206c:	d050      	beq.n	8002110 <parseText+0x1b0>
		sprintf(msg_buffers, "<INFO:Message accepted>\n");
 800206e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002072:	4a8b      	ldr	r2, [pc, #556]	; (80022a0 <parseText+0x340>)
 8002074:	461c      	mov	r4, r3
 8002076:	4615      	mov	r5, r2
 8002078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800207a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800207c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002080:	c403      	stmia	r4!, {r0, r1}
 8002082:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002084:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe f8e3 	bl	8000254 <strlen>
 800208e:	4603      	mov	r3, r0
 8002090:	b29a      	uxth	r2, r3
 8002092:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	4882      	ldr	r0, [pc, #520]	; (80022a4 <parseText+0x344>)
 800209c:	f006 fc5e 	bl	800895c <HAL_UART_Transmit>
	}

	//-------------------------------------------------------------------------------------
	// get string between special chars (Only if specialCharCount == 2)
	//-------------------------------------------------------------------------------------
	strncpy(receivedCommand, receivedChars + indexOfHead + 1, indexOfTail - indexOfHead - 1);
 80020a0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80020a4:	3301      	adds	r3, #1
 80020a6:	4a7d      	ldr	r2, [pc, #500]	; (800229c <parseText+0x33c>)
 80020a8:	1899      	adds	r1, r3, r2
 80020aa:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80020ae:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	461a      	mov	r2, r3
 80020b8:	463b      	mov	r3, r7
 80020ba:	4618      	mov	r0, r3
 80020bc:	f007 fc3e 	bl	800993c <strncpy>
	receivedCommand[indexOfTail - indexOfHead - 1] = '\0';
 80020c0:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 80020c4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80020d0:	4413      	add	r3, r2
 80020d2:	2200      	movs	r2, #0
 80020d4:	f803 2c98 	strb.w	r2, [r3, #-152]

	char *command = strtok(receivedCommand, ":");
 80020d8:	463b      	mov	r3, r7
 80020da:	4973      	ldr	r1, [pc, #460]	; (80022a8 <parseText+0x348>)
 80020dc:	4618      	mov	r0, r3
 80020de:	f007 fc43 	bl	8009968 <strtok>
 80020e2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	char *method = strtok(NULL, ":");
 80020e6:	4970      	ldr	r1, [pc, #448]	; (80022a8 <parseText+0x348>)
 80020e8:	2000      	movs	r0, #0
 80020ea:	f007 fc3d 	bl	8009968 <strtok>
 80020ee:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	char *count = strtok(NULL, ":");
 80020f2:	496d      	ldr	r1, [pc, #436]	; (80022a8 <parseText+0x348>)
 80020f4:	2000      	movs	r0, #0
 80020f6:	f007 fc37 	bl	8009968 <strtok>
 80020fa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	//-------------------------------------------------------------------------------------
	// Perform action based on received message
	//-------------------------------------------------------------------------------------

	//<IDN> - identification
	if (strcmp(command, "IDN") == 0) {
 80020fe:	496b      	ldr	r1, [pc, #428]	; (80022ac <parseText+0x34c>)
 8002100:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002104:	f7fe f89c 	bl	8000240 <strcmp>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00c      	beq.n	8002128 <parseText+0x1c8>
 800210e:	e02b      	b.n	8002168 <parseText+0x208>
	else if ((headCount < tailCount)) {
 8002110:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8002114:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8002118:	429a      	cmp	r2, r3
 800211a:	d203      	bcs.n	8002124 <parseText+0x1c4>
		clearReceivedCharsBuffer(); // receivedChars needs to be cleared
 800211c:	f000 f974 	bl	8002408 <clearReceivedCharsBuffer>
		return 0;
 8002120:	2300      	movs	r3, #0
 8002122:	e15d      	b.n	80023e0 <parseText+0x480>
		return 0;
 8002124:	2300      	movs	r3, #0
 8002126:	e15b      	b.n	80023e0 <parseText+0x480>
		sprintf(msg_buffers, "<INFO:This is proton precession magnetometer - version 1>\n");
 8002128:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800212c:	4a60      	ldr	r2, [pc, #384]	; (80022b0 <parseText+0x350>)
 800212e:	461c      	mov	r4, r3
 8002130:	4615      	mov	r5, r2
 8002132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002136:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002138:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800213c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800213e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002142:	c403      	stmia	r4!, {r0, r1}
 8002144:	8022      	strh	r2, [r4, #0]
 8002146:	3402      	adds	r4, #2
 8002148:	0c13      	lsrs	r3, r2, #16
 800214a:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800214c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe f87f 	bl	8000254 <strlen>
 8002156:	4603      	mov	r3, r0
 8002158:	b29a      	uxth	r2, r3
 800215a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	4850      	ldr	r0, [pc, #320]	; (80022a4 <parseText+0x344>)
 8002164:	f006 fbfa 	bl	800895c <HAL_UART_Transmit>
	}

	//<IDLE> - initialization state
	if (strcmp(command, "IDLE") == 0) {
 8002168:	4952      	ldr	r1, [pc, #328]	; (80022b4 <parseText+0x354>)
 800216a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800216e:	f7fe f867 	bl	8000240 <strcmp>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <parseText+0x21c>
		setStateToIdle();
 8002178:	f7ff fe1e 	bl	8001db8 <setStateToIdle>
	}
	//<DEFAULT> - initialization state
	if (strcmp(command, "DEFAULT") == 0) {
 800217c:	494e      	ldr	r1, [pc, #312]	; (80022b8 <parseText+0x358>)
 800217e:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002182:	f7fe f85d 	bl	8000240 <strcmp>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <parseText+0x230>
		setStateToDefault();
 800218c:	f7ff fd70 	bl	8001c70 <setStateToDefault>
	}
	//<SET:parameter:value>
	if (strcmp(command, "SET") == 0) {
 8002190:	494a      	ldr	r1, [pc, #296]	; (80022bc <parseText+0x35c>)
 8002192:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8002196:	f7fe f853 	bl	8000240 <strcmp>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <parseText+0x24c>
		//polarization time
		if (strcmp(method, "polT") == 0) {
 80021a0:	4947      	ldr	r1, [pc, #284]	; (80022c0 <parseText+0x360>)
 80021a2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80021a6:	f7fe f84b 	bl	8000240 <strcmp>
 80021aa:	e117      	b.n	80023dc <parseText+0x47c>
			//convert received string to integer
			//polarizationTime = atoi(count);
		}
	}
	//<MEAS:method:count>
	else if (strcmp(command, "MEAS") == 0) {
 80021ac:	4945      	ldr	r1, [pc, #276]	; (80022c4 <parseText+0x364>)
 80021ae:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80021b2:	f7fe f845 	bl	8000240 <strcmp>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f040 810f 	bne.w	80023dc <parseText+0x47c>
		//external ADC only
		if (strcmp(method, "extADC") == 0) {
 80021be:	4942      	ldr	r1, [pc, #264]	; (80022c8 <parseText+0x368>)
 80021c0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80021c4:	f7fe f83c 	bl	8000240 <strcmp>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d110      	bne.n	80021f0 <parseText+0x290>
			state.extAdcSetState = 1;
 80021ce:	4b32      	ldr	r3, [pc, #200]	; (8002298 <parseText+0x338>)
 80021d0:	2201      	movs	r2, #1
 80021d2:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 80021d4:	4b30      	ldr	r3, [pc, #192]	; (8002298 <parseText+0x338>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 80021da:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <parseText+0x338>)
 80021dc:	2200      	movs	r2, #0
 80021de:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 80021e0:	4b2d      	ldr	r3, [pc, #180]	; (8002298 <parseText+0x338>)
 80021e2:	2201      	movs	r2, #1
 80021e4:	755a      	strb	r2, [r3, #21]
			setMeasurementPeriod(8000);
 80021e6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80021ea:	f000 fbb3 	bl	8002954 <setMeasurementPeriod>
 80021ee:	e0d7      	b.n	80023a0 <parseText+0x440>
		}
		//internal ADC only
		else if (strcmp(method, "intADC") == 0) {
 80021f0:	4936      	ldr	r1, [pc, #216]	; (80022cc <parseText+0x36c>)
 80021f2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80021f6:	f7fe f823 	bl	8000240 <strcmp>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d110      	bne.n	8002222 <parseText+0x2c2>
			state.extAdcSetState = 0;
 8002200:	4b25      	ldr	r3, [pc, #148]	; (8002298 <parseText+0x338>)
 8002202:	2200      	movs	r2, #0
 8002204:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8002206:	4b24      	ldr	r3, [pc, #144]	; (8002298 <parseText+0x338>)
 8002208:	2201      	movs	r2, #1
 800220a:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 800220c:	4b22      	ldr	r3, [pc, #136]	; (8002298 <parseText+0x338>)
 800220e:	2200      	movs	r2, #0
 8002210:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <parseText+0x338>)
 8002214:	2201      	movs	r2, #1
 8002216:	755a      	strb	r2, [r3, #21]
			setMeasurementPeriod(8000);
 8002218:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800221c:	f000 fb9a 	bl	8002954 <setMeasurementPeriod>
 8002220:	e0be      	b.n	80023a0 <parseText+0x440>
		}
		//comparator only
		else if (strcmp(method, "comp") == 0) {
 8002222:	492b      	ldr	r1, [pc, #172]	; (80022d0 <parseText+0x370>)
 8002224:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002228:	f7fe f80a 	bl	8000240 <strcmp>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d110      	bne.n	8002254 <parseText+0x2f4>
			state.extAdcSetState = 0;
 8002232:	4b19      	ldr	r3, [pc, #100]	; (8002298 <parseText+0x338>)
 8002234:	2200      	movs	r2, #0
 8002236:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 8002238:	4b17      	ldr	r3, [pc, #92]	; (8002298 <parseText+0x338>)
 800223a:	2200      	movs	r2, #0
 800223c:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 800223e:	4b16      	ldr	r3, [pc, #88]	; (8002298 <parseText+0x338>)
 8002240:	2201      	movs	r2, #1
 8002242:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8002244:	4b14      	ldr	r3, [pc, #80]	; (8002298 <parseText+0x338>)
 8002246:	2201      	movs	r2, #1
 8002248:	755a      	strb	r2, [r3, #21]
			setMeasurementPeriod(5000);
 800224a:	f241 3088 	movw	r0, #5000	; 0x1388
 800224e:	f000 fb81 	bl	8002954 <setMeasurementPeriod>
 8002252:	e0a5      	b.n	80023a0 <parseText+0x440>
		}
		//external ADC + internal ADC
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 8002254:	491f      	ldr	r1, [pc, #124]	; (80022d4 <parseText+0x374>)
 8002256:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800225a:	f7fd fff1 	bl	8000240 <strcmp>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d007      	beq.n	8002274 <parseText+0x314>
 8002264:	491c      	ldr	r1, [pc, #112]	; (80022d8 <parseText+0x378>)
 8002266:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800226a:	f7fd ffe9 	bl	8000240 <strcmp>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d133      	bne.n	80022dc <parseText+0x37c>
			state.extAdcSetState = 1;
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <parseText+0x338>)
 8002276:	2201      	movs	r2, #1
 8002278:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 800227a:	4b07      	ldr	r3, [pc, #28]	; (8002298 <parseText+0x338>)
 800227c:	2201      	movs	r2, #1
 800227e:	729a      	strb	r2, [r3, #10]
			state.compSetState = 0;
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <parseText+0x338>)
 8002282:	2200      	movs	r2, #0
 8002284:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8002286:	4b04      	ldr	r3, [pc, #16]	; (8002298 <parseText+0x338>)
 8002288:	2201      	movs	r2, #1
 800228a:	755a      	strb	r2, [r3, #21]
			setMeasurementPeriod(13000);
 800228c:	f243 20c8 	movw	r0, #13000	; 0x32c8
 8002290:	f000 fb60 	bl	8002954 <setMeasurementPeriod>
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 8002294:	e084      	b.n	80023a0 <parseText+0x440>
 8002296:	bf00      	nop
 8002298:	2002f4a8 	.word	0x2002f4a8
 800229c:	2002f6d0 	.word	0x2002f6d0
 80022a0:	0800a370 	.word	0x0800a370
 80022a4:	20004244 	.word	0x20004244
 80022a8:	0800a38c 	.word	0x0800a38c
 80022ac:	0800a390 	.word	0x0800a390
 80022b0:	0800a394 	.word	0x0800a394
 80022b4:	0800a3d0 	.word	0x0800a3d0
 80022b8:	0800a3d8 	.word	0x0800a3d8
 80022bc:	0800a3e0 	.word	0x0800a3e0
 80022c0:	0800a3e4 	.word	0x0800a3e4
 80022c4:	0800a3ec 	.word	0x0800a3ec
 80022c8:	0800a3f4 	.word	0x0800a3f4
 80022cc:	0800a3fc 	.word	0x0800a3fc
 80022d0:	0800a404 	.word	0x0800a404
 80022d4:	0800a40c 	.word	0x0800a40c
 80022d8:	0800a41c 	.word	0x0800a41c
		}
		//external ADC + comparator
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 80022dc:	4942      	ldr	r1, [pc, #264]	; (80023e8 <parseText+0x488>)
 80022de:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80022e2:	f7fd ffad 	bl	8000240 <strcmp>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <parseText+0x39c>
 80022ec:	493f      	ldr	r1, [pc, #252]	; (80023ec <parseText+0x48c>)
 80022ee:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80022f2:	f7fd ffa5 	bl	8000240 <strcmp>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d110      	bne.n	800231e <parseText+0x3be>
			state.extAdcSetState = 1;
 80022fc:	4b3c      	ldr	r3, [pc, #240]	; (80023f0 <parseText+0x490>)
 80022fe:	2201      	movs	r2, #1
 8002300:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 0;
 8002302:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <parseText+0x490>)
 8002304:	2200      	movs	r2, #0
 8002306:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 8002308:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <parseText+0x490>)
 800230a:	2201      	movs	r2, #1
 800230c:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <parseText+0x490>)
 8002310:	2201      	movs	r2, #1
 8002312:	755a      	strb	r2, [r3, #21]
			setMeasurementPeriod(8000);
 8002314:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8002318:	f000 fb1c 	bl	8002954 <setMeasurementPeriod>
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 800231c:	e040      	b.n	80023a0 <parseText+0x440>
		}
		//internal ADC + comparator
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 800231e:	4935      	ldr	r1, [pc, #212]	; (80023f4 <parseText+0x494>)
 8002320:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002324:	f7fd ff8c 	bl	8000240 <strcmp>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <parseText+0x3de>
 800232e:	4932      	ldr	r1, [pc, #200]	; (80023f8 <parseText+0x498>)
 8002330:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002334:	f7fd ff84 	bl	8000240 <strcmp>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d110      	bne.n	8002360 <parseText+0x400>
			state.extAdcSetState = 0;
 800233e:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <parseText+0x490>)
 8002340:	2200      	movs	r2, #0
 8002342:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <parseText+0x490>)
 8002346:	2201      	movs	r2, #1
 8002348:	729a      	strb	r2, [r3, #10]
			state.compSetState = 1;
 800234a:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <parseText+0x490>)
 800234c:	2201      	movs	r2, #1
 800234e:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <parseText+0x490>)
 8002352:	2201      	movs	r2, #1
 8002354:	755a      	strb	r2, [r3, #21]
			setMeasurementPeriod(8000);
 8002356:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 800235a:	f000 fafb 	bl	8002954 <setMeasurementPeriod>
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 800235e:	e01f      	b.n	80023a0 <parseText+0x440>
		}
		//external ADC + internal ADC + comparator
		else if ((strcmp(method, "extADC+intADC+comp") == 0) || (strcmp(method, "intADC+extADC+comp") == 0)) {
 8002360:	4926      	ldr	r1, [pc, #152]	; (80023fc <parseText+0x49c>)
 8002362:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002366:	f7fd ff6b 	bl	8000240 <strcmp>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d007      	beq.n	8002380 <parseText+0x420>
 8002370:	4923      	ldr	r1, [pc, #140]	; (8002400 <parseText+0x4a0>)
 8002372:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002376:	f7fd ff63 	bl	8000240 <strcmp>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10f      	bne.n	80023a0 <parseText+0x440>
			state.compSetState = 1;
 8002380:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <parseText+0x490>)
 8002382:	2201      	movs	r2, #1
 8002384:	72da      	strb	r2, [r3, #11]
			state.extAdcSetState = 1;
 8002386:	4b1a      	ldr	r3, [pc, #104]	; (80023f0 <parseText+0x490>)
 8002388:	2201      	movs	r2, #1
 800238a:	725a      	strb	r2, [r3, #9]
			state.intAdcSetState = 1;
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <parseText+0x490>)
 800238e:	2201      	movs	r2, #1
 8002390:	729a      	strb	r2, [r3, #10]
			state.measureTechniqueUpdated = 1;
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <parseText+0x490>)
 8002394:	2201      	movs	r2, #1
 8002396:	755a      	strb	r2, [r3, #21]
			setMeasurementPeriod(13000);
 8002398:	f243 20c8 	movw	r0, #13000	; 0x32c8
 800239c:	f000 fada 	bl	8002954 <setMeasurementPeriod>
		} else /* default: */
		{

		}
		if (strcmp(count, "INF") == 0) {
 80023a0:	4918      	ldr	r1, [pc, #96]	; (8002404 <parseText+0x4a4>)
 80023a2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80023a6:	f7fd ff4b 	bl	8000240 <strcmp>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d104      	bne.n	80023ba <parseText+0x45a>
			state.setMeasurements = -1;
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <parseText+0x490>)
 80023b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b6:	81da      	strh	r2, [r3, #14]
 80023b8:	e010      	b.n	80023dc <parseText+0x47c>
		} else if (strcmp(count, "") == 0) {
 80023ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d103      	bne.n	80023cc <parseText+0x46c>
			state.setMeasurements = 1;
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <parseText+0x490>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	81da      	strh	r2, [r3, #14]
 80023ca:	e007      	b.n	80023dc <parseText+0x47c>
		} else {
			state.setMeasurements = atoi(count);
 80023cc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80023d0:	f007 fa5d 	bl	800988e <atoi>
 80023d4:	4603      	mov	r3, r0
 80023d6:	b21a      	sxth	r2, r3
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <parseText+0x490>)
 80023da:	81da      	strh	r2, [r3, #14]
	}
	/* more else if clauses */
	else /* default: */
	{
	}
	clearReceivedCharsBuffer();
 80023dc:	f000 f814 	bl	8002408 <clearReceivedCharsBuffer>
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3798      	adds	r7, #152	; 0x98
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bdb0      	pop	{r4, r5, r7, pc}
 80023e8:	0800a42c 	.word	0x0800a42c
 80023ec:	0800a438 	.word	0x0800a438
 80023f0:	2002f4a8 	.word	0x2002f4a8
 80023f4:	0800a444 	.word	0x0800a444
 80023f8:	0800a450 	.word	0x0800a450
 80023fc:	0800a45c 	.word	0x0800a45c
 8002400:	0800a470 	.word	0x0800a470
 8002404:	0800a484 	.word	0x0800a484

08002408 <clearReceivedCharsBuffer>:

void clearReceivedCharsBuffer() {
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
	int i = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
	//keep everything in range
	if (receivedCharIndex > 50) {
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <clearReceivedCharsBuffer+0x4c>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b32      	cmp	r3, #50	; 0x32
 8002418:	d902      	bls.n	8002420 <clearReceivedCharsBuffer+0x18>
		receivedCharIndex = 50;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <clearReceivedCharsBuffer+0x4c>)
 800241c:	2232      	movs	r2, #50	; 0x32
 800241e:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < receivedCharIndex; i++) {
 8002420:	2300      	movs	r3, #0
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	e007      	b.n	8002436 <clearReceivedCharsBuffer+0x2e>
		receivedChars[i] = '\0';
 8002426:	4a0c      	ldr	r2, [pc, #48]	; (8002458 <clearReceivedCharsBuffer+0x50>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < receivedCharIndex; i++) {
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3301      	adds	r3, #1
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	4b07      	ldr	r3, [pc, #28]	; (8002454 <clearReceivedCharsBuffer+0x4c>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	461a      	mov	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4293      	cmp	r3, r2
 8002440:	dbf1      	blt.n	8002426 <clearReceivedCharsBuffer+0x1e>
	}
	receivedCharIndex = 0;
 8002442:	4b04      	ldr	r3, [pc, #16]	; (8002454 <clearReceivedCharsBuffer+0x4c>)
 8002444:	2200      	movs	r2, #0
 8002446:	701a      	strb	r2, [r3, #0]
}
 8002448:	bf00      	nop
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	2002f774 	.word	0x2002f774
 8002458:	2002f6d0 	.word	0x2002f6d0

0800245c <sendMeasuredData>:

void sendMeasuredData() {
 800245c:	b580      	push	{r7, lr}
 800245e:	b094      	sub	sp, #80	; 0x50
 8002460:	af00      	add	r7, sp, #0
	char msg_freq[16];
	char msg_buffers[50];
	uint16_t adc = 0;
 8002462:	2300      	movs	r3, #0
 8002464:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int i = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if ((state.extAdcReadyToSend == 1)) {
 800246c:	4ba3      	ldr	r3, [pc, #652]	; (80026fc <sendMeasuredData+0x2a0>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b01      	cmp	r3, #1
 8002472:	d171      	bne.n	8002558 <sendMeasuredData+0xfc>
		sprintf(msg_buffers, "<MEAS:%u:extADC:\n", state.index);
 8002474:	4ba1      	ldr	r3, [pc, #644]	; (80026fc <sendMeasuredData+0x2a0>)
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	463b      	mov	r3, r7
 800247a:	49a1      	ldr	r1, [pc, #644]	; (8002700 <sendMeasuredData+0x2a4>)
 800247c:	4618      	mov	r0, r3
 800247e:	f007 fa3d 	bl	80098fc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002482:	463b      	mov	r3, r7
 8002484:	4618      	mov	r0, r3
 8002486:	f7fd fee5 	bl	8000254 <strlen>
 800248a:	4603      	mov	r3, r0
 800248c:	b29a      	uxth	r2, r3
 800248e:	4639      	mov	r1, r7
 8002490:	f04f 33ff 	mov.w	r3, #4294967295
 8002494:	489b      	ldr	r0, [pc, #620]	; (8002704 <sendMeasuredData+0x2a8>)
 8002496:	f006 fa61 	bl	800895c <HAL_UART_Transmit>

		// first buffer

		for (i = 0; i < samplesPerPeriod; i++) {
 800249a:	2300      	movs	r3, #0
 800249c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800249e:	e01b      	b.n	80024d8 <sendMeasuredData+0x7c>
			adc = (buffer_extAdc_1.uint16[i]);
 80024a0:	4a99      	ldr	r2, [pc, #612]	; (8002708 <sendMeasuredData+0x2ac>)
 80024a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 80024ac:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80024b0:	463b      	mov	r3, r7
 80024b2:	4996      	ldr	r1, [pc, #600]	; (800270c <sendMeasuredData+0x2b0>)
 80024b4:	4618      	mov	r0, r3
 80024b6:	f007 fa21 	bl	80098fc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80024ba:	463b      	mov	r3, r7
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fd fec9 	bl	8000254 <strlen>
 80024c2:	4603      	mov	r3, r0
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4639      	mov	r1, r7
 80024c8:	f04f 33ff 	mov.w	r3, #4294967295
 80024cc:	488d      	ldr	r0, [pc, #564]	; (8002704 <sendMeasuredData+0x2a8>)
 80024ce:	f006 fa45 	bl	800895c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 80024d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d4:	3301      	adds	r3, #1
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80024da:	4b8d      	ldr	r3, [pc, #564]	; (8002710 <sendMeasuredData+0x2b4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3de      	bcc.n	80024a0 <sendMeasuredData+0x44>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80024e2:	2300      	movs	r3, #0
 80024e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e6:	e01b      	b.n	8002520 <sendMeasuredData+0xc4>
			adc = (buffer_extAdc_2.uint16[i]);
 80024e8:	4a8a      	ldr	r2, [pc, #552]	; (8002714 <sendMeasuredData+0x2b8>)
 80024ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024f0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 80024f4:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80024f8:	463b      	mov	r3, r7
 80024fa:	4984      	ldr	r1, [pc, #528]	; (800270c <sendMeasuredData+0x2b0>)
 80024fc:	4618      	mov	r0, r3
 80024fe:	f007 f9fd 	bl	80098fc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002502:	463b      	mov	r3, r7
 8002504:	4618      	mov	r0, r3
 8002506:	f7fd fea5 	bl	8000254 <strlen>
 800250a:	4603      	mov	r3, r0
 800250c:	b29a      	uxth	r2, r3
 800250e:	4639      	mov	r1, r7
 8002510:	f04f 33ff 	mov.w	r3, #4294967295
 8002514:	487b      	ldr	r0, [pc, #492]	; (8002704 <sendMeasuredData+0x2a8>)
 8002516:	f006 fa21 	bl	800895c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 800251a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251c:	3301      	adds	r3, #1
 800251e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002520:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002522:	4b7b      	ldr	r3, [pc, #492]	; (8002710 <sendMeasuredData+0x2b4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d3de      	bcc.n	80024e8 <sendMeasuredData+0x8c>
		}
		sprintf(msg_buffers, ">\n");
 800252a:	463b      	mov	r3, r7
 800252c:	4a7a      	ldr	r2, [pc, #488]	; (8002718 <sendMeasuredData+0x2bc>)
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	4611      	mov	r1, r2
 8002532:	8019      	strh	r1, [r3, #0]
 8002534:	3302      	adds	r3, #2
 8002536:	0c12      	lsrs	r2, r2, #16
 8002538:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800253a:	463b      	mov	r3, r7
 800253c:	4618      	mov	r0, r3
 800253e:	f7fd fe89 	bl	8000254 <strlen>
 8002542:	4603      	mov	r3, r0
 8002544:	b29a      	uxth	r2, r3
 8002546:	4639      	mov	r1, r7
 8002548:	f04f 33ff 	mov.w	r3, #4294967295
 800254c:	486d      	ldr	r0, [pc, #436]	; (8002704 <sendMeasuredData+0x2a8>)
 800254e:	f006 fa05 	bl	800895c <HAL_UART_Transmit>
		state.extAdcReadyToSend = 0;
 8002552:	4b6a      	ldr	r3, [pc, #424]	; (80026fc <sendMeasuredData+0x2a0>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
	}

	if ((state.intAdcReadyToSend == 1)) {
 8002558:	4b68      	ldr	r3, [pc, #416]	; (80026fc <sendMeasuredData+0x2a0>)
 800255a:	785b      	ldrb	r3, [r3, #1]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d171      	bne.n	8002644 <sendMeasuredData+0x1e8>
		sprintf(msg_buffers, "<MEAS:%u:intADC:\n", state.index);
 8002560:	4b66      	ldr	r3, [pc, #408]	; (80026fc <sendMeasuredData+0x2a0>)
 8002562:	699a      	ldr	r2, [r3, #24]
 8002564:	463b      	mov	r3, r7
 8002566:	496d      	ldr	r1, [pc, #436]	; (800271c <sendMeasuredData+0x2c0>)
 8002568:	4618      	mov	r0, r3
 800256a:	f007 f9c7 	bl	80098fc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800256e:	463b      	mov	r3, r7
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd fe6f 	bl	8000254 <strlen>
 8002576:	4603      	mov	r3, r0
 8002578:	b29a      	uxth	r2, r3
 800257a:	4639      	mov	r1, r7
 800257c:	f04f 33ff 	mov.w	r3, #4294967295
 8002580:	4860      	ldr	r0, [pc, #384]	; (8002704 <sendMeasuredData+0x2a8>)
 8002582:	f006 f9eb 	bl	800895c <HAL_UART_Transmit>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8002586:	2300      	movs	r3, #0
 8002588:	64fb      	str	r3, [r7, #76]	; 0x4c
 800258a:	e01b      	b.n	80025c4 <sendMeasuredData+0x168>
			adc = (buffer_intAdc_1.uint16[i]);
 800258c:	4a64      	ldr	r2, [pc, #400]	; (8002720 <sendMeasuredData+0x2c4>)
 800258e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002594:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8002598:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 800259c:	463b      	mov	r3, r7
 800259e:	495b      	ldr	r1, [pc, #364]	; (800270c <sendMeasuredData+0x2b0>)
 80025a0:	4618      	mov	r0, r3
 80025a2:	f007 f9ab 	bl	80098fc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80025a6:	463b      	mov	r3, r7
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7fd fe53 	bl	8000254 <strlen>
 80025ae:	4603      	mov	r3, r0
 80025b0:	b29a      	uxth	r2, r3
 80025b2:	4639      	mov	r1, r7
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	4852      	ldr	r0, [pc, #328]	; (8002704 <sendMeasuredData+0x2a8>)
 80025ba:	f006 f9cf 	bl	800895c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 80025be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c0:	3301      	adds	r3, #1
 80025c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025c6:	4b52      	ldr	r3, [pc, #328]	; (8002710 <sendMeasuredData+0x2b4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d3de      	bcc.n	800258c <sendMeasuredData+0x130>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 80025ce:	2300      	movs	r3, #0
 80025d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025d2:	e01b      	b.n	800260c <sendMeasuredData+0x1b0>
			adc = (buffer_intAdc_2.uint16[i]);
 80025d4:	4a53      	ldr	r2, [pc, #332]	; (8002724 <sendMeasuredData+0x2c8>)
 80025d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025dc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 80025e0:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 80025e4:	463b      	mov	r3, r7
 80025e6:	4949      	ldr	r1, [pc, #292]	; (800270c <sendMeasuredData+0x2b0>)
 80025e8:	4618      	mov	r0, r3
 80025ea:	f007 f987 	bl	80098fc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80025ee:	463b      	mov	r3, r7
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fd fe2f 	bl	8000254 <strlen>
 80025f6:	4603      	mov	r3, r0
 80025f8:	b29a      	uxth	r2, r3
 80025fa:	4639      	mov	r1, r7
 80025fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002600:	4840      	ldr	r0, [pc, #256]	; (8002704 <sendMeasuredData+0x2a8>)
 8002602:	f006 f9ab 	bl	800895c <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8002606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002608:	3301      	adds	r3, #1
 800260a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800260c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800260e:	4b40      	ldr	r3, [pc, #256]	; (8002710 <sendMeasuredData+0x2b4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	429a      	cmp	r2, r3
 8002614:	d3de      	bcc.n	80025d4 <sendMeasuredData+0x178>
		}
		sprintf(msg_buffers, ">\n");
 8002616:	463b      	mov	r3, r7
 8002618:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <sendMeasuredData+0x2bc>)
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	4611      	mov	r1, r2
 800261e:	8019      	strh	r1, [r3, #0]
 8002620:	3302      	adds	r3, #2
 8002622:	0c12      	lsrs	r2, r2, #16
 8002624:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8002626:	463b      	mov	r3, r7
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd fe13 	bl	8000254 <strlen>
 800262e:	4603      	mov	r3, r0
 8002630:	b29a      	uxth	r2, r3
 8002632:	4639      	mov	r1, r7
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
 8002638:	4832      	ldr	r0, [pc, #200]	; (8002704 <sendMeasuredData+0x2a8>)
 800263a:	f006 f98f 	bl	800895c <HAL_UART_Transmit>
		state.intAdcReadyToSend = 0;
 800263e:	4b2f      	ldr	r3, [pc, #188]	; (80026fc <sendMeasuredData+0x2a0>)
 8002640:	2200      	movs	r2, #0
 8002642:	705a      	strb	r2, [r3, #1]
	}

	if ((state.compReadyToSend == 1)) {
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <sendMeasuredData+0x2a0>)
 8002646:	789b      	ldrb	r3, [r3, #2]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d153      	bne.n	80026f4 <sendMeasuredData+0x298>
		//send frequency
		sprintf(msg_buffers, "<MEAS:%u:comp:\n", state.index);
 800264c:	4b2b      	ldr	r3, [pc, #172]	; (80026fc <sendMeasuredData+0x2a0>)
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	463b      	mov	r3, r7
 8002652:	4935      	ldr	r1, [pc, #212]	; (8002728 <sendMeasuredData+0x2cc>)
 8002654:	4618      	mov	r0, r3
 8002656:	f007 f951 	bl	80098fc <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800265a:	463b      	mov	r3, r7
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd fdf9 	bl	8000254 <strlen>
 8002662:	4603      	mov	r3, r0
 8002664:	b29a      	uxth	r2, r3
 8002666:	4639      	mov	r1, r7
 8002668:	f04f 33ff 	mov.w	r3, #4294967295
 800266c:	4825      	ldr	r0, [pc, #148]	; (8002704 <sendMeasuredData+0x2a8>)
 800266e:	f006 f975 	bl	800895c <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 8002672:	2300      	movs	r3, #0
 8002674:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002676:	e022      	b.n	80026be <sendMeasuredData+0x262>
			uint32_t freq = buffer_comp[i + 1] - buffer_comp[i];
 8002678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800267a:	3301      	adds	r3, #1
 800267c:	4a2b      	ldr	r2, [pc, #172]	; (800272c <sendMeasuredData+0x2d0>)
 800267e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002682:	492a      	ldr	r1, [pc, #168]	; (800272c <sendMeasuredData+0x2d0>)
 8002684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002686:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	647b      	str	r3, [r7, #68]	; 0x44
			sprintf(msg_freq, "%d\n", freq);
 800268e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002692:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002694:	4926      	ldr	r1, [pc, #152]	; (8002730 <sendMeasuredData+0x2d4>)
 8002696:	4618      	mov	r0, r3
 8002698:	f007 f930 	bl	80098fc <siprintf>
			HAL_UART_Transmit(&huart3, (uint8_t*) msg_freq, strlen(msg_freq), HAL_MAX_DELAY);
 800269c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd fdd7 	bl	8000254 <strlen>
 80026a6:	4603      	mov	r3, r0
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	4814      	ldr	r0, [pc, #80]	; (8002704 <sendMeasuredData+0x2a8>)
 80026b4:	f006 f952 	bl	800895c <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 80026b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026ba:	3301      	adds	r3, #1
 80026bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80026c4:	dbd8      	blt.n	8002678 <sendMeasuredData+0x21c>
		}
		sprintf(msg_buffers, ">\n");
 80026c6:	463b      	mov	r3, r7
 80026c8:	4a13      	ldr	r2, [pc, #76]	; (8002718 <sendMeasuredData+0x2bc>)
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	4611      	mov	r1, r2
 80026ce:	8019      	strh	r1, [r3, #0]
 80026d0:	3302      	adds	r3, #2
 80026d2:	0c12      	lsrs	r2, r2, #16
 80026d4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart3, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 80026d6:	463b      	mov	r3, r7
 80026d8:	4618      	mov	r0, r3
 80026da:	f7fd fdbb 	bl	8000254 <strlen>
 80026de:	4603      	mov	r3, r0
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	4639      	mov	r1, r7
 80026e4:	f04f 33ff 	mov.w	r3, #4294967295
 80026e8:	4806      	ldr	r0, [pc, #24]	; (8002704 <sendMeasuredData+0x2a8>)
 80026ea:	f006 f937 	bl	800895c <HAL_UART_Transmit>
		state.compReadyToSend = 0;
 80026ee:	4b03      	ldr	r3, [pc, #12]	; (80026fc <sendMeasuredData+0x2a0>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	709a      	strb	r2, [r3, #2]
	}
}
 80026f4:	bf00      	nop
 80026f6:	3750      	adds	r7, #80	; 0x50
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	2002f4a8 	.word	0x2002f4a8
 8002700:	0800a488 	.word	0x0800a488
 8002704:	20004244 	.word	0x20004244
 8002708:	200451c4 	.word	0x200451c4
 800270c:	0800a49c 	.word	0x0800a49c
 8002710:	20000000 	.word	0x20000000
 8002714:	20019ba0 	.word	0x20019ba0
 8002718:	0800a4a4 	.word	0x0800a4a4
 800271c:	0800a4a8 	.word	0x0800a4a8
 8002720:	2002f8dc 	.word	0x2002f8dc
 8002724:	20004318 	.word	0x20004318
 8002728:	0800a4bc 	.word	0x0800a4bc
 800272c:	20000214 	.word	0x20000214
 8002730:	0800a4cc 	.word	0x0800a4cc

08002734 <updateState>:

void updateState() {
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
	state.remainingMeasurements = state.setMeasurements;
 8002738:	4b0d      	ldr	r3, [pc, #52]	; (8002770 <updateState+0x3c>)
 800273a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <updateState+0x3c>)
 8002740:	819a      	strh	r2, [r3, #12]
	state.extAdcActiveState = state.extAdcSetState;
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <updateState+0x3c>)
 8002744:	7a5a      	ldrb	r2, [r3, #9]
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <updateState+0x3c>)
 8002748:	70da      	strb	r2, [r3, #3]
	state.intAdcActiveState = state.intAdcSetState;
 800274a:	4b09      	ldr	r3, [pc, #36]	; (8002770 <updateState+0x3c>)
 800274c:	7a9a      	ldrb	r2, [r3, #10]
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <updateState+0x3c>)
 8002750:	711a      	strb	r2, [r3, #4]
	state.compActiveState = state.compSetState;
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <updateState+0x3c>)
 8002754:	7ada      	ldrb	r2, [r3, #11]
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <updateState+0x3c>)
 8002758:	715a      	strb	r2, [r3, #5]
	state.preparedToRunPolarizationPhase = 1;
 800275a:	4b05      	ldr	r3, [pc, #20]	; (8002770 <updateState+0x3c>)
 800275c:	2201      	movs	r2, #1
 800275e:	759a      	strb	r2, [r3, #22]
	state.measureTechniqueUpdated = 0;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <updateState+0x3c>)
 8002762:	2200      	movs	r2, #0
 8002764:	755a      	strb	r2, [r3, #21]
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	2002f4a8 	.word	0x2002f4a8

08002774 <dataReadyToSend>:

int dataReadyToSend() {
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
	return (state.extAdcReadyToSend || state.intAdcReadyToSend || state.compReadyToSend);
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <dataReadyToSend+0x2c>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d107      	bne.n	8002790 <dataReadyToSend+0x1c>
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <dataReadyToSend+0x2c>)
 8002782:	785b      	ldrb	r3, [r3, #1]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d103      	bne.n	8002790 <dataReadyToSend+0x1c>
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <dataReadyToSend+0x2c>)
 800278a:	789b      	ldrb	r3, [r3, #2]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d001      	beq.n	8002794 <dataReadyToSend+0x20>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <dataReadyToSend+0x22>
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	2002f4a8 	.word	0x2002f4a8

080027a4 <lastMeasurement>:

int lastMeasurement() {
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
	return (state.remainingMeasurements == 0);
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <lastMeasurement+0x20>)
 80027aa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf0c      	ite	eq
 80027b2:	2301      	moveq	r3, #1
 80027b4:	2300      	movne	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	2002f4a8 	.word	0x2002f4a8

080027c8 <stateCanBeUpdated>:


int stateCanBeUpdated() {
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
	return (state.measureTechniqueUpdated && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <stateCanBeUpdated+0x4c>)
 80027ce:	7d5b      	ldrb	r3, [r3, #21]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d019      	beq.n	8002808 <stateCanBeUpdated+0x40>
 80027d4:	4b0f      	ldr	r3, [pc, #60]	; (8002814 <stateCanBeUpdated+0x4c>)
 80027d6:	799b      	ldrb	r3, [r3, #6]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d115      	bne.n	8002808 <stateCanBeUpdated+0x40>
 80027dc:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <stateCanBeUpdated+0x4c>)
 80027de:	79db      	ldrb	r3, [r3, #7]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d111      	bne.n	8002808 <stateCanBeUpdated+0x40>
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <stateCanBeUpdated+0x4c>)
 80027e6:	7a1b      	ldrb	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10d      	bne.n	8002808 <stateCanBeUpdated+0x40>
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <stateCanBeUpdated+0x4c>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d109      	bne.n	8002808 <stateCanBeUpdated+0x40>
 80027f4:	4b07      	ldr	r3, [pc, #28]	; (8002814 <stateCanBeUpdated+0x4c>)
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d105      	bne.n	8002808 <stateCanBeUpdated+0x40>
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <stateCanBeUpdated+0x4c>)
 80027fe:	789b      	ldrb	r3, [r3, #2]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <stateCanBeUpdated+0x40>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <stateCanBeUpdated+0x42>
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr
 8002814:	2002f4a8 	.word	0x2002f4a8

08002818 <ploarizationCanRun>:

// polarization can run even if data are sending
int ploarizationCanRun() {
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
	return (remainingTimeToNextMeasurement == 0 && state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring);
 800281c:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <ploarizationCanRun+0x3c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d111      	bne.n	8002848 <ploarizationCanRun+0x30>
 8002824:	4b0c      	ldr	r3, [pc, #48]	; (8002858 <ploarizationCanRun+0x40>)
 8002826:	7d9b      	ldrb	r3, [r3, #22]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00d      	beq.n	8002848 <ploarizationCanRun+0x30>
 800282c:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <ploarizationCanRun+0x40>)
 800282e:	799b      	ldrb	r3, [r3, #6]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d109      	bne.n	8002848 <ploarizationCanRun+0x30>
 8002834:	4b08      	ldr	r3, [pc, #32]	; (8002858 <ploarizationCanRun+0x40>)
 8002836:	79db      	ldrb	r3, [r3, #7]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <ploarizationCanRun+0x30>
 800283c:	4b06      	ldr	r3, [pc, #24]	; (8002858 <ploarizationCanRun+0x40>)
 800283e:	7a1b      	ldrb	r3, [r3, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <ploarizationCanRun+0x30>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <ploarizationCanRun+0x32>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	20004314 	.word	0x20004314
 8002858:	2002f4a8 	.word	0x2002f4a8

0800285c <measurementCanRun>:
// measurement sequence can run if polarization can run and all the data
int measurementCanRun() {
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
	return (remainingPolarizationTime == 0 && state.preparedToRunMeasurementPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend
 8002860:	4b13      	ldr	r3, [pc, #76]	; (80028b0 <measurementCanRun+0x54>)
 8002862:	681b      	ldr	r3, [r3, #0]
			&& !state.intAdcReadyToSend && !state.compReadyToSend);
 8002864:	2b00      	cmp	r3, #0
 8002866:	d11d      	bne.n	80028a4 <measurementCanRun+0x48>
	return (remainingPolarizationTime == 0 && state.preparedToRunMeasurementPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend
 8002868:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <measurementCanRun+0x58>)
 800286a:	7ddb      	ldrb	r3, [r3, #23]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d019      	beq.n	80028a4 <measurementCanRun+0x48>
 8002870:	4b10      	ldr	r3, [pc, #64]	; (80028b4 <measurementCanRun+0x58>)
 8002872:	799b      	ldrb	r3, [r3, #6]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d115      	bne.n	80028a4 <measurementCanRun+0x48>
 8002878:	4b0e      	ldr	r3, [pc, #56]	; (80028b4 <measurementCanRun+0x58>)
 800287a:	79db      	ldrb	r3, [r3, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <measurementCanRun+0x48>
 8002880:	4b0c      	ldr	r3, [pc, #48]	; (80028b4 <measurementCanRun+0x58>)
 8002882:	7a1b      	ldrb	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10d      	bne.n	80028a4 <measurementCanRun+0x48>
 8002888:	4b0a      	ldr	r3, [pc, #40]	; (80028b4 <measurementCanRun+0x58>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d109      	bne.n	80028a4 <measurementCanRun+0x48>
			&& !state.intAdcReadyToSend && !state.compReadyToSend);
 8002890:	4b08      	ldr	r3, [pc, #32]	; (80028b4 <measurementCanRun+0x58>)
 8002892:	785b      	ldrb	r3, [r3, #1]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <measurementCanRun+0x48>
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <measurementCanRun+0x58>)
 800289a:	789b      	ldrb	r3, [r3, #2]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <measurementCanRun+0x48>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <measurementCanRun+0x4a>
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	20000204 	.word	0x20000204
 80028b4:	2002f4a8 	.word	0x2002f4a8

080028b8 <stateIsIdle>:

int stateIsIdle() {
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
	return (!state.extAdcActiveState && !state.intAdcActiveState && !state.compActiveState && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <stateIsIdle+0x44>)
 80028be:	78db      	ldrb	r3, [r3, #3]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d115      	bne.n	80028f0 <stateIsIdle+0x38>
 80028c4:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <stateIsIdle+0x44>)
 80028c6:	791b      	ldrb	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d111      	bne.n	80028f0 <stateIsIdle+0x38>
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <stateIsIdle+0x44>)
 80028ce:	795b      	ldrb	r3, [r3, #5]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10d      	bne.n	80028f0 <stateIsIdle+0x38>
 80028d4:	4b09      	ldr	r3, [pc, #36]	; (80028fc <stateIsIdle+0x44>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d109      	bne.n	80028f0 <stateIsIdle+0x38>
 80028dc:	4b07      	ldr	r3, [pc, #28]	; (80028fc <stateIsIdle+0x44>)
 80028de:	785b      	ldrb	r3, [r3, #1]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d105      	bne.n	80028f0 <stateIsIdle+0x38>
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <stateIsIdle+0x44>)
 80028e6:	789b      	ldrb	r3, [r3, #2]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <stateIsIdle+0x38>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <stateIsIdle+0x3a>
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	2002f4a8 	.word	0x2002f4a8

08002900 <canDecreaseRemainingMeasurements>:

int canDecreaseRemainingMeasurements() {
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
	return ((state.remainingMeasurements > 0) && (state.intAdcActiveState ||state.extAdcActiveState ||state.compActiveState ));
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <canDecreaseRemainingMeasurements+0x38>)
 8002906:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	dd0d      	ble.n	800292a <canDecreaseRemainingMeasurements+0x2a>
 800290e:	4b0a      	ldr	r3, [pc, #40]	; (8002938 <canDecreaseRemainingMeasurements+0x38>)
 8002910:	791b      	ldrb	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d107      	bne.n	8002926 <canDecreaseRemainingMeasurements+0x26>
 8002916:	4b08      	ldr	r3, [pc, #32]	; (8002938 <canDecreaseRemainingMeasurements+0x38>)
 8002918:	78db      	ldrb	r3, [r3, #3]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d103      	bne.n	8002926 <canDecreaseRemainingMeasurements+0x26>
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <canDecreaseRemainingMeasurements+0x38>)
 8002920:	795b      	ldrb	r3, [r3, #5]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <canDecreaseRemainingMeasurements+0x2a>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <canDecreaseRemainingMeasurements+0x2c>
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	2002f4a8 	.word	0x2002f4a8

0800293c <newDataInBuffer>:

int newDataInBuffer(){
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
	return (state.newDataInBuffer);
 8002940:	4b03      	ldr	r3, [pc, #12]	; (8002950 <newDataInBuffer+0x14>)
 8002942:	7d1b      	ldrb	r3, [r3, #20]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	2002f4a8 	.word	0x2002f4a8

08002954 <setMeasurementPeriod>:

void setMeasurementPeriod(uint16_t time) {
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	4603      	mov	r3, r0
 800295c:	80fb      	strh	r3, [r7, #6]
	if (time > 2000) {
 800295e:	88fb      	ldrh	r3, [r7, #6]
 8002960:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002964:	d90a      	bls.n	800297c <setMeasurementPeriod+0x28>
		state.polarizationPeriod = time - 2000;
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800296c:	b29b      	uxth	r3, r3
 800296e:	b21a      	sxth	r2, r3
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <setMeasurementPeriod+0x34>)
 8002972:	825a      	strh	r2, [r3, #18]
		state.wholeMeasurementPeriod = time;
 8002974:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <setMeasurementPeriod+0x34>)
 800297a:	821a      	strh	r2, [r3, #16]
	}
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	2002f4a8 	.word	0x2002f4a8

0800298c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80029a2:	4b0f      	ldr	r3, [pc, #60]	; (80029e0 <HAL_MspInit+0x44>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a0e      	ldr	r2, [pc, #56]	; (80029e0 <HAL_MspInit+0x44>)
 80029a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_MspInit+0x44>)
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b6:	607b      	str	r3, [r7, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_MspInit+0x44>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	4a08      	ldr	r2, [pc, #32]	; (80029e0 <HAL_MspInit+0x44>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c4:	6453      	str	r3, [r2, #68]	; 0x44
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_MspInit+0x44>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ce:	603b      	str	r3, [r7, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	40023800 	.word	0x40023800

080029e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08a      	sub	sp, #40	; 0x28
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	f107 0314 	add.w	r3, r7, #20
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2c      	ldr	r2, [pc, #176]	; (8002ab4 <HAL_ADC_MspInit+0xd0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d152      	bne.n	8002aac <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a06:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_ADC_MspInit+0xd4>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	4a2b      	ldr	r2, [pc, #172]	; (8002ab8 <HAL_ADC_MspInit+0xd4>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6453      	str	r3, [r2, #68]	; 0x44
 8002a12:	4b29      	ldr	r3, [pc, #164]	; (8002ab8 <HAL_ADC_MspInit+0xd4>)
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a1e:	4b26      	ldr	r3, [pc, #152]	; (8002ab8 <HAL_ADC_MspInit+0xd4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a22:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <HAL_ADC_MspInit+0xd4>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2a:	4b23      	ldr	r3, [pc, #140]	; (8002ab8 <HAL_ADC_MspInit+0xd4>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
 8002a34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 8002a36:	2301      	movs	r3, #1
 8002a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 8002a42:	f107 0314 	add.w	r3, r7, #20
 8002a46:	4619      	mov	r1, r3
 8002a48:	481c      	ldr	r0, [pc, #112]	; (8002abc <HAL_ADC_MspInit+0xd8>)
 8002a4a:	f001 fec5 	bl	80047d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_ADC_MspInit+0xe0>)
 8002a52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a54:	4b1a      	ldr	r3, [pc, #104]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a60:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a66:	4b16      	ldr	r3, [pc, #88]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002a68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002a70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a76:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002a78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a7e:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a84:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a90:	480b      	ldr	r0, [pc, #44]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002a92:	f001 fb09 	bl	80040a8 <HAL_DMA_Init>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8002a9c:	f7ff ff76 	bl	800298c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a07      	ldr	r2, [pc, #28]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002aa4:	639a      	str	r2, [r3, #56]	; 0x38
 8002aa6:	4a06      	ldr	r2, [pc, #24]	; (8002ac0 <HAL_ADC_MspInit+0xdc>)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002aac:	bf00      	nop
 8002aae:	3728      	adds	r7, #40	; 0x28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	40012000 	.word	0x40012000
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40020000 	.word	0x40020000
 8002ac0:	2002f670 	.word	0x2002f670
 8002ac4:	40026470 	.word	0x40026470

08002ac8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08c      	sub	sp, #48	; 0x30
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	f107 031c 	add.w	r3, r7, #28
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	609a      	str	r2, [r3, #8]
 8002adc:	60da      	str	r2, [r3, #12]
 8002ade:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a3d      	ldr	r2, [pc, #244]	; (8002bdc <HAL_I2C_MspInit+0x114>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d128      	bne.n	8002b3c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aea:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a3c      	ldr	r2, [pc, #240]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b3a      	ldr	r3, [pc, #232]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	61bb      	str	r3, [r7, #24]
 8002b00:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b02:	23c0      	movs	r3, #192	; 0xc0
 8002b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b06:	2312      	movs	r3, #18
 8002b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002b12:	2304      	movs	r3, #4
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b16:	f107 031c 	add.w	r3, r7, #28
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4831      	ldr	r0, [pc, #196]	; (8002be4 <HAL_I2C_MspInit+0x11c>)
 8002b1e:	f001 fe5b 	bl	80047d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b22:	4b2f      	ldr	r3, [pc, #188]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a2e      	ldr	r2, [pc, #184]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002b3a:	e04a      	b.n	8002bd2 <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <HAL_I2C_MspInit+0x120>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d145      	bne.n	8002bd2 <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002b4c:	f043 0304 	orr.w	r3, r3, #4
 8002b50:	6313      	str	r3, [r2, #48]	; 0x30
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b62:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002b64:	f043 0301 	orr.w	r3, r3, #1
 8002b68:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b7c:	2312      	movs	r3, #18
 8002b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b80:	2301      	movs	r3, #1
 8002b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b84:	2303      	movs	r3, #3
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b88:	2304      	movs	r3, #4
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8c:	f107 031c 	add.w	r3, r7, #28
 8002b90:	4619      	mov	r1, r3
 8002b92:	4816      	ldr	r0, [pc, #88]	; (8002bec <HAL_I2C_MspInit+0x124>)
 8002b94:	f001 fe20 	bl	80047d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b9e:	2312      	movs	r3, #18
 8002ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002baa:	2304      	movs	r3, #4
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bae:	f107 031c 	add.w	r3, r7, #28
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480e      	ldr	r0, [pc, #56]	; (8002bf0 <HAL_I2C_MspInit+0x128>)
 8002bb6:	f001 fe0f 	bl	80047d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a08      	ldr	r2, [pc, #32]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002bc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_I2C_MspInit+0x118>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
}
 8002bd2:	bf00      	nop
 8002bd4:	3730      	adds	r7, #48	; 0x30
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	40005400 	.word	0x40005400
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40020400 	.word	0x40020400
 8002be8:	40005c00 	.word	0x40005c00
 8002bec:	40020800 	.word	0x40020800
 8002bf0:	40020000 	.word	0x40020000

08002bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b08c      	sub	sp, #48	; 0x30
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	605a      	str	r2, [r3, #4]
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	60da      	str	r2, [r3, #12]
 8002c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a46      	ldr	r2, [pc, #280]	; (8002d2c <HAL_SPI_MspInit+0x138>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d159      	bne.n	8002cca <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002c16:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	4a45      	ldr	r2, [pc, #276]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002c1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c20:	6453      	str	r3, [r2, #68]	; 0x44
 8002c22:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c2e:	4b40      	ldr	r3, [pc, #256]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	4a3f      	ldr	r2, [pc, #252]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 8002c46:	23b0      	movs	r3, #176	; 0xb0
 8002c48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c52:	2303      	movs	r3, #3
 8002c54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c56:	2305      	movs	r3, #5
 8002c58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5a:	f107 031c 	add.w	r3, r7, #28
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4834      	ldr	r0, [pc, #208]	; (8002d34 <HAL_SPI_MspInit+0x140>)
 8002c62:	f001 fdb9 	bl	80047d8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8002c66:	4b34      	ldr	r3, [pc, #208]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002c68:	4a34      	ldr	r2, [pc, #208]	; (8002d3c <HAL_SPI_MspInit+0x148>)
 8002c6a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002c6c:	4b32      	ldr	r3, [pc, #200]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002c6e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002c72:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c74:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c7a:	4b2f      	ldr	r3, [pc, #188]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c80:	4b2d      	ldr	r3, [pc, #180]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002c82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c86:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c88:	4b2b      	ldr	r3, [pc, #172]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002c8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c8e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c90:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c96:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002c98:	4b27      	ldr	r3, [pc, #156]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c9e:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002ca0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ca4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ca6:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002cac:	4822      	ldr	r0, [pc, #136]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002cae:	f001 f9fb 	bl	80040a8 <HAL_DMA_Init>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 8002cb8:	f7ff fe68 	bl	800298c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a1e      	ldr	r2, [pc, #120]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002cc0:	659a      	str	r2, [r3, #88]	; 0x58
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_SPI_MspInit+0x144>)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002cc8:	e02c      	b.n	8002d24 <HAL_SPI_MspInit+0x130>
  else if(hspi->Instance==SPI4)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <HAL_SPI_MspInit+0x14c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d127      	bne.n	8002d24 <HAL_SPI_MspInit+0x130>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002cd4:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd8:	4a15      	ldr	r2, [pc, #84]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002cda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002cde:	6453      	str	r3, [r2, #68]	; 0x44
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002cf2:	f043 0310 	orr.w	r3, r3, #16
 8002cf6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cf8:	4b0d      	ldr	r3, [pc, #52]	; (8002d30 <HAL_SPI_MspInit+0x13c>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002d04:	2374      	movs	r3, #116	; 0x74
 8002d06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d10:	2303      	movs	r3, #3
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002d14:	2305      	movs	r3, #5
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d18:	f107 031c 	add.w	r3, r7, #28
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4809      	ldr	r0, [pc, #36]	; (8002d44 <HAL_SPI_MspInit+0x150>)
 8002d20:	f001 fd5a 	bl	80047d8 <HAL_GPIO_Init>
}
 8002d24:	bf00      	nop
 8002d26:	3730      	adds	r7, #48	; 0x30
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40013000 	.word	0x40013000
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020000 	.word	0x40020000
 8002d38:	20045164 	.word	0x20045164
 8002d3c:	40026440 	.word	0x40026440
 8002d40:	40013400 	.word	0x40013400
 8002d44:	40021000 	.word	0x40021000

08002d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b088      	sub	sp, #32
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a45      	ldr	r2, [pc, #276]	; (8002e6c <HAL_TIM_Base_MspInit+0x124>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d11c      	bne.n	8002d94 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d5a:	4b45      	ldr	r3, [pc, #276]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4a44      	ldr	r2, [pc, #272]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6453      	str	r3, [r2, #68]	; 0x44
 8002d66:	4b42      	ldr	r3, [pc, #264]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	61fb      	str	r3, [r7, #28]
 8002d70:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2100      	movs	r1, #0
 8002d76:	2018      	movs	r0, #24
 8002d78:	f001 f95f 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002d7c:	2018      	movs	r0, #24
 8002d7e:	f001 f978 	bl	8004072 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2100      	movs	r1, #0
 8002d86:	2019      	movs	r0, #25
 8002d88:	f001 f957 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d8c:	2019      	movs	r0, #25
 8002d8e:	f001 f970 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002d92:	e066      	b.n	8002e62 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM3)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a36      	ldr	r2, [pc, #216]	; (8002e74 <HAL_TIM_Base_MspInit+0x12c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d114      	bne.n	8002dc8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d9e:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a33      	ldr	r2, [pc, #204]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002da4:	f043 0302 	orr.w	r3, r3, #2
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2101      	movs	r1, #1
 8002dba:	201d      	movs	r0, #29
 8002dbc:	f001 f93d 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002dc0:	201d      	movs	r0, #29
 8002dc2:	f001 f956 	bl	8004072 <HAL_NVIC_EnableIRQ>
}
 8002dc6:	e04c      	b.n	8002e62 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM5)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <HAL_TIM_Base_MspInit+0x130>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d114      	bne.n	8002dfc <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002dd2:	4b27      	ldr	r3, [pc, #156]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a26      	ldr	r2, [pc, #152]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002dd8:	f043 0308 	orr.w	r3, r3, #8
 8002ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002dea:	2200      	movs	r2, #0
 8002dec:	2101      	movs	r1, #1
 8002dee:	2032      	movs	r0, #50	; 0x32
 8002df0:	f001 f923 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002df4:	2032      	movs	r0, #50	; 0x32
 8002df6:	f001 f93c 	bl	8004072 <HAL_NVIC_EnableIRQ>
}
 8002dfa:	e032      	b.n	8002e62 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM6)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <HAL_TIM_Base_MspInit+0x134>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d114      	bne.n	8002e30 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e06:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002e0c:	f043 0310 	orr.w	r3, r3, #16
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	613b      	str	r3, [r7, #16]
 8002e1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2101      	movs	r1, #1
 8002e22:	2036      	movs	r0, #54	; 0x36
 8002e24:	f001 f909 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002e28:	2036      	movs	r0, #54	; 0x36
 8002e2a:	f001 f922 	bl	8004072 <HAL_NVIC_EnableIRQ>
}
 8002e2e:	e018      	b.n	8002e62 <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM8)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <HAL_TIM_Base_MspInit+0x138>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d113      	bne.n	8002e62 <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e3a:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e3e:	4a0c      	ldr	r2, [pc, #48]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002e40:	f043 0302 	orr.w	r3, r3, #2
 8002e44:	6453      	str	r3, [r2, #68]	; 0x44
 8002e46:	4b0a      	ldr	r3, [pc, #40]	; (8002e70 <HAL_TIM_Base_MspInit+0x128>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	60fb      	str	r3, [r7, #12]
 8002e50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8002e52:	2200      	movs	r2, #0
 8002e54:	2101      	movs	r1, #1
 8002e56:	202e      	movs	r0, #46	; 0x2e
 8002e58:	f001 f8ef 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002e5c:	202e      	movs	r0, #46	; 0x2e
 8002e5e:	f001 f908 	bl	8004072 <HAL_NVIC_EnableIRQ>
}
 8002e62:	bf00      	nop
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40023800 	.word	0x40023800
 8002e74:	40000400 	.word	0x40000400
 8002e78:	40000c00 	.word	0x40000c00
 8002e7c:	40001000 	.word	0x40001000
 8002e80:	40010400 	.word	0x40010400

08002e84 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea4:	d160      	bne.n	8002f68 <HAL_TIM_IC_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ea6:	4b32      	ldr	r3, [pc, #200]	; (8002f70 <HAL_TIM_IC_MspInit+0xec>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a31      	ldr	r2, [pc, #196]	; (8002f70 <HAL_TIM_IC_MspInit+0xec>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_TIM_IC_MspInit+0xec>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	613b      	str	r3, [r7, #16]
 8002ebc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	4b2c      	ldr	r3, [pc, #176]	; (8002f70 <HAL_TIM_IC_MspInit+0xec>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	4a2b      	ldr	r2, [pc, #172]	; (8002f70 <HAL_TIM_IC_MspInit+0xec>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_TIM_IC_MspInit+0xec>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8002ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002edc:	2302      	movs	r3, #2
 8002ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	4820      	ldr	r0, [pc, #128]	; (8002f74 <HAL_TIM_IC_MspInit+0xf0>)
 8002ef4:	f001 fc70 	bl	80047d8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002ef8:	4b1f      	ldr	r3, [pc, #124]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002efa:	4a20      	ldr	r2, [pc, #128]	; (8002f7c <HAL_TIM_IC_MspInit+0xf8>)
 8002efc:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f00:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002f04:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f06:	4b1c      	ldr	r3, [pc, #112]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f0c:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f12:	4b19      	ldr	r3, [pc, #100]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f18:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f20:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f22:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f28:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002f30:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002f3c:	480e      	ldr	r0, [pc, #56]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f3e:	f001 f8b3 	bl	80040a8 <HAL_DMA_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_TIM_IC_MspInit+0xc8>
    {
      Error_Handler();
 8002f48:	f7ff fd20 	bl	800298c <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24
 8002f52:	4a09      	ldr	r2, [pc, #36]	; (8002f78 <HAL_TIM_IC_MspInit+0xf4>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	201c      	movs	r0, #28
 8002f5e:	f001 f86c 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f62:	201c      	movs	r0, #28
 8002f64:	f001 f885 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f68:	bf00      	nop
 8002f6a:	3728      	adds	r7, #40	; 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40020000 	.word	0x40020000
 8002f78:	200040e4 	.word	0x200040e4
 8002f7c:	40026088 	.word	0x40026088

08002f80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a0d      	ldr	r2, [pc, #52]	; (8002fc4 <HAL_TIM_PWM_MspInit+0x44>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d113      	bne.n	8002fba <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f92:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <HAL_TIM_PWM_MspInit+0x48>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <HAL_TIM_PWM_MspInit+0x48>)
 8002f98:	f043 0304 	orr.w	r3, r3, #4
 8002f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f9e:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_TIM_PWM_MspInit+0x48>)
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	60fb      	str	r3, [r7, #12]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002faa:	2200      	movs	r2, #0
 8002fac:	2101      	movs	r1, #1
 8002fae:	201e      	movs	r0, #30
 8002fb0:	f001 f843 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002fb4:	201e      	movs	r0, #30
 8002fb6:	f001 f85c 	bl	8004072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002fba:	bf00      	nop
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40000800 	.word	0x40000800
 8002fc8:	40023800 	.word	0x40023800

08002fcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08c      	sub	sp, #48	; 0x30
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fd4:	f107 031c 	add.w	r3, r7, #28
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	60da      	str	r2, [r3, #12]
 8002fe2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a45      	ldr	r2, [pc, #276]	; (8003100 <HAL_TIM_MspPostInit+0x134>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d11d      	bne.n	800302a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fee:	4b45      	ldr	r3, [pc, #276]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	4a44      	ldr	r2, [pc, #272]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 8002ff4:	f043 0310 	orr.w	r3, r3, #16
 8002ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ffa:	4b42      	ldr	r3, [pc, #264]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	f003 0310 	and.w	r3, r3, #16
 8003002:	61bb      	str	r3, [r7, #24]
 8003004:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 8003006:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800300a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300c:	2302      	movs	r3, #2
 800300e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003014:	2300      	movs	r3, #0
 8003016:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003018:	2301      	movs	r3, #1
 800301a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800301c:	f107 031c 	add.w	r3, r7, #28
 8003020:	4619      	mov	r1, r3
 8003022:	4839      	ldr	r0, [pc, #228]	; (8003108 <HAL_TIM_MspPostInit+0x13c>)
 8003024:	f001 fbd8 	bl	80047d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003028:	e065      	b.n	80030f6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a37      	ldr	r2, [pc, #220]	; (800310c <HAL_TIM_MspPostInit+0x140>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d11c      	bne.n	800306e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003034:	4b33      	ldr	r3, [pc, #204]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 8003036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003038:	4a32      	ldr	r2, [pc, #200]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 800303a:	f043 0301 	orr.w	r3, r3, #1
 800303e:	6313      	str	r3, [r2, #48]	; 0x30
 8003040:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 800304c:	2340      	movs	r3, #64	; 0x40
 800304e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2302      	movs	r3, #2
 8003052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003058:	2300      	movs	r3, #0
 800305a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800305c:	2302      	movs	r3, #2
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 8003060:	f107 031c 	add.w	r3, r7, #28
 8003064:	4619      	mov	r1, r3
 8003066:	482a      	ldr	r0, [pc, #168]	; (8003110 <HAL_TIM_MspPostInit+0x144>)
 8003068:	f001 fbb6 	bl	80047d8 <HAL_GPIO_Init>
}
 800306c:	e043      	b.n	80030f6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a28      	ldr	r2, [pc, #160]	; (8003114 <HAL_TIM_MspPostInit+0x148>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d11d      	bne.n	80030b4 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003078:	4b22      	ldr	r3, [pc, #136]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307c:	4a21      	ldr	r2, [pc, #132]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 800307e:	f043 0308 	orr.w	r3, r3, #8
 8003082:	6313      	str	r3, [r2, #48]	; 0x30
 8003084:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 8003090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003096:	2302      	movs	r3, #2
 8003098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309e:	2300      	movs	r3, #0
 80030a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80030a2:	2302      	movs	r3, #2
 80030a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 80030a6:	f107 031c 	add.w	r3, r7, #28
 80030aa:	4619      	mov	r1, r3
 80030ac:	481a      	ldr	r0, [pc, #104]	; (8003118 <HAL_TIM_MspPostInit+0x14c>)
 80030ae:	f001 fb93 	bl	80047d8 <HAL_GPIO_Init>
}
 80030b2:	e020      	b.n	80030f6 <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a18      	ldr	r2, [pc, #96]	; (800311c <HAL_TIM_MspPostInit+0x150>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d11b      	bne.n	80030f6 <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030be:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	4a10      	ldr	r2, [pc, #64]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <HAL_TIM_MspPostInit+0x138>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 80030d6:	2340      	movs	r3, #64	; 0x40
 80030d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030e2:	2300      	movs	r3, #0
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80030e6:	2303      	movs	r3, #3
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 80030ea:	f107 031c 	add.w	r3, r7, #28
 80030ee:	4619      	mov	r1, r3
 80030f0:	480b      	ldr	r0, [pc, #44]	; (8003120 <HAL_TIM_MspPostInit+0x154>)
 80030f2:	f001 fb71 	bl	80047d8 <HAL_GPIO_Init>
}
 80030f6:	bf00      	nop
 80030f8:	3730      	adds	r7, #48	; 0x30
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40010000 	.word	0x40010000
 8003104:	40023800 	.word	0x40023800
 8003108:	40021000 	.word	0x40021000
 800310c:	40000400 	.word	0x40000400
 8003110:	40020000 	.word	0x40020000
 8003114:	40000800 	.word	0x40000800
 8003118:	40020c00 	.word	0x40020c00
 800311c:	40010400 	.word	0x40010400
 8003120:	40020800 	.word	0x40020800

08003124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b092      	sub	sp, #72	; 0x48
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	605a      	str	r2, [r3, #4]
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a79      	ldr	r2, [pc, #484]	; (8003328 <HAL_UART_MspInit+0x204>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d129      	bne.n	800319a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003146:	4b79      	ldr	r3, [pc, #484]	; (800332c <HAL_UART_MspInit+0x208>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	4a78      	ldr	r2, [pc, #480]	; (800332c <HAL_UART_MspInit+0x208>)
 800314c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003150:	6413      	str	r3, [r2, #64]	; 0x40
 8003152:	4b76      	ldr	r3, [pc, #472]	; (800332c <HAL_UART_MspInit+0x208>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800315a:	633b      	str	r3, [r7, #48]	; 0x30
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800315e:	4b73      	ldr	r3, [pc, #460]	; (800332c <HAL_UART_MspInit+0x208>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	4a72      	ldr	r2, [pc, #456]	; (800332c <HAL_UART_MspInit+0x208>)
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	6313      	str	r3, [r2, #48]	; 0x30
 800316a:	4b70      	ldr	r3, [pc, #448]	; (800332c <HAL_UART_MspInit+0x208>)
 800316c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART5 GPIO Configuration    
    PB12     ------> UART5_RX
    PB13     ------> UART5_TX 
    */
    GPIO_InitStruct.Pin = UART5_RX_Pin|UART5_TX_Pin;
 8003176:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800317a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800317c:	2302      	movs	r3, #2
 800317e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	2300      	movs	r3, #0
 8003182:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003188:	2308      	movs	r3, #8
 800318a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800318c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003190:	4619      	mov	r1, r3
 8003192:	4867      	ldr	r0, [pc, #412]	; (8003330 <HAL_UART_MspInit+0x20c>)
 8003194:	f001 fb20 	bl	80047d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003198:	e0c1      	b.n	800331e <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==UART7)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a65      	ldr	r2, [pc, #404]	; (8003334 <HAL_UART_MspInit+0x210>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d129      	bne.n	80031f8 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART7_CLK_ENABLE();
 80031a4:	4b61      	ldr	r3, [pc, #388]	; (800332c <HAL_UART_MspInit+0x208>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	4a60      	ldr	r2, [pc, #384]	; (800332c <HAL_UART_MspInit+0x208>)
 80031aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ae:	6413      	str	r3, [r2, #64]	; 0x40
 80031b0:	4b5e      	ldr	r3, [pc, #376]	; (800332c <HAL_UART_MspInit+0x208>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031bc:	4b5b      	ldr	r3, [pc, #364]	; (800332c <HAL_UART_MspInit+0x208>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	4a5a      	ldr	r2, [pc, #360]	; (800332c <HAL_UART_MspInit+0x208>)
 80031c2:	f043 0310 	orr.w	r3, r3, #16
 80031c6:	6313      	str	r3, [r2, #48]	; 0x30
 80031c8:	4b58      	ldr	r3, [pc, #352]	; (800332c <HAL_UART_MspInit+0x208>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80031d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e2:	2303      	movs	r3, #3
 80031e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80031e6:	2308      	movs	r3, #8
 80031e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031ee:	4619      	mov	r1, r3
 80031f0:	4851      	ldr	r0, [pc, #324]	; (8003338 <HAL_UART_MspInit+0x214>)
 80031f2:	f001 faf1 	bl	80047d8 <HAL_GPIO_Init>
}
 80031f6:	e092      	b.n	800331e <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a4f      	ldr	r2, [pc, #316]	; (800333c <HAL_UART_MspInit+0x218>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d129      	bne.n	8003256 <HAL_UART_MspInit+0x132>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003202:	4b4a      	ldr	r3, [pc, #296]	; (800332c <HAL_UART_MspInit+0x208>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	4a49      	ldr	r2, [pc, #292]	; (800332c <HAL_UART_MspInit+0x208>)
 8003208:	f043 0310 	orr.w	r3, r3, #16
 800320c:	6453      	str	r3, [r2, #68]	; 0x44
 800320e:	4b47      	ldr	r3, [pc, #284]	; (800332c <HAL_UART_MspInit+0x208>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003212:	f003 0310 	and.w	r3, r3, #16
 8003216:	623b      	str	r3, [r7, #32]
 8003218:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800321a:	4b44      	ldr	r3, [pc, #272]	; (800332c <HAL_UART_MspInit+0x208>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	4a43      	ldr	r2, [pc, #268]	; (800332c <HAL_UART_MspInit+0x208>)
 8003220:	f043 0302 	orr.w	r3, r3, #2
 8003224:	6313      	str	r3, [r2, #48]	; 0x30
 8003226:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_UART_MspInit+0x208>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 8003232:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003238:	2302      	movs	r3, #2
 800323a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323c:	2300      	movs	r3, #0
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003240:	2303      	movs	r3, #3
 8003242:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003244:	2304      	movs	r3, #4
 8003246:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003248:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800324c:	4619      	mov	r1, r3
 800324e:	4838      	ldr	r0, [pc, #224]	; (8003330 <HAL_UART_MspInit+0x20c>)
 8003250:	f001 fac2 	bl	80047d8 <HAL_GPIO_Init>
}
 8003254:	e063      	b.n	800331e <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART2)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a39      	ldr	r2, [pc, #228]	; (8003340 <HAL_UART_MspInit+0x21c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d128      	bne.n	80032b2 <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_UART_MspInit+0x208>)
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	4a31      	ldr	r2, [pc, #196]	; (800332c <HAL_UART_MspInit+0x208>)
 8003266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800326a:	6413      	str	r3, [r2, #64]	; 0x40
 800326c:	4b2f      	ldr	r3, [pc, #188]	; (800332c <HAL_UART_MspInit+0x208>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003278:	4b2c      	ldr	r3, [pc, #176]	; (800332c <HAL_UART_MspInit+0x208>)
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	4a2b      	ldr	r2, [pc, #172]	; (800332c <HAL_UART_MspInit+0x208>)
 800327e:	f043 0301 	orr.w	r3, r3, #1
 8003282:	6313      	str	r3, [r2, #48]	; 0x30
 8003284:	4b29      	ldr	r3, [pc, #164]	; (800332c <HAL_UART_MspInit+0x208>)
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 8003290:	230c      	movs	r3, #12
 8003292:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329c:	2303      	movs	r3, #3
 800329e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032a0:	2307      	movs	r3, #7
 80032a2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032a8:	4619      	mov	r1, r3
 80032aa:	4826      	ldr	r0, [pc, #152]	; (8003344 <HAL_UART_MspInit+0x220>)
 80032ac:	f001 fa94 	bl	80047d8 <HAL_GPIO_Init>
}
 80032b0:	e035      	b.n	800331e <HAL_UART_MspInit+0x1fa>
  else if(huart->Instance==USART3)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a24      	ldr	r2, [pc, #144]	; (8003348 <HAL_UART_MspInit+0x224>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d130      	bne.n	800331e <HAL_UART_MspInit+0x1fa>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032bc:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_UART_MspInit+0x208>)
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <HAL_UART_MspInit+0x208>)
 80032c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032c6:	6413      	str	r3, [r2, #64]	; 0x40
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_UART_MspInit+0x208>)
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032d4:	4b15      	ldr	r3, [pc, #84]	; (800332c <HAL_UART_MspInit+0x208>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <HAL_UART_MspInit+0x208>)
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	6313      	str	r3, [r2, #48]	; 0x30
 80032e0:	4b12      	ldr	r3, [pc, #72]	; (800332c <HAL_UART_MspInit+0x208>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 80032ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032f0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032fa:	2303      	movs	r3, #3
 80032fc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80032fe:	2307      	movs	r3, #7
 8003300:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003302:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003306:	4619      	mov	r1, r3
 8003308:	4809      	ldr	r0, [pc, #36]	; (8003330 <HAL_UART_MspInit+0x20c>)
 800330a:	f001 fa65 	bl	80047d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2100      	movs	r1, #0
 8003312:	2027      	movs	r0, #39	; 0x27
 8003314:	f000 fe91 	bl	800403a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003318:	2027      	movs	r0, #39	; 0x27
 800331a:	f000 feaa 	bl	8004072 <HAL_NVIC_EnableIRQ>
}
 800331e:	bf00      	nop
 8003320:	3748      	adds	r7, #72	; 0x48
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40005000 	.word	0x40005000
 800332c:	40023800 	.word	0x40023800
 8003330:	40020400 	.word	0x40020400
 8003334:	40007800 	.word	0x40007800
 8003338:	40021000 	.word	0x40021000
 800333c:	40011000 	.word	0x40011000
 8003340:	40004400 	.word	0x40004400
 8003344:	40020000 	.word	0x40020000
 8003348:	40004800 	.word	0x40004800

0800334c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335e:	e7fe      	b.n	800335e <HardFault_Handler+0x4>

08003360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003364:	e7fe      	b.n	8003364 <MemManage_Handler+0x4>

08003366 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003366:	b480      	push	{r7}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800336a:	e7fe      	b.n	800336a <BusFault_Handler+0x4>

0800336c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800336c:	b480      	push	{r7}
 800336e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003370:	e7fe      	b.n	8003370 <UsageFault_Handler+0x4>

08003372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003372:	b480      	push	{r7}
 8003374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003376:	bf00      	nop
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003384:	bf00      	nop
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800338e:	b480      	push	{r7}
 8003390:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a0:	f000 f922 	bl	80035e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033a4:	bf00      	nop
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80033ac:	4802      	ldr	r0, [pc, #8]	; (80033b8 <DMA1_Stream5_IRQHandler+0x10>)
 80033ae:	f000 ffab 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	200040e4 	.word	0x200040e4

080033bc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033c0:	4802      	ldr	r0, [pc, #8]	; (80033cc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80033c2:	f003 ff5f 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	2002f778 	.word	0x2002f778

080033d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80033d6:	f003 ff55 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2002f778 	.word	0x2002f778

080033e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <TIM2_IRQHandler+0x10>)
 80033ea:	f003 ff4b 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2002f81c 	.word	0x2002f81c

080033f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <TIM3_IRQHandler+0x10>)
 80033fe:	f003 ff41 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	2002f468 	.word	0x2002f468

0800340c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003410:	4802      	ldr	r0, [pc, #8]	; (800341c <TIM4_IRQHandler+0x10>)
 8003412:	f003 ff37 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20004204 	.word	0x20004204

08003420 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003424:	4802      	ldr	r0, [pc, #8]	; (8003430 <USART3_IRQHandler+0x10>)
 8003426:	f005 fbcd 	bl	8008bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800342a:	bf00      	nop
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20004244 	.word	0x20004244

08003434 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <TIM8_CC_IRQHandler+0x10>)
 800343a:	f003 ff23 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	200041c4 	.word	0x200041c4

08003448 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800344c:	4802      	ldr	r0, [pc, #8]	; (8003458 <TIM5_IRQHandler+0x10>)
 800344e:	f003 ff19 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	2002f428 	.word	0x2002f428

0800345c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003460:	4802      	ldr	r0, [pc, #8]	; (800346c <TIM6_DAC_IRQHandler+0x10>)
 8003462:	f003 ff0f 	bl	8007284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003466:	bf00      	nop
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	2002f734 	.word	0x2002f734

08003470 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8003474:	4802      	ldr	r0, [pc, #8]	; (8003480 <DMA2_Stream2_IRQHandler+0x10>)
 8003476:	f000 ff47 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800347a:	bf00      	nop
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20045164 	.word	0x20045164

08003484 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003488:	4802      	ldr	r0, [pc, #8]	; (8003494 <DMA2_Stream4_IRQHandler+0x10>)
 800348a:	f000 ff3d 	bl	8004308 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	2002f670 	.word	0x2002f670

08003498 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <_sbrk+0x50>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <_sbrk+0x16>
		heap_end = &end;
 80034a8:	4b0f      	ldr	r3, [pc, #60]	; (80034e8 <_sbrk+0x50>)
 80034aa:	4a10      	ldr	r2, [pc, #64]	; (80034ec <_sbrk+0x54>)
 80034ac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80034ae:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <_sbrk+0x50>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80034b4:	4b0c      	ldr	r3, [pc, #48]	; (80034e8 <_sbrk+0x50>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4413      	add	r3, r2
 80034bc:	466a      	mov	r2, sp
 80034be:	4293      	cmp	r3, r2
 80034c0:	d907      	bls.n	80034d2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80034c2:	f006 f9e9 	bl	8009898 <__errno>
 80034c6:	4602      	mov	r2, r0
 80034c8:	230c      	movs	r3, #12
 80034ca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80034cc:	f04f 33ff 	mov.w	r3, #4294967295
 80034d0:	e006      	b.n	80034e0 <_sbrk+0x48>
	}

	heap_end += incr;
 80034d2:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <_sbrk+0x50>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	4a03      	ldr	r2, [pc, #12]	; (80034e8 <_sbrk+0x50>)
 80034dc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	20000208 	.word	0x20000208
 80034ec:	2005aa58 	.word	0x2005aa58

080034f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034f4:	4b08      	ldr	r3, [pc, #32]	; (8003518 <SystemInit+0x28>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	4a07      	ldr	r2, [pc, #28]	; (8003518 <SystemInit+0x28>)
 80034fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003504:	4b04      	ldr	r3, [pc, #16]	; (8003518 <SystemInit+0x28>)
 8003506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800350a:	609a      	str	r2, [r3, #8]
#endif
}
 800350c:	bf00      	nop
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	e000ed00 	.word	0xe000ed00

0800351c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800351c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003554 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003520:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003522:	e003      	b.n	800352c <LoopCopyDataInit>

08003524 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003526:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003528:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800352a:	3104      	adds	r1, #4

0800352c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800352c:	480b      	ldr	r0, [pc, #44]	; (800355c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800352e:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003530:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003532:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003534:	d3f6      	bcc.n	8003524 <CopyDataInit>
  ldr  r2, =_sbss
 8003536:	4a0b      	ldr	r2, [pc, #44]	; (8003564 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003538:	e002      	b.n	8003540 <LoopFillZerobss>

0800353a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800353a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800353c:	f842 3b04 	str.w	r3, [r2], #4

08003540 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003540:	4b09      	ldr	r3, [pc, #36]	; (8003568 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003542:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003544:	d3f9      	bcc.n	800353a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003546:	f7ff ffd3 	bl	80034f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800354a:	f006 f9ab 	bl	80098a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800354e:	f7fd f85f 	bl	8000610 <main>
  bx  lr    
 8003552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003554:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003558:	0800a640 	.word	0x0800a640
  ldr  r0, =_sdata
 800355c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003560:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8003564:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8003568:	2005aa54 	.word	0x2005aa54

0800356c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800356c:	e7fe      	b.n	800356c <ADC_IRQHandler>

0800356e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003572:	2003      	movs	r0, #3
 8003574:	f000 fd56 	bl	8004024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003578:	2000      	movs	r0, #0
 800357a:	f000 f805 	bl	8003588 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800357e:	f7ff fa0d 	bl	800299c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	bd80      	pop	{r7, pc}

08003588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003590:	4b12      	ldr	r3, [pc, #72]	; (80035dc <HAL_InitTick+0x54>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	4b12      	ldr	r3, [pc, #72]	; (80035e0 <HAL_InitTick+0x58>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	4619      	mov	r1, r3
 800359a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800359e:	fbb3 f3f1 	udiv	r3, r3, r1
 80035a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a6:	4618      	mov	r0, r3
 80035a8:	f000 fd71 	bl	800408e <HAL_SYSTICK_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e00e      	b.n	80035d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b0f      	cmp	r3, #15
 80035ba:	d80a      	bhi.n	80035d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035bc:	2200      	movs	r2, #0
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	f04f 30ff 	mov.w	r0, #4294967295
 80035c4:	f000 fd39 	bl	800403a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035c8:	4a06      	ldr	r2, [pc, #24]	; (80035e4 <HAL_InitTick+0x5c>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
 80035d0:	e000      	b.n	80035d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	20000004 	.word	0x20000004
 80035e0:	2000000c 	.word	0x2000000c
 80035e4:	20000008 	.word	0x20000008

080035e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_IncTick+0x20>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_IncTick+0x24>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4413      	add	r3, r2
 80035f8:	4a04      	ldr	r2, [pc, #16]	; (800360c <HAL_IncTick+0x24>)
 80035fa:	6013      	str	r3, [r2, #0]
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	2000000c 	.word	0x2000000c
 800360c:	2005aa4c 	.word	0x2005aa4c

08003610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  return uwTick;
 8003614:	4b03      	ldr	r3, [pc, #12]	; (8003624 <HAL_GetTick+0x14>)
 8003616:	681b      	ldr	r3, [r3, #0]
}
 8003618:	4618      	mov	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	2005aa4c 	.word	0x2005aa4c

08003628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7ff ffee 	bl	8003610 <HAL_GetTick>
 8003634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d005      	beq.n	800364e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003642:	4b09      	ldr	r3, [pc, #36]	; (8003668 <HAL_Delay+0x40>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	4413      	add	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800364e:	bf00      	nop
 8003650:	f7ff ffde 	bl	8003610 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	429a      	cmp	r2, r3
 800365e:	d8f7      	bhi.n	8003650 <HAL_Delay+0x28>
  {
  }
}
 8003660:	bf00      	nop
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	2000000c 	.word	0x2000000c

0800366c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003674:	2300      	movs	r3, #0
 8003676:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e031      	b.n	80036e6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d109      	bne.n	800369e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff f9aa 	bl	80029e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d116      	bne.n	80036d8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ae:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_ADC_Init+0x84>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	f043 0202 	orr.w	r2, r3, #2
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 fa66 	bl	8003b8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	f023 0303 	bic.w	r3, r3, #3
 80036ce:	f043 0201 	orr.w	r2, r3, #1
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
 80036d6:	e001      	b.n	80036dc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	ffffeefd 	.word	0xffffeefd

080036f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_ADC_Start_DMA+0x1e>
 800370e:	2302      	movs	r3, #2
 8003710:	e0c7      	b.n	80038a2 <HAL_ADC_Start_DMA+0x1ae>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b01      	cmp	r3, #1
 8003726:	d018      	beq.n	800375a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003738:	4b5c      	ldr	r3, [pc, #368]	; (80038ac <HAL_ADC_Start_DMA+0x1b8>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a5c      	ldr	r2, [pc, #368]	; (80038b0 <HAL_ADC_Start_DMA+0x1bc>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0c9a      	lsrs	r2, r3, #18
 8003744:	4613      	mov	r3, r2
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	4413      	add	r3, r2
 800374a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800374c:	e002      	b.n	8003754 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	3b01      	subs	r3, #1
 8003752:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f9      	bne.n	800374e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b01      	cmp	r3, #1
 8003766:	f040 809b 	bne.w	80038a0 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800376e:	4b51      	ldr	r3, [pc, #324]	; (80038b4 <HAL_ADC_Start_DMA+0x1c0>)
 8003770:	4013      	ands	r3, r2
 8003772:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003784:	2b00      	cmp	r3, #0
 8003786:	d007      	beq.n	8003798 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003790:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a4:	d106      	bne.n	80037b4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f023 0206 	bic.w	r2, r3, #6
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
 80037b2:	e002      	b.n	80037ba <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	4a3c      	ldr	r2, [pc, #240]	; (80038b8 <HAL_ADC_Start_DMA+0x1c4>)
 80037c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	4a3b      	ldr	r2, [pc, #236]	; (80038bc <HAL_ADC_Start_DMA+0x1c8>)
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d6:	4a3a      	ldr	r2, [pc, #232]	; (80038c0 <HAL_ADC_Start_DMA+0x1cc>)
 80037d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80037f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003802:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	334c      	adds	r3, #76	; 0x4c
 800380e:	4619      	mov	r1, r3
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f000 fcf6 	bl	8004204 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003818:	4b2a      	ldr	r3, [pc, #168]	; (80038c4 <HAL_ADC_Start_DMA+0x1d0>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10f      	bne.n	8003844 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d136      	bne.n	80038a0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	e02d      	b.n	80038a0 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1f      	ldr	r2, [pc, #124]	; (80038c8 <HAL_ADC_Start_DMA+0x1d4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10e      	bne.n	800386c <HAL_ADC_Start_DMA+0x178>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d107      	bne.n	800386c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800386a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <HAL_ADC_Start_DMA+0x1d0>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d113      	bne.n	80038a0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a13      	ldr	r2, [pc, #76]	; (80038cc <HAL_ADC_Start_DMA+0x1d8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d10e      	bne.n	80038a0 <HAL_ADC_Start_DMA+0x1ac>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d107      	bne.n	80038a0 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800389e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000004 	.word	0x20000004
 80038b0:	431bde83 	.word	0x431bde83
 80038b4:	fffff8fe 	.word	0xfffff8fe
 80038b8:	08003d81 	.word	0x08003d81
 80038bc:	08003e3b 	.word	0x08003e3b
 80038c0:	08003e57 	.word	0x08003e57
 80038c4:	40012300 	.word	0x40012300
 80038c8:	40012000 	.word	0x40012000
 80038cc:	40012200 	.word	0x40012200

080038d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x1c>
 8003910:	2302      	movs	r3, #2
 8003912:	e12a      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x272>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b09      	cmp	r3, #9
 8003922:	d93a      	bls.n	800399a <HAL_ADC_ConfigChannel+0xa2>
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800392c:	d035      	beq.n	800399a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68d9      	ldr	r1, [r3, #12]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	b29b      	uxth	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	4613      	mov	r3, r2
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	4413      	add	r3, r2
 8003942:	3b1e      	subs	r3, #30
 8003944:	2207      	movs	r2, #7
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43da      	mvns	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	400a      	ands	r2, r1
 8003952:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a87      	ldr	r2, [pc, #540]	; (8003b78 <HAL_ADC_ConfigChannel+0x280>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d10a      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68d9      	ldr	r1, [r3, #12]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	061a      	lsls	r2, r3, #24
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	430a      	orrs	r2, r1
 8003970:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003972:	e035      	b.n	80039e0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68d9      	ldr	r1, [r3, #12]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	689a      	ldr	r2, [r3, #8]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	b29b      	uxth	r3, r3
 8003984:	4618      	mov	r0, r3
 8003986:	4603      	mov	r3, r0
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	4403      	add	r3, r0
 800398c:	3b1e      	subs	r3, #30
 800398e:	409a      	lsls	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003998:	e022      	b.n	80039e0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6919      	ldr	r1, [r3, #16]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	2207      	movs	r2, #7
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	43da      	mvns	r2, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	400a      	ands	r2, r1
 80039bc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6919      	ldr	r1, [r3, #16]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	4618      	mov	r0, r3
 80039d0:	4603      	mov	r3, r0
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4403      	add	r3, r0
 80039d6:	409a      	lsls	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b06      	cmp	r3, #6
 80039e6:	d824      	bhi.n	8003a32 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	3b05      	subs	r3, #5
 80039fa:	221f      	movs	r2, #31
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43da      	mvns	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	400a      	ands	r2, r1
 8003a08:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	4618      	mov	r0, r3
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4413      	add	r3, r2
 8003a22:	3b05      	subs	r3, #5
 8003a24:	fa00 f203 	lsl.w	r2, r0, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	635a      	str	r2, [r3, #52]	; 0x34
 8003a30:	e04c      	b.n	8003acc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b0c      	cmp	r3, #12
 8003a38:	d824      	bhi.n	8003a84 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	3b23      	subs	r3, #35	; 0x23
 8003a4c:	221f      	movs	r2, #31
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43da      	mvns	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	400a      	ands	r2, r1
 8003a5a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	4618      	mov	r0, r3
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4413      	add	r3, r2
 8003a74:	3b23      	subs	r3, #35	; 0x23
 8003a76:	fa00 f203 	lsl.w	r2, r0, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	631a      	str	r2, [r3, #48]	; 0x30
 8003a82:	e023      	b.n	8003acc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	3b41      	subs	r3, #65	; 0x41
 8003a96:	221f      	movs	r2, #31
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43da      	mvns	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	400a      	ands	r2, r1
 8003aa4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685a      	ldr	r2, [r3, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	3b41      	subs	r3, #65	; 0x41
 8003ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <HAL_ADC_ConfigChannel+0x284>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d10a      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x1f4>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ade:	d105      	bne.n	8003aec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003ae0:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <HAL_ADC_ConfigChannel+0x288>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a26      	ldr	r2, [pc, #152]	; (8003b80 <HAL_ADC_ConfigChannel+0x288>)
 8003ae6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003aea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <HAL_ADC_ConfigChannel+0x284>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d109      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x212>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b12      	cmp	r3, #18
 8003afc:	d105      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003afe:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <HAL_ADC_ConfigChannel+0x288>)
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	4a1f      	ldr	r2, [pc, #124]	; (8003b80 <HAL_ADC_ConfigChannel+0x288>)
 8003b04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b08:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <HAL_ADC_ConfigChannel+0x284>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d125      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x268>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <HAL_ADC_ConfigChannel+0x280>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d003      	beq.n	8003b26 <HAL_ADC_ConfigChannel+0x22e>
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b11      	cmp	r3, #17
 8003b24:	d11c      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003b26:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <HAL_ADC_ConfigChannel+0x288>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <HAL_ADC_ConfigChannel+0x288>)
 8003b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003b30:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a10      	ldr	r2, [pc, #64]	; (8003b78 <HAL_ADC_ConfigChannel+0x280>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d111      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <HAL_ADC_ConfigChannel+0x28c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a11      	ldr	r2, [pc, #68]	; (8003b88 <HAL_ADC_ConfigChannel+0x290>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	0c9a      	lsrs	r2, r3, #18
 8003b48:	4613      	mov	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	005b      	lsls	r3, r3, #1
 8003b50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b52:	e002      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f9      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	10000012 	.word	0x10000012
 8003b7c:	40012000 	.word	0x40012000
 8003b80:	40012300 	.word	0x40012300
 8003b84:	20000004 	.word	0x20000004
 8003b88:	431bde83 	.word	0x431bde83

08003b8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003b94:	4b78      	ldr	r3, [pc, #480]	; (8003d78 <ADC_Init+0x1ec>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a77      	ldr	r2, [pc, #476]	; (8003d78 <ADC_Init+0x1ec>)
 8003b9a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003b9e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003ba0:	4b75      	ldr	r3, [pc, #468]	; (8003d78 <ADC_Init+0x1ec>)
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4973      	ldr	r1, [pc, #460]	; (8003d78 <ADC_Init+0x1ec>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6859      	ldr	r1, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	021a      	lsls	r2, r3, #8
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003be0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6859      	ldr	r1, [r3, #4]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6899      	ldr	r1, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1a:	4a58      	ldr	r2, [pc, #352]	; (8003d7c <ADC_Init+0x1f0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d022      	beq.n	8003c66 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6899      	ldr	r1, [r3, #8]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6899      	ldr	r1, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	e00f      	b.n	8003c86 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 0202 	bic.w	r2, r2, #2
 8003c94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6899      	ldr	r1, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	005a      	lsls	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d01b      	beq.n	8003cec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6859      	ldr	r1, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	035a      	lsls	r2, r3, #13
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	e007      	b.n	8003cfc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	051a      	lsls	r2, r3, #20
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6899      	ldr	r1, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d3e:	025a      	lsls	r2, r3, #9
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6899      	ldr	r1, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	029a      	lsls	r2, r3, #10
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	609a      	str	r2, [r3, #8]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	40012300 	.word	0x40012300
 8003d7c:	0f000001 	.word	0x0f000001

08003d80 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d13c      	bne.n	8003e14 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d12b      	bne.n	8003e0c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d127      	bne.n	8003e0c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d006      	beq.n	8003dd8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d119      	bne.n	8003e0c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0220 	bic.w	r2, r2, #32
 8003de6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f7fe f845 	bl	8001e9c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003e12:	e00e      	b.n	8003e32 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff fd5f 	bl	80038e4 <HAL_ADC_ErrorCallback>
}
 8003e26:	e004      	b.n	8003e32 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff fd41 	bl	80038d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2240      	movs	r2, #64	; 0x40
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	f043 0204 	orr.w	r2, r3, #4
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f7ff fd34 	bl	80038e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e7c:	bf00      	nop
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003eac:	4b06      	ldr	r3, [pc, #24]	; (8003ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eb2:	4a04      	ldr	r2, [pc, #16]	; (8003ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	60d3      	str	r3, [r2, #12]
}
 8003eb8:	bf00      	nop
 8003eba:	3714      	adds	r7, #20
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000ed00 	.word	0xe000ed00
 8003ec8:	05fa0000 	.word	0x05fa0000

08003ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ed0:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	0a1b      	lsrs	r3, r3, #8
 8003ed6:	f003 0307 	and.w	r3, r3, #7
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00

08003ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	db0b      	blt.n	8003f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	f003 021f 	and.w	r2, r3, #31
 8003f00:	4907      	ldr	r1, [pc, #28]	; (8003f20 <__NVIC_EnableIRQ+0x38>)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	2001      	movs	r0, #1
 8003f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000e100 	.word	0xe000e100

08003f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b083      	sub	sp, #12
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	db0a      	blt.n	8003f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	490c      	ldr	r1, [pc, #48]	; (8003f70 <__NVIC_SetPriority+0x4c>)
 8003f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f42:	0112      	lsls	r2, r2, #4
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	440b      	add	r3, r1
 8003f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f4c:	e00a      	b.n	8003f64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	4908      	ldr	r1, [pc, #32]	; (8003f74 <__NVIC_SetPriority+0x50>)
 8003f54:	79fb      	ldrb	r3, [r7, #7]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	3b04      	subs	r3, #4
 8003f5c:	0112      	lsls	r2, r2, #4
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	440b      	add	r3, r1
 8003f62:	761a      	strb	r2, [r3, #24]
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000e100 	.word	0xe000e100
 8003f74:	e000ed00 	.word	0xe000ed00

08003f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b089      	sub	sp, #36	; 0x24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f003 0307 	and.w	r3, r3, #7
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f1c3 0307 	rsb	r3, r3, #7
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	bf28      	it	cs
 8003f96:	2304      	movcs	r3, #4
 8003f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	2b06      	cmp	r3, #6
 8003fa0:	d902      	bls.n	8003fa8 <NVIC_EncodePriority+0x30>
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3b03      	subs	r3, #3
 8003fa6:	e000      	b.n	8003faa <NVIC_EncodePriority+0x32>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fac:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43da      	mvns	r2, r3
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	401a      	ands	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	43d9      	mvns	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fd0:	4313      	orrs	r3, r2
         );
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3724      	adds	r7, #36	; 0x24
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
	...

08003fe0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ff0:	d301      	bcc.n	8003ff6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e00f      	b.n	8004016 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <SysTick_Config+0x40>)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ffe:	210f      	movs	r1, #15
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	f7ff ff8e 	bl	8003f24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004008:	4b05      	ldr	r3, [pc, #20]	; (8004020 <SysTick_Config+0x40>)
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <SysTick_Config+0x40>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	e000e010 	.word	0xe000e010

08004024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ff29 	bl	8003e84 <__NVIC_SetPriorityGrouping>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	4603      	mov	r3, r0
 8004042:	60b9      	str	r1, [r7, #8]
 8004044:	607a      	str	r2, [r7, #4]
 8004046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004048:	2300      	movs	r3, #0
 800404a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800404c:	f7ff ff3e 	bl	8003ecc <__NVIC_GetPriorityGrouping>
 8004050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	68b9      	ldr	r1, [r7, #8]
 8004056:	6978      	ldr	r0, [r7, #20]
 8004058:	f7ff ff8e 	bl	8003f78 <NVIC_EncodePriority>
 800405c:	4602      	mov	r2, r0
 800405e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff ff5d 	bl	8003f24 <__NVIC_SetPriority>
}
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b082      	sub	sp, #8
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800407c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff ff31 	bl	8003ee8 <__NVIC_EnableIRQ>
}
 8004086:	bf00      	nop
 8004088:	3708      	adds	r7, #8
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}

0800408e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b082      	sub	sp, #8
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffa2 	bl	8003fe0 <SysTick_Config>
 800409c:	4603      	mov	r3, r0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
	...

080040a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7ff faac 	bl	8003610 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e099      	b.n	80041f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2202      	movs	r2, #2
 80040d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0201 	bic.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040e4:	e00f      	b.n	8004106 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040e6:	f7ff fa93 	bl	8003610 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b05      	cmp	r3, #5
 80040f2:	d908      	bls.n	8004106 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2203      	movs	r2, #3
 80040fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e078      	b.n	80041f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e8      	bne.n	80040e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4b38      	ldr	r3, [pc, #224]	; (8004200 <HAL_DMA_Init+0x158>)
 8004120:	4013      	ands	r3, r2
 8004122:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004132:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800413e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800414a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	2b04      	cmp	r3, #4
 800415e:	d107      	bne.n	8004170 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	4313      	orrs	r3, r2
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 0307 	bic.w	r3, r3, #7
 8004186:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	4313      	orrs	r3, r2
 8004190:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	2b04      	cmp	r3, #4
 8004198:	d117      	bne.n	80041ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00e      	beq.n	80041ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fa99 	bl	80046e4 <DMA_CheckFifoParam>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d008      	beq.n	80041ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2240      	movs	r2, #64	; 0x40
 80041bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041c6:	2301      	movs	r3, #1
 80041c8:	e016      	b.n	80041f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fa50 	bl	8004678 <DMA_CalcBaseAndBitshift>
 80041d8:	4603      	mov	r3, r0
 80041da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	223f      	movs	r2, #63	; 0x3f
 80041e2:	409a      	lsls	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	e010803f 	.word	0xe010803f

08004204 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004222:	2b01      	cmp	r3, #1
 8004224:	d101      	bne.n	800422a <HAL_DMA_Start_IT+0x26>
 8004226:	2302      	movs	r3, #2
 8004228:	e048      	b.n	80042bc <HAL_DMA_Start_IT+0xb8>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d137      	bne.n	80042ae <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2202      	movs	r2, #2
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f9e2 	bl	800461c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800425c:	223f      	movs	r2, #63	; 0x3f
 800425e:	409a      	lsls	r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0216 	orr.w	r2, r2, #22
 8004272:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695a      	ldr	r2, [r3, #20]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004282:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0208 	orr.w	r2, r2, #8
 800429a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f042 0201 	orr.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e005      	b.n	80042ba <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80042b6:	2302      	movs	r3, #2
 80042b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d004      	beq.n	80042e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e00c      	b.n	80042fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2205      	movs	r2, #5
 80042e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 0201 	bic.w	r2, r2, #1
 80042f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004314:	4b92      	ldr	r3, [pc, #584]	; (8004560 <HAL_DMA_IRQHandler+0x258>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a92      	ldr	r2, [pc, #584]	; (8004564 <HAL_DMA_IRQHandler+0x25c>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	0a9b      	lsrs	r3, r3, #10
 8004320:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004326:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004332:	2208      	movs	r2, #8
 8004334:	409a      	lsls	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	4013      	ands	r3, r2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d01a      	beq.n	8004374 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f022 0204 	bic.w	r2, r2, #4
 800435a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	2208      	movs	r2, #8
 8004362:	409a      	lsls	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	f043 0201 	orr.w	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	2201      	movs	r2, #1
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d012      	beq.n	80043aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	2201      	movs	r2, #1
 8004398:	409a      	lsls	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f043 0202 	orr.w	r2, r3, #2
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ae:	2204      	movs	r2, #4
 80043b0:	409a      	lsls	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4013      	ands	r3, r2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d012      	beq.n	80043e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00b      	beq.n	80043e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	2204      	movs	r2, #4
 80043ce:	409a      	lsls	r2, r3
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f043 0204 	orr.w	r2, r3, #4
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e4:	2210      	movs	r2, #16
 80043e6:	409a      	lsls	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d043      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0308 	and.w	r3, r3, #8
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d03c      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004402:	2210      	movs	r2, #16
 8004404:	409a      	lsls	r2, r3
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d018      	beq.n	800444a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d108      	bne.n	8004438 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d024      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	4798      	blx	r3
 8004436:	e01f      	b.n	8004478 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800443c:	2b00      	cmp	r3, #0
 800443e:	d01b      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	4798      	blx	r3
 8004448:	e016      	b.n	8004478 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d107      	bne.n	8004468 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0208 	bic.w	r2, r2, #8
 8004466:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446c:	2b00      	cmp	r3, #0
 800446e:	d003      	beq.n	8004478 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800447c:	2220      	movs	r2, #32
 800447e:	409a      	lsls	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 808e 	beq.w	80045a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8086 	beq.w	80045a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449e:	2220      	movs	r2, #32
 80044a0:	409a      	lsls	r2, r3
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d136      	bne.n	8004520 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0216 	bic.w	r2, r2, #22
 80044c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d103      	bne.n	80044e2 <HAL_DMA_IRQHandler+0x1da>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0208 	bic.w	r2, r2, #8
 80044f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f6:	223f      	movs	r2, #63	; 0x3f
 80044f8:	409a      	lsls	r2, r3
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004512:	2b00      	cmp	r3, #0
 8004514:	d07d      	beq.n	8004612 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	4798      	blx	r3
        }
        return;
 800451e:	e078      	b.n	8004612 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d01c      	beq.n	8004568 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d108      	bne.n	800454e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004540:	2b00      	cmp	r3, #0
 8004542:	d030      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
 800454c:	e02b      	b.n	80045a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d027      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
 800455e:	e022      	b.n	80045a6 <HAL_DMA_IRQHandler+0x29e>
 8004560:	20000004 	.word	0x20000004
 8004564:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10f      	bne.n	8004596 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f022 0210 	bic.w	r2, r2, #16
 8004584:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d003      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d032      	beq.n	8004614 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d022      	beq.n	8004600 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2205      	movs	r2, #5
 80045be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	3301      	adds	r3, #1
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d307      	bcc.n	80045ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1f2      	bne.n	80045d2 <HAL_DMA_IRQHandler+0x2ca>
 80045ec:	e000      	b.n	80045f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80045ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	4798      	blx	r3
 8004610:	e000      	b.n	8004614 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004612:	bf00      	nop
    }
  }
}
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop

0800461c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004638:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	d108      	bne.n	800465c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800465a:	e007      	b.n	800466c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68ba      	ldr	r2, [r7, #8]
 8004662:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	60da      	str	r2, [r3, #12]
}
 800466c:	bf00      	nop
 800466e:	3714      	adds	r7, #20
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	b2db      	uxtb	r3, r3
 8004686:	3b10      	subs	r3, #16
 8004688:	4a13      	ldr	r2, [pc, #76]	; (80046d8 <DMA_CalcBaseAndBitshift+0x60>)
 800468a:	fba2 2303 	umull	r2, r3, r2, r3
 800468e:	091b      	lsrs	r3, r3, #4
 8004690:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004692:	4a12      	ldr	r2, [pc, #72]	; (80046dc <DMA_CalcBaseAndBitshift+0x64>)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	461a      	mov	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d908      	bls.n	80046b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <DMA_CalcBaseAndBitshift+0x68>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	1d1a      	adds	r2, r3, #4
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	659a      	str	r2, [r3, #88]	; 0x58
 80046b6:	e006      	b.n	80046c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	4b08      	ldr	r3, [pc, #32]	; (80046e0 <DMA_CalcBaseAndBitshift+0x68>)
 80046c0:	4013      	ands	r3, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	aaaaaaab 	.word	0xaaaaaaab
 80046dc:	0800a4e8 	.word	0x0800a4e8
 80046e0:	fffffc00 	.word	0xfffffc00

080046e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d11f      	bne.n	800473e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2b03      	cmp	r3, #3
 8004702:	d855      	bhi.n	80047b0 <DMA_CheckFifoParam+0xcc>
 8004704:	a201      	add	r2, pc, #4	; (adr r2, 800470c <DMA_CheckFifoParam+0x28>)
 8004706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470a:	bf00      	nop
 800470c:	0800471d 	.word	0x0800471d
 8004710:	0800472f 	.word	0x0800472f
 8004714:	0800471d 	.word	0x0800471d
 8004718:	080047b1 	.word	0x080047b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004720:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d045      	beq.n	80047b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800472c:	e042      	b.n	80047b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004736:	d13f      	bne.n	80047b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800473c:	e03c      	b.n	80047b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004746:	d121      	bne.n	800478c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	2b03      	cmp	r3, #3
 800474c:	d836      	bhi.n	80047bc <DMA_CheckFifoParam+0xd8>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <DMA_CheckFifoParam+0x70>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004765 	.word	0x08004765
 8004758:	0800476b 	.word	0x0800476b
 800475c:	08004765 	.word	0x08004765
 8004760:	0800477d 	.word	0x0800477d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
      break;
 8004768:	e02f      	b.n	80047ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d024      	beq.n	80047c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800477a:	e021      	b.n	80047c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004784:	d11e      	bne.n	80047c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800478a:	e01b      	b.n	80047c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d902      	bls.n	8004798 <DMA_CheckFifoParam+0xb4>
 8004792:	2b03      	cmp	r3, #3
 8004794:	d003      	beq.n	800479e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004796:	e018      	b.n	80047ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	73fb      	strb	r3, [r7, #15]
      break;
 800479c:	e015      	b.n	80047ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00e      	beq.n	80047c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
      break;
 80047ae:	e00b      	b.n	80047c8 <DMA_CheckFifoParam+0xe4>
      break;
 80047b0:	bf00      	nop
 80047b2:	e00a      	b.n	80047ca <DMA_CheckFifoParam+0xe6>
      break;
 80047b4:	bf00      	nop
 80047b6:	e008      	b.n	80047ca <DMA_CheckFifoParam+0xe6>
      break;
 80047b8:	bf00      	nop
 80047ba:	e006      	b.n	80047ca <DMA_CheckFifoParam+0xe6>
      break;
 80047bc:	bf00      	nop
 80047be:	e004      	b.n	80047ca <DMA_CheckFifoParam+0xe6>
      break;
 80047c0:	bf00      	nop
 80047c2:	e002      	b.n	80047ca <DMA_CheckFifoParam+0xe6>
      break;   
 80047c4:	bf00      	nop
 80047c6:	e000      	b.n	80047ca <DMA_CheckFifoParam+0xe6>
      break;
 80047c8:	bf00      	nop
    }
  } 
  
  return status; 
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3714      	adds	r7, #20
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047d8:	b480      	push	{r7}
 80047da:	b089      	sub	sp, #36	; 0x24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80047e2:	2300      	movs	r3, #0
 80047e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80047e6:	2300      	movs	r3, #0
 80047e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80047ea:	2300      	movs	r3, #0
 80047ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80047ee:	2300      	movs	r3, #0
 80047f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80047f2:	2300      	movs	r3, #0
 80047f4:	61fb      	str	r3, [r7, #28]
 80047f6:	e175      	b.n	8004ae4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80047f8:	2201      	movs	r2, #1
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4013      	ands	r3, r2
 800480a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	429a      	cmp	r2, r3
 8004812:	f040 8164 	bne.w	8004ade <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d00b      	beq.n	8004836 <HAL_GPIO_Init+0x5e>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d007      	beq.n	8004836 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800482a:	2b11      	cmp	r3, #17
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	2b12      	cmp	r3, #18
 8004834:	d130      	bne.n	8004898 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	2203      	movs	r2, #3
 8004842:	fa02 f303 	lsl.w	r3, r2, r3
 8004846:	43db      	mvns	r3, r3
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	4013      	ands	r3, r2
 800484c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68da      	ldr	r2, [r3, #12]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69ba      	ldr	r2, [r7, #24]
 8004864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800486c:	2201      	movs	r2, #1
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	f003 0201 	and.w	r2, r3, #1
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	2203      	movs	r2, #3
 80048a4:	fa02 f303 	lsl.w	r3, r2, r3
 80048a8:	43db      	mvns	r3, r3
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	4013      	ands	r3, r2
 80048ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	689a      	ldr	r2, [r3, #8]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d003      	beq.n	80048d8 <HAL_GPIO_Init+0x100>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b12      	cmp	r3, #18
 80048d6:	d123      	bne.n	8004920 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	08da      	lsrs	r2, r3, #3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3208      	adds	r2, #8
 80048e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	220f      	movs	r2, #15
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4013      	ands	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	691a      	ldr	r2, [r3, #16]
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f003 0307 	and.w	r3, r3, #7
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	08da      	lsrs	r2, r3, #3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3208      	adds	r2, #8
 800491a:	69b9      	ldr	r1, [r7, #24]
 800491c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	2203      	movs	r2, #3
 800492c:	fa02 f303 	lsl.w	r3, r2, r3
 8004930:	43db      	mvns	r3, r3
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4013      	ands	r3, r2
 8004936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 0203 	and.w	r2, r3, #3
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	fa02 f303 	lsl.w	r3, r2, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4313      	orrs	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495c:	2b00      	cmp	r3, #0
 800495e:	f000 80be 	beq.w	8004ade <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004962:	4b65      	ldr	r3, [pc, #404]	; (8004af8 <HAL_GPIO_Init+0x320>)
 8004964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004966:	4a64      	ldr	r2, [pc, #400]	; (8004af8 <HAL_GPIO_Init+0x320>)
 8004968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800496c:	6453      	str	r3, [r2, #68]	; 0x44
 800496e:	4b62      	ldr	r3, [pc, #392]	; (8004af8 <HAL_GPIO_Init+0x320>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800497a:	4a60      	ldr	r2, [pc, #384]	; (8004afc <HAL_GPIO_Init+0x324>)
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	089b      	lsrs	r3, r3, #2
 8004980:	3302      	adds	r3, #2
 8004982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004986:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 0303 	and.w	r3, r3, #3
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	220f      	movs	r2, #15
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	43db      	mvns	r3, r3
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	4013      	ands	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a57      	ldr	r2, [pc, #348]	; (8004b00 <HAL_GPIO_Init+0x328>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d037      	beq.n	8004a16 <HAL_GPIO_Init+0x23e>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a56      	ldr	r2, [pc, #344]	; (8004b04 <HAL_GPIO_Init+0x32c>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d031      	beq.n	8004a12 <HAL_GPIO_Init+0x23a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a55      	ldr	r2, [pc, #340]	; (8004b08 <HAL_GPIO_Init+0x330>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d02b      	beq.n	8004a0e <HAL_GPIO_Init+0x236>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a54      	ldr	r2, [pc, #336]	; (8004b0c <HAL_GPIO_Init+0x334>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d025      	beq.n	8004a0a <HAL_GPIO_Init+0x232>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a53      	ldr	r2, [pc, #332]	; (8004b10 <HAL_GPIO_Init+0x338>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d01f      	beq.n	8004a06 <HAL_GPIO_Init+0x22e>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a52      	ldr	r2, [pc, #328]	; (8004b14 <HAL_GPIO_Init+0x33c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d019      	beq.n	8004a02 <HAL_GPIO_Init+0x22a>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a51      	ldr	r2, [pc, #324]	; (8004b18 <HAL_GPIO_Init+0x340>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d013      	beq.n	80049fe <HAL_GPIO_Init+0x226>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a50      	ldr	r2, [pc, #320]	; (8004b1c <HAL_GPIO_Init+0x344>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00d      	beq.n	80049fa <HAL_GPIO_Init+0x222>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a4f      	ldr	r2, [pc, #316]	; (8004b20 <HAL_GPIO_Init+0x348>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <HAL_GPIO_Init+0x21e>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a4e      	ldr	r2, [pc, #312]	; (8004b24 <HAL_GPIO_Init+0x34c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d101      	bne.n	80049f2 <HAL_GPIO_Init+0x21a>
 80049ee:	2309      	movs	r3, #9
 80049f0:	e012      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 80049f2:	230a      	movs	r3, #10
 80049f4:	e010      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 80049f6:	2308      	movs	r3, #8
 80049f8:	e00e      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 80049fa:	2307      	movs	r3, #7
 80049fc:	e00c      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 80049fe:	2306      	movs	r3, #6
 8004a00:	e00a      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a02:	2305      	movs	r3, #5
 8004a04:	e008      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a06:	2304      	movs	r3, #4
 8004a08:	e006      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e004      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e002      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <HAL_GPIO_Init+0x240>
 8004a16:	2300      	movs	r3, #0
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	f002 0203 	and.w	r2, r2, #3
 8004a1e:	0092      	lsls	r2, r2, #2
 8004a20:	4093      	lsls	r3, r2
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a28:	4934      	ldr	r1, [pc, #208]	; (8004afc <HAL_GPIO_Init+0x324>)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	3302      	adds	r3, #2
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a36:	4b3c      	ldr	r3, [pc, #240]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a5a:	4a33      	ldr	r2, [pc, #204]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a60:	4b31      	ldr	r3, [pc, #196]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a84:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a8a:	4b27      	ldr	r3, [pc, #156]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aae:	4a1e      	ldr	r2, [pc, #120]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ab4:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ad8:	4a13      	ldr	r2, [pc, #76]	; (8004b28 <HAL_GPIO_Init+0x350>)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	f67f ae86 	bls.w	80047f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004aec:	bf00      	nop
 8004aee:	3724      	adds	r7, #36	; 0x24
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40013800 	.word	0x40013800
 8004b00:	40020000 	.word	0x40020000
 8004b04:	40020400 	.word	0x40020400
 8004b08:	40020800 	.word	0x40020800
 8004b0c:	40020c00 	.word	0x40020c00
 8004b10:	40021000 	.word	0x40021000
 8004b14:	40021400 	.word	0x40021400
 8004b18:	40021800 	.word	0x40021800
 8004b1c:	40021c00 	.word	0x40021c00
 8004b20:	40022000 	.word	0x40022000
 8004b24:	40022400 	.word	0x40022400
 8004b28:	40013c00 	.word	0x40013c00

08004b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b3c:	787b      	ldrb	r3, [r7, #1]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b48:	e003      	b.n	8004b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b4a:	887b      	ldrh	r3, [r7, #2]
 8004b4c:	041a      	lsls	r2, r3, #16
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	619a      	str	r2, [r3, #24]
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d101      	bne.n	8004b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e07f      	b.n	8004c72 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d106      	bne.n	8004b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7fd ff9e 	bl	8002ac8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2224      	movs	r2, #36	; 0x24
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0201 	bic.w	r2, r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bb0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bc0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d107      	bne.n	8004bda <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bd6:	609a      	str	r2, [r3, #8]
 8004bd8:	e006      	b.n	8004be8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	689a      	ldr	r2, [r3, #8]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004be6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	2b02      	cmp	r3, #2
 8004bee:	d104      	bne.n	8004bfa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bf8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6859      	ldr	r1, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	4b1d      	ldr	r3, [pc, #116]	; (8004c7c <HAL_I2C_Init+0x11c>)
 8004c06:	430b      	orrs	r3, r1
 8004c08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	ea42 0103 	orr.w	r1, r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	69d9      	ldr	r1, [r3, #28]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2220      	movs	r2, #32
 8004c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	02008000 	.word	0x02008000

08004c80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d138      	bne.n	8004d08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	e032      	b.n	8004d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2224      	movs	r2, #36	; 0x24
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cd2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6819      	ldr	r1, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	e000      	b.n	8004d0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
  }
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	370c      	adds	r7, #12
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b085      	sub	sp, #20
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	6078      	str	r0, [r7, #4]
 8004d1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d139      	bne.n	8004da0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d101      	bne.n	8004d3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d36:	2302      	movs	r3, #2
 8004d38:	e033      	b.n	8004da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2224      	movs	r2, #36	; 0x24
 8004d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0201 	bic.w	r2, r2, #1
 8004d58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0201 	orr.w	r2, r2, #1
 8004d8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	e000      	b.n	8004da2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004da0:	2302      	movs	r3, #2
  }
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a04      	ldr	r2, [pc, #16]	; (8004dcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dbe:	6013      	str	r3, [r2, #0]
}
 8004dc0:	bf00      	nop
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40007000 	.word	0x40007000

08004dd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dda:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <HAL_PWREx_EnableOverDrive+0x98>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	4a22      	ldr	r2, [pc, #136]	; (8004e68 <HAL_PWREx_EnableOverDrive+0x98>)
 8004de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de4:	6413      	str	r3, [r2, #64]	; 0x40
 8004de6:	4b20      	ldr	r3, [pc, #128]	; (8004e68 <HAL_PWREx_EnableOverDrive+0x98>)
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dee:	603b      	str	r3, [r7, #0]
 8004df0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004df2:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1d      	ldr	r2, [pc, #116]	; (8004e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dfe:	f7fe fc07 	bl	8003610 <HAL_GetTick>
 8004e02:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e04:	e009      	b.n	8004e1a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e06:	f7fe fc03 	bl	8003610 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e14:	d901      	bls.n	8004e1a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e022      	b.n	8004e60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e1a:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e26:	d1ee      	bne.n	8004e06 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e28:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a0f      	ldr	r2, [pc, #60]	; (8004e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e34:	f7fe fbec 	bl	8003610 <HAL_GetTick>
 8004e38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e3a:	e009      	b.n	8004e50 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e3c:	f7fe fbe8 	bl	8003610 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e4a:	d901      	bls.n	8004e50 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e007      	b.n	8004e60 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e50:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e5c:	d1ee      	bne.n	8004e3c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40007000 	.word	0x40007000

08004e70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e29b      	b.n	80053be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8087 	beq.w	8004fa2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e94:	4b96      	ldr	r3, [pc, #600]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d00c      	beq.n	8004eba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ea0:	4b93      	ldr	r3, [pc, #588]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 030c 	and.w	r3, r3, #12
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d112      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x62>
 8004eac:	4b90      	ldr	r3, [pc, #576]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eb8:	d10b      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eba:	4b8d      	ldr	r3, [pc, #564]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d06c      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x130>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d168      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e275      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eda:	d106      	bne.n	8004eea <HAL_RCC_OscConfig+0x7a>
 8004edc:	4b84      	ldr	r3, [pc, #528]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a83      	ldr	r2, [pc, #524]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	e02e      	b.n	8004f48 <HAL_RCC_OscConfig+0xd8>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10c      	bne.n	8004f0c <HAL_RCC_OscConfig+0x9c>
 8004ef2:	4b7f      	ldr	r3, [pc, #508]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a7e      	ldr	r2, [pc, #504]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4b7c      	ldr	r3, [pc, #496]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a7b      	ldr	r2, [pc, #492]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	e01d      	b.n	8004f48 <HAL_RCC_OscConfig+0xd8>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f14:	d10c      	bne.n	8004f30 <HAL_RCC_OscConfig+0xc0>
 8004f16:	4b76      	ldr	r3, [pc, #472]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a75      	ldr	r2, [pc, #468]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f20:	6013      	str	r3, [r2, #0]
 8004f22:	4b73      	ldr	r3, [pc, #460]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a72      	ldr	r2, [pc, #456]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e00b      	b.n	8004f48 <HAL_RCC_OscConfig+0xd8>
 8004f30:	4b6f      	ldr	r3, [pc, #444]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a6e      	ldr	r2, [pc, #440]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f3a:	6013      	str	r3, [r2, #0]
 8004f3c:	4b6c      	ldr	r3, [pc, #432]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a6b      	ldr	r2, [pc, #428]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d013      	beq.n	8004f78 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fe fb5e 	bl	8003610 <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f58:	f7fe fb5a 	bl	8003610 <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	; 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e229      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b61      	ldr	r3, [pc, #388]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d0f0      	beq.n	8004f58 <HAL_RCC_OscConfig+0xe8>
 8004f76:	e014      	b.n	8004fa2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f78:	f7fe fb4a 	bl	8003610 <HAL_GetTick>
 8004f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	e008      	b.n	8004f92 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f80:	f7fe fb46 	bl	8003610 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b64      	cmp	r3, #100	; 0x64
 8004f8c:	d901      	bls.n	8004f92 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e215      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f92:	4b57      	ldr	r3, [pc, #348]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f0      	bne.n	8004f80 <HAL_RCC_OscConfig+0x110>
 8004f9e:	e000      	b.n	8004fa2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fa0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d069      	beq.n	8005082 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004fae:	4b50      	ldr	r3, [pc, #320]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 030c 	and.w	r3, r3, #12
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00b      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fba:	4b4d      	ldr	r3, [pc, #308]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	2b08      	cmp	r3, #8
 8004fc4:	d11c      	bne.n	8005000 <HAL_RCC_OscConfig+0x190>
 8004fc6:	4b4a      	ldr	r3, [pc, #296]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d116      	bne.n	8005000 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fd2:	4b47      	ldr	r3, [pc, #284]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d005      	beq.n	8004fea <HAL_RCC_OscConfig+0x17a>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d001      	beq.n	8004fea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e1e9      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fea:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	493d      	ldr	r1, [pc, #244]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ffe:	e040      	b.n	8005082 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d023      	beq.n	8005050 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005008:	4b39      	ldr	r3, [pc, #228]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a38      	ldr	r2, [pc, #224]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 800500e:	f043 0301 	orr.w	r3, r3, #1
 8005012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005014:	f7fe fafc 	bl	8003610 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501a:	e008      	b.n	800502e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800501c:	f7fe faf8 	bl	8003610 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	2b02      	cmp	r3, #2
 8005028:	d901      	bls.n	800502e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e1c7      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800502e:	4b30      	ldr	r3, [pc, #192]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0302 	and.w	r3, r3, #2
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0f0      	beq.n	800501c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800503a:	4b2d      	ldr	r3, [pc, #180]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4929      	ldr	r1, [pc, #164]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 800504a:	4313      	orrs	r3, r2
 800504c:	600b      	str	r3, [r1, #0]
 800504e:	e018      	b.n	8005082 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005050:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a26      	ldr	r2, [pc, #152]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8005056:	f023 0301 	bic.w	r3, r3, #1
 800505a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fe fad8 	bl	8003610 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005064:	f7fe fad4 	bl	8003610 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e1a3      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005076:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d038      	beq.n	8005100 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d019      	beq.n	80050ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005096:	4b16      	ldr	r3, [pc, #88]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 8005098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800509a:	4a15      	ldr	r2, [pc, #84]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 800509c:	f043 0301 	orr.w	r3, r3, #1
 80050a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a2:	f7fe fab5 	bl	8003610 <HAL_GetTick>
 80050a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a8:	e008      	b.n	80050bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050aa:	f7fe fab1 	bl	8003610 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e180      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 80050be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d0f0      	beq.n	80050aa <HAL_RCC_OscConfig+0x23a>
 80050c8:	e01a      	b.n	8005100 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ca:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 80050cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ce:	4a08      	ldr	r2, [pc, #32]	; (80050f0 <HAL_RCC_OscConfig+0x280>)
 80050d0:	f023 0301 	bic.w	r3, r3, #1
 80050d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d6:	f7fe fa9b 	bl	8003610 <HAL_GetTick>
 80050da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050de:	f7fe fa97 	bl	8003610 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	d903      	bls.n	80050f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e166      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
 80050f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f4:	4b92      	ldr	r3, [pc, #584]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80050f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ee      	bne.n	80050de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 80a4 	beq.w	8005256 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800510e:	4b8c      	ldr	r3, [pc, #560]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10d      	bne.n	8005136 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	4b89      	ldr	r3, [pc, #548]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	4a88      	ldr	r2, [pc, #544]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005124:	6413      	str	r3, [r2, #64]	; 0x40
 8005126:	4b86      	ldr	r3, [pc, #536]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005132:	2301      	movs	r3, #1
 8005134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005136:	4b83      	ldr	r3, [pc, #524]	; (8005344 <HAL_RCC_OscConfig+0x4d4>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513e:	2b00      	cmp	r3, #0
 8005140:	d118      	bne.n	8005174 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005142:	4b80      	ldr	r3, [pc, #512]	; (8005344 <HAL_RCC_OscConfig+0x4d4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a7f      	ldr	r2, [pc, #508]	; (8005344 <HAL_RCC_OscConfig+0x4d4>)
 8005148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800514c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514e:	f7fe fa5f 	bl	8003610 <HAL_GetTick>
 8005152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005154:	e008      	b.n	8005168 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005156:	f7fe fa5b 	bl	8003610 <HAL_GetTick>
 800515a:	4602      	mov	r2, r0
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	2b64      	cmp	r3, #100	; 0x64
 8005162:	d901      	bls.n	8005168 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e12a      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005168:	4b76      	ldr	r3, [pc, #472]	; (8005344 <HAL_RCC_OscConfig+0x4d4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005170:	2b00      	cmp	r3, #0
 8005172:	d0f0      	beq.n	8005156 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d106      	bne.n	800518a <HAL_RCC_OscConfig+0x31a>
 800517c:	4b70      	ldr	r3, [pc, #448]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 800517e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005180:	4a6f      	ldr	r2, [pc, #444]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005182:	f043 0301 	orr.w	r3, r3, #1
 8005186:	6713      	str	r3, [r2, #112]	; 0x70
 8005188:	e02d      	b.n	80051e6 <HAL_RCC_OscConfig+0x376>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10c      	bne.n	80051ac <HAL_RCC_OscConfig+0x33c>
 8005192:	4b6b      	ldr	r3, [pc, #428]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	4a6a      	ldr	r2, [pc, #424]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	6713      	str	r3, [r2, #112]	; 0x70
 800519e:	4b68      	ldr	r3, [pc, #416]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80051a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a2:	4a67      	ldr	r2, [pc, #412]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80051a4:	f023 0304 	bic.w	r3, r3, #4
 80051a8:	6713      	str	r3, [r2, #112]	; 0x70
 80051aa:	e01c      	b.n	80051e6 <HAL_RCC_OscConfig+0x376>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b05      	cmp	r3, #5
 80051b2:	d10c      	bne.n	80051ce <HAL_RCC_OscConfig+0x35e>
 80051b4:	4b62      	ldr	r3, [pc, #392]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	4a61      	ldr	r2, [pc, #388]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80051ba:	f043 0304 	orr.w	r3, r3, #4
 80051be:	6713      	str	r3, [r2, #112]	; 0x70
 80051c0:	4b5f      	ldr	r3, [pc, #380]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c4:	4a5e      	ldr	r2, [pc, #376]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80051c6:	f043 0301 	orr.w	r3, r3, #1
 80051ca:	6713      	str	r3, [r2, #112]	; 0x70
 80051cc:	e00b      	b.n	80051e6 <HAL_RCC_OscConfig+0x376>
 80051ce:	4b5c      	ldr	r3, [pc, #368]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051d2:	4a5b      	ldr	r2, [pc, #364]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80051d4:	f023 0301 	bic.w	r3, r3, #1
 80051d8:	6713      	str	r3, [r2, #112]	; 0x70
 80051da:	4b59      	ldr	r3, [pc, #356]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	4a58      	ldr	r2, [pc, #352]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80051e0:	f023 0304 	bic.w	r3, r3, #4
 80051e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d015      	beq.n	800521a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ee:	f7fe fa0f 	bl	8003610 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f4:	e00a      	b.n	800520c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f6:	f7fe fa0b 	bl	8003610 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	f241 3288 	movw	r2, #5000	; 0x1388
 8005204:	4293      	cmp	r3, r2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e0d8      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520c:	4b4c      	ldr	r3, [pc, #304]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 800520e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0ee      	beq.n	80051f6 <HAL_RCC_OscConfig+0x386>
 8005218:	e014      	b.n	8005244 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800521a:	f7fe f9f9 	bl	8003610 <HAL_GetTick>
 800521e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005220:	e00a      	b.n	8005238 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005222:	f7fe f9f5 	bl	8003610 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005230:	4293      	cmp	r3, r2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e0c2      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005238:	4b41      	ldr	r3, [pc, #260]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1ee      	bne.n	8005222 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005244:	7dfb      	ldrb	r3, [r7, #23]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d105      	bne.n	8005256 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524a:	4b3d      	ldr	r3, [pc, #244]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 800524c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800524e:	4a3c      	ldr	r2, [pc, #240]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005254:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 80ae 	beq.w	80053bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005260:	4b37      	ldr	r3, [pc, #220]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	f003 030c 	and.w	r3, r3, #12
 8005268:	2b08      	cmp	r3, #8
 800526a:	d06d      	beq.n	8005348 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	2b02      	cmp	r3, #2
 8005272:	d14b      	bne.n	800530c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005274:	4b32      	ldr	r3, [pc, #200]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a31      	ldr	r2, [pc, #196]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 800527a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800527e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005280:	f7fe f9c6 	bl	8003610 <HAL_GetTick>
 8005284:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005288:	f7fe f9c2 	bl	8003610 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e091      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529a:	4b29      	ldr	r3, [pc, #164]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1f0      	bne.n	8005288 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	69da      	ldr	r2, [r3, #28]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	431a      	orrs	r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	019b      	lsls	r3, r3, #6
 80052b6:	431a      	orrs	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	085b      	lsrs	r3, r3, #1
 80052be:	3b01      	subs	r3, #1
 80052c0:	041b      	lsls	r3, r3, #16
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	061b      	lsls	r3, r3, #24
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d0:	071b      	lsls	r3, r3, #28
 80052d2:	491b      	ldr	r1, [pc, #108]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052d8:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a18      	ldr	r2, [pc, #96]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 80052de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fe f994 	bl	8003610 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ec:	f7fe f990 	bl	8003610 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e05f      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052fe:	4b10      	ldr	r3, [pc, #64]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0x47c>
 800530a:	e057      	b.n	80053bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530c:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0b      	ldr	r2, [pc, #44]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005316:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fe f97a 	bl	8003610 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005320:	f7fe f976 	bl	8003610 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e045      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005332:	4b03      	ldr	r3, [pc, #12]	; (8005340 <HAL_RCC_OscConfig+0x4d0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x4b0>
 800533e:	e03d      	b.n	80053bc <HAL_RCC_OscConfig+0x54c>
 8005340:	40023800 	.word	0x40023800
 8005344:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005348:	4b1f      	ldr	r3, [pc, #124]	; (80053c8 <HAL_RCC_OscConfig+0x558>)
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d030      	beq.n	80053b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d129      	bne.n	80053b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536e:	429a      	cmp	r2, r3
 8005370:	d122      	bne.n	80053b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005378:	4013      	ands	r3, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800537e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005380:	4293      	cmp	r3, r2
 8005382:	d119      	bne.n	80053b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	085b      	lsrs	r3, r3, #1
 8005390:	3b01      	subs	r3, #1
 8005392:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005394:	429a      	cmp	r2, r3
 8005396:	d10f      	bne.n	80053b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d107      	bne.n	80053b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d001      	beq.n	80053bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e000      	b.n	80053be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40023800 	.word	0x40023800

080053cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e0d0      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053e4:	4b6a      	ldr	r3, [pc, #424]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 030f 	and.w	r3, r3, #15
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d910      	bls.n	8005414 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f2:	4b67      	ldr	r3, [pc, #412]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f023 020f 	bic.w	r2, r3, #15
 80053fa:	4965      	ldr	r1, [pc, #404]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	4313      	orrs	r3, r2
 8005400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005402:	4b63      	ldr	r3, [pc, #396]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	429a      	cmp	r2, r3
 800540e:	d001      	beq.n	8005414 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e0b8      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d020      	beq.n	8005462 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800542c:	4b59      	ldr	r3, [pc, #356]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4a58      	ldr	r2, [pc, #352]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 8005432:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005436:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d005      	beq.n	8005450 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005444:	4b53      	ldr	r3, [pc, #332]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	4a52      	ldr	r2, [pc, #328]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 800544a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800544e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005450:	4b50      	ldr	r3, [pc, #320]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	494d      	ldr	r1, [pc, #308]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 800545e:	4313      	orrs	r3, r2
 8005460:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d040      	beq.n	80054f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d107      	bne.n	8005486 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005476:	4b47      	ldr	r3, [pc, #284]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d115      	bne.n	80054ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e07f      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2b02      	cmp	r3, #2
 800548c:	d107      	bne.n	800549e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800548e:	4b41      	ldr	r3, [pc, #260]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e073      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549e:	4b3d      	ldr	r3, [pc, #244]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e06b      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ae:	4b39      	ldr	r3, [pc, #228]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f023 0203 	bic.w	r2, r3, #3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	4936      	ldr	r1, [pc, #216]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 80054bc:	4313      	orrs	r3, r2
 80054be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054c0:	f7fe f8a6 	bl	8003610 <HAL_GetTick>
 80054c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c6:	e00a      	b.n	80054de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c8:	f7fe f8a2 	bl	8003610 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e053      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054de:	4b2d      	ldr	r3, [pc, #180]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	f003 020c 	and.w	r2, r3, #12
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d1eb      	bne.n	80054c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054f0:	4b27      	ldr	r3, [pc, #156]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d210      	bcs.n	8005520 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fe:	4b24      	ldr	r3, [pc, #144]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f023 020f 	bic.w	r2, r3, #15
 8005506:	4922      	ldr	r1, [pc, #136]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	4313      	orrs	r3, r2
 800550c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800550e:	4b20      	ldr	r3, [pc, #128]	; (8005590 <HAL_RCC_ClockConfig+0x1c4>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	683a      	ldr	r2, [r7, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d001      	beq.n	8005520 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e032      	b.n	8005586 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0304 	and.w	r3, r3, #4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800552c:	4b19      	ldr	r3, [pc, #100]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	4916      	ldr	r1, [pc, #88]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 800553a:	4313      	orrs	r3, r2
 800553c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d009      	beq.n	800555e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800554a:	4b12      	ldr	r3, [pc, #72]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	00db      	lsls	r3, r3, #3
 8005558:	490e      	ldr	r1, [pc, #56]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800555e:	f000 f821 	bl	80055a4 <HAL_RCC_GetSysClockFreq>
 8005562:	4601      	mov	r1, r0
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <HAL_RCC_ClockConfig+0x1c8>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	091b      	lsrs	r3, r3, #4
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	4a0a      	ldr	r2, [pc, #40]	; (8005598 <HAL_RCC_ClockConfig+0x1cc>)
 8005570:	5cd3      	ldrb	r3, [r2, r3]
 8005572:	fa21 f303 	lsr.w	r3, r1, r3
 8005576:	4a09      	ldr	r2, [pc, #36]	; (800559c <HAL_RCC_ClockConfig+0x1d0>)
 8005578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800557a:	4b09      	ldr	r3, [pc, #36]	; (80055a0 <HAL_RCC_ClockConfig+0x1d4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f7fe f802 	bl	8003588 <HAL_InitTick>

  return HAL_OK;
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	40023c00 	.word	0x40023c00
 8005594:	40023800 	.word	0x40023800
 8005598:	0800a4d0 	.word	0x0800a4d0
 800559c:	20000004 	.word	0x20000004
 80055a0:	20000008 	.word	0x20000008

080055a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055a6:	b085      	sub	sp, #20
 80055a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80055aa:	2300      	movs	r3, #0
 80055ac:	607b      	str	r3, [r7, #4]
 80055ae:	2300      	movs	r3, #0
 80055b0:	60fb      	str	r3, [r7, #12]
 80055b2:	2300      	movs	r3, #0
 80055b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ba:	4b50      	ldr	r3, [pc, #320]	; (80056fc <HAL_RCC_GetSysClockFreq+0x158>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 030c 	and.w	r3, r3, #12
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d007      	beq.n	80055d6 <HAL_RCC_GetSysClockFreq+0x32>
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d008      	beq.n	80055dc <HAL_RCC_GetSysClockFreq+0x38>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f040 808d 	bne.w	80056ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055d0:	4b4b      	ldr	r3, [pc, #300]	; (8005700 <HAL_RCC_GetSysClockFreq+0x15c>)
 80055d2:	60bb      	str	r3, [r7, #8]
      break;
 80055d4:	e08c      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055d6:	4b4b      	ldr	r3, [pc, #300]	; (8005704 <HAL_RCC_GetSysClockFreq+0x160>)
 80055d8:	60bb      	str	r3, [r7, #8]
      break;
 80055da:	e089      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055dc:	4b47      	ldr	r3, [pc, #284]	; (80056fc <HAL_RCC_GetSysClockFreq+0x158>)
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80055e6:	4b45      	ldr	r3, [pc, #276]	; (80056fc <HAL_RCC_GetSysClockFreq+0x158>)
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d023      	beq.n	800563a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055f2:	4b42      	ldr	r3, [pc, #264]	; (80056fc <HAL_RCC_GetSysClockFreq+0x158>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	099b      	lsrs	r3, r3, #6
 80055f8:	f04f 0400 	mov.w	r4, #0
 80055fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005600:	f04f 0200 	mov.w	r2, #0
 8005604:	ea03 0501 	and.w	r5, r3, r1
 8005608:	ea04 0602 	and.w	r6, r4, r2
 800560c:	4a3d      	ldr	r2, [pc, #244]	; (8005704 <HAL_RCC_GetSysClockFreq+0x160>)
 800560e:	fb02 f106 	mul.w	r1, r2, r6
 8005612:	2200      	movs	r2, #0
 8005614:	fb02 f205 	mul.w	r2, r2, r5
 8005618:	440a      	add	r2, r1
 800561a:	493a      	ldr	r1, [pc, #232]	; (8005704 <HAL_RCC_GetSysClockFreq+0x160>)
 800561c:	fba5 0101 	umull	r0, r1, r5, r1
 8005620:	1853      	adds	r3, r2, r1
 8005622:	4619      	mov	r1, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	f04f 0400 	mov.w	r4, #0
 800562a:	461a      	mov	r2, r3
 800562c:	4623      	mov	r3, r4
 800562e:	f7fa fe6f 	bl	8000310 <__aeabi_uldivmod>
 8005632:	4603      	mov	r3, r0
 8005634:	460c      	mov	r4, r1
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e049      	b.n	80056ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563a:	4b30      	ldr	r3, [pc, #192]	; (80056fc <HAL_RCC_GetSysClockFreq+0x158>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	099b      	lsrs	r3, r3, #6
 8005640:	f04f 0400 	mov.w	r4, #0
 8005644:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	ea03 0501 	and.w	r5, r3, r1
 8005650:	ea04 0602 	and.w	r6, r4, r2
 8005654:	4629      	mov	r1, r5
 8005656:	4632      	mov	r2, r6
 8005658:	f04f 0300 	mov.w	r3, #0
 800565c:	f04f 0400 	mov.w	r4, #0
 8005660:	0154      	lsls	r4, r2, #5
 8005662:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005666:	014b      	lsls	r3, r1, #5
 8005668:	4619      	mov	r1, r3
 800566a:	4622      	mov	r2, r4
 800566c:	1b49      	subs	r1, r1, r5
 800566e:	eb62 0206 	sbc.w	r2, r2, r6
 8005672:	f04f 0300 	mov.w	r3, #0
 8005676:	f04f 0400 	mov.w	r4, #0
 800567a:	0194      	lsls	r4, r2, #6
 800567c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005680:	018b      	lsls	r3, r1, #6
 8005682:	1a5b      	subs	r3, r3, r1
 8005684:	eb64 0402 	sbc.w	r4, r4, r2
 8005688:	f04f 0100 	mov.w	r1, #0
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	00e2      	lsls	r2, r4, #3
 8005692:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005696:	00d9      	lsls	r1, r3, #3
 8005698:	460b      	mov	r3, r1
 800569a:	4614      	mov	r4, r2
 800569c:	195b      	adds	r3, r3, r5
 800569e:	eb44 0406 	adc.w	r4, r4, r6
 80056a2:	f04f 0100 	mov.w	r1, #0
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	02a2      	lsls	r2, r4, #10
 80056ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80056b0:	0299      	lsls	r1, r3, #10
 80056b2:	460b      	mov	r3, r1
 80056b4:	4614      	mov	r4, r2
 80056b6:	4618      	mov	r0, r3
 80056b8:	4621      	mov	r1, r4
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f04f 0400 	mov.w	r4, #0
 80056c0:	461a      	mov	r2, r3
 80056c2:	4623      	mov	r3, r4
 80056c4:	f7fa fe24 	bl	8000310 <__aeabi_uldivmod>
 80056c8:	4603      	mov	r3, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80056ce:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <HAL_RCC_GetSysClockFreq+0x158>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	0c1b      	lsrs	r3, r3, #16
 80056d4:	f003 0303 	and.w	r3, r3, #3
 80056d8:	3301      	adds	r3, #1
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e6:	60bb      	str	r3, [r7, #8]
      break;
 80056e8:	e002      	b.n	80056f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056ea:	4b05      	ldr	r3, [pc, #20]	; (8005700 <HAL_RCC_GetSysClockFreq+0x15c>)
 80056ec:	60bb      	str	r3, [r7, #8]
      break;
 80056ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f0:	68bb      	ldr	r3, [r7, #8]
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3714      	adds	r7, #20
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800
 8005700:	00f42400 	.word	0x00f42400
 8005704:	00989680 	.word	0x00989680

08005708 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800570c:	4b03      	ldr	r3, [pc, #12]	; (800571c <HAL_RCC_GetHCLKFreq+0x14>)
 800570e:	681b      	ldr	r3, [r3, #0]
}
 8005710:	4618      	mov	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000004 	.word	0x20000004

08005720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005724:	f7ff fff0 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005728:	4601      	mov	r1, r0
 800572a:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	0a9b      	lsrs	r3, r3, #10
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	4a03      	ldr	r2, [pc, #12]	; (8005744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005736:	5cd3      	ldrb	r3, [r2, r3]
 8005738:	fa21 f303 	lsr.w	r3, r1, r3
}
 800573c:	4618      	mov	r0, r3
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40023800 	.word	0x40023800
 8005744:	0800a4e0 	.word	0x0800a4e0

08005748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800574c:	f7ff ffdc 	bl	8005708 <HAL_RCC_GetHCLKFreq>
 8005750:	4601      	mov	r1, r0
 8005752:	4b05      	ldr	r3, [pc, #20]	; (8005768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	0b5b      	lsrs	r3, r3, #13
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	4a03      	ldr	r2, [pc, #12]	; (800576c <HAL_RCC_GetPCLK2Freq+0x24>)
 800575e:	5cd3      	ldrb	r3, [r2, r3]
 8005760:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005764:	4618      	mov	r0, r3
 8005766:	bd80      	pop	{r7, pc}
 8005768:	40023800 	.word	0x40023800
 800576c:	0800a4e0 	.word	0x0800a4e0

08005770 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005778:	2300      	movs	r3, #0
 800577a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800577c:	2300      	movs	r3, #0
 800577e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005780:	2300      	movs	r3, #0
 8005782:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0301 	and.w	r3, r3, #1
 8005794:	2b00      	cmp	r3, #0
 8005796:	d012      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005798:	4b69      	ldr	r3, [pc, #420]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	4a68      	ldr	r2, [pc, #416]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800579e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80057a2:	6093      	str	r3, [r2, #8]
 80057a4:	4b66      	ldr	r3, [pc, #408]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057a6:	689a      	ldr	r2, [r3, #8]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ac:	4964      	ldr	r1, [pc, #400]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80057ba:	2301      	movs	r3, #1
 80057bc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d017      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057ca:	4b5d      	ldr	r3, [pc, #372]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d8:	4959      	ldr	r1, [pc, #356]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057e8:	d101      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80057ea:	2301      	movs	r3, #1
 80057ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80057f6:	2301      	movs	r3, #1
 80057f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d017      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005806:	4b4e      	ldr	r3, [pc, #312]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005814:	494a      	ldr	r1, [pc, #296]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005824:	d101      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005826:	2301      	movs	r3, #1
 8005828:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005832:	2301      	movs	r3, #1
 8005834:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005842:	2301      	movs	r3, #1
 8005844:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0320 	and.w	r3, r3, #32
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 808b 	beq.w	800596a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005854:	4b3a      	ldr	r3, [pc, #232]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	4a39      	ldr	r2, [pc, #228]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800585e:	6413      	str	r3, [r2, #64]	; 0x40
 8005860:	4b37      	ldr	r3, [pc, #220]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005868:	60bb      	str	r3, [r7, #8]
 800586a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800586c:	4b35      	ldr	r3, [pc, #212]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a34      	ldr	r2, [pc, #208]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005878:	f7fd feca 	bl	8003610 <HAL_GetTick>
 800587c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005880:	f7fd fec6 	bl	8003610 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b64      	cmp	r3, #100	; 0x64
 800588c:	d901      	bls.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e38d      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005892:	4b2c      	ldr	r3, [pc, #176]	; (8005944 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800589a:	2b00      	cmp	r3, #0
 800589c:	d0f0      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800589e:	4b28      	ldr	r3, [pc, #160]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058a6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d035      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d02e      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058bc:	4b20      	ldr	r3, [pc, #128]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058c6:	4b1e      	ldr	r3, [pc, #120]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ca:	4a1d      	ldr	r2, [pc, #116]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058d0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058d2:	4b1b      	ldr	r3, [pc, #108]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058dc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80058de:	4a18      	ldr	r2, [pc, #96]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80058e4:	4b16      	ldr	r3, [pc, #88]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d114      	bne.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f0:	f7fd fe8e 	bl	8003610 <HAL_GetTick>
 80058f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058f6:	e00a      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058f8:	f7fd fe8a 	bl	8003610 <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	f241 3288 	movw	r2, #5000	; 0x1388
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e34f      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800590e:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0ee      	beq.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005922:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005926:	d111      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005928:	4b05      	ldr	r3, [pc, #20]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005934:	4b04      	ldr	r3, [pc, #16]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005936:	400b      	ands	r3, r1
 8005938:	4901      	ldr	r1, [pc, #4]	; (8005940 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800593a:	4313      	orrs	r3, r2
 800593c:	608b      	str	r3, [r1, #8]
 800593e:	e00b      	b.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005940:	40023800 	.word	0x40023800
 8005944:	40007000 	.word	0x40007000
 8005948:	0ffffcff 	.word	0x0ffffcff
 800594c:	4bb3      	ldr	r3, [pc, #716]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4ab2      	ldr	r2, [pc, #712]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005952:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005956:	6093      	str	r3, [r2, #8]
 8005958:	4bb0      	ldr	r3, [pc, #704]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800595a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005964:	49ad      	ldr	r1, [pc, #692]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005966:	4313      	orrs	r3, r2
 8005968:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b00      	cmp	r3, #0
 8005974:	d010      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005976:	4ba9      	ldr	r3, [pc, #676]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005978:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800597c:	4aa7      	ldr	r2, [pc, #668]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800597e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005982:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005986:	4ba5      	ldr	r3, [pc, #660]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005988:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	49a2      	ldr	r1, [pc, #648]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059a4:	4b9d      	ldr	r3, [pc, #628]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059aa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b2:	499a      	ldr	r1, [pc, #616]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059c6:	4b95      	ldr	r3, [pc, #596]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059d4:	4991      	ldr	r1, [pc, #580]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059e8:	4b8c      	ldr	r3, [pc, #560]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059f6:	4989      	ldr	r1, [pc, #548]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a0a:	4b84      	ldr	r3, [pc, #528]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a18:	4980      	ldr	r1, [pc, #512]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a2c:	4b7b      	ldr	r3, [pc, #492]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a32:	f023 0203 	bic.w	r2, r3, #3
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3a:	4978      	ldr	r1, [pc, #480]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a4e:	4b73      	ldr	r3, [pc, #460]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a54:	f023 020c 	bic.w	r2, r3, #12
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a5c:	496f      	ldr	r1, [pc, #444]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a70:	4b6a      	ldr	r3, [pc, #424]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a7e:	4967      	ldr	r1, [pc, #412]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a92:	4b62      	ldr	r3, [pc, #392]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aa0:	495e      	ldr	r1, [pc, #376]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ab4:	4b59      	ldr	r3, [pc, #356]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac2:	4956      	ldr	r1, [pc, #344]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00a      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005ad6:	4b51      	ldr	r3, [pc, #324]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005adc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae4:	494d      	ldr	r1, [pc, #308]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00a      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005af8:	4b48      	ldr	r3, [pc, #288]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b06:	4945      	ldr	r1, [pc, #276]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d00a      	beq.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b1a:	4b40      	ldr	r3, [pc, #256]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b28:	493c      	ldr	r1, [pc, #240]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00a      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b3c:	4b37      	ldr	r3, [pc, #220]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b4a:	4934      	ldr	r1, [pc, #208]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d011      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b5e:	4b2f      	ldr	r3, [pc, #188]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b6c:	492b      	ldr	r1, [pc, #172]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b7c:	d101      	bne.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00a      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b9e:	4b1f      	ldr	r3, [pc, #124]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bac:	491b      	ldr	r1, [pc, #108]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bc0:	4b16      	ldr	r3, [pc, #88]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bc6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd0:	4912      	ldr	r1, [pc, #72]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00b      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bf4:	4909      	ldr	r1, [pc, #36]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00f      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c08:	4b04      	ldr	r3, [pc, #16]	; (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c0e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c18:	e002      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005c1a:	bf00      	nop
 8005c1c:	40023800 	.word	0x40023800
 8005c20:	4985      	ldr	r1, [pc, #532]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00b      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c34:	4b80      	ldr	r3, [pc, #512]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c44:	497c      	ldr	r1, [pc, #496]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c46:	4313      	orrs	r3, r2
 8005c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d005      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c5a:	f040 80d6 	bne.w	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c5e:	4b76      	ldr	r3, [pc, #472]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a75      	ldr	r2, [pc, #468]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c6a:	f7fd fcd1 	bl	8003610 <HAL_GetTick>
 8005c6e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c70:	e008      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c72:	f7fd fccd 	bl	8003610 <HAL_GetTick>
 8005c76:	4602      	mov	r2, r0
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	2b64      	cmp	r3, #100	; 0x64
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e194      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c84:	4b6c      	ldr	r3, [pc, #432]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1f0      	bne.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d021      	beq.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d11d      	bne.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ca4:	4b64      	ldr	r3, [pc, #400]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	f003 0303 	and.w	r3, r3, #3
 8005cb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005cb2:	4b61      	ldr	r3, [pc, #388]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005cb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cb8:	0e1b      	lsrs	r3, r3, #24
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	019a      	lsls	r2, r3, #6
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	041b      	lsls	r3, r3, #16
 8005cca:	431a      	orrs	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	061b      	lsls	r3, r3, #24
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	071b      	lsls	r3, r3, #28
 8005cd8:	4957      	ldr	r1, [pc, #348]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d004      	beq.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cf4:	d00a      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d02e      	beq.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d0a:	d129      	bne.n	8005d60 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d0c:	4b4a      	ldr	r3, [pc, #296]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d12:	0c1b      	lsrs	r3, r3, #16
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d1a:	4b47      	ldr	r3, [pc, #284]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d20:	0f1b      	lsrs	r3, r3, #28
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	019a      	lsls	r2, r3, #6
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	041b      	lsls	r3, r3, #16
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	061b      	lsls	r3, r3, #24
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	071b      	lsls	r3, r3, #28
 8005d40:	493d      	ldr	r1, [pc, #244]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d48:	4b3b      	ldr	r3, [pc, #236]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d4e:	f023 021f 	bic.w	r2, r3, #31
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	3b01      	subs	r3, #1
 8005d58:	4937      	ldr	r1, [pc, #220]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01d      	beq.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d6c:	4b32      	ldr	r3, [pc, #200]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d72:	0e1b      	lsrs	r3, r3, #24
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d80:	0f1b      	lsrs	r3, r3, #28
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	019a      	lsls	r2, r3, #6
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	041b      	lsls	r3, r3, #16
 8005d94:	431a      	orrs	r2, r3
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	061b      	lsls	r3, r3, #24
 8005d9a:	431a      	orrs	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	071b      	lsls	r3, r3, #28
 8005da0:	4925      	ldr	r1, [pc, #148]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d011      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	019a      	lsls	r2, r3, #6
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	041b      	lsls	r3, r3, #16
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	061b      	lsls	r3, r3, #24
 8005dc8:	431a      	orrs	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	071b      	lsls	r3, r3, #28
 8005dd0:	4919      	ldr	r1, [pc, #100]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005dd8:	4b17      	ldr	r3, [pc, #92]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a16      	ldr	r2, [pc, #88]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005dde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de4:	f7fd fc14 	bl	8003610 <HAL_GetTick>
 8005de8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dea:	e008      	b.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005dec:	f7fd fc10 	bl	8003610 <HAL_GetTick>
 8005df0:	4602      	mov	r2, r0
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	2b64      	cmp	r3, #100	; 0x64
 8005df8:	d901      	bls.n	8005dfe <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e0d7      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dfe:	4b0e      	ldr	r3, [pc, #56]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d0f0      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	f040 80cd 	bne.w	8005fac <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e12:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a08      	ldr	r2, [pc, #32]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1e:	f7fd fbf7 	bl	8003610 <HAL_GetTick>
 8005e22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e24:	e00a      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e26:	f7fd fbf3 	bl	8003610 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	2b64      	cmp	r3, #100	; 0x64
 8005e32:	d903      	bls.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e34:	2303      	movs	r3, #3
 8005e36:	e0ba      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8005e38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e3c:	4b5e      	ldr	r3, [pc, #376]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e48:	d0ed      	beq.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d009      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d02e      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d12a      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005e72:	4b51      	ldr	r3, [pc, #324]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e78:	0c1b      	lsrs	r3, r3, #16
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005e80:	4b4d      	ldr	r3, [pc, #308]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e86:	0f1b      	lsrs	r3, r3, #28
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	695b      	ldr	r3, [r3, #20]
 8005e92:	019a      	lsls	r2, r3, #6
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	041b      	lsls	r3, r3, #16
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	061b      	lsls	r3, r3, #24
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	071b      	lsls	r3, r3, #28
 8005ea6:	4944      	ldr	r1, [pc, #272]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005eae:	4b42      	ldr	r3, [pc, #264]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005eb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005eb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	493d      	ldr	r1, [pc, #244]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d022      	beq.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ed8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005edc:	d11d      	bne.n	8005f1a <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ede:	4b36      	ldr	r3, [pc, #216]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	0e1b      	lsrs	r3, r3, #24
 8005ee6:	f003 030f 	and.w	r3, r3, #15
 8005eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005eec:	4b32      	ldr	r3, [pc, #200]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef2:	0f1b      	lsrs	r3, r3, #28
 8005ef4:	f003 0307 	and.w	r3, r3, #7
 8005ef8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695b      	ldr	r3, [r3, #20]
 8005efe:	019a      	lsls	r2, r3, #6
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	431a      	orrs	r2, r3
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	061b      	lsls	r3, r3, #24
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	071b      	lsls	r3, r3, #28
 8005f12:	4929      	ldr	r1, [pc, #164]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d028      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f26:	4b24      	ldr	r3, [pc, #144]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f2c:	0e1b      	lsrs	r3, r3, #24
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f34:	4b20      	ldr	r3, [pc, #128]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f3a:	0c1b      	lsrs	r3, r3, #16
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	019a      	lsls	r2, r3, #6
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	041b      	lsls	r3, r3, #16
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	061b      	lsls	r3, r3, #24
 8005f52:	431a      	orrs	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	071b      	lsls	r3, r3, #28
 8005f5a:	4917      	ldr	r1, [pc, #92]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f62:	4b15      	ldr	r3, [pc, #84]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	4911      	ldr	r1, [pc, #68]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005f78:	4b0f      	ldr	r3, [pc, #60]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a0e      	ldr	r2, [pc, #56]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f84:	f7fd fb44 	bl	8003610 <HAL_GetTick>
 8005f88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f8a:	e008      	b.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005f8c:	f7fd fb40 	bl	8003610 <HAL_GetTick>
 8005f90:	4602      	mov	r2, r0
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	2b64      	cmp	r3, #100	; 0x64
 8005f98:	d901      	bls.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e007      	b.n	8005fae <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005f9e:	4b06      	ldr	r3, [pc, #24]	; (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fa6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005faa:	d1ef      	bne.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40023800 	.word	0x40023800

08005fbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d101      	bne.n	8005fce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e084      	b.n	80060d8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fda:	b2db      	uxtb	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d106      	bne.n	8005fee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f7fc fe03 	bl	8002bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006004:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800600e:	d902      	bls.n	8006016 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006010:	2300      	movs	r3, #0
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e002      	b.n	800601c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800601a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006024:	d007      	beq.n	8006036 <HAL_SPI_Init+0x7a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800602e:	d002      	beq.n	8006036 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	2b00      	cmp	r3, #0
 800603c:	d10b      	bne.n	8006056 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006046:	d903      	bls.n	8006050 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2202      	movs	r2, #2
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
 800604e:	e002      	b.n	8006056 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	431a      	orrs	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6a1b      	ldr	r3, [r3, #32]
 8006080:	ea42 0103 	orr.w	r1, r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	0c1b      	lsrs	r3, r3, #16
 8006096:	f003 0204 	and.w	r2, r3, #4
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	431a      	orrs	r2, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	ea42 0103 	orr.w	r1, r2, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	69da      	ldr	r2, [r3, #28]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b086      	sub	sp, #24
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	4613      	mov	r3, r2
 80060ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d110      	bne.n	800611c <HAL_SPI_Receive_DMA+0x3c>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006102:	d10b      	bne.n	800611c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2204      	movs	r2, #4
 8006108:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800610c:	88fb      	ldrh	r3, [r7, #6]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	68b9      	ldr	r1, [r7, #8]
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f900 	bl	8006318 <HAL_SPI_TransmitReceive_DMA>
 8006118:	4603      	mov	r3, r0
 800611a:	e0f3      	b.n	8006304 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_SPI_Receive_DMA+0x4a>
 8006126:	2302      	movs	r3, #2
 8006128:	e0ec      	b.n	8006304 <HAL_SPI_Receive_DMA+0x224>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	d002      	beq.n	8006144 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800613e:	2302      	movs	r3, #2
 8006140:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006142:	e0da      	b.n	80062fa <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d002      	beq.n	8006150 <HAL_SPI_Receive_DMA+0x70>
 800614a:	88fb      	ldrh	r3, [r7, #6]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d102      	bne.n	8006156 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006154:	e0d1      	b.n	80062fa <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2204      	movs	r2, #4
 800615a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2200      	movs	r2, #0
 8006162:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	88fa      	ldrh	r2, [r7, #6]
 800616e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	88fa      	ldrh	r2, [r7, #6]
 8006176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800619a:	d107      	bne.n	80061ac <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061ba:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	68db      	ldr	r3, [r3, #12]
 80061c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061c4:	d908      	bls.n	80061d8 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061d4:	605a      	str	r2, [r3, #4]
 80061d6:	e042      	b.n	800625e <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061e6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f2:	d134      	bne.n	800625e <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006202:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800620a:	b29b      	uxth	r3, r3
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b00      	cmp	r3, #0
 8006212:	d111      	bne.n	8006238 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006222:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800622a:	b29b      	uxth	r3, r3
 800622c:	085b      	lsrs	r3, r3, #1
 800622e:	b29a      	uxth	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006236:	e012      	b.n	800625e <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006246:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800624e:	b29b      	uxth	r3, r3
 8006250:	085b      	lsrs	r3, r3, #1
 8006252:	b29b      	uxth	r3, r3
 8006254:	3301      	adds	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006262:	4a2a      	ldr	r2, [pc, #168]	; (800630c <HAL_SPI_Receive_DMA+0x22c>)
 8006264:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626a:	4a29      	ldr	r2, [pc, #164]	; (8006310 <HAL_SPI_Receive_DMA+0x230>)
 800626c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006272:	4a28      	ldr	r2, [pc, #160]	; (8006314 <HAL_SPI_Receive_DMA+0x234>)
 8006274:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627a:	2200      	movs	r2, #0
 800627c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	330c      	adds	r3, #12
 8006288:	4619      	mov	r1, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	461a      	mov	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006296:	b29b      	uxth	r3, r3
 8006298:	f7fd ffb4 	bl	8004204 <HAL_DMA_Start_IT>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062a6:	f043 0210 	orr.w	r2, r3, #16
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80062ba:	e01e      	b.n	80062fa <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d007      	beq.n	80062da <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f042 0220 	orr.w	r2, r2, #32
 80062e8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f042 0201 	orr.w	r2, r2, #1
 80062f8:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006302:	7dfb      	ldrb	r3, [r7, #23]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	08006799 	.word	0x08006799
 8006310:	08006681 	.word	0x08006681
 8006314:	080067d1 	.word	0x080067d1

08006318 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
 8006324:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006330:	2b01      	cmp	r3, #1
 8006332:	d101      	bne.n	8006338 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006334:	2302      	movs	r3, #2
 8006336:	e16c      	b.n	8006612 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006346:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800634e:	7dbb      	ldrb	r3, [r7, #22]
 8006350:	2b01      	cmp	r3, #1
 8006352:	d00d      	beq.n	8006370 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800635a:	d106      	bne.n	800636a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d102      	bne.n	800636a <HAL_SPI_TransmitReceive_DMA+0x52>
 8006364:	7dbb      	ldrb	r3, [r7, #22]
 8006366:	2b04      	cmp	r3, #4
 8006368:	d002      	beq.n	8006370 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800636a:	2302      	movs	r3, #2
 800636c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800636e:	e14b      	b.n	8006608 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d005      	beq.n	8006382 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800637c:	887b      	ldrh	r3, [r7, #2]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d102      	bne.n	8006388 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006386:	e13f      	b.n	8006608 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b04      	cmp	r3, #4
 8006392:	d003      	beq.n	800639c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2205      	movs	r2, #5
 8006398:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	68ba      	ldr	r2, [r7, #8]
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	887a      	ldrh	r2, [r7, #2]
 80063ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	887a      	ldrh	r2, [r7, #2]
 80063b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	887a      	ldrh	r2, [r7, #2]
 80063be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	887a      	ldrh	r2, [r7, #2]
 80063c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685a      	ldr	r2, [r3, #4]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80063e4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063ee:	d908      	bls.n	8006402 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	685a      	ldr	r2, [r3, #4]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063fe:	605a      	str	r2, [r3, #4]
 8006400:	e06f      	b.n	80064e2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006410:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800641c:	d126      	bne.n	800646c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10f      	bne.n	800644a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	685a      	ldr	r2, [r3, #4]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006438:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006448:	e010      	b.n	800646c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006458:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800645e:	b29b      	uxth	r3, r3
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	b29b      	uxth	r3, r3
 8006464:	3301      	adds	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006476:	d134      	bne.n	80064e2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006486:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800648e:	b29b      	uxth	r3, r3
 8006490:	f003 0301 	and.w	r3, r3, #1
 8006494:	2b00      	cmp	r3, #0
 8006496:	d111      	bne.n	80064bc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064a6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80064ba:	e012      	b.n	80064e2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064ca:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	085b      	lsrs	r3, r3, #1
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	3301      	adds	r3, #1
 80064da:	b29a      	uxth	r2, r3
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d108      	bne.n	8006500 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064f2:	4a4a      	ldr	r2, [pc, #296]	; (800661c <HAL_SPI_TransmitReceive_DMA+0x304>)
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064fa:	4a49      	ldr	r2, [pc, #292]	; (8006620 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80064fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80064fe:	e007      	b.n	8006510 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006504:	4a47      	ldr	r2, [pc, #284]	; (8006624 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8006506:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650c:	4a46      	ldr	r2, [pc, #280]	; (8006628 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800650e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006514:	4a45      	ldr	r2, [pc, #276]	; (800662c <HAL_SPI_TransmitReceive_DMA+0x314>)
 8006516:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651c:	2200      	movs	r2, #0
 800651e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	4619      	mov	r1, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006530:	461a      	mov	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006538:	b29b      	uxth	r3, r3
 800653a:	f7fd fe63 	bl	8004204 <HAL_DMA_Start_IT>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00c      	beq.n	800655e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006548:	f043 0210 	orr.w	r2, r3, #16
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800655c:	e054      	b.n	8006608 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0201 	orr.w	r2, r2, #1
 800656c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006572:	2200      	movs	r2, #0
 8006574:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800657a:	2200      	movs	r2, #0
 800657c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006582:	2200      	movs	r2, #0
 8006584:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	2200      	movs	r2, #0
 800658c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	4619      	mov	r1, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	330c      	adds	r3, #12
 800659e:	461a      	mov	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	f7fd fe2d 	bl	8004204 <HAL_DMA_Start_IT>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00c      	beq.n	80065ca <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b4:	f043 0210 	orr.w	r2, r3, #16
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80065c8:	e01e      	b.n	8006608 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065d4:	2b40      	cmp	r3, #64	; 0x40
 80065d6:	d007      	beq.n	80065e8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065e6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0220 	orr.w	r2, r2, #32
 80065f6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685a      	ldr	r2, [r3, #4]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f042 0202 	orr.w	r2, r2, #2
 8006606:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2200      	movs	r2, #0
 800660c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006610:	7dfb      	ldrb	r3, [r7, #23]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3718      	adds	r7, #24
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	08006799 	.word	0x08006799
 8006620:	08006681 	.word	0x08006681
 8006624:	080067b5 	.word	0x080067b5
 8006628:	08006707 	.word	0x08006707
 800662c:	080067d1 	.word	0x080067d1

08006630 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006674:	bf00      	nop
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800668e:	f7fc ffbf 	bl	8003610 <HAL_GetTick>
 8006692:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800669e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066a2:	d02a      	beq.n	80066fa <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f022 0220 	bic.w	r2, r2, #32
 80066b2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f022 0203 	bic.w	r2, r2, #3
 80066c2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	2164      	movs	r1, #100	; 0x64
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f978 	bl	80069be <SPI_EndRxTransaction>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ffba 	bl	800666c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80066f8:	e002      	b.n	8006700 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7fb fc1e 	bl	8001f3c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b084      	sub	sp, #16
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006714:	f7fc ff7c 	bl	8003610 <HAL_GetTick>
 8006718:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006724:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006728:	d030      	beq.n	800678c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685a      	ldr	r2, [r3, #4]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0220 	bic.w	r2, r2, #32
 8006738:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	2164      	movs	r1, #100	; 0x64
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f995 	bl	8006a6e <SPI_EndRxTxTransaction>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d005      	beq.n	8006756 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674e:	f043 0220 	orr.w	r2, r3, #32
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f022 0203 	bic.w	r2, r2, #3
 8006764:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006784:	68f8      	ldr	r0, [r7, #12]
 8006786:	f7ff ff71 	bl	800666c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800678a:	e002      	b.n	8006792 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f7ff ff4f 	bl	8006630 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f7ff ff4c 	bl	8006644 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f7ff ff48 	bl	8006658 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067c8:	bf00      	nop
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685a      	ldr	r2, [r3, #4]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f022 0203 	bic.w	r2, r2, #3
 80067ec:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f2:	f043 0210 	orr.w	r2, r3, #16
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7ff ff32 	bl	800666c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	603b      	str	r3, [r7, #0]
 800681c:	4613      	mov	r3, r2
 800681e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006820:	e04c      	b.n	80068bc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006828:	d048      	beq.n	80068bc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800682a:	f7fc fef1 	bl	8003610 <HAL_GetTick>
 800682e:	4602      	mov	r2, r0
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	683a      	ldr	r2, [r7, #0]
 8006836:	429a      	cmp	r2, r3
 8006838:	d902      	bls.n	8006840 <SPI_WaitFlagStateUntilTimeout+0x30>
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d13d      	bne.n	80068bc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800684e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006858:	d111      	bne.n	800687e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006862:	d004      	beq.n	800686e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800686c:	d107      	bne.n	800687e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800687c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006886:	d10f      	bne.n	80068a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006896:	601a      	str	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2201      	movs	r2, #1
 80068ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e00f      	b.n	80068dc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4013      	ands	r3, r2
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	bf0c      	ite	eq
 80068cc:	2301      	moveq	r3, #1
 80068ce:	2300      	movne	r3, #0
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	461a      	mov	r2, r3
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d1a3      	bne.n	8006822 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80068da:	2300      	movs	r3, #0
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80068f2:	e057      	b.n	80069a4 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068fa:	d106      	bne.n	800690a <SPI_WaitFifoStateUntilTimeout+0x26>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d103      	bne.n	800690a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d048      	beq.n	80069a4 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006912:	f7fc fe7d 	bl	8003610 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d902      	bls.n	8006928 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d13d      	bne.n	80069a4 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006936:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006940:	d111      	bne.n	8006966 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694a:	d004      	beq.n	8006956 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006954:	d107      	bne.n	8006966 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006964:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800696e:	d10f      	bne.n	8006990 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800697e:	601a      	str	r2, [r3, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800698e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e008      	b.n	80069b6 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	689a      	ldr	r2, [r3, #8]
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	4013      	ands	r3, r2
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d19f      	bne.n	80068f4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3710      	adds	r7, #16
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b086      	sub	sp, #24
 80069c2:	af02      	add	r7, sp, #8
 80069c4:	60f8      	str	r0, [r7, #12]
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069d2:	d111      	bne.n	80069f8 <SPI_EndRxTransaction+0x3a>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069dc:	d004      	beq.n	80069e8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e6:	d107      	bne.n	80069f8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	9300      	str	r3, [sp, #0]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	2180      	movs	r1, #128	; 0x80
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff ff04 	bl	8006810 <SPI_WaitFlagStateUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d007      	beq.n	8006a1e <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a12:	f043 0220 	orr.w	r2, r3, #32
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e023      	b.n	8006a66 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a26:	d11d      	bne.n	8006a64 <SPI_EndRxTransaction+0xa6>
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a30:	d004      	beq.n	8006a3c <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3a:	d113      	bne.n	8006a64 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f7ff ff4b 	bl	80068e4 <SPI_WaitFifoStateUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d007      	beq.n	8006a64 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a58:	f043 0220 	orr.w	r2, r3, #32
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e000      	b.n	8006a66 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}

08006a6e <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a6e:	b580      	push	{r7, lr}
 8006a70:	b086      	sub	sp, #24
 8006a72:	af02      	add	r7, sp, #8
 8006a74:	60f8      	str	r0, [r7, #12]
 8006a76:	60b9      	str	r1, [r7, #8]
 8006a78:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff ff2c 	bl	80068e4 <SPI_WaitFifoStateUntilTimeout>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a96:	f043 0220 	orr.w	r2, r3, #32
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e027      	b.n	8006af2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f7ff feaf 	bl	8006810 <SPI_WaitFlagStateUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d007      	beq.n	8006ac8 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006abc:	f043 0220 	orr.w	r2, r3, #32
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ac4:	2303      	movs	r3, #3
 8006ac6:	e014      	b.n	8006af2 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7ff ff05 	bl	80068e4 <SPI_WaitFifoStateUntilTimeout>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d007      	beq.n	8006af0 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae4:	f043 0220 	orr.w	r2, r3, #32
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e000      	b.n	8006af2 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b082      	sub	sp, #8
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d101      	bne.n	8006b0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b08:	2301      	movs	r3, #1
 8006b0a:	e01d      	b.n	8006b48 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d106      	bne.n	8006b26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7fc f911 	bl	8002d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3304      	adds	r3, #4
 8006b36:	4619      	mov	r1, r3
 8006b38:	4610      	mov	r0, r2
 8006b3a:	f001 f827 	bl	8007b8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3708      	adds	r7, #8
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b50:	b480      	push	{r7}
 8006b52:	b085      	sub	sp, #20
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68da      	ldr	r2, [r3, #12]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f042 0201 	orr.w	r2, r2, #1
 8006b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689a      	ldr	r2, [r3, #8]
 8006b6e:	4b0c      	ldr	r3, [pc, #48]	; (8006ba0 <HAL_TIM_Base_Start_IT+0x50>)
 8006b70:	4013      	ands	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2b06      	cmp	r3, #6
 8006b78:	d00b      	beq.n	8006b92 <HAL_TIM_Base_Start_IT+0x42>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b80:	d007      	beq.n	8006b92 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f042 0201 	orr.w	r2, r2, #1
 8006b90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	00010007 	.word	0x00010007

08006ba4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	68da      	ldr	r2, [r3, #12]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6a1a      	ldr	r2, [r3, #32]
 8006bc2:	f241 1311 	movw	r3, #4369	; 0x1111
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10f      	bne.n	8006bec <HAL_TIM_Base_Stop_IT+0x48>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6a1a      	ldr	r2, [r3, #32]
 8006bd2:	f240 4344 	movw	r3, #1092	; 0x444
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d107      	bne.n	8006bec <HAL_TIM_Base_Stop_IT+0x48>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0201 	bic.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006bec:	2300      	movs	r3, #0
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	370c      	adds	r7, #12
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b082      	sub	sp, #8
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e01d      	b.n	8006c48 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d106      	bne.n	8006c26 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7fc f9ad 	bl	8002f80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	3304      	adds	r3, #4
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f000 ffa7 	bl	8007b8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b0c      	cmp	r3, #12
 8006c5e:	d841      	bhi.n	8006ce4 <HAL_TIM_PWM_Start_IT+0x94>
 8006c60:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <HAL_TIM_PWM_Start_IT+0x18>)
 8006c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c66:	bf00      	nop
 8006c68:	08006c9d 	.word	0x08006c9d
 8006c6c:	08006ce5 	.word	0x08006ce5
 8006c70:	08006ce5 	.word	0x08006ce5
 8006c74:	08006ce5 	.word	0x08006ce5
 8006c78:	08006caf 	.word	0x08006caf
 8006c7c:	08006ce5 	.word	0x08006ce5
 8006c80:	08006ce5 	.word	0x08006ce5
 8006c84:	08006ce5 	.word	0x08006ce5
 8006c88:	08006cc1 	.word	0x08006cc1
 8006c8c:	08006ce5 	.word	0x08006ce5
 8006c90:	08006ce5 	.word	0x08006ce5
 8006c94:	08006ce5 	.word	0x08006ce5
 8006c98:	08006cd3 	.word	0x08006cd3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0202 	orr.w	r2, r2, #2
 8006caa:	60da      	str	r2, [r3, #12]
      break;
 8006cac:	e01b      	b.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68da      	ldr	r2, [r3, #12]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f042 0204 	orr.w	r2, r2, #4
 8006cbc:	60da      	str	r2, [r3, #12]
      break;
 8006cbe:	e012      	b.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	68da      	ldr	r2, [r3, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0208 	orr.w	r2, r2, #8
 8006cce:	60da      	str	r2, [r3, #12]
      break;
 8006cd0:	e009      	b.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f042 0210 	orr.w	r2, r2, #16
 8006ce0:	60da      	str	r2, [r3, #12]
      break;
 8006ce2:	e000      	b.n	8006ce6 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8006ce4:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2201      	movs	r2, #1
 8006cec:	6839      	ldr	r1, [r7, #0]
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f001 fc96 	bl	8008620 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a17      	ldr	r2, [pc, #92]	; (8006d58 <HAL_TIM_PWM_Start_IT+0x108>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d004      	beq.n	8006d08 <HAL_TIM_PWM_Start_IT+0xb8>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a16      	ldr	r2, [pc, #88]	; (8006d5c <HAL_TIM_PWM_Start_IT+0x10c>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d101      	bne.n	8006d0c <HAL_TIM_PWM_Start_IT+0xbc>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e000      	b.n	8006d0e <HAL_TIM_PWM_Start_IT+0xbe>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d007      	beq.n	8006d22 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d20:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <HAL_TIM_PWM_Start_IT+0x110>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2b06      	cmp	r3, #6
 8006d32:	d00b      	beq.n	8006d4c <HAL_TIM_PWM_Start_IT+0xfc>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d3a:	d007      	beq.n	8006d4c <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	40010000 	.word	0x40010000
 8006d5c:	40010400 	.word	0x40010400
 8006d60:	00010007 	.word	0x00010007

08006d64 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	2b0c      	cmp	r3, #12
 8006d72:	d841      	bhi.n	8006df8 <HAL_TIM_PWM_Stop_IT+0x94>
 8006d74:	a201      	add	r2, pc, #4	; (adr r2, 8006d7c <HAL_TIM_PWM_Stop_IT+0x18>)
 8006d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d7a:	bf00      	nop
 8006d7c:	08006db1 	.word	0x08006db1
 8006d80:	08006df9 	.word	0x08006df9
 8006d84:	08006df9 	.word	0x08006df9
 8006d88:	08006df9 	.word	0x08006df9
 8006d8c:	08006dc3 	.word	0x08006dc3
 8006d90:	08006df9 	.word	0x08006df9
 8006d94:	08006df9 	.word	0x08006df9
 8006d98:	08006df9 	.word	0x08006df9
 8006d9c:	08006dd5 	.word	0x08006dd5
 8006da0:	08006df9 	.word	0x08006df9
 8006da4:	08006df9 	.word	0x08006df9
 8006da8:	08006df9 	.word	0x08006df9
 8006dac:	08006de7 	.word	0x08006de7
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0202 	bic.w	r2, r2, #2
 8006dbe:	60da      	str	r2, [r3, #12]
      break;
 8006dc0:	e01b      	b.n	8006dfa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	68da      	ldr	r2, [r3, #12]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f022 0204 	bic.w	r2, r2, #4
 8006dd0:	60da      	str	r2, [r3, #12]
      break;
 8006dd2:	e012      	b.n	8006dfa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68da      	ldr	r2, [r3, #12]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0208 	bic.w	r2, r2, #8
 8006de2:	60da      	str	r2, [r3, #12]
      break;
 8006de4:	e009      	b.n	8006dfa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68da      	ldr	r2, [r3, #12]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0210 	bic.w	r2, r2, #16
 8006df4:	60da      	str	r2, [r3, #12]
      break;
 8006df6:	e000      	b.n	8006dfa <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8006df8:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	4618      	mov	r0, r3
 8006e04:	f001 fc0c 	bl	8008620 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a20      	ldr	r2, [pc, #128]	; (8006e90 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <HAL_TIM_PWM_Stop_IT+0xb8>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1f      	ldr	r2, [pc, #124]	; (8006e94 <HAL_TIM_PWM_Stop_IT+0x130>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d101      	bne.n	8006e20 <HAL_TIM_PWM_Stop_IT+0xbc>
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e000      	b.n	8006e22 <HAL_TIM_PWM_Stop_IT+0xbe>
 8006e20:	2300      	movs	r3, #0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d017      	beq.n	8006e56 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6a1a      	ldr	r2, [r3, #32]
 8006e2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e30:	4013      	ands	r3, r2
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10f      	bne.n	8006e56 <HAL_TIM_PWM_Stop_IT+0xf2>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6a1a      	ldr	r2, [r3, #32]
 8006e3c:	f240 4344 	movw	r3, #1092	; 0x444
 8006e40:	4013      	ands	r3, r2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d107      	bne.n	8006e56 <HAL_TIM_PWM_Stop_IT+0xf2>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6a1a      	ldr	r2, [r3, #32]
 8006e5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e60:	4013      	ands	r3, r2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10f      	bne.n	8006e86 <HAL_TIM_PWM_Stop_IT+0x122>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	6a1a      	ldr	r2, [r3, #32]
 8006e6c:	f240 4344 	movw	r3, #1092	; 0x444
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d107      	bne.n	8006e86 <HAL_TIM_PWM_Stop_IT+0x122>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0201 	bic.w	r2, r2, #1
 8006e84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3708      	adds	r7, #8
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	40010000 	.word	0x40010000
 8006e94:	40010400 	.word	0x40010400

08006e98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e01d      	b.n	8006ee6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7fb ffe0 	bl	8002e84 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	f000 fe58 	bl	8007b8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3708      	adds	r7, #8
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	60b9      	str	r1, [r7, #8]
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d101      	bne.n	8006f0e <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e0e0      	b.n	80070d0 <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d10b      	bne.n	8006f32 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d104      	bne.n	8006f2a <HAL_TIM_IC_Start_DMA+0x3a>
 8006f20:	887b      	ldrh	r3, [r7, #2]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d001      	beq.n	8006f2a <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e0d2      	b.n	80070d0 <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2202      	movs	r2, #2
 8006f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b0c      	cmp	r3, #12
 8006f36:	f200 80ad 	bhi.w	8007094 <HAL_TIM_IC_Start_DMA+0x1a4>
 8006f3a:	a201      	add	r2, pc, #4	; (adr r2, 8006f40 <HAL_TIM_IC_Start_DMA+0x50>)
 8006f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f40:	08006f75 	.word	0x08006f75
 8006f44:	08007095 	.word	0x08007095
 8006f48:	08007095 	.word	0x08007095
 8006f4c:	08007095 	.word	0x08007095
 8006f50:	08006fbd 	.word	0x08006fbd
 8006f54:	08007095 	.word	0x08007095
 8006f58:	08007095 	.word	0x08007095
 8006f5c:	08007095 	.word	0x08007095
 8006f60:	08007005 	.word	0x08007005
 8006f64:	08007095 	.word	0x08007095
 8006f68:	08007095 	.word	0x08007095
 8006f6c:	08007095 	.word	0x08007095
 8006f70:	0800704d 	.word	0x0800704d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f78:	4a57      	ldr	r2, [pc, #348]	; (80070d8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006f7a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	4a56      	ldr	r2, [pc, #344]	; (80070dc <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006f82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f88:	4a55      	ldr	r2, [pc, #340]	; (80070e0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006f8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	3334      	adds	r3, #52	; 0x34
 8006f96:	4619      	mov	r1, r3
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	887b      	ldrh	r3, [r7, #2]
 8006f9c:	f7fd f932 	bl	8004204 <HAL_DMA_Start_IT>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e092      	b.n	80070d0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb8:	60da      	str	r2, [r3, #12]
      break;
 8006fba:	e06c      	b.n	8007096 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	4a45      	ldr	r2, [pc, #276]	; (80070d8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8006fc2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc8:	4a44      	ldr	r2, [pc, #272]	; (80070dc <HAL_TIM_IC_Start_DMA+0x1ec>)
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd0:	4a43      	ldr	r2, [pc, #268]	; (80070e0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8006fd2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3338      	adds	r3, #56	; 0x38
 8006fde:	4619      	mov	r1, r3
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	887b      	ldrh	r3, [r7, #2]
 8006fe4:	f7fd f90e 	bl	8004204 <HAL_DMA_Start_IT>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e06e      	b.n	80070d0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007000:	60da      	str	r2, [r3, #12]
      break;
 8007002:	e048      	b.n	8007096 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	4a33      	ldr	r2, [pc, #204]	; (80070d8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 800700a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007010:	4a32      	ldr	r2, [pc, #200]	; (80070dc <HAL_TIM_IC_Start_DMA+0x1ec>)
 8007012:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	4a31      	ldr	r2, [pc, #196]	; (80070e0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 800701a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	333c      	adds	r3, #60	; 0x3c
 8007026:	4619      	mov	r1, r3
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	887b      	ldrh	r3, [r7, #2]
 800702c:	f7fd f8ea 	bl	8004204 <HAL_DMA_Start_IT>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d001      	beq.n	800703a <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e04a      	b.n	80070d0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68da      	ldr	r2, [r3, #12]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007048:	60da      	str	r2, [r3, #12]
      break;
 800704a:	e024      	b.n	8007096 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	4a21      	ldr	r2, [pc, #132]	; (80070d8 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8007052:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007058:	4a20      	ldr	r2, [pc, #128]	; (80070dc <HAL_TIM_IC_Start_DMA+0x1ec>)
 800705a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007060:	4a1f      	ldr	r2, [pc, #124]	; (80070e0 <HAL_TIM_IC_Start_DMA+0x1f0>)
 8007062:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	3340      	adds	r3, #64	; 0x40
 800706e:	4619      	mov	r1, r3
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	887b      	ldrh	r3, [r7, #2]
 8007074:	f7fd f8c6 	bl	8004204 <HAL_DMA_Start_IT>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e026      	b.n	80070d0 <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68da      	ldr	r2, [r3, #12]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007090:	60da      	str	r2, [r3, #12]
      break;
 8007092:	e000      	b.n	8007096 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8007094:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2201      	movs	r2, #1
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	4618      	mov	r0, r3
 80070a0:	f001 fabe 	bl	8008620 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689a      	ldr	r2, [r3, #8]
 80070aa:	4b0e      	ldr	r3, [pc, #56]	; (80070e4 <HAL_TIM_IC_Start_DMA+0x1f4>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b06      	cmp	r3, #6
 80070b4:	d00b      	beq.n	80070ce <HAL_TIM_IC_Start_DMA+0x1de>
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070bc:	d007      	beq.n	80070ce <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f042 0201 	orr.w	r2, r2, #1
 80070cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3718      	adds	r7, #24
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	08007aad 	.word	0x08007aad
 80070dc:	08007b1d 	.word	0x08007b1d
 80070e0:	08007a89 	.word	0x08007a89
 80070e4:	00010007 	.word	0x00010007

080070e8 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	2b0c      	cmp	r3, #12
 80070f6:	d855      	bhi.n	80071a4 <HAL_TIM_IC_Stop_DMA+0xbc>
 80070f8:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <HAL_TIM_IC_Stop_DMA+0x18>)
 80070fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070fe:	bf00      	nop
 8007100:	08007135 	.word	0x08007135
 8007104:	080071a5 	.word	0x080071a5
 8007108:	080071a5 	.word	0x080071a5
 800710c:	080071a5 	.word	0x080071a5
 8007110:	08007151 	.word	0x08007151
 8007114:	080071a5 	.word	0x080071a5
 8007118:	080071a5 	.word	0x080071a5
 800711c:	080071a5 	.word	0x080071a5
 8007120:	0800716d 	.word	0x0800716d
 8007124:	080071a5 	.word	0x080071a5
 8007128:	080071a5 	.word	0x080071a5
 800712c:	080071a5 	.word	0x080071a5
 8007130:	08007189 	.word	0x08007189
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	68da      	ldr	r2, [r3, #12]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007142:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007148:	4618      	mov	r0, r3
 800714a:	f7fd f8bb 	bl	80042c4 <HAL_DMA_Abort_IT>
      break;
 800714e:	e02a      	b.n	80071a6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800715e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007164:	4618      	mov	r0, r3
 8007166:	f7fd f8ad 	bl	80042c4 <HAL_DMA_Abort_IT>
      break;
 800716a:	e01c      	b.n	80071a6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68da      	ldr	r2, [r3, #12]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800717a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007180:	4618      	mov	r0, r3
 8007182:	f7fd f89f 	bl	80042c4 <HAL_DMA_Abort_IT>
      break;
 8007186:	e00e      	b.n	80071a6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007196:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	4618      	mov	r0, r3
 800719e:	f7fd f891 	bl	80042c4 <HAL_DMA_Abort_IT>
      break;
 80071a2:	e000      	b.n	80071a6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 80071a4:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2200      	movs	r2, #0
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 fa36 	bl	8008620 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6a1a      	ldr	r2, [r3, #32]
 80071ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80071be:	4013      	ands	r3, r2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10f      	bne.n	80071e4 <HAL_TIM_IC_Stop_DMA+0xfc>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6a1a      	ldr	r2, [r3, #32]
 80071ca:	f240 4344 	movw	r3, #1092	; 0x444
 80071ce:	4013      	ands	r3, r2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d107      	bne.n	80071e4 <HAL_TIM_IC_Stop_DMA+0xfc>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0201 	bic.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3708      	adds	r7, #8
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop

080071f8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d101      	bne.n	800720c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e02d      	b.n	8007268 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d106      	bne.n	8007226 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 f825 	bl	8007270 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2202      	movs	r2, #2
 800722a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	3304      	adds	r3, #4
 8007236:	4619      	mov	r1, r3
 8007238:	4610      	mov	r0, r2
 800723a:	f000 fca7 	bl	8007b8c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0208 	bic.w	r2, r2, #8
 800724c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6819      	ldr	r1, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	430a      	orrs	r2, r1
 800725c:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2201      	movs	r2, #1
 8007262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007266:	2300      	movs	r3, #0
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b02      	cmp	r3, #2
 8007298:	d122      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0302 	and.w	r3, r3, #2
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d11b      	bne.n	80072e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f06f 0202 	mvn.w	r2, #2
 80072b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	699b      	ldr	r3, [r3, #24]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7fa fdd8 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 80072cc:	e005      	b.n	80072da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 fba8 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f000 fbb9 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	f003 0304 	and.w	r3, r3, #4
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	d122      	bne.n	8007334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	f003 0304 	and.w	r3, r3, #4
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d11b      	bne.n	8007334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f06f 0204 	mvn.w	r2, #4
 8007304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2202      	movs	r2, #2
 800730a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	699b      	ldr	r3, [r3, #24]
 8007312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fa fdae 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 8007320:	e005      	b.n	800732e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fb7e 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fb8f 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	f003 0308 	and.w	r3, r3, #8
 800733e:	2b08      	cmp	r3, #8
 8007340:	d122      	bne.n	8007388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	f003 0308 	and.w	r3, r3, #8
 800734c:	2b08      	cmp	r3, #8
 800734e:	d11b      	bne.n	8007388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f06f 0208 	mvn.w	r2, #8
 8007358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2204      	movs	r2, #4
 800735e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	69db      	ldr	r3, [r3, #28]
 8007366:	f003 0303 	and.w	r3, r3, #3
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f7fa fd84 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 8007374:	e005      	b.n	8007382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f000 fb54 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fb65 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f003 0310 	and.w	r3, r3, #16
 8007392:	2b10      	cmp	r3, #16
 8007394:	d122      	bne.n	80073dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f003 0310 	and.w	r3, r3, #16
 80073a0:	2b10      	cmp	r3, #16
 80073a2:	d11b      	bne.n	80073dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f06f 0210 	mvn.w	r2, #16
 80073ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2208      	movs	r2, #8
 80073b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f7fa fd5a 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
 80073c8:	e005      	b.n	80073d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fb2a 	bl	8007a24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fb3b 	bl	8007a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d10e      	bne.n	8007408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d107      	bne.n	8007408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0201 	mvn.w	r2, #1
 8007400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7fa fa30 	bl	8001868 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d10e      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007420:	2b80      	cmp	r3, #128	; 0x80
 8007422:	d107      	bne.n	8007434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800742c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f001 fa32 	bl	8008898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800743e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007442:	d10e      	bne.n	8007462 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744e:	2b80      	cmp	r3, #128	; 0x80
 8007450:	d107      	bne.n	8007462 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800745a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f001 fa25 	bl	80088ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746c:	2b40      	cmp	r3, #64	; 0x40
 800746e:	d10e      	bne.n	800748e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747a:	2b40      	cmp	r3, #64	; 0x40
 800747c:	d107      	bne.n	800748e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007486:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f000 fae9 	bl	8007a60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f003 0320 	and.w	r3, r3, #32
 8007498:	2b20      	cmp	r3, #32
 800749a:	d10e      	bne.n	80074ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d107      	bne.n	80074ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f06f 0220 	mvn.w	r2, #32
 80074b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 f9e5 	bl	8008884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ba:	bf00      	nop
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	60b9      	str	r1, [r7, #8]
 80074cc:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_TIM_IC_ConfigChannel+0x1a>
 80074d8:	2302      	movs	r3, #2
 80074da:	e08a      	b.n	80075f2 <HAL_TIM_IC_ConfigChannel+0x130>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d11b      	bne.n	800752a <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6818      	ldr	r0, [r3, #0]
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	6819      	ldr	r1, [r3, #0]
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	685a      	ldr	r2, [r3, #4]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	f000 fec9 	bl	8008298 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	699a      	ldr	r2, [r3, #24]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f022 020c 	bic.w	r2, r2, #12
 8007514:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6999      	ldr	r1, [r3, #24]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	689a      	ldr	r2, [r3, #8]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	619a      	str	r2, [r3, #24]
 8007528:	e05a      	b.n	80075e0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b04      	cmp	r3, #4
 800752e:	d11c      	bne.n	800756a <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6818      	ldr	r0, [r3, #0]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	6819      	ldr	r1, [r3, #0]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	685a      	ldr	r2, [r3, #4]
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f000 ff4d 	bl	80083de <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	699a      	ldr	r2, [r3, #24]
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007552:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6999      	ldr	r1, [r3, #24]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	021a      	lsls	r2, r3, #8
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	430a      	orrs	r2, r1
 8007566:	619a      	str	r2, [r3, #24]
 8007568:	e03a      	b.n	80075e0 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b08      	cmp	r3, #8
 800756e:	d11b      	bne.n	80075a8 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	6819      	ldr	r1, [r3, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	f000 ff9a 	bl	80084b8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69da      	ldr	r2, [r3, #28]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f022 020c 	bic.w	r2, r2, #12
 8007592:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	69d9      	ldr	r1, [r3, #28]
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	430a      	orrs	r2, r1
 80075a4:	61da      	str	r2, [r3, #28]
 80075a6:	e01b      	b.n	80075e0 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6818      	ldr	r0, [r3, #0]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	6819      	ldr	r1, [r3, #0]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f000 ffba 	bl	8008530 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	69da      	ldr	r2, [r3, #28]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80075ca:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	69d9      	ldr	r1, [r3, #28]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	021a      	lsls	r2, r3, #8
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007612:	2302      	movs	r3, #2
 8007614:	e105      	b.n	8007822 <HAL_TIM_PWM_ConfigChannel+0x226>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2202      	movs	r2, #2
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b14      	cmp	r3, #20
 800762a:	f200 80f0 	bhi.w	800780e <HAL_TIM_PWM_ConfigChannel+0x212>
 800762e:	a201      	add	r2, pc, #4	; (adr r2, 8007634 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007634:	08007689 	.word	0x08007689
 8007638:	0800780f 	.word	0x0800780f
 800763c:	0800780f 	.word	0x0800780f
 8007640:	0800780f 	.word	0x0800780f
 8007644:	080076c9 	.word	0x080076c9
 8007648:	0800780f 	.word	0x0800780f
 800764c:	0800780f 	.word	0x0800780f
 8007650:	0800780f 	.word	0x0800780f
 8007654:	0800770b 	.word	0x0800770b
 8007658:	0800780f 	.word	0x0800780f
 800765c:	0800780f 	.word	0x0800780f
 8007660:	0800780f 	.word	0x0800780f
 8007664:	0800774b 	.word	0x0800774b
 8007668:	0800780f 	.word	0x0800780f
 800766c:	0800780f 	.word	0x0800780f
 8007670:	0800780f 	.word	0x0800780f
 8007674:	0800778d 	.word	0x0800778d
 8007678:	0800780f 	.word	0x0800780f
 800767c:	0800780f 	.word	0x0800780f
 8007680:	0800780f 	.word	0x0800780f
 8007684:	080077cd 	.word	0x080077cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68b9      	ldr	r1, [r7, #8]
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fb1c 	bl	8007ccc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	699a      	ldr	r2, [r3, #24]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f042 0208 	orr.w	r2, r2, #8
 80076a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	699a      	ldr	r2, [r3, #24]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f022 0204 	bic.w	r2, r2, #4
 80076b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6999      	ldr	r1, [r3, #24]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	691a      	ldr	r2, [r3, #16]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	430a      	orrs	r2, r1
 80076c4:	619a      	str	r2, [r3, #24]
      break;
 80076c6:	e0a3      	b.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	68b9      	ldr	r1, [r7, #8]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 fb6e 	bl	8007db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	699a      	ldr	r2, [r3, #24]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6999      	ldr	r1, [r3, #24]
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	021a      	lsls	r2, r3, #8
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	619a      	str	r2, [r3, #24]
      break;
 8007708:	e082      	b.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68b9      	ldr	r1, [r7, #8]
 8007710:	4618      	mov	r0, r3
 8007712:	f000 fbc5 	bl	8007ea0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	69da      	ldr	r2, [r3, #28]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f042 0208 	orr.w	r2, r2, #8
 8007724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	69da      	ldr	r2, [r3, #28]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0204 	bic.w	r2, r2, #4
 8007734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	69d9      	ldr	r1, [r3, #28]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	691a      	ldr	r2, [r3, #16]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	430a      	orrs	r2, r1
 8007746:	61da      	str	r2, [r3, #28]
      break;
 8007748:	e062      	b.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68b9      	ldr	r1, [r7, #8]
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fc1b 	bl	8007f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69da      	ldr	r2, [r3, #28]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69da      	ldr	r2, [r3, #28]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	69d9      	ldr	r1, [r3, #28]
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	021a      	lsls	r2, r3, #8
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	61da      	str	r2, [r3, #28]
      break;
 800778a:	e041      	b.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68b9      	ldr	r1, [r7, #8]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 fc52 	bl	800803c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0208 	orr.w	r2, r2, #8
 80077a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0204 	bic.w	r2, r2, #4
 80077b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	691a      	ldr	r2, [r3, #16]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	430a      	orrs	r2, r1
 80077c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077ca:	e021      	b.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68b9      	ldr	r1, [r7, #8]
 80077d2:	4618      	mov	r0, r3
 80077d4:	f000 fc84 	bl	80080e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	021a      	lsls	r2, r3, #8
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800780c:	e000      	b.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800780e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop

0800782c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_TIM_ConfigClockSource+0x18>
 8007840:	2302      	movs	r3, #2
 8007842:	e0a6      	b.n	8007992 <HAL_TIM_ConfigClockSource+0x166>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2202      	movs	r2, #2
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800785c:	68fa      	ldr	r2, [r7, #12]
 800785e:	4b4f      	ldr	r3, [pc, #316]	; (800799c <HAL_TIM_ConfigClockSource+0x170>)
 8007860:	4013      	ands	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800786a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2b40      	cmp	r3, #64	; 0x40
 800787a:	d067      	beq.n	800794c <HAL_TIM_ConfigClockSource+0x120>
 800787c:	2b40      	cmp	r3, #64	; 0x40
 800787e:	d80b      	bhi.n	8007898 <HAL_TIM_ConfigClockSource+0x6c>
 8007880:	2b10      	cmp	r3, #16
 8007882:	d073      	beq.n	800796c <HAL_TIM_ConfigClockSource+0x140>
 8007884:	2b10      	cmp	r3, #16
 8007886:	d802      	bhi.n	800788e <HAL_TIM_ConfigClockSource+0x62>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d06f      	beq.n	800796c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800788c:	e078      	b.n	8007980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800788e:	2b20      	cmp	r3, #32
 8007890:	d06c      	beq.n	800796c <HAL_TIM_ConfigClockSource+0x140>
 8007892:	2b30      	cmp	r3, #48	; 0x30
 8007894:	d06a      	beq.n	800796c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007896:	e073      	b.n	8007980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007898:	2b70      	cmp	r3, #112	; 0x70
 800789a:	d00d      	beq.n	80078b8 <HAL_TIM_ConfigClockSource+0x8c>
 800789c:	2b70      	cmp	r3, #112	; 0x70
 800789e:	d804      	bhi.n	80078aa <HAL_TIM_ConfigClockSource+0x7e>
 80078a0:	2b50      	cmp	r3, #80	; 0x50
 80078a2:	d033      	beq.n	800790c <HAL_TIM_ConfigClockSource+0xe0>
 80078a4:	2b60      	cmp	r3, #96	; 0x60
 80078a6:	d041      	beq.n	800792c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80078a8:	e06a      	b.n	8007980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80078aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ae:	d066      	beq.n	800797e <HAL_TIM_ConfigClockSource+0x152>
 80078b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078b4:	d017      	beq.n	80078e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80078b6:	e063      	b.n	8007980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6818      	ldr	r0, [r3, #0]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	6899      	ldr	r1, [r3, #8]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f000 fe8a 	bl	80085e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	609a      	str	r2, [r3, #8]
      break;
 80078e4:	e04c      	b.n	8007980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	6899      	ldr	r1, [r3, #8]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	f000 fe73 	bl	80085e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	689a      	ldr	r2, [r3, #8]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007908:	609a      	str	r2, [r3, #8]
      break;
 800790a:	e039      	b.n	8007980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6818      	ldr	r0, [r3, #0]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	6859      	ldr	r1, [r3, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	461a      	mov	r2, r3
 800791a:	f000 fd31 	bl	8008380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2150      	movs	r1, #80	; 0x50
 8007924:	4618      	mov	r0, r3
 8007926:	f000 fe40 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 800792a:	e029      	b.n	8007980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6818      	ldr	r0, [r3, #0]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	6859      	ldr	r1, [r3, #4]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	461a      	mov	r2, r3
 800793a:	f000 fd8d 	bl	8008458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2160      	movs	r1, #96	; 0x60
 8007944:	4618      	mov	r0, r3
 8007946:	f000 fe30 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 800794a:	e019      	b.n	8007980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6818      	ldr	r0, [r3, #0]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	6859      	ldr	r1, [r3, #4]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	461a      	mov	r2, r3
 800795a:	f000 fd11 	bl	8008380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2140      	movs	r1, #64	; 0x40
 8007964:	4618      	mov	r0, r3
 8007966:	f000 fe20 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 800796a:	e009      	b.n	8007980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4619      	mov	r1, r3
 8007976:	4610      	mov	r0, r2
 8007978:	f000 fe17 	bl	80085aa <TIM_ITRx_SetConfig>
      break;
 800797c:	e000      	b.n	8007980 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800797e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3710      	adds	r7, #16
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	fffeff88 	.word	0xfffeff88

080079a0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
 80079a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d101      	bne.n	80079b8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80079b4:	2302      	movs	r3, #2
 80079b6:	e031      	b.n	8007a1c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2202      	movs	r2, #2
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80079c8:	6839      	ldr	r1, [r7, #0]
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fbdc 	bl	8008188 <TIM_SlaveTimer_SetConfig>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e018      	b.n	8007a1c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68da      	ldr	r2, [r3, #12]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079f8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68da      	ldr	r2, [r3, #12]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a08:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3708      	adds	r7, #8
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b083      	sub	sp, #12
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff ffe8 	bl	8007a74 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007aa4:	bf00      	nop
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b084      	sub	sp, #16
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d103      	bne.n	8007ad4 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	771a      	strb	r2, [r3, #28]
 8007ad2:	e019      	b.n	8007b08 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d103      	bne.n	8007ae6 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2202      	movs	r2, #2
 8007ae2:	771a      	strb	r2, [r3, #28]
 8007ae4:	e010      	b.n	8007b08 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d103      	bne.n	8007af8 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2204      	movs	r2, #4
 8007af4:	771a      	strb	r2, [r3, #28]
 8007af6:	e007      	b.n	8007b08 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d102      	bne.n	8007b08 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2208      	movs	r2, #8
 8007b06:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f7fa f9b7 	bl	8001e7c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	771a      	strb	r2, [r3, #28]
}
 8007b14:	bf00      	nop
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b084      	sub	sp, #16
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	687a      	ldr	r2, [r7, #4]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d103      	bne.n	8007b44 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	771a      	strb	r2, [r3, #28]
 8007b42:	e019      	b.n	8007b78 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d103      	bne.n	8007b56 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2202      	movs	r2, #2
 8007b52:	771a      	strb	r2, [r3, #28]
 8007b54:	e010      	b.n	8007b78 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d103      	bne.n	8007b68 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2204      	movs	r2, #4
 8007b64:	771a      	strb	r2, [r3, #28]
 8007b66:	e007      	b.n	8007b78 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	429a      	cmp	r2, r3
 8007b70:	d102      	bne.n	8007b78 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	2208      	movs	r2, #8
 8007b76:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f7ff ff5d 	bl	8007a38 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	771a      	strb	r2, [r3, #28]
}
 8007b84:	bf00      	nop
 8007b86:	3710      	adds	r7, #16
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a40      	ldr	r2, [pc, #256]	; (8007ca0 <TIM_Base_SetConfig+0x114>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007baa:	d00f      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a3d      	ldr	r2, [pc, #244]	; (8007ca4 <TIM_Base_SetConfig+0x118>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00b      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a3c      	ldr	r2, [pc, #240]	; (8007ca8 <TIM_Base_SetConfig+0x11c>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d007      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a3b      	ldr	r2, [pc, #236]	; (8007cac <TIM_Base_SetConfig+0x120>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d003      	beq.n	8007bcc <TIM_Base_SetConfig+0x40>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a3a      	ldr	r2, [pc, #232]	; (8007cb0 <TIM_Base_SetConfig+0x124>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d108      	bne.n	8007bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a2f      	ldr	r2, [pc, #188]	; (8007ca0 <TIM_Base_SetConfig+0x114>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d02b      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bec:	d027      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a2c      	ldr	r2, [pc, #176]	; (8007ca4 <TIM_Base_SetConfig+0x118>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d023      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a2b      	ldr	r2, [pc, #172]	; (8007ca8 <TIM_Base_SetConfig+0x11c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d01f      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2a      	ldr	r2, [pc, #168]	; (8007cac <TIM_Base_SetConfig+0x120>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d01b      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a29      	ldr	r2, [pc, #164]	; (8007cb0 <TIM_Base_SetConfig+0x124>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d017      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a28      	ldr	r2, [pc, #160]	; (8007cb4 <TIM_Base_SetConfig+0x128>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d013      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a27      	ldr	r2, [pc, #156]	; (8007cb8 <TIM_Base_SetConfig+0x12c>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00f      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a26      	ldr	r2, [pc, #152]	; (8007cbc <TIM_Base_SetConfig+0x130>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d00b      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a25      	ldr	r2, [pc, #148]	; (8007cc0 <TIM_Base_SetConfig+0x134>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d007      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	4a24      	ldr	r2, [pc, #144]	; (8007cc4 <TIM_Base_SetConfig+0x138>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d003      	beq.n	8007c3e <TIM_Base_SetConfig+0xb2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4a23      	ldr	r2, [pc, #140]	; (8007cc8 <TIM_Base_SetConfig+0x13c>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d108      	bne.n	8007c50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68db      	ldr	r3, [r3, #12]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	689a      	ldr	r2, [r3, #8]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a0a      	ldr	r2, [pc, #40]	; (8007ca0 <TIM_Base_SetConfig+0x114>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d003      	beq.n	8007c84 <TIM_Base_SetConfig+0xf8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a0c      	ldr	r2, [pc, #48]	; (8007cb0 <TIM_Base_SetConfig+0x124>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d103      	bne.n	8007c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	691a      	ldr	r2, [r3, #16]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	615a      	str	r2, [r3, #20]
}
 8007c92:	bf00      	nop
 8007c94:	3714      	adds	r7, #20
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	40010000 	.word	0x40010000
 8007ca4:	40000400 	.word	0x40000400
 8007ca8:	40000800 	.word	0x40000800
 8007cac:	40000c00 	.word	0x40000c00
 8007cb0:	40010400 	.word	0x40010400
 8007cb4:	40014000 	.word	0x40014000
 8007cb8:	40014400 	.word	0x40014400
 8007cbc:	40014800 	.word	0x40014800
 8007cc0:	40001800 	.word	0x40001800
 8007cc4:	40001c00 	.word	0x40001c00
 8007cc8:	40002000 	.word	0x40002000

08007ccc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b087      	sub	sp, #28
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	f023 0201 	bic.w	r2, r3, #1
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a1b      	ldr	r3, [r3, #32]
 8007ce6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	699b      	ldr	r3, [r3, #24]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cf4:	68fa      	ldr	r2, [r7, #12]
 8007cf6:	4b2b      	ldr	r3, [pc, #172]	; (8007da4 <TIM_OC1_SetConfig+0xd8>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0303 	bic.w	r3, r3, #3
 8007d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	f023 0302 	bic.w	r3, r3, #2
 8007d14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	4a21      	ldr	r2, [pc, #132]	; (8007da8 <TIM_OC1_SetConfig+0xdc>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d003      	beq.n	8007d30 <TIM_OC1_SetConfig+0x64>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a20      	ldr	r2, [pc, #128]	; (8007dac <TIM_OC1_SetConfig+0xe0>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d10c      	bne.n	8007d4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f023 0308 	bic.w	r3, r3, #8
 8007d36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f023 0304 	bic.w	r3, r3, #4
 8007d48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a16      	ldr	r2, [pc, #88]	; (8007da8 <TIM_OC1_SetConfig+0xdc>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d003      	beq.n	8007d5a <TIM_OC1_SetConfig+0x8e>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a15      	ldr	r2, [pc, #84]	; (8007dac <TIM_OC1_SetConfig+0xe0>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d111      	bne.n	8007d7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	695b      	ldr	r3, [r3, #20]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68fa      	ldr	r2, [r7, #12]
 8007d88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685a      	ldr	r2, [r3, #4]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	621a      	str	r2, [r3, #32]
}
 8007d98:	bf00      	nop
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	fffeff8f 	.word	0xfffeff8f
 8007da8:	40010000 	.word	0x40010000
 8007dac:	40010400 	.word	0x40010400

08007db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	f023 0210 	bic.w	r2, r3, #16
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	4b2e      	ldr	r3, [pc, #184]	; (8007e94 <TIM_OC2_SetConfig+0xe4>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f023 0320 	bic.w	r3, r3, #32
 8007dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a23      	ldr	r2, [pc, #140]	; (8007e98 <TIM_OC2_SetConfig+0xe8>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d003      	beq.n	8007e18 <TIM_OC2_SetConfig+0x68>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a22      	ldr	r2, [pc, #136]	; (8007e9c <TIM_OC2_SetConfig+0xec>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d10d      	bne.n	8007e34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	011b      	lsls	r3, r3, #4
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a18      	ldr	r2, [pc, #96]	; (8007e98 <TIM_OC2_SetConfig+0xe8>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d003      	beq.n	8007e44 <TIM_OC2_SetConfig+0x94>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a17      	ldr	r2, [pc, #92]	; (8007e9c <TIM_OC2_SetConfig+0xec>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d113      	bne.n	8007e6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	feff8fff 	.word	0xfeff8fff
 8007e98:	40010000 	.word	0x40010000
 8007e9c:	40010400 	.word	0x40010400

08007ea0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	4b2d      	ldr	r3, [pc, #180]	; (8007f80 <TIM_OC3_SetConfig+0xe0>)
 8007ecc:	4013      	ands	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 0303 	bic.w	r3, r3, #3
 8007ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	021b      	lsls	r3, r3, #8
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a22      	ldr	r2, [pc, #136]	; (8007f84 <TIM_OC3_SetConfig+0xe4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d003      	beq.n	8007f06 <TIM_OC3_SetConfig+0x66>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a21      	ldr	r2, [pc, #132]	; (8007f88 <TIM_OC3_SetConfig+0xe8>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d10d      	bne.n	8007f22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	021b      	lsls	r3, r3, #8
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a17      	ldr	r2, [pc, #92]	; (8007f84 <TIM_OC3_SetConfig+0xe4>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d003      	beq.n	8007f32 <TIM_OC3_SetConfig+0x92>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a16      	ldr	r2, [pc, #88]	; (8007f88 <TIM_OC3_SetConfig+0xe8>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d113      	bne.n	8007f5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	011b      	lsls	r3, r3, #4
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	011b      	lsls	r3, r3, #4
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	685a      	ldr	r2, [r3, #4]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	697a      	ldr	r2, [r7, #20]
 8007f72:	621a      	str	r2, [r3, #32]
}
 8007f74:	bf00      	nop
 8007f76:	371c      	adds	r7, #28
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	fffeff8f 	.word	0xfffeff8f
 8007f84:	40010000 	.word	0x40010000
 8007f88:	40010400 	.word	0x40010400

08007f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b087      	sub	sp, #28
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a1b      	ldr	r3, [r3, #32]
 8007f9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a1b      	ldr	r3, [r3, #32]
 8007fa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	69db      	ldr	r3, [r3, #28]
 8007fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4b1e      	ldr	r3, [pc, #120]	; (8008030 <TIM_OC4_SetConfig+0xa4>)
 8007fb8:	4013      	ands	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	021b      	lsls	r3, r3, #8
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	031b      	lsls	r3, r3, #12
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a13      	ldr	r2, [pc, #76]	; (8008034 <TIM_OC4_SetConfig+0xa8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d003      	beq.n	8007ff4 <TIM_OC4_SetConfig+0x68>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a12      	ldr	r2, [pc, #72]	; (8008038 <TIM_OC4_SetConfig+0xac>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d109      	bne.n	8008008 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ffa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	695b      	ldr	r3, [r3, #20]
 8008000:	019b      	lsls	r3, r3, #6
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	621a      	str	r2, [r3, #32]
}
 8008022:	bf00      	nop
 8008024:	371c      	adds	r7, #28
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	feff8fff 	.word	0xfeff8fff
 8008034:	40010000 	.word	0x40010000
 8008038:	40010400 	.word	0x40010400

0800803c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6a1b      	ldr	r3, [r3, #32]
 800804a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	4b1b      	ldr	r3, [pc, #108]	; (80080d4 <TIM_OC5_SetConfig+0x98>)
 8008068:	4013      	ands	r3, r2
 800806a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68fa      	ldr	r2, [r7, #12]
 8008072:	4313      	orrs	r3, r2
 8008074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800807c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	041b      	lsls	r3, r3, #16
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4a12      	ldr	r2, [pc, #72]	; (80080d8 <TIM_OC5_SetConfig+0x9c>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d003      	beq.n	800809a <TIM_OC5_SetConfig+0x5e>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4a11      	ldr	r2, [pc, #68]	; (80080dc <TIM_OC5_SetConfig+0xa0>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d109      	bne.n	80080ae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	695b      	ldr	r3, [r3, #20]
 80080a6:	021b      	lsls	r3, r3, #8
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	68fa      	ldr	r2, [r7, #12]
 80080b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	685a      	ldr	r2, [r3, #4]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	621a      	str	r2, [r3, #32]
}
 80080c8:	bf00      	nop
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr
 80080d4:	fffeff8f 	.word	0xfffeff8f
 80080d8:	40010000 	.word	0x40010000
 80080dc:	40010400 	.word	0x40010400

080080e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a1b      	ldr	r3, [r3, #32]
 80080ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008108:	68fa      	ldr	r2, [r7, #12]
 800810a:	4b1c      	ldr	r3, [pc, #112]	; (800817c <TIM_OC6_SetConfig+0x9c>)
 800810c:	4013      	ands	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	021b      	lsls	r3, r3, #8
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	4313      	orrs	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	051b      	lsls	r3, r3, #20
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	4313      	orrs	r3, r2
 800812e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a13      	ldr	r2, [pc, #76]	; (8008180 <TIM_OC6_SetConfig+0xa0>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <TIM_OC6_SetConfig+0x60>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a12      	ldr	r2, [pc, #72]	; (8008184 <TIM_OC6_SetConfig+0xa4>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d109      	bne.n	8008154 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008146:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	029b      	lsls	r3, r3, #10
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	4313      	orrs	r3, r2
 8008152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	621a      	str	r2, [r3, #32]
}
 800816e:	bf00      	nop
 8008170:	371c      	adds	r7, #28
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	feff8fff 	.word	0xfeff8fff
 8008180:	40010000 	.word	0x40010000
 8008184:	40010400 	.word	0x40010400

08008188 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	697a      	ldr	r2, [r7, #20]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	4b39      	ldr	r3, [pc, #228]	; (8008294 <TIM_SlaveTimer_SetConfig+0x10c>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	697a      	ldr	r2, [r7, #20]
 80081c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	2b30      	cmp	r3, #48	; 0x30
 80081cc:	d05c      	beq.n	8008288 <TIM_SlaveTimer_SetConfig+0x100>
 80081ce:	2b30      	cmp	r3, #48	; 0x30
 80081d0:	d806      	bhi.n	80081e0 <TIM_SlaveTimer_SetConfig+0x58>
 80081d2:	2b10      	cmp	r3, #16
 80081d4:	d058      	beq.n	8008288 <TIM_SlaveTimer_SetConfig+0x100>
 80081d6:	2b20      	cmp	r3, #32
 80081d8:	d056      	beq.n	8008288 <TIM_SlaveTimer_SetConfig+0x100>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d054      	beq.n	8008288 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80081de:	e054      	b.n	800828a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80081e0:	2b50      	cmp	r3, #80	; 0x50
 80081e2:	d03d      	beq.n	8008260 <TIM_SlaveTimer_SetConfig+0xd8>
 80081e4:	2b50      	cmp	r3, #80	; 0x50
 80081e6:	d802      	bhi.n	80081ee <TIM_SlaveTimer_SetConfig+0x66>
 80081e8:	2b40      	cmp	r3, #64	; 0x40
 80081ea:	d010      	beq.n	800820e <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80081ec:	e04d      	b.n	800828a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80081ee:	2b60      	cmp	r3, #96	; 0x60
 80081f0:	d040      	beq.n	8008274 <TIM_SlaveTimer_SetConfig+0xec>
 80081f2:	2b70      	cmp	r3, #112	; 0x70
 80081f4:	d000      	beq.n	80081f8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80081f6:	e048      	b.n	800828a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	68d9      	ldr	r1, [r3, #12]
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f000 f9ea 	bl	80085e0 <TIM_ETR_SetConfig>
      break;
 800820c:	e03d      	b.n	800828a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2b05      	cmp	r3, #5
 8008214:	d101      	bne.n	800821a <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e038      	b.n	800828c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6a1b      	ldr	r3, [r3, #32]
 8008220:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6a1a      	ldr	r2, [r3, #32]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0201 	bic.w	r2, r2, #1
 8008230:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008240:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	011b      	lsls	r3, r3, #4
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	621a      	str	r2, [r3, #32]
      break;
 800825e:	e014      	b.n	800828a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6818      	ldr	r0, [r3, #0]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	6899      	ldr	r1, [r3, #8]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	461a      	mov	r2, r3
 800826e:	f000 f887 	bl	8008380 <TIM_TI1_ConfigInputStage>
      break;
 8008272:	e00a      	b.n	800828a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	6899      	ldr	r1, [r3, #8]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	461a      	mov	r2, r3
 8008282:	f000 f8e9 	bl	8008458 <TIM_TI2_ConfigInputStage>
      break;
 8008286:	e000      	b.n	800828a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8008288:	bf00      	nop
  }
  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	fffefff8 	.word	0xfffefff8

08008298 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
 80082a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	f023 0201 	bic.w	r2, r3, #1
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	6a1b      	ldr	r3, [r3, #32]
 80082bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	4a28      	ldr	r2, [pc, #160]	; (8008364 <TIM_TI1_SetConfig+0xcc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d01b      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082cc:	d017      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4a25      	ldr	r2, [pc, #148]	; (8008368 <TIM_TI1_SetConfig+0xd0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d013      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4a24      	ldr	r2, [pc, #144]	; (800836c <TIM_TI1_SetConfig+0xd4>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00f      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4a23      	ldr	r2, [pc, #140]	; (8008370 <TIM_TI1_SetConfig+0xd8>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00b      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	4a22      	ldr	r2, [pc, #136]	; (8008374 <TIM_TI1_SetConfig+0xdc>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d007      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	4a21      	ldr	r2, [pc, #132]	; (8008378 <TIM_TI1_SetConfig+0xe0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d003      	beq.n	80082fe <TIM_TI1_SetConfig+0x66>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4a20      	ldr	r2, [pc, #128]	; (800837c <TIM_TI1_SetConfig+0xe4>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d101      	bne.n	8008302 <TIM_TI1_SetConfig+0x6a>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <TIM_TI1_SetConfig+0x6c>
 8008302:	2300      	movs	r3, #0
 8008304:	2b00      	cmp	r3, #0
 8008306:	d008      	beq.n	800831a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f023 0303 	bic.w	r3, r3, #3
 800830e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008310:	697a      	ldr	r2, [r7, #20]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4313      	orrs	r3, r2
 8008316:	617b      	str	r3, [r7, #20]
 8008318:	e003      	b.n	8008322 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f043 0301 	orr.w	r3, r3, #1
 8008320:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	b2db      	uxtb	r3, r3
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	f023 030a 	bic.w	r3, r3, #10
 800833c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800833e:	68bb      	ldr	r3, [r7, #8]
 8008340:	f003 030a 	and.w	r3, r3, #10
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	4313      	orrs	r3, r2
 8008348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	693a      	ldr	r2, [r7, #16]
 8008354:	621a      	str	r2, [r3, #32]
}
 8008356:	bf00      	nop
 8008358:	371c      	adds	r7, #28
 800835a:	46bd      	mov	sp, r7
 800835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	40010000 	.word	0x40010000
 8008368:	40000400 	.word	0x40000400
 800836c:	40000800 	.word	0x40000800
 8008370:	40000c00 	.word	0x40000c00
 8008374:	40010400 	.word	0x40010400
 8008378:	40014000 	.word	0x40014000
 800837c:	40001800 	.word	0x40001800

08008380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008380:	b480      	push	{r7}
 8008382:	b087      	sub	sp, #28
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	6a1b      	ldr	r3, [r3, #32]
 8008396:	f023 0201 	bic.w	r2, r3, #1
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	011b      	lsls	r3, r3, #4
 80083b0:	693a      	ldr	r2, [r7, #16]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f023 030a 	bic.w	r3, r3, #10
 80083bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80083be:	697a      	ldr	r2, [r7, #20]
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	693a      	ldr	r2, [r7, #16]
 80083ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	621a      	str	r2, [r3, #32]
}
 80083d2:	bf00      	nop
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083de:	b480      	push	{r7}
 80083e0:	b087      	sub	sp, #28
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	60f8      	str	r0, [r7, #12]
 80083e6:	60b9      	str	r1, [r7, #8]
 80083e8:	607a      	str	r2, [r7, #4]
 80083ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a1b      	ldr	r3, [r3, #32]
 80083f0:	f023 0210 	bic.w	r2, r3, #16
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800840a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	021b      	lsls	r3, r3, #8
 8008410:	697a      	ldr	r2, [r7, #20]
 8008412:	4313      	orrs	r3, r2
 8008414:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800841c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	031b      	lsls	r3, r3, #12
 8008422:	b29b      	uxth	r3, r3
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008430:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	011b      	lsls	r3, r3, #4
 8008436:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800843a:	693a      	ldr	r2, [r7, #16]
 800843c:	4313      	orrs	r3, r2
 800843e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	621a      	str	r2, [r3, #32]
}
 800844c:	bf00      	nop
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr

08008458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	f023 0210 	bic.w	r2, r3, #16
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008482:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	031b      	lsls	r3, r3, #12
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008494:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	011b      	lsls	r3, r3, #4
 800849a:	693a      	ldr	r2, [r7, #16]
 800849c:	4313      	orrs	r3, r2
 800849e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	693a      	ldr	r2, [r7, #16]
 80084aa:	621a      	str	r2, [r3, #32]
}
 80084ac:	bf00      	nop
 80084ae:	371c      	adds	r7, #28
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6a1b      	ldr	r3, [r3, #32]
 80084dc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	f023 0303 	bic.w	r3, r3, #3
 80084e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	697a      	ldr	r2, [r7, #20]
 80084fe:	4313      	orrs	r3, r2
 8008500:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008508:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	021b      	lsls	r3, r3, #8
 800850e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	4313      	orrs	r3, r2
 8008516:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	693a      	ldr	r2, [r7, #16]
 8008522:	621a      	str	r2, [r3, #32]
}
 8008524:	bf00      	nop
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6a1b      	ldr	r3, [r3, #32]
 8008542:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a1b      	ldr	r3, [r3, #32]
 8008554:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800855c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	021b      	lsls	r3, r3, #8
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	4313      	orrs	r3, r2
 8008566:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800856e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	031b      	lsls	r3, r3, #12
 8008574:	b29b      	uxth	r3, r3
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4313      	orrs	r3, r2
 800857a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008582:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	031b      	lsls	r3, r3, #12
 8008588:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	697a      	ldr	r2, [r7, #20]
 8008596:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr

080085aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085aa:	b480      	push	{r7}
 80085ac:	b085      	sub	sp, #20
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
 80085b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	f043 0307 	orr.w	r3, r3, #7
 80085cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	609a      	str	r2, [r3, #8]
}
 80085d4:	bf00      	nop
 80085d6:	3714      	adds	r7, #20
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b087      	sub	sp, #28
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
 80085ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	021a      	lsls	r2, r3, #8
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	431a      	orrs	r2, r3
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4313      	orrs	r3, r2
 8008608:	697a      	ldr	r2, [r7, #20]
 800860a:	4313      	orrs	r3, r2
 800860c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	697a      	ldr	r2, [r7, #20]
 8008612:	609a      	str	r2, [r3, #8]
}
 8008614:	bf00      	nop
 8008616:	371c      	adds	r7, #28
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr

08008620 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008620:	b480      	push	{r7}
 8008622:	b087      	sub	sp, #28
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	60b9      	str	r1, [r7, #8]
 800862a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	f003 031f 	and.w	r3, r3, #31
 8008632:	2201      	movs	r2, #1
 8008634:	fa02 f303 	lsl.w	r3, r2, r3
 8008638:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1a      	ldr	r2, [r3, #32]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	43db      	mvns	r3, r3
 8008642:	401a      	ands	r2, r3
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	6a1a      	ldr	r2, [r3, #32]
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	f003 031f 	and.w	r3, r3, #31
 8008652:	6879      	ldr	r1, [r7, #4]
 8008654:	fa01 f303 	lsl.w	r3, r1, r3
 8008658:	431a      	orrs	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	621a      	str	r2, [r3, #32]
}
 800865e:	bf00      	nop
 8008660:	371c      	adds	r7, #28
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
	...

0800866c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
 8008674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800867c:	2b01      	cmp	r3, #1
 800867e:	d101      	bne.n	8008684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008680:	2302      	movs	r3, #2
 8008682:	e06d      	b.n	8008760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2202      	movs	r2, #2
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a30      	ldr	r2, [pc, #192]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a2f      	ldr	r2, [pc, #188]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d108      	bne.n	80086ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	68fa      	ldr	r2, [r7, #12]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68fa      	ldr	r2, [r7, #12]
 80086d8:	4313      	orrs	r3, r2
 80086da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a20      	ldr	r2, [pc, #128]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d022      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f6:	d01d      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a1d      	ldr	r2, [pc, #116]	; (8008774 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d018      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a1c      	ldr	r2, [pc, #112]	; (8008778 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d013      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a1a      	ldr	r2, [pc, #104]	; (800877c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d00e      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4a15      	ldr	r2, [pc, #84]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800871c:	4293      	cmp	r3, r2
 800871e:	d009      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4a16      	ldr	r2, [pc, #88]	; (8008780 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d004      	beq.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a15      	ldr	r2, [pc, #84]	; (8008784 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d10c      	bne.n	800874e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800873a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	4313      	orrs	r3, r2
 8008744:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	40010000 	.word	0x40010000
 8008770:	40010400 	.word	0x40010400
 8008774:	40000400 	.word	0x40000400
 8008778:	40000800 	.word	0x40000800
 800877c:	40000c00 	.word	0x40000c00
 8008780:	40014000 	.word	0x40014000
 8008784:	40001800 	.word	0x40001800

08008788 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800879c:	2b01      	cmp	r3, #1
 800879e:	d101      	bne.n	80087a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80087a0:	2302      	movs	r3, #2
 80087a2:	e065      	b.n	8008870 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	689b      	ldr	r3, [r3, #8]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	695b      	ldr	r3, [r3, #20]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800880a:	4313      	orrs	r3, r2
 800880c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	699b      	ldr	r3, [r3, #24]
 8008818:	041b      	lsls	r3, r3, #16
 800881a:	4313      	orrs	r3, r2
 800881c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a16      	ldr	r2, [pc, #88]	; (800887c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d004      	beq.n	8008832 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a14      	ldr	r2, [pc, #80]	; (8008880 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d115      	bne.n	800885e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	051b      	lsls	r3, r3, #20
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	4313      	orrs	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	4313      	orrs	r3, r2
 800885c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	40010000 	.word	0x40010000
 8008880:	40010400 	.word	0x40010400

08008884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d101      	bne.n	80088d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e040      	b.n	8008954 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d106      	bne.n	80088e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7fa fc1e 	bl	8003124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2224      	movs	r2, #36	; 0x24
 80088ec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	681a      	ldr	r2, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f022 0201 	bic.w	r2, r2, #1
 80088fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 fac4 	bl	8008e8c <UART_SetConfig>
 8008904:	4603      	mov	r3, r0
 8008906:	2b01      	cmp	r3, #1
 8008908:	d101      	bne.n	800890e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800890a:	2301      	movs	r3, #1
 800890c:	e022      	b.n	8008954 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008912:	2b00      	cmp	r3, #0
 8008914:	d002      	beq.n	800891c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f000 fd62 	bl	80093e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800892a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	689a      	ldr	r2, [r3, #8]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800893a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0201 	orr.w	r2, r2, #1
 800894a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 fde9 	bl	8009524 <UART_CheckIdleState>
 8008952:	4603      	mov	r3, r0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08a      	sub	sp, #40	; 0x28
 8008960:	af02      	add	r7, sp, #8
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	603b      	str	r3, [r7, #0]
 8008968:	4613      	mov	r3, r2
 800896a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008970:	2b20      	cmp	r3, #32
 8008972:	d17f      	bne.n	8008a74 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d002      	beq.n	8008980 <HAL_UART_Transmit+0x24>
 800897a:	88fb      	ldrh	r3, [r7, #6]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d101      	bne.n	8008984 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008980:	2301      	movs	r3, #1
 8008982:	e078      	b.n	8008a76 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800898a:	2b01      	cmp	r3, #1
 800898c:	d101      	bne.n	8008992 <HAL_UART_Transmit+0x36>
 800898e:	2302      	movs	r3, #2
 8008990:	e071      	b.n	8008a76 <HAL_UART_Transmit+0x11a>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2201      	movs	r2, #1
 8008996:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2200      	movs	r2, #0
 800899e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2221      	movs	r2, #33	; 0x21
 80089a4:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80089a6:	f7fa fe33 	bl	8003610 <HAL_GetTick>
 80089aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	88fa      	ldrh	r2, [r7, #6]
 80089b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	88fa      	ldrh	r2, [r7, #6]
 80089b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089c4:	d108      	bne.n	80089d8 <HAL_UART_Transmit+0x7c>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	691b      	ldr	r3, [r3, #16]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d104      	bne.n	80089d8 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80089ce:	2300      	movs	r3, #0
 80089d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	61bb      	str	r3, [r7, #24]
 80089d6:	e003      	b.n	80089e0 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80089e8:	e02c      	b.n	8008a44 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2200      	movs	r2, #0
 80089f2:	2180      	movs	r1, #128	; 0x80
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f000 fdda 	bl	80095ae <UART_WaitOnFlagUntilTimeout>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d001      	beq.n	8008a04 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008a00:	2303      	movs	r3, #3
 8008a02:	e038      	b.n	8008a76 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10b      	bne.n	8008a22 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	461a      	mov	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	3302      	adds	r3, #2
 8008a1e:	61bb      	str	r3, [r7, #24]
 8008a20:	e007      	b.n	8008a32 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	781a      	ldrb	r2, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1cc      	bne.n	80089ea <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	2200      	movs	r2, #0
 8008a58:	2140      	movs	r1, #64	; 0x40
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f000 fda7 	bl	80095ae <UART_WaitOnFlagUntilTimeout>
 8008a60:	4603      	mov	r3, r0
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d001      	beq.n	8008a6a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e005      	b.n	8008a76 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008a70:	2300      	movs	r3, #0
 8008a72:	e000      	b.n	8008a76 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008a74:	2302      	movs	r3, #2
  }
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3720      	adds	r7, #32
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a92:	2b20      	cmp	r3, #32
 8008a94:	f040 808a 	bne.w	8008bac <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d002      	beq.n	8008aa4 <HAL_UART_Receive_IT+0x24>
 8008a9e:	88fb      	ldrh	r3, [r7, #6]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e082      	b.n	8008bae <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d101      	bne.n	8008ab6 <HAL_UART_Receive_IT+0x36>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	e07b      	b.n	8008bae <HAL_UART_Receive_IT+0x12e>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	88fa      	ldrh	r2, [r7, #6]
 8008ac8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	88fa      	ldrh	r2, [r7, #6]
 8008ad0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ae2:	d10e      	bne.n	8008b02 <HAL_UART_Receive_IT+0x82>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d105      	bne.n	8008af8 <HAL_UART_Receive_IT+0x78>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008af2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008af6:	e02d      	b.n	8008b54 <HAL_UART_Receive_IT+0xd4>
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	22ff      	movs	r2, #255	; 0xff
 8008afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b00:	e028      	b.n	8008b54 <HAL_UART_Receive_IT+0xd4>
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10d      	bne.n	8008b26 <HAL_UART_Receive_IT+0xa6>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d104      	bne.n	8008b1c <HAL_UART_Receive_IT+0x9c>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	22ff      	movs	r2, #255	; 0xff
 8008b16:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b1a:	e01b      	b.n	8008b54 <HAL_UART_Receive_IT+0xd4>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	227f      	movs	r2, #127	; 0x7f
 8008b20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b24:	e016      	b.n	8008b54 <HAL_UART_Receive_IT+0xd4>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b2e:	d10d      	bne.n	8008b4c <HAL_UART_Receive_IT+0xcc>
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d104      	bne.n	8008b42 <HAL_UART_Receive_IT+0xc2>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	227f      	movs	r2, #127	; 0x7f
 8008b3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b40:	e008      	b.n	8008b54 <HAL_UART_Receive_IT+0xd4>
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	223f      	movs	r2, #63	; 0x3f
 8008b46:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008b4a:	e003      	b.n	8008b54 <HAL_UART_Receive_IT+0xd4>
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2222      	movs	r2, #34	; 0x22
 8008b5e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	689a      	ldr	r2, [r3, #8]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0201 	orr.w	r2, r2, #1
 8008b6e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b78:	d107      	bne.n	8008b8a <HAL_UART_Receive_IT+0x10a>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	691b      	ldr	r3, [r3, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d103      	bne.n	8008b8a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	4a0d      	ldr	r2, [pc, #52]	; (8008bbc <HAL_UART_Receive_IT+0x13c>)
 8008b86:	661a      	str	r2, [r3, #96]	; 0x60
 8008b88:	e002      	b.n	8008b90 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4a0c      	ldr	r2, [pc, #48]	; (8008bc0 <HAL_UART_Receive_IT+0x140>)
 8008b8e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008ba6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e000      	b.n	8008bae <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8008bac:	2302      	movs	r3, #2
  }
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	080097e9 	.word	0x080097e9
 8008bc0:	08009743 	.word	0x08009743

08008bc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008be4:	69fa      	ldr	r2, [r7, #28]
 8008be6:	f640 030f 	movw	r3, #2063	; 0x80f
 8008bea:	4013      	ands	r3, r2
 8008bec:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d113      	bne.n	8008c1c <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	f003 0320 	and.w	r3, r3, #32
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00e      	beq.n	8008c1c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008bfe:	69bb      	ldr	r3, [r7, #24]
 8008c00:	f003 0320 	and.w	r3, r3, #32
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d009      	beq.n	8008c1c <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 8114 	beq.w	8008e3a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	4798      	blx	r3
      }
      return;
 8008c1a:	e10e      	b.n	8008e3a <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 80d6 	beq.w	8008dd0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d105      	bne.n	8008c3a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 80cb 	beq.w	8008dd0 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	f003 0301 	and.w	r3, r3, #1
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d00e      	beq.n	8008c62 <HAL_UART_IRQHandler+0x9e>
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2201      	movs	r2, #1
 8008c54:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c5a:	f043 0201 	orr.w	r2, r3, #1
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00e      	beq.n	8008c8a <HAL_UART_IRQHandler+0xc6>
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d009      	beq.n	8008c8a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c82:	f043 0204 	orr.w	r2, r3, #4
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d00e      	beq.n	8008cb2 <HAL_UART_IRQHandler+0xee>
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d009      	beq.n	8008cb2 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2204      	movs	r2, #4
 8008ca4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008caa:	f043 0202 	orr.w	r2, r3, #2
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	f003 0308 	and.w	r3, r3, #8
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d013      	beq.n	8008ce4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	f003 0320 	and.w	r3, r3, #32
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d104      	bne.n	8008cd0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d009      	beq.n	8008ce4 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	2208      	movs	r2, #8
 8008cd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008cdc:	f043 0208 	orr.w	r2, r3, #8
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00f      	beq.n	8008d0e <HAL_UART_IRQHandler+0x14a>
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00a      	beq.n	8008d0e <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d06:	f043 0220 	orr.w	r2, r3, #32
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 8093 	beq.w	8008e3e <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	f003 0320 	and.w	r3, r3, #32
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00c      	beq.n	8008d3c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	f003 0320 	and.w	r3, r3, #32
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d007      	beq.n	8008d3c <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d003      	beq.n	8008d3c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008d40:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4c:	2b40      	cmp	r3, #64	; 0x40
 8008d4e:	d004      	beq.n	8008d5a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d031      	beq.n	8008dbe <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fca2 	bl	80096a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d6a:	2b40      	cmp	r3, #64	; 0x40
 8008d6c:	d123      	bne.n	8008db6 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	689a      	ldr	r2, [r3, #8]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d7c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d013      	beq.n	8008dae <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d8a:	4a30      	ldr	r2, [pc, #192]	; (8008e4c <HAL_UART_IRQHandler+0x288>)
 8008d8c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d92:	4618      	mov	r0, r3
 8008d94:	f7fb fa96 	bl	80042c4 <HAL_DMA_Abort_IT>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d016      	beq.n	8008dcc <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008da8:	4610      	mov	r0, r2
 8008daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dac:	e00e      	b.n	8008dcc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f858 	bl	8008e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db4:	e00a      	b.n	8008dcc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f000 f854 	bl	8008e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dbc:	e006      	b.n	8008dcc <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f850 	bl	8008e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008dca:	e038      	b.n	8008e3e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dcc:	bf00      	nop
    return;
 8008dce:	e036      	b.n	8008e3e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00d      	beq.n	8008df6 <HAL_UART_IRQHandler+0x232>
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d008      	beq.n	8008df6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f842 	bl	8008e78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008df4:	e026      	b.n	8008e44 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00d      	beq.n	8008e1c <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d008      	beq.n	8008e1c <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d017      	beq.n	8008e42 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	4798      	blx	r3
    }
    return;
 8008e1a:	e012      	b.n	8008e42 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00e      	beq.n	8008e44 <HAL_UART_IRQHandler+0x280>
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d009      	beq.n	8008e44 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f000 fc6d 	bl	8009710 <UART_EndTransmit_IT>
    return;
 8008e36:	bf00      	nop
 8008e38:	e004      	b.n	8008e44 <HAL_UART_IRQHandler+0x280>
      return;
 8008e3a:	bf00      	nop
 8008e3c:	e002      	b.n	8008e44 <HAL_UART_IRQHandler+0x280>
    return;
 8008e3e:	bf00      	nop
 8008e40:	e000      	b.n	8008e44 <HAL_UART_IRQHandler+0x280>
    return;
 8008e42:	bf00      	nop
  }

}
 8008e44:	3720      	adds	r7, #32
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	080096e5 	.word	0x080096e5

08008e50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b083      	sub	sp, #12
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008e58:	bf00      	nop
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689a      	ldr	r2, [r3, #8]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	431a      	orrs	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4bb1      	ldr	r3, [pc, #708]	; (8009180 <UART_SetConfig+0x2f4>)
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	687a      	ldr	r2, [r7, #4]
 8008ec0:	6812      	ldr	r2, [r2, #0]
 8008ec2:	6939      	ldr	r1, [r7, #16]
 8008ec4:	430b      	orrs	r3, r1
 8008ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68da      	ldr	r2, [r3, #12]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	430a      	orrs	r2, r1
 8008edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a1b      	ldr	r3, [r3, #32]
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a9f      	ldr	r2, [pc, #636]	; (8009184 <UART_SetConfig+0x2f8>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d121      	bne.n	8008f50 <UART_SetConfig+0xc4>
 8008f0c:	4b9e      	ldr	r3, [pc, #632]	; (8009188 <UART_SetConfig+0x2fc>)
 8008f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d816      	bhi.n	8008f48 <UART_SetConfig+0xbc>
 8008f1a:	a201      	add	r2, pc, #4	; (adr r2, 8008f20 <UART_SetConfig+0x94>)
 8008f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f20:	08008f31 	.word	0x08008f31
 8008f24:	08008f3d 	.word	0x08008f3d
 8008f28:	08008f37 	.word	0x08008f37
 8008f2c:	08008f43 	.word	0x08008f43
 8008f30:	2301      	movs	r3, #1
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e151      	b.n	80091da <UART_SetConfig+0x34e>
 8008f36:	2302      	movs	r3, #2
 8008f38:	77fb      	strb	r3, [r7, #31]
 8008f3a:	e14e      	b.n	80091da <UART_SetConfig+0x34e>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	77fb      	strb	r3, [r7, #31]
 8008f40:	e14b      	b.n	80091da <UART_SetConfig+0x34e>
 8008f42:	2308      	movs	r3, #8
 8008f44:	77fb      	strb	r3, [r7, #31]
 8008f46:	e148      	b.n	80091da <UART_SetConfig+0x34e>
 8008f48:	2310      	movs	r3, #16
 8008f4a:	77fb      	strb	r3, [r7, #31]
 8008f4c:	bf00      	nop
 8008f4e:	e144      	b.n	80091da <UART_SetConfig+0x34e>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a8d      	ldr	r2, [pc, #564]	; (800918c <UART_SetConfig+0x300>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d134      	bne.n	8008fc4 <UART_SetConfig+0x138>
 8008f5a:	4b8b      	ldr	r3, [pc, #556]	; (8009188 <UART_SetConfig+0x2fc>)
 8008f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f60:	f003 030c 	and.w	r3, r3, #12
 8008f64:	2b0c      	cmp	r3, #12
 8008f66:	d829      	bhi.n	8008fbc <UART_SetConfig+0x130>
 8008f68:	a201      	add	r2, pc, #4	; (adr r2, 8008f70 <UART_SetConfig+0xe4>)
 8008f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f6e:	bf00      	nop
 8008f70:	08008fa5 	.word	0x08008fa5
 8008f74:	08008fbd 	.word	0x08008fbd
 8008f78:	08008fbd 	.word	0x08008fbd
 8008f7c:	08008fbd 	.word	0x08008fbd
 8008f80:	08008fb1 	.word	0x08008fb1
 8008f84:	08008fbd 	.word	0x08008fbd
 8008f88:	08008fbd 	.word	0x08008fbd
 8008f8c:	08008fbd 	.word	0x08008fbd
 8008f90:	08008fab 	.word	0x08008fab
 8008f94:	08008fbd 	.word	0x08008fbd
 8008f98:	08008fbd 	.word	0x08008fbd
 8008f9c:	08008fbd 	.word	0x08008fbd
 8008fa0:	08008fb7 	.word	0x08008fb7
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	77fb      	strb	r3, [r7, #31]
 8008fa8:	e117      	b.n	80091da <UART_SetConfig+0x34e>
 8008faa:	2302      	movs	r3, #2
 8008fac:	77fb      	strb	r3, [r7, #31]
 8008fae:	e114      	b.n	80091da <UART_SetConfig+0x34e>
 8008fb0:	2304      	movs	r3, #4
 8008fb2:	77fb      	strb	r3, [r7, #31]
 8008fb4:	e111      	b.n	80091da <UART_SetConfig+0x34e>
 8008fb6:	2308      	movs	r3, #8
 8008fb8:	77fb      	strb	r3, [r7, #31]
 8008fba:	e10e      	b.n	80091da <UART_SetConfig+0x34e>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	77fb      	strb	r3, [r7, #31]
 8008fc0:	bf00      	nop
 8008fc2:	e10a      	b.n	80091da <UART_SetConfig+0x34e>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a71      	ldr	r2, [pc, #452]	; (8009190 <UART_SetConfig+0x304>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d120      	bne.n	8009010 <UART_SetConfig+0x184>
 8008fce:	4b6e      	ldr	r3, [pc, #440]	; (8009188 <UART_SetConfig+0x2fc>)
 8008fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008fd8:	2b10      	cmp	r3, #16
 8008fda:	d00f      	beq.n	8008ffc <UART_SetConfig+0x170>
 8008fdc:	2b10      	cmp	r3, #16
 8008fde:	d802      	bhi.n	8008fe6 <UART_SetConfig+0x15a>
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <UART_SetConfig+0x164>
 8008fe4:	e010      	b.n	8009008 <UART_SetConfig+0x17c>
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	d005      	beq.n	8008ff6 <UART_SetConfig+0x16a>
 8008fea:	2b30      	cmp	r3, #48	; 0x30
 8008fec:	d009      	beq.n	8009002 <UART_SetConfig+0x176>
 8008fee:	e00b      	b.n	8009008 <UART_SetConfig+0x17c>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	77fb      	strb	r3, [r7, #31]
 8008ff4:	e0f1      	b.n	80091da <UART_SetConfig+0x34e>
 8008ff6:	2302      	movs	r3, #2
 8008ff8:	77fb      	strb	r3, [r7, #31]
 8008ffa:	e0ee      	b.n	80091da <UART_SetConfig+0x34e>
 8008ffc:	2304      	movs	r3, #4
 8008ffe:	77fb      	strb	r3, [r7, #31]
 8009000:	e0eb      	b.n	80091da <UART_SetConfig+0x34e>
 8009002:	2308      	movs	r3, #8
 8009004:	77fb      	strb	r3, [r7, #31]
 8009006:	e0e8      	b.n	80091da <UART_SetConfig+0x34e>
 8009008:	2310      	movs	r3, #16
 800900a:	77fb      	strb	r3, [r7, #31]
 800900c:	bf00      	nop
 800900e:	e0e4      	b.n	80091da <UART_SetConfig+0x34e>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a5f      	ldr	r2, [pc, #380]	; (8009194 <UART_SetConfig+0x308>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d120      	bne.n	800905c <UART_SetConfig+0x1d0>
 800901a:	4b5b      	ldr	r3, [pc, #364]	; (8009188 <UART_SetConfig+0x2fc>)
 800901c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009020:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009024:	2b40      	cmp	r3, #64	; 0x40
 8009026:	d00f      	beq.n	8009048 <UART_SetConfig+0x1bc>
 8009028:	2b40      	cmp	r3, #64	; 0x40
 800902a:	d802      	bhi.n	8009032 <UART_SetConfig+0x1a6>
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <UART_SetConfig+0x1b0>
 8009030:	e010      	b.n	8009054 <UART_SetConfig+0x1c8>
 8009032:	2b80      	cmp	r3, #128	; 0x80
 8009034:	d005      	beq.n	8009042 <UART_SetConfig+0x1b6>
 8009036:	2bc0      	cmp	r3, #192	; 0xc0
 8009038:	d009      	beq.n	800904e <UART_SetConfig+0x1c2>
 800903a:	e00b      	b.n	8009054 <UART_SetConfig+0x1c8>
 800903c:	2300      	movs	r3, #0
 800903e:	77fb      	strb	r3, [r7, #31]
 8009040:	e0cb      	b.n	80091da <UART_SetConfig+0x34e>
 8009042:	2302      	movs	r3, #2
 8009044:	77fb      	strb	r3, [r7, #31]
 8009046:	e0c8      	b.n	80091da <UART_SetConfig+0x34e>
 8009048:	2304      	movs	r3, #4
 800904a:	77fb      	strb	r3, [r7, #31]
 800904c:	e0c5      	b.n	80091da <UART_SetConfig+0x34e>
 800904e:	2308      	movs	r3, #8
 8009050:	77fb      	strb	r3, [r7, #31]
 8009052:	e0c2      	b.n	80091da <UART_SetConfig+0x34e>
 8009054:	2310      	movs	r3, #16
 8009056:	77fb      	strb	r3, [r7, #31]
 8009058:	bf00      	nop
 800905a:	e0be      	b.n	80091da <UART_SetConfig+0x34e>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a4d      	ldr	r2, [pc, #308]	; (8009198 <UART_SetConfig+0x30c>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d124      	bne.n	80090b0 <UART_SetConfig+0x224>
 8009066:	4b48      	ldr	r3, [pc, #288]	; (8009188 <UART_SetConfig+0x2fc>)
 8009068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800906c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009074:	d012      	beq.n	800909c <UART_SetConfig+0x210>
 8009076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800907a:	d802      	bhi.n	8009082 <UART_SetConfig+0x1f6>
 800907c:	2b00      	cmp	r3, #0
 800907e:	d007      	beq.n	8009090 <UART_SetConfig+0x204>
 8009080:	e012      	b.n	80090a8 <UART_SetConfig+0x21c>
 8009082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009086:	d006      	beq.n	8009096 <UART_SetConfig+0x20a>
 8009088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800908c:	d009      	beq.n	80090a2 <UART_SetConfig+0x216>
 800908e:	e00b      	b.n	80090a8 <UART_SetConfig+0x21c>
 8009090:	2300      	movs	r3, #0
 8009092:	77fb      	strb	r3, [r7, #31]
 8009094:	e0a1      	b.n	80091da <UART_SetConfig+0x34e>
 8009096:	2302      	movs	r3, #2
 8009098:	77fb      	strb	r3, [r7, #31]
 800909a:	e09e      	b.n	80091da <UART_SetConfig+0x34e>
 800909c:	2304      	movs	r3, #4
 800909e:	77fb      	strb	r3, [r7, #31]
 80090a0:	e09b      	b.n	80091da <UART_SetConfig+0x34e>
 80090a2:	2308      	movs	r3, #8
 80090a4:	77fb      	strb	r3, [r7, #31]
 80090a6:	e098      	b.n	80091da <UART_SetConfig+0x34e>
 80090a8:	2310      	movs	r3, #16
 80090aa:	77fb      	strb	r3, [r7, #31]
 80090ac:	bf00      	nop
 80090ae:	e094      	b.n	80091da <UART_SetConfig+0x34e>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a39      	ldr	r2, [pc, #228]	; (800919c <UART_SetConfig+0x310>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d124      	bne.n	8009104 <UART_SetConfig+0x278>
 80090ba:	4b33      	ldr	r3, [pc, #204]	; (8009188 <UART_SetConfig+0x2fc>)
 80090bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80090c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090c8:	d012      	beq.n	80090f0 <UART_SetConfig+0x264>
 80090ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090ce:	d802      	bhi.n	80090d6 <UART_SetConfig+0x24a>
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d007      	beq.n	80090e4 <UART_SetConfig+0x258>
 80090d4:	e012      	b.n	80090fc <UART_SetConfig+0x270>
 80090d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80090da:	d006      	beq.n	80090ea <UART_SetConfig+0x25e>
 80090dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80090e0:	d009      	beq.n	80090f6 <UART_SetConfig+0x26a>
 80090e2:	e00b      	b.n	80090fc <UART_SetConfig+0x270>
 80090e4:	2301      	movs	r3, #1
 80090e6:	77fb      	strb	r3, [r7, #31]
 80090e8:	e077      	b.n	80091da <UART_SetConfig+0x34e>
 80090ea:	2302      	movs	r3, #2
 80090ec:	77fb      	strb	r3, [r7, #31]
 80090ee:	e074      	b.n	80091da <UART_SetConfig+0x34e>
 80090f0:	2304      	movs	r3, #4
 80090f2:	77fb      	strb	r3, [r7, #31]
 80090f4:	e071      	b.n	80091da <UART_SetConfig+0x34e>
 80090f6:	2308      	movs	r3, #8
 80090f8:	77fb      	strb	r3, [r7, #31]
 80090fa:	e06e      	b.n	80091da <UART_SetConfig+0x34e>
 80090fc:	2310      	movs	r3, #16
 80090fe:	77fb      	strb	r3, [r7, #31]
 8009100:	bf00      	nop
 8009102:	e06a      	b.n	80091da <UART_SetConfig+0x34e>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a25      	ldr	r2, [pc, #148]	; (80091a0 <UART_SetConfig+0x314>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d124      	bne.n	8009158 <UART_SetConfig+0x2cc>
 800910e:	4b1e      	ldr	r3, [pc, #120]	; (8009188 <UART_SetConfig+0x2fc>)
 8009110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009114:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800911c:	d012      	beq.n	8009144 <UART_SetConfig+0x2b8>
 800911e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009122:	d802      	bhi.n	800912a <UART_SetConfig+0x29e>
 8009124:	2b00      	cmp	r3, #0
 8009126:	d007      	beq.n	8009138 <UART_SetConfig+0x2ac>
 8009128:	e012      	b.n	8009150 <UART_SetConfig+0x2c4>
 800912a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800912e:	d006      	beq.n	800913e <UART_SetConfig+0x2b2>
 8009130:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009134:	d009      	beq.n	800914a <UART_SetConfig+0x2be>
 8009136:	e00b      	b.n	8009150 <UART_SetConfig+0x2c4>
 8009138:	2300      	movs	r3, #0
 800913a:	77fb      	strb	r3, [r7, #31]
 800913c:	e04d      	b.n	80091da <UART_SetConfig+0x34e>
 800913e:	2302      	movs	r3, #2
 8009140:	77fb      	strb	r3, [r7, #31]
 8009142:	e04a      	b.n	80091da <UART_SetConfig+0x34e>
 8009144:	2304      	movs	r3, #4
 8009146:	77fb      	strb	r3, [r7, #31]
 8009148:	e047      	b.n	80091da <UART_SetConfig+0x34e>
 800914a:	2308      	movs	r3, #8
 800914c:	77fb      	strb	r3, [r7, #31]
 800914e:	e044      	b.n	80091da <UART_SetConfig+0x34e>
 8009150:	2310      	movs	r3, #16
 8009152:	77fb      	strb	r3, [r7, #31]
 8009154:	bf00      	nop
 8009156:	e040      	b.n	80091da <UART_SetConfig+0x34e>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a11      	ldr	r2, [pc, #68]	; (80091a4 <UART_SetConfig+0x318>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d139      	bne.n	80091d6 <UART_SetConfig+0x34a>
 8009162:	4b09      	ldr	r3, [pc, #36]	; (8009188 <UART_SetConfig+0x2fc>)
 8009164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800916c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009170:	d027      	beq.n	80091c2 <UART_SetConfig+0x336>
 8009172:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009176:	d817      	bhi.n	80091a8 <UART_SetConfig+0x31c>
 8009178:	2b00      	cmp	r3, #0
 800917a:	d01c      	beq.n	80091b6 <UART_SetConfig+0x32a>
 800917c:	e027      	b.n	80091ce <UART_SetConfig+0x342>
 800917e:	bf00      	nop
 8009180:	efff69f3 	.word	0xefff69f3
 8009184:	40011000 	.word	0x40011000
 8009188:	40023800 	.word	0x40023800
 800918c:	40004400 	.word	0x40004400
 8009190:	40004800 	.word	0x40004800
 8009194:	40004c00 	.word	0x40004c00
 8009198:	40005000 	.word	0x40005000
 800919c:	40011400 	.word	0x40011400
 80091a0:	40007800 	.word	0x40007800
 80091a4:	40007c00 	.word	0x40007c00
 80091a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ac:	d006      	beq.n	80091bc <UART_SetConfig+0x330>
 80091ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80091b2:	d009      	beq.n	80091c8 <UART_SetConfig+0x33c>
 80091b4:	e00b      	b.n	80091ce <UART_SetConfig+0x342>
 80091b6:	2300      	movs	r3, #0
 80091b8:	77fb      	strb	r3, [r7, #31]
 80091ba:	e00e      	b.n	80091da <UART_SetConfig+0x34e>
 80091bc:	2302      	movs	r3, #2
 80091be:	77fb      	strb	r3, [r7, #31]
 80091c0:	e00b      	b.n	80091da <UART_SetConfig+0x34e>
 80091c2:	2304      	movs	r3, #4
 80091c4:	77fb      	strb	r3, [r7, #31]
 80091c6:	e008      	b.n	80091da <UART_SetConfig+0x34e>
 80091c8:	2308      	movs	r3, #8
 80091ca:	77fb      	strb	r3, [r7, #31]
 80091cc:	e005      	b.n	80091da <UART_SetConfig+0x34e>
 80091ce:	2310      	movs	r3, #16
 80091d0:	77fb      	strb	r3, [r7, #31]
 80091d2:	bf00      	nop
 80091d4:	e001      	b.n	80091da <UART_SetConfig+0x34e>
 80091d6:	2310      	movs	r3, #16
 80091d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091e2:	d17f      	bne.n	80092e4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80091e4:	7ffb      	ldrb	r3, [r7, #31]
 80091e6:	2b08      	cmp	r3, #8
 80091e8:	d85c      	bhi.n	80092a4 <UART_SetConfig+0x418>
 80091ea:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <UART_SetConfig+0x364>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009215 	.word	0x08009215
 80091f4:	08009235 	.word	0x08009235
 80091f8:	08009255 	.word	0x08009255
 80091fc:	080092a5 	.word	0x080092a5
 8009200:	0800926d 	.word	0x0800926d
 8009204:	080092a5 	.word	0x080092a5
 8009208:	080092a5 	.word	0x080092a5
 800920c:	080092a5 	.word	0x080092a5
 8009210:	0800928d 	.word	0x0800928d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009214:	f7fc fa84 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8009218:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	005a      	lsls	r2, r3, #1
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	085b      	lsrs	r3, r3, #1
 8009224:	441a      	add	r2, r3
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	fbb2 f3f3 	udiv	r3, r2, r3
 800922e:	b29b      	uxth	r3, r3
 8009230:	61bb      	str	r3, [r7, #24]
        break;
 8009232:	e03a      	b.n	80092aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009234:	f7fc fa88 	bl	8005748 <HAL_RCC_GetPCLK2Freq>
 8009238:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	005a      	lsls	r2, r3, #1
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	085b      	lsrs	r3, r3, #1
 8009244:	441a      	add	r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	fbb2 f3f3 	udiv	r3, r2, r3
 800924e:	b29b      	uxth	r3, r3
 8009250:	61bb      	str	r3, [r7, #24]
        break;
 8009252:	e02a      	b.n	80092aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	085a      	lsrs	r2, r3, #1
 800925a:	4b5f      	ldr	r3, [pc, #380]	; (80093d8 <UART_SetConfig+0x54c>)
 800925c:	4413      	add	r3, r2
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	6852      	ldr	r2, [r2, #4]
 8009262:	fbb3 f3f2 	udiv	r3, r3, r2
 8009266:	b29b      	uxth	r3, r3
 8009268:	61bb      	str	r3, [r7, #24]
        break;
 800926a:	e01e      	b.n	80092aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800926c:	f7fc f99a 	bl	80055a4 <HAL_RCC_GetSysClockFreq>
 8009270:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	005a      	lsls	r2, r3, #1
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	085b      	lsrs	r3, r3, #1
 800927c:	441a      	add	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	fbb2 f3f3 	udiv	r3, r2, r3
 8009286:	b29b      	uxth	r3, r3
 8009288:	61bb      	str	r3, [r7, #24]
        break;
 800928a:	e00e      	b.n	80092aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	085b      	lsrs	r3, r3, #1
 8009292:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	fbb2 f3f3 	udiv	r3, r2, r3
 800929e:	b29b      	uxth	r3, r3
 80092a0:	61bb      	str	r3, [r7, #24]
        break;
 80092a2:	e002      	b.n	80092aa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	75fb      	strb	r3, [r7, #23]
        break;
 80092a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	2b0f      	cmp	r3, #15
 80092ae:	d916      	bls.n	80092de <UART_SetConfig+0x452>
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092b6:	d212      	bcs.n	80092de <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092b8:	69bb      	ldr	r3, [r7, #24]
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	f023 030f 	bic.w	r3, r3, #15
 80092c0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092c2:	69bb      	ldr	r3, [r7, #24]
 80092c4:	085b      	lsrs	r3, r3, #1
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	f003 0307 	and.w	r3, r3, #7
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	897b      	ldrh	r3, [r7, #10]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	897a      	ldrh	r2, [r7, #10]
 80092da:	60da      	str	r2, [r3, #12]
 80092dc:	e070      	b.n	80093c0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	75fb      	strb	r3, [r7, #23]
 80092e2:	e06d      	b.n	80093c0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80092e4:	7ffb      	ldrb	r3, [r7, #31]
 80092e6:	2b08      	cmp	r3, #8
 80092e8:	d859      	bhi.n	800939e <UART_SetConfig+0x512>
 80092ea:	a201      	add	r2, pc, #4	; (adr r2, 80092f0 <UART_SetConfig+0x464>)
 80092ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f0:	08009315 	.word	0x08009315
 80092f4:	08009333 	.word	0x08009333
 80092f8:	08009351 	.word	0x08009351
 80092fc:	0800939f 	.word	0x0800939f
 8009300:	08009369 	.word	0x08009369
 8009304:	0800939f 	.word	0x0800939f
 8009308:	0800939f 	.word	0x0800939f
 800930c:	0800939f 	.word	0x0800939f
 8009310:	08009387 	.word	0x08009387
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009314:	f7fc fa04 	bl	8005720 <HAL_RCC_GetPCLK1Freq>
 8009318:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	085a      	lsrs	r2, r3, #1
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	441a      	add	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	fbb2 f3f3 	udiv	r3, r2, r3
 800932c:	b29b      	uxth	r3, r3
 800932e:	61bb      	str	r3, [r7, #24]
        break;
 8009330:	e038      	b.n	80093a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009332:	f7fc fa09 	bl	8005748 <HAL_RCC_GetPCLK2Freq>
 8009336:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	085a      	lsrs	r2, r3, #1
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	441a      	add	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	fbb2 f3f3 	udiv	r3, r2, r3
 800934a:	b29b      	uxth	r3, r3
 800934c:	61bb      	str	r3, [r7, #24]
        break;
 800934e:	e029      	b.n	80093a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	085a      	lsrs	r2, r3, #1
 8009356:	4b21      	ldr	r3, [pc, #132]	; (80093dc <UART_SetConfig+0x550>)
 8009358:	4413      	add	r3, r2
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	6852      	ldr	r2, [r2, #4]
 800935e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009362:	b29b      	uxth	r3, r3
 8009364:	61bb      	str	r3, [r7, #24]
        break;
 8009366:	e01d      	b.n	80093a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009368:	f7fc f91c 	bl	80055a4 <HAL_RCC_GetSysClockFreq>
 800936c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	085a      	lsrs	r2, r3, #1
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	441a      	add	r2, r3
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009380:	b29b      	uxth	r3, r3
 8009382:	61bb      	str	r3, [r7, #24]
        break;
 8009384:	e00e      	b.n	80093a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	fbb2 f3f3 	udiv	r3, r2, r3
 8009398:	b29b      	uxth	r3, r3
 800939a:	61bb      	str	r3, [r7, #24]
        break;
 800939c:	e002      	b.n	80093a4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800939e:	2301      	movs	r3, #1
 80093a0:	75fb      	strb	r3, [r7, #23]
        break;
 80093a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093a4:	69bb      	ldr	r3, [r7, #24]
 80093a6:	2b0f      	cmp	r3, #15
 80093a8:	d908      	bls.n	80093bc <UART_SetConfig+0x530>
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093b0:	d204      	bcs.n	80093bc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	69ba      	ldr	r2, [r7, #24]
 80093b8:	60da      	str	r2, [r3, #12]
 80093ba:	e001      	b.n	80093c0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3720      	adds	r7, #32
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	bf00      	nop
 80093d8:	01e84800 	.word	0x01e84800
 80093dc:	00f42400 	.word	0x00f42400

080093e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b083      	sub	sp, #12
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ec:	f003 0301 	and.w	r3, r3, #1
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d00a      	beq.n	800940a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	430a      	orrs	r2, r1
 8009408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940e:	f003 0302 	and.w	r3, r3, #2
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00a      	beq.n	800942c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	430a      	orrs	r2, r1
 800942a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009430:	f003 0304 	and.w	r3, r3, #4
 8009434:	2b00      	cmp	r3, #0
 8009436:	d00a      	beq.n	800944e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	430a      	orrs	r2, r1
 800944c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	f003 0308 	and.w	r3, r3, #8
 8009456:	2b00      	cmp	r3, #0
 8009458:	d00a      	beq.n	8009470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	430a      	orrs	r2, r1
 800946e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009474:	f003 0310 	and.w	r3, r3, #16
 8009478:	2b00      	cmp	r3, #0
 800947a:	d00a      	beq.n	8009492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	430a      	orrs	r2, r1
 8009490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009496:	f003 0320 	and.w	r3, r3, #32
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00a      	beq.n	80094b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	430a      	orrs	r2, r1
 80094b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d01a      	beq.n	80094f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	430a      	orrs	r2, r1
 80094d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094de:	d10a      	bne.n	80094f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	430a      	orrs	r2, r1
 80094f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00a      	beq.n	8009518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	685b      	ldr	r3, [r3, #4]
 8009508:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	605a      	str	r2, [r3, #4]
  }
}
 8009518:	bf00      	nop
 800951a:	370c      	adds	r7, #12
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b086      	sub	sp, #24
 8009528:	af02      	add	r7, sp, #8
 800952a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009532:	f7fa f86d 	bl	8003610 <HAL_GetTick>
 8009536:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f003 0308 	and.w	r3, r3, #8
 8009542:	2b08      	cmp	r3, #8
 8009544:	d10e      	bne.n	8009564 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009546:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800954a:	9300      	str	r3, [sp, #0]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 f82a 	bl	80095ae <UART_WaitOnFlagUntilTimeout>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e020      	b.n	80095a6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f003 0304 	and.w	r3, r3, #4
 800956e:	2b04      	cmp	r3, #4
 8009570:	d10e      	bne.n	8009590 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009572:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2200      	movs	r2, #0
 800957c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 f814 	bl	80095ae <UART_WaitOnFlagUntilTimeout>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800958c:	2303      	movs	r3, #3
 800958e:	e00a      	b.n	80095a6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2220      	movs	r2, #32
 8009594:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2220      	movs	r2, #32
 800959a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}

080095ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095ae:	b580      	push	{r7, lr}
 80095b0:	b084      	sub	sp, #16
 80095b2:	af00      	add	r7, sp, #0
 80095b4:	60f8      	str	r0, [r7, #12]
 80095b6:	60b9      	str	r1, [r7, #8]
 80095b8:	603b      	str	r3, [r7, #0]
 80095ba:	4613      	mov	r3, r2
 80095bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095be:	e05d      	b.n	800967c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095c6:	d059      	beq.n	800967c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095c8:	f7fa f822 	bl	8003610 <HAL_GetTick>
 80095cc:	4602      	mov	r2, r0
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	69ba      	ldr	r2, [r7, #24]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d302      	bcc.n	80095de <UART_WaitOnFlagUntilTimeout+0x30>
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d11b      	bne.n	8009616 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80095ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689a      	ldr	r2, [r3, #8]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f022 0201 	bic.w	r2, r2, #1
 80095fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2220      	movs	r2, #32
 8009602:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2220      	movs	r2, #32
 8009608:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009612:	2303      	movs	r3, #3
 8009614:	e042      	b.n	800969c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0304 	and.w	r3, r3, #4
 8009620:	2b00      	cmp	r3, #0
 8009622:	d02b      	beq.n	800967c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800962e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009632:	d123      	bne.n	800967c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800963c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	681a      	ldr	r2, [r3, #0]
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800964c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689a      	ldr	r2, [r3, #8]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f022 0201 	bic.w	r2, r2, #1
 800965c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2220      	movs	r2, #32
 8009662:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	2220      	movs	r2, #32
 8009668:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2220      	movs	r2, #32
 800966e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8009678:	2303      	movs	r3, #3
 800967a:	e00f      	b.n	800969c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69da      	ldr	r2, [r3, #28]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	4013      	ands	r3, r2
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	429a      	cmp	r2, r3
 800968a:	bf0c      	ite	eq
 800968c:	2301      	moveq	r3, #1
 800968e:	2300      	movne	r3, #0
 8009690:	b2db      	uxtb	r3, r3
 8009692:	461a      	mov	r2, r3
 8009694:	79fb      	ldrb	r3, [r7, #7]
 8009696:	429a      	cmp	r2, r3
 8009698:	d092      	beq.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b083      	sub	sp, #12
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80096ba:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f022 0201 	bic.w	r2, r2, #1
 80096ca:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2220      	movs	r2, #32
 80096d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	661a      	str	r2, [r3, #96]	; 0x60
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f7ff fbae 	bl	8008e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009708:	bf00      	nop
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009726:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2220      	movs	r2, #32
 800972c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff fb8b 	bl	8008e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800973a:	bf00      	nop
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009750:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009756:	2b22      	cmp	r3, #34	; 0x22
 8009758:	d13a      	bne.n	80097d0 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009760:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009762:	89bb      	ldrh	r3, [r7, #12]
 8009764:	b2d9      	uxtb	r1, r3
 8009766:	89fb      	ldrh	r3, [r7, #14]
 8009768:	b2da      	uxtb	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976e:	400a      	ands	r2, r1
 8009770:	b2d2      	uxtb	r2, r2
 8009772:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009778:	1c5a      	adds	r2, r3, #1
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009784:	b29b      	uxth	r3, r3
 8009786:	3b01      	subs	r3, #1
 8009788:	b29a      	uxth	r2, r3
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009796:	b29b      	uxth	r3, r3
 8009798:	2b00      	cmp	r3, #0
 800979a:	d121      	bne.n	80097e0 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80097aa:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f022 0201 	bic.w	r2, r2, #1
 80097ba:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2220      	movs	r2, #32
 80097c0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2200      	movs	r2, #0
 80097c6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f7f8 fb79 	bl	8001ec0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097ce:	e007      	b.n	80097e0 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	699a      	ldr	r2, [r3, #24]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f042 0208 	orr.w	r2, r2, #8
 80097de:	619a      	str	r2, [r3, #24]
}
 80097e0:	bf00      	nop
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097f6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097fc:	2b22      	cmp	r3, #34	; 0x22
 80097fe:	d13a      	bne.n	8009876 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800980c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800980e:	89ba      	ldrh	r2, [r7, #12]
 8009810:	89fb      	ldrh	r3, [r7, #14]
 8009812:	4013      	ands	r3, r2
 8009814:	b29a      	uxth	r2, r3
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800981e:	1c9a      	adds	r2, r3, #2
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800982a:	b29b      	uxth	r3, r3
 800982c:	3b01      	subs	r3, #1
 800982e:	b29a      	uxth	r2, r3
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800983c:	b29b      	uxth	r3, r3
 800983e:	2b00      	cmp	r3, #0
 8009840:	d121      	bne.n	8009886 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009850:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	689a      	ldr	r2, [r3, #8]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 0201 	bic.w	r2, r2, #1
 8009860:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2220      	movs	r2, #32
 8009866:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f7f8 fb26 	bl	8001ec0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009874:	e007      	b.n	8009886 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	699a      	ldr	r2, [r3, #24]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f042 0208 	orr.w	r2, r2, #8
 8009884:	619a      	str	r2, [r3, #24]
}
 8009886:	bf00      	nop
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <atoi>:
 800988e:	220a      	movs	r2, #10
 8009890:	2100      	movs	r1, #0
 8009892:	f000 b939 	b.w	8009b08 <strtol>
	...

08009898 <__errno>:
 8009898:	4b01      	ldr	r3, [pc, #4]	; (80098a0 <__errno+0x8>)
 800989a:	6818      	ldr	r0, [r3, #0]
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	20000010 	.word	0x20000010

080098a4 <__libc_init_array>:
 80098a4:	b570      	push	{r4, r5, r6, lr}
 80098a6:	4e0d      	ldr	r6, [pc, #52]	; (80098dc <__libc_init_array+0x38>)
 80098a8:	4c0d      	ldr	r4, [pc, #52]	; (80098e0 <__libc_init_array+0x3c>)
 80098aa:	1ba4      	subs	r4, r4, r6
 80098ac:	10a4      	asrs	r4, r4, #2
 80098ae:	2500      	movs	r5, #0
 80098b0:	42a5      	cmp	r5, r4
 80098b2:	d109      	bne.n	80098c8 <__libc_init_array+0x24>
 80098b4:	4e0b      	ldr	r6, [pc, #44]	; (80098e4 <__libc_init_array+0x40>)
 80098b6:	4c0c      	ldr	r4, [pc, #48]	; (80098e8 <__libc_init_array+0x44>)
 80098b8:	f000 fd4e 	bl	800a358 <_init>
 80098bc:	1ba4      	subs	r4, r4, r6
 80098be:	10a4      	asrs	r4, r4, #2
 80098c0:	2500      	movs	r5, #0
 80098c2:	42a5      	cmp	r5, r4
 80098c4:	d105      	bne.n	80098d2 <__libc_init_array+0x2e>
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098cc:	4798      	blx	r3
 80098ce:	3501      	adds	r5, #1
 80098d0:	e7ee      	b.n	80098b0 <__libc_init_array+0xc>
 80098d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80098d6:	4798      	blx	r3
 80098d8:	3501      	adds	r5, #1
 80098da:	e7f2      	b.n	80098c2 <__libc_init_array+0x1e>
 80098dc:	0800a638 	.word	0x0800a638
 80098e0:	0800a638 	.word	0x0800a638
 80098e4:	0800a638 	.word	0x0800a638
 80098e8:	0800a63c 	.word	0x0800a63c

080098ec <memset>:
 80098ec:	4402      	add	r2, r0
 80098ee:	4603      	mov	r3, r0
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d100      	bne.n	80098f6 <memset+0xa>
 80098f4:	4770      	bx	lr
 80098f6:	f803 1b01 	strb.w	r1, [r3], #1
 80098fa:	e7f9      	b.n	80098f0 <memset+0x4>

080098fc <siprintf>:
 80098fc:	b40e      	push	{r1, r2, r3}
 80098fe:	b500      	push	{lr}
 8009900:	b09c      	sub	sp, #112	; 0x70
 8009902:	ab1d      	add	r3, sp, #116	; 0x74
 8009904:	9002      	str	r0, [sp, #8]
 8009906:	9006      	str	r0, [sp, #24]
 8009908:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800990c:	4809      	ldr	r0, [pc, #36]	; (8009934 <siprintf+0x38>)
 800990e:	9107      	str	r1, [sp, #28]
 8009910:	9104      	str	r1, [sp, #16]
 8009912:	4909      	ldr	r1, [pc, #36]	; (8009938 <siprintf+0x3c>)
 8009914:	f853 2b04 	ldr.w	r2, [r3], #4
 8009918:	9105      	str	r1, [sp, #20]
 800991a:	6800      	ldr	r0, [r0, #0]
 800991c:	9301      	str	r3, [sp, #4]
 800991e:	a902      	add	r1, sp, #8
 8009920:	f000 fa28 	bl	8009d74 <_svfiprintf_r>
 8009924:	9b02      	ldr	r3, [sp, #8]
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	b01c      	add	sp, #112	; 0x70
 800992c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009930:	b003      	add	sp, #12
 8009932:	4770      	bx	lr
 8009934:	20000010 	.word	0x20000010
 8009938:	ffff0208 	.word	0xffff0208

0800993c <strncpy>:
 800993c:	b570      	push	{r4, r5, r6, lr}
 800993e:	3901      	subs	r1, #1
 8009940:	4604      	mov	r4, r0
 8009942:	b902      	cbnz	r2, 8009946 <strncpy+0xa>
 8009944:	bd70      	pop	{r4, r5, r6, pc}
 8009946:	4623      	mov	r3, r4
 8009948:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800994c:	f803 5b01 	strb.w	r5, [r3], #1
 8009950:	1e56      	subs	r6, r2, #1
 8009952:	b92d      	cbnz	r5, 8009960 <strncpy+0x24>
 8009954:	4414      	add	r4, r2
 8009956:	42a3      	cmp	r3, r4
 8009958:	d0f4      	beq.n	8009944 <strncpy+0x8>
 800995a:	f803 5b01 	strb.w	r5, [r3], #1
 800995e:	e7fa      	b.n	8009956 <strncpy+0x1a>
 8009960:	461c      	mov	r4, r3
 8009962:	4632      	mov	r2, r6
 8009964:	e7ed      	b.n	8009942 <strncpy+0x6>
	...

08009968 <strtok>:
 8009968:	4b13      	ldr	r3, [pc, #76]	; (80099b8 <strtok+0x50>)
 800996a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800996e:	681d      	ldr	r5, [r3, #0]
 8009970:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009972:	4606      	mov	r6, r0
 8009974:	460f      	mov	r7, r1
 8009976:	b9b4      	cbnz	r4, 80099a6 <strtok+0x3e>
 8009978:	2050      	movs	r0, #80	; 0x50
 800997a:	f000 f8df 	bl	8009b3c <malloc>
 800997e:	65a8      	str	r0, [r5, #88]	; 0x58
 8009980:	e9c0 4400 	strd	r4, r4, [r0]
 8009984:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009988:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800998c:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009990:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009994:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009998:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800999c:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80099a0:	6184      	str	r4, [r0, #24]
 80099a2:	7704      	strb	r4, [r0, #28]
 80099a4:	6244      	str	r4, [r0, #36]	; 0x24
 80099a6:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80099a8:	4639      	mov	r1, r7
 80099aa:	4630      	mov	r0, r6
 80099ac:	2301      	movs	r3, #1
 80099ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099b2:	f000 b803 	b.w	80099bc <__strtok_r>
 80099b6:	bf00      	nop
 80099b8:	20000010 	.word	0x20000010

080099bc <__strtok_r>:
 80099bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099be:	b918      	cbnz	r0, 80099c8 <__strtok_r+0xc>
 80099c0:	6810      	ldr	r0, [r2, #0]
 80099c2:	b908      	cbnz	r0, 80099c8 <__strtok_r+0xc>
 80099c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099c6:	4620      	mov	r0, r4
 80099c8:	4604      	mov	r4, r0
 80099ca:	460f      	mov	r7, r1
 80099cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80099d0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80099d4:	b91e      	cbnz	r6, 80099de <__strtok_r+0x22>
 80099d6:	b96d      	cbnz	r5, 80099f4 <__strtok_r+0x38>
 80099d8:	6015      	str	r5, [r2, #0]
 80099da:	4628      	mov	r0, r5
 80099dc:	e7f2      	b.n	80099c4 <__strtok_r+0x8>
 80099de:	42b5      	cmp	r5, r6
 80099e0:	d1f6      	bne.n	80099d0 <__strtok_r+0x14>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d1ef      	bne.n	80099c6 <__strtok_r+0xa>
 80099e6:	6014      	str	r4, [r2, #0]
 80099e8:	7003      	strb	r3, [r0, #0]
 80099ea:	e7eb      	b.n	80099c4 <__strtok_r+0x8>
 80099ec:	462b      	mov	r3, r5
 80099ee:	e00d      	b.n	8009a0c <__strtok_r+0x50>
 80099f0:	b926      	cbnz	r6, 80099fc <__strtok_r+0x40>
 80099f2:	461c      	mov	r4, r3
 80099f4:	4623      	mov	r3, r4
 80099f6:	460f      	mov	r7, r1
 80099f8:	f813 5b01 	ldrb.w	r5, [r3], #1
 80099fc:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009a00:	42b5      	cmp	r5, r6
 8009a02:	d1f5      	bne.n	80099f0 <__strtok_r+0x34>
 8009a04:	2d00      	cmp	r5, #0
 8009a06:	d0f1      	beq.n	80099ec <__strtok_r+0x30>
 8009a08:	2100      	movs	r1, #0
 8009a0a:	7021      	strb	r1, [r4, #0]
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	e7d9      	b.n	80099c4 <__strtok_r+0x8>

08009a10 <_strtol_l.isra.0>:
 8009a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a14:	4680      	mov	r8, r0
 8009a16:	4689      	mov	r9, r1
 8009a18:	4692      	mov	sl, r2
 8009a1a:	461e      	mov	r6, r3
 8009a1c:	460f      	mov	r7, r1
 8009a1e:	463d      	mov	r5, r7
 8009a20:	9808      	ldr	r0, [sp, #32]
 8009a22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a26:	f000 f885 	bl	8009b34 <__locale_ctype_ptr_l>
 8009a2a:	4420      	add	r0, r4
 8009a2c:	7843      	ldrb	r3, [r0, #1]
 8009a2e:	f013 0308 	ands.w	r3, r3, #8
 8009a32:	d132      	bne.n	8009a9a <_strtol_l.isra.0+0x8a>
 8009a34:	2c2d      	cmp	r4, #45	; 0x2d
 8009a36:	d132      	bne.n	8009a9e <_strtol_l.isra.0+0x8e>
 8009a38:	787c      	ldrb	r4, [r7, #1]
 8009a3a:	1cbd      	adds	r5, r7, #2
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	2e00      	cmp	r6, #0
 8009a40:	d05d      	beq.n	8009afe <_strtol_l.isra.0+0xee>
 8009a42:	2e10      	cmp	r6, #16
 8009a44:	d109      	bne.n	8009a5a <_strtol_l.isra.0+0x4a>
 8009a46:	2c30      	cmp	r4, #48	; 0x30
 8009a48:	d107      	bne.n	8009a5a <_strtol_l.isra.0+0x4a>
 8009a4a:	782b      	ldrb	r3, [r5, #0]
 8009a4c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a50:	2b58      	cmp	r3, #88	; 0x58
 8009a52:	d14f      	bne.n	8009af4 <_strtol_l.isra.0+0xe4>
 8009a54:	786c      	ldrb	r4, [r5, #1]
 8009a56:	2610      	movs	r6, #16
 8009a58:	3502      	adds	r5, #2
 8009a5a:	2a00      	cmp	r2, #0
 8009a5c:	bf14      	ite	ne
 8009a5e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009a62:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009a66:	2700      	movs	r7, #0
 8009a68:	fbb1 fcf6 	udiv	ip, r1, r6
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009a72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009a76:	2b09      	cmp	r3, #9
 8009a78:	d817      	bhi.n	8009aaa <_strtol_l.isra.0+0x9a>
 8009a7a:	461c      	mov	r4, r3
 8009a7c:	42a6      	cmp	r6, r4
 8009a7e:	dd23      	ble.n	8009ac8 <_strtol_l.isra.0+0xb8>
 8009a80:	1c7b      	adds	r3, r7, #1
 8009a82:	d007      	beq.n	8009a94 <_strtol_l.isra.0+0x84>
 8009a84:	4584      	cmp	ip, r0
 8009a86:	d31c      	bcc.n	8009ac2 <_strtol_l.isra.0+0xb2>
 8009a88:	d101      	bne.n	8009a8e <_strtol_l.isra.0+0x7e>
 8009a8a:	45a6      	cmp	lr, r4
 8009a8c:	db19      	blt.n	8009ac2 <_strtol_l.isra.0+0xb2>
 8009a8e:	fb00 4006 	mla	r0, r0, r6, r4
 8009a92:	2701      	movs	r7, #1
 8009a94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a98:	e7eb      	b.n	8009a72 <_strtol_l.isra.0+0x62>
 8009a9a:	462f      	mov	r7, r5
 8009a9c:	e7bf      	b.n	8009a1e <_strtol_l.isra.0+0xe>
 8009a9e:	2c2b      	cmp	r4, #43	; 0x2b
 8009aa0:	bf04      	itt	eq
 8009aa2:	1cbd      	addeq	r5, r7, #2
 8009aa4:	787c      	ldrbeq	r4, [r7, #1]
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	e7c9      	b.n	8009a3e <_strtol_l.isra.0+0x2e>
 8009aaa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009aae:	2b19      	cmp	r3, #25
 8009ab0:	d801      	bhi.n	8009ab6 <_strtol_l.isra.0+0xa6>
 8009ab2:	3c37      	subs	r4, #55	; 0x37
 8009ab4:	e7e2      	b.n	8009a7c <_strtol_l.isra.0+0x6c>
 8009ab6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009aba:	2b19      	cmp	r3, #25
 8009abc:	d804      	bhi.n	8009ac8 <_strtol_l.isra.0+0xb8>
 8009abe:	3c57      	subs	r4, #87	; 0x57
 8009ac0:	e7dc      	b.n	8009a7c <_strtol_l.isra.0+0x6c>
 8009ac2:	f04f 37ff 	mov.w	r7, #4294967295
 8009ac6:	e7e5      	b.n	8009a94 <_strtol_l.isra.0+0x84>
 8009ac8:	1c7b      	adds	r3, r7, #1
 8009aca:	d108      	bne.n	8009ade <_strtol_l.isra.0+0xce>
 8009acc:	2322      	movs	r3, #34	; 0x22
 8009ace:	f8c8 3000 	str.w	r3, [r8]
 8009ad2:	4608      	mov	r0, r1
 8009ad4:	f1ba 0f00 	cmp.w	sl, #0
 8009ad8:	d107      	bne.n	8009aea <_strtol_l.isra.0+0xda>
 8009ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ade:	b102      	cbz	r2, 8009ae2 <_strtol_l.isra.0+0xd2>
 8009ae0:	4240      	negs	r0, r0
 8009ae2:	f1ba 0f00 	cmp.w	sl, #0
 8009ae6:	d0f8      	beq.n	8009ada <_strtol_l.isra.0+0xca>
 8009ae8:	b10f      	cbz	r7, 8009aee <_strtol_l.isra.0+0xde>
 8009aea:	f105 39ff 	add.w	r9, r5, #4294967295
 8009aee:	f8ca 9000 	str.w	r9, [sl]
 8009af2:	e7f2      	b.n	8009ada <_strtol_l.isra.0+0xca>
 8009af4:	2430      	movs	r4, #48	; 0x30
 8009af6:	2e00      	cmp	r6, #0
 8009af8:	d1af      	bne.n	8009a5a <_strtol_l.isra.0+0x4a>
 8009afa:	2608      	movs	r6, #8
 8009afc:	e7ad      	b.n	8009a5a <_strtol_l.isra.0+0x4a>
 8009afe:	2c30      	cmp	r4, #48	; 0x30
 8009b00:	d0a3      	beq.n	8009a4a <_strtol_l.isra.0+0x3a>
 8009b02:	260a      	movs	r6, #10
 8009b04:	e7a9      	b.n	8009a5a <_strtol_l.isra.0+0x4a>
	...

08009b08 <strtol>:
 8009b08:	4b08      	ldr	r3, [pc, #32]	; (8009b2c <strtol+0x24>)
 8009b0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b0c:	681c      	ldr	r4, [r3, #0]
 8009b0e:	4d08      	ldr	r5, [pc, #32]	; (8009b30 <strtol+0x28>)
 8009b10:	6a23      	ldr	r3, [r4, #32]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	bf08      	it	eq
 8009b16:	462b      	moveq	r3, r5
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	460a      	mov	r2, r1
 8009b1e:	4601      	mov	r1, r0
 8009b20:	4620      	mov	r0, r4
 8009b22:	f7ff ff75 	bl	8009a10 <_strtol_l.isra.0>
 8009b26:	b003      	add	sp, #12
 8009b28:	bd30      	pop	{r4, r5, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000010 	.word	0x20000010
 8009b30:	20000074 	.word	0x20000074

08009b34 <__locale_ctype_ptr_l>:
 8009b34:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009b38:	4770      	bx	lr
	...

08009b3c <malloc>:
 8009b3c:	4b02      	ldr	r3, [pc, #8]	; (8009b48 <malloc+0xc>)
 8009b3e:	4601      	mov	r1, r0
 8009b40:	6818      	ldr	r0, [r3, #0]
 8009b42:	f000 b863 	b.w	8009c0c <_malloc_r>
 8009b46:	bf00      	nop
 8009b48:	20000010 	.word	0x20000010

08009b4c <__ascii_mbtowc>:
 8009b4c:	b082      	sub	sp, #8
 8009b4e:	b901      	cbnz	r1, 8009b52 <__ascii_mbtowc+0x6>
 8009b50:	a901      	add	r1, sp, #4
 8009b52:	b142      	cbz	r2, 8009b66 <__ascii_mbtowc+0x1a>
 8009b54:	b14b      	cbz	r3, 8009b6a <__ascii_mbtowc+0x1e>
 8009b56:	7813      	ldrb	r3, [r2, #0]
 8009b58:	600b      	str	r3, [r1, #0]
 8009b5a:	7812      	ldrb	r2, [r2, #0]
 8009b5c:	1c10      	adds	r0, r2, #0
 8009b5e:	bf18      	it	ne
 8009b60:	2001      	movne	r0, #1
 8009b62:	b002      	add	sp, #8
 8009b64:	4770      	bx	lr
 8009b66:	4610      	mov	r0, r2
 8009b68:	e7fb      	b.n	8009b62 <__ascii_mbtowc+0x16>
 8009b6a:	f06f 0001 	mvn.w	r0, #1
 8009b6e:	e7f8      	b.n	8009b62 <__ascii_mbtowc+0x16>

08009b70 <_free_r>:
 8009b70:	b538      	push	{r3, r4, r5, lr}
 8009b72:	4605      	mov	r5, r0
 8009b74:	2900      	cmp	r1, #0
 8009b76:	d045      	beq.n	8009c04 <_free_r+0x94>
 8009b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b7c:	1f0c      	subs	r4, r1, #4
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	bfb8      	it	lt
 8009b82:	18e4      	addlt	r4, r4, r3
 8009b84:	f000 fbb7 	bl	800a2f6 <__malloc_lock>
 8009b88:	4a1f      	ldr	r2, [pc, #124]	; (8009c08 <_free_r+0x98>)
 8009b8a:	6813      	ldr	r3, [r2, #0]
 8009b8c:	4610      	mov	r0, r2
 8009b8e:	b933      	cbnz	r3, 8009b9e <_free_r+0x2e>
 8009b90:	6063      	str	r3, [r4, #4]
 8009b92:	6014      	str	r4, [r2, #0]
 8009b94:	4628      	mov	r0, r5
 8009b96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b9a:	f000 bbad 	b.w	800a2f8 <__malloc_unlock>
 8009b9e:	42a3      	cmp	r3, r4
 8009ba0:	d90c      	bls.n	8009bbc <_free_r+0x4c>
 8009ba2:	6821      	ldr	r1, [r4, #0]
 8009ba4:	1862      	adds	r2, r4, r1
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	bf04      	itt	eq
 8009baa:	681a      	ldreq	r2, [r3, #0]
 8009bac:	685b      	ldreq	r3, [r3, #4]
 8009bae:	6063      	str	r3, [r4, #4]
 8009bb0:	bf04      	itt	eq
 8009bb2:	1852      	addeq	r2, r2, r1
 8009bb4:	6022      	streq	r2, [r4, #0]
 8009bb6:	6004      	str	r4, [r0, #0]
 8009bb8:	e7ec      	b.n	8009b94 <_free_r+0x24>
 8009bba:	4613      	mov	r3, r2
 8009bbc:	685a      	ldr	r2, [r3, #4]
 8009bbe:	b10a      	cbz	r2, 8009bc4 <_free_r+0x54>
 8009bc0:	42a2      	cmp	r2, r4
 8009bc2:	d9fa      	bls.n	8009bba <_free_r+0x4a>
 8009bc4:	6819      	ldr	r1, [r3, #0]
 8009bc6:	1858      	adds	r0, r3, r1
 8009bc8:	42a0      	cmp	r0, r4
 8009bca:	d10b      	bne.n	8009be4 <_free_r+0x74>
 8009bcc:	6820      	ldr	r0, [r4, #0]
 8009bce:	4401      	add	r1, r0
 8009bd0:	1858      	adds	r0, r3, r1
 8009bd2:	4282      	cmp	r2, r0
 8009bd4:	6019      	str	r1, [r3, #0]
 8009bd6:	d1dd      	bne.n	8009b94 <_free_r+0x24>
 8009bd8:	6810      	ldr	r0, [r2, #0]
 8009bda:	6852      	ldr	r2, [r2, #4]
 8009bdc:	605a      	str	r2, [r3, #4]
 8009bde:	4401      	add	r1, r0
 8009be0:	6019      	str	r1, [r3, #0]
 8009be2:	e7d7      	b.n	8009b94 <_free_r+0x24>
 8009be4:	d902      	bls.n	8009bec <_free_r+0x7c>
 8009be6:	230c      	movs	r3, #12
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	e7d3      	b.n	8009b94 <_free_r+0x24>
 8009bec:	6820      	ldr	r0, [r4, #0]
 8009bee:	1821      	adds	r1, r4, r0
 8009bf0:	428a      	cmp	r2, r1
 8009bf2:	bf04      	itt	eq
 8009bf4:	6811      	ldreq	r1, [r2, #0]
 8009bf6:	6852      	ldreq	r2, [r2, #4]
 8009bf8:	6062      	str	r2, [r4, #4]
 8009bfa:	bf04      	itt	eq
 8009bfc:	1809      	addeq	r1, r1, r0
 8009bfe:	6021      	streq	r1, [r4, #0]
 8009c00:	605c      	str	r4, [r3, #4]
 8009c02:	e7c7      	b.n	8009b94 <_free_r+0x24>
 8009c04:	bd38      	pop	{r3, r4, r5, pc}
 8009c06:	bf00      	nop
 8009c08:	2000020c 	.word	0x2000020c

08009c0c <_malloc_r>:
 8009c0c:	b570      	push	{r4, r5, r6, lr}
 8009c0e:	1ccd      	adds	r5, r1, #3
 8009c10:	f025 0503 	bic.w	r5, r5, #3
 8009c14:	3508      	adds	r5, #8
 8009c16:	2d0c      	cmp	r5, #12
 8009c18:	bf38      	it	cc
 8009c1a:	250c      	movcc	r5, #12
 8009c1c:	2d00      	cmp	r5, #0
 8009c1e:	4606      	mov	r6, r0
 8009c20:	db01      	blt.n	8009c26 <_malloc_r+0x1a>
 8009c22:	42a9      	cmp	r1, r5
 8009c24:	d903      	bls.n	8009c2e <_malloc_r+0x22>
 8009c26:	230c      	movs	r3, #12
 8009c28:	6033      	str	r3, [r6, #0]
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	bd70      	pop	{r4, r5, r6, pc}
 8009c2e:	f000 fb62 	bl	800a2f6 <__malloc_lock>
 8009c32:	4a21      	ldr	r2, [pc, #132]	; (8009cb8 <_malloc_r+0xac>)
 8009c34:	6814      	ldr	r4, [r2, #0]
 8009c36:	4621      	mov	r1, r4
 8009c38:	b991      	cbnz	r1, 8009c60 <_malloc_r+0x54>
 8009c3a:	4c20      	ldr	r4, [pc, #128]	; (8009cbc <_malloc_r+0xb0>)
 8009c3c:	6823      	ldr	r3, [r4, #0]
 8009c3e:	b91b      	cbnz	r3, 8009c48 <_malloc_r+0x3c>
 8009c40:	4630      	mov	r0, r6
 8009c42:	f000 fb17 	bl	800a274 <_sbrk_r>
 8009c46:	6020      	str	r0, [r4, #0]
 8009c48:	4629      	mov	r1, r5
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	f000 fb12 	bl	800a274 <_sbrk_r>
 8009c50:	1c43      	adds	r3, r0, #1
 8009c52:	d124      	bne.n	8009c9e <_malloc_r+0x92>
 8009c54:	230c      	movs	r3, #12
 8009c56:	6033      	str	r3, [r6, #0]
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f000 fb4d 	bl	800a2f8 <__malloc_unlock>
 8009c5e:	e7e4      	b.n	8009c2a <_malloc_r+0x1e>
 8009c60:	680b      	ldr	r3, [r1, #0]
 8009c62:	1b5b      	subs	r3, r3, r5
 8009c64:	d418      	bmi.n	8009c98 <_malloc_r+0x8c>
 8009c66:	2b0b      	cmp	r3, #11
 8009c68:	d90f      	bls.n	8009c8a <_malloc_r+0x7e>
 8009c6a:	600b      	str	r3, [r1, #0]
 8009c6c:	50cd      	str	r5, [r1, r3]
 8009c6e:	18cc      	adds	r4, r1, r3
 8009c70:	4630      	mov	r0, r6
 8009c72:	f000 fb41 	bl	800a2f8 <__malloc_unlock>
 8009c76:	f104 000b 	add.w	r0, r4, #11
 8009c7a:	1d23      	adds	r3, r4, #4
 8009c7c:	f020 0007 	bic.w	r0, r0, #7
 8009c80:	1ac3      	subs	r3, r0, r3
 8009c82:	d0d3      	beq.n	8009c2c <_malloc_r+0x20>
 8009c84:	425a      	negs	r2, r3
 8009c86:	50e2      	str	r2, [r4, r3]
 8009c88:	e7d0      	b.n	8009c2c <_malloc_r+0x20>
 8009c8a:	428c      	cmp	r4, r1
 8009c8c:	684b      	ldr	r3, [r1, #4]
 8009c8e:	bf16      	itet	ne
 8009c90:	6063      	strne	r3, [r4, #4]
 8009c92:	6013      	streq	r3, [r2, #0]
 8009c94:	460c      	movne	r4, r1
 8009c96:	e7eb      	b.n	8009c70 <_malloc_r+0x64>
 8009c98:	460c      	mov	r4, r1
 8009c9a:	6849      	ldr	r1, [r1, #4]
 8009c9c:	e7cc      	b.n	8009c38 <_malloc_r+0x2c>
 8009c9e:	1cc4      	adds	r4, r0, #3
 8009ca0:	f024 0403 	bic.w	r4, r4, #3
 8009ca4:	42a0      	cmp	r0, r4
 8009ca6:	d005      	beq.n	8009cb4 <_malloc_r+0xa8>
 8009ca8:	1a21      	subs	r1, r4, r0
 8009caa:	4630      	mov	r0, r6
 8009cac:	f000 fae2 	bl	800a274 <_sbrk_r>
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d0cf      	beq.n	8009c54 <_malloc_r+0x48>
 8009cb4:	6025      	str	r5, [r4, #0]
 8009cb6:	e7db      	b.n	8009c70 <_malloc_r+0x64>
 8009cb8:	2000020c 	.word	0x2000020c
 8009cbc:	20000210 	.word	0x20000210

08009cc0 <__ssputs_r>:
 8009cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc4:	688e      	ldr	r6, [r1, #8]
 8009cc6:	429e      	cmp	r6, r3
 8009cc8:	4682      	mov	sl, r0
 8009cca:	460c      	mov	r4, r1
 8009ccc:	4690      	mov	r8, r2
 8009cce:	4699      	mov	r9, r3
 8009cd0:	d837      	bhi.n	8009d42 <__ssputs_r+0x82>
 8009cd2:	898a      	ldrh	r2, [r1, #12]
 8009cd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009cd8:	d031      	beq.n	8009d3e <__ssputs_r+0x7e>
 8009cda:	6825      	ldr	r5, [r4, #0]
 8009cdc:	6909      	ldr	r1, [r1, #16]
 8009cde:	1a6f      	subs	r7, r5, r1
 8009ce0:	6965      	ldr	r5, [r4, #20]
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ce8:	fb95 f5f3 	sdiv	r5, r5, r3
 8009cec:	f109 0301 	add.w	r3, r9, #1
 8009cf0:	443b      	add	r3, r7
 8009cf2:	429d      	cmp	r5, r3
 8009cf4:	bf38      	it	cc
 8009cf6:	461d      	movcc	r5, r3
 8009cf8:	0553      	lsls	r3, r2, #21
 8009cfa:	d530      	bpl.n	8009d5e <__ssputs_r+0x9e>
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7ff ff85 	bl	8009c0c <_malloc_r>
 8009d02:	4606      	mov	r6, r0
 8009d04:	b950      	cbnz	r0, 8009d1c <__ssputs_r+0x5c>
 8009d06:	230c      	movs	r3, #12
 8009d08:	f8ca 3000 	str.w	r3, [sl]
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d12:	81a3      	strh	r3, [r4, #12]
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295
 8009d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1c:	463a      	mov	r2, r7
 8009d1e:	6921      	ldr	r1, [r4, #16]
 8009d20:	f000 fac5 	bl	800a2ae <memcpy>
 8009d24:	89a3      	ldrh	r3, [r4, #12]
 8009d26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2e:	81a3      	strh	r3, [r4, #12]
 8009d30:	6126      	str	r6, [r4, #16]
 8009d32:	6165      	str	r5, [r4, #20]
 8009d34:	443e      	add	r6, r7
 8009d36:	1bed      	subs	r5, r5, r7
 8009d38:	6026      	str	r6, [r4, #0]
 8009d3a:	60a5      	str	r5, [r4, #8]
 8009d3c:	464e      	mov	r6, r9
 8009d3e:	454e      	cmp	r6, r9
 8009d40:	d900      	bls.n	8009d44 <__ssputs_r+0x84>
 8009d42:	464e      	mov	r6, r9
 8009d44:	4632      	mov	r2, r6
 8009d46:	4641      	mov	r1, r8
 8009d48:	6820      	ldr	r0, [r4, #0]
 8009d4a:	f000 fabb 	bl	800a2c4 <memmove>
 8009d4e:	68a3      	ldr	r3, [r4, #8]
 8009d50:	1b9b      	subs	r3, r3, r6
 8009d52:	60a3      	str	r3, [r4, #8]
 8009d54:	6823      	ldr	r3, [r4, #0]
 8009d56:	441e      	add	r6, r3
 8009d58:	6026      	str	r6, [r4, #0]
 8009d5a:	2000      	movs	r0, #0
 8009d5c:	e7dc      	b.n	8009d18 <__ssputs_r+0x58>
 8009d5e:	462a      	mov	r2, r5
 8009d60:	f000 facb 	bl	800a2fa <_realloc_r>
 8009d64:	4606      	mov	r6, r0
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d1e2      	bne.n	8009d30 <__ssputs_r+0x70>
 8009d6a:	6921      	ldr	r1, [r4, #16]
 8009d6c:	4650      	mov	r0, sl
 8009d6e:	f7ff feff 	bl	8009b70 <_free_r>
 8009d72:	e7c8      	b.n	8009d06 <__ssputs_r+0x46>

08009d74 <_svfiprintf_r>:
 8009d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d78:	461d      	mov	r5, r3
 8009d7a:	898b      	ldrh	r3, [r1, #12]
 8009d7c:	061f      	lsls	r7, r3, #24
 8009d7e:	b09d      	sub	sp, #116	; 0x74
 8009d80:	4680      	mov	r8, r0
 8009d82:	460c      	mov	r4, r1
 8009d84:	4616      	mov	r6, r2
 8009d86:	d50f      	bpl.n	8009da8 <_svfiprintf_r+0x34>
 8009d88:	690b      	ldr	r3, [r1, #16]
 8009d8a:	b96b      	cbnz	r3, 8009da8 <_svfiprintf_r+0x34>
 8009d8c:	2140      	movs	r1, #64	; 0x40
 8009d8e:	f7ff ff3d 	bl	8009c0c <_malloc_r>
 8009d92:	6020      	str	r0, [r4, #0]
 8009d94:	6120      	str	r0, [r4, #16]
 8009d96:	b928      	cbnz	r0, 8009da4 <_svfiprintf_r+0x30>
 8009d98:	230c      	movs	r3, #12
 8009d9a:	f8c8 3000 	str.w	r3, [r8]
 8009d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009da2:	e0c8      	b.n	8009f36 <_svfiprintf_r+0x1c2>
 8009da4:	2340      	movs	r3, #64	; 0x40
 8009da6:	6163      	str	r3, [r4, #20]
 8009da8:	2300      	movs	r3, #0
 8009daa:	9309      	str	r3, [sp, #36]	; 0x24
 8009dac:	2320      	movs	r3, #32
 8009dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009db2:	2330      	movs	r3, #48	; 0x30
 8009db4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009db8:	9503      	str	r5, [sp, #12]
 8009dba:	f04f 0b01 	mov.w	fp, #1
 8009dbe:	4637      	mov	r7, r6
 8009dc0:	463d      	mov	r5, r7
 8009dc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009dc6:	b10b      	cbz	r3, 8009dcc <_svfiprintf_r+0x58>
 8009dc8:	2b25      	cmp	r3, #37	; 0x25
 8009dca:	d13e      	bne.n	8009e4a <_svfiprintf_r+0xd6>
 8009dcc:	ebb7 0a06 	subs.w	sl, r7, r6
 8009dd0:	d00b      	beq.n	8009dea <_svfiprintf_r+0x76>
 8009dd2:	4653      	mov	r3, sl
 8009dd4:	4632      	mov	r2, r6
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4640      	mov	r0, r8
 8009dda:	f7ff ff71 	bl	8009cc0 <__ssputs_r>
 8009dde:	3001      	adds	r0, #1
 8009de0:	f000 80a4 	beq.w	8009f2c <_svfiprintf_r+0x1b8>
 8009de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009de6:	4453      	add	r3, sl
 8009de8:	9309      	str	r3, [sp, #36]	; 0x24
 8009dea:	783b      	ldrb	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 809d 	beq.w	8009f2c <_svfiprintf_r+0x1b8>
 8009df2:	2300      	movs	r3, #0
 8009df4:	f04f 32ff 	mov.w	r2, #4294967295
 8009df8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009dfc:	9304      	str	r3, [sp, #16]
 8009dfe:	9307      	str	r3, [sp, #28]
 8009e00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e04:	931a      	str	r3, [sp, #104]	; 0x68
 8009e06:	462f      	mov	r7, r5
 8009e08:	2205      	movs	r2, #5
 8009e0a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e0e:	4850      	ldr	r0, [pc, #320]	; (8009f50 <_svfiprintf_r+0x1dc>)
 8009e10:	f7f6 fa2e 	bl	8000270 <memchr>
 8009e14:	9b04      	ldr	r3, [sp, #16]
 8009e16:	b9d0      	cbnz	r0, 8009e4e <_svfiprintf_r+0xda>
 8009e18:	06d9      	lsls	r1, r3, #27
 8009e1a:	bf44      	itt	mi
 8009e1c:	2220      	movmi	r2, #32
 8009e1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e22:	071a      	lsls	r2, r3, #28
 8009e24:	bf44      	itt	mi
 8009e26:	222b      	movmi	r2, #43	; 0x2b
 8009e28:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e2c:	782a      	ldrb	r2, [r5, #0]
 8009e2e:	2a2a      	cmp	r2, #42	; 0x2a
 8009e30:	d015      	beq.n	8009e5e <_svfiprintf_r+0xea>
 8009e32:	9a07      	ldr	r2, [sp, #28]
 8009e34:	462f      	mov	r7, r5
 8009e36:	2000      	movs	r0, #0
 8009e38:	250a      	movs	r5, #10
 8009e3a:	4639      	mov	r1, r7
 8009e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e40:	3b30      	subs	r3, #48	; 0x30
 8009e42:	2b09      	cmp	r3, #9
 8009e44:	d94d      	bls.n	8009ee2 <_svfiprintf_r+0x16e>
 8009e46:	b1b8      	cbz	r0, 8009e78 <_svfiprintf_r+0x104>
 8009e48:	e00f      	b.n	8009e6a <_svfiprintf_r+0xf6>
 8009e4a:	462f      	mov	r7, r5
 8009e4c:	e7b8      	b.n	8009dc0 <_svfiprintf_r+0x4c>
 8009e4e:	4a40      	ldr	r2, [pc, #256]	; (8009f50 <_svfiprintf_r+0x1dc>)
 8009e50:	1a80      	subs	r0, r0, r2
 8009e52:	fa0b f000 	lsl.w	r0, fp, r0
 8009e56:	4318      	orrs	r0, r3
 8009e58:	9004      	str	r0, [sp, #16]
 8009e5a:	463d      	mov	r5, r7
 8009e5c:	e7d3      	b.n	8009e06 <_svfiprintf_r+0x92>
 8009e5e:	9a03      	ldr	r2, [sp, #12]
 8009e60:	1d11      	adds	r1, r2, #4
 8009e62:	6812      	ldr	r2, [r2, #0]
 8009e64:	9103      	str	r1, [sp, #12]
 8009e66:	2a00      	cmp	r2, #0
 8009e68:	db01      	blt.n	8009e6e <_svfiprintf_r+0xfa>
 8009e6a:	9207      	str	r2, [sp, #28]
 8009e6c:	e004      	b.n	8009e78 <_svfiprintf_r+0x104>
 8009e6e:	4252      	negs	r2, r2
 8009e70:	f043 0302 	orr.w	r3, r3, #2
 8009e74:	9207      	str	r2, [sp, #28]
 8009e76:	9304      	str	r3, [sp, #16]
 8009e78:	783b      	ldrb	r3, [r7, #0]
 8009e7a:	2b2e      	cmp	r3, #46	; 0x2e
 8009e7c:	d10c      	bne.n	8009e98 <_svfiprintf_r+0x124>
 8009e7e:	787b      	ldrb	r3, [r7, #1]
 8009e80:	2b2a      	cmp	r3, #42	; 0x2a
 8009e82:	d133      	bne.n	8009eec <_svfiprintf_r+0x178>
 8009e84:	9b03      	ldr	r3, [sp, #12]
 8009e86:	1d1a      	adds	r2, r3, #4
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	9203      	str	r2, [sp, #12]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	bfb8      	it	lt
 8009e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e94:	3702      	adds	r7, #2
 8009e96:	9305      	str	r3, [sp, #20]
 8009e98:	4d2e      	ldr	r5, [pc, #184]	; (8009f54 <_svfiprintf_r+0x1e0>)
 8009e9a:	7839      	ldrb	r1, [r7, #0]
 8009e9c:	2203      	movs	r2, #3
 8009e9e:	4628      	mov	r0, r5
 8009ea0:	f7f6 f9e6 	bl	8000270 <memchr>
 8009ea4:	b138      	cbz	r0, 8009eb6 <_svfiprintf_r+0x142>
 8009ea6:	2340      	movs	r3, #64	; 0x40
 8009ea8:	1b40      	subs	r0, r0, r5
 8009eaa:	fa03 f000 	lsl.w	r0, r3, r0
 8009eae:	9b04      	ldr	r3, [sp, #16]
 8009eb0:	4303      	orrs	r3, r0
 8009eb2:	3701      	adds	r7, #1
 8009eb4:	9304      	str	r3, [sp, #16]
 8009eb6:	7839      	ldrb	r1, [r7, #0]
 8009eb8:	4827      	ldr	r0, [pc, #156]	; (8009f58 <_svfiprintf_r+0x1e4>)
 8009eba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ebe:	2206      	movs	r2, #6
 8009ec0:	1c7e      	adds	r6, r7, #1
 8009ec2:	f7f6 f9d5 	bl	8000270 <memchr>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d038      	beq.n	8009f3c <_svfiprintf_r+0x1c8>
 8009eca:	4b24      	ldr	r3, [pc, #144]	; (8009f5c <_svfiprintf_r+0x1e8>)
 8009ecc:	bb13      	cbnz	r3, 8009f14 <_svfiprintf_r+0x1a0>
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	3307      	adds	r3, #7
 8009ed2:	f023 0307 	bic.w	r3, r3, #7
 8009ed6:	3308      	adds	r3, #8
 8009ed8:	9303      	str	r3, [sp, #12]
 8009eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009edc:	444b      	add	r3, r9
 8009ede:	9309      	str	r3, [sp, #36]	; 0x24
 8009ee0:	e76d      	b.n	8009dbe <_svfiprintf_r+0x4a>
 8009ee2:	fb05 3202 	mla	r2, r5, r2, r3
 8009ee6:	2001      	movs	r0, #1
 8009ee8:	460f      	mov	r7, r1
 8009eea:	e7a6      	b.n	8009e3a <_svfiprintf_r+0xc6>
 8009eec:	2300      	movs	r3, #0
 8009eee:	3701      	adds	r7, #1
 8009ef0:	9305      	str	r3, [sp, #20]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	250a      	movs	r5, #10
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009efc:	3a30      	subs	r2, #48	; 0x30
 8009efe:	2a09      	cmp	r2, #9
 8009f00:	d903      	bls.n	8009f0a <_svfiprintf_r+0x196>
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d0c8      	beq.n	8009e98 <_svfiprintf_r+0x124>
 8009f06:	9105      	str	r1, [sp, #20]
 8009f08:	e7c6      	b.n	8009e98 <_svfiprintf_r+0x124>
 8009f0a:	fb05 2101 	mla	r1, r5, r1, r2
 8009f0e:	2301      	movs	r3, #1
 8009f10:	4607      	mov	r7, r0
 8009f12:	e7f0      	b.n	8009ef6 <_svfiprintf_r+0x182>
 8009f14:	ab03      	add	r3, sp, #12
 8009f16:	9300      	str	r3, [sp, #0]
 8009f18:	4622      	mov	r2, r4
 8009f1a:	4b11      	ldr	r3, [pc, #68]	; (8009f60 <_svfiprintf_r+0x1ec>)
 8009f1c:	a904      	add	r1, sp, #16
 8009f1e:	4640      	mov	r0, r8
 8009f20:	f3af 8000 	nop.w
 8009f24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f28:	4681      	mov	r9, r0
 8009f2a:	d1d6      	bne.n	8009eda <_svfiprintf_r+0x166>
 8009f2c:	89a3      	ldrh	r3, [r4, #12]
 8009f2e:	065b      	lsls	r3, r3, #25
 8009f30:	f53f af35 	bmi.w	8009d9e <_svfiprintf_r+0x2a>
 8009f34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f36:	b01d      	add	sp, #116	; 0x74
 8009f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3c:	ab03      	add	r3, sp, #12
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	4622      	mov	r2, r4
 8009f42:	4b07      	ldr	r3, [pc, #28]	; (8009f60 <_svfiprintf_r+0x1ec>)
 8009f44:	a904      	add	r1, sp, #16
 8009f46:	4640      	mov	r0, r8
 8009f48:	f000 f882 	bl	800a050 <_printf_i>
 8009f4c:	e7ea      	b.n	8009f24 <_svfiprintf_r+0x1b0>
 8009f4e:	bf00      	nop
 8009f50:	0800a4fa 	.word	0x0800a4fa
 8009f54:	0800a500 	.word	0x0800a500
 8009f58:	0800a504 	.word	0x0800a504
 8009f5c:	00000000 	.word	0x00000000
 8009f60:	08009cc1 	.word	0x08009cc1

08009f64 <_printf_common>:
 8009f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f68:	4691      	mov	r9, r2
 8009f6a:	461f      	mov	r7, r3
 8009f6c:	688a      	ldr	r2, [r1, #8]
 8009f6e:	690b      	ldr	r3, [r1, #16]
 8009f70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f74:	4293      	cmp	r3, r2
 8009f76:	bfb8      	it	lt
 8009f78:	4613      	movlt	r3, r2
 8009f7a:	f8c9 3000 	str.w	r3, [r9]
 8009f7e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f82:	4606      	mov	r6, r0
 8009f84:	460c      	mov	r4, r1
 8009f86:	b112      	cbz	r2, 8009f8e <_printf_common+0x2a>
 8009f88:	3301      	adds	r3, #1
 8009f8a:	f8c9 3000 	str.w	r3, [r9]
 8009f8e:	6823      	ldr	r3, [r4, #0]
 8009f90:	0699      	lsls	r1, r3, #26
 8009f92:	bf42      	ittt	mi
 8009f94:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f98:	3302      	addmi	r3, #2
 8009f9a:	f8c9 3000 	strmi.w	r3, [r9]
 8009f9e:	6825      	ldr	r5, [r4, #0]
 8009fa0:	f015 0506 	ands.w	r5, r5, #6
 8009fa4:	d107      	bne.n	8009fb6 <_printf_common+0x52>
 8009fa6:	f104 0a19 	add.w	sl, r4, #25
 8009faa:	68e3      	ldr	r3, [r4, #12]
 8009fac:	f8d9 2000 	ldr.w	r2, [r9]
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	42ab      	cmp	r3, r5
 8009fb4:	dc28      	bgt.n	800a008 <_printf_common+0xa4>
 8009fb6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	3300      	adds	r3, #0
 8009fbe:	bf18      	it	ne
 8009fc0:	2301      	movne	r3, #1
 8009fc2:	0692      	lsls	r2, r2, #26
 8009fc4:	d42d      	bmi.n	800a022 <_printf_common+0xbe>
 8009fc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fca:	4639      	mov	r1, r7
 8009fcc:	4630      	mov	r0, r6
 8009fce:	47c0      	blx	r8
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d020      	beq.n	800a016 <_printf_common+0xb2>
 8009fd4:	6823      	ldr	r3, [r4, #0]
 8009fd6:	68e5      	ldr	r5, [r4, #12]
 8009fd8:	f8d9 2000 	ldr.w	r2, [r9]
 8009fdc:	f003 0306 	and.w	r3, r3, #6
 8009fe0:	2b04      	cmp	r3, #4
 8009fe2:	bf08      	it	eq
 8009fe4:	1aad      	subeq	r5, r5, r2
 8009fe6:	68a3      	ldr	r3, [r4, #8]
 8009fe8:	6922      	ldr	r2, [r4, #16]
 8009fea:	bf0c      	ite	eq
 8009fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ff0:	2500      	movne	r5, #0
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	bfc4      	itt	gt
 8009ff6:	1a9b      	subgt	r3, r3, r2
 8009ff8:	18ed      	addgt	r5, r5, r3
 8009ffa:	f04f 0900 	mov.w	r9, #0
 8009ffe:	341a      	adds	r4, #26
 800a000:	454d      	cmp	r5, r9
 800a002:	d11a      	bne.n	800a03a <_printf_common+0xd6>
 800a004:	2000      	movs	r0, #0
 800a006:	e008      	b.n	800a01a <_printf_common+0xb6>
 800a008:	2301      	movs	r3, #1
 800a00a:	4652      	mov	r2, sl
 800a00c:	4639      	mov	r1, r7
 800a00e:	4630      	mov	r0, r6
 800a010:	47c0      	blx	r8
 800a012:	3001      	adds	r0, #1
 800a014:	d103      	bne.n	800a01e <_printf_common+0xba>
 800a016:	f04f 30ff 	mov.w	r0, #4294967295
 800a01a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a01e:	3501      	adds	r5, #1
 800a020:	e7c3      	b.n	8009faa <_printf_common+0x46>
 800a022:	18e1      	adds	r1, r4, r3
 800a024:	1c5a      	adds	r2, r3, #1
 800a026:	2030      	movs	r0, #48	; 0x30
 800a028:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a02c:	4422      	add	r2, r4
 800a02e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a032:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a036:	3302      	adds	r3, #2
 800a038:	e7c5      	b.n	8009fc6 <_printf_common+0x62>
 800a03a:	2301      	movs	r3, #1
 800a03c:	4622      	mov	r2, r4
 800a03e:	4639      	mov	r1, r7
 800a040:	4630      	mov	r0, r6
 800a042:	47c0      	blx	r8
 800a044:	3001      	adds	r0, #1
 800a046:	d0e6      	beq.n	800a016 <_printf_common+0xb2>
 800a048:	f109 0901 	add.w	r9, r9, #1
 800a04c:	e7d8      	b.n	800a000 <_printf_common+0x9c>
	...

0800a050 <_printf_i>:
 800a050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a054:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a058:	460c      	mov	r4, r1
 800a05a:	7e09      	ldrb	r1, [r1, #24]
 800a05c:	b085      	sub	sp, #20
 800a05e:	296e      	cmp	r1, #110	; 0x6e
 800a060:	4617      	mov	r7, r2
 800a062:	4606      	mov	r6, r0
 800a064:	4698      	mov	r8, r3
 800a066:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a068:	f000 80b3 	beq.w	800a1d2 <_printf_i+0x182>
 800a06c:	d822      	bhi.n	800a0b4 <_printf_i+0x64>
 800a06e:	2963      	cmp	r1, #99	; 0x63
 800a070:	d036      	beq.n	800a0e0 <_printf_i+0x90>
 800a072:	d80a      	bhi.n	800a08a <_printf_i+0x3a>
 800a074:	2900      	cmp	r1, #0
 800a076:	f000 80b9 	beq.w	800a1ec <_printf_i+0x19c>
 800a07a:	2958      	cmp	r1, #88	; 0x58
 800a07c:	f000 8083 	beq.w	800a186 <_printf_i+0x136>
 800a080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a084:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a088:	e032      	b.n	800a0f0 <_printf_i+0xa0>
 800a08a:	2964      	cmp	r1, #100	; 0x64
 800a08c:	d001      	beq.n	800a092 <_printf_i+0x42>
 800a08e:	2969      	cmp	r1, #105	; 0x69
 800a090:	d1f6      	bne.n	800a080 <_printf_i+0x30>
 800a092:	6820      	ldr	r0, [r4, #0]
 800a094:	6813      	ldr	r3, [r2, #0]
 800a096:	0605      	lsls	r5, r0, #24
 800a098:	f103 0104 	add.w	r1, r3, #4
 800a09c:	d52a      	bpl.n	800a0f4 <_printf_i+0xa4>
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6011      	str	r1, [r2, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	da03      	bge.n	800a0ae <_printf_i+0x5e>
 800a0a6:	222d      	movs	r2, #45	; 0x2d
 800a0a8:	425b      	negs	r3, r3
 800a0aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a0ae:	486f      	ldr	r0, [pc, #444]	; (800a26c <_printf_i+0x21c>)
 800a0b0:	220a      	movs	r2, #10
 800a0b2:	e039      	b.n	800a128 <_printf_i+0xd8>
 800a0b4:	2973      	cmp	r1, #115	; 0x73
 800a0b6:	f000 809d 	beq.w	800a1f4 <_printf_i+0x1a4>
 800a0ba:	d808      	bhi.n	800a0ce <_printf_i+0x7e>
 800a0bc:	296f      	cmp	r1, #111	; 0x6f
 800a0be:	d020      	beq.n	800a102 <_printf_i+0xb2>
 800a0c0:	2970      	cmp	r1, #112	; 0x70
 800a0c2:	d1dd      	bne.n	800a080 <_printf_i+0x30>
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	f043 0320 	orr.w	r3, r3, #32
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	e003      	b.n	800a0d6 <_printf_i+0x86>
 800a0ce:	2975      	cmp	r1, #117	; 0x75
 800a0d0:	d017      	beq.n	800a102 <_printf_i+0xb2>
 800a0d2:	2978      	cmp	r1, #120	; 0x78
 800a0d4:	d1d4      	bne.n	800a080 <_printf_i+0x30>
 800a0d6:	2378      	movs	r3, #120	; 0x78
 800a0d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a0dc:	4864      	ldr	r0, [pc, #400]	; (800a270 <_printf_i+0x220>)
 800a0de:	e055      	b.n	800a18c <_printf_i+0x13c>
 800a0e0:	6813      	ldr	r3, [r2, #0]
 800a0e2:	1d19      	adds	r1, r3, #4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	6011      	str	r1, [r2, #0]
 800a0e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e08c      	b.n	800a20e <_printf_i+0x1be>
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	6011      	str	r1, [r2, #0]
 800a0f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a0fc:	bf18      	it	ne
 800a0fe:	b21b      	sxthne	r3, r3
 800a100:	e7cf      	b.n	800a0a2 <_printf_i+0x52>
 800a102:	6813      	ldr	r3, [r2, #0]
 800a104:	6825      	ldr	r5, [r4, #0]
 800a106:	1d18      	adds	r0, r3, #4
 800a108:	6010      	str	r0, [r2, #0]
 800a10a:	0628      	lsls	r0, r5, #24
 800a10c:	d501      	bpl.n	800a112 <_printf_i+0xc2>
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	e002      	b.n	800a118 <_printf_i+0xc8>
 800a112:	0668      	lsls	r0, r5, #25
 800a114:	d5fb      	bpl.n	800a10e <_printf_i+0xbe>
 800a116:	881b      	ldrh	r3, [r3, #0]
 800a118:	4854      	ldr	r0, [pc, #336]	; (800a26c <_printf_i+0x21c>)
 800a11a:	296f      	cmp	r1, #111	; 0x6f
 800a11c:	bf14      	ite	ne
 800a11e:	220a      	movne	r2, #10
 800a120:	2208      	moveq	r2, #8
 800a122:	2100      	movs	r1, #0
 800a124:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a128:	6865      	ldr	r5, [r4, #4]
 800a12a:	60a5      	str	r5, [r4, #8]
 800a12c:	2d00      	cmp	r5, #0
 800a12e:	f2c0 8095 	blt.w	800a25c <_printf_i+0x20c>
 800a132:	6821      	ldr	r1, [r4, #0]
 800a134:	f021 0104 	bic.w	r1, r1, #4
 800a138:	6021      	str	r1, [r4, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d13d      	bne.n	800a1ba <_printf_i+0x16a>
 800a13e:	2d00      	cmp	r5, #0
 800a140:	f040 808e 	bne.w	800a260 <_printf_i+0x210>
 800a144:	4665      	mov	r5, ip
 800a146:	2a08      	cmp	r2, #8
 800a148:	d10b      	bne.n	800a162 <_printf_i+0x112>
 800a14a:	6823      	ldr	r3, [r4, #0]
 800a14c:	07db      	lsls	r3, r3, #31
 800a14e:	d508      	bpl.n	800a162 <_printf_i+0x112>
 800a150:	6923      	ldr	r3, [r4, #16]
 800a152:	6862      	ldr	r2, [r4, #4]
 800a154:	429a      	cmp	r2, r3
 800a156:	bfde      	ittt	le
 800a158:	2330      	movle	r3, #48	; 0x30
 800a15a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a15e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a162:	ebac 0305 	sub.w	r3, ip, r5
 800a166:	6123      	str	r3, [r4, #16]
 800a168:	f8cd 8000 	str.w	r8, [sp]
 800a16c:	463b      	mov	r3, r7
 800a16e:	aa03      	add	r2, sp, #12
 800a170:	4621      	mov	r1, r4
 800a172:	4630      	mov	r0, r6
 800a174:	f7ff fef6 	bl	8009f64 <_printf_common>
 800a178:	3001      	adds	r0, #1
 800a17a:	d14d      	bne.n	800a218 <_printf_i+0x1c8>
 800a17c:	f04f 30ff 	mov.w	r0, #4294967295
 800a180:	b005      	add	sp, #20
 800a182:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a186:	4839      	ldr	r0, [pc, #228]	; (800a26c <_printf_i+0x21c>)
 800a188:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a18c:	6813      	ldr	r3, [r2, #0]
 800a18e:	6821      	ldr	r1, [r4, #0]
 800a190:	1d1d      	adds	r5, r3, #4
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6015      	str	r5, [r2, #0]
 800a196:	060a      	lsls	r2, r1, #24
 800a198:	d50b      	bpl.n	800a1b2 <_printf_i+0x162>
 800a19a:	07ca      	lsls	r2, r1, #31
 800a19c:	bf44      	itt	mi
 800a19e:	f041 0120 	orrmi.w	r1, r1, #32
 800a1a2:	6021      	strmi	r1, [r4, #0]
 800a1a4:	b91b      	cbnz	r3, 800a1ae <_printf_i+0x15e>
 800a1a6:	6822      	ldr	r2, [r4, #0]
 800a1a8:	f022 0220 	bic.w	r2, r2, #32
 800a1ac:	6022      	str	r2, [r4, #0]
 800a1ae:	2210      	movs	r2, #16
 800a1b0:	e7b7      	b.n	800a122 <_printf_i+0xd2>
 800a1b2:	064d      	lsls	r5, r1, #25
 800a1b4:	bf48      	it	mi
 800a1b6:	b29b      	uxthmi	r3, r3
 800a1b8:	e7ef      	b.n	800a19a <_printf_i+0x14a>
 800a1ba:	4665      	mov	r5, ip
 800a1bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1c0:	fb02 3311 	mls	r3, r2, r1, r3
 800a1c4:	5cc3      	ldrb	r3, [r0, r3]
 800a1c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a1ca:	460b      	mov	r3, r1
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	d1f5      	bne.n	800a1bc <_printf_i+0x16c>
 800a1d0:	e7b9      	b.n	800a146 <_printf_i+0xf6>
 800a1d2:	6813      	ldr	r3, [r2, #0]
 800a1d4:	6825      	ldr	r5, [r4, #0]
 800a1d6:	6961      	ldr	r1, [r4, #20]
 800a1d8:	1d18      	adds	r0, r3, #4
 800a1da:	6010      	str	r0, [r2, #0]
 800a1dc:	0628      	lsls	r0, r5, #24
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	d501      	bpl.n	800a1e6 <_printf_i+0x196>
 800a1e2:	6019      	str	r1, [r3, #0]
 800a1e4:	e002      	b.n	800a1ec <_printf_i+0x19c>
 800a1e6:	066a      	lsls	r2, r5, #25
 800a1e8:	d5fb      	bpl.n	800a1e2 <_printf_i+0x192>
 800a1ea:	8019      	strh	r1, [r3, #0]
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	6123      	str	r3, [r4, #16]
 800a1f0:	4665      	mov	r5, ip
 800a1f2:	e7b9      	b.n	800a168 <_printf_i+0x118>
 800a1f4:	6813      	ldr	r3, [r2, #0]
 800a1f6:	1d19      	adds	r1, r3, #4
 800a1f8:	6011      	str	r1, [r2, #0]
 800a1fa:	681d      	ldr	r5, [r3, #0]
 800a1fc:	6862      	ldr	r2, [r4, #4]
 800a1fe:	2100      	movs	r1, #0
 800a200:	4628      	mov	r0, r5
 800a202:	f7f6 f835 	bl	8000270 <memchr>
 800a206:	b108      	cbz	r0, 800a20c <_printf_i+0x1bc>
 800a208:	1b40      	subs	r0, r0, r5
 800a20a:	6060      	str	r0, [r4, #4]
 800a20c:	6863      	ldr	r3, [r4, #4]
 800a20e:	6123      	str	r3, [r4, #16]
 800a210:	2300      	movs	r3, #0
 800a212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a216:	e7a7      	b.n	800a168 <_printf_i+0x118>
 800a218:	6923      	ldr	r3, [r4, #16]
 800a21a:	462a      	mov	r2, r5
 800a21c:	4639      	mov	r1, r7
 800a21e:	4630      	mov	r0, r6
 800a220:	47c0      	blx	r8
 800a222:	3001      	adds	r0, #1
 800a224:	d0aa      	beq.n	800a17c <_printf_i+0x12c>
 800a226:	6823      	ldr	r3, [r4, #0]
 800a228:	079b      	lsls	r3, r3, #30
 800a22a:	d413      	bmi.n	800a254 <_printf_i+0x204>
 800a22c:	68e0      	ldr	r0, [r4, #12]
 800a22e:	9b03      	ldr	r3, [sp, #12]
 800a230:	4298      	cmp	r0, r3
 800a232:	bfb8      	it	lt
 800a234:	4618      	movlt	r0, r3
 800a236:	e7a3      	b.n	800a180 <_printf_i+0x130>
 800a238:	2301      	movs	r3, #1
 800a23a:	464a      	mov	r2, r9
 800a23c:	4639      	mov	r1, r7
 800a23e:	4630      	mov	r0, r6
 800a240:	47c0      	blx	r8
 800a242:	3001      	adds	r0, #1
 800a244:	d09a      	beq.n	800a17c <_printf_i+0x12c>
 800a246:	3501      	adds	r5, #1
 800a248:	68e3      	ldr	r3, [r4, #12]
 800a24a:	9a03      	ldr	r2, [sp, #12]
 800a24c:	1a9b      	subs	r3, r3, r2
 800a24e:	42ab      	cmp	r3, r5
 800a250:	dcf2      	bgt.n	800a238 <_printf_i+0x1e8>
 800a252:	e7eb      	b.n	800a22c <_printf_i+0x1dc>
 800a254:	2500      	movs	r5, #0
 800a256:	f104 0919 	add.w	r9, r4, #25
 800a25a:	e7f5      	b.n	800a248 <_printf_i+0x1f8>
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1ac      	bne.n	800a1ba <_printf_i+0x16a>
 800a260:	7803      	ldrb	r3, [r0, #0]
 800a262:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a266:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a26a:	e76c      	b.n	800a146 <_printf_i+0xf6>
 800a26c:	0800a50b 	.word	0x0800a50b
 800a270:	0800a51c 	.word	0x0800a51c

0800a274 <_sbrk_r>:
 800a274:	b538      	push	{r3, r4, r5, lr}
 800a276:	4c06      	ldr	r4, [pc, #24]	; (800a290 <_sbrk_r+0x1c>)
 800a278:	2300      	movs	r3, #0
 800a27a:	4605      	mov	r5, r0
 800a27c:	4608      	mov	r0, r1
 800a27e:	6023      	str	r3, [r4, #0]
 800a280:	f7f9 f90a 	bl	8003498 <_sbrk>
 800a284:	1c43      	adds	r3, r0, #1
 800a286:	d102      	bne.n	800a28e <_sbrk_r+0x1a>
 800a288:	6823      	ldr	r3, [r4, #0]
 800a28a:	b103      	cbz	r3, 800a28e <_sbrk_r+0x1a>
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	2005aa50 	.word	0x2005aa50

0800a294 <__ascii_wctomb>:
 800a294:	b149      	cbz	r1, 800a2aa <__ascii_wctomb+0x16>
 800a296:	2aff      	cmp	r2, #255	; 0xff
 800a298:	bf85      	ittet	hi
 800a29a:	238a      	movhi	r3, #138	; 0x8a
 800a29c:	6003      	strhi	r3, [r0, #0]
 800a29e:	700a      	strbls	r2, [r1, #0]
 800a2a0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a2a4:	bf98      	it	ls
 800a2a6:	2001      	movls	r0, #1
 800a2a8:	4770      	bx	lr
 800a2aa:	4608      	mov	r0, r1
 800a2ac:	4770      	bx	lr

0800a2ae <memcpy>:
 800a2ae:	b510      	push	{r4, lr}
 800a2b0:	1e43      	subs	r3, r0, #1
 800a2b2:	440a      	add	r2, r1
 800a2b4:	4291      	cmp	r1, r2
 800a2b6:	d100      	bne.n	800a2ba <memcpy+0xc>
 800a2b8:	bd10      	pop	{r4, pc}
 800a2ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2c2:	e7f7      	b.n	800a2b4 <memcpy+0x6>

0800a2c4 <memmove>:
 800a2c4:	4288      	cmp	r0, r1
 800a2c6:	b510      	push	{r4, lr}
 800a2c8:	eb01 0302 	add.w	r3, r1, r2
 800a2cc:	d807      	bhi.n	800a2de <memmove+0x1a>
 800a2ce:	1e42      	subs	r2, r0, #1
 800a2d0:	4299      	cmp	r1, r3
 800a2d2:	d00a      	beq.n	800a2ea <memmove+0x26>
 800a2d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a2dc:	e7f8      	b.n	800a2d0 <memmove+0xc>
 800a2de:	4283      	cmp	r3, r0
 800a2e0:	d9f5      	bls.n	800a2ce <memmove+0xa>
 800a2e2:	1881      	adds	r1, r0, r2
 800a2e4:	1ad2      	subs	r2, r2, r3
 800a2e6:	42d3      	cmn	r3, r2
 800a2e8:	d100      	bne.n	800a2ec <memmove+0x28>
 800a2ea:	bd10      	pop	{r4, pc}
 800a2ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a2f4:	e7f7      	b.n	800a2e6 <memmove+0x22>

0800a2f6 <__malloc_lock>:
 800a2f6:	4770      	bx	lr

0800a2f8 <__malloc_unlock>:
 800a2f8:	4770      	bx	lr

0800a2fa <_realloc_r>:
 800a2fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fc:	4607      	mov	r7, r0
 800a2fe:	4614      	mov	r4, r2
 800a300:	460e      	mov	r6, r1
 800a302:	b921      	cbnz	r1, 800a30e <_realloc_r+0x14>
 800a304:	4611      	mov	r1, r2
 800a306:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a30a:	f7ff bc7f 	b.w	8009c0c <_malloc_r>
 800a30e:	b922      	cbnz	r2, 800a31a <_realloc_r+0x20>
 800a310:	f7ff fc2e 	bl	8009b70 <_free_r>
 800a314:	4625      	mov	r5, r4
 800a316:	4628      	mov	r0, r5
 800a318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a31a:	f000 f814 	bl	800a346 <_malloc_usable_size_r>
 800a31e:	42a0      	cmp	r0, r4
 800a320:	d20f      	bcs.n	800a342 <_realloc_r+0x48>
 800a322:	4621      	mov	r1, r4
 800a324:	4638      	mov	r0, r7
 800a326:	f7ff fc71 	bl	8009c0c <_malloc_r>
 800a32a:	4605      	mov	r5, r0
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d0f2      	beq.n	800a316 <_realloc_r+0x1c>
 800a330:	4631      	mov	r1, r6
 800a332:	4622      	mov	r2, r4
 800a334:	f7ff ffbb 	bl	800a2ae <memcpy>
 800a338:	4631      	mov	r1, r6
 800a33a:	4638      	mov	r0, r7
 800a33c:	f7ff fc18 	bl	8009b70 <_free_r>
 800a340:	e7e9      	b.n	800a316 <_realloc_r+0x1c>
 800a342:	4635      	mov	r5, r6
 800a344:	e7e7      	b.n	800a316 <_realloc_r+0x1c>

0800a346 <_malloc_usable_size_r>:
 800a346:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a34a:	1f18      	subs	r0, r3, #4
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bfbc      	itt	lt
 800a350:	580b      	ldrlt	r3, [r1, r0]
 800a352:	18c0      	addlt	r0, r0, r3
 800a354:	4770      	bx	lr
	...

0800a358 <_init>:
 800a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35a:	bf00      	nop
 800a35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a35e:	bc08      	pop	{r3}
 800a360:	469e      	mov	lr, r3
 800a362:	4770      	bx	lr

0800a364 <_fini>:
 800a364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a366:	bf00      	nop
 800a368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a36a:	bc08      	pop	{r3}
 800a36c:	469e      	mov	lr, r3
 800a36e:	4770      	bx	lr
