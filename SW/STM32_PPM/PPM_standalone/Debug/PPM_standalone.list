
PPM_standalone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3ac  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800a5ac  0800a5ac  0001a5ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a874  0800a874  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a874  0800a874  0001a874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a87c  0800a87c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a87c  0800a87c  0001a87c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a880  0800a880  0001a880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a884  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0005a7f8  200001dc  0800aa60  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2005a9d4  0800aa60  0002a9d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001835d  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003277  00000000  00000000  00038567  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001670  00000000  00000000  0003b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001510  00000000  00000000  0003ce50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a3fb  00000000  00000000  0003e360  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001254e  00000000  00000000  0006875b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00103d0e  00000000  00000000  0007aca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e9b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062a4  00000000  00000000  0017ea34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	0800a594 	.word	0x0800a594

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	0800a594 	.word	0x0800a594

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b972 	b.w	800060c <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	4688      	mov	r8, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14b      	bne.n	80003e6 <__udivmoddi4+0xa6>
 800034e:	428a      	cmp	r2, r1
 8000350:	4615      	mov	r5, r2
 8000352:	d967      	bls.n	8000424 <__udivmoddi4+0xe4>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0720 	rsb	r7, r2, #32
 800035e:	fa01 f302 	lsl.w	r3, r1, r2
 8000362:	fa20 f707 	lsr.w	r7, r0, r7
 8000366:	4095      	lsls	r5, r2
 8000368:	ea47 0803 	orr.w	r8, r7, r3
 800036c:	4094      	lsls	r4, r2
 800036e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fbb8 f7fe 	udiv	r7, r8, lr
 8000378:	fa1f fc85 	uxth.w	ip, r5
 800037c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000380:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000384:	fb07 f10c 	mul.w	r1, r7, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x60>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000392:	f080 811b 	bcs.w	80005cc <__udivmoddi4+0x28c>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 8118 	bls.w	80005cc <__udivmoddi4+0x28c>
 800039c:	3f02      	subs	r7, #2
 800039e:	442b      	add	r3, r5
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x8c>
 80003b8:	192c      	adds	r4, r5, r4
 80003ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80003be:	f080 8107 	bcs.w	80005d0 <__udivmoddi4+0x290>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	f240 8104 	bls.w	80005d0 <__udivmoddi4+0x290>
 80003c8:	3802      	subs	r0, #2
 80003ca:	442c      	add	r4, r5
 80003cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003d0:	eba4 040c 	sub.w	r4, r4, ip
 80003d4:	2700      	movs	r7, #0
 80003d6:	b11e      	cbz	r6, 80003e0 <__udivmoddi4+0xa0>
 80003d8:	40d4      	lsrs	r4, r2
 80003da:	2300      	movs	r3, #0
 80003dc:	e9c6 4300 	strd	r4, r3, [r6]
 80003e0:	4639      	mov	r1, r7
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0xbe>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80eb 	beq.w	80005c6 <__udivmoddi4+0x286>
 80003f0:	2700      	movs	r7, #0
 80003f2:	e9c6 0100 	strd	r0, r1, [r6]
 80003f6:	4638      	mov	r0, r7
 80003f8:	4639      	mov	r1, r7
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f783 	clz	r7, r3
 8000402:	2f00      	cmp	r7, #0
 8000404:	d147      	bne.n	8000496 <__udivmoddi4+0x156>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0xd0>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80fa 	bhi.w	8000604 <__udivmoddi4+0x2c4>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0303 	sbc.w	r3, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	4698      	mov	r8, r3
 800041a:	2e00      	cmp	r6, #0
 800041c:	d0e0      	beq.n	80003e0 <__udivmoddi4+0xa0>
 800041e:	e9c6 4800 	strd	r4, r8, [r6]
 8000422:	e7dd      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000424:	b902      	cbnz	r2, 8000428 <__udivmoddi4+0xe8>
 8000426:	deff      	udf	#255	; 0xff
 8000428:	fab2 f282 	clz	r2, r2
 800042c:	2a00      	cmp	r2, #0
 800042e:	f040 808f 	bne.w	8000550 <__udivmoddi4+0x210>
 8000432:	1b49      	subs	r1, r1, r5
 8000434:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000438:	fa1f f885 	uxth.w	r8, r5
 800043c:	2701      	movs	r7, #1
 800043e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fb0e 111c 	mls	r1, lr, ip, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb08 f10c 	mul.w	r1, r8, ip
 8000450:	4299      	cmp	r1, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x124>
 8000454:	18eb      	adds	r3, r5, r3
 8000456:	f10c 30ff 	add.w	r0, ip, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4299      	cmp	r1, r3
 800045e:	f200 80cd 	bhi.w	80005fc <__udivmoddi4+0x2bc>
 8000462:	4684      	mov	ip, r0
 8000464:	1a59      	subs	r1, r3, r1
 8000466:	b2a3      	uxth	r3, r4
 8000468:	fbb1 f0fe 	udiv	r0, r1, lr
 800046c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000470:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000474:	fb08 f800 	mul.w	r8, r8, r0
 8000478:	45a0      	cmp	r8, r4
 800047a:	d907      	bls.n	800048c <__udivmoddi4+0x14c>
 800047c:	192c      	adds	r4, r5, r4
 800047e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x14a>
 8000484:	45a0      	cmp	r8, r4
 8000486:	f200 80b6 	bhi.w	80005f6 <__udivmoddi4+0x2b6>
 800048a:	4618      	mov	r0, r3
 800048c:	eba4 0408 	sub.w	r4, r4, r8
 8000490:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000494:	e79f      	b.n	80003d6 <__udivmoddi4+0x96>
 8000496:	f1c7 0c20 	rsb	ip, r7, #32
 800049a:	40bb      	lsls	r3, r7
 800049c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80004a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80004a4:	fa01 f407 	lsl.w	r4, r1, r7
 80004a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80004ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80004b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80004b4:	4325      	orrs	r5, r4
 80004b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80004ba:	0c2c      	lsrs	r4, r5, #16
 80004bc:	fb08 3319 	mls	r3, r8, r9, r3
 80004c0:	fa1f fa8e 	uxth.w	sl, lr
 80004c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004c8:	fb09 f40a 	mul.w	r4, r9, sl
 80004cc:	429c      	cmp	r4, r3
 80004ce:	fa02 f207 	lsl.w	r2, r2, r7
 80004d2:	fa00 f107 	lsl.w	r1, r0, r7
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1e 0303 	adds.w	r3, lr, r3
 80004dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e0:	f080 8087 	bcs.w	80005f2 <__udivmoddi4+0x2b2>
 80004e4:	429c      	cmp	r4, r3
 80004e6:	f240 8084 	bls.w	80005f2 <__udivmoddi4+0x2b2>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4473      	add	r3, lr
 80004f0:	1b1b      	subs	r3, r3, r4
 80004f2:	b2ad      	uxth	r5, r5
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3310 	mls	r3, r8, r0, r3
 80004fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000500:	fb00 fa0a 	mul.w	sl, r0, sl
 8000504:	45a2      	cmp	sl, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1e 0404 	adds.w	r4, lr, r4
 800050c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000510:	d26b      	bcs.n	80005ea <__udivmoddi4+0x2aa>
 8000512:	45a2      	cmp	sl, r4
 8000514:	d969      	bls.n	80005ea <__udivmoddi4+0x2aa>
 8000516:	3802      	subs	r0, #2
 8000518:	4474      	add	r4, lr
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	fba0 8902 	umull	r8, r9, r0, r2
 8000522:	eba4 040a 	sub.w	r4, r4, sl
 8000526:	454c      	cmp	r4, r9
 8000528:	46c2      	mov	sl, r8
 800052a:	464b      	mov	r3, r9
 800052c:	d354      	bcc.n	80005d8 <__udivmoddi4+0x298>
 800052e:	d051      	beq.n	80005d4 <__udivmoddi4+0x294>
 8000530:	2e00      	cmp	r6, #0
 8000532:	d069      	beq.n	8000608 <__udivmoddi4+0x2c8>
 8000534:	ebb1 050a 	subs.w	r5, r1, sl
 8000538:	eb64 0403 	sbc.w	r4, r4, r3
 800053c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000540:	40fd      	lsrs	r5, r7
 8000542:	40fc      	lsrs	r4, r7
 8000544:	ea4c 0505 	orr.w	r5, ip, r5
 8000548:	e9c6 5400 	strd	r5, r4, [r6]
 800054c:	2700      	movs	r7, #0
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0xa0>
 8000550:	f1c2 0320 	rsb	r3, r2, #32
 8000554:	fa20 f703 	lsr.w	r7, r0, r3
 8000558:	4095      	lsls	r5, r2
 800055a:	fa01 f002 	lsl.w	r0, r1, r2
 800055e:	fa21 f303 	lsr.w	r3, r1, r3
 8000562:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000566:	4338      	orrs	r0, r7
 8000568:	0c01      	lsrs	r1, r0, #16
 800056a:	fbb3 f7fe 	udiv	r7, r3, lr
 800056e:	fa1f f885 	uxth.w	r8, r5
 8000572:	fb0e 3317 	mls	r3, lr, r7, r3
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb07 f308 	mul.w	r3, r7, r8
 800057e:	428b      	cmp	r3, r1
 8000580:	fa04 f402 	lsl.w	r4, r4, r2
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x256>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f107 3cff 	add.w	ip, r7, #4294967295
 800058c:	d22f      	bcs.n	80005ee <__udivmoddi4+0x2ae>
 800058e:	428b      	cmp	r3, r1
 8000590:	d92d      	bls.n	80005ee <__udivmoddi4+0x2ae>
 8000592:	3f02      	subs	r7, #2
 8000594:	4429      	add	r1, r5
 8000596:	1acb      	subs	r3, r1, r3
 8000598:	b281      	uxth	r1, r0
 800059a:	fbb3 f0fe 	udiv	r0, r3, lr
 800059e:	fb0e 3310 	mls	r3, lr, r0, r3
 80005a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005a6:	fb00 f308 	mul.w	r3, r0, r8
 80005aa:	428b      	cmp	r3, r1
 80005ac:	d907      	bls.n	80005be <__udivmoddi4+0x27e>
 80005ae:	1869      	adds	r1, r5, r1
 80005b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80005b4:	d217      	bcs.n	80005e6 <__udivmoddi4+0x2a6>
 80005b6:	428b      	cmp	r3, r1
 80005b8:	d915      	bls.n	80005e6 <__udivmoddi4+0x2a6>
 80005ba:	3802      	subs	r0, #2
 80005bc:	4429      	add	r1, r5
 80005be:	1ac9      	subs	r1, r1, r3
 80005c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005c4:	e73b      	b.n	800043e <__udivmoddi4+0xfe>
 80005c6:	4637      	mov	r7, r6
 80005c8:	4630      	mov	r0, r6
 80005ca:	e709      	b.n	80003e0 <__udivmoddi4+0xa0>
 80005cc:	4607      	mov	r7, r0
 80005ce:	e6e7      	b.n	80003a0 <__udivmoddi4+0x60>
 80005d0:	4618      	mov	r0, r3
 80005d2:	e6fb      	b.n	80003cc <__udivmoddi4+0x8c>
 80005d4:	4541      	cmp	r1, r8
 80005d6:	d2ab      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005dc:	eb69 020e 	sbc.w	r2, r9, lr
 80005e0:	3801      	subs	r0, #1
 80005e2:	4613      	mov	r3, r2
 80005e4:	e7a4      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e6:	4660      	mov	r0, ip
 80005e8:	e7e9      	b.n	80005be <__udivmoddi4+0x27e>
 80005ea:	4618      	mov	r0, r3
 80005ec:	e795      	b.n	800051a <__udivmoddi4+0x1da>
 80005ee:	4667      	mov	r7, ip
 80005f0:	e7d1      	b.n	8000596 <__udivmoddi4+0x256>
 80005f2:	4681      	mov	r9, r0
 80005f4:	e77c      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f6:	3802      	subs	r0, #2
 80005f8:	442c      	add	r4, r5
 80005fa:	e747      	b.n	800048c <__udivmoddi4+0x14c>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	442b      	add	r3, r5
 8000602:	e72f      	b.n	8000464 <__udivmoddi4+0x124>
 8000604:	4638      	mov	r0, r7
 8000606:	e708      	b.n	800041a <__udivmoddi4+0xda>
 8000608:	4637      	mov	r7, r6
 800060a:	e6e9      	b.n	80003e0 <__udivmoddi4+0xa0>

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <parseText>:
 */
#include "stm32f7xx_hal.h"
#include "config.h"
#include "communication.h"

int parseText(UART_HandleTypeDef huart) {
 8000610:	b084      	sub	sp, #16
 8000612:	b5b0      	push	{r4, r5, r7, lr}
 8000614:	b0a6      	sub	sp, #152	; 0x98
 8000616:	af00      	add	r7, sp, #0
 8000618:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 800061c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//-------------------------------------------------------------------------------------
	//check if there is character "<" and ">"
	//-------------------------------------------------------------------------------------
	state.newDataInBuffer = 0;
 8000620:	4bce      	ldr	r3, [pc, #824]	; (800095c <parseText+0x34c>)
 8000622:	2200      	movs	r2, #0
 8000624:	759a      	strb	r2, [r3, #22]

	uint8_t i, indexOfHead, indexOfTail, tailCount = 0, headCount = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
 800062c:	2300      	movs	r3, #0
 800062e:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
	char msg_buffers[80];
	char receivedCommand[50];

	for (i = 0; i < strlen(receivedCommand); i++) {
 8000632:	2300      	movs	r3, #0
 8000634:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000638:	e00c      	b.n	8000654 <parseText+0x44>
		receivedCommand[i] = '\0';
 800063a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800063e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000642:	4413      	add	r3, r2
 8000644:	2200      	movs	r2, #0
 8000646:	f803 2c98 	strb.w	r2, [r3, #-152]
	for (i = 0; i < strlen(receivedCommand); i++) {
 800064a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800064e:	3301      	adds	r3, #1
 8000650:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000654:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 8000658:	463b      	mov	r3, r7
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fdfa 	bl	8000254 <strlen>
 8000660:	4603      	mov	r3, r0
 8000662:	429c      	cmp	r4, r3
 8000664:	d3e9      	bcc.n	800063a <parseText+0x2a>
	}
	for (i = 0; i < strlen(msg_buffers); i++) {
 8000666:	2300      	movs	r3, #0
 8000668:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800066c:	e00c      	b.n	8000688 <parseText+0x78>
		msg_buffers[i] = '\0';
 800066e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000672:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000676:	4413      	add	r3, r2
 8000678:	2200      	movs	r2, #0
 800067a:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (i = 0; i < strlen(msg_buffers); i++) {
 800067e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000682:	3301      	adds	r3, #1
 8000684:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000688:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 800068c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000690:	4618      	mov	r0, r3
 8000692:	f7ff fddf 	bl	8000254 <strlen>
 8000696:	4603      	mov	r3, r0
 8000698:	429c      	cmp	r4, r3
 800069a:	d3e8      	bcc.n	800066e <parseText+0x5e>
	}
	for (i = 0; i < strlen(receivedChars); i++) {
 800069c:	2300      	movs	r3, #0
 800069e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80006a2:	e023      	b.n	80006ec <parseText+0xdc>
		//head of the message
		if (receivedChars[i] == '<') {
 80006a4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006a8:	4aad      	ldr	r2, [pc, #692]	; (8000960 <parseText+0x350>)
 80006aa:	5cd3      	ldrb	r3, [r2, r3]
 80006ac:	2b3c      	cmp	r3, #60	; 0x3c
 80006ae:	d109      	bne.n	80006c4 <parseText+0xb4>
			indexOfHead = i;
 80006b0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006b4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
			headCount++;
 80006b8:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 80006bc:	3301      	adds	r3, #1
 80006be:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
 80006c2:	e00e      	b.n	80006e2 <parseText+0xd2>
		}
		//tail of the message
		else if (receivedChars[i] == '>') {
 80006c4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006c8:	4aa5      	ldr	r2, [pc, #660]	; (8000960 <parseText+0x350>)
 80006ca:	5cd3      	ldrb	r3, [r2, r3]
 80006cc:	2b3e      	cmp	r3, #62	; 0x3e
 80006ce:	d108      	bne.n	80006e2 <parseText+0xd2>
			indexOfTail = i;
 80006d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006d4:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
			tailCount++;
 80006d8:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80006dc:	3301      	adds	r3, #1
 80006de:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
	for (i = 0; i < strlen(receivedChars); i++) {
 80006e2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006e6:	3301      	adds	r3, #1
 80006e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80006ec:	f897 4097 	ldrb.w	r4, [r7, #151]	; 0x97
 80006f0:	489b      	ldr	r0, [pc, #620]	; (8000960 <parseText+0x350>)
 80006f2:	f7ff fdaf 	bl	8000254 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	429c      	cmp	r4, r3
 80006fa:	d3d3      	bcc.n	80006a4 <parseText+0x94>
		}
	}
	//received message is not complete
	if (headCount > tailCount) {
 80006fc:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8000700:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000704:	429a      	cmp	r2, r3
 8000706:	d901      	bls.n	800070c <parseText+0xfc>
		return 0;
 8000708:	2300      	movs	r3, #0
 800070a:	e1d4      	b.n	8000ab6 <parseText+0x4a6>
	}
	// received message is complete ->
	else if (headCount == tailCount && headCount > 0 && tailCount > 0) {
 800070c:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 8000710:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000714:	429a      	cmp	r2, r3
 8000716:	d15d      	bne.n	80007d4 <parseText+0x1c4>
 8000718:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 800071c:	2b00      	cmp	r3, #0
 800071e:	d059      	beq.n	80007d4 <parseText+0x1c4>
 8000720:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8000724:	2b00      	cmp	r3, #0
 8000726:	d055      	beq.n	80007d4 <parseText+0x1c4>
		sprintf(msg_buffers, "<INFO:Message accepted>\n");
 8000728:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800072c:	4a8d      	ldr	r2, [pc, #564]	; (8000964 <parseText+0x354>)
 800072e:	461c      	mov	r4, r3
 8000730:	4615      	mov	r5, r2
 8000732:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000736:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073a:	c403      	stmia	r4!, {r0, r1}
 800073c:	7022      	strb	r2, [r4, #0]
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 800073e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000742:	4618      	mov	r0, r3
 8000744:	f7ff fd86 	bl	8000254 <strlen>
 8000748:	4603      	mov	r3, r0
 800074a:	b29a      	uxth	r2, r3
 800074c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 8000758:	f008 fa1e 	bl	8008b98 <HAL_UART_Transmit>
	else if (headCount == tailCount && headCount > 0 && tailCount > 0) {
 800075c:	bf00      	nop
	}

	//-------------------------------------------------------------------------------------
	// get string between special chars (Only if specialCharCount == 2)
	//-------------------------------------------------------------------------------------
	strncpy(receivedCommand, receivedChars + indexOfHead + 1, indexOfTail - indexOfHead - 1);
 800075e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000762:	3301      	adds	r3, #1
 8000764:	4a7e      	ldr	r2, [pc, #504]	; (8000960 <parseText+0x350>)
 8000766:	1899      	adds	r1, r3, r2
 8000768:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 800076c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	3b01      	subs	r3, #1
 8000774:	461a      	mov	r2, r3
 8000776:	463b      	mov	r3, r7
 8000778:	4618      	mov	r0, r3
 800077a:	f009 fa09 	bl	8009b90 <strncpy>
	receivedCommand[indexOfTail - indexOfHead - 1] = '\0';
 800077e:	f897 2095 	ldrb.w	r2, [r7, #149]	; 0x95
 8000782:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	3b01      	subs	r3, #1
 800078a:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800078e:	4413      	add	r3, r2
 8000790:	2200      	movs	r2, #0
 8000792:	f803 2c98 	strb.w	r2, [r3, #-152]

	char *command = strtok(receivedCommand, ":");
 8000796:	463b      	mov	r3, r7
 8000798:	4973      	ldr	r1, [pc, #460]	; (8000968 <parseText+0x358>)
 800079a:	4618      	mov	r0, r3
 800079c:	f009 fa0e 	bl	8009bbc <strtok>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	char *method = strtok(NULL, ":");
 80007a6:	4970      	ldr	r1, [pc, #448]	; (8000968 <parseText+0x358>)
 80007a8:	2000      	movs	r0, #0
 80007aa:	f009 fa07 	bl	8009bbc <strtok>
 80007ae:	4603      	mov	r3, r0
 80007b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	char *count = strtok(NULL, ":");
 80007b4:	496c      	ldr	r1, [pc, #432]	; (8000968 <parseText+0x358>)
 80007b6:	2000      	movs	r0, #0
 80007b8:	f009 fa00 	bl	8009bbc <strtok>
 80007bc:	4603      	mov	r3, r0
 80007be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	//-------------------------------------------------------------------------------------
	// Perform action based on received message
	//-------------------------------------------------------------------------------------

	//<IDN> - identification
	if (strcmp(command, "IDN") == 0) {
 80007c2:	496a      	ldr	r1, [pc, #424]	; (800096c <parseText+0x35c>)
 80007c4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80007c8:	f7ff fd3a 	bl	8000240 <strcmp>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d12d      	bne.n	800082e <parseText+0x21e>
 80007d2:	e00b      	b.n	80007ec <parseText+0x1dc>
	else if ((headCount < tailCount)) {
 80007d4:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 80007d8:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80007dc:	429a      	cmp	r2, r3
 80007de:	d203      	bcs.n	80007e8 <parseText+0x1d8>
		clearReceivedCharsBuffer(); // receivedChars needs to be cleared
 80007e0:	f000 fb4c 	bl	8000e7c <clearReceivedCharsBuffer>
		return 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	e166      	b.n	8000ab6 <parseText+0x4a6>
		return 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	e164      	b.n	8000ab6 <parseText+0x4a6>
		sprintf(msg_buffers, "<INFO:This is proton precession magnetometer - version 1>\n");
 80007ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007f0:	4a5f      	ldr	r2, [pc, #380]	; (8000970 <parseText+0x360>)
 80007f2:	461c      	mov	r4, r3
 80007f4:	4615      	mov	r5, r2
 80007f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000802:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000806:	c403      	stmia	r4!, {r0, r1}
 8000808:	8022      	strh	r2, [r4, #0]
 800080a:	3402      	adds	r4, #2
 800080c:	0c13      	lsrs	r3, r2, #16
 800080e:	7023      	strb	r3, [r4, #0]
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000810:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff fd1d 	bl	8000254 <strlen>
 800081a:	4603      	mov	r3, r0
 800081c:	b29a      	uxth	r2, r3
 800081e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000822:	f04f 33ff 	mov.w	r3, #4294967295
 8000826:	f107 00a8 	add.w	r0, r7, #168	; 0xa8
 800082a:	f008 f9b5 	bl	8008b98 <HAL_UART_Transmit>
	}

	//<IDLE> - initialization state
	if (strcmp(command, "IDLE") == 0) {
 800082e:	4951      	ldr	r1, [pc, #324]	; (8000974 <parseText+0x364>)
 8000830:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000834:	f7ff fd04 	bl	8000240 <strcmp>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <parseText+0x232>
		setStateToIdle();
 800083e:	f001 ff21 	bl	8002684 <setStateToIdle>
	}
	//<DEFAULT> - initialization state
	if (strcmp(command, "DEFAULT") == 0) {
 8000842:	494d      	ldr	r1, [pc, #308]	; (8000978 <parseText+0x368>)
 8000844:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000848:	f7ff fcfa 	bl	8000240 <strcmp>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d101      	bne.n	8000856 <parseText+0x246>
		setStateToDefault();
 8000852:	f001 fe75 	bl	8002540 <setStateToDefault>
	}
	//<SET:parameter:value>
	if (strcmp(command, "SET") == 0) {
 8000856:	4949      	ldr	r1, [pc, #292]	; (800097c <parseText+0x36c>)
 8000858:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800085c:	f7ff fcf0 	bl	8000240 <strcmp>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d105      	bne.n	8000872 <parseText+0x262>
		//polarization time
		if (strcmp(method, "polT") == 0) {
 8000866:	4946      	ldr	r1, [pc, #280]	; (8000980 <parseText+0x370>)
 8000868:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800086c:	f7ff fce8 	bl	8000240 <strcmp>
 8000870:	e11f      	b.n	8000ab2 <parseText+0x4a2>
			//convert received string to integer
			//polarizationTime = atoi(count);
		}
	}
	//<MEAS:method:count>
	else if (strcmp(command, "MEAS") == 0) {
 8000872:	4944      	ldr	r1, [pc, #272]	; (8000984 <parseText+0x374>)
 8000874:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8000878:	f7ff fce2 	bl	8000240 <strcmp>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	f040 8117 	bne.w	8000ab2 <parseText+0x4a2>
		//external ADC only
		if (strcmp(method, "extADC") == 0) {
 8000884:	4940      	ldr	r1, [pc, #256]	; (8000988 <parseText+0x378>)
 8000886:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800088a:	f7ff fcd9 	bl	8000240 <strcmp>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d110      	bne.n	80008b6 <parseText+0x2a6>
			state.extAdcSetState = 1;
 8000894:	4b31      	ldr	r3, [pc, #196]	; (800095c <parseText+0x34c>)
 8000896:	2201      	movs	r2, #1
 8000898:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 0;
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <parseText+0x34c>)
 800089c:	2200      	movs	r2, #0
 800089e:	72da      	strb	r2, [r3, #11]
			state.compSetState = 0;
 80008a0:	4b2e      	ldr	r3, [pc, #184]	; (800095c <parseText+0x34c>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <parseText+0x34c>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 80008ac:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80008b0:	f001 fdbc 	bl	800242c <setMeasurementPeriod>
 80008b4:	e0d4      	b.n	8000a60 <parseText+0x450>
		}
		//internal ADC only
		else if (strcmp(method, "intADC") == 0) {
 80008b6:	4935      	ldr	r1, [pc, #212]	; (800098c <parseText+0x37c>)
 80008b8:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80008bc:	f7ff fcc0 	bl	8000240 <strcmp>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d110      	bne.n	80008e8 <parseText+0x2d8>
			state.extAdcSetState = 0;
 80008c6:	4b25      	ldr	r3, [pc, #148]	; (800095c <parseText+0x34c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 80008cc:	4b23      	ldr	r3, [pc, #140]	; (800095c <parseText+0x34c>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	72da      	strb	r2, [r3, #11]
			state.compSetState = 0;
 80008d2:	4b22      	ldr	r3, [pc, #136]	; (800095c <parseText+0x34c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <parseText+0x34c>)
 80008da:	2201      	movs	r2, #1
 80008dc:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 80008de:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80008e2:	f001 fda3 	bl	800242c <setMeasurementPeriod>
 80008e6:	e0bb      	b.n	8000a60 <parseText+0x450>
		}
		//comparator only
		else if (strcmp(method, "comp") == 0) {
 80008e8:	4929      	ldr	r1, [pc, #164]	; (8000990 <parseText+0x380>)
 80008ea:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80008ee:	f7ff fca7 	bl	8000240 <strcmp>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d110      	bne.n	800091a <parseText+0x30a>
			state.extAdcSetState = 0;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <parseText+0x34c>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 0;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <parseText+0x34c>)
 8000900:	2200      	movs	r2, #0
 8000902:	72da      	strb	r2, [r3, #11]
			state.compSetState = 1;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <parseText+0x34c>)
 8000906:	2201      	movs	r2, #1
 8000908:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <parseText+0x34c>)
 800090c:	2201      	movs	r2, #1
 800090e:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(5000);
 8000910:	f241 3088 	movw	r0, #5000	; 0x1388
 8000914:	f001 fd8a 	bl	800242c <setMeasurementPeriod>
 8000918:	e0a2      	b.n	8000a60 <parseText+0x450>
		}
		//external ADC + internal ADC
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 800091a:	491e      	ldr	r1, [pc, #120]	; (8000994 <parseText+0x384>)
 800091c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000920:	f7ff fc8e 	bl	8000240 <strcmp>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d007      	beq.n	800093a <parseText+0x32a>
 800092a:	491b      	ldr	r1, [pc, #108]	; (8000998 <parseText+0x388>)
 800092c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000930:	f7ff fc86 	bl	8000240 <strcmp>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d130      	bne.n	800099c <parseText+0x38c>
			state.extAdcSetState = 1;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <parseText+0x34c>)
 800093c:	2201      	movs	r2, #1
 800093e:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <parseText+0x34c>)
 8000942:	2201      	movs	r2, #1
 8000944:	72da      	strb	r2, [r3, #11]
			state.compSetState = 0;
 8000946:	4b05      	ldr	r3, [pc, #20]	; (800095c <parseText+0x34c>)
 8000948:	2200      	movs	r2, #0
 800094a:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <parseText+0x34c>)
 800094e:	2201      	movs	r2, #1
 8000950:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(13000);
 8000952:	f243 20c8 	movw	r0, #13000	; 0x32c8
 8000956:	f001 fd69 	bl	800242c <setMeasurementPeriod>
		else if ((strcmp(method, "extADC+intADC")) == 0 || (strcmp(method, "intADC+extADC")) == 0) {
 800095a:	e081      	b.n	8000a60 <parseText+0x450>
 800095c:	2002f1a8 	.word	0x2002f1a8
 8000960:	2002f1cc 	.word	0x2002f1cc
 8000964:	0800a5ac 	.word	0x0800a5ac
 8000968:	0800a5c8 	.word	0x0800a5c8
 800096c:	0800a5cc 	.word	0x0800a5cc
 8000970:	0800a5d0 	.word	0x0800a5d0
 8000974:	0800a60c 	.word	0x0800a60c
 8000978:	0800a614 	.word	0x0800a614
 800097c:	0800a61c 	.word	0x0800a61c
 8000980:	0800a620 	.word	0x0800a620
 8000984:	0800a628 	.word	0x0800a628
 8000988:	0800a630 	.word	0x0800a630
 800098c:	0800a638 	.word	0x0800a638
 8000990:	0800a640 	.word	0x0800a640
 8000994:	0800a648 	.word	0x0800a648
 8000998:	0800a658 	.word	0x0800a658
		}
		//external ADC + comparator
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 800099c:	4949      	ldr	r1, [pc, #292]	; (8000ac4 <parseText+0x4b4>)
 800099e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80009a2:	f7ff fc4d 	bl	8000240 <strcmp>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d007      	beq.n	80009bc <parseText+0x3ac>
 80009ac:	4946      	ldr	r1, [pc, #280]	; (8000ac8 <parseText+0x4b8>)
 80009ae:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80009b2:	f7ff fc45 	bl	8000240 <strcmp>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d110      	bne.n	80009de <parseText+0x3ce>
			state.extAdcSetState = 1;
 80009bc:	4b43      	ldr	r3, [pc, #268]	; (8000acc <parseText+0x4bc>)
 80009be:	2201      	movs	r2, #1
 80009c0:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 0;
 80009c2:	4b42      	ldr	r3, [pc, #264]	; (8000acc <parseText+0x4bc>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	72da      	strb	r2, [r3, #11]
			state.compSetState = 1;
 80009c8:	4b40      	ldr	r3, [pc, #256]	; (8000acc <parseText+0x4bc>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 80009ce:	4b3f      	ldr	r3, [pc, #252]	; (8000acc <parseText+0x4bc>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 80009d4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80009d8:	f001 fd28 	bl	800242c <setMeasurementPeriod>
		else if ((strcmp(method, "extADC+comp") == 0) || (strcmp(method, "comp+extADC") == 0)) {
 80009dc:	e040      	b.n	8000a60 <parseText+0x450>
		}
		//internal ADC + comparator
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 80009de:	493c      	ldr	r1, [pc, #240]	; (8000ad0 <parseText+0x4c0>)
 80009e0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80009e4:	f7ff fc2c 	bl	8000240 <strcmp>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d007      	beq.n	80009fe <parseText+0x3ee>
 80009ee:	4939      	ldr	r1, [pc, #228]	; (8000ad4 <parseText+0x4c4>)
 80009f0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80009f4:	f7ff fc24 	bl	8000240 <strcmp>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d110      	bne.n	8000a20 <parseText+0x410>
			state.extAdcSetState = 0;
 80009fe:	4b33      	ldr	r3, [pc, #204]	; (8000acc <parseText+0x4bc>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 8000a04:	4b31      	ldr	r3, [pc, #196]	; (8000acc <parseText+0x4bc>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	72da      	strb	r2, [r3, #11]
			state.compSetState = 1;
 8000a0a:	4b30      	ldr	r3, [pc, #192]	; (8000acc <parseText+0x4bc>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	731a      	strb	r2, [r3, #12]
			state.measureTechniqueUpdated = 1;
 8000a10:	4b2e      	ldr	r3, [pc, #184]	; (8000acc <parseText+0x4bc>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(8000);
 8000a16:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8000a1a:	f001 fd07 	bl	800242c <setMeasurementPeriod>
		else if ((strcmp(method, "intADC+comp") == 0) || (strcmp(method, "comp+intADC")) == 0) {
 8000a1e:	e01f      	b.n	8000a60 <parseText+0x450>
		}
		//external ADC + internal ADC + comparator
		else if ((strcmp(method, "extADC+intADC+comp") == 0) || (strcmp(method, "intADC+extADC+comp") == 0)) {
 8000a20:	492d      	ldr	r1, [pc, #180]	; (8000ad8 <parseText+0x4c8>)
 8000a22:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000a26:	f7ff fc0b 	bl	8000240 <strcmp>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d007      	beq.n	8000a40 <parseText+0x430>
 8000a30:	492a      	ldr	r1, [pc, #168]	; (8000adc <parseText+0x4cc>)
 8000a32:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000a36:	f7ff fc03 	bl	8000240 <strcmp>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10f      	bne.n	8000a60 <parseText+0x450>
			state.compSetState = 1;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <parseText+0x4bc>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	731a      	strb	r2, [r3, #12]
			state.extAdcSetState = 1;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <parseText+0x4bc>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	729a      	strb	r2, [r3, #10]
			state.intAdcSetState = 1;
 8000a4c:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <parseText+0x4bc>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	72da      	strb	r2, [r3, #11]
			state.measureTechniqueUpdated = 1;
 8000a52:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <parseText+0x4bc>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	75da      	strb	r2, [r3, #23]
			setMeasurementPeriod(13000);
 8000a58:	f243 20c8 	movw	r0, #13000	; 0x32c8
 8000a5c:	f001 fce6 	bl	800242c <setMeasurementPeriod>
		} else /* default: */
		{

		}
		if (strcmp(count, "INF") == 0) {
 8000a60:	491f      	ldr	r1, [pc, #124]	; (8000ae0 <parseText+0x4d0>)
 8000a62:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000a66:	f7ff fbeb 	bl	8000240 <strcmp>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d104      	bne.n	8000a7a <parseText+0x46a>
			state.setMeasurements = -1;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <parseText+0x4bc>)
 8000a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a76:	821a      	strh	r2, [r3, #16]
 8000a78:	e01b      	b.n	8000ab2 <parseText+0x4a2>
		} else if (strcmp(count, "") == 0) {
 8000a7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d103      	bne.n	8000a8c <parseText+0x47c>
			state.setMeasurements = 1;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <parseText+0x4bc>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	821a      	strh	r2, [r3, #16]
 8000a8a:	e012      	b.n	8000ab2 <parseText+0x4a2>
		} else if (strcmp(count, "onSync") == 0) {
 8000a8c:	4915      	ldr	r1, [pc, #84]	; (8000ae4 <parseText+0x4d4>)
 8000a8e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000a92:	f7ff fbd5 	bl	8000240 <strcmp>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d102      	bne.n	8000aa2 <parseText+0x492>
			setStateToMeasureOnSync();
 8000a9c:	f001 fd98 	bl	80025d0 <setStateToMeasureOnSync>
 8000aa0:	e007      	b.n	8000ab2 <parseText+0x4a2>
		}

		else {
			state.setMeasurements = atoi(count);
 8000aa2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8000aa6:	f009 f810 	bl	8009aca <atoi>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <parseText+0x4bc>)
 8000ab0:	821a      	strh	r2, [r3, #16]
	}
	/* more else if clauses */
	else /* default: */
	{
	}
	clearReceivedCharsBuffer();
 8000ab2:	f000 f9e3 	bl	8000e7c <clearReceivedCharsBuffer>
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3798      	adds	r7, #152	; 0x98
 8000aba:	46bd      	mov	sp, r7
 8000abc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr
 8000ac4:	0800a668 	.word	0x0800a668
 8000ac8:	0800a674 	.word	0x0800a674
 8000acc:	2002f1a8 	.word	0x2002f1a8
 8000ad0:	0800a680 	.word	0x0800a680
 8000ad4:	0800a68c 	.word	0x0800a68c
 8000ad8:	0800a698 	.word	0x0800a698
 8000adc:	0800a6ac 	.word	0x0800a6ac
 8000ae0:	0800a6c0 	.word	0x0800a6c0
 8000ae4:	0800a6c4 	.word	0x0800a6c4

08000ae8 <sendMeasuredData>:


void sendMeasuredData(UART_HandleTypeDef huart) {
 8000ae8:	b084      	sub	sp, #16
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b094      	sub	sp, #80	; 0x50
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	f107 0c58 	add.w	ip, r7, #88	; 0x58
 8000af4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	char msg_freq[16];
	char msg_buffers[50];
	uint16_t adc = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
	int i = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c
	if ((state.extAdcReadyToSend == 1)) {
 8000b02:	4bab      	ldr	r3, [pc, #684]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000b04:	785b      	ldrb	r3, [r3, #1]
 8000b06:	2b01      	cmp	r3, #1
 8000b08:	d175      	bne.n	8000bf6 <sendMeasuredData+0x10e>
		sprintf(msg_buffers, "<MEAS:%u:extADC:\n", state.index);
 8000b0a:	4ba9      	ldr	r3, [pc, #676]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000b0c:	69da      	ldr	r2, [r3, #28]
 8000b0e:	463b      	mov	r3, r7
 8000b10:	49a8      	ldr	r1, [pc, #672]	; (8000db4 <sendMeasuredData+0x2cc>)
 8000b12:	4618      	mov	r0, r3
 8000b14:	f009 f81c 	bl	8009b50 <siprintf>
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000b18:	463b      	mov	r3, r7
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fb9a 	bl	8000254 <strlen>
 8000b20:	4603      	mov	r3, r0
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	4639      	mov	r1, r7
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000b2e:	f008 f833 	bl	8008b98 <HAL_UART_Transmit>

		// first buffer

		for (i = 0; i < samplesPerPeriod; i++) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b36:	e01c      	b.n	8000b72 <sendMeasuredData+0x8a>
			adc = (buffer_extAdc_1.uint16[i]);
 8000b38:	4a9f      	ldr	r2, [pc, #636]	; (8000db8 <sendMeasuredData+0x2d0>)
 8000b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b40:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8000b44:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000b48:	463b      	mov	r3, r7
 8000b4a:	499c      	ldr	r1, [pc, #624]	; (8000dbc <sendMeasuredData+0x2d4>)
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 ffff 	bl	8009b50 <siprintf>
			HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000b52:	463b      	mov	r3, r7
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fb7d 	bl	8000254 <strlen>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	4639      	mov	r1, r7
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000b68:	f008 f816 	bl	8008b98 <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8000b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b6e:	3301      	adds	r3, #1
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b74:	f64a 4243 	movw	r2, #44099	; 0xac43
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	dddd      	ble.n	8000b38 <sendMeasuredData+0x50>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b80:	e01c      	b.n	8000bbc <sendMeasuredData+0xd4>
			adc = (buffer_extAdc_2.uint16[i]);
 8000b82:	4a8f      	ldr	r2, [pc, #572]	; (8000dc0 <sendMeasuredData+0x2d8>)
 8000b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b8a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8000b8e:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000b92:	463b      	mov	r3, r7
 8000b94:	4989      	ldr	r1, [pc, #548]	; (8000dbc <sendMeasuredData+0x2d4>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f008 ffda 	bl	8009b50 <siprintf>
			HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f7ff fb58 	bl	8000254 <strlen>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	4639      	mov	r1, r7
 8000baa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bae:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000bb2:	f007 fff1 	bl	8008b98 <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8000bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bb8:	3301      	adds	r3, #1
 8000bba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bbe:	f64a 4243 	movw	r2, #44099	; 0xac43
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	dddd      	ble.n	8000b82 <sendMeasuredData+0x9a>
		}
		sprintf(msg_buffers, ">\n");
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4a7e      	ldr	r2, [pc, #504]	; (8000dc4 <sendMeasuredData+0x2dc>)
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	4611      	mov	r1, r2
 8000bce:	8019      	strh	r1, [r3, #0]
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	0c12      	lsrs	r2, r2, #16
 8000bd4:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fb3b 	bl	8000254 <strlen>
 8000bde:	4603      	mov	r3, r0
 8000be0:	b29a      	uxth	r2, r3
 8000be2:	4639      	mov	r1, r7
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000bec:	f007 ffd4 	bl	8008b98 <HAL_UART_Transmit>
		state.extAdcReadyToSend = 0;
 8000bf0:	4b6f      	ldr	r3, [pc, #444]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	705a      	strb	r2, [r3, #1]
	}

	if ((state.intAdcReadyToSend == 1)) {
 8000bf6:	4b6e      	ldr	r3, [pc, #440]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000bf8:	789b      	ldrb	r3, [r3, #2]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d175      	bne.n	8000cea <sendMeasuredData+0x202>
		sprintf(msg_buffers, "<MEAS:%u:intADC:\n", state.index);
 8000bfe:	4b6c      	ldr	r3, [pc, #432]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000c00:	69da      	ldr	r2, [r3, #28]
 8000c02:	463b      	mov	r3, r7
 8000c04:	4970      	ldr	r1, [pc, #448]	; (8000dc8 <sendMeasuredData+0x2e0>)
 8000c06:	4618      	mov	r0, r3
 8000c08:	f008 ffa2 	bl	8009b50 <siprintf>
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f7ff fb20 	bl	8000254 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	4639      	mov	r1, r7
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000c22:	f007 ffb9 	bl	8008b98 <HAL_UART_Transmit>
		// first buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8000c26:	2300      	movs	r3, #0
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c2a:	e01c      	b.n	8000c66 <sendMeasuredData+0x17e>
			adc = (buffer_intAdc_1.uint16[i]);
 8000c2c:	4a67      	ldr	r2, [pc, #412]	; (8000dcc <sendMeasuredData+0x2e4>)
 8000c2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8000c38:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000c3c:	463b      	mov	r3, r7
 8000c3e:	495f      	ldr	r1, [pc, #380]	; (8000dbc <sendMeasuredData+0x2d4>)
 8000c40:	4618      	mov	r0, r3
 8000c42:	f008 ff85 	bl	8009b50 <siprintf>
			HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000c46:	463b      	mov	r3, r7
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fb03 	bl	8000254 <strlen>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	4639      	mov	r1, r7
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000c5c:	f007 ff9c 	bl	8008b98 <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8000c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c62:	3301      	adds	r3, #1
 8000c64:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c68:	f64a 4243 	movw	r2, #44099	; 0xac43
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	dddd      	ble.n	8000c2c <sendMeasuredData+0x144>
		}
		//second buffer
		for (i = 0; i < samplesPerPeriod; i++) {
 8000c70:	2300      	movs	r3, #0
 8000c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c74:	e01c      	b.n	8000cb0 <sendMeasuredData+0x1c8>
			adc = (buffer_intAdc_2.uint16[i]);
 8000c76:	4a56      	ldr	r2, [pc, #344]	; (8000dd0 <sendMeasuredData+0x2e8>)
 8000c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c7e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
			sprintf(msg_buffers, "%hu\n", adc);
 8000c82:	f8b7 204a 	ldrh.w	r2, [r7, #74]	; 0x4a
 8000c86:	463b      	mov	r3, r7
 8000c88:	494c      	ldr	r1, [pc, #304]	; (8000dbc <sendMeasuredData+0x2d4>)
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f008 ff60 	bl	8009b50 <siprintf>
			HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000c90:	463b      	mov	r3, r7
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff fade 	bl	8000254 <strlen>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000ca6:	f007 ff77 	bl	8008b98 <HAL_UART_Transmit>
		for (i = 0; i < samplesPerPeriod; i++) {
 8000caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cac:	3301      	adds	r3, #1
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cb2:	f64a 4243 	movw	r2, #44099	; 0xac43
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	dddd      	ble.n	8000c76 <sendMeasuredData+0x18e>
		}
		sprintf(msg_buffers, ">\n");
 8000cba:	463b      	mov	r3, r7
 8000cbc:	4a41      	ldr	r2, [pc, #260]	; (8000dc4 <sendMeasuredData+0x2dc>)
 8000cbe:	6812      	ldr	r2, [r2, #0]
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	8019      	strh	r1, [r3, #0]
 8000cc4:	3302      	adds	r3, #2
 8000cc6:	0c12      	lsrs	r2, r2, #16
 8000cc8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fac1 	bl	8000254 <strlen>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000cdc:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000ce0:	f007 ff5a 	bl	8008b98 <HAL_UART_Transmit>
		state.intAdcReadyToSend = 0;
 8000ce4:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	709a      	strb	r2, [r3, #2]
	}

	if ((state.compReadyToSend == 1)) {
 8000cea:	4b31      	ldr	r3, [pc, #196]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000cec:	78db      	ldrb	r3, [r3, #3]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d156      	bne.n	8000da0 <sendMeasuredData+0x2b8>
		//send frequency
		sprintf(msg_buffers, "<MEAS:%u:comp:\n", state.index);
 8000cf2:	4b2f      	ldr	r3, [pc, #188]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000cf4:	69da      	ldr	r2, [r3, #28]
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4936      	ldr	r1, [pc, #216]	; (8000dd4 <sendMeasuredData+0x2ec>)
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f008 ff28 	bl	8009b50 <siprintf>
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000d00:	463b      	mov	r3, r7
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff faa6 	bl	8000254 <strlen>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4639      	mov	r1, r7
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000d16:	f007 ff3f 	bl	8008b98 <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d1e:	e023      	b.n	8000d68 <sendMeasuredData+0x280>
			uint32_t freq = buffer_comp[i + 1] - buffer_comp[i];
 8000d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a2c      	ldr	r2, [pc, #176]	; (8000dd8 <sendMeasuredData+0x2f0>)
 8000d26:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d2a:	492b      	ldr	r1, [pc, #172]	; (8000dd8 <sendMeasuredData+0x2f0>)
 8000d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d32:	1ad3      	subs	r3, r2, r3
 8000d34:	647b      	str	r3, [r7, #68]	; 0x44
			sprintf(msg_freq, "%d\n", freq);
 8000d36:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d3c:	4927      	ldr	r1, [pc, #156]	; (8000ddc <sendMeasuredData+0x2f4>)
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f008 ff06 	bl	8009b50 <siprintf>
			HAL_UART_Transmit(&huart, (uint8_t*) msg_freq, strlen(msg_freq), HAL_MAX_DELAY);
 8000d44:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff fa83 	bl	8000254 <strlen>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000d56:	f04f 33ff 	mov.w	r3, #4294967295
 8000d5a:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000d5e:	f007 ff1b 	bl	8008b98 <HAL_UART_Transmit>
		for (i = 0; i < 4000; i++) {
 8000d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d64:	3301      	adds	r3, #1
 8000d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d6a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000d6e:	dbd7      	blt.n	8000d20 <sendMeasuredData+0x238>
		}
		sprintf(msg_buffers, ">\n");
 8000d70:	463b      	mov	r3, r7
 8000d72:	4a14      	ldr	r2, [pc, #80]	; (8000dc4 <sendMeasuredData+0x2dc>)
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	4611      	mov	r1, r2
 8000d78:	8019      	strh	r1, [r3, #0]
 8000d7a:	3302      	adds	r3, #2
 8000d7c:	0c12      	lsrs	r2, r2, #16
 8000d7e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart, (uint8_t*) msg_buffers, strlen(msg_buffers), HAL_MAX_DELAY);
 8000d80:	463b      	mov	r3, r7
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff fa66 	bl	8000254 <strlen>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4639      	mov	r1, r7
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8000d96:	f007 feff 	bl	8008b98 <HAL_UART_Transmit>
		state.compReadyToSend = 0;
 8000d9a:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <sendMeasuredData+0x2c8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	70da      	strb	r2, [r3, #3]
	}
}
 8000da0:	bf00      	nop
 8000da2:	3750      	adds	r7, #80	; 0x50
 8000da4:	46bd      	mov	sp, r7
 8000da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000daa:	b004      	add	sp, #16
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	2002f1a8 	.word	0x2002f1a8
 8000db4:	0800a6cc 	.word	0x0800a6cc
 8000db8:	20044abc 	.word	0x20044abc
 8000dbc:	0800a6e0 	.word	0x0800a6e0
 8000dc0:	20019920 	.word	0x20019920
 8000dc4:	0800a6e8 	.word	0x0800a6e8
 8000dc8:	0800a6ec 	.word	0x0800a6ec
 8000dcc:	2002f234 	.word	0x2002f234
 8000dd0:	20004098 	.word	0x20004098
 8000dd4:	0800a700 	.word	0x0800a700
 8000dd8:	20000208 	.word	0x20000208
 8000ddc:	0800a710 	.word	0x0800a710

08000de0 <newDataInBuffer>:

int newDataInBuffer() {
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	return (state.newDataInBuffer);
 8000de4:	4b03      	ldr	r3, [pc, #12]	; (8000df4 <newDataInBuffer+0x14>)
 8000de6:	7d9b      	ldrb	r3, [r3, #22]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2002f1a8 	.word	0x2002f1a8

08000df8 <dataReadyToSend>:


int dataReadyToSend() {
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
	return (state.extAdcReadyToSend || state.intAdcReadyToSend || state.compReadyToSend);
 8000dfc:	4b09      	ldr	r3, [pc, #36]	; (8000e24 <dataReadyToSend+0x2c>)
 8000dfe:	785b      	ldrb	r3, [r3, #1]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d107      	bne.n	8000e14 <dataReadyToSend+0x1c>
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <dataReadyToSend+0x2c>)
 8000e06:	789b      	ldrb	r3, [r3, #2]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d103      	bne.n	8000e14 <dataReadyToSend+0x1c>
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <dataReadyToSend+0x2c>)
 8000e0e:	78db      	ldrb	r3, [r3, #3]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <dataReadyToSend+0x20>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <dataReadyToSend+0x22>
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	2002f1a8 	.word	0x2002f1a8

08000e28 <dataReadyToSendAfterMeasurement>:

//data should be sent after measurement only in "mode 1" or when it is the last measurement
int dataReadyToSendAfterMeasurement() {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	return (dataReadyToSend() && (lastMeasurement() || state.waitForSync == 1));
 8000e2c:	f7ff ffe4 	bl	8000df8 <dataReadyToSend>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00a      	beq.n	8000e4c <dataReadyToSendAfterMeasurement+0x24>
 8000e36:	f001 fc6b 	bl	8002710 <lastMeasurement>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d103      	bne.n	8000e48 <dataReadyToSendAfterMeasurement+0x20>
 8000e40:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <dataReadyToSendAfterMeasurement+0x2c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d101      	bne.n	8000e4c <dataReadyToSendAfterMeasurement+0x24>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e000      	b.n	8000e4e <dataReadyToSendAfterMeasurement+0x26>
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2002f1a8 	.word	0x2002f1a8

08000e58 <dataReadyToSendBeforeMeasurement>:

//data should be sent before measurement only in "mode 0", when it's just right after polarization
int dataReadyToSendBeforeMeasurement() {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	return (dataReadyToSend() && state.waitForSync == 0);
 8000e5c:	f7ff ffcc 	bl	8000df8 <dataReadyToSend>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d005      	beq.n	8000e72 <dataReadyToSendBeforeMeasurement+0x1a>
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <dataReadyToSendBeforeMeasurement+0x20>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <dataReadyToSendBeforeMeasurement+0x1a>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <dataReadyToSendBeforeMeasurement+0x1c>
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	2002f1a8 	.word	0x2002f1a8

08000e7c <clearReceivedCharsBuffer>:

void clearReceivedCharsBuffer() {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
	int i = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
	//keep everything in range
	if (receivedCharIndex > 50) {
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <clearReceivedCharsBuffer+0x4c>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b32      	cmp	r3, #50	; 0x32
 8000e8c:	d902      	bls.n	8000e94 <clearReceivedCharsBuffer+0x18>
		receivedCharIndex = 50;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ec8 <clearReceivedCharsBuffer+0x4c>)
 8000e90:	2232      	movs	r2, #50	; 0x32
 8000e92:	701a      	strb	r2, [r3, #0]
	}
	for (i = 0; i < receivedCharIndex; i++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	e007      	b.n	8000eaa <clearReceivedCharsBuffer+0x2e>
		receivedChars[i] = '\0';
 8000e9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <clearReceivedCharsBuffer+0x50>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < receivedCharIndex; i++) {
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <clearReceivedCharsBuffer+0x4c>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	dbf1      	blt.n	8000e9a <clearReceivedCharsBuffer+0x1e>
	}
	receivedCharIndex = 0;
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <clearReceivedCharsBuffer+0x4c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	2002f230 	.word	0x2002f230
 8000ecc:	2002f1cc 	.word	0x2002f1cc

08000ed0 <delay_us>:
 */

#include "delay.h"
#include"main.h"

void delay_us(uint32_t delay_us) {
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <delay_us+0x24>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0);
 8000ede:	bf00      	nop
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <delay_us+0x24>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1fb      	bne.n	8000ee0 <delay_us+0x10>
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	2002f1c8 	.word	0x2002f1c8

08000ef8 <delay_ms>:

void delay_ms(uint32_t delay_us) {
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	timeIndex = delay_us * 1000;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a06      	ldr	r2, [pc, #24]	; (8000f24 <delay_ms+0x2c>)
 8000f0c:	6013      	str	r3, [r2, #0]
	while (timeIndex > 0);
 8000f0e:	bf00      	nop
 8000f10:	4b04      	ldr	r3, [pc, #16]	; (8000f24 <delay_ms+0x2c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1fb      	bne.n	8000f10 <delay_ms+0x18>
}
 8000f18:	bf00      	nop
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	2002f1c8 	.word	0x2002f1c8

08000f28 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5) {
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d11d      	bne.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x4e>
		if (timeIndex > 0) {
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d004      	beq.n	8000f4c <HAL_TIM_PeriodElapsedCallback+0x24>
			timeIndex -= 50;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3b32      	subs	r3, #50	; 0x32
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000f4a:	6013      	str	r3, [r2, #0]
		}
		if (remainingTimeToNextMeasurement > 0) {
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d005      	beq.n	8000f60 <HAL_TIM_PeriodElapsedCallback+0x38>
			remainingTimeToNextMeasurement -= 50;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b32      	subs	r3, #50	; 0x32
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	e001      	b.n	8000f64 <HAL_TIM_PeriodElapsedCallback+0x3c>
		} else {
			prepareForPolarizationPhaseIfPossible();
 8000f60:	f001 fcd6 	bl	8002910 <prepareForPolarizationPhaseIfPossible>
		}
		if (remainingPolarizationTime > 0) {
 8000f64:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d004      	beq.n	8000f76 <HAL_TIM_PeriodElapsedCallback+0x4e>
			remainingPolarizationTime -= 50;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	3b32      	subs	r3, #50	; 0x32
 8000f72:	4a06      	ldr	r2, [pc, #24]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]
		}
	}
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40000c00 	.word	0x40000c00
 8000f84:	2002f1c8 	.word	0x2002f1c8
 8000f88:	20004094 	.word	0x20004094
 8000f8c:	2000408c 	.word	0x2000408c

08000f90 <set_LED1>:

#include "gpio.h"



void set_LED1(uint8_t R, uint8_t G, uint8_t B) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71bb      	strb	r3, [r7, #6]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	717b      	strb	r3, [r7, #5]
	HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, G);
 8000fa2:	79bb      	ldrb	r3, [r7, #6]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000faa:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <set_LED1+0x44>)
 8000fac:	f003 fec4 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, B);
 8000fb0:	797b      	ldrb	r3, [r7, #5]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <set_LED1+0x44>)
 8000fba:	f003 febd 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED1_B_GPIO_Port, LED1_B_Pin, R);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <set_LED1+0x44>)
 8000fc8:	f003 feb6 	bl	8004d38 <HAL_GPIO_WritePin>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020c00 	.word	0x40020c00

08000fd8 <set_LED2>:
void set_LED2(uint8_t val) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, val);
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <set_LED2+0x20>)
 8000fec:	f003 fea4 	bl	8004d38 <HAL_GPIO_WritePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40020c00 	.word	0x40020c00

08000ffc <set_LED3>:

void set_LED3(uint8_t val) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, val);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	461a      	mov	r2, r3
 800100a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800100e:	4803      	ldr	r0, [pc, #12]	; (800101c <set_LED3+0x20>)
 8001010:	f003 fe92 	bl	8004d38 <HAL_GPIO_WritePin>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40020c00 	.word	0x40020c00

08001020 <set_LED4>:

void set_LED4(uint8_t val) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, val);
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	461a      	mov	r2, r3
 800102e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001032:	4803      	ldr	r0, [pc, #12]	; (8001040 <set_LED4+0x20>)
 8001034:	f003 fe80 	bl	8004d38 <HAL_GPIO_WritePin>
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40020c00 	.word	0x40020c00

08001044 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	80fb      	strh	r3, [r7, #6]
	// change state
	if (GPIO_Pin == BTN1_Pin) {
 800104e:	88fb      	ldrh	r3, [r7, #6]
 8001050:	2b80      	cmp	r3, #128	; 0x80
 8001052:	d102      	bne.n	800105a <HAL_GPIO_EXTI_Callback+0x16>
		changeStateMode();
 8001054:	f001 fa06 	bl	8002464 <changeStateMode>
	} else if (GPIO_Pin == BTN2_Pin || GPIO_Pin == SYNC_Pin) {
		if (isWaitingForSync()) {
			state.preparedToRunMeasurementPhase = 1;
		}
	}
}
 8001058:	e00f      	b.n	800107a <HAL_GPIO_EXTI_Callback+0x36>
	} else if (GPIO_Pin == BTN2_Pin || GPIO_Pin == SYNC_Pin) {
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001060:	d003      	beq.n	800106a <HAL_GPIO_EXTI_Callback+0x26>
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001068:	d107      	bne.n	800107a <HAL_GPIO_EXTI_Callback+0x36>
		if (isWaitingForSync()) {
 800106a:	f001 fbdb 	bl	8002824 <isWaitingForSync>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d002      	beq.n	800107a <HAL_GPIO_EXTI_Callback+0x36>
			state.preparedToRunMeasurementPhase = 1;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GPIO_EXTI_Callback+0x40>)
 8001076:	2201      	movs	r2, #1
 8001078:	765a      	strb	r2, [r3, #25]
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	2002f1a8 	.word	0x2002f1a8

08001088 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b09d      	sub	sp, #116	; 0x74
 800108c:	af1c      	add	r7, sp, #112	; 0x70
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800108e:	f002 fb74 	bl	800377a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001092:	f000 f889 	bl	80011a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001096:	f000 fea1 	bl	8001ddc <MX_GPIO_Init>
	MX_DMA_Init();
 800109a:	f000 fe65 	bl	8001d68 <MX_DMA_Init>
	MX_ADC1_Init();
 800109e:	f000 f923 	bl	80012e8 <MX_ADC1_Init>
	MX_SPI1_Init();
 80010a2:	f000 f9f3 	bl	800148c <MX_SPI1_Init>
	MX_TIM1_Init();
 80010a6:	f000 fa69 	bl	800157c <MX_TIM1_Init>
	MX_TIM2_Init();
 80010aa:	f000 fb27 	bl	80016fc <MX_TIM2_Init>
	MX_TIM3_Init();
 80010ae:	f000 fb79 	bl	80017a4 <MX_TIM3_Init>
	MX_TIM4_Init();
 80010b2:	f000 fbef 	bl	8001894 <MX_TIM4_Init>
	MX_TIM8_Init();
 80010b6:	f000 fccb 	bl	8001a50 <MX_TIM8_Init>
	MX_USART1_UART_Init();
 80010ba:	f000 fdc5 	bl	8001c48 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 80010be:	f000 fdf3 	bl	8001ca8 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80010c2:	f000 fe21 	bl	8001d08 <MX_USART3_UART_Init>
	MX_I2C1_Init();
 80010c6:	f000 f961 	bl	800138c <MX_I2C1_Init>
	MX_I2C3_Init();
 80010ca:	f000 f99f 	bl	800140c <MX_I2C3_Init>
	MX_SPI4_Init();
 80010ce:	f000 fa17 	bl	8001500 <MX_SPI4_Init>
	MX_TIM5_Init();
 80010d2:	f000 fc39 	bl	8001948 <MX_TIM5_Init>
	MX_UART7_Init();
 80010d6:	f000 fd87 	bl	8001be8 <MX_UART7_Init>
	MX_TIM6_Init();
 80010da:	f000 fc83 	bl	80019e4 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	initialization();
 80010de:	f000 ff33 	bl	8001f48 <initialization>
	HAL_Delay(10);
 80010e2:	200a      	movs	r0, #10
 80010e4:	f002 fba6 	bl	8003834 <HAL_Delay>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		//parse text every time before polarization
		if (newDataInBuffer()) {
 80010e8:	f7ff fe7a 	bl	8000de0 <newDataInBuffer>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00b      	beq.n	800110a <main+0x82>
			parseText(huart3);
 80010f2:	4c2c      	ldr	r4, [pc, #176]	; (80011a4 <main+0x11c>)
 80010f4:	4668      	mov	r0, sp
 80010f6:	f104 0310 	add.w	r3, r4, #16
 80010fa:	2270      	movs	r2, #112	; 0x70
 80010fc:	4619      	mov	r1, r3
 80010fe:	f008 fd13 	bl	8009b28 <memcpy>
 8001102:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001106:	f7ff fa83 	bl	8000610 <parseText>
		}

		// if new measurement technique was updated - change state regarding to the update
		if (stateCanBeUpdated()) {
 800110a:	f001 f9d1 	bl	80024b0 <stateCanBeUpdated>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <main+0x90>
			updateState();
 8001114:	f001 f9f4 	bl	8002500 <updateState>
		}

		// normal mode with polarization
		if (ploarizationCanRun()) {
 8001118:	f001 fb0c 	bl	8002734 <ploarizationCanRun>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d012      	beq.n	8001148 <main+0xc0>
			runPolarizationSequence();
 8001122:	f002 f977 	bl	8003414 <runPolarizationSequence>
			if (dataReadyToSendBeforeMeasurement()) {
 8001126:	f7ff fe97 	bl	8000e58 <dataReadyToSendBeforeMeasurement>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00b      	beq.n	8001148 <main+0xc0>
				sendMeasuredData(huart3);
 8001130:	4c1c      	ldr	r4, [pc, #112]	; (80011a4 <main+0x11c>)
 8001132:	4668      	mov	r0, sp
 8001134:	f104 0310 	add.w	r3, r4, #16
 8001138:	2270      	movs	r2, #112	; 0x70
 800113a:	4619      	mov	r1, r3
 800113c:	f008 fcf4 	bl	8009b28 <memcpy>
 8001140:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001144:	f7ff fcd0 	bl	8000ae8 <sendMeasuredData>
			}
		}

		// measurement
		if (measurementCanRun()) {
 8001148:	f001 fb1a 	bl	8002780 <measurementCanRun>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <main+0xce>
			runMeasurementMethod();
 8001152:	f000 ff23 	bl	8001f9c <runMeasurementMethod>
		}

		//
		if (dataReadyToSendAfterMeasurement()) {
 8001156:	f7ff fe67 	bl	8000e28 <dataReadyToSendAfterMeasurement>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00b      	beq.n	8001178 <main+0xf0>
			sendMeasuredData(huart3);
 8001160:	4c10      	ldr	r4, [pc, #64]	; (80011a4 <main+0x11c>)
 8001162:	4668      	mov	r0, sp
 8001164:	f104 0310 	add.w	r3, r4, #16
 8001168:	2270      	movs	r2, #112	; 0x70
 800116a:	4619      	mov	r1, r3
 800116c:	f008 fcdc 	bl	8009b28 <memcpy>
 8001170:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001174:	f7ff fcb8 	bl	8000ae8 <sendMeasuredData>
		}
		if (isWaitingForSync()) {
 8001178:	f001 fb54 	bl	8002824 <isWaitingForSync>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d004      	beq.n	800118c <main+0x104>
			set_LED1(0, 0, 1);
 8001182:	2201      	movs	r2, #1
 8001184:	2100      	movs	r1, #0
 8001186:	2000      	movs	r0, #0
 8001188:	f7ff ff02 	bl	8000f90 <set_LED1>
		}

		// idle state - if no method is active and there are no data to be sent
		if (stateIsIdle()) {
 800118c:	f001 fb26 	bl	80027dc <stateIsIdle>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d0a8      	beq.n	80010e8 <main+0x60>
			set_LED1(0, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fef8 	bl	8000f90 <set_LED1>
		if (newDataInBuffer()) {
 80011a0:	e7a2      	b.n	80010e8 <main+0x60>
 80011a2:	bf00      	nop
 80011a4:	2005a4f0 	.word	0x2005a4f0

080011a8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b0b8      	sub	sp, #224	; 0xe0
 80011ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011b2:	2234      	movs	r2, #52	; 0x34
 80011b4:	2100      	movs	r1, #0
 80011b6:	4618      	mov	r0, r3
 80011b8:	f008 fcc1 	bl	8009b3e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	2290      	movs	r2, #144	; 0x90
 80011d2:	2100      	movs	r1, #0
 80011d4:	4618      	mov	r0, r3
 80011d6:	f008 fcb2 	bl	8009b3e <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80011da:	f003 ff07 	bl	8004fec <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b3f      	ldr	r3, [pc, #252]	; (80012dc <SystemClock_Config+0x134>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a3e      	ldr	r2, [pc, #248]	; (80012dc <SystemClock_Config+0x134>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <SystemClock_Config+0x134>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <SystemClock_Config+0x138>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a39      	ldr	r2, [pc, #228]	; (80012e0 <SystemClock_Config+0x138>)
 80011fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	4b37      	ldr	r3, [pc, #220]	; (80012e0 <SystemClock_Config+0x138>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800120e:	2301      	movs	r3, #1
 8001210:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001214:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121c:	2302      	movs	r3, #2
 800121e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001222:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001226:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 5;
 800122a:	2305      	movs	r3, #5
 800122c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 8001230:	23d8      	movs	r3, #216	; 0xd8
 8001232:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800123c:	2302      	movs	r3, #2
 800123e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001242:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001246:	4618      	mov	r0, r3
 8001248:	f003 ff30 	bl	80050ac <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0xae>
		Error_Handler();
 8001252:	f001 f89f 	bl	8002394 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001256:	f003 fed9 	bl	800500c <HAL_PWREx_EnableOverDrive>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0xbc>
		Error_Handler();
 8001260:	f001 f898 	bl	8002394 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001264:	230f      	movs	r3, #15
 8001266:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800126a:	2302      	movs	r3, #2
 800126c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001276:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800127a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800127e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001282:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8001286:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800128a:	2107      	movs	r1, #7
 800128c:	4618      	mov	r0, r3
 800128e:	f004 f9bb 	bl	8005608 <HAL_RCC_ClockConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xf4>
		Error_Handler();
 8001298:	f001 f87c 	bl	8002394 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_TIM | RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_UART7 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_I2C3;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <SystemClock_Config+0x13c>)
 800129e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012a0:	2300      	movs	r3, #0
 80012a2:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	653b      	str	r3, [r7, #80]	; 0x50
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	657b      	str	r3, [r7, #84]	; 0x54
	PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	667b      	str	r3, [r7, #100]	; 0x64
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012b0:	2300      	movs	r3, #0
 80012b2:	66fb      	str	r3, [r7, #108]	; 0x6c
	PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012b4:	2300      	movs	r3, #0
 80012b6:	677b      	str	r3, [r7, #116]	; 0x74
	PeriphClkInitStruct.TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80012b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012bc:	643b      	str	r3, [r7, #64]	; 0x40

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4618      	mov	r0, r3
 80012c4:	f004 fb72 	bl	80059ac <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0x12a>
		Error_Handler();
 80012ce:	f001 f861 	bl	8002394 <Error_Handler>
	}
}
 80012d2:	bf00      	nop
 80012d4:	37e0      	adds	r7, #224	; 0xe0
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40007000 	.word	0x40007000
 80012e4:	000151d0 	.word	0x000151d0

080012e8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80012fa:	4b22      	ldr	r3, [pc, #136]	; (8001384 <MX_ADC1_Init+0x9c>)
 80012fc:	4a22      	ldr	r2, [pc, #136]	; (8001388 <MX_ADC1_Init+0xa0>)
 80012fe:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001300:	4b20      	ldr	r3, [pc, #128]	; (8001384 <MX_ADC1_Init+0x9c>)
 8001302:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001306:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <MX_ADC1_Init+0x9c>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_ADC1_Init+0x9c>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_ADC1_Init+0x9c>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_ADC1_Init+0x9c>)
 800131c:	2200      	movs	r2, #0
 800131e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_ADC1_Init+0x9c>)
 8001324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001328:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_ADC1_Init+0x9c>)
 800132c:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001332:	4b14      	ldr	r3, [pc, #80]	; (8001384 <MX_ADC1_Init+0x9c>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <MX_ADC1_Init+0x9c>)
 800133a:	2201      	movs	r2, #1
 800133c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <MX_ADC1_Init+0x9c>)
 8001340:	2200      	movs	r2, #0
 8001342:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001346:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <MX_ADC1_Init+0x9c>)
 8001348:	2201      	movs	r2, #1
 800134a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <MX_ADC1_Init+0x9c>)
 800134e:	f002 fa93 	bl	8003878 <HAL_ADC_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x74>
		Error_Handler();
 8001358:	f001 f81c 	bl	8002394 <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 800135c:	2300      	movs	r3, #0
 800135e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001360:	2301      	movs	r3, #1
 8001362:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001364:	2301      	movs	r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_ADC1_Init+0x9c>)
 800136e:	f002 fbc9 	bl	8003b04 <HAL_ADC_ConfigChannel>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_ADC1_Init+0x94>
		Error_Handler();
 8001378:	f001 f80c 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2005a63c 	.word	0x2005a63c
 8001388:	40012000 	.word	0x40012000

0800138c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001390:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_I2C1_Init+0x74>)
 8001392:	4a1c      	ldr	r2, [pc, #112]	; (8001404 <MX_I2C1_Init+0x78>)
 8001394:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x20404768;
 8001396:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_I2C1_Init+0x74>)
 8001398:	4a1b      	ldr	r2, [pc, #108]	; (8001408 <MX_I2C1_Init+0x7c>)
 800139a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800139c:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_I2C1_Init+0x74>)
 800139e:	2200      	movs	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_I2C1_Init+0x74>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_I2C1_Init+0x74>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_I2C1_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_I2C1_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_I2C1_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_I2C1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80013c6:	480e      	ldr	r0, [pc, #56]	; (8001400 <MX_I2C1_Init+0x74>)
 80013c8:	f003 fce8 	bl	8004d9c <HAL_I2C_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_I2C1_Init+0x4a>
		Error_Handler();
 80013d2:	f000 ffdf 	bl	8002394 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80013d6:	2100      	movs	r1, #0
 80013d8:	4809      	ldr	r0, [pc, #36]	; (8001400 <MX_I2C1_Init+0x74>)
 80013da:	f003 fd6f 	bl	8004ebc <HAL_I2CEx_ConfigAnalogFilter>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2C1_Init+0x5c>
		Error_Handler();
 80013e4:	f000 ffd6 	bl	8002394 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80013e8:	2100      	movs	r1, #0
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_I2C1_Init+0x74>)
 80013ec:	f003 fdb1 	bl	8004f52 <HAL_I2CEx_ConfigDigitalFilter>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_I2C1_Init+0x6e>
		Error_Handler();
 80013f6:	f000 ffcd 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2005a570 	.word	0x2005a570
 8001404:	40005400 	.word	0x40005400
 8001408:	20404768 	.word	0x20404768

0800140c <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_I2C3_Init+0x74>)
 8001412:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <MX_I2C3_Init+0x78>)
 8001414:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x20404768;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_I2C3_Init+0x74>)
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <MX_I2C3_Init+0x7c>)
 800141a:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_I2C3_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_I2C3_Init+0x74>)
 8001424:	2201      	movs	r2, #1
 8001426:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_I2C3_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_I2C3_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_I2C3_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_I2C3_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_I2C3_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8001446:	480e      	ldr	r0, [pc, #56]	; (8001480 <MX_I2C3_Init+0x74>)
 8001448:	f003 fca8 	bl	8004d9c <HAL_I2C_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_I2C3_Init+0x4a>
		Error_Handler();
 8001452:	f000 ff9f 	bl	8002394 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001456:	2100      	movs	r1, #0
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <MX_I2C3_Init+0x74>)
 800145a:	f003 fd2f 	bl	8004ebc <HAL_I2CEx_ConfigAnalogFilter>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_I2C3_Init+0x5c>
		Error_Handler();
 8001464:	f000 ff96 	bl	8002394 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 8001468:	2100      	movs	r1, #0
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_I2C3_Init+0x74>)
 800146c:	f003 fd71 	bl	8004f52 <HAL_I2CEx_ConfigDigitalFilter>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_I2C3_Init+0x6e>
		Error_Handler();
 8001476:	f000 ff8d 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2005a344 	.word	0x2005a344
 8001484:	40005c00 	.word	0x40005c00
 8001488:	20404768 	.word	0x20404768

0800148c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001490:	4b19      	ldr	r3, [pc, #100]	; (80014f8 <MX_SPI1_Init+0x6c>)
 8001492:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <MX_SPI1_Init+0x70>)
 8001494:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <MX_SPI1_Init+0x6c>)
 8001498:	2200      	movs	r2, #0
 800149a:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800149c:	4b16      	ldr	r3, [pc, #88]	; (80014f8 <MX_SPI1_Init+0x6c>)
 800149e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014a2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <MX_SPI1_Init+0x6c>)
 80014a6:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80014aa:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_SPI1_Init+0x6c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_SPI1_Init+0x6c>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <MX_SPI1_Init+0x6c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_SPI1_Init+0x6c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_SPI1_Init+0x6c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_SPI1_Init+0x6c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_SPI1_Init+0x6c>)
 80014d2:	2207      	movs	r2, #7
 80014d4:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_SPI1_Init+0x6c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_SPI1_Init+0x6c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_SPI1_Init+0x6c>)
 80014e4:	f004 fe88 	bl	80061f8 <HAL_SPI_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_SPI1_Init+0x66>
		Error_Handler();
 80014ee:	f000 ff51 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	2005a848 	.word	0x2005a848
 80014fc:	40013000 	.word	0x40013000

08001500 <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8001504:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <MX_SPI4_Init+0x74>)
 8001506:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <MX_SPI4_Init+0x78>)
 8001508:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <MX_SPI4_Init+0x74>)
 800150c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001510:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001512:	4b18      	ldr	r3, [pc, #96]	; (8001574 <MX_SPI4_Init+0x74>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <MX_SPI4_Init+0x74>)
 800151a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800151e:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <MX_SPI4_Init+0x74>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001526:	4b13      	ldr	r3, [pc, #76]	; (8001574 <MX_SPI4_Init+0x74>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <MX_SPI4_Init+0x74>)
 800152e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001532:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001534:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <MX_SPI4_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800153a:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <MX_SPI4_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001540:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <MX_SPI4_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	625a      	str	r2, [r3, #36]	; 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001546:	4b0b      	ldr	r3, [pc, #44]	; (8001574 <MX_SPI4_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi4.Init.CRCPolynomial = 7;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <MX_SPI4_Init+0x74>)
 800154e:	2207      	movs	r2, #7
 8001550:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <MX_SPI4_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	631a      	str	r2, [r3, #48]	; 0x30
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <MX_SPI4_Init+0x74>)
 800155a:	2208      	movs	r2, #8
 800155c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 800155e:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_SPI4_Init+0x74>)
 8001560:	f004 fe4a 	bl	80061f8 <HAL_SPI_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_SPI4_Init+0x6e>
		Error_Handler();
 800156a:	f000 ff13 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2005a704 	.word	0x2005a704
 8001578:	40013400 	.word	0x40013400

0800157c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b09a      	sub	sp, #104	; 0x68
 8001580:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001582:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001590:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800159c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
 80015ac:	615a      	str	r2, [r3, #20]
 80015ae:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	222c      	movs	r2, #44	; 0x2c
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f008 fac1 	bl	8009b3e <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80015bc:	4b4d      	ldr	r3, [pc, #308]	; (80016f4 <MX_TIM1_Init+0x178>)
 80015be:	4a4e      	ldr	r2, [pc, #312]	; (80016f8 <MX_TIM1_Init+0x17c>)
 80015c0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80015c2:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <MX_TIM1_Init+0x178>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b4a      	ldr	r3, [pc, #296]	; (80016f4 <MX_TIM1_Init+0x178>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 4898 - 1;
 80015ce:	4b49      	ldr	r3, [pc, #292]	; (80016f4 <MX_TIM1_Init+0x178>)
 80015d0:	f241 3221 	movw	r2, #4897	; 0x1321
 80015d4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <MX_TIM1_Init+0x178>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80015dc:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <MX_TIM1_Init+0x178>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b44      	ldr	r3, [pc, #272]	; (80016f4 <MX_TIM1_Init+0x178>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80015e8:	4842      	ldr	r0, [pc, #264]	; (80016f4 <MX_TIM1_Init+0x178>)
 80015ea:	f005 fba4 	bl	8006d36 <HAL_TIM_Base_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x7c>
		Error_Handler();
 80015f4:	f000 fece 	bl	8002394 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fc:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80015fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001602:	4619      	mov	r1, r3
 8001604:	483b      	ldr	r0, [pc, #236]	; (80016f4 <MX_TIM1_Init+0x178>)
 8001606:	f006 fa2f 	bl	8007a68 <HAL_TIM_ConfigClockSource>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x98>
		Error_Handler();
 8001610:	f000 fec0 	bl	8002394 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001614:	4837      	ldr	r0, [pc, #220]	; (80016f4 <MX_TIM1_Init+0x178>)
 8001616:	f005 fc0e 	bl	8006e36 <HAL_TIM_PWM_Init>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8001620:	f000 feb8 	bl	8002394 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001624:	2320      	movs	r3, #32
 8001626:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001628:	2300      	movs	r3, #0
 800162a:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800162c:	2380      	movs	r3, #128	; 0x80
 800162e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001630:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001634:	4619      	mov	r1, r3
 8001636:	482f      	ldr	r0, [pc, #188]	; (80016f4 <MX_TIM1_Init+0x178>)
 8001638:	f007 f936 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM1_Init+0xca>
		Error_Handler();
 8001642:	f000 fea7 	bl	8002394 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001646:	2370      	movs	r3, #112	; 0x70
 8001648:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 864 + 10;
 800164a:	f240 336a 	movw	r3, #874	; 0x36a
 800164e:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001650:	2302      	movs	r3, #2
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001654:	2300      	movs	r3, #0
 8001656:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 800165c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001660:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001666:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800166a:	2200      	movs	r2, #0
 800166c:	4619      	mov	r1, r3
 800166e:	4821      	ldr	r0, [pc, #132]	; (80016f4 <MX_TIM1_Init+0x178>)
 8001670:	f006 f8e2 	bl	8007838 <HAL_TIM_PWM_ConfigChannel>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM1_Init+0x102>
		Error_Handler();
 800167a:	f000 fe8b 	bl	8002394 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167e:	2360      	movs	r3, #96	; 0x60
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 3000;
 8001682:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001686:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8001688:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800168c:	2204      	movs	r2, #4
 800168e:	4619      	mov	r1, r3
 8001690:	4818      	ldr	r0, [pc, #96]	; (80016f4 <MX_TIM1_Init+0x178>)
 8001692:	f006 f8d1 	bl	8007838 <HAL_TIM_PWM_ConfigChannel>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM1_Init+0x124>
		Error_Handler();
 800169c:	f000 fe7a 	bl	8002394 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4807      	ldr	r0, [pc, #28]	; (80016f4 <MX_TIM1_Init+0x178>)
 80016d6:	f007 f975 	bl	80089c4 <HAL_TIMEx_ConfigBreakDeadTime>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM1_Init+0x168>
		Error_Handler();
 80016e0:	f000 fe58 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80016e4:	4803      	ldr	r0, [pc, #12]	; (80016f4 <MX_TIM1_Init+0x178>)
 80016e6:	f001 fc4d 	bl	8002f84 <HAL_TIM_MspPostInit>

}
 80016ea:	bf00      	nop
 80016ec:	3768      	adds	r7, #104	; 0x68
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2005a808 	.word	0x2005a808
 80016f8:	40010000 	.word	0x40010000

080016fc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b088      	sub	sp, #32
 8001700:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 800170e:	1d3b      	adds	r3, r7, #4
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800171a:	4b21      	ldr	r3, [pc, #132]	; (80017a0 <MX_TIM2_Init+0xa4>)
 800171c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001720:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001724:	2200      	movs	r2, #0
 8001726:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001728:	4b1d      	ldr	r3, [pc, #116]	; (80017a0 <MX_TIM2_Init+0xa4>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffffff;
 800172e:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800173c:	4b18      	ldr	r3, [pc, #96]	; (80017a0 <MX_TIM2_Init+0xa4>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8001742:	4817      	ldr	r0, [pc, #92]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001744:	f005 fcc6 	bl	80070d4 <HAL_TIM_IC_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_TIM2_Init+0x56>
		Error_Handler();
 800174e:	f000 fe21 	bl	8002394 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	480f      	ldr	r0, [pc, #60]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001762:	f007 f8a1 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM2_Init+0x74>
		Error_Handler();
 800176c:	f000 fe12 	bl	8002394 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001774:	2301      	movs	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	60fb      	str	r3, [r7, #12]
	sConfigIC.ICFilter = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	4619      	mov	r1, r3
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM2_Init+0xa4>)
 8001788:	f005 ffb9 	bl	80076fe <HAL_TIM_IC_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM2_Init+0x9a>
		Error_Handler();
 8001792:	f000 fdff 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	3720      	adds	r7, #32
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	2005a8ac 	.word	0x2005a8ac

080017a4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b090      	sub	sp, #64	; 0x40
 80017a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80017aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017ba:	f107 0320 	add.w	r3, r7, #32
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
 80017d4:	615a      	str	r2, [r3, #20]
 80017d6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80017d8:	4b2c      	ldr	r3, [pc, #176]	; (800188c <MX_TIM3_Init+0xe8>)
 80017da:	4a2d      	ldr	r2, [pc, #180]	; (8001890 <MX_TIM3_Init+0xec>)
 80017dc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80017de:	4b2b      	ldr	r3, [pc, #172]	; (800188c <MX_TIM3_Init+0xe8>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <MX_TIM3_Init+0xe8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 0;
 80017ea:	4b28      	ldr	r3, [pc, #160]	; (800188c <MX_TIM3_Init+0xe8>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f0:	4b26      	ldr	r3, [pc, #152]	; (800188c <MX_TIM3_Init+0xe8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017f6:	4b25      	ldr	r3, [pc, #148]	; (800188c <MX_TIM3_Init+0xe8>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80017fc:	4823      	ldr	r0, [pc, #140]	; (800188c <MX_TIM3_Init+0xe8>)
 80017fe:	f005 fa9a 	bl	8006d36 <HAL_TIM_Base_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0x68>
		Error_Handler();
 8001808:	f000 fdc4 	bl	8002394 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800180c:	481f      	ldr	r0, [pc, #124]	; (800188c <MX_TIM3_Init+0xe8>)
 800180e:	f005 fb12 	bl	8006e36 <HAL_TIM_PWM_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0x78>
		Error_Handler();
 8001818:	f000 fdbc 	bl	8002394 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001820:	2300      	movs	r3, #0
 8001822:	633b      	str	r3, [r7, #48]	; 0x30
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 8001824:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001828:	4619      	mov	r1, r3
 800182a:	4818      	ldr	r0, [pc, #96]	; (800188c <MX_TIM3_Init+0xe8>)
 800182c:	f006 f9d6 	bl	8007bdc <HAL_TIM_SlaveConfigSynchro>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0x96>
		Error_Handler();
 8001836:	f000 fdad 	bl	8002394 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8001842:	f107 0320 	add.w	r3, r7, #32
 8001846:	4619      	mov	r1, r3
 8001848:	4810      	ldr	r0, [pc, #64]	; (800188c <MX_TIM3_Init+0xe8>)
 800184a:	f007 f82d 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0xb4>
		Error_Handler();
 8001854:	f000 fd9e 	bl	8002394 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001858:	2360      	movs	r3, #96	; 0x60
 800185a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	4807      	ldr	r0, [pc, #28]	; (800188c <MX_TIM3_Init+0xe8>)
 8001870:	f005 ffe2 	bl	8007838 <HAL_TIM_PWM_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0xda>
		Error_Handler();
 800187a:	f000 fd8b 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <MX_TIM3_Init+0xe8>)
 8001880:	f001 fb80 	bl	8002f84 <HAL_TIM_MspPostInit>

}
 8001884:	bf00      	nop
 8001886:	3740      	adds	r7, #64	; 0x40
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2005a5fc 	.word	0x2005a5fc
 8001890:	40000400 	.word	0x40000400

08001894 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	; 0x28
 8001898:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800189a:	f107 031c 	add.w	r3, r7, #28
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80018a6:	463b      	mov	r3, r7
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	605a      	str	r2, [r3, #4]
 80018ae:	609a      	str	r2, [r3, #8]
 80018b0:	60da      	str	r2, [r3, #12]
 80018b2:	611a      	str	r2, [r3, #16]
 80018b4:	615a      	str	r2, [r3, #20]
 80018b6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80018b8:	4b21      	ldr	r3, [pc, #132]	; (8001940 <MX_TIM4_Init+0xac>)
 80018ba:	4a22      	ldr	r2, [pc, #136]	; (8001944 <MX_TIM4_Init+0xb0>)
 80018bc:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <MX_TIM4_Init+0xac>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018c4:	4b1e      	ldr	r3, [pc, #120]	; (8001940 <MX_TIM4_Init+0xac>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0;
 80018ca:	4b1d      	ldr	r3, [pc, #116]	; (8001940 <MX_TIM4_Init+0xac>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <MX_TIM4_Init+0xac>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <MX_TIM4_Init+0xac>)
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80018dc:	4818      	ldr	r0, [pc, #96]	; (8001940 <MX_TIM4_Init+0xac>)
 80018de:	f005 faaa 	bl	8006e36 <HAL_TIM_PWM_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_TIM4_Init+0x58>
		Error_Handler();
 80018e8:	f000 fd54 	bl	8002394 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80018ec:	2320      	movs	r3, #32
 80018ee:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4811      	ldr	r0, [pc, #68]	; (8001940 <MX_TIM4_Init+0xac>)
 80018fc:	f006 ffd4 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM4_Init+0x76>
		Error_Handler();
 8001906:	f000 fd45 	bl	8002394 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800190a:	2360      	movs	r3, #96	; 0x60
 800190c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 800191a:	463b      	mov	r3, r7
 800191c:	2200      	movs	r2, #0
 800191e:	4619      	mov	r1, r3
 8001920:	4807      	ldr	r0, [pc, #28]	; (8001940 <MX_TIM4_Init+0xac>)
 8001922:	f005 ff89 	bl	8007838 <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM4_Init+0x9c>
		Error_Handler();
 800192c:	f000 fd32 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8001930:	4803      	ldr	r0, [pc, #12]	; (8001940 <MX_TIM4_Init+0xac>)
 8001932:	f001 fb27 	bl	8002f84 <HAL_TIM_MspPostInit>

}
 8001936:	bf00      	nop
 8001938:	3728      	adds	r7, #40	; 0x28
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	2005a4b0 	.word	0x2005a4b0
 8001944:	40000800 	.word	0x40000800

08001948 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b088      	sub	sp, #32
 800194c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800194e:	f107 0310 	add.w	r3, r7, #16
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_TIM5_Init+0x94>)
 8001968:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <MX_TIM5_Init+0x98>)
 800196a:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_TIM5_Init+0x94>)
 800196e:	2200      	movs	r2, #0
 8001970:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_TIM5_Init+0x94>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = (21600 / 2) - 1;
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_TIM5_Init+0x94>)
 800197a:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800197e:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <MX_TIM5_Init+0x94>)
 8001982:	2200      	movs	r2, #0
 8001984:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001986:	4b15      	ldr	r3, [pc, #84]	; (80019dc <MX_TIM5_Init+0x94>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 800198c:	4813      	ldr	r0, [pc, #76]	; (80019dc <MX_TIM5_Init+0x94>)
 800198e:	f005 f9d2 	bl	8006d36 <HAL_TIM_Base_Init>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <MX_TIM5_Init+0x54>
		Error_Handler();
 8001998:	f000 fcfc 	bl	8002394 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	4619      	mov	r1, r3
 80019a8:	480c      	ldr	r0, [pc, #48]	; (80019dc <MX_TIM5_Init+0x94>)
 80019aa:	f006 f85d 	bl	8007a68 <HAL_TIM_ConfigClockSource>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM5_Init+0x70>
		Error_Handler();
 80019b4:	f000 fcee 	bl	8002394 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019b8:	2300      	movs	r3, #0
 80019ba:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80019c0:	1d3b      	adds	r3, r7, #4
 80019c2:	4619      	mov	r1, r3
 80019c4:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_TIM5_Init+0x94>)
 80019c6:	f006 ff6f 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM5_Init+0x8c>
		Error_Handler();
 80019d0:	f000 fce0 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 80019d4:	bf00      	nop
 80019d6:	3720      	adds	r7, #32
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	2005a5bc 	.word	0x2005a5bc
 80019e0:	40000c00 	.word	0x40000c00

080019e4 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80019f4:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <MX_TIM6_Init+0x64>)
 80019f6:	4a15      	ldr	r2, [pc, #84]	; (8001a4c <MX_TIM6_Init+0x68>)
 80019f8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80019fa:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <MX_TIM6_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 4898 - 1;
 8001a06:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a08:	f241 3221 	movw	r2, #4897	; 0x1321
 8001a0c:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a16:	f005 f98e 	bl	8006d36 <HAL_TIM_Base_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM6_Init+0x40>
		Error_Handler();
 8001a20:	f000 fcb8 	bl	8002394 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a24:	2320      	movs	r3, #32
 8001a26:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <MX_TIM6_Init+0x64>)
 8001a32:	f006 ff39 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM6_Init+0x5c>
		Error_Handler();
 8001a3c:	f000 fcaa 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	2005a7c8 	.word	0x2005a7c8
 8001a4c:	40001000 	.word	0x40001000

08001a50 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b09e      	sub	sp, #120	; 0x78
 8001a54:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001a56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8001a64:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
 8001a90:	615a      	str	r2, [r3, #20]
 8001a92:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001a94:	463b      	mov	r3, r7
 8001a96:	222c      	movs	r2, #44	; 0x2c
 8001a98:	2100      	movs	r1, #0
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f008 f84f 	bl	8009b3e <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001aa2:	4a50      	ldr	r2, [pc, #320]	; (8001be4 <MX_TIM8_Init+0x194>)
 8001aa4:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001aa6:	4b4e      	ldr	r3, [pc, #312]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b4c      	ldr	r3, [pc, #304]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 108 - 1;
 8001ab2:	4b4b      	ldr	r3, [pc, #300]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001ab4:	226b      	movs	r2, #107	; 0x6b
 8001ab6:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab8:	4b49      	ldr	r3, [pc, #292]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 24;
 8001abe:	4b48      	ldr	r3, [pc, #288]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001ac0:	2218      	movs	r2, #24
 8001ac2:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac4:	4b46      	ldr	r3, [pc, #280]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8001aca:	4845      	ldr	r0, [pc, #276]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001acc:	f005 f933 	bl	8006d36 <HAL_TIM_Base_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM8_Init+0x8a>
		Error_Handler();
 8001ad6:	f000 fc5d 	bl	8002394 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ade:	66bb      	str	r3, [r7, #104]	; 0x68
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001ae0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	483e      	ldr	r0, [pc, #248]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001ae8:	f005 ffbe 	bl	8007a68 <HAL_TIM_ConfigClockSource>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <MX_TIM8_Init+0xa6>
		Error_Handler();
 8001af2:	f000 fc4f 	bl	8002394 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001af6:	483a      	ldr	r0, [pc, #232]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001af8:	f005 f99d 	bl	8006e36 <HAL_TIM_PWM_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM8_Init+0xb6>
		Error_Handler();
 8001b02:	f000 fc47 	bl	8002394 <Error_Handler>
	}
	if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK) {
 8001b06:	2108      	movs	r1, #8
 8001b08:	4835      	ldr	r0, [pc, #212]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001b0a:	f005 fc93 	bl	8007434 <HAL_TIM_OnePulse_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM8_Init+0xc8>
		Error_Handler();
 8001b14:	f000 fc3e 	bl	8002394 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8001b18:	2306      	movs	r3, #6
 8001b1a:	657b      	str	r3, [r7, #84]	; 0x54
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK) {
 8001b20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b24:	4619      	mov	r1, r3
 8001b26:	482e      	ldr	r0, [pc, #184]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001b28:	f006 f858 	bl	8007bdc <HAL_TIM_SlaveConfigSynchro>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM8_Init+0xe6>
		Error_Handler();
 8001b32:	f000 fc2f 	bl	8002394 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	64bb      	str	r3, [r7, #72]	; 0x48
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8001b42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b46:	4619      	mov	r1, r3
 8001b48:	4825      	ldr	r0, [pc, #148]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001b4a:	f006 fead 	bl	80088a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM8_Init+0x108>
		Error_Handler();
 8001b54:	f000 fc1e 	bl	8002394 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001b58:	2370      	movs	r3, #112	; 0x70
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.Pulse = 54;
 8001b5c:	2336      	movs	r3, #54	; 0x36
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b64:	2300      	movs	r3, #0
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b70:	2300      	movs	r3, #0
 8001b72:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001b74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b78:	2200      	movs	r2, #0
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4818      	ldr	r0, [pc, #96]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001b7e:	f005 fe5b 	bl	8007838 <HAL_TIM_PWM_ConfigChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM8_Init+0x13c>
		Error_Handler();
 8001b88:	f000 fc04 	bl	8002394 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	603b      	str	r3, [r7, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ba0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ba4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakFilter = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bb2:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Filter = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8001bbc:	463b      	mov	r3, r7
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4807      	ldr	r0, [pc, #28]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001bc2:	f006 feff 	bl	80089c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM8_Init+0x180>
		Error_Handler();
 8001bcc:	f000 fbe2 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001bd0:	4803      	ldr	r0, [pc, #12]	; (8001be0 <MX_TIM8_Init+0x190>)
 8001bd2:	f001 f9d7 	bl	8002f84 <HAL_TIM_MspPostInit>

}
 8001bd6:	bf00      	nop
 8001bd8:	3778      	adds	r7, #120	; 0x78
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2005a470 	.word	0x2005a470
 8001be4:	40010400 	.word	0x40010400

08001be8 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MX_UART7_Init+0x58>)
 8001bee:	4a15      	ldr	r2, [pc, #84]	; (8001c44 <MX_UART7_Init+0x5c>)
 8001bf0:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MX_UART7_Init+0x58>)
 8001bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf8:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_UART7_Init+0x58>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <MX_UART7_Init+0x58>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_UART7_Init+0x58>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_UART7_Init+0x58>)
 8001c0e:	220c      	movs	r2, #12
 8001c10:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_UART7_Init+0x58>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_UART7_Init+0x58>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_UART7_Init+0x58>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_UART7_Init+0x58>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_UART7_Init+0x58>)
 8001c2c:	f006 ff66 	bl	8008afc <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_UART7_Init+0x52>
		Error_Handler();
 8001c36:	f000 fbad 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2005a3f0 	.word	0x2005a3f0
 8001c44:	40007800 	.word	0x40007800

08001c48 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c4e:	4a15      	ldr	r2, [pc, #84]	; (8001ca4 <MX_USART1_UART_Init+0x5c>)
 8001c50:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001c52:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c58:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_USART1_UART_Init+0x58>)
 8001c8c:	f006 ff36 	bl	8008afc <HAL_UART_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001c96:	f000 fb7d 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2005a684 	.word	0x2005a684
 8001ca4:	40011000 	.word	0x40011000

08001ca8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <MX_USART2_UART_Init+0x58>)
 8001cae:	4a15      	ldr	r2, [pc, #84]	; (8001d04 <MX_USART2_UART_Init+0x5c>)
 8001cb0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <MX_USART2_UART_Init+0x58>)
 8001cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cb8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cba:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <MX_USART2_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <MX_USART2_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <MX_USART2_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_USART2_UART_Init+0x58>)
 8001cce:	220c      	movs	r2, #12
 8001cd0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <MX_USART2_UART_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <MX_USART2_UART_Init+0x58>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <MX_USART2_UART_Init+0x58>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ce4:	4b06      	ldr	r3, [pc, #24]	; (8001d00 <MX_USART2_UART_Init+0x58>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <MX_USART2_UART_Init+0x58>)
 8001cec:	f006 ff06 	bl	8008afc <HAL_UART_Init>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d001      	beq.n	8001cfa <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8001cf6:	f000 fb4d 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	2005a8ec 	.word	0x2005a8ec
 8001d04:	40004400 	.word	0x40004400

08001d08 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_USART3_UART_Init+0x54>)
 8001d0e:	4a14      	ldr	r2, [pc, #80]	; (8001d60 <MX_USART3_UART_Init+0x58>)
 8001d10:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 2000000;
 8001d12:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MX_USART3_UART_Init+0x54>)
 8001d14:	4a13      	ldr	r2, [pc, #76]	; (8001d64 <MX_USART3_UART_Init+0x5c>)
 8001d16:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d18:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <MX_USART3_UART_Init+0x54>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_USART3_UART_Init+0x54>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <MX_USART3_UART_Init+0x54>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_USART3_UART_Init+0x54>)
 8001d2c:	220c      	movs	r2, #12
 8001d2e:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <MX_USART3_UART_Init+0x54>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_USART3_UART_Init+0x54>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <MX_USART3_UART_Init+0x54>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_USART3_UART_Init+0x54>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_USART3_UART_Init+0x54>)
 8001d4a:	f006 fed7 	bl	8008afc <HAL_UART_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART3_UART_Init+0x50>
		Error_Handler();
 8001d54:	f000 fb1e 	bl	8002394 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	2005a4f0 	.word	0x2005a4f0
 8001d60:	40004800 	.word	0x40004800
 8001d64:	001e8480 	.word	0x001e8480

08001d68 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001d6e:	4b1a      	ldr	r3, [pc, #104]	; (8001dd8 <MX_DMA_Init+0x70>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <MX_DMA_Init+0x70>)
 8001d74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b17      	ldr	r3, [pc, #92]	; (8001dd8 <MX_DMA_Init+0x70>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d82:	607b      	str	r3, [r7, #4]
 8001d84:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001d86:	4b14      	ldr	r3, [pc, #80]	; (8001dd8 <MX_DMA_Init+0x70>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <MX_DMA_Init+0x70>)
 8001d8c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_DMA_Init+0x70>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d9a:	603b      	str	r3, [r7, #0]
 8001d9c:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	2010      	movs	r0, #16
 8001da4:	f002 fa4f 	bl	8004246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001da8:	2010      	movs	r0, #16
 8001daa:	f002 fa68 	bl	800427e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	203a      	movs	r0, #58	; 0x3a
 8001db4:	f002 fa47 	bl	8004246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001db8:	203a      	movs	r0, #58	; 0x3a
 8001dba:	f002 fa60 	bl	800427e <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	203c      	movs	r0, #60	; 0x3c
 8001dc4:	f002 fa3f 	bl	8004246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001dc8:	203c      	movs	r0, #60	; 0x3c
 8001dca:	f002 fa58 	bl	800427e <HAL_NVIC_EnableIRQ>

}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40023800 	.word	0x40023800

08001ddc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	; 0x30
 8001de0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001de2:	f107 031c 	add.w	r3, r7, #28
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
 8001df0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001df2:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a4e      	ldr	r2, [pc, #312]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001df8:	f043 0310 	orr.w	r3, r3, #16
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	61bb      	str	r3, [r7, #24]
 8001e08:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a48      	ldr	r2, [pc, #288]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e10:	f043 0304 	orr.w	r3, r3, #4
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b46      	ldr	r3, [pc, #280]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001e22:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	4a42      	ldr	r2, [pc, #264]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2e:	4b40      	ldr	r3, [pc, #256]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a36      	ldr	r2, [pc, #216]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6a:	4b31      	ldr	r3, [pc, #196]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a30      	ldr	r2, [pc, #192]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e70:	f043 0308 	orr.w	r3, r3, #8
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <MX_GPIO_Init+0x154>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SN6505_EN_GPIO_Port, SN6505_EN_Pin, GPIO_PIN_RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2108      	movs	r1, #8
 8001e86:	482b      	ldr	r0, [pc, #172]	; (8001f34 <MX_GPIO_Init+0x158>)
 8001e88:	f002 ff56 	bl	8004d38 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f64e 717f 	movw	r1, #61311	; 0xef7f
 8001e92:	4829      	ldr	r0, [pc, #164]	; (8001f38 <MX_GPIO_Init+0x15c>)
 8001e94:	f002 ff50 	bl	8004d38 <HAL_GPIO_WritePin>
	LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : SN6505_EN_Pin */
	GPIO_InitStruct.Pin = SN6505_EN_Pin;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SN6505_EN_GPIO_Port, &GPIO_InitStruct);
 8001ea8:	f107 031c 	add.w	r3, r7, #28
 8001eac:	4619      	mov	r1, r3
 8001eae:	4821      	ldr	r0, [pc, #132]	; (8001f34 <MX_GPIO_Init+0x158>)
 8001eb0:	f002 fd98 	bl	80049e4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SYNC_Pin */
	GPIO_InitStruct.Pin = SYNC_Pin;
 8001eb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eb8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eba:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <MX_GPIO_Init+0x160>)
 8001ebc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(SYNC_GPIO_Port, &GPIO_InitStruct);
 8001ec2:	f107 031c 	add.w	r3, r7, #28
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	481d      	ldr	r0, [pc, #116]	; (8001f40 <MX_GPIO_Init+0x164>)
 8001eca:	f002 fd8b 	bl	80049e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED1_R_Pin LED1_G_Pin LED1_B_Pin SN6505_END11_Pin
	 LED2_Pin LED3_Pin LED4_Pin Switches_driver_enable_Pin
	 S1_Pin S2_Pin S3_Pin S4_Pin
	 S5_Pin S6_Pin */
	GPIO_InitStruct.Pin = LED1_R_Pin | LED1_G_Pin | LED1_B_Pin | SN6505_END11_Pin | LED2_Pin | LED3_Pin | LED4_Pin | Switches_driver_enable_Pin | S1_Pin | S2_Pin | S3_Pin | S4_Pin | S5_Pin | S6_Pin;
 8001ece:	f64e 737f 	movw	r3, #61311	; 0xef7f
 8001ed2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4814      	ldr	r0, [pc, #80]	; (8001f38 <MX_GPIO_Init+0x15c>)
 8001ee8:	f002 fd7c 	bl	80049e4 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN1_Pin BTN2_Pin */
	GPIO_InitStruct.Pin = BTN1_Pin | BTN2_Pin;
 8001eec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ef0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ef2:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <MX_GPIO_Init+0x168>)
 8001ef4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001efa:	f107 031c 	add.w	r3, r7, #28
 8001efe:	4619      	mov	r1, r3
 8001f00:	480c      	ldr	r0, [pc, #48]	; (8001f34 <MX_GPIO_Init+0x158>)
 8001f02:	f002 fd6f 	bl	80049e4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	2017      	movs	r0, #23
 8001f0c:	f002 f99b 	bl	8004246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f10:	2017      	movs	r0, #23
 8001f12:	f002 f9b4 	bl	800427e <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2028      	movs	r0, #40	; 0x28
 8001f1c:	f002 f993 	bl	8004246 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f20:	2028      	movs	r0, #40	; 0x28
 8001f22:	f002 f9ac 	bl	800427e <HAL_NVIC_EnableIRQ>

}
 8001f26:	bf00      	nop
 8001f28:	3730      	adds	r7, #48	; 0x30
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020c00 	.word	0x40020c00
 8001f3c:	10110000 	.word	0x10110000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	10210000 	.word	0x10210000

08001f48 <initialization>:

/* USER CODE BEGIN 4 */


void initialization() {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
	//setStateToMeasureOnlyNoPolarization();
	HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);	// start listening to commands
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	490d      	ldr	r1, [pc, #52]	; (8001f84 <initialization+0x3c>)
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <initialization+0x40>)
 8001f52:	f006 feb3 	bl	8008cbc <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim5); 						// start timer for delay measuring
 8001f56:	480d      	ldr	r0, [pc, #52]	; (8001f8c <initialization+0x44>)
 8001f58:	f004 ff18 	bl	8006d8c <HAL_TIM_Base_Start_IT>
	switchingCircuitIdle();
 8001f5c:	f001 fb78 	bl	8003650 <switchingCircuitIdle>
	timeIndex = 0;
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <initialization+0x48>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
	remainingPolarizationTime = 0;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <initialization+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
	remainingTimeToNextMeasurement = 0;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <initialization+0x50>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
	set_LED1(0, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	2000      	movs	r0, #0
 8001f78:	f7ff f80a 	bl	8000f90 <set_LED1>
	setStateToDefault();								// set state in order to polarize with period 5 seconds
 8001f7c:	f000 fae0 	bl	8002540 <setStateToDefault>
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20004090 	.word	0x20004090
 8001f88:	2005a4f0 	.word	0x2005a4f0
 8001f8c:	2005a5bc 	.word	0x2005a5bc
 8001f90:	2002f1c8 	.word	0x2002f1c8
 8001f94:	2000408c 	.word	0x2000408c
 8001f98:	20004094 	.word	0x20004094

08001f9c <runMeasurementMethod>:


void runMeasurementMethod() {
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b09d      	sub	sp, #116	; 0x74
 8001fa0:	af1c      	add	r7, sp, #112	; 0x70
	//there is no need to run measurement sequence, when the mode is "measureOnSync"
	if(!isModeMeasureOnSync()){
 8001fa2:	f000 fca5 	bl	80028f0 <isModeMeasureOnSync>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d101      	bne.n	8001fb0 <runMeasurementMethod+0x14>
		runMeasurementSequence();
 8001fac:	f001 fa9e 	bl	80034ec <runMeasurementSequence>
	}
	//if measurement method is set, run it
	if ((state.remainingMeasurements > 0) || (state.remainingMeasurements == -1) && ((state.extAdcActiveState == 1) || (state.intAdcActiveState == 1) || (state.compActiveState == 1))) {
 8001fb0:	4b22      	ldr	r3, [pc, #136]	; (800203c <runMeasurementMethod+0xa0>)
 8001fb2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	dc11      	bgt.n	8001fde <runMeasurementMethod+0x42>
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <runMeasurementMethod+0xa0>)
 8001fbc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d135      	bne.n	8002032 <runMeasurementMethod+0x96>
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <runMeasurementMethod+0xa0>)
 8001fc8:	791b      	ldrb	r3, [r3, #4]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d007      	beq.n	8001fde <runMeasurementMethod+0x42>
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <runMeasurementMethod+0xa0>)
 8001fd0:	795b      	ldrb	r3, [r3, #5]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d003      	beq.n	8001fde <runMeasurementMethod+0x42>
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <runMeasurementMethod+0xa0>)
 8001fd8:	799b      	ldrb	r3, [r3, #6]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d129      	bne.n	8002032 <runMeasurementMethod+0x96>
		// check, if there isn't new user update before starting measurement
		if (newDataInBuffer()) {
 8001fde:	f7fe feff 	bl	8000de0 <newDataInBuffer>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <runMeasurementMethod+0x64>
			parseText(huart3);
 8001fe8:	4c15      	ldr	r4, [pc, #84]	; (8002040 <runMeasurementMethod+0xa4>)
 8001fea:	4668      	mov	r0, sp
 8001fec:	f104 0310 	add.w	r3, r4, #16
 8001ff0:	2270      	movs	r2, #112	; 0x70
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f007 fd98 	bl	8009b28 <memcpy>
 8001ff8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ffc:	f7fe fb08 	bl	8000610 <parseText>
		}
		// also update the state
		if (stateCanBeUpdated()) {
 8002000:	f000 fa56 	bl	80024b0 <stateCanBeUpdated>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <runMeasurementMethod+0x72>
			updateState();
 800200a:	f000 fa79 	bl	8002500 <updateState>
		}
		if (state.extAdcActiveState == 1) {
 800200e:	4b0b      	ldr	r3, [pc, #44]	; (800203c <runMeasurementMethod+0xa0>)
 8002010:	791b      	ldrb	r3, [r3, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d101      	bne.n	800201a <runMeasurementMethod+0x7e>
			measureWithExtADC();
 8002016:	f000 f815 	bl	8002044 <measureWithExtADC>
		}
		if (state.intAdcActiveState == 1) {
 800201a:	4b08      	ldr	r3, [pc, #32]	; (800203c <runMeasurementMethod+0xa0>)
 800201c:	795b      	ldrb	r3, [r3, #5]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <runMeasurementMethod+0x8a>
			measureWithIntADC();
 8002022:	f000 f83d 	bl	80020a0 <measureWithIntADC>
		}
		if (state.compActiveState == 1) {
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <runMeasurementMethod+0xa0>)
 8002028:	799b      	ldrb	r3, [r3, #6]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <runMeasurementMethod+0x96>
			measureWithComp();
 800202e:	f000 f85b 	bl	80020e8 <measureWithComp>
		}
	}
}
 8002032:	bf00      	nop
 8002034:	3704      	adds	r7, #4
 8002036:	46bd      	mov	sp, r7
 8002038:	bd90      	pop	{r4, r7, pc}
 800203a:	bf00      	nop
 800203c:	2002f1a8 	.word	0x2002f1a8
 8002040:	2005a4f0 	.word	0x2005a4f0

08002044 <measureWithExtADC>:


void measureWithExtADC() {
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	// visualise with green color
	// Start SPI communication over DMA
	HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_1.uint8, samplesPerPeriod);
 8002048:	f64a 4244 	movw	r2, #44100	; 0xac44
 800204c:	490f      	ldr	r1, [pc, #60]	; (800208c <measureWithExtADC+0x48>)
 800204e:	4810      	ldr	r0, [pc, #64]	; (8002090 <measureWithExtADC+0x4c>)
 8002050:	f004 f964 	bl	800631c <HAL_SPI_Receive_DMA>
	//turn on timers
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);	// SPI -  MCU NSS
 8002054:	2100      	movs	r1, #0
 8002056:	480f      	ldr	r0, [pc, #60]	; (8002094 <measureWithExtADC+0x50>)
 8002058:	f004 ff18 	bl	8006e8c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2); 	// SPI -  External ADC NSS
 800205c:	2104      	movs	r1, #4
 800205e:	480d      	ldr	r0, [pc, #52]	; (8002094 <measureWithExtADC+0x50>)
 8002060:	f004 ff14 	bl	8006e8c <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);	// SPI -  CLK
 8002064:	2100      	movs	r1, #0
 8002066:	480c      	ldr	r0, [pc, #48]	; (8002098 <measureWithExtADC+0x54>)
 8002068:	f004 ff10 	bl	8006e8c <HAL_TIM_PWM_Start_IT>
	set_LED2(1);
 800206c:	2001      	movs	r0, #1
 800206e:	f7fe ffb3 	bl	8000fd8 <set_LED2>
	set_LED1(0, 1, 0); // v
 8002072:	2200      	movs	r2, #0
 8002074:	2101      	movs	r1, #1
 8002076:	2000      	movs	r0, #0
 8002078:	f7fe ff8a 	bl	8000f90 <set_LED1>
	state.extAdcMeasuring = 1;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <measureWithExtADC+0x58>)
 800207e:	2201      	movs	r2, #1
 8002080:	71da      	strb	r2, [r3, #7]
	//keep "preparedToRunMeasurementPhase" low -> when mode is 1, in interrupt it can be set to high...
	state.preparedToRunMeasurementPhase = 0;
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <measureWithExtADC+0x58>)
 8002084:	2200      	movs	r2, #0
 8002086:	765a      	strb	r2, [r3, #25]
}
 8002088:	bf00      	nop
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20044abc 	.word	0x20044abc
 8002090:	2005a848 	.word	0x2005a848
 8002094:	2005a808 	.word	0x2005a808
 8002098:	2005a470 	.word	0x2005a470
 800209c:	2002f1a8 	.word	0x2002f1a8

080020a0 <measureWithIntADC>:

void measureWithIntADC() {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 80020a4:	2200      	movs	r2, #0
 80020a6:	2101      	movs	r1, #1
 80020a8:	2000      	movs	r0, #0
 80020aa:	f7fe ff71 	bl	8000f90 <set_LED1>
	//start ADC
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_1.uint16, samplesPerPeriod);
 80020ae:	f64a 4244 	movw	r2, #44100	; 0xac44
 80020b2:	4909      	ldr	r1, [pc, #36]	; (80020d8 <measureWithIntADC+0x38>)
 80020b4:	4809      	ldr	r0, [pc, #36]	; (80020dc <measureWithIntADC+0x3c>)
 80020b6:	f001 fc23 	bl	8003900 <HAL_ADC_Start_DMA>
	// start timer
	HAL_TIM_Base_Start_IT(&htim6);
 80020ba:	4809      	ldr	r0, [pc, #36]	; (80020e0 <measureWithIntADC+0x40>)
 80020bc:	f004 fe66 	bl	8006d8c <HAL_TIM_Base_Start_IT>
	set_LED3(1);
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7fe ff9b 	bl	8000ffc <set_LED3>
	state.intAdcMeasuring = 1;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <measureWithIntADC+0x44>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	721a      	strb	r2, [r3, #8]
	//keep "preparedToRunMeasurementPhase" low -> when mode is 1, in interrupt it can be set to high...
	state.preparedToRunMeasurementPhase = 0;
 80020cc:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <measureWithIntADC+0x44>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	765a      	strb	r2, [r3, #25]
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	2002f234 	.word	0x2002f234
 80020dc:	2005a63c 	.word	0x2005a63c
 80020e0:	2005a7c8 	.word	0x2005a7c8
 80020e4:	2002f1a8 	.word	0x2002f1a8

080020e8 <measureWithComp>:

void measureWithComp() {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	// visualise with green color
	set_LED1(0, 1, 0);
 80020ec:	2200      	movs	r2, #0
 80020ee:	2101      	movs	r1, #1
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7fe ff4d 	bl	8000f90 <set_LED1>
	// run the timer 4001 - 2 seconds for 2 kHz
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, buffer_comp, 4001);
 80020f6:	f640 73a1 	movw	r3, #4001	; 0xfa1
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <measureWithComp+0x34>)
 80020fc:	2100      	movs	r1, #0
 80020fe:	4808      	ldr	r0, [pc, #32]	; (8002120 <measureWithComp+0x38>)
 8002100:	f005 f814 	bl	800712c <HAL_TIM_IC_Start_DMA>
	set_LED4(1);
 8002104:	2001      	movs	r0, #1
 8002106:	f7fe ff8b 	bl	8001020 <set_LED4>
	state.compMeasuring = 1;
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <measureWithComp+0x3c>)
 800210c:	2201      	movs	r2, #1
 800210e:	725a      	strb	r2, [r3, #9]
	//keep "preparedToRunMeasurementPhase" low -> when mode is 1, in interrupt it can be set to high...
	state.preparedToRunMeasurementPhase = 0;
 8002110:	4b04      	ldr	r3, [pc, #16]	; (8002124 <measureWithComp+0x3c>)
 8002112:	2200      	movs	r2, #0
 8002114:	765a      	strb	r2, [r3, #25]
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000208 	.word	0x20000208
 8002120:	2005a8ac 	.word	0x2005a8ac
 8002124:	2002f1a8 	.word	0x2002f1a8

08002128 <measurementWithExtAdcDone>:

void measurementWithExtAdcDone() {
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0

	//stop DMA
	SPI1->CR2 &= ~SPI_CR2_RXDMAEN;
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <measurementWithExtAdcDone+0x90>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <measurementWithExtAdcDone+0x90>)
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	6053      	str	r3, [r2, #4]

	filledBuffersExtADC++;
 8002138:	4b20      	ldr	r3, [pc, #128]	; (80021bc <measurementWithExtAdcDone+0x94>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <measurementWithExtAdcDone+0x94>)
 8002142:	701a      	strb	r2, [r3, #0]
	//first buffer is filled
	if (filledBuffersExtADC == 1) {
 8002144:	4b1d      	ldr	r3, [pc, #116]	; (80021bc <measurementWithExtAdcDone+0x94>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d106      	bne.n	800215a <measurementWithExtAdcDone+0x32>
		//start DMA again with second buffer
		HAL_SPI_Receive_DMA(&hspi1, buffer_extAdc_2.uint8, samplesPerPeriod);
 800214c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002150:	491b      	ldr	r1, [pc, #108]	; (80021c0 <measurementWithExtAdcDone+0x98>)
 8002152:	481c      	ldr	r0, [pc, #112]	; (80021c4 <measurementWithExtAdcDone+0x9c>)
 8002154:	f004 f8e2 	bl	800631c <HAL_SPI_Receive_DMA>
			state.extAdcSetState = 0;
		} else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 8002158:	e02b      	b.n	80021b2 <measurementWithExtAdcDone+0x8a>
	else if (filledBuffersExtADC == 2) {
 800215a:	4b18      	ldr	r3, [pc, #96]	; (80021bc <measurementWithExtAdcDone+0x94>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b02      	cmp	r3, #2
 8002160:	d127      	bne.n	80021b2 <measurementWithExtAdcDone+0x8a>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8002162:	2100      	movs	r1, #0
 8002164:	4818      	ldr	r0, [pc, #96]	; (80021c8 <measurementWithExtAdcDone+0xa0>)
 8002166:	f004 ff1b 	bl	8006fa0 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_2);
 800216a:	2104      	movs	r1, #4
 800216c:	4816      	ldr	r0, [pc, #88]	; (80021c8 <measurementWithExtAdcDone+0xa0>)
 800216e:	f004 ff17 	bl	8006fa0 <HAL_TIM_PWM_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8002172:	2100      	movs	r1, #0
 8002174:	4815      	ldr	r0, [pc, #84]	; (80021cc <measurementWithExtAdcDone+0xa4>)
 8002176:	f004 ff13 	bl	8006fa0 <HAL_TIM_PWM_Stop_IT>
		set_LED2(0);
 800217a:	2000      	movs	r0, #0
 800217c:	f7fe ff2c 	bl	8000fd8 <set_LED2>
		state.extAdcReadyToSend = 1;
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <measurementWithExtAdcDone+0xa8>)
 8002182:	2201      	movs	r2, #1
 8002184:	705a      	strb	r2, [r3, #1]
		state.extAdcMeasuring = 0;
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <measurementWithExtAdcDone+0xa8>)
 8002188:	2200      	movs	r2, #0
 800218a:	71da      	strb	r2, [r3, #7]
		filledBuffersExtADC = 0;
 800218c:	4b0b      	ldr	r3, [pc, #44]	; (80021bc <measurementWithExtAdcDone+0x94>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
		goToIdleAfterMeasurement();
 8002192:	f000 f907 	bl	80023a4 <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 8002196:	4b0e      	ldr	r3, [pc, #56]	; (80021d0 <measurementWithExtAdcDone+0xa8>)
 8002198:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d106      	bne.n	80021ae <measurementWithExtAdcDone+0x86>
			state.extAdcActiveState = 0;
 80021a0:	4b0b      	ldr	r3, [pc, #44]	; (80021d0 <measurementWithExtAdcDone+0xa8>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	711a      	strb	r2, [r3, #4]
			state.extAdcSetState = 0;
 80021a6:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <measurementWithExtAdcDone+0xa8>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	729a      	strb	r2, [r3, #10]
}
 80021ac:	e001      	b.n	80021b2 <measurementWithExtAdcDone+0x8a>
			prepareForPolarizationPhaseIfPossible();
 80021ae:	f000 fbaf 	bl	8002910 <prepareForPolarizationPhaseIfPossible>
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	40013000 	.word	0x40013000
 80021bc:	200001f8 	.word	0x200001f8
 80021c0:	20019920 	.word	0x20019920
 80021c4:	2005a848 	.word	0x2005a848
 80021c8:	2005a808 	.word	0x2005a808
 80021cc:	2005a470 	.word	0x2005a470
 80021d0:	2002f1a8 	.word	0x2002f1a8

080021d4 <measurementWithIntAdcDone>:

void measurementWithIntAdcDone() {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	//stop the ADC when in interrupt
	//if function HAL_ADC_Stop_DMA(&hadc1) would be called, it wouldn't be possible to Start DMA again.
	ADC1->CR2 &= ~ADC_CR2_DMA;
 80021d8:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <measurementWithIntAdcDone+0x7c>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a1c      	ldr	r2, [pc, #112]	; (8002250 <measurementWithIntAdcDone+0x7c>)
 80021de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021e2:	6093      	str	r3, [r2, #8]

	filledBuffersIntADC++;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	; (8002254 <measurementWithIntAdcDone+0x80>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	4b19      	ldr	r3, [pc, #100]	; (8002254 <measurementWithIntAdcDone+0x80>)
 80021ee:	701a      	strb	r2, [r3, #0]

	//first buffer is filled
	if (filledBuffersIntADC == 1) {
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <measurementWithIntAdcDone+0x80>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d106      	bne.n	8002206 <measurementWithIntAdcDone+0x32>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &buffer_intAdc_2.uint16, samplesPerPeriod);
 80021f8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80021fc:	4916      	ldr	r1, [pc, #88]	; (8002258 <measurementWithIntAdcDone+0x84>)
 80021fe:	4817      	ldr	r0, [pc, #92]	; (800225c <measurementWithIntAdcDone+0x88>)
 8002200:	f001 fb7e 	bl	8003900 <HAL_ADC_Start_DMA>
		// if there are remaning
		else {
			prepareForPolarizationPhaseIfPossible();
		}
	}
}
 8002204:	e022      	b.n	800224c <measurementWithIntAdcDone+0x78>
	else if (filledBuffersIntADC == 2) {
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <measurementWithIntAdcDone+0x80>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d11e      	bne.n	800224c <measurementWithIntAdcDone+0x78>
		HAL_TIM_Base_Stop_IT(&htim6);
 800220e:	4814      	ldr	r0, [pc, #80]	; (8002260 <measurementWithIntAdcDone+0x8c>)
 8002210:	f004 fde6 	bl	8006de0 <HAL_TIM_Base_Stop_IT>
		set_LED3(0);
 8002214:	2000      	movs	r0, #0
 8002216:	f7fe fef1 	bl	8000ffc <set_LED3>
		filledBuffersIntADC = 0;
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <measurementWithIntAdcDone+0x80>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
		state.intAdcReadyToSend = 1;
 8002220:	4b10      	ldr	r3, [pc, #64]	; (8002264 <measurementWithIntAdcDone+0x90>)
 8002222:	2201      	movs	r2, #1
 8002224:	709a      	strb	r2, [r3, #2]
		state.intAdcMeasuring = 0;
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <measurementWithIntAdcDone+0x90>)
 8002228:	2200      	movs	r2, #0
 800222a:	721a      	strb	r2, [r3, #8]
		goToIdleAfterMeasurement();
 800222c:	f000 f8ba 	bl	80023a4 <goToIdleAfterMeasurement>
		if (state.remainingMeasurements == 0) {
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <measurementWithIntAdcDone+0x90>)
 8002232:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <measurementWithIntAdcDone+0x74>
			state.intAdcActiveState = 0;
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <measurementWithIntAdcDone+0x90>)
 800223c:	2200      	movs	r2, #0
 800223e:	715a      	strb	r2, [r3, #5]
			state.intAdcSetState = 0;
 8002240:	4b08      	ldr	r3, [pc, #32]	; (8002264 <measurementWithIntAdcDone+0x90>)
 8002242:	2200      	movs	r2, #0
 8002244:	72da      	strb	r2, [r3, #11]
}
 8002246:	e001      	b.n	800224c <measurementWithIntAdcDone+0x78>
			prepareForPolarizationPhaseIfPossible();
 8002248:	f000 fb62 	bl	8002910 <prepareForPolarizationPhaseIfPossible>
}
 800224c:	bf00      	nop
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40012000 	.word	0x40012000
 8002254:	200001f9 	.word	0x200001f9
 8002258:	20004098 	.word	0x20004098
 800225c:	2005a63c 	.word	0x2005a63c
 8002260:	2005a7c8 	.word	0x2005a7c8
 8002264:	2002f1a8 	.word	0x2002f1a8

08002268 <measurementWithCompDone>:

void measurementWithCompDone(TIM_HandleTypeDef *htim) {
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8002270:	2100      	movs	r1, #0
 8002272:	4810      	ldr	r0, [pc, #64]	; (80022b4 <measurementWithCompDone+0x4c>)
 8002274:	f005 f856 	bl	8007324 <HAL_TIM_IC_Stop_DMA>
	set_LED4(0);
 8002278:	2000      	movs	r0, #0
 800227a:	f7fe fed1 	bl	8001020 <set_LED4>
	state.compReadyToSend = 1;
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <measurementWithCompDone+0x50>)
 8002280:	2201      	movs	r2, #1
 8002282:	70da      	strb	r2, [r3, #3]
	state.compMeasuring = 0;
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <measurementWithCompDone+0x50>)
 8002286:	2200      	movs	r2, #0
 8002288:	725a      	strb	r2, [r3, #9]

	goToIdleAfterMeasurement();
 800228a:	f000 f88b 	bl	80023a4 <goToIdleAfterMeasurement>

	//if freq should be measured only once, after the measurement, go to idle state
	if (state.remainingMeasurements == 0) {
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <measurementWithCompDone+0x50>)
 8002290:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d106      	bne.n	80022a6 <measurementWithCompDone+0x3e>
		state.compActiveState = 0;
 8002298:	4b07      	ldr	r3, [pc, #28]	; (80022b8 <measurementWithCompDone+0x50>)
 800229a:	2200      	movs	r2, #0
 800229c:	719a      	strb	r2, [r3, #6]
		state.compSetState = 0;
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <measurementWithCompDone+0x50>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	731a      	strb	r2, [r3, #12]
	} else {
		prepareForPolarizationPhaseIfPossible();
	}
}
 80022a4:	e001      	b.n	80022aa <measurementWithCompDone+0x42>
		prepareForPolarizationPhaseIfPossible();
 80022a6:	f000 fb33 	bl	8002910 <prepareForPolarizationPhaseIfPossible>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	2005a8ac 	.word	0x2005a8ac
 80022b8:	2002f1a8 	.word	0x2002f1a8

080022bc <HAL_TIM_IC_CaptureCallback>:

//comparator finished measuring
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022cc:	d102      	bne.n	80022d4 <HAL_TIM_IC_CaptureCallback+0x18>
		measurementWithCompDone(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff ffca 	bl	8002268 <measurementWithCompDone>
	}
}
 80022d4:	bf00      	nop
 80022d6:	3708      	adds	r7, #8
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_ADC_ConvCpltCallback>:

//intADC - buffer filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1) {
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a04      	ldr	r2, [pc, #16]	; (80022fc <HAL_ADC_ConvCpltCallback+0x20>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConvCpltCallback+0x16>
		measurementWithIntAdcDone();
 80022ee:	f7ff ff71 	bl	80021d4 <measurementWithIntAdcDone>
	}
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40012000 	.word	0x40012000

08002300 <HAL_UART_RxCpltCallback>:

//char received with via USB
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a11      	ldr	r2, [pc, #68]	; (8002354 <HAL_UART_RxCpltCallback+0x54>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d11b      	bne.n	800234a <HAL_UART_RxCpltCallback+0x4a>
		//receivedCharIndex shouldn't exceed 100
		receivedChars[(receivedCharIndex++) % 100] = buffer_uart_rx[0];
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_UART_RxCpltCallback+0x58>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	b2d1      	uxtb	r1, r2
 800231a:	4a0f      	ldr	r2, [pc, #60]	; (8002358 <HAL_UART_RxCpltCallback+0x58>)
 800231c:	7011      	strb	r1, [r2, #0]
 800231e:	4a0f      	ldr	r2, [pc, #60]	; (800235c <HAL_UART_RxCpltCallback+0x5c>)
 8002320:	fba2 1203 	umull	r1, r2, r2, r3
 8002324:	0952      	lsrs	r2, r2, #5
 8002326:	2164      	movs	r1, #100	; 0x64
 8002328:	fb01 f202 	mul.w	r2, r1, r2
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_UART_RxCpltCallback+0x60>)
 8002334:	7819      	ldrb	r1, [r3, #0]
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_UART_RxCpltCallback+0x64>)
 8002338:	5499      	strb	r1, [r3, r2]
		state.newDataInBuffer = 1;
 800233a:	4b0b      	ldr	r3, [pc, #44]	; (8002368 <HAL_UART_RxCpltCallback+0x68>)
 800233c:	2201      	movs	r2, #1
 800233e:	759a      	strb	r2, [r3, #22]
		HAL_UART_Receive_IT(&huart3, buffer_uart_rx, 1);
 8002340:	2201      	movs	r2, #1
 8002342:	4907      	ldr	r1, [pc, #28]	; (8002360 <HAL_UART_RxCpltCallback+0x60>)
 8002344:	4809      	ldr	r0, [pc, #36]	; (800236c <HAL_UART_RxCpltCallback+0x6c>)
 8002346:	f006 fcb9 	bl	8008cbc <HAL_UART_Receive_IT>
	}
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40004800 	.word	0x40004800
 8002358:	2002f230 	.word	0x2002f230
 800235c:	51eb851f 	.word	0x51eb851f
 8002360:	20004090 	.word	0x20004090
 8002364:	2002f1cc 	.word	0x2002f1cc
 8002368:	2002f1a8 	.word	0x2002f1a8
 800236c:	2005a4f0 	.word	0x2005a4f0

08002370 <HAL_SPI_RxCpltCallback>:


//extADC - buffer filled
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_SPI_RxCpltCallback+0x20>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_SPI_RxCpltCallback+0x16>
		measurementWithExtAdcDone();
 8002382:	f7ff fed1 	bl	8002128 <measurementWithExtAdcDone>
	}
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40013000 	.word	0x40013000

08002394 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <goToIdleAfterMeasurement>:

#include "measruementController.h"
#include"main.h"


void goToIdleAfterMeasurement() {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	//only if all measurements were done
	if ((state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 80023a8:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 80023aa:	79db      	ldrb	r3, [r3, #7]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d138      	bne.n	8002422 <goToIdleAfterMeasurement+0x7e>
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 80023b2:	7a1b      	ldrb	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d134      	bne.n	8002422 <goToIdleAfterMeasurement+0x7e>
 80023b8:	4b1b      	ldr	r3, [pc, #108]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 80023ba:	7a5b      	ldrb	r3, [r3, #9]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d130      	bne.n	8002422 <goToIdleAfterMeasurement+0x7e>
		switchingCircuitIdle();
 80023c0:	f001 f946 	bl	8003650 <switchingCircuitIdle>
		set_LED1(0, 0, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2100      	movs	r1, #0
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe fde1 	bl	8000f90 <set_LED1>
		state.index++;
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	3301      	adds	r3, #1
 80023d4:	4a14      	ldr	r2, [pc, #80]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 80023d6:	61d3      	str	r3, [r2, #28]
		// -1 indicates infinity measurements
		if (canDecreaseRemainingMeasurements()) {
 80023d8:	f000 fa6c 	bl	80028b4 <canDecreaseRemainingMeasurements>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d01f      	beq.n	8002422 <goToIdleAfterMeasurement+0x7e>
			state.remainingMeasurements--;
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 80023e4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80023e8:	b29b      	uxth	r3, r3
 80023ea:	3b01      	subs	r3, #1
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b21a      	sxth	r2, r3
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 80023f2:	81da      	strh	r2, [r3, #14]
			//if this was the last measurement - set all states to 0
			if (state.remainingMeasurements == 0) {
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 80023f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d111      	bne.n	8002422 <goToIdleAfterMeasurement+0x7e>
				state.extAdcActiveState = 0;
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 8002400:	2200      	movs	r2, #0
 8002402:	711a      	strb	r2, [r3, #4]
				state.extAdcSetState = 0;
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 8002406:	2200      	movs	r2, #0
 8002408:	729a      	strb	r2, [r3, #10]
				state.intAdcActiveState = 0;
 800240a:	4b07      	ldr	r3, [pc, #28]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 800240c:	2200      	movs	r2, #0
 800240e:	715a      	strb	r2, [r3, #5]
				state.intAdcSetState = 0;
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 8002412:	2200      	movs	r2, #0
 8002414:	72da      	strb	r2, [r3, #11]
				state.compActiveState = 0;
 8002416:	4b04      	ldr	r3, [pc, #16]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 8002418:	2200      	movs	r2, #0
 800241a:	719a      	strb	r2, [r3, #6]
				state.compSetState = 0;
 800241c:	4b02      	ldr	r3, [pc, #8]	; (8002428 <goToIdleAfterMeasurement+0x84>)
 800241e:	2200      	movs	r2, #0
 8002420:	731a      	strb	r2, [r3, #12]
			}
		}
	}
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2002f1a8 	.word	0x2002f1a8

0800242c <setMeasurementPeriod>:



void setMeasurementPeriod(uint16_t time) {
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	80fb      	strh	r3, [r7, #6]
	if (time > 2000) {
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800243c:	d90a      	bls.n	8002454 <setMeasurementPeriod+0x28>
		state.polarizationPeriod = time - 2100;
 800243e:	88fb      	ldrh	r3, [r7, #6]
 8002440:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
 8002444:	b29b      	uxth	r3, r3
 8002446:	b21a      	sxth	r2, r3
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <setMeasurementPeriod+0x34>)
 800244a:	829a      	strh	r2, [r3, #20]
		state.wholeMeasurementPeriod = time;
 800244c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002450:	4b03      	ldr	r3, [pc, #12]	; (8002460 <setMeasurementPeriod+0x34>)
 8002452:	825a      	strh	r2, [r3, #18]
	}
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr
 8002460:	2002f1a8 	.word	0x2002f1a8

08002464 <changeStateMode>:
 *      Author: OBU
 */

#include "stateController.h"

void changeStateMode() {
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
	if (state.waitForSync == 0) {
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <changeStateMode+0x48>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d114      	bne.n	800249a <changeStateMode+0x36>
		state.extAdcSetState = 1;
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <changeStateMode+0x48>)
 8002472:	2201      	movs	r2, #1
 8002474:	729a      	strb	r2, [r3, #10]
		state.intAdcSetState = 0;
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <changeStateMode+0x48>)
 8002478:	2200      	movs	r2, #0
 800247a:	72da      	strb	r2, [r3, #11]
		state.compSetState = 0;
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <changeStateMode+0x48>)
 800247e:	2200      	movs	r2, #0
 8002480:	731a      	strb	r2, [r3, #12]

		state.extAdcActiveState = 1;
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <changeStateMode+0x48>)
 8002484:	2201      	movs	r2, #1
 8002486:	711a      	strb	r2, [r3, #4]
		state.intAdcActiveState = 0;
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <changeStateMode+0x48>)
 800248a:	2200      	movs	r2, #0
 800248c:	715a      	strb	r2, [r3, #5]
		state.compActiveState = 0;
 800248e:	4b07      	ldr	r3, [pc, #28]	; (80024ac <changeStateMode+0x48>)
 8002490:	2200      	movs	r2, #0
 8002492:	719a      	strb	r2, [r3, #6]

		setStateToMeasureOnSync();
 8002494:	f000 f89c 	bl	80025d0 <setStateToMeasureOnSync>
	} else if (state.waitForSync == 1) {
		state.waitForSync = 0;

	}
}
 8002498:	e006      	b.n	80024a8 <changeStateMode+0x44>
	} else if (state.waitForSync == 1) {
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <changeStateMode+0x48>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d102      	bne.n	80024a8 <changeStateMode+0x44>
		state.waitForSync = 0;
 80024a2:	4b02      	ldr	r3, [pc, #8]	; (80024ac <changeStateMode+0x48>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	2002f1a8 	.word	0x2002f1a8

080024b0 <stateCanBeUpdated>:

int stateCanBeUpdated() {
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
	return (state.measureTechniqueUpdated && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 80024b4:	4b11      	ldr	r3, [pc, #68]	; (80024fc <stateCanBeUpdated+0x4c>)
 80024b6:	7ddb      	ldrb	r3, [r3, #23]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d019      	beq.n	80024f0 <stateCanBeUpdated+0x40>
 80024bc:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <stateCanBeUpdated+0x4c>)
 80024be:	79db      	ldrb	r3, [r3, #7]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d115      	bne.n	80024f0 <stateCanBeUpdated+0x40>
 80024c4:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <stateCanBeUpdated+0x4c>)
 80024c6:	7a1b      	ldrb	r3, [r3, #8]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d111      	bne.n	80024f0 <stateCanBeUpdated+0x40>
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <stateCanBeUpdated+0x4c>)
 80024ce:	7a5b      	ldrb	r3, [r3, #9]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10d      	bne.n	80024f0 <stateCanBeUpdated+0x40>
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <stateCanBeUpdated+0x4c>)
 80024d6:	785b      	ldrb	r3, [r3, #1]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d109      	bne.n	80024f0 <stateCanBeUpdated+0x40>
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <stateCanBeUpdated+0x4c>)
 80024de:	789b      	ldrb	r3, [r3, #2]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <stateCanBeUpdated+0x40>
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <stateCanBeUpdated+0x4c>)
 80024e6:	78db      	ldrb	r3, [r3, #3]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <stateCanBeUpdated+0x40>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <stateCanBeUpdated+0x42>
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	2002f1a8 	.word	0x2002f1a8

08002500 <updateState>:

void updateState() {
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
	state.remainingMeasurements = state.setMeasurements;
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <updateState+0x3c>)
 8002506:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <updateState+0x3c>)
 800250c:	81da      	strh	r2, [r3, #14]
	state.extAdcActiveState = state.extAdcSetState;
 800250e:	4b0b      	ldr	r3, [pc, #44]	; (800253c <updateState+0x3c>)
 8002510:	7a9a      	ldrb	r2, [r3, #10]
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <updateState+0x3c>)
 8002514:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = state.intAdcSetState;
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <updateState+0x3c>)
 8002518:	7ada      	ldrb	r2, [r3, #11]
 800251a:	4b08      	ldr	r3, [pc, #32]	; (800253c <updateState+0x3c>)
 800251c:	715a      	strb	r2, [r3, #5]
	state.compActiveState = state.compSetState;
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <updateState+0x3c>)
 8002520:	7b1a      	ldrb	r2, [r3, #12]
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <updateState+0x3c>)
 8002524:	719a      	strb	r2, [r3, #6]
	state.preparedToRunPolarizationPhase = 1;
 8002526:	4b05      	ldr	r3, [pc, #20]	; (800253c <updateState+0x3c>)
 8002528:	2201      	movs	r2, #1
 800252a:	761a      	strb	r2, [r3, #24]
	state.measureTechniqueUpdated = 0;
 800252c:	4b03      	ldr	r3, [pc, #12]	; (800253c <updateState+0x3c>)
 800252e:	2200      	movs	r2, #0
 8002530:	75da      	strb	r2, [r3, #23]
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	2002f1a8 	.word	0x2002f1a8

08002540 <setStateToDefault>:


void setStateToDefault() {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	state.waitForSync = 0;
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <setStateToDefault+0x8c>)
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]
	state.extAdcReadyToSend = 0;
 800254a:	4b20      	ldr	r3, [pc, #128]	; (80025cc <setStateToDefault+0x8c>)
 800254c:	2200      	movs	r2, #0
 800254e:	705a      	strb	r2, [r3, #1]
	state.intAdcReadyToSend = 0;
 8002550:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <setStateToDefault+0x8c>)
 8002552:	2200      	movs	r2, #0
 8002554:	709a      	strb	r2, [r3, #2]
	state.compReadyToSend = 0;
 8002556:	4b1d      	ldr	r3, [pc, #116]	; (80025cc <setStateToDefault+0x8c>)
 8002558:	2200      	movs	r2, #0
 800255a:	70da      	strb	r2, [r3, #3]

	state.extAdcActiveState = 1;
 800255c:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <setStateToDefault+0x8c>)
 800255e:	2201      	movs	r2, #1
 8002560:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = 0;
 8002562:	4b1a      	ldr	r3, [pc, #104]	; (80025cc <setStateToDefault+0x8c>)
 8002564:	2200      	movs	r2, #0
 8002566:	715a      	strb	r2, [r3, #5]
	state.compActiveState = 1;
 8002568:	4b18      	ldr	r3, [pc, #96]	; (80025cc <setStateToDefault+0x8c>)
 800256a:	2201      	movs	r2, #1
 800256c:	719a      	strb	r2, [r3, #6]

	state.extAdcMeasuring = 0;
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <setStateToDefault+0x8c>)
 8002570:	2200      	movs	r2, #0
 8002572:	71da      	strb	r2, [r3, #7]
	state.intAdcMeasuring = 0;
 8002574:	4b15      	ldr	r3, [pc, #84]	; (80025cc <setStateToDefault+0x8c>)
 8002576:	2200      	movs	r2, #0
 8002578:	721a      	strb	r2, [r3, #8]
	state.compMeasuring = 0;
 800257a:	4b14      	ldr	r3, [pc, #80]	; (80025cc <setStateToDefault+0x8c>)
 800257c:	2200      	movs	r2, #0
 800257e:	725a      	strb	r2, [r3, #9]

	state.extAdcSetState = 1;
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <setStateToDefault+0x8c>)
 8002582:	2201      	movs	r2, #1
 8002584:	729a      	strb	r2, [r3, #10]
	state.intAdcSetState = 0;
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <setStateToDefault+0x8c>)
 8002588:	2200      	movs	r2, #0
 800258a:	72da      	strb	r2, [r3, #11]
	state.compSetState = 0;
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <setStateToDefault+0x8c>)
 800258e:	2200      	movs	r2, #0
 8002590:	731a      	strb	r2, [r3, #12]

	state.remainingMeasurements = -1;
 8002592:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <setStateToDefault+0x8c>)
 8002594:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002598:	81da      	strh	r2, [r3, #14]
	state.setMeasurements = -1;
 800259a:	4b0c      	ldr	r3, [pc, #48]	; (80025cc <setStateToDefault+0x8c>)
 800259c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025a0:	821a      	strh	r2, [r3, #16]
	setMeasurementPeriod(8000);		//8 sec
 80025a2:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80025a6:	f7ff ff41 	bl	800242c <setMeasurementPeriod>

	state.newDataInBuffer = 0;
 80025aa:	4b08      	ldr	r3, [pc, #32]	; (80025cc <setStateToDefault+0x8c>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	759a      	strb	r2, [r3, #22]
	state.measureTechniqueUpdated = 0;
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <setStateToDefault+0x8c>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	75da      	strb	r2, [r3, #23]
	state.preparedToRunPolarizationPhase = 1;
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <setStateToDefault+0x8c>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	761a      	strb	r2, [r3, #24]
	state.preparedToRunMeasurementPhase = 0;
 80025bc:	4b03      	ldr	r3, [pc, #12]	; (80025cc <setStateToDefault+0x8c>)
 80025be:	2200      	movs	r2, #0
 80025c0:	765a      	strb	r2, [r3, #25]
	state.index = 0;
 80025c2:	4b02      	ldr	r3, [pc, #8]	; (80025cc <setStateToDefault+0x8c>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	61da      	str	r2, [r3, #28]

}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2002f1a8 	.word	0x2002f1a8

080025d0 <setStateToMeasureOnSync>:

void setStateToMeasureOnSync() {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	state.waitForSync = 1;
 80025d4:	4b28      	ldr	r3, [pc, #160]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]

	state.extAdcReadyToSend = 0;
 80025da:	4b27      	ldr	r3, [pc, #156]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 80025dc:	2200      	movs	r2, #0
 80025de:	705a      	strb	r2, [r3, #1]
	state.intAdcReadyToSend = 0;
 80025e0:	4b25      	ldr	r3, [pc, #148]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	709a      	strb	r2, [r3, #2]
	state.compReadyToSend = 0;
 80025e6:	4b24      	ldr	r3, [pc, #144]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	70da      	strb	r2, [r3, #3]

	state.extAdcActiveState = state.extAdcSetState;
 80025ec:	4b22      	ldr	r3, [pc, #136]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 80025ee:	7a9a      	ldrb	r2, [r3, #10]
 80025f0:	4b21      	ldr	r3, [pc, #132]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 80025f2:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = state.intAdcSetState;
 80025f4:	4b20      	ldr	r3, [pc, #128]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 80025f6:	7ada      	ldrb	r2, [r3, #11]
 80025f8:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 80025fa:	715a      	strb	r2, [r3, #5]
	state.compActiveState = state.compSetState;
 80025fc:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 80025fe:	7b1a      	ldrb	r2, [r3, #12]
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 8002602:	719a      	strb	r2, [r3, #6]

	state.extAdcMeasuring = 0;
 8002604:	4b1c      	ldr	r3, [pc, #112]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 8002606:	2200      	movs	r2, #0
 8002608:	71da      	strb	r2, [r3, #7]
	state.intAdcMeasuring = 0;
 800260a:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 800260c:	2200      	movs	r2, #0
 800260e:	721a      	strb	r2, [r3, #8]
	state.compMeasuring = 0;
 8002610:	4b19      	ldr	r3, [pc, #100]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 8002612:	2200      	movs	r2, #0
 8002614:	725a      	strb	r2, [r3, #9]

	state.remainingMeasurements = -1;
 8002616:	4b18      	ldr	r3, [pc, #96]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 8002618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800261c:	81da      	strh	r2, [r3, #14]
	state.setMeasurements = -1;
 800261e:	4b16      	ldr	r3, [pc, #88]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 8002620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002624:	821a      	strh	r2, [r3, #16]
	state.wholeMeasurementPeriod = 0; 	//in ms -> 5 sec
 8002626:	4b14      	ldr	r3, [pc, #80]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 8002628:	2200      	movs	r2, #0
 800262a:	825a      	strh	r2, [r3, #18]
	state.polarizationPeriod = 0; 		//in ms -> 3 sec
 800262c:	4b12      	ldr	r3, [pc, #72]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 800262e:	2200      	movs	r2, #0
 8002630:	829a      	strh	r2, [r3, #20]

	remainingTimeToNextMeasurement = 0;
 8002632:	4b12      	ldr	r3, [pc, #72]	; (800267c <setStateToMeasureOnSync+0xac>)
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
	remainingPolarizationTime = 0;
 8002638:	4b11      	ldr	r3, [pc, #68]	; (8002680 <setStateToMeasureOnSync+0xb0>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
	setMeasurementPeriod(2000);
 800263e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002642:	f7ff fef3 	bl	800242c <setMeasurementPeriod>

	state.newDataInBuffer = 0;
 8002646:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 8002648:	2200      	movs	r2, #0
 800264a:	759a      	strb	r2, [r3, #22]
	state.measureTechniqueUpdated = 0;
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 800264e:	2200      	movs	r2, #0
 8002650:	75da      	strb	r2, [r3, #23]
	state.preparedToRunPolarizationPhase = 0;
 8002652:	4b09      	ldr	r3, [pc, #36]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 8002654:	2200      	movs	r2, #0
 8002656:	761a      	strb	r2, [r3, #24]
	state.preparedToRunMeasurementPhase = 0;
 8002658:	4b07      	ldr	r3, [pc, #28]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 800265a:	2200      	movs	r2, #0
 800265c:	765a      	strb	r2, [r3, #25]
	state.index = 0;
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <setStateToMeasureOnSync+0xa8>)
 8002660:	2200      	movs	r2, #0
 8002662:	61da      	str	r2, [r3, #28]

	set_LED1(0, 0, 0);
 8002664:	2200      	movs	r2, #0
 8002666:	2100      	movs	r1, #0
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe fc91 	bl	8000f90 <set_LED1>
	switchingCircuitIdle();
 800266e:	f000 ffef 	bl	8003650 <switchingCircuitIdle>

}
 8002672:	bf00      	nop
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	2002f1a8 	.word	0x2002f1a8
 800267c:	20004094 	.word	0x20004094
 8002680:	2000408c 	.word	0x2000408c

08002684 <setStateToIdle>:

void setStateToIdle() {
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
	state.extAdcReadyToSend = 0;
 8002688:	4b20      	ldr	r3, [pc, #128]	; (800270c <setStateToIdle+0x88>)
 800268a:	2200      	movs	r2, #0
 800268c:	705a      	strb	r2, [r3, #1]
	state.intAdcReadyToSend = 0;
 800268e:	4b1f      	ldr	r3, [pc, #124]	; (800270c <setStateToIdle+0x88>)
 8002690:	2200      	movs	r2, #0
 8002692:	709a      	strb	r2, [r3, #2]
	state.compReadyToSend = 0;
 8002694:	4b1d      	ldr	r3, [pc, #116]	; (800270c <setStateToIdle+0x88>)
 8002696:	2200      	movs	r2, #0
 8002698:	70da      	strb	r2, [r3, #3]

	state.extAdcActiveState = 0;
 800269a:	4b1c      	ldr	r3, [pc, #112]	; (800270c <setStateToIdle+0x88>)
 800269c:	2200      	movs	r2, #0
 800269e:	711a      	strb	r2, [r3, #4]
	state.intAdcActiveState = 0;
 80026a0:	4b1a      	ldr	r3, [pc, #104]	; (800270c <setStateToIdle+0x88>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	715a      	strb	r2, [r3, #5]
	state.compActiveState = 0;
 80026a6:	4b19      	ldr	r3, [pc, #100]	; (800270c <setStateToIdle+0x88>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	719a      	strb	r2, [r3, #6]

	state.extAdcMeasuring = 0;
 80026ac:	4b17      	ldr	r3, [pc, #92]	; (800270c <setStateToIdle+0x88>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	71da      	strb	r2, [r3, #7]
	state.intAdcMeasuring = 0;
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <setStateToIdle+0x88>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	721a      	strb	r2, [r3, #8]
	state.compMeasuring = 0;
 80026b8:	4b14      	ldr	r3, [pc, #80]	; (800270c <setStateToIdle+0x88>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	725a      	strb	r2, [r3, #9]

	state.extAdcSetState = 0;
 80026be:	4b13      	ldr	r3, [pc, #76]	; (800270c <setStateToIdle+0x88>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	729a      	strb	r2, [r3, #10]
	state.intAdcSetState = 0;
 80026c4:	4b11      	ldr	r3, [pc, #68]	; (800270c <setStateToIdle+0x88>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	72da      	strb	r2, [r3, #11]
	state.compSetState = 0;
 80026ca:	4b10      	ldr	r3, [pc, #64]	; (800270c <setStateToIdle+0x88>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	731a      	strb	r2, [r3, #12]

	state.remainingMeasurements = 0;
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <setStateToIdle+0x88>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	81da      	strh	r2, [r3, #14]
	state.setMeasurements = 0;
 80026d6:	4b0d      	ldr	r3, [pc, #52]	; (800270c <setStateToIdle+0x88>)
 80026d8:	2200      	movs	r2, #0
 80026da:	821a      	strh	r2, [r3, #16]
	state.wholeMeasurementPeriod = 0; 	//in ms -> 5 sec
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <setStateToIdle+0x88>)
 80026de:	2200      	movs	r2, #0
 80026e0:	825a      	strh	r2, [r3, #18]
	state.polarizationPeriod = 0; 		//in ms -> 3 sec
 80026e2:	4b0a      	ldr	r3, [pc, #40]	; (800270c <setStateToIdle+0x88>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	829a      	strh	r2, [r3, #20]

	state.measureTechniqueUpdated = 0;
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <setStateToIdle+0x88>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	75da      	strb	r2, [r3, #23]
	state.preparedToRunPolarizationPhase = 0;
 80026ee:	4b07      	ldr	r3, [pc, #28]	; (800270c <setStateToIdle+0x88>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	761a      	strb	r2, [r3, #24]
	state.preparedToRunMeasurementPhase = 0;
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <setStateToIdle+0x88>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	765a      	strb	r2, [r3, #25]
	state.index = 0;
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <setStateToIdle+0x88>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	61da      	str	r2, [r3, #28]
}
 8002700:	bf00      	nop
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	2002f1a8 	.word	0x2002f1a8

08002710 <lastMeasurement>:


int lastMeasurement() {
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
	return (state.remainingMeasurements == 0);
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <lastMeasurement+0x20>)
 8002716:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800271a:	2b00      	cmp	r3, #0
 800271c:	bf0c      	ite	eq
 800271e:	2301      	moveq	r3, #1
 8002720:	2300      	movne	r3, #0
 8002722:	b2db      	uxtb	r3, r3
}
 8002724:	4618      	mov	r0, r3
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	2002f1a8 	.word	0x2002f1a8

08002734 <ploarizationCanRun>:


// polarization can run even if data are sending
int ploarizationCanRun() {
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
	return (state.waitForSync == 0 && remainingTimeToNextMeasurement == 0 && state.preparedToRunPolarizationPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring);
 8002738:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <ploarizationCanRun+0x44>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d115      	bne.n	800276c <ploarizationCanRun+0x38>
 8002740:	4b0e      	ldr	r3, [pc, #56]	; (800277c <ploarizationCanRun+0x48>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d111      	bne.n	800276c <ploarizationCanRun+0x38>
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <ploarizationCanRun+0x44>)
 800274a:	7e1b      	ldrb	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00d      	beq.n	800276c <ploarizationCanRun+0x38>
 8002750:	4b09      	ldr	r3, [pc, #36]	; (8002778 <ploarizationCanRun+0x44>)
 8002752:	79db      	ldrb	r3, [r3, #7]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d109      	bne.n	800276c <ploarizationCanRun+0x38>
 8002758:	4b07      	ldr	r3, [pc, #28]	; (8002778 <ploarizationCanRun+0x44>)
 800275a:	7a1b      	ldrb	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d105      	bne.n	800276c <ploarizationCanRun+0x38>
 8002760:	4b05      	ldr	r3, [pc, #20]	; (8002778 <ploarizationCanRun+0x44>)
 8002762:	7a5b      	ldrb	r3, [r3, #9]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <ploarizationCanRun+0x38>
 8002768:	2301      	movs	r3, #1
 800276a:	e000      	b.n	800276e <ploarizationCanRun+0x3a>
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	2002f1a8 	.word	0x2002f1a8
 800277c:	20004094 	.word	0x20004094

08002780 <measurementCanRun>:

// measurement sequence can run if polarization can run and all the data
int measurementCanRun() {
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
	return (remainingPolarizationTime == 0 && state.preparedToRunMeasurementPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <measurementCanRun+0x54>)
 8002786:	681b      	ldr	r3, [r3, #0]
			&& !state.intAdcReadyToSend && !state.compReadyToSend);
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11d      	bne.n	80027c8 <measurementCanRun+0x48>
	return (remainingPolarizationTime == 0 && state.preparedToRunMeasurementPhase && !state.extAdcMeasuring && !state.intAdcMeasuring && !state.compMeasuring && !state.extAdcReadyToSend
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <measurementCanRun+0x58>)
 800278e:	7e5b      	ldrb	r3, [r3, #25]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d019      	beq.n	80027c8 <measurementCanRun+0x48>
 8002794:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <measurementCanRun+0x58>)
 8002796:	79db      	ldrb	r3, [r3, #7]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d115      	bne.n	80027c8 <measurementCanRun+0x48>
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <measurementCanRun+0x58>)
 800279e:	7a1b      	ldrb	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <measurementCanRun+0x48>
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <measurementCanRun+0x58>)
 80027a6:	7a5b      	ldrb	r3, [r3, #9]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d10d      	bne.n	80027c8 <measurementCanRun+0x48>
 80027ac:	4b0a      	ldr	r3, [pc, #40]	; (80027d8 <measurementCanRun+0x58>)
 80027ae:	785b      	ldrb	r3, [r3, #1]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <measurementCanRun+0x48>
			&& !state.intAdcReadyToSend && !state.compReadyToSend);
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <measurementCanRun+0x58>)
 80027b6:	789b      	ldrb	r3, [r3, #2]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d105      	bne.n	80027c8 <measurementCanRun+0x48>
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <measurementCanRun+0x58>)
 80027be:	78db      	ldrb	r3, [r3, #3]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d101      	bne.n	80027c8 <measurementCanRun+0x48>
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <measurementCanRun+0x4a>
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	2000408c 	.word	0x2000408c
 80027d8:	2002f1a8 	.word	0x2002f1a8

080027dc <stateIsIdle>:

int stateIsIdle() {
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
	return (!state.extAdcActiveState && !state.intAdcActiveState && !state.compActiveState && !state.extAdcReadyToSend && !state.intAdcReadyToSend && !state.compReadyToSend);
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <stateIsIdle+0x44>)
 80027e2:	791b      	ldrb	r3, [r3, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d115      	bne.n	8002814 <stateIsIdle+0x38>
 80027e8:	4b0d      	ldr	r3, [pc, #52]	; (8002820 <stateIsIdle+0x44>)
 80027ea:	795b      	ldrb	r3, [r3, #5]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d111      	bne.n	8002814 <stateIsIdle+0x38>
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <stateIsIdle+0x44>)
 80027f2:	799b      	ldrb	r3, [r3, #6]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10d      	bne.n	8002814 <stateIsIdle+0x38>
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <stateIsIdle+0x44>)
 80027fa:	785b      	ldrb	r3, [r3, #1]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d109      	bne.n	8002814 <stateIsIdle+0x38>
 8002800:	4b07      	ldr	r3, [pc, #28]	; (8002820 <stateIsIdle+0x44>)
 8002802:	789b      	ldrb	r3, [r3, #2]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <stateIsIdle+0x38>
 8002808:	4b05      	ldr	r3, [pc, #20]	; (8002820 <stateIsIdle+0x44>)
 800280a:	78db      	ldrb	r3, [r3, #3]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <stateIsIdle+0x38>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <stateIsIdle+0x3a>
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr
 8002820:	2002f1a8 	.word	0x2002f1a8

08002824 <isWaitingForSync>:

int isWaitingForSync() {
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
	return (state.waitForSync == 1 && !isMeasuring() && !isSending());
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <isWaitingForSync+0x2c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d10b      	bne.n	8002848 <isWaitingForSync+0x24>
 8002830:	f000 f810 	bl	8002854 <isMeasuring>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d106      	bne.n	8002848 <isWaitingForSync+0x24>
 800283a:	f000 f823 	bl	8002884 <isSending>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <isWaitingForSync+0x24>
 8002844:	2301      	movs	r3, #1
 8002846:	e000      	b.n	800284a <isWaitingForSync+0x26>
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2002f1a8 	.word	0x2002f1a8

08002854 <isMeasuring>:

int  isMeasuring(){
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	return (state.extAdcMeasuring || state.intAdcMeasuring || state.compMeasuring);
 8002858:	4b09      	ldr	r3, [pc, #36]	; (8002880 <isMeasuring+0x2c>)
 800285a:	79db      	ldrb	r3, [r3, #7]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d107      	bne.n	8002870 <isMeasuring+0x1c>
 8002860:	4b07      	ldr	r3, [pc, #28]	; (8002880 <isMeasuring+0x2c>)
 8002862:	7a1b      	ldrb	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d103      	bne.n	8002870 <isMeasuring+0x1c>
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <isMeasuring+0x2c>)
 800286a:	7a5b      	ldrb	r3, [r3, #9]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <isMeasuring+0x20>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <isMeasuring+0x22>
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr
 8002880:	2002f1a8 	.word	0x2002f1a8

08002884 <isSending>:
int isSending() {
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
	return (state.extAdcReadyToSend || state.intAdcReadyToSend || state.compReadyToSend);
 8002888:	4b09      	ldr	r3, [pc, #36]	; (80028b0 <isSending+0x2c>)
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d107      	bne.n	80028a0 <isSending+0x1c>
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <isSending+0x2c>)
 8002892:	789b      	ldrb	r3, [r3, #2]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d103      	bne.n	80028a0 <isSending+0x1c>
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <isSending+0x2c>)
 800289a:	78db      	ldrb	r3, [r3, #3]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d001      	beq.n	80028a4 <isSending+0x20>
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <isSending+0x22>
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	2002f1a8 	.word	0x2002f1a8

080028b4 <canDecreaseRemainingMeasurements>:

int canDecreaseRemainingMeasurements() {
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
	return ((state.remainingMeasurements > 0) && (state.intAdcActiveState || state.extAdcActiveState || state.compActiveState));
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <canDecreaseRemainingMeasurements+0x38>)
 80028ba:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	dd0d      	ble.n	80028de <canDecreaseRemainingMeasurements+0x2a>
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <canDecreaseRemainingMeasurements+0x38>)
 80028c4:	795b      	ldrb	r3, [r3, #5]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d107      	bne.n	80028da <canDecreaseRemainingMeasurements+0x26>
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <canDecreaseRemainingMeasurements+0x38>)
 80028cc:	791b      	ldrb	r3, [r3, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d103      	bne.n	80028da <canDecreaseRemainingMeasurements+0x26>
 80028d2:	4b06      	ldr	r3, [pc, #24]	; (80028ec <canDecreaseRemainingMeasurements+0x38>)
 80028d4:	799b      	ldrb	r3, [r3, #6]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <canDecreaseRemainingMeasurements+0x2a>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <canDecreaseRemainingMeasurements+0x2c>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	2002f1a8 	.word	0x2002f1a8

080028f0 <isModeMeasureOnSync>:

int isModeMeasureOnSync() {
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
	return (state.waitForSync == 1);
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <isModeMeasureOnSync+0x1c>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	2002f1a8 	.word	0x2002f1a8

08002910 <prepareForPolarizationPhaseIfPossible>:


void prepareForPolarizationPhaseIfPossible() {
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
	if ((state.waitForSync == 0) && (state.remainingMeasurements != 0) && (state.extAdcMeasuring == 0) && (state.intAdcMeasuring == 0) && (state.compMeasuring == 0)) {
 8002914:	4b0e      	ldr	r3, [pc, #56]	; (8002950 <prepareForPolarizationPhaseIfPossible+0x40>)
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d113      	bne.n	8002944 <prepareForPolarizationPhaseIfPossible+0x34>
 800291c:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <prepareForPolarizationPhaseIfPossible+0x40>)
 800291e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00e      	beq.n	8002944 <prepareForPolarizationPhaseIfPossible+0x34>
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <prepareForPolarizationPhaseIfPossible+0x40>)
 8002928:	79db      	ldrb	r3, [r3, #7]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <prepareForPolarizationPhaseIfPossible+0x34>
 800292e:	4b08      	ldr	r3, [pc, #32]	; (8002950 <prepareForPolarizationPhaseIfPossible+0x40>)
 8002930:	7a1b      	ldrb	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <prepareForPolarizationPhaseIfPossible+0x34>
 8002936:	4b06      	ldr	r3, [pc, #24]	; (8002950 <prepareForPolarizationPhaseIfPossible+0x40>)
 8002938:	7a5b      	ldrb	r3, [r3, #9]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <prepareForPolarizationPhaseIfPossible+0x34>
		state.preparedToRunPolarizationPhase = 1;
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <prepareForPolarizationPhaseIfPossible+0x40>)
 8002940:	2201      	movs	r2, #1
 8002942:	761a      	strb	r2, [r3, #24]
	}
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	2002f1a8 	.word	0x2002f1a8

08002954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800295a:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_MspInit+0x44>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <HAL_MspInit+0x44>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_MspInit+0x44>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	607b      	str	r3, [r7, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002972:	4b09      	ldr	r3, [pc, #36]	; (8002998 <HAL_MspInit+0x44>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <HAL_MspInit+0x44>)
 8002978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800297c:	6453      	str	r3, [r2, #68]	; 0x44
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_MspInit+0x44>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800

0800299c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0314 	add.w	r3, r7, #20
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
 80029b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2c      	ldr	r2, [pc, #176]	; (8002a6c <HAL_ADC_MspInit+0xd0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d152      	bne.n	8002a64 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029be:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <HAL_ADC_MspInit+0xd4>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	4a2b      	ldr	r2, [pc, #172]	; (8002a70 <HAL_ADC_MspInit+0xd4>)
 80029c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ca:	4b29      	ldr	r3, [pc, #164]	; (8002a70 <HAL_ADC_MspInit+0xd4>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d6:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <HAL_ADC_MspInit+0xd4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a25      	ldr	r2, [pc, #148]	; (8002a70 <HAL_ADC_MspInit+0xd4>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_ADC_MspInit+0xd4>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0/WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = Amp_fil_sig_int_ADC_Pin;
 80029ee:	2301      	movs	r3, #1
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f2:	2303      	movs	r3, #3
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Amp_fil_sig_int_ADC_GPIO_Port, &GPIO_InitStruct);
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	4619      	mov	r1, r3
 8002a00:	481c      	ldr	r0, [pc, #112]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a02:	f001 ffef 	bl	80049e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a08:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <HAL_ADC_MspInit+0xe0>)
 8002a0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a12:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a18:	4b17      	ldr	r3, [pc, #92]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a1e:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a2e:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a3c:	4b0e      	ldr	r3, [pc, #56]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a42:	4b0d      	ldr	r3, [pc, #52]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a48:	480b      	ldr	r0, [pc, #44]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a4a:	f001 fc33 	bl	80042b4 <HAL_DMA_Init>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8002a54:	f7ff fc9e 	bl	8002394 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a07      	ldr	r2, [pc, #28]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a5c:	639a      	str	r2, [r3, #56]	; 0x38
 8002a5e:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a64:	bf00      	nop
 8002a66:	3728      	adds	r7, #40	; 0x28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40012000 	.word	0x40012000
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40020000 	.word	0x40020000
 8002a78:	2005a768 	.word	0x2005a768
 8002a7c:	40026470 	.word	0x40026470

08002a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08c      	sub	sp, #48	; 0x30
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 031c 	add.w	r3, r7, #28
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a3d      	ldr	r2, [pc, #244]	; (8002b94 <HAL_I2C_MspInit+0x114>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d128      	bne.n	8002af4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	4a3c      	ldr	r2, [pc, #240]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	6313      	str	r3, [r2, #48]	; 0x30
 8002aae:	4b3a      	ldr	r3, [pc, #232]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002aba:	23c0      	movs	r3, #192	; 0xc0
 8002abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002abe:	2312      	movs	r3, #18
 8002ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002aca:	2304      	movs	r3, #4
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ace:	f107 031c 	add.w	r3, r7, #28
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4831      	ldr	r0, [pc, #196]	; (8002b9c <HAL_I2C_MspInit+0x11c>)
 8002ad6:	f001 ff85 	bl	80049e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ada:	4b2f      	ldr	r3, [pc, #188]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	4a2e      	ldr	r2, [pc, #184]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ae6:	4b2c      	ldr	r3, [pc, #176]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002af2:	e04a      	b.n	8002b8a <HAL_I2C_MspInit+0x10a>
  else if(hi2c->Instance==I2C3)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a29      	ldr	r2, [pc, #164]	; (8002ba0 <HAL_I2C_MspInit+0x120>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d145      	bne.n	8002b8a <HAL_I2C_MspInit+0x10a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	4a25      	ldr	r2, [pc, #148]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002b04:	f043 0304 	orr.w	r3, r3, #4
 8002b08:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0a:	4b23      	ldr	r3, [pc, #140]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b16:	4b20      	ldr	r3, [pc, #128]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1a:	4a1f      	ldr	r2, [pc, #124]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	6313      	str	r3, [r2, #48]	; 0x30
 8002b22:	4b1d      	ldr	r3, [pc, #116]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b34:	2312      	movs	r3, #18
 8002b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b40:	2304      	movs	r3, #4
 8002b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4816      	ldr	r0, [pc, #88]	; (8002ba4 <HAL_I2C_MspInit+0x124>)
 8002b4c:	f001 ff4a 	bl	80049e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b56:	2312      	movs	r3, #18
 8002b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5e:	2303      	movs	r3, #3
 8002b60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b62:	2304      	movs	r3, #4
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b66:	f107 031c 	add.w	r3, r7, #28
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	480e      	ldr	r0, [pc, #56]	; (8002ba8 <HAL_I2C_MspInit+0x128>)
 8002b6e:	f001 ff39 	bl	80049e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	4a08      	ldr	r2, [pc, #32]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002b78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_I2C_MspInit+0x118>)
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]
}
 8002b8a:	bf00      	nop
 8002b8c:	3730      	adds	r7, #48	; 0x30
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40005400 	.word	0x40005400
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40020400 	.word	0x40020400
 8002ba0:	40005c00 	.word	0x40005c00
 8002ba4:	40020800 	.word	0x40020800
 8002ba8:	40020000 	.word	0x40020000

08002bac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08c      	sub	sp, #48	; 0x30
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a46      	ldr	r2, [pc, #280]	; (8002ce4 <HAL_SPI_MspInit+0x138>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d159      	bne.n	8002c82 <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002bce:	4b46      	ldr	r3, [pc, #280]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a45      	ldr	r2, [pc, #276]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b43      	ldr	r3, [pc, #268]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be2:	61bb      	str	r3, [r7, #24]
 8002be4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be6:	4b40      	ldr	r3, [pc, #256]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a3f      	ldr	r2, [pc, #252]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b3d      	ldr	r3, [pc, #244]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_NSS_for_MCU_Pin|SPI1_CLK_ext_ADC_Pin|SPI1_MOSI_ext_ADC_Pin;
 8002bfe:	23b0      	movs	r3, #176	; 0xb0
 8002c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c02:	2302      	movs	r3, #2
 8002c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002c0e:	2305      	movs	r3, #5
 8002c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c12:	f107 031c 	add.w	r3, r7, #28
 8002c16:	4619      	mov	r1, r3
 8002c18:	4834      	ldr	r0, [pc, #208]	; (8002cec <HAL_SPI_MspInit+0x140>)
 8002c1a:	f001 fee3 	bl	80049e4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8002c1e:	4b34      	ldr	r3, [pc, #208]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c20:	4a34      	ldr	r2, [pc, #208]	; (8002cf4 <HAL_SPI_MspInit+0x148>)
 8002c22:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002c24:	4b32      	ldr	r3, [pc, #200]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c26:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002c2a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c2c:	4b30      	ldr	r3, [pc, #192]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c32:	4b2f      	ldr	r3, [pc, #188]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002c38:	4b2d      	ldr	r3, [pc, #180]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c3e:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c40:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c46:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c48:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c4e:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002c50:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002c56:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c5c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002c64:	4822      	ldr	r0, [pc, #136]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c66:	f001 fb25 	bl	80042b4 <HAL_DMA_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_SPI_MspInit+0xc8>
    {
      Error_Handler();
 8002c70:	f7ff fb90 	bl	8002394 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c78:	659a      	str	r2, [r3, #88]	; 0x58
 8002c7a:	4a1d      	ldr	r2, [pc, #116]	; (8002cf0 <HAL_SPI_MspInit+0x144>)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8002c80:	e02c      	b.n	8002cdc <HAL_SPI_MspInit+0x130>
  else if(hspi->Instance==SPI4)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <HAL_SPI_MspInit+0x14c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d127      	bne.n	8002cdc <HAL_SPI_MspInit+0x130>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002c8c:	4b16      	ldr	r3, [pc, #88]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	4a15      	ldr	r2, [pc, #84]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002c92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c96:	6453      	str	r3, [r2, #68]	; 0x44
 8002c98:	4b13      	ldr	r3, [pc, #76]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ca0:	613b      	str	r3, [r7, #16]
 8002ca2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4a0f      	ldr	r2, [pc, #60]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002caa:	f043 0310 	orr.w	r3, r3, #16
 8002cae:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb0:	4b0d      	ldr	r3, [pc, #52]	; (8002ce8 <HAL_SPI_MspInit+0x13c>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002cbc:	2374      	movs	r3, #116	; 0x74
 8002cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002ccc:	2305      	movs	r3, #5
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cd0:	f107 031c 	add.w	r3, r7, #28
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4809      	ldr	r0, [pc, #36]	; (8002cfc <HAL_SPI_MspInit+0x150>)
 8002cd8:	f001 fe84 	bl	80049e4 <HAL_GPIO_Init>
}
 8002cdc:	bf00      	nop
 8002cde:	3730      	adds	r7, #48	; 0x30
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40013000 	.word	0x40013000
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	40020000 	.word	0x40020000
 8002cf0:	2005a96c 	.word	0x2005a96c
 8002cf4:	40026440 	.word	0x40026440
 8002cf8:	40013400 	.word	0x40013400
 8002cfc:	40021000 	.word	0x40021000

08002d00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a45      	ldr	r2, [pc, #276]	; (8002e24 <HAL_TIM_Base_MspInit+0x124>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d11c      	bne.n	8002d4c <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d12:	4b45      	ldr	r3, [pc, #276]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	4a44      	ldr	r2, [pc, #272]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002d18:	f043 0301 	orr.w	r3, r3, #1
 8002d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d1e:	4b42      	ldr	r3, [pc, #264]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	2018      	movs	r0, #24
 8002d30:	f001 fa89 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002d34:	2018      	movs	r0, #24
 8002d36:	f001 faa2 	bl	800427e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	2019      	movs	r0, #25
 8002d40:	f001 fa81 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d44:	2019      	movs	r0, #25
 8002d46:	f001 fa9a 	bl	800427e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002d4a:	e066      	b.n	8002e1a <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM3)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a36      	ldr	r2, [pc, #216]	; (8002e2c <HAL_TIM_Base_MspInit+0x12c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d114      	bne.n	8002d80 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002d56:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a33      	ldr	r2, [pc, #204]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
 8002d62:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2101      	movs	r1, #1
 8002d72:	201d      	movs	r0, #29
 8002d74:	f001 fa67 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002d78:	201d      	movs	r0, #29
 8002d7a:	f001 fa80 	bl	800427e <HAL_NVIC_EnableIRQ>
}
 8002d7e:	e04c      	b.n	8002e1a <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM5)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2a      	ldr	r2, [pc, #168]	; (8002e30 <HAL_TIM_Base_MspInit+0x130>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d114      	bne.n	8002db4 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d8a:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002d90:	f043 0308 	orr.w	r3, r3, #8
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2101      	movs	r1, #1
 8002da6:	2032      	movs	r0, #50	; 0x32
 8002da8:	f001 fa4d 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002dac:	2032      	movs	r0, #50	; 0x32
 8002dae:	f001 fa66 	bl	800427e <HAL_NVIC_EnableIRQ>
}
 8002db2:	e032      	b.n	8002e1a <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM6)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1e      	ldr	r2, [pc, #120]	; (8002e34 <HAL_TIM_Base_MspInit+0x134>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d114      	bne.n	8002de8 <HAL_TIM_Base_MspInit+0xe8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a19      	ldr	r2, [pc, #100]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002dc4:	f043 0310 	orr.w	r3, r3, #16
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2101      	movs	r1, #1
 8002dda:	2036      	movs	r0, #54	; 0x36
 8002ddc:	f001 fa33 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002de0:	2036      	movs	r0, #54	; 0x36
 8002de2:	f001 fa4c 	bl	800427e <HAL_NVIC_EnableIRQ>
}
 8002de6:	e018      	b.n	8002e1a <HAL_TIM_Base_MspInit+0x11a>
  else if(htim_base->Instance==TIM8)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_TIM_Base_MspInit+0x138>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d113      	bne.n	8002e1a <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002df2:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df6:	4a0c      	ldr	r2, [pc, #48]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002df8:	f043 0302 	orr.w	r3, r3, #2
 8002dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dfe:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_TIM_Base_MspInit+0x128>)
 8002e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	202e      	movs	r0, #46	; 0x2e
 8002e10:	f001 fa19 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8002e14:	202e      	movs	r0, #46	; 0x2e
 8002e16:	f001 fa32 	bl	800427e <HAL_NVIC_EnableIRQ>
}
 8002e1a:	bf00      	nop
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40010000 	.word	0x40010000
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40000400 	.word	0x40000400
 8002e30:	40000c00 	.word	0x40000c00
 8002e34:	40001000 	.word	0x40001000
 8002e38:	40010400 	.word	0x40010400

08002e3c <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b08a      	sub	sp, #40	; 0x28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 0314 	add.w	r3, r7, #20
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d160      	bne.n	8002f20 <HAL_TIM_IC_MspInit+0xe4>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e5e:	4b32      	ldr	r3, [pc, #200]	; (8002f28 <HAL_TIM_IC_MspInit+0xec>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	4a31      	ldr	r2, [pc, #196]	; (8002f28 <HAL_TIM_IC_MspInit+0xec>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6a:	4b2f      	ldr	r3, [pc, #188]	; (8002f28 <HAL_TIM_IC_MspInit+0xec>)
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	4b2c      	ldr	r3, [pc, #176]	; (8002f28 <HAL_TIM_IC_MspInit+0xec>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a2b      	ldr	r2, [pc, #172]	; (8002f28 <HAL_TIM_IC_MspInit+0xec>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_TIM_IC_MspInit+0xec>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Comp_Pin;
 8002e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Comp_GPIO_Port, &GPIO_InitStruct);
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4820      	ldr	r0, [pc, #128]	; (8002f2c <HAL_TIM_IC_MspInit+0xf0>)
 8002eac:	f001 fd9a 	bl	80049e4 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002eb0:	4b1f      	ldr	r3, [pc, #124]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002eb2:	4a20      	ldr	r2, [pc, #128]	; (8002f34 <HAL_TIM_IC_MspInit+0xf8>)
 8002eb4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002eb8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002ebc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ed0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002ed4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ed8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002edc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ee0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002ee8:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002ef4:	480e      	ldr	r0, [pc, #56]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002ef6:	f001 f9dd 	bl	80042b4 <HAL_DMA_Init>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <HAL_TIM_IC_MspInit+0xc8>
    {
      Error_Handler();
 8002f00:	f7ff fa48 	bl	8002394 <Error_Handler>
    }

    __HAL_LINKDMA(htim_ic,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24
 8002f0a:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <HAL_TIM_IC_MspInit+0xf4>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002f10:	2200      	movs	r2, #0
 8002f12:	2101      	movs	r1, #1
 8002f14:	201c      	movs	r0, #28
 8002f16:	f001 f996 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f1a:	201c      	movs	r0, #28
 8002f1c:	f001 f9af 	bl	800427e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f20:	bf00      	nop
 8002f22:	3728      	adds	r7, #40	; 0x28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	2005a390 	.word	0x2005a390
 8002f34:	40026088 	.word	0x40026088

08002f38 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0d      	ldr	r2, [pc, #52]	; (8002f7c <HAL_TIM_PWM_MspInit+0x44>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d113      	bne.n	8002f72 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	; (8002f80 <HAL_TIM_PWM_MspInit+0x48>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	4a0c      	ldr	r2, [pc, #48]	; (8002f80 <HAL_TIM_PWM_MspInit+0x48>)
 8002f50:	f043 0304 	orr.w	r3, r3, #4
 8002f54:	6413      	str	r3, [r2, #64]	; 0x40
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <HAL_TIM_PWM_MspInit+0x48>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2101      	movs	r1, #1
 8002f66:	201e      	movs	r0, #30
 8002f68:	f001 f96d 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002f6c:	201e      	movs	r0, #30
 8002f6e:	f001 f986 	bl	800427e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40000800 	.word	0x40000800
 8002f80:	40023800 	.word	0x40023800

08002f84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08c      	sub	sp, #48	; 0x30
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 031c 	add.w	r3, r7, #28
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a45      	ldr	r2, [pc, #276]	; (80030b8 <HAL_TIM_MspPostInit+0x134>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d11d      	bne.n	8002fe2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002fa6:	4b45      	ldr	r3, [pc, #276]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a44      	ldr	r2, [pc, #272]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 8002fac:	f043 0310 	orr.w	r3, r3, #16
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b42      	ldr	r3, [pc, #264]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = Gen_SP1I_NSS_MCU_Pin|Gen_SPI1_NSS_ext_ADC_Pin;
 8002fbe:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fd4:	f107 031c 	add.w	r3, r7, #28
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4839      	ldr	r0, [pc, #228]	; (80030c0 <HAL_TIM_MspPostInit+0x13c>)
 8002fdc:	f001 fd02 	bl	80049e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002fe0:	e065      	b.n	80030ae <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM3)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a37      	ldr	r2, [pc, #220]	; (80030c4 <HAL_TIM_MspPostInit+0x140>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d11c      	bne.n	8003026 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fec:	4b33      	ldr	r3, [pc, #204]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 8002fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff0:	4a32      	ldr	r2, [pc, #200]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff8:	4b30      	ldr	r3, [pc, #192]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LT1777_SYNC_Pin;
 8003004:	2340      	movs	r3, #64	; 0x40
 8003006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003008:	2302      	movs	r3, #2
 800300a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300c:	2300      	movs	r3, #0
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003010:	2300      	movs	r3, #0
 8003012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003014:	2302      	movs	r3, #2
 8003016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LT1777_SYNC_GPIO_Port, &GPIO_InitStruct);
 8003018:	f107 031c 	add.w	r3, r7, #28
 800301c:	4619      	mov	r1, r3
 800301e:	482a      	ldr	r0, [pc, #168]	; (80030c8 <HAL_TIM_MspPostInit+0x144>)
 8003020:	f001 fce0 	bl	80049e4 <HAL_GPIO_Init>
}
 8003024:	e043      	b.n	80030ae <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM4)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a28      	ldr	r2, [pc, #160]	; (80030cc <HAL_TIM_MspPostInit+0x148>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d11d      	bne.n	800306c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003030:	4b22      	ldr	r3, [pc, #136]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	4a21      	ldr	r2, [pc, #132]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 8003036:	f043 0308 	orr.w	r3, r3, #8
 800303a:	6313      	str	r3, [r2, #48]	; 0x30
 800303c:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	613b      	str	r3, [r7, #16]
 8003046:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SN6505_SYNC_Pin;
 8003048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304e:	2302      	movs	r3, #2
 8003050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003056:	2300      	movs	r3, #0
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800305a:	2302      	movs	r3, #2
 800305c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SN6505_SYNC_GPIO_Port, &GPIO_InitStruct);
 800305e:	f107 031c 	add.w	r3, r7, #28
 8003062:	4619      	mov	r1, r3
 8003064:	481a      	ldr	r0, [pc, #104]	; (80030d0 <HAL_TIM_MspPostInit+0x14c>)
 8003066:	f001 fcbd 	bl	80049e4 <HAL_GPIO_Init>
}
 800306a:	e020      	b.n	80030ae <HAL_TIM_MspPostInit+0x12a>
  else if(htim->Instance==TIM8)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a18      	ldr	r2, [pc, #96]	; (80030d4 <HAL_TIM_MspPostInit+0x150>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d11b      	bne.n	80030ae <HAL_TIM_MspPostInit+0x12a>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003076:	4b11      	ldr	r3, [pc, #68]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a10      	ldr	r2, [pc, #64]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b0e      	ldr	r3, [pc, #56]	; (80030bc <HAL_TIM_MspPostInit+0x138>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0304 	and.w	r3, r3, #4
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Gen_SPI1_CLK_for_ext_ADC_Pin;
 800308e:	2340      	movs	r3, #64	; 0x40
 8003090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003092:	2302      	movs	r3, #2
 8003094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003096:	2300      	movs	r3, #0
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800309e:	2303      	movs	r3, #3
 80030a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Gen_SPI1_CLK_for_ext_ADC_GPIO_Port, &GPIO_InitStruct);
 80030a2:	f107 031c 	add.w	r3, r7, #28
 80030a6:	4619      	mov	r1, r3
 80030a8:	480b      	ldr	r0, [pc, #44]	; (80030d8 <HAL_TIM_MspPostInit+0x154>)
 80030aa:	f001 fc9b 	bl	80049e4 <HAL_GPIO_Init>
}
 80030ae:	bf00      	nop
 80030b0:	3730      	adds	r7, #48	; 0x30
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40010000 	.word	0x40010000
 80030bc:	40023800 	.word	0x40023800
 80030c0:	40021000 	.word	0x40021000
 80030c4:	40000400 	.word	0x40000400
 80030c8:	40020000 	.word	0x40020000
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40020c00 	.word	0x40020c00
 80030d4:	40010400 	.word	0x40010400
 80030d8:	40020800 	.word	0x40020800

080030dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b090      	sub	sp, #64	; 0x40
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a61      	ldr	r2, [pc, #388]	; (8003280 <HAL_UART_MspInit+0x1a4>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d129      	bne.n	8003152 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80030fe:	4b61      	ldr	r3, [pc, #388]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	4a60      	ldr	r2, [pc, #384]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 8003104:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003108:	6413      	str	r3, [r2, #64]	; 0x40
 800310a:	4b5e      	ldr	r3, [pc, #376]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
 8003114:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003116:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	4a5a      	ldr	r2, [pc, #360]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 800311c:	f043 0310 	orr.w	r3, r3, #16
 8003120:	6313      	str	r3, [r2, #48]	; 0x30
 8003122:	4b58      	ldr	r3, [pc, #352]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration    
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800312e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003132:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003138:	2300      	movs	r3, #0
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313c:	2303      	movs	r3, #3
 800313e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003140:	2308      	movs	r3, #8
 8003142:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003144:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003148:	4619      	mov	r1, r3
 800314a:	484f      	ldr	r0, [pc, #316]	; (8003288 <HAL_UART_MspInit+0x1ac>)
 800314c:	f001 fc4a 	bl	80049e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003150:	e092      	b.n	8003278 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a4d      	ldr	r2, [pc, #308]	; (800328c <HAL_UART_MspInit+0x1b0>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d129      	bne.n	80031b0 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART1_CLK_ENABLE();
 800315c:	4b49      	ldr	r3, [pc, #292]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 800315e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003160:	4a48      	ldr	r2, [pc, #288]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 8003162:	f043 0310 	orr.w	r3, r3, #16
 8003166:	6453      	str	r3, [r2, #68]	; 0x44
 8003168:	4b46      	ldr	r3, [pc, #280]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	623b      	str	r3, [r7, #32]
 8003172:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003174:	4b43      	ldr	r3, [pc, #268]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4a42      	ldr	r2, [pc, #264]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 800317a:	f043 0302 	orr.w	r3, r3, #2
 800317e:	6313      	str	r3, [r2, #48]	; 0x30
 8003180:	4b40      	ldr	r3, [pc, #256]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	61fb      	str	r3, [r7, #28]
 800318a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = UART1_TX_Pin|UART1_RX_Pin;
 800318c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003192:	2302      	movs	r3, #2
 8003194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800319a:	2303      	movs	r3, #3
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800319e:	2304      	movs	r3, #4
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80031a6:	4619      	mov	r1, r3
 80031a8:	4839      	ldr	r0, [pc, #228]	; (8003290 <HAL_UART_MspInit+0x1b4>)
 80031aa:	f001 fc1b 	bl	80049e4 <HAL_GPIO_Init>
}
 80031ae:	e063      	b.n	8003278 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a37      	ldr	r2, [pc, #220]	; (8003294 <HAL_UART_MspInit+0x1b8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d128      	bne.n	800320c <HAL_UART_MspInit+0x130>
    __HAL_RCC_USART2_CLK_ENABLE();
 80031ba:	4b32      	ldr	r3, [pc, #200]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	4a31      	ldr	r2, [pc, #196]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 80031c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c4:	6413      	str	r3, [r2, #64]	; 0x40
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ce:	61bb      	str	r3, [r7, #24]
 80031d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d2:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a2b      	ldr	r2, [pc, #172]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 80031d8:	f043 0301 	orr.w	r3, r3, #1
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b29      	ldr	r3, [pc, #164]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = UART2_TX_RS232_Pin|UART2_RX_RS232_Pin;
 80031ea:	230c      	movs	r3, #12
 80031ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ee:	2302      	movs	r3, #2
 80031f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f2:	2300      	movs	r3, #0
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f6:	2303      	movs	r3, #3
 80031f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031fa:	2307      	movs	r3, #7
 80031fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003202:	4619      	mov	r1, r3
 8003204:	4824      	ldr	r0, [pc, #144]	; (8003298 <HAL_UART_MspInit+0x1bc>)
 8003206:	f001 fbed 	bl	80049e4 <HAL_GPIO_Init>
}
 800320a:	e035      	b.n	8003278 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a22      	ldr	r2, [pc, #136]	; (800329c <HAL_UART_MspInit+0x1c0>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d130      	bne.n	8003278 <HAL_UART_MspInit+0x19c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003216:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	4a1a      	ldr	r2, [pc, #104]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 800321c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003220:	6413      	str	r3, [r2, #64]	; 0x40
 8003222:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a14      	ldr	r2, [pc, #80]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 8003234:	f043 0302 	orr.w	r3, r3, #2
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_UART_MspInit+0x1a8>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = UART3_TX_FT230_Pin|UART3_RX_FT230_Pin;
 8003246:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003254:	2303      	movs	r3, #3
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003258:	2307      	movs	r3, #7
 800325a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003260:	4619      	mov	r1, r3
 8003262:	480b      	ldr	r0, [pc, #44]	; (8003290 <HAL_UART_MspInit+0x1b4>)
 8003264:	f001 fbbe 	bl	80049e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003268:	2200      	movs	r2, #0
 800326a:	2100      	movs	r1, #0
 800326c:	2027      	movs	r0, #39	; 0x27
 800326e:	f000 ffea 	bl	8004246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003272:	2027      	movs	r0, #39	; 0x27
 8003274:	f001 f803 	bl	800427e <HAL_NVIC_EnableIRQ>
}
 8003278:	bf00      	nop
 800327a:	3740      	adds	r7, #64	; 0x40
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40007800 	.word	0x40007800
 8003284:	40023800 	.word	0x40023800
 8003288:	40021000 	.word	0x40021000
 800328c:	40011000 	.word	0x40011000
 8003290:	40020400 	.word	0x40020400
 8003294:	40004400 	.word	0x40004400
 8003298:	40020000 	.word	0x40020000
 800329c:	40004800 	.word	0x40004800

080032a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032b2:	e7fe      	b.n	80032b2 <HardFault_Handler+0x4>

080032b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032b8:	e7fe      	b.n	80032b8 <MemManage_Handler+0x4>

080032ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032be:	e7fe      	b.n	80032be <BusFault_Handler+0x4>

080032c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c4:	e7fe      	b.n	80032c4 <UsageFault_Handler+0x4>

080032c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032c6:	b480      	push	{r7}
 80032c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032d8:	bf00      	nop
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032e2:	b480      	push	{r7}
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f4:	f000 fa7e 	bl	80037f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}

080032fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003300:	4802      	ldr	r0, [pc, #8]	; (800330c <DMA1_Stream5_IRQHandler+0x10>)
 8003302:	f001 f907 	bl	8004514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	2005a390 	.word	0x2005a390

08003310 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003314:	2080      	movs	r0, #128	; 0x80
 8003316:	f001 fd29 	bl	8004d6c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800331a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800331e:	f001 fd25 	bl	8004d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800332c:	4802      	ldr	r0, [pc, #8]	; (8003338 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800332e:	f004 f8c7 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	2005a808 	.word	0x2005a808

0800333c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003342:	f004 f8bd 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	2005a808 	.word	0x2005a808

08003350 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <TIM2_IRQHandler+0x10>)
 8003356:	f004 f8b3 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	2005a8ac 	.word	0x2005a8ac

08003364 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003368:	4802      	ldr	r0, [pc, #8]	; (8003374 <TIM3_IRQHandler+0x10>)
 800336a:	f004 f8a9 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2005a5fc 	.word	0x2005a5fc

08003378 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800337c:	4802      	ldr	r0, [pc, #8]	; (8003388 <TIM4_IRQHandler+0x10>)
 800337e:	f004 f89f 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003382:	bf00      	nop
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	2005a4b0 	.word	0x2005a4b0

0800338c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003390:	4802      	ldr	r0, [pc, #8]	; (800339c <USART3_IRQHandler+0x10>)
 8003392:	f005 fd35 	bl	8008e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	2005a4f0 	.word	0x2005a4f0

080033a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80033a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80033a8:	f001 fce0 	bl	8004d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033ac:	bf00      	nop
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80033b4:	4802      	ldr	r0, [pc, #8]	; (80033c0 <TIM8_CC_IRQHandler+0x10>)
 80033b6:	f004 f883 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80033ba:	bf00      	nop
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2005a470 	.word	0x2005a470

080033c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80033c8:	4802      	ldr	r0, [pc, #8]	; (80033d4 <TIM5_IRQHandler+0x10>)
 80033ca:	f004 f879 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	2005a5bc 	.word	0x2005a5bc

080033d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033dc:	4802      	ldr	r0, [pc, #8]	; (80033e8 <TIM6_DAC_IRQHandler+0x10>)
 80033de:	f004 f86f 	bl	80074c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	2005a7c8 	.word	0x2005a7c8

080033ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80033f0:	4802      	ldr	r0, [pc, #8]	; (80033fc <DMA2_Stream2_IRQHandler+0x10>)
 80033f2:	f001 f88f 	bl	8004514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80033f6:	bf00      	nop
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	2005a96c 	.word	0x2005a96c

08003400 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003404:	4802      	ldr	r0, [pc, #8]	; (8003410 <DMA2_Stream4_IRQHandler+0x10>)
 8003406:	f001 f885 	bl	8004514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800340a:	bf00      	nop
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	2005a768 	.word	0x2005a768

08003414 <runPolarizationSequence>:
 *      Author: OBU
 */

#include "switchingCircuitController.h"

void runPolarizationSequence() {
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0

	//polarization phase will be ready after measurements
	state.preparedToRunPolarizationPhase = 0;
 8003418:	4b30      	ldr	r3, [pc, #192]	; (80034dc <runPolarizationSequence+0xc8>)
 800341a:	2200      	movs	r2, #0
 800341c:	761a      	strb	r2, [r3, #24]
	remainingTimeToNextMeasurement = state.wholeMeasurementPeriod * 1000; // convert ms to us
 800341e:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <runPolarizationSequence+0xc8>)
 8003420:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003424:	461a      	mov	r2, r3
 8003426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800342a:	fb03 f302 	mul.w	r3, r3, r2
 800342e:	461a      	mov	r2, r3
 8003430:	4b2b      	ldr	r3, [pc, #172]	; (80034e0 <runPolarizationSequence+0xcc>)
 8003432:	601a      	str	r2, [r3, #0]
	remainingPolarizationTime = state.polarizationPeriod * 1000; // convert ms to us
 8003434:	4b29      	ldr	r3, [pc, #164]	; (80034dc <runPolarizationSequence+0xc8>)
 8003436:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800343a:	461a      	mov	r2, r3
 800343c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003440:	fb03 f302 	mul.w	r3, r3, r2
 8003444:	461a      	mov	r2, r3
 8003446:	4b27      	ldr	r3, [pc, #156]	; (80034e4 <runPolarizationSequence+0xd0>)
 8003448:	601a      	str	r2, [r3, #0]

	// visualise
	set_LED1(1, 1, 1);
 800344a:	2201      	movs	r2, #1
 800344c:	2101      	movs	r1, #1
 800344e:	2001      	movs	r0, #1
 8003450:	f7fd fd9e 	bl	8000f90 <set_LED1>
	//run sequnece T2 - prepare for polarization
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8003454:	2201      	movs	r2, #1
 8003456:	2102      	movs	r1, #2
 8003458:	4823      	ldr	r0, [pc, #140]	; (80034e8 <runPolarizationSequence+0xd4>)
 800345a:	f001 fc6d 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800345e:	2200      	movs	r2, #0
 8003460:	2104      	movs	r1, #4
 8003462:	4821      	ldr	r0, [pc, #132]	; (80034e8 <runPolarizationSequence+0xd4>)
 8003464:	f001 fc68 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8003468:	2201      	movs	r2, #1
 800346a:	2108      	movs	r1, #8
 800346c:	481e      	ldr	r0, [pc, #120]	; (80034e8 <runPolarizationSequence+0xd4>)
 800346e:	f001 fc63 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	2110      	movs	r1, #16
 8003476:	481c      	ldr	r0, [pc, #112]	; (80034e8 <runPolarizationSequence+0xd4>)
 8003478:	f001 fc5e 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 800347c:	2200      	movs	r2, #0
 800347e:	2120      	movs	r1, #32
 8003480:	4819      	ldr	r0, [pc, #100]	; (80034e8 <runPolarizationSequence+0xd4>)
 8003482:	f001 fc59 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8003486:	2201      	movs	r2, #1
 8003488:	2140      	movs	r1, #64	; 0x40
 800348a:	4817      	ldr	r0, [pc, #92]	; (80034e8 <runPolarizationSequence+0xd4>)
 800348c:	f001 fc54 	bl	8004d38 <HAL_GPIO_WritePin>
	delay_ms(5);
 8003490:	2005      	movs	r0, #5
 8003492:	f7fd fd31 	bl	8000ef8 <delay_ms>

	//run sequnece T3 - Polarization phase
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 1);
 8003496:	2201      	movs	r2, #1
 8003498:	2102      	movs	r1, #2
 800349a:	4813      	ldr	r0, [pc, #76]	; (80034e8 <runPolarizationSequence+0xd4>)
 800349c:	f001 fc4c 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80034a0:	2200      	movs	r2, #0
 80034a2:	2104      	movs	r1, #4
 80034a4:	4810      	ldr	r0, [pc, #64]	; (80034e8 <runPolarizationSequence+0xd4>)
 80034a6:	f001 fc47 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 80034aa:	2201      	movs	r2, #1
 80034ac:	2108      	movs	r1, #8
 80034ae:	480e      	ldr	r0, [pc, #56]	; (80034e8 <runPolarizationSequence+0xd4>)
 80034b0:	f001 fc42 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 1);
 80034b4:	2201      	movs	r2, #1
 80034b6:	2110      	movs	r1, #16
 80034b8:	480b      	ldr	r0, [pc, #44]	; (80034e8 <runPolarizationSequence+0xd4>)
 80034ba:	f001 fc3d 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 80034be:	2200      	movs	r2, #0
 80034c0:	2120      	movs	r1, #32
 80034c2:	4809      	ldr	r0, [pc, #36]	; (80034e8 <runPolarizationSequence+0xd4>)
 80034c4:	f001 fc38 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 80034c8:	2201      	movs	r2, #1
 80034ca:	2140      	movs	r1, #64	; 0x40
 80034cc:	4806      	ldr	r0, [pc, #24]	; (80034e8 <runPolarizationSequence+0xd4>)
 80034ce:	f001 fc33 	bl	8004d38 <HAL_GPIO_WritePin>
	state.preparedToRunMeasurementPhase = 1;
 80034d2:	4b02      	ldr	r3, [pc, #8]	; (80034dc <runPolarizationSequence+0xc8>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	765a      	strb	r2, [r3, #25]

}
 80034d8:	bf00      	nop
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	2002f1a8 	.word	0x2002f1a8
 80034e0:	20004094 	.word	0x20004094
 80034e4:	2000408c 	.word	0x2000408c
 80034e8:	40020c00 	.word	0x40020c00

080034ec <runMeasurementSequence>:

void runMeasurementSequence() {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	af00      	add	r7, sp, #0
	state.preparedToRunMeasurementPhase = 0;
 80034f0:	4b55      	ldr	r3, [pc, #340]	; (8003648 <runMeasurementSequence+0x15c>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	765a      	strb	r2, [r3, #25]
	set_LED1(0, 1, 0);
 80034f6:	2200      	movs	r2, #0
 80034f8:	2101      	movs	r1, #1
 80034fa:	2000      	movs	r0, #0
 80034fc:	f7fd fd48 	bl	8000f90 <set_LED1>

	//run sequnece T4 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8003500:	2200      	movs	r2, #0
 8003502:	2102      	movs	r1, #2
 8003504:	4851      	ldr	r0, [pc, #324]	; (800364c <runMeasurementSequence+0x160>)
 8003506:	f001 fc17 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800350a:	2200      	movs	r2, #0
 800350c:	2104      	movs	r1, #4
 800350e:	484f      	ldr	r0, [pc, #316]	; (800364c <runMeasurementSequence+0x160>)
 8003510:	f001 fc12 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8003514:	2201      	movs	r2, #1
 8003516:	2108      	movs	r1, #8
 8003518:	484c      	ldr	r0, [pc, #304]	; (800364c <runMeasurementSequence+0x160>)
 800351a:	f001 fc0d 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800351e:	2200      	movs	r2, #0
 8003520:	2110      	movs	r1, #16
 8003522:	484a      	ldr	r0, [pc, #296]	; (800364c <runMeasurementSequence+0x160>)
 8003524:	f001 fc08 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8003528:	2200      	movs	r2, #0
 800352a:	2120      	movs	r1, #32
 800352c:	4847      	ldr	r0, [pc, #284]	; (800364c <runMeasurementSequence+0x160>)
 800352e:	f001 fc03 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8003532:	2201      	movs	r2, #1
 8003534:	2140      	movs	r1, #64	; 0x40
 8003536:	4845      	ldr	r0, [pc, #276]	; (800364c <runMeasurementSequence+0x160>)
 8003538:	f001 fbfe 	bl	8004d38 <HAL_GPIO_WritePin>
	delay_us(50);
 800353c:	2032      	movs	r0, #50	; 0x32
 800353e:	f7fd fcc7 	bl	8000ed0 <delay_us>

	//run sequnece T5 - Coil discharge
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8003542:	2200      	movs	r2, #0
 8003544:	2102      	movs	r1, #2
 8003546:	4841      	ldr	r0, [pc, #260]	; (800364c <runMeasurementSequence+0x160>)
 8003548:	f001 fbf6 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800354c:	2200      	movs	r2, #0
 800354e:	2104      	movs	r1, #4
 8003550:	483e      	ldr	r0, [pc, #248]	; (800364c <runMeasurementSequence+0x160>)
 8003552:	f001 fbf1 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8003556:	2201      	movs	r2, #1
 8003558:	2108      	movs	r1, #8
 800355a:	483c      	ldr	r0, [pc, #240]	; (800364c <runMeasurementSequence+0x160>)
 800355c:	f001 fbec 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8003560:	2200      	movs	r2, #0
 8003562:	2110      	movs	r1, #16
 8003564:	4839      	ldr	r0, [pc, #228]	; (800364c <runMeasurementSequence+0x160>)
 8003566:	f001 fbe7 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 800356a:	2201      	movs	r2, #1
 800356c:	2120      	movs	r1, #32
 800356e:	4837      	ldr	r0, [pc, #220]	; (800364c <runMeasurementSequence+0x160>)
 8003570:	f001 fbe2 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 1);
 8003574:	2201      	movs	r2, #1
 8003576:	2140      	movs	r1, #64	; 0x40
 8003578:	4834      	ldr	r0, [pc, #208]	; (800364c <runMeasurementSequence+0x160>)
 800357a:	f001 fbdd 	bl	8004d38 <HAL_GPIO_WritePin>
	delay_ms(10);
 800357e:	200a      	movs	r0, #10
 8003580:	f7fd fcba 	bl	8000ef8 <delay_ms>

	//run sequnece T7 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2102      	movs	r1, #2
 8003588:	4830      	ldr	r0, [pc, #192]	; (800364c <runMeasurementSequence+0x160>)
 800358a:	f001 fbd5 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 800358e:	2200      	movs	r2, #0
 8003590:	2104      	movs	r1, #4
 8003592:	482e      	ldr	r0, [pc, #184]	; (800364c <runMeasurementSequence+0x160>)
 8003594:	f001 fbd0 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8003598:	2201      	movs	r2, #1
 800359a:	2108      	movs	r1, #8
 800359c:	482b      	ldr	r0, [pc, #172]	; (800364c <runMeasurementSequence+0x160>)
 800359e:	f001 fbcb 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80035a2:	2200      	movs	r2, #0
 80035a4:	2110      	movs	r1, #16
 80035a6:	4829      	ldr	r0, [pc, #164]	; (800364c <runMeasurementSequence+0x160>)
 80035a8:	f001 fbc6 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80035ac:	2201      	movs	r2, #1
 80035ae:	2120      	movs	r1, #32
 80035b0:	4826      	ldr	r0, [pc, #152]	; (800364c <runMeasurementSequence+0x160>)
 80035b2:	f001 fbc1 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80035b6:	2200      	movs	r2, #0
 80035b8:	2140      	movs	r1, #64	; 0x40
 80035ba:	4824      	ldr	r0, [pc, #144]	; (800364c <runMeasurementSequence+0x160>)
 80035bc:	f001 fbbc 	bl	8004d38 <HAL_GPIO_WritePin>
	delay_ms(10);
 80035c0:	200a      	movs	r0, #10
 80035c2:	f7fd fc99 	bl	8000ef8 <delay_ms>

	//run sequnece T8 - wait before measuring
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 80035c6:	2200      	movs	r2, #0
 80035c8:	2102      	movs	r1, #2
 80035ca:	4820      	ldr	r0, [pc, #128]	; (800364c <runMeasurementSequence+0x160>)
 80035cc:	f001 fbb4 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 80035d0:	2200      	movs	r2, #0
 80035d2:	2104      	movs	r1, #4
 80035d4:	481d      	ldr	r0, [pc, #116]	; (800364c <runMeasurementSequence+0x160>)
 80035d6:	f001 fbaf 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	2108      	movs	r1, #8
 80035de:	481b      	ldr	r0, [pc, #108]	; (800364c <runMeasurementSequence+0x160>)
 80035e0:	f001 fbaa 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 80035e4:	2200      	movs	r2, #0
 80035e6:	2110      	movs	r1, #16
 80035e8:	4818      	ldr	r0, [pc, #96]	; (800364c <runMeasurementSequence+0x160>)
 80035ea:	f001 fba5 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 80035ee:	2201      	movs	r2, #1
 80035f0:	2120      	movs	r1, #32
 80035f2:	4816      	ldr	r0, [pc, #88]	; (800364c <runMeasurementSequence+0x160>)
 80035f4:	f001 fba0 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 80035f8:	2200      	movs	r2, #0
 80035fa:	2140      	movs	r1, #64	; 0x40
 80035fc:	4813      	ldr	r0, [pc, #76]	; (800364c <runMeasurementSequence+0x160>)
 80035fe:	f001 fb9b 	bl	8004d38 <HAL_GPIO_WritePin>
	delay_ms(10);
 8003602:	200a      	movs	r0, #10
 8003604:	f7fd fc78 	bl	8000ef8 <delay_ms>

	//run sequnece T9 - measure
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 8003608:	2200      	movs	r2, #0
 800360a:	2102      	movs	r1, #2
 800360c:	480f      	ldr	r0, [pc, #60]	; (800364c <runMeasurementSequence+0x160>)
 800360e:	f001 fb93 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 1);
 8003612:	2201      	movs	r2, #1
 8003614:	2104      	movs	r1, #4
 8003616:	480d      	ldr	r0, [pc, #52]	; (800364c <runMeasurementSequence+0x160>)
 8003618:	f001 fb8e 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	2108      	movs	r1, #8
 8003620:	480a      	ldr	r0, [pc, #40]	; (800364c <runMeasurementSequence+0x160>)
 8003622:	f001 fb89 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 8003626:	2200      	movs	r2, #0
 8003628:	2110      	movs	r1, #16
 800362a:	4808      	ldr	r0, [pc, #32]	; (800364c <runMeasurementSequence+0x160>)
 800362c:	f001 fb84 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 1);
 8003630:	2201      	movs	r2, #1
 8003632:	2120      	movs	r1, #32
 8003634:	4805      	ldr	r0, [pc, #20]	; (800364c <runMeasurementSequence+0x160>)
 8003636:	f001 fb7f 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 800363a:	2200      	movs	r2, #0
 800363c:	2140      	movs	r1, #64	; 0x40
 800363e:	4803      	ldr	r0, [pc, #12]	; (800364c <runMeasurementSequence+0x160>)
 8003640:	f001 fb7a 	bl	8004d38 <HAL_GPIO_WritePin>
}
 8003644:	bf00      	nop
 8003646:	bd80      	pop	{r7, pc}
 8003648:	2002f1a8 	.word	0x2002f1a8
 800364c:	40020c00 	.word	0x40020c00

08003650 <switchingCircuitIdle>:

void switchingCircuitIdle() {
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
	// active low output enable
	HAL_GPIO_WritePin(Switches_driver_enable_GPIO_Port,
 8003654:	2200      	movs	r2, #0
 8003656:	2101      	movs	r1, #1
 8003658:	4811      	ldr	r0, [pc, #68]	; (80036a0 <switchingCircuitIdle+0x50>)
 800365a:	f001 fb6d 	bl	8004d38 <HAL_GPIO_WritePin>
	Switches_driver_enable_Pin, 0);
	//also run the sequnece T1 (isolate amplifier)
	HAL_GPIO_WritePin(S1_GPIO_Port, S1_Pin, 0);
 800365e:	2200      	movs	r2, #0
 8003660:	2102      	movs	r1, #2
 8003662:	480f      	ldr	r0, [pc, #60]	; (80036a0 <switchingCircuitIdle+0x50>)
 8003664:	f001 fb68 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S2_GPIO_Port, S2_Pin, 0);
 8003668:	2200      	movs	r2, #0
 800366a:	2104      	movs	r1, #4
 800366c:	480c      	ldr	r0, [pc, #48]	; (80036a0 <switchingCircuitIdle+0x50>)
 800366e:	f001 fb63 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S3_GPIO_Port, S3_Pin, 1);
 8003672:	2201      	movs	r2, #1
 8003674:	2108      	movs	r1, #8
 8003676:	480a      	ldr	r0, [pc, #40]	; (80036a0 <switchingCircuitIdle+0x50>)
 8003678:	f001 fb5e 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S4_GPIO_Port, S4_Pin, 0);
 800367c:	2200      	movs	r2, #0
 800367e:	2110      	movs	r1, #16
 8003680:	4807      	ldr	r0, [pc, #28]	; (80036a0 <switchingCircuitIdle+0x50>)
 8003682:	f001 fb59 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S5_GPIO_Port, S5_Pin, 0);
 8003686:	2200      	movs	r2, #0
 8003688:	2120      	movs	r1, #32
 800368a:	4805      	ldr	r0, [pc, #20]	; (80036a0 <switchingCircuitIdle+0x50>)
 800368c:	f001 fb54 	bl	8004d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(S6_GPIO_Port, S6_Pin, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	2140      	movs	r1, #64	; 0x40
 8003694:	4802      	ldr	r0, [pc, #8]	; (80036a0 <switchingCircuitIdle+0x50>)
 8003696:	f001 fb4f 	bl	8004d38 <HAL_GPIO_WritePin>
}
 800369a:	bf00      	nop
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40020c00 	.word	0x40020c00

080036a4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <_sbrk+0x50>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d102      	bne.n	80036ba <_sbrk+0x16>
		heap_end = &end;
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <_sbrk+0x50>)
 80036b6:	4a10      	ldr	r2, [pc, #64]	; (80036f8 <_sbrk+0x54>)
 80036b8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <_sbrk+0x50>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <_sbrk+0x50>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4413      	add	r3, r2
 80036c8:	466a      	mov	r2, sp
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d907      	bls.n	80036de <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80036ce:	f006 fa01 	bl	8009ad4 <__errno>
 80036d2:	4602      	mov	r2, r0
 80036d4:	230c      	movs	r3, #12
 80036d6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80036d8:	f04f 33ff 	mov.w	r3, #4294967295
 80036dc:	e006      	b.n	80036ec <_sbrk+0x48>
	}

	heap_end += incr;
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <_sbrk+0x50>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4413      	add	r3, r2
 80036e6:	4a03      	ldr	r2, [pc, #12]	; (80036f4 <_sbrk+0x50>)
 80036e8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80036ea:	68fb      	ldr	r3, [r7, #12]
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200001fc 	.word	0x200001fc
 80036f8:	2005a9d8 	.word	0x2005a9d8

080036fc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003700:	4b08      	ldr	r3, [pc, #32]	; (8003724 <SystemInit+0x28>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	4a07      	ldr	r2, [pc, #28]	; (8003724 <SystemInit+0x28>)
 8003708:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800370c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <SystemInit+0x28>)
 8003712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003716:	609a      	str	r2, [r3, #8]
#endif
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	e000ed00 	.word	0xe000ed00

08003728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003760 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800372c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800372e:	e003      	b.n	8003738 <LoopCopyDataInit>

08003730 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003730:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003732:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003734:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003736:	3104      	adds	r1, #4

08003738 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003738:	480b      	ldr	r0, [pc, #44]	; (8003768 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800373a:	4b0c      	ldr	r3, [pc, #48]	; (800376c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800373c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800373e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003740:	d3f6      	bcc.n	8003730 <CopyDataInit>
  ldr  r2, =_sbss
 8003742:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003744:	e002      	b.n	800374c <LoopFillZerobss>

08003746 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003746:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003748:	f842 3b04 	str.w	r3, [r2], #4

0800374c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800374c:	4b09      	ldr	r3, [pc, #36]	; (8003774 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800374e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003750:	d3f9      	bcc.n	8003746 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003752:	f7ff ffd3 	bl	80036fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003756:	f006 f9c3 	bl	8009ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800375a:	f7fd fc95 	bl	8001088 <main>
  bx  lr    
 800375e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003760:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8003764:	0800a884 	.word	0x0800a884
  ldr  r0, =_sdata
 8003768:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800376c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8003770:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8003774:	2005a9d4 	.word	0x2005a9d4

08003778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003778:	e7fe      	b.n	8003778 <ADC_IRQHandler>

0800377a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800377e:	2003      	movs	r0, #3
 8003780:	f000 fd56 	bl	8004230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003784:	2000      	movs	r0, #0
 8003786:	f000 f805 	bl	8003794 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800378a:	f7ff f8e3 	bl	8002954 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800379c:	4b12      	ldr	r3, [pc, #72]	; (80037e8 <HAL_InitTick+0x54>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_InitTick+0x58>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	4619      	mov	r1, r3
 80037a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 fd71 	bl	800429a <HAL_SYSTICK_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d001      	beq.n	80037c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e00e      	b.n	80037e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b0f      	cmp	r3, #15
 80037c6:	d80a      	bhi.n	80037de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037c8:	2200      	movs	r2, #0
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	f04f 30ff 	mov.w	r0, #4294967295
 80037d0:	f000 fd39 	bl	8004246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037d4:	4a06      	ldr	r2, [pc, #24]	; (80037f0 <HAL_InitTick+0x5c>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	e000      	b.n	80037e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3708      	adds	r7, #8
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000000 	.word	0x20000000
 80037ec:	20000008 	.word	0x20000008
 80037f0:	20000004 	.word	0x20000004

080037f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_IncTick+0x20>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	461a      	mov	r2, r3
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <HAL_IncTick+0x24>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4413      	add	r3, r2
 8003804:	4a04      	ldr	r2, [pc, #16]	; (8003818 <HAL_IncTick+0x24>)
 8003806:	6013      	str	r3, [r2, #0]
}
 8003808:	bf00      	nop
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	20000008 	.word	0x20000008
 8003818:	2005a9cc 	.word	0x2005a9cc

0800381c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return uwTick;
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <HAL_GetTick+0x14>)
 8003822:	681b      	ldr	r3, [r3, #0]
}
 8003824:	4618      	mov	r0, r3
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	2005a9cc 	.word	0x2005a9cc

08003834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800383c:	f7ff ffee 	bl	800381c <HAL_GetTick>
 8003840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384c:	d005      	beq.n	800385a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_Delay+0x40>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800385a:	bf00      	nop
 800385c:	f7ff ffde 	bl	800381c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	429a      	cmp	r2, r3
 800386a:	d8f7      	bhi.n	800385c <HAL_Delay+0x28>
  {
  }
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000008 	.word	0x20000008

08003878 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e031      	b.n	80038f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff f880 	bl	800299c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f003 0310 	and.w	r3, r3, #16
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d116      	bne.n	80038e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038ba:	4b10      	ldr	r3, [pc, #64]	; (80038fc <HAL_ADC_Init+0x84>)
 80038bc:	4013      	ands	r3, r2
 80038be:	f043 0202 	orr.w	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 fa66 	bl	8003d98 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	f043 0201 	orr.w	r2, r3, #1
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
 80038e2:	e001      	b.n	80038e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	ffffeefd 	.word	0xffffeefd

08003900 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003916:	2b01      	cmp	r3, #1
 8003918:	d101      	bne.n	800391e <HAL_ADC_Start_DMA+0x1e>
 800391a:	2302      	movs	r3, #2
 800391c:	e0c7      	b.n	8003aae <HAL_ADC_Start_DMA+0x1ae>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b01      	cmp	r3, #1
 8003932:	d018      	beq.n	8003966 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003944:	4b5c      	ldr	r3, [pc, #368]	; (8003ab8 <HAL_ADC_Start_DMA+0x1b8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a5c      	ldr	r2, [pc, #368]	; (8003abc <HAL_ADC_Start_DMA+0x1bc>)
 800394a:	fba2 2303 	umull	r2, r3, r2, r3
 800394e:	0c9a      	lsrs	r2, r3, #18
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003958:	e002      	b.n	8003960 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	3b01      	subs	r3, #1
 800395e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f9      	bne.n	800395a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	f040 809b 	bne.w	8003aac <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800397a:	4b51      	ldr	r3, [pc, #324]	; (8003ac0 <HAL_ADC_Start_DMA+0x1c0>)
 800397c:	4013      	ands	r3, r2
 800397e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800399c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039b0:	d106      	bne.n	80039c0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b6:	f023 0206 	bic.w	r2, r3, #6
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	645a      	str	r2, [r3, #68]	; 0x44
 80039be:	e002      	b.n	80039c6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	4a3c      	ldr	r2, [pc, #240]	; (8003ac4 <HAL_ADC_Start_DMA+0x1c4>)
 80039d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	4a3b      	ldr	r2, [pc, #236]	; (8003ac8 <HAL_ADC_Start_DMA+0x1c8>)
 80039dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	4a3a      	ldr	r2, [pc, #232]	; (8003acc <HAL_ADC_Start_DMA+0x1cc>)
 80039e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80039ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80039fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	334c      	adds	r3, #76	; 0x4c
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	68ba      	ldr	r2, [r7, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f000 fcf6 	bl	8004410 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003a24:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <HAL_ADC_Start_DMA+0x1d0>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 031f 	and.w	r3, r3, #31
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10f      	bne.n	8003a50 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d136      	bne.n	8003aac <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689a      	ldr	r2, [r3, #8]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a4c:	609a      	str	r2, [r3, #8]
 8003a4e:	e02d      	b.n	8003aac <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <HAL_ADC_Start_DMA+0x1d4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10e      	bne.n	8003a78 <HAL_ADC_Start_DMA+0x178>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d107      	bne.n	8003a78 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003a76:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003a78:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <HAL_ADC_Start_DMA+0x1d0>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d113      	bne.n	8003aac <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a13      	ldr	r2, [pc, #76]	; (8003ad8 <HAL_ADC_Start_DMA+0x1d8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d10e      	bne.n	8003aac <HAL_ADC_Start_DMA+0x1ac>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d107      	bne.n	8003aac <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003aaa:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	431bde83 	.word	0x431bde83
 8003ac0:	fffff8fe 	.word	0xfffff8fe
 8003ac4:	08003f8d 	.word	0x08003f8d
 8003ac8:	08004047 	.word	0x08004047
 8003acc:	08004063 	.word	0x08004063
 8003ad0:	40012300 	.word	0x40012300
 8003ad4:	40012000 	.word	0x40012000
 8003ad8:	40012200 	.word	0x40012200

08003adc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d101      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x1c>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e12a      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x272>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b09      	cmp	r3, #9
 8003b2e:	d93a      	bls.n	8003ba6 <HAL_ADC_ConfigChannel+0xa2>
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b38:	d035      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68d9      	ldr	r1, [r3, #12]
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	461a      	mov	r2, r3
 8003b48:	4613      	mov	r3, r2
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3b1e      	subs	r3, #30
 8003b50:	2207      	movs	r2, #7
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43da      	mvns	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a87      	ldr	r2, [pc, #540]	; (8003d84 <HAL_ADC_ConfigChannel+0x280>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d10a      	bne.n	8003b80 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68d9      	ldr	r1, [r3, #12]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	061a      	lsls	r2, r3, #24
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b7e:	e035      	b.n	8003bec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68d9      	ldr	r1, [r3, #12]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	4618      	mov	r0, r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4403      	add	r3, r0
 8003b98:	3b1e      	subs	r3, #30
 8003b9a:	409a      	lsls	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ba4:	e022      	b.n	8003bec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6919      	ldr	r1, [r3, #16]
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	4413      	add	r3, r2
 8003bba:	2207      	movs	r2, #7
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	400a      	ands	r2, r1
 8003bc8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6919      	ldr	r1, [r3, #16]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689a      	ldr	r2, [r3, #8]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	4618      	mov	r0, r3
 8003bdc:	4603      	mov	r3, r0
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4403      	add	r3, r0
 8003be2:	409a      	lsls	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b06      	cmp	r3, #6
 8003bf2:	d824      	bhi.n	8003c3e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4413      	add	r3, r2
 8003c04:	3b05      	subs	r3, #5
 8003c06:	221f      	movs	r2, #31
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	43da      	mvns	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	400a      	ands	r2, r1
 8003c14:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	4618      	mov	r0, r3
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	685a      	ldr	r2, [r3, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3b05      	subs	r3, #5
 8003c30:	fa00 f203 	lsl.w	r2, r0, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	635a      	str	r2, [r3, #52]	; 0x34
 8003c3c:	e04c      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d824      	bhi.n	8003c90 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	3b23      	subs	r3, #35	; 0x23
 8003c58:	221f      	movs	r2, #31
 8003c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5e:	43da      	mvns	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	400a      	ands	r2, r1
 8003c66:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	4618      	mov	r0, r3
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	3b23      	subs	r3, #35	; 0x23
 8003c82:	fa00 f203 	lsl.w	r2, r0, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8003c8e:	e023      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4413      	add	r3, r2
 8003ca0:	3b41      	subs	r3, #65	; 0x41
 8003ca2:	221f      	movs	r2, #31
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	400a      	ands	r2, r1
 8003cb0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	3b41      	subs	r3, #65	; 0x41
 8003ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a2a      	ldr	r2, [pc, #168]	; (8003d88 <HAL_ADC_ConfigChannel+0x284>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10a      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x1f4>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cea:	d105      	bne.n	8003cf8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003cec:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_ADC_ConfigChannel+0x288>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	4a26      	ldr	r2, [pc, #152]	; (8003d8c <HAL_ADC_ConfigChannel+0x288>)
 8003cf2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003cf6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <HAL_ADC_ConfigChannel+0x284>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d109      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x212>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b12      	cmp	r3, #18
 8003d08:	d105      	bne.n	8003d16 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_ADC_ConfigChannel+0x288>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <HAL_ADC_ConfigChannel+0x288>)
 8003d10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d14:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <HAL_ADC_ConfigChannel+0x284>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d125      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x268>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a17      	ldr	r2, [pc, #92]	; (8003d84 <HAL_ADC_ConfigChannel+0x280>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d003      	beq.n	8003d32 <HAL_ADC_ConfigChannel+0x22e>
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2b11      	cmp	r3, #17
 8003d30:	d11c      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003d32:	4b16      	ldr	r3, [pc, #88]	; (8003d8c <HAL_ADC_ConfigChannel+0x288>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a15      	ldr	r2, [pc, #84]	; (8003d8c <HAL_ADC_ConfigChannel+0x288>)
 8003d38:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d3c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a10      	ldr	r2, [pc, #64]	; (8003d84 <HAL_ADC_ConfigChannel+0x280>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d111      	bne.n	8003d6c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003d48:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_ADC_ConfigChannel+0x28c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a11      	ldr	r2, [pc, #68]	; (8003d94 <HAL_ADC_ConfigChannel+0x290>)
 8003d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d52:	0c9a      	lsrs	r2, r3, #18
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d5e:	e002      	b.n	8003d66 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f9      	bne.n	8003d60 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	10000012 	.word	0x10000012
 8003d88:	40012000 	.word	0x40012000
 8003d8c:	40012300 	.word	0x40012300
 8003d90:	20000000 	.word	0x20000000
 8003d94:	431bde83 	.word	0x431bde83

08003d98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003da0:	4b78      	ldr	r3, [pc, #480]	; (8003f84 <ADC_Init+0x1ec>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	4a77      	ldr	r2, [pc, #476]	; (8003f84 <ADC_Init+0x1ec>)
 8003da6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003daa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003dac:	4b75      	ldr	r3, [pc, #468]	; (8003f84 <ADC_Init+0x1ec>)
 8003dae:	685a      	ldr	r2, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	4973      	ldr	r1, [pc, #460]	; (8003f84 <ADC_Init+0x1ec>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	021a      	lsls	r2, r3, #8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003dec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6859      	ldr	r1, [r3, #4]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6899      	ldr	r1, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68da      	ldr	r2, [r3, #12]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e26:	4a58      	ldr	r2, [pc, #352]	; (8003f88 <ADC_Init+0x1f0>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6899      	ldr	r1, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6899      	ldr	r1, [r3, #8]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	609a      	str	r2, [r3, #8]
 8003e70:	e00f      	b.n	8003e92 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003e90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689a      	ldr	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0202 	bic.w	r2, r2, #2
 8003ea0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6899      	ldr	r1, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	005a      	lsls	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d01b      	beq.n	8003ef8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ece:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003ede:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6859      	ldr	r1, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	3b01      	subs	r3, #1
 8003eec:	035a      	lsls	r2, r3, #13
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	605a      	str	r2, [r3, #4]
 8003ef6:	e007      	b.n	8003f08 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	051a      	lsls	r2, r3, #20
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6899      	ldr	r1, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f4a:	025a      	lsls	r2, r3, #9
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6899      	ldr	r1, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	029a      	lsls	r2, r3, #10
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	609a      	str	r2, [r3, #8]
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	40012300 	.word	0x40012300
 8003f88:	0f000001 	.word	0x0f000001

08003f8c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d13c      	bne.n	8004020 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d12b      	bne.n	8004018 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d127      	bne.n	8004018 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d006      	beq.n	8003fe4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d119      	bne.n	8004018 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0220 	bic.w	r2, r2, #32
 8003ff2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d105      	bne.n	8004018 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f043 0201 	orr.w	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7fe f95f 	bl	80022dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800401e:	e00e      	b.n	800403e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b00      	cmp	r3, #0
 800402a:	d003      	beq.n	8004034 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f7ff fd5f 	bl	8003af0 <HAL_ADC_ErrorCallback>
}
 8004032:	e004      	b.n	800403e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	4798      	blx	r3
}
 800403e:	bf00      	nop
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004052:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004054:	68f8      	ldr	r0, [r7, #12]
 8004056:	f7ff fd41 	bl	8003adc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b084      	sub	sp, #16
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2240      	movs	r2, #64	; 0x40
 8004074:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407a:	f043 0204 	orr.w	r2, r3, #4
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f7ff fd34 	bl	8003af0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f003 0307 	and.w	r3, r3, #7
 800409e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <__NVIC_SetPriorityGrouping+0x40>)
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040ac:	4013      	ands	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <__NVIC_SetPriorityGrouping+0x44>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040be:	4a04      	ldr	r2, [pc, #16]	; (80040d0 <__NVIC_SetPriorityGrouping+0x40>)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	60d3      	str	r3, [r2, #12]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	e000ed00 	.word	0xe000ed00
 80040d4:	05fa0000 	.word	0x05fa0000

080040d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040dc:	4b04      	ldr	r3, [pc, #16]	; (80040f0 <__NVIC_GetPriorityGrouping+0x18>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	f003 0307 	and.w	r3, r3, #7
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	4603      	mov	r3, r0
 80040fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004102:	2b00      	cmp	r3, #0
 8004104:	db0b      	blt.n	800411e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	f003 021f 	and.w	r2, r3, #31
 800410c:	4907      	ldr	r1, [pc, #28]	; (800412c <__NVIC_EnableIRQ+0x38>)
 800410e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2001      	movs	r0, #1
 8004116:	fa00 f202 	lsl.w	r2, r0, r2
 800411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	e000e100 	.word	0xe000e100

08004130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	6039      	str	r1, [r7, #0]
 800413a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004140:	2b00      	cmp	r3, #0
 8004142:	db0a      	blt.n	800415a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	490c      	ldr	r1, [pc, #48]	; (800417c <__NVIC_SetPriority+0x4c>)
 800414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800414e:	0112      	lsls	r2, r2, #4
 8004150:	b2d2      	uxtb	r2, r2
 8004152:	440b      	add	r3, r1
 8004154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004158:	e00a      	b.n	8004170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	b2da      	uxtb	r2, r3
 800415e:	4908      	ldr	r1, [pc, #32]	; (8004180 <__NVIC_SetPriority+0x50>)
 8004160:	79fb      	ldrb	r3, [r7, #7]
 8004162:	f003 030f 	and.w	r3, r3, #15
 8004166:	3b04      	subs	r3, #4
 8004168:	0112      	lsls	r2, r2, #4
 800416a:	b2d2      	uxtb	r2, r2
 800416c:	440b      	add	r3, r1
 800416e:	761a      	strb	r2, [r3, #24]
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000e100 	.word	0xe000e100
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004184:	b480      	push	{r7}
 8004186:	b089      	sub	sp, #36	; 0x24
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	f1c3 0307 	rsb	r3, r3, #7
 800419e:	2b04      	cmp	r3, #4
 80041a0:	bf28      	it	cs
 80041a2:	2304      	movcs	r3, #4
 80041a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	3304      	adds	r3, #4
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d902      	bls.n	80041b4 <NVIC_EncodePriority+0x30>
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	3b03      	subs	r3, #3
 80041b2:	e000      	b.n	80041b6 <NVIC_EncodePriority+0x32>
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041b8:	f04f 32ff 	mov.w	r2, #4294967295
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	43da      	mvns	r2, r3
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	401a      	ands	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041cc:	f04f 31ff 	mov.w	r1, #4294967295
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	fa01 f303 	lsl.w	r3, r1, r3
 80041d6:	43d9      	mvns	r1, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041dc:	4313      	orrs	r3, r2
         );
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041fc:	d301      	bcc.n	8004202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041fe:	2301      	movs	r3, #1
 8004200:	e00f      	b.n	8004222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <SysTick_Config+0x40>)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	3b01      	subs	r3, #1
 8004208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800420a:	210f      	movs	r1, #15
 800420c:	f04f 30ff 	mov.w	r0, #4294967295
 8004210:	f7ff ff8e 	bl	8004130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <SysTick_Config+0x40>)
 8004216:	2200      	movs	r2, #0
 8004218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800421a:	4b04      	ldr	r3, [pc, #16]	; (800422c <SysTick_Config+0x40>)
 800421c:	2207      	movs	r2, #7
 800421e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3708      	adds	r7, #8
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	e000e010 	.word	0xe000e010

08004230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7ff ff29 	bl	8004090 <__NVIC_SetPriorityGrouping>
}
 800423e:	bf00      	nop
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004246:	b580      	push	{r7, lr}
 8004248:	b086      	sub	sp, #24
 800424a:	af00      	add	r7, sp, #0
 800424c:	4603      	mov	r3, r0
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	607a      	str	r2, [r7, #4]
 8004252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004258:	f7ff ff3e 	bl	80040d8 <__NVIC_GetPriorityGrouping>
 800425c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	6978      	ldr	r0, [r7, #20]
 8004264:	f7ff ff8e 	bl	8004184 <NVIC_EncodePriority>
 8004268:	4602      	mov	r2, r0
 800426a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800426e:	4611      	mov	r1, r2
 8004270:	4618      	mov	r0, r3
 8004272:	f7ff ff5d 	bl	8004130 <__NVIC_SetPriority>
}
 8004276:	bf00      	nop
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b082      	sub	sp, #8
 8004282:	af00      	add	r7, sp, #0
 8004284:	4603      	mov	r3, r0
 8004286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff31 	bl	80040f4 <__NVIC_EnableIRQ>
}
 8004292:	bf00      	nop
 8004294:	3708      	adds	r7, #8
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff ffa2 	bl	80041ec <SysTick_Config>
 80042a8:	4603      	mov	r3, r0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3708      	adds	r7, #8
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
	...

080042b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b086      	sub	sp, #24
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042c0:	f7ff faac 	bl	800381c <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d101      	bne.n	80042d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e099      	b.n	8004404 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0201 	bic.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042f0:	e00f      	b.n	8004312 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042f2:	f7ff fa93 	bl	800381c <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b05      	cmp	r3, #5
 80042fe:	d908      	bls.n	8004312 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2203      	movs	r2, #3
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e078      	b.n	8004404 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e8      	bne.n	80042f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4b38      	ldr	r3, [pc, #224]	; (800440c <HAL_DMA_Init+0x158>)
 800432c:	4013      	ands	r3, r2
 800432e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800433e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800434a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	4313      	orrs	r3, r2
 8004362:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	2b04      	cmp	r3, #4
 800436a:	d107      	bne.n	800437c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	4313      	orrs	r3, r2
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0307 	bic.w	r3, r3, #7
 8004392:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d117      	bne.n	80043d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f000 fa99 	bl	80048f0 <DMA_CheckFifoParam>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2240      	movs	r2, #64	; 0x40
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80043d2:	2301      	movs	r3, #1
 80043d4:	e016      	b.n	8004404 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 fa50 	bl	8004884 <DMA_CalcBaseAndBitshift>
 80043e4:	4603      	mov	r3, r0
 80043e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	223f      	movs	r2, #63	; 0x3f
 80043ee:	409a      	lsls	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2201      	movs	r2, #1
 80043fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	e010803f 	.word	0xe010803f

08004410 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
 800441c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004426:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800442e:	2b01      	cmp	r3, #1
 8004430:	d101      	bne.n	8004436 <HAL_DMA_Start_IT+0x26>
 8004432:	2302      	movs	r3, #2
 8004434:	e048      	b.n	80044c8 <HAL_DMA_Start_IT+0xb8>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004444:	b2db      	uxtb	r3, r3
 8004446:	2b01      	cmp	r3, #1
 8004448:	d137      	bne.n	80044ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2202      	movs	r2, #2
 800444e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	68b9      	ldr	r1, [r7, #8]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f9e2 	bl	8004828 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004468:	223f      	movs	r2, #63	; 0x3f
 800446a:	409a      	lsls	r2, r3
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f042 0216 	orr.w	r2, r2, #22
 800447e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695a      	ldr	r2, [r3, #20]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800448e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0208 	orr.w	r2, r2, #8
 80044a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e005      	b.n	80044c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
 80044c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d004      	beq.n	80044ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2280      	movs	r2, #128	; 0x80
 80044e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e00c      	b.n	8004508 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2205      	movs	r2, #5
 80044f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0201 	bic.w	r2, r2, #1
 8004504:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800451c:	2300      	movs	r3, #0
 800451e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004520:	4b92      	ldr	r3, [pc, #584]	; (800476c <HAL_DMA_IRQHandler+0x258>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a92      	ldr	r2, [pc, #584]	; (8004770 <HAL_DMA_IRQHandler+0x25c>)
 8004526:	fba2 2303 	umull	r2, r3, r2, r3
 800452a:	0a9b      	lsrs	r3, r3, #10
 800452c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004532:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453e:	2208      	movs	r2, #8
 8004540:	409a      	lsls	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4013      	ands	r3, r2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01a      	beq.n	8004580 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d013      	beq.n	8004580 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0204 	bic.w	r2, r2, #4
 8004566:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	2208      	movs	r2, #8
 800456e:	409a      	lsls	r2, r3
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004578:	f043 0201 	orr.w	r2, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004584:	2201      	movs	r2, #1
 8004586:	409a      	lsls	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d012      	beq.n	80045b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	2201      	movs	r2, #1
 80045a4:	409a      	lsls	r2, r3
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ae:	f043 0202 	orr.w	r2, r3, #2
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ba:	2204      	movs	r2, #4
 80045bc:	409a      	lsls	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4013      	ands	r3, r2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d012      	beq.n	80045ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d8:	2204      	movs	r2, #4
 80045da:	409a      	lsls	r2, r3
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e4:	f043 0204 	orr.w	r2, r3, #4
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f0:	2210      	movs	r2, #16
 80045f2:	409a      	lsls	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d043      	beq.n	8004684 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0308 	and.w	r3, r3, #8
 8004606:	2b00      	cmp	r3, #0
 8004608:	d03c      	beq.n	8004684 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800460e:	2210      	movs	r2, #16
 8004610:	409a      	lsls	r2, r3
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d018      	beq.n	8004656 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d108      	bne.n	8004644 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	2b00      	cmp	r3, #0
 8004638:	d024      	beq.n	8004684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
 8004642:	e01f      	b.n	8004684 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01b      	beq.n	8004684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	4798      	blx	r3
 8004654:	e016      	b.n	8004684 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004660:	2b00      	cmp	r3, #0
 8004662:	d107      	bne.n	8004674 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0208 	bic.w	r2, r2, #8
 8004672:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	2220      	movs	r2, #32
 800468a:	409a      	lsls	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4013      	ands	r3, r2
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 808e 	beq.w	80047b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0310 	and.w	r3, r3, #16
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8086 	beq.w	80047b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	2220      	movs	r2, #32
 80046ac:	409a      	lsls	r2, r3
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d136      	bne.n	800472c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0216 	bic.w	r2, r2, #22
 80046cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695a      	ldr	r2, [r3, #20]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d103      	bne.n	80046ee <HAL_DMA_IRQHandler+0x1da>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d007      	beq.n	80046fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f022 0208 	bic.w	r2, r2, #8
 80046fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004702:	223f      	movs	r2, #63	; 0x3f
 8004704:	409a      	lsls	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471e:	2b00      	cmp	r3, #0
 8004720:	d07d      	beq.n	800481e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	4798      	blx	r3
        }
        return;
 800472a:	e078      	b.n	800481e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d01c      	beq.n	8004774 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d108      	bne.n	800475a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474c:	2b00      	cmp	r3, #0
 800474e:	d030      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	4798      	blx	r3
 8004758:	e02b      	b.n	80047b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d027      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	4798      	blx	r3
 800476a:	e022      	b.n	80047b2 <HAL_DMA_IRQHandler+0x29e>
 800476c:	20000000 	.word	0x20000000
 8004770:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10f      	bne.n	80047a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0210 	bic.w	r2, r2, #16
 8004790:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2201      	movs	r2, #1
 800479e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d032      	beq.n	8004820 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d022      	beq.n	800480c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2205      	movs	r2, #5
 80047ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	3301      	adds	r3, #1
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d307      	bcc.n	80047fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f2      	bne.n	80047de <HAL_DMA_IRQHandler+0x2ca>
 80047f8:	e000      	b.n	80047fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80047fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
 800481c:	e000      	b.n	8004820 <HAL_DMA_IRQHandler+0x30c>
        return;
 800481e:	bf00      	nop
    }
  }
}
 8004820:	3718      	adds	r7, #24
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
 8004826:	bf00      	nop

08004828 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004844:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b40      	cmp	r3, #64	; 0x40
 8004854:	d108      	bne.n	8004868 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004866:	e007      	b.n	8004878 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	60da      	str	r2, [r3, #12]
}
 8004878:	bf00      	nop
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	3b10      	subs	r3, #16
 8004894:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <DMA_CalcBaseAndBitshift+0x60>)
 8004896:	fba2 2303 	umull	r2, r3, r2, r3
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800489e:	4a12      	ldr	r2, [pc, #72]	; (80048e8 <DMA_CalcBaseAndBitshift+0x64>)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2b03      	cmp	r3, #3
 80048b0:	d908      	bls.n	80048c4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	461a      	mov	r2, r3
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <DMA_CalcBaseAndBitshift+0x68>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	1d1a      	adds	r2, r3, #4
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	659a      	str	r2, [r3, #88]	; 0x58
 80048c2:	e006      	b.n	80048d2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	461a      	mov	r2, r3
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <DMA_CalcBaseAndBitshift+0x68>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3714      	adds	r7, #20
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	aaaaaaab 	.word	0xaaaaaaab
 80048e8:	0800a72c 	.word	0x0800a72c
 80048ec:	fffffc00 	.word	0xfffffc00

080048f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004900:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d11f      	bne.n	800494a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b03      	cmp	r3, #3
 800490e:	d855      	bhi.n	80049bc <DMA_CheckFifoParam+0xcc>
 8004910:	a201      	add	r2, pc, #4	; (adr r2, 8004918 <DMA_CheckFifoParam+0x28>)
 8004912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004916:	bf00      	nop
 8004918:	08004929 	.word	0x08004929
 800491c:	0800493b 	.word	0x0800493b
 8004920:	08004929 	.word	0x08004929
 8004924:	080049bd 	.word	0x080049bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d045      	beq.n	80049c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004938:	e042      	b.n	80049c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004942:	d13f      	bne.n	80049c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004948:	e03c      	b.n	80049c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004952:	d121      	bne.n	8004998 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b03      	cmp	r3, #3
 8004958:	d836      	bhi.n	80049c8 <DMA_CheckFifoParam+0xd8>
 800495a:	a201      	add	r2, pc, #4	; (adr r2, 8004960 <DMA_CheckFifoParam+0x70>)
 800495c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004960:	08004971 	.word	0x08004971
 8004964:	08004977 	.word	0x08004977
 8004968:	08004971 	.word	0x08004971
 800496c:	08004989 	.word	0x08004989
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	73fb      	strb	r3, [r7, #15]
      break;
 8004974:	e02f      	b.n	80049d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d024      	beq.n	80049cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004986:	e021      	b.n	80049cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800498c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004990:	d11e      	bne.n	80049d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004996:	e01b      	b.n	80049d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d902      	bls.n	80049a4 <DMA_CheckFifoParam+0xb4>
 800499e:	2b03      	cmp	r3, #3
 80049a0:	d003      	beq.n	80049aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049a2:	e018      	b.n	80049d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	73fb      	strb	r3, [r7, #15]
      break;
 80049a8:	e015      	b.n	80049d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00e      	beq.n	80049d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	73fb      	strb	r3, [r7, #15]
      break;
 80049ba:	e00b      	b.n	80049d4 <DMA_CheckFifoParam+0xe4>
      break;
 80049bc:	bf00      	nop
 80049be:	e00a      	b.n	80049d6 <DMA_CheckFifoParam+0xe6>
      break;
 80049c0:	bf00      	nop
 80049c2:	e008      	b.n	80049d6 <DMA_CheckFifoParam+0xe6>
      break;
 80049c4:	bf00      	nop
 80049c6:	e006      	b.n	80049d6 <DMA_CheckFifoParam+0xe6>
      break;
 80049c8:	bf00      	nop
 80049ca:	e004      	b.n	80049d6 <DMA_CheckFifoParam+0xe6>
      break;
 80049cc:	bf00      	nop
 80049ce:	e002      	b.n	80049d6 <DMA_CheckFifoParam+0xe6>
      break;   
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <DMA_CheckFifoParam+0xe6>
      break;
 80049d4:	bf00      	nop
    }
  } 
  
  return status; 
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b089      	sub	sp, #36	; 0x24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80049f6:	2300      	movs	r3, #0
 80049f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80049fe:	2300      	movs	r3, #0
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	e175      	b.n	8004cf0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004a04:	2201      	movs	r2, #1
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	697a      	ldr	r2, [r7, #20]
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	f040 8164 	bne.w	8004cea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d00b      	beq.n	8004a42 <HAL_GPIO_Init+0x5e>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d007      	beq.n	8004a42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004a36:	2b11      	cmp	r3, #17
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b12      	cmp	r3, #18
 8004a40:	d130      	bne.n	8004aa4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a78:	2201      	movs	r2, #1
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	091b      	lsrs	r3, r3, #4
 8004a8e:	f003 0201 	and.w	r2, r3, #1
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	2203      	movs	r2, #3
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689a      	ldr	r2, [r3, #8]
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x100>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2b12      	cmp	r3, #18
 8004ae2:	d123      	bne.n	8004b2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	08da      	lsrs	r2, r3, #3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3208      	adds	r2, #8
 8004aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f003 0307 	and.w	r3, r3, #7
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	220f      	movs	r2, #15
 8004afc:	fa02 f303 	lsl.w	r3, r2, r3
 8004b00:	43db      	mvns	r3, r3
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	4013      	ands	r3, r2
 8004b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	fa02 f303 	lsl.w	r3, r2, r3
 8004b18:	69ba      	ldr	r2, [r7, #24]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	08da      	lsrs	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3208      	adds	r2, #8
 8004b26:	69b9      	ldr	r1, [r7, #24]
 8004b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	2203      	movs	r2, #3
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4013      	ands	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f003 0203 	and.w	r2, r3, #3
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	f000 80be 	beq.w	8004cea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b6e:	4b65      	ldr	r3, [pc, #404]	; (8004d04 <HAL_GPIO_Init+0x320>)
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	4a64      	ldr	r2, [pc, #400]	; (8004d04 <HAL_GPIO_Init+0x320>)
 8004b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b78:	6453      	str	r3, [r2, #68]	; 0x44
 8004b7a:	4b62      	ldr	r3, [pc, #392]	; (8004d04 <HAL_GPIO_Init+0x320>)
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b86:	4a60      	ldr	r2, [pc, #384]	; (8004d08 <HAL_GPIO_Init+0x324>)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	089b      	lsrs	r3, r3, #2
 8004b8c:	3302      	adds	r3, #2
 8004b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	220f      	movs	r2, #15
 8004b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba2:	43db      	mvns	r3, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a57      	ldr	r2, [pc, #348]	; (8004d0c <HAL_GPIO_Init+0x328>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d037      	beq.n	8004c22 <HAL_GPIO_Init+0x23e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a56      	ldr	r2, [pc, #344]	; (8004d10 <HAL_GPIO_Init+0x32c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d031      	beq.n	8004c1e <HAL_GPIO_Init+0x23a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a55      	ldr	r2, [pc, #340]	; (8004d14 <HAL_GPIO_Init+0x330>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d02b      	beq.n	8004c1a <HAL_GPIO_Init+0x236>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a54      	ldr	r2, [pc, #336]	; (8004d18 <HAL_GPIO_Init+0x334>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d025      	beq.n	8004c16 <HAL_GPIO_Init+0x232>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a53      	ldr	r2, [pc, #332]	; (8004d1c <HAL_GPIO_Init+0x338>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d01f      	beq.n	8004c12 <HAL_GPIO_Init+0x22e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a52      	ldr	r2, [pc, #328]	; (8004d20 <HAL_GPIO_Init+0x33c>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d019      	beq.n	8004c0e <HAL_GPIO_Init+0x22a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4a51      	ldr	r2, [pc, #324]	; (8004d24 <HAL_GPIO_Init+0x340>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_GPIO_Init+0x226>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a50      	ldr	r2, [pc, #320]	; (8004d28 <HAL_GPIO_Init+0x344>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d00d      	beq.n	8004c06 <HAL_GPIO_Init+0x222>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a4f      	ldr	r2, [pc, #316]	; (8004d2c <HAL_GPIO_Init+0x348>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d007      	beq.n	8004c02 <HAL_GPIO_Init+0x21e>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a4e      	ldr	r2, [pc, #312]	; (8004d30 <HAL_GPIO_Init+0x34c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <HAL_GPIO_Init+0x21a>
 8004bfa:	2309      	movs	r3, #9
 8004bfc:	e012      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004bfe:	230a      	movs	r3, #10
 8004c00:	e010      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c02:	2308      	movs	r3, #8
 8004c04:	e00e      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c06:	2307      	movs	r3, #7
 8004c08:	e00c      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c0a:	2306      	movs	r3, #6
 8004c0c:	e00a      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c0e:	2305      	movs	r3, #5
 8004c10:	e008      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c12:	2304      	movs	r3, #4
 8004c14:	e006      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c16:	2303      	movs	r3, #3
 8004c18:	e004      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	e002      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <HAL_GPIO_Init+0x240>
 8004c22:	2300      	movs	r3, #0
 8004c24:	69fa      	ldr	r2, [r7, #28]
 8004c26:	f002 0203 	and.w	r2, r2, #3
 8004c2a:	0092      	lsls	r2, r2, #2
 8004c2c:	4093      	lsls	r3, r2
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004c34:	4934      	ldr	r1, [pc, #208]	; (8004d08 <HAL_GPIO_Init+0x324>)
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c42:	4b3c      	ldr	r3, [pc, #240]	; (8004d34 <HAL_GPIO_Init+0x350>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	43db      	mvns	r3, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	4013      	ands	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c66:	4a33      	ldr	r2, [pc, #204]	; (8004d34 <HAL_GPIO_Init+0x350>)
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004c6c:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <HAL_GPIO_Init+0x350>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	69ba      	ldr	r2, [r7, #24]
 8004c78:	4013      	ands	r3, r2
 8004c7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c90:	4a28      	ldr	r2, [pc, #160]	; (8004d34 <HAL_GPIO_Init+0x350>)
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c96:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <HAL_GPIO_Init+0x350>)
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	43db      	mvns	r3, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d003      	beq.n	8004cba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <HAL_GPIO_Init+0x350>)
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cc0:	4b1c      	ldr	r3, [pc, #112]	; (8004d34 <HAL_GPIO_Init+0x350>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	43db      	mvns	r3, r3
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4013      	ands	r3, r2
 8004cce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d003      	beq.n	8004ce4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ce4:	4a13      	ldr	r2, [pc, #76]	; (8004d34 <HAL_GPIO_Init+0x350>)
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	3301      	adds	r3, #1
 8004cee:	61fb      	str	r3, [r7, #28]
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	2b0f      	cmp	r3, #15
 8004cf4:	f67f ae86 	bls.w	8004a04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004cf8:	bf00      	nop
 8004cfa:	3724      	adds	r7, #36	; 0x24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40013800 	.word	0x40013800
 8004d0c:	40020000 	.word	0x40020000
 8004d10:	40020400 	.word	0x40020400
 8004d14:	40020800 	.word	0x40020800
 8004d18:	40020c00 	.word	0x40020c00
 8004d1c:	40021000 	.word	0x40021000
 8004d20:	40021400 	.word	0x40021400
 8004d24:	40021800 	.word	0x40021800
 8004d28:	40021c00 	.word	0x40021c00
 8004d2c:	40022000 	.word	0x40022000
 8004d30:	40022400 	.word	0x40022400
 8004d34:	40013c00 	.word	0x40013c00

08004d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	807b      	strh	r3, [r7, #2]
 8004d44:	4613      	mov	r3, r2
 8004d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d48:	787b      	ldrb	r3, [r7, #1]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d4e:	887a      	ldrh	r2, [r7, #2]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004d54:	e003      	b.n	8004d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004d56:	887b      	ldrh	r3, [r7, #2]
 8004d58:	041a      	lsls	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	619a      	str	r2, [r3, #24]
}
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
	...

08004d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	4603      	mov	r3, r0
 8004d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d78:	695a      	ldr	r2, [r3, #20]
 8004d7a:	88fb      	ldrh	r3, [r7, #6]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d006      	beq.n	8004d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d82:	4a05      	ldr	r2, [pc, #20]	; (8004d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fc f95a 	bl	8001044 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d90:	bf00      	nop
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40013c00 	.word	0x40013c00

08004d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e07f      	b.n	8004eae <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fd fe5c 	bl	8002a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2224      	movs	r2, #36	; 0x24
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0201 	bic.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d107      	bne.n	8004e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689a      	ldr	r2, [r3, #8]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	e006      	b.n	8004e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d104      	bne.n	8004e36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6859      	ldr	r1, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b1d      	ldr	r3, [pc, #116]	; (8004eb8 <HAL_I2C_Init+0x11c>)
 8004e42:	430b      	orrs	r3, r1
 8004e44:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e54:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	ea42 0103 	orr.w	r1, r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	021a      	lsls	r2, r3, #8
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	69d9      	ldr	r1, [r3, #28]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1a      	ldr	r2, [r3, #32]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004eac:	2300      	movs	r3, #0
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3708      	adds	r7, #8
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	02008000 	.word	0x02008000

08004ebc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b20      	cmp	r3, #32
 8004ed0:	d138      	bne.n	8004f44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e032      	b.n	8004f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2224      	movs	r2, #36	; 0x24
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f022 0201 	bic.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004f0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6819      	ldr	r1, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0201 	orr.w	r2, r2, #1
 8004f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f40:	2300      	movs	r3, #0
 8004f42:	e000      	b.n	8004f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f44:	2302      	movs	r3, #2
  }
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	370c      	adds	r7, #12
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr

08004f52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d139      	bne.n	8004fdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d101      	bne.n	8004f76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f72:	2302      	movs	r3, #2
 8004f74:	e033      	b.n	8004fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2224      	movs	r2, #36	; 0x24
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004fa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	e000      	b.n	8004fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fdc:	2302      	movs	r3, #2
  }
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a04      	ldr	r2, [pc, #16]	; (8005008 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffa:	6013      	str	r3, [r2, #0]
}
 8004ffc:	bf00      	nop
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40007000 	.word	0x40007000

0800500c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005012:	2300      	movs	r3, #0
 8005014:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005016:	4b23      	ldr	r3, [pc, #140]	; (80050a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	4a22      	ldr	r2, [pc, #136]	; (80050a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005020:	6413      	str	r3, [r2, #64]	; 0x40
 8005022:	4b20      	ldr	r3, [pc, #128]	; (80050a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800502e:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a1d      	ldr	r2, [pc, #116]	; (80050a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005038:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800503a:	f7fe fbef 	bl	800381c <HAL_GetTick>
 800503e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005040:	e009      	b.n	8005056 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005042:	f7fe fbeb 	bl	800381c <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005050:	d901      	bls.n	8005056 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e022      	b.n	800509c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800505e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005062:	d1ee      	bne.n	8005042 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005064:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a0f      	ldr	r2, [pc, #60]	; (80050a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800506a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800506e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005070:	f7fe fbd4 	bl	800381c <HAL_GetTick>
 8005074:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005076:	e009      	b.n	800508c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005078:	f7fe fbd0 	bl	800381c <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005086:	d901      	bls.n	800508c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e007      	b.n	800509c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005098:	d1ee      	bne.n	8005078 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40007000 	.word	0x40007000

080050ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80050b4:	2300      	movs	r3, #0
 80050b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e29b      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 8087 	beq.w	80051de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80050d0:	4b96      	ldr	r3, [pc, #600]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 030c 	and.w	r3, r3, #12
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d00c      	beq.n	80050f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050dc:	4b93      	ldr	r3, [pc, #588]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f003 030c 	and.w	r3, r3, #12
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d112      	bne.n	800510e <HAL_RCC_OscConfig+0x62>
 80050e8:	4b90      	ldr	r3, [pc, #576]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f4:	d10b      	bne.n	800510e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f6:	4b8d      	ldr	r3, [pc, #564]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d06c      	beq.n	80051dc <HAL_RCC_OscConfig+0x130>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d168      	bne.n	80051dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e275      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005116:	d106      	bne.n	8005126 <HAL_RCC_OscConfig+0x7a>
 8005118:	4b84      	ldr	r3, [pc, #528]	; (800532c <HAL_RCC_OscConfig+0x280>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a83      	ldr	r2, [pc, #524]	; (800532c <HAL_RCC_OscConfig+0x280>)
 800511e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005122:	6013      	str	r3, [r2, #0]
 8005124:	e02e      	b.n	8005184 <HAL_RCC_OscConfig+0xd8>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0x9c>
 800512e:	4b7f      	ldr	r3, [pc, #508]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a7e      	ldr	r2, [pc, #504]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005134:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4b7c      	ldr	r3, [pc, #496]	; (800532c <HAL_RCC_OscConfig+0x280>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a7b      	ldr	r2, [pc, #492]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005140:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e01d      	b.n	8005184 <HAL_RCC_OscConfig+0xd8>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005150:	d10c      	bne.n	800516c <HAL_RCC_OscConfig+0xc0>
 8005152:	4b76      	ldr	r3, [pc, #472]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a75      	ldr	r2, [pc, #468]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005158:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800515c:	6013      	str	r3, [r2, #0]
 800515e:	4b73      	ldr	r3, [pc, #460]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a72      	ldr	r2, [pc, #456]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	e00b      	b.n	8005184 <HAL_RCC_OscConfig+0xd8>
 800516c:	4b6f      	ldr	r3, [pc, #444]	; (800532c <HAL_RCC_OscConfig+0x280>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a6e      	ldr	r2, [pc, #440]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	4b6c      	ldr	r3, [pc, #432]	; (800532c <HAL_RCC_OscConfig+0x280>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a6b      	ldr	r2, [pc, #428]	; (800532c <HAL_RCC_OscConfig+0x280>)
 800517e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d013      	beq.n	80051b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518c:	f7fe fb46 	bl	800381c <HAL_GetTick>
 8005190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005194:	f7fe fb42 	bl	800381c <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b64      	cmp	r3, #100	; 0x64
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e229      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051a6:	4b61      	ldr	r3, [pc, #388]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d0f0      	beq.n	8005194 <HAL_RCC_OscConfig+0xe8>
 80051b2:	e014      	b.n	80051de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b4:	f7fe fb32 	bl	800381c <HAL_GetTick>
 80051b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ba:	e008      	b.n	80051ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051bc:	f7fe fb2e 	bl	800381c <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b64      	cmp	r3, #100	; 0x64
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e215      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ce:	4b57      	ldr	r3, [pc, #348]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1f0      	bne.n	80051bc <HAL_RCC_OscConfig+0x110>
 80051da:	e000      	b.n	80051de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d069      	beq.n	80052be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051ea:	4b50      	ldr	r3, [pc, #320]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f003 030c 	and.w	r3, r3, #12
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051f6:	4b4d      	ldr	r3, [pc, #308]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 030c 	and.w	r3, r3, #12
 80051fe:	2b08      	cmp	r3, #8
 8005200:	d11c      	bne.n	800523c <HAL_RCC_OscConfig+0x190>
 8005202:	4b4a      	ldr	r3, [pc, #296]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d116      	bne.n	800523c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800520e:	4b47      	ldr	r3, [pc, #284]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0302 	and.w	r3, r3, #2
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_RCC_OscConfig+0x17a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d001      	beq.n	8005226 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e1e9      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005226:	4b41      	ldr	r3, [pc, #260]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	493d      	ldr	r1, [pc, #244]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005236:	4313      	orrs	r3, r2
 8005238:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800523a:	e040      	b.n	80052be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	68db      	ldr	r3, [r3, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d023      	beq.n	800528c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005244:	4b39      	ldr	r3, [pc, #228]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a38      	ldr	r2, [pc, #224]	; (800532c <HAL_RCC_OscConfig+0x280>)
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fe fae4 	bl	800381c <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005258:	f7fe fae0 	bl	800381c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e1c7      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800526a:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_RCC_OscConfig+0x280>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005276:	4b2d      	ldr	r3, [pc, #180]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4929      	ldr	r1, [pc, #164]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005286:	4313      	orrs	r3, r2
 8005288:	600b      	str	r3, [r1, #0]
 800528a:	e018      	b.n	80052be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800528c:	4b27      	ldr	r3, [pc, #156]	; (800532c <HAL_RCC_OscConfig+0x280>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a26      	ldr	r2, [pc, #152]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005292:	f023 0301 	bic.w	r3, r3, #1
 8005296:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005298:	f7fe fac0 	bl	800381c <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052a0:	f7fe fabc 	bl	800381c <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e1a3      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80052b2:	4b1e      	ldr	r3, [pc, #120]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0308 	and.w	r3, r3, #8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d038      	beq.n	800533c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d019      	beq.n	8005306 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052d2:	4b16      	ldr	r3, [pc, #88]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80052d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d6:	4a15      	ldr	r2, [pc, #84]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052de:	f7fe fa9d 	bl	800381c <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052e4:	e008      	b.n	80052f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e6:	f7fe fa99 	bl	800381c <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d901      	bls.n	80052f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e180      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052f8:	4b0c      	ldr	r3, [pc, #48]	; (800532c <HAL_RCC_OscConfig+0x280>)
 80052fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b00      	cmp	r3, #0
 8005302:	d0f0      	beq.n	80052e6 <HAL_RCC_OscConfig+0x23a>
 8005304:	e01a      	b.n	800533c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005306:	4b09      	ldr	r3, [pc, #36]	; (800532c <HAL_RCC_OscConfig+0x280>)
 8005308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800530a:	4a08      	ldr	r2, [pc, #32]	; (800532c <HAL_RCC_OscConfig+0x280>)
 800530c:	f023 0301 	bic.w	r3, r3, #1
 8005310:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005312:	f7fe fa83 	bl	800381c <HAL_GetTick>
 8005316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005318:	e00a      	b.n	8005330 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800531a:	f7fe fa7f 	bl	800381c <HAL_GetTick>
 800531e:	4602      	mov	r2, r0
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	1ad3      	subs	r3, r2, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d903      	bls.n	8005330 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e166      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
 800532c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005330:	4b92      	ldr	r3, [pc, #584]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 8005332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1ee      	bne.n	800531a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80a4 	beq.w	8005492 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800534a:	4b8c      	ldr	r3, [pc, #560]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 800534c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10d      	bne.n	8005372 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005356:	4b89      	ldr	r3, [pc, #548]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	4a88      	ldr	r2, [pc, #544]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 800535c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005360:	6413      	str	r3, [r2, #64]	; 0x40
 8005362:	4b86      	ldr	r3, [pc, #536]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	60bb      	str	r3, [r7, #8]
 800536c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800536e:	2301      	movs	r3, #1
 8005370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005372:	4b83      	ldr	r3, [pc, #524]	; (8005580 <HAL_RCC_OscConfig+0x4d4>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537a:	2b00      	cmp	r3, #0
 800537c:	d118      	bne.n	80053b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800537e:	4b80      	ldr	r3, [pc, #512]	; (8005580 <HAL_RCC_OscConfig+0x4d4>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a7f      	ldr	r2, [pc, #508]	; (8005580 <HAL_RCC_OscConfig+0x4d4>)
 8005384:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800538a:	f7fe fa47 	bl	800381c <HAL_GetTick>
 800538e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005390:	e008      	b.n	80053a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005392:	f7fe fa43 	bl	800381c <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b64      	cmp	r3, #100	; 0x64
 800539e:	d901      	bls.n	80053a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e12a      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053a4:	4b76      	ldr	r3, [pc, #472]	; (8005580 <HAL_RCC_OscConfig+0x4d4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d106      	bne.n	80053c6 <HAL_RCC_OscConfig+0x31a>
 80053b8:	4b70      	ldr	r3, [pc, #448]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	4a6f      	ldr	r2, [pc, #444]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	6713      	str	r3, [r2, #112]	; 0x70
 80053c4:	e02d      	b.n	8005422 <HAL_RCC_OscConfig+0x376>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCC_OscConfig+0x33c>
 80053ce:	4b6b      	ldr	r3, [pc, #428]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d2:	4a6a      	ldr	r2, [pc, #424]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	6713      	str	r3, [r2, #112]	; 0x70
 80053da:	4b68      	ldr	r3, [pc, #416]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80053dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053de:	4a67      	ldr	r2, [pc, #412]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	6713      	str	r3, [r2, #112]	; 0x70
 80053e6:	e01c      	b.n	8005422 <HAL_RCC_OscConfig+0x376>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	2b05      	cmp	r3, #5
 80053ee:	d10c      	bne.n	800540a <HAL_RCC_OscConfig+0x35e>
 80053f0:	4b62      	ldr	r3, [pc, #392]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80053f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f4:	4a61      	ldr	r2, [pc, #388]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80053f6:	f043 0304 	orr.w	r3, r3, #4
 80053fa:	6713      	str	r3, [r2, #112]	; 0x70
 80053fc:	4b5f      	ldr	r3, [pc, #380]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80053fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005400:	4a5e      	ldr	r2, [pc, #376]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 8005402:	f043 0301 	orr.w	r3, r3, #1
 8005406:	6713      	str	r3, [r2, #112]	; 0x70
 8005408:	e00b      	b.n	8005422 <HAL_RCC_OscConfig+0x376>
 800540a:	4b5c      	ldr	r3, [pc, #368]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 800540c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800540e:	4a5b      	ldr	r2, [pc, #364]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 8005410:	f023 0301 	bic.w	r3, r3, #1
 8005414:	6713      	str	r3, [r2, #112]	; 0x70
 8005416:	4b59      	ldr	r3, [pc, #356]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 8005418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800541a:	4a58      	ldr	r2, [pc, #352]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 800541c:	f023 0304 	bic.w	r3, r3, #4
 8005420:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d015      	beq.n	8005456 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800542a:	f7fe f9f7 	bl	800381c <HAL_GetTick>
 800542e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005430:	e00a      	b.n	8005448 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005432:	f7fe f9f3 	bl	800381c <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005440:	4293      	cmp	r3, r2
 8005442:	d901      	bls.n	8005448 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005444:	2303      	movs	r3, #3
 8005446:	e0d8      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005448:	4b4c      	ldr	r3, [pc, #304]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 800544a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0ee      	beq.n	8005432 <HAL_RCC_OscConfig+0x386>
 8005454:	e014      	b.n	8005480 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005456:	f7fe f9e1 	bl	800381c <HAL_GetTick>
 800545a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800545c:	e00a      	b.n	8005474 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800545e:	f7fe f9dd 	bl	800381c <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	f241 3288 	movw	r2, #5000	; 0x1388
 800546c:	4293      	cmp	r3, r2
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e0c2      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005474:	4b41      	ldr	r3, [pc, #260]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 8005476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005478:	f003 0302 	and.w	r3, r3, #2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1ee      	bne.n	800545e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005480:	7dfb      	ldrb	r3, [r7, #23]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d105      	bne.n	8005492 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005486:	4b3d      	ldr	r3, [pc, #244]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	4a3c      	ldr	r2, [pc, #240]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 800548c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005490:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80ae 	beq.w	80055f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800549c:	4b37      	ldr	r3, [pc, #220]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 030c 	and.w	r3, r3, #12
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d06d      	beq.n	8005584 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d14b      	bne.n	8005548 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b0:	4b32      	ldr	r3, [pc, #200]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a31      	ldr	r2, [pc, #196]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80054b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054bc:	f7fe f9ae 	bl	800381c <HAL_GetTick>
 80054c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c2:	e008      	b.n	80054d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054c4:	f7fe f9aa 	bl	800381c <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e091      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d6:	4b29      	ldr	r3, [pc, #164]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1f0      	bne.n	80054c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69da      	ldr	r2, [r3, #28]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	019b      	lsls	r3, r3, #6
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f8:	085b      	lsrs	r3, r3, #1
 80054fa:	3b01      	subs	r3, #1
 80054fc:	041b      	lsls	r3, r3, #16
 80054fe:	431a      	orrs	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005504:	061b      	lsls	r3, r3, #24
 8005506:	431a      	orrs	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550c:	071b      	lsls	r3, r3, #28
 800550e:	491b      	ldr	r1, [pc, #108]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 8005510:	4313      	orrs	r3, r2
 8005512:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005514:	4b19      	ldr	r3, [pc, #100]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a18      	ldr	r2, [pc, #96]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 800551a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800551e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005520:	f7fe f97c 	bl	800381c <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005528:	f7fe f978 	bl	800381c <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e05f      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800553a:	4b10      	ldr	r3, [pc, #64]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f0      	beq.n	8005528 <HAL_RCC_OscConfig+0x47c>
 8005546:	e057      	b.n	80055f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005548:	4b0c      	ldr	r3, [pc, #48]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a0b      	ldr	r2, [pc, #44]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 800554e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005552:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005554:	f7fe f962 	bl	800381c <HAL_GetTick>
 8005558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800555c:	f7fe f95e 	bl	800381c <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e045      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800556e:	4b03      	ldr	r3, [pc, #12]	; (800557c <HAL_RCC_OscConfig+0x4d0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x4b0>
 800557a:	e03d      	b.n	80055f8 <HAL_RCC_OscConfig+0x54c>
 800557c:	40023800 	.word	0x40023800
 8005580:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005584:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <HAL_RCC_OscConfig+0x558>)
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d030      	beq.n	80055f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800559c:	429a      	cmp	r2, r3
 800559e:	d129      	bne.n	80055f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d122      	bne.n	80055f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80055b4:	4013      	ands	r3, r2
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80055ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80055bc:	4293      	cmp	r3, r2
 80055be:	d119      	bne.n	80055f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	085b      	lsrs	r3, r3, #1
 80055cc:	3b01      	subs	r3, #1
 80055ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80055d0:	429a      	cmp	r2, r3
 80055d2:	d10f      	bne.n	80055f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d107      	bne.n	80055f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e000      	b.n	80055fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80055f8:	2300      	movs	r3, #0
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3718      	adds	r7, #24
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40023800 	.word	0x40023800

08005608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005612:	2300      	movs	r3, #0
 8005614:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e0d0      	b.n	80057c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005620:	4b6a      	ldr	r3, [pc, #424]	; (80057cc <HAL_RCC_ClockConfig+0x1c4>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 030f 	and.w	r3, r3, #15
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d910      	bls.n	8005650 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800562e:	4b67      	ldr	r3, [pc, #412]	; (80057cc <HAL_RCC_ClockConfig+0x1c4>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f023 020f 	bic.w	r2, r3, #15
 8005636:	4965      	ldr	r1, [pc, #404]	; (80057cc <HAL_RCC_ClockConfig+0x1c4>)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	4313      	orrs	r3, r2
 800563c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800563e:	4b63      	ldr	r3, [pc, #396]	; (80057cc <HAL_RCC_ClockConfig+0x1c4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 030f 	and.w	r3, r3, #15
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	429a      	cmp	r2, r3
 800564a:	d001      	beq.n	8005650 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800564c:	2301      	movs	r3, #1
 800564e:	e0b8      	b.n	80057c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d020      	beq.n	800569e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005668:	4b59      	ldr	r3, [pc, #356]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4a58      	ldr	r2, [pc, #352]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 800566e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005672:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005680:	4b53      	ldr	r3, [pc, #332]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	4a52      	ldr	r2, [pc, #328]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800568a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800568c:	4b50      	ldr	r3, [pc, #320]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	494d      	ldr	r1, [pc, #308]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 800569a:	4313      	orrs	r3, r2
 800569c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d040      	beq.n	800572c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d107      	bne.n	80056c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056b2:	4b47      	ldr	r3, [pc, #284]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d115      	bne.n	80056ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e07f      	b.n	80057c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d107      	bne.n	80056da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056ca:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d109      	bne.n	80056ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e073      	b.n	80057c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056da:	4b3d      	ldr	r3, [pc, #244]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0302 	and.w	r3, r3, #2
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e06b      	b.n	80057c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80056ea:	4b39      	ldr	r3, [pc, #228]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f023 0203 	bic.w	r2, r3, #3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	4936      	ldr	r1, [pc, #216]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056fc:	f7fe f88e 	bl	800381c <HAL_GetTick>
 8005700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005702:	e00a      	b.n	800571a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005704:	f7fe f88a 	bl	800381c <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e053      	b.n	80057c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800571a:	4b2d      	ldr	r3, [pc, #180]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 020c 	and.w	r2, r3, #12
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	429a      	cmp	r2, r3
 800572a:	d1eb      	bne.n	8005704 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800572c:	4b27      	ldr	r3, [pc, #156]	; (80057cc <HAL_RCC_ClockConfig+0x1c4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	683a      	ldr	r2, [r7, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d210      	bcs.n	800575c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573a:	4b24      	ldr	r3, [pc, #144]	; (80057cc <HAL_RCC_ClockConfig+0x1c4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f023 020f 	bic.w	r2, r3, #15
 8005742:	4922      	ldr	r1, [pc, #136]	; (80057cc <HAL_RCC_ClockConfig+0x1c4>)
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	4313      	orrs	r3, r2
 8005748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800574a:	4b20      	ldr	r3, [pc, #128]	; (80057cc <HAL_RCC_ClockConfig+0x1c4>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	429a      	cmp	r2, r3
 8005756:	d001      	beq.n	800575c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e032      	b.n	80057c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005768:	4b19      	ldr	r3, [pc, #100]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4916      	ldr	r1, [pc, #88]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005776:	4313      	orrs	r3, r2
 8005778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005786:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	490e      	ldr	r1, [pc, #56]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 8005796:	4313      	orrs	r3, r2
 8005798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800579a:	f000 f821 	bl	80057e0 <HAL_RCC_GetSysClockFreq>
 800579e:	4601      	mov	r1, r0
 80057a0:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_RCC_ClockConfig+0x1c8>)
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	091b      	lsrs	r3, r3, #4
 80057a6:	f003 030f 	and.w	r3, r3, #15
 80057aa:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <HAL_RCC_ClockConfig+0x1cc>)
 80057ac:	5cd3      	ldrb	r3, [r2, r3]
 80057ae:	fa21 f303 	lsr.w	r3, r1, r3
 80057b2:	4a09      	ldr	r2, [pc, #36]	; (80057d8 <HAL_RCC_ClockConfig+0x1d0>)
 80057b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <HAL_RCC_ClockConfig+0x1d4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7fd ffea 	bl	8003794 <HAL_InitTick>

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40023c00 	.word	0x40023c00
 80057d0:	40023800 	.word	0x40023800
 80057d4:	0800a714 	.word	0x0800a714
 80057d8:	20000000 	.word	0x20000000
 80057dc:	20000004 	.word	0x20000004

080057e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	607b      	str	r3, [r7, #4]
 80057ea:	2300      	movs	r3, #0
 80057ec:	60fb      	str	r3, [r7, #12]
 80057ee:	2300      	movs	r3, #0
 80057f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80057f6:	4b50      	ldr	r3, [pc, #320]	; (8005938 <HAL_RCC_GetSysClockFreq+0x158>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d007      	beq.n	8005812 <HAL_RCC_GetSysClockFreq+0x32>
 8005802:	2b08      	cmp	r3, #8
 8005804:	d008      	beq.n	8005818 <HAL_RCC_GetSysClockFreq+0x38>
 8005806:	2b00      	cmp	r3, #0
 8005808:	f040 808d 	bne.w	8005926 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800580c:	4b4b      	ldr	r3, [pc, #300]	; (800593c <HAL_RCC_GetSysClockFreq+0x15c>)
 800580e:	60bb      	str	r3, [r7, #8]
      break;
 8005810:	e08c      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005812:	4b4b      	ldr	r3, [pc, #300]	; (8005940 <HAL_RCC_GetSysClockFreq+0x160>)
 8005814:	60bb      	str	r3, [r7, #8]
      break;
 8005816:	e089      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005818:	4b47      	ldr	r3, [pc, #284]	; (8005938 <HAL_RCC_GetSysClockFreq+0x158>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005820:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005822:	4b45      	ldr	r3, [pc, #276]	; (8005938 <HAL_RCC_GetSysClockFreq+0x158>)
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800582a:	2b00      	cmp	r3, #0
 800582c:	d023      	beq.n	8005876 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800582e:	4b42      	ldr	r3, [pc, #264]	; (8005938 <HAL_RCC_GetSysClockFreq+0x158>)
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	099b      	lsrs	r3, r3, #6
 8005834:	f04f 0400 	mov.w	r4, #0
 8005838:	f240 11ff 	movw	r1, #511	; 0x1ff
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	ea03 0501 	and.w	r5, r3, r1
 8005844:	ea04 0602 	and.w	r6, r4, r2
 8005848:	4a3d      	ldr	r2, [pc, #244]	; (8005940 <HAL_RCC_GetSysClockFreq+0x160>)
 800584a:	fb02 f106 	mul.w	r1, r2, r6
 800584e:	2200      	movs	r2, #0
 8005850:	fb02 f205 	mul.w	r2, r2, r5
 8005854:	440a      	add	r2, r1
 8005856:	493a      	ldr	r1, [pc, #232]	; (8005940 <HAL_RCC_GetSysClockFreq+0x160>)
 8005858:	fba5 0101 	umull	r0, r1, r5, r1
 800585c:	1853      	adds	r3, r2, r1
 800585e:	4619      	mov	r1, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f04f 0400 	mov.w	r4, #0
 8005866:	461a      	mov	r2, r3
 8005868:	4623      	mov	r3, r4
 800586a:	f7fa fd51 	bl	8000310 <__aeabi_uldivmod>
 800586e:	4603      	mov	r3, r0
 8005870:	460c      	mov	r4, r1
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e049      	b.n	800590a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005876:	4b30      	ldr	r3, [pc, #192]	; (8005938 <HAL_RCC_GetSysClockFreq+0x158>)
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	099b      	lsrs	r3, r3, #6
 800587c:	f04f 0400 	mov.w	r4, #0
 8005880:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005884:	f04f 0200 	mov.w	r2, #0
 8005888:	ea03 0501 	and.w	r5, r3, r1
 800588c:	ea04 0602 	and.w	r6, r4, r2
 8005890:	4629      	mov	r1, r5
 8005892:	4632      	mov	r2, r6
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	f04f 0400 	mov.w	r4, #0
 800589c:	0154      	lsls	r4, r2, #5
 800589e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80058a2:	014b      	lsls	r3, r1, #5
 80058a4:	4619      	mov	r1, r3
 80058a6:	4622      	mov	r2, r4
 80058a8:	1b49      	subs	r1, r1, r5
 80058aa:	eb62 0206 	sbc.w	r2, r2, r6
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	f04f 0400 	mov.w	r4, #0
 80058b6:	0194      	lsls	r4, r2, #6
 80058b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058bc:	018b      	lsls	r3, r1, #6
 80058be:	1a5b      	subs	r3, r3, r1
 80058c0:	eb64 0402 	sbc.w	r4, r4, r2
 80058c4:	f04f 0100 	mov.w	r1, #0
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	00e2      	lsls	r2, r4, #3
 80058ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058d2:	00d9      	lsls	r1, r3, #3
 80058d4:	460b      	mov	r3, r1
 80058d6:	4614      	mov	r4, r2
 80058d8:	195b      	adds	r3, r3, r5
 80058da:	eb44 0406 	adc.w	r4, r4, r6
 80058de:	f04f 0100 	mov.w	r1, #0
 80058e2:	f04f 0200 	mov.w	r2, #0
 80058e6:	02a2      	lsls	r2, r4, #10
 80058e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80058ec:	0299      	lsls	r1, r3, #10
 80058ee:	460b      	mov	r3, r1
 80058f0:	4614      	mov	r4, r2
 80058f2:	4618      	mov	r0, r3
 80058f4:	4621      	mov	r1, r4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f04f 0400 	mov.w	r4, #0
 80058fc:	461a      	mov	r2, r3
 80058fe:	4623      	mov	r3, r4
 8005900:	f7fa fd06 	bl	8000310 <__aeabi_uldivmod>
 8005904:	4603      	mov	r3, r0
 8005906:	460c      	mov	r4, r1
 8005908:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800590a:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <HAL_RCC_GetSysClockFreq+0x158>)
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	0c1b      	lsrs	r3, r3, #16
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	3301      	adds	r3, #1
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800591a:	68fa      	ldr	r2, [r7, #12]
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005922:	60bb      	str	r3, [r7, #8]
      break;
 8005924:	e002      	b.n	800592c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <HAL_RCC_GetSysClockFreq+0x15c>)
 8005928:	60bb      	str	r3, [r7, #8]
      break;
 800592a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800592c:	68bb      	ldr	r3, [r7, #8]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005936:	bf00      	nop
 8005938:	40023800 	.word	0x40023800
 800593c:	00f42400 	.word	0x00f42400
 8005940:	00989680 	.word	0x00989680

08005944 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005944:	b480      	push	{r7}
 8005946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005948:	4b03      	ldr	r3, [pc, #12]	; (8005958 <HAL_RCC_GetHCLKFreq+0x14>)
 800594a:	681b      	ldr	r3, [r3, #0]
}
 800594c:	4618      	mov	r0, r3
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	20000000 	.word	0x20000000

0800595c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005960:	f7ff fff0 	bl	8005944 <HAL_RCC_GetHCLKFreq>
 8005964:	4601      	mov	r1, r0
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	0a9b      	lsrs	r3, r3, #10
 800596c:	f003 0307 	and.w	r3, r3, #7
 8005970:	4a03      	ldr	r2, [pc, #12]	; (8005980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005972:	5cd3      	ldrb	r3, [r2, r3]
 8005974:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005978:	4618      	mov	r0, r3
 800597a:	bd80      	pop	{r7, pc}
 800597c:	40023800 	.word	0x40023800
 8005980:	0800a724 	.word	0x0800a724

08005984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005988:	f7ff ffdc 	bl	8005944 <HAL_RCC_GetHCLKFreq>
 800598c:	4601      	mov	r1, r0
 800598e:	4b05      	ldr	r3, [pc, #20]	; (80059a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	0b5b      	lsrs	r3, r3, #13
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	4a03      	ldr	r2, [pc, #12]	; (80059a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800599a:	5cd3      	ldrb	r3, [r2, r3]
 800599c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	40023800 	.word	0x40023800
 80059a8:	0800a724 	.word	0x0800a724

080059ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80059c0:	2300      	movs	r3, #0
 80059c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d012      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059d4:	4b69      	ldr	r3, [pc, #420]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	4a68      	ldr	r2, [pc, #416]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80059de:	6093      	str	r3, [r2, #8]
 80059e0:	4b66      	ldr	r3, [pc, #408]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e8:	4964      	ldr	r1, [pc, #400]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80059f6:	2301      	movs	r3, #1
 80059f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d017      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a06:	4b5d      	ldr	r3, [pc, #372]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a14:	4959      	ldr	r1, [pc, #356]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a24:	d101      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005a26:	2301      	movs	r3, #1
 8005a28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005a32:	2301      	movs	r3, #1
 8005a34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d017      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a42:	4b4e      	ldr	r3, [pc, #312]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a48:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	494a      	ldr	r1, [pc, #296]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a60:	d101      	bne.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005a62:	2301      	movs	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 808b 	beq.w	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a90:	4b3a      	ldr	r3, [pc, #232]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a94:	4a39      	ldr	r2, [pc, #228]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8005a9c:	4b37      	ldr	r3, [pc, #220]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	60bb      	str	r3, [r7, #8]
 8005aa6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005aa8:	4b35      	ldr	r3, [pc, #212]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a34      	ldr	r2, [pc, #208]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ab4:	f7fd feb2 	bl	800381c <HAL_GetTick>
 8005ab8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005abc:	f7fd feae 	bl	800381c <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	; 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e38d      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005ace:	4b2c      	ldr	r3, [pc, #176]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ada:	4b28      	ldr	r3, [pc, #160]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ae2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d035      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d02e      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005af8:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b00:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b02:	4b1e      	ldr	r3, [pc, #120]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b06:	4a1d      	ldr	r2, [pc, #116]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b0c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b0e:	4b1b      	ldr	r3, [pc, #108]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b12:	4a1a      	ldr	r2, [pc, #104]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005b1a:	4a18      	ldr	r2, [pc, #96]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b20:	4b16      	ldr	r3, [pc, #88]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d114      	bne.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b2c:	f7fd fe76 	bl	800381c <HAL_GetTick>
 8005b30:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b32:	e00a      	b.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b34:	f7fd fe72 	bl	800381c <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d901      	bls.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e34f      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d0ee      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b62:	d111      	bne.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005b64:	4b05      	ldr	r3, [pc, #20]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005b72:	400b      	ands	r3, r1
 8005b74:	4901      	ldr	r1, [pc, #4]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	608b      	str	r3, [r1, #8]
 8005b7a:	e00b      	b.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	40007000 	.word	0x40007000
 8005b84:	0ffffcff 	.word	0x0ffffcff
 8005b88:	4bb3      	ldr	r3, [pc, #716]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	4ab2      	ldr	r2, [pc, #712]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b92:	6093      	str	r3, [r2, #8]
 8005b94:	4bb0      	ldr	r3, [pc, #704]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba0:	49ad      	ldr	r1, [pc, #692]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f003 0310 	and.w	r3, r3, #16
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d010      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005bb2:	4ba9      	ldr	r3, [pc, #676]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb8:	4aa7      	ldr	r2, [pc, #668]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005bc2:	4ba5      	ldr	r3, [pc, #660]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	49a2      	ldr	r1, [pc, #648]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005be0:	4b9d      	ldr	r3, [pc, #628]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bee:	499a      	ldr	r1, [pc, #616]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005c02:	4b95      	ldr	r3, [pc, #596]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c10:	4991      	ldr	r1, [pc, #580]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c24:	4b8c      	ldr	r3, [pc, #560]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c32:	4989      	ldr	r1, [pc, #548]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005c46:	4b84      	ldr	r3, [pc, #528]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c54:	4980      	ldr	r1, [pc, #512]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c68:	4b7b      	ldr	r3, [pc, #492]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c6e:	f023 0203 	bic.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c76:	4978      	ldr	r1, [pc, #480]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005c8a:	4b73      	ldr	r3, [pc, #460]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c90:	f023 020c 	bic.w	r2, r3, #12
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c98:	496f      	ldr	r1, [pc, #444]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cac:	4b6a      	ldr	r3, [pc, #424]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cba:	4967      	ldr	r1, [pc, #412]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cce:	4b62      	ldr	r3, [pc, #392]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cdc:	495e      	ldr	r1, [pc, #376]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005cf0:	4b59      	ldr	r3, [pc, #356]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	4956      	ldr	r1, [pc, #344]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005d12:	4b51      	ldr	r3, [pc, #324]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d20:	494d      	ldr	r1, [pc, #308]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005d34:	4b48      	ldr	r3, [pc, #288]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d42:	4945      	ldr	r1, [pc, #276]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005d56:	4b40      	ldr	r3, [pc, #256]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d5c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d64:	493c      	ldr	r1, [pc, #240]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d78:	4b37      	ldr	r3, [pc, #220]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d7e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d86:	4934      	ldr	r1, [pc, #208]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d011      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005d9a:	4b2f      	ldr	r3, [pc, #188]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da8:	492b      	ldr	r1, [pc, #172]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005db8:	d101      	bne.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d001      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00a      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005dda:	4b1f      	ldr	r3, [pc, #124]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005de8:	491b      	ldr	r1, [pc, #108]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00b      	beq.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005dfc:	4b16      	ldr	r3, [pc, #88]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e02:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e0c:	4912      	ldr	r1, [pc, #72]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005e20:	4b0d      	ldr	r3, [pc, #52]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e30:	4909      	ldr	r1, [pc, #36]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00f      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005e44:	4b04      	ldr	r3, [pc, #16]	; (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e54:	e002      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005e56:	bf00      	nop
 8005e58:	40023800 	.word	0x40023800
 8005e5c:	4985      	ldr	r1, [pc, #532]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00b      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005e70:	4b80      	ldr	r3, [pc, #512]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e80:	497c      	ldr	r1, [pc, #496]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d005      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e96:	f040 80d6 	bne.w	8006046 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e9a:	4b76      	ldr	r3, [pc, #472]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a75      	ldr	r2, [pc, #468]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ea0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ea6:	f7fd fcb9 	bl	800381c <HAL_GetTick>
 8005eaa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005eac:	e008      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005eae:	f7fd fcb5 	bl	800381c <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b64      	cmp	r3, #100	; 0x64
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e194      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ec0:	4b6c      	ldr	r3, [pc, #432]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1f0      	bne.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d021      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x570>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d11d      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005ee0:	4b64      	ldr	r3, [pc, #400]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ee6:	0c1b      	lsrs	r3, r3, #16
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005eee:	4b61      	ldr	r3, [pc, #388]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005ef0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ef4:	0e1b      	lsrs	r3, r3, #24
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	019a      	lsls	r2, r3, #6
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	041b      	lsls	r3, r3, #16
 8005f06:	431a      	orrs	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	061b      	lsls	r3, r3, #24
 8005f0c:	431a      	orrs	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	071b      	lsls	r3, r3, #28
 8005f14:	4957      	ldr	r1, [pc, #348]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d004      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f30:	d00a      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d02e      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f46:	d129      	bne.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005f48:	4b4a      	ldr	r3, [pc, #296]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4e:	0c1b      	lsrs	r3, r3, #16
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005f56:	4b47      	ldr	r3, [pc, #284]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f5c:	0f1b      	lsrs	r3, r3, #28
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	019a      	lsls	r2, r3, #6
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	041b      	lsls	r3, r3, #16
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	061b      	lsls	r3, r3, #24
 8005f76:	431a      	orrs	r2, r3
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	071b      	lsls	r3, r3, #28
 8005f7c:	493d      	ldr	r1, [pc, #244]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005f84:	4b3b      	ldr	r3, [pc, #236]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f8a:	f023 021f 	bic.w	r2, r3, #31
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f92:	3b01      	subs	r3, #1
 8005f94:	4937      	ldr	r1, [pc, #220]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005fa8:	4b32      	ldr	r3, [pc, #200]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005faa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fae:	0e1b      	lsrs	r3, r3, #24
 8005fb0:	f003 030f 	and.w	r3, r3, #15
 8005fb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fb6:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fbc:	0f1b      	lsrs	r3, r3, #28
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	019a      	lsls	r2, r3, #6
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	041b      	lsls	r3, r3, #16
 8005fd0:	431a      	orrs	r2, r3
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	061b      	lsls	r3, r3, #24
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	071b      	lsls	r3, r3, #28
 8005fdc:	4925      	ldr	r1, [pc, #148]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d011      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	019a      	lsls	r2, r3, #6
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	041b      	lsls	r3, r3, #16
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68db      	ldr	r3, [r3, #12]
 8006002:	061b      	lsls	r3, r3, #24
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	071b      	lsls	r3, r3, #28
 800600c:	4919      	ldr	r1, [pc, #100]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006014:	4b17      	ldr	r3, [pc, #92]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a16      	ldr	r2, [pc, #88]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800601a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800601e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006020:	f7fd fbfc 	bl	800381c <HAL_GetTick>
 8006024:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006026:	e008      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006028:	f7fd fbf8 	bl	800381c <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	2b64      	cmp	r3, #100	; 0x64
 8006034:	d901      	bls.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006036:	2303      	movs	r3, #3
 8006038:	e0d7      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800603a:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d0f0      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b01      	cmp	r3, #1
 800604a:	f040 80cd 	bne.w	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800604e:	4b09      	ldr	r3, [pc, #36]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a08      	ldr	r2, [pc, #32]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8006054:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800605a:	f7fd fbdf 	bl	800381c <HAL_GetTick>
 800605e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006060:	e00a      	b.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006062:	f7fd fbdb 	bl	800381c <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	2b64      	cmp	r3, #100	; 0x64
 800606e:	d903      	bls.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	e0ba      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8006074:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006078:	4b5e      	ldr	r3, [pc, #376]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006084:	d0ed      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d003      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d02e      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d12a      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80060ae:	4b51      	ldr	r3, [pc, #324]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060b4:	0c1b      	lsrs	r3, r3, #16
 80060b6:	f003 0303 	and.w	r3, r3, #3
 80060ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060bc:	4b4d      	ldr	r3, [pc, #308]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c2:	0f1b      	lsrs	r3, r3, #28
 80060c4:	f003 0307 	and.w	r3, r3, #7
 80060c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	695b      	ldr	r3, [r3, #20]
 80060ce:	019a      	lsls	r2, r3, #6
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	061b      	lsls	r3, r3, #24
 80060dc:	431a      	orrs	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	071b      	lsls	r3, r3, #28
 80060e2:	4944      	ldr	r1, [pc, #272]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060ea:	4b42      	ldr	r3, [pc, #264]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f8:	3b01      	subs	r3, #1
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	493d      	ldr	r1, [pc, #244]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d022      	beq.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006118:	d11d      	bne.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800611a:	4b36      	ldr	r3, [pc, #216]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800611c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006120:	0e1b      	lsrs	r3, r3, #24
 8006122:	f003 030f 	and.w	r3, r3, #15
 8006126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006128:	4b32      	ldr	r3, [pc, #200]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800612a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612e:	0f1b      	lsrs	r3, r3, #28
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	019a      	lsls	r2, r3, #6
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	041b      	lsls	r3, r3, #16
 8006142:	431a      	orrs	r2, r3
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	061b      	lsls	r3, r3, #24
 8006148:	431a      	orrs	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	071b      	lsls	r3, r3, #28
 800614e:	4929      	ldr	r1, [pc, #164]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006150:	4313      	orrs	r3, r2
 8006152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0308 	and.w	r3, r3, #8
 800615e:	2b00      	cmp	r3, #0
 8006160:	d028      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006162:	4b24      	ldr	r3, [pc, #144]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006168:	0e1b      	lsrs	r3, r3, #24
 800616a:	f003 030f 	and.w	r3, r3, #15
 800616e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006170:	4b20      	ldr	r3, [pc, #128]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006176:	0c1b      	lsrs	r3, r3, #16
 8006178:	f003 0303 	and.w	r3, r3, #3
 800617c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	019a      	lsls	r2, r3, #6
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	041b      	lsls	r3, r3, #16
 8006188:	431a      	orrs	r2, r3
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	061b      	lsls	r3, r3, #24
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	071b      	lsls	r3, r3, #28
 8006196:	4917      	ldr	r1, [pc, #92]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8006198:	4313      	orrs	r3, r2
 800619a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800619e:	4b15      	ldr	r3, [pc, #84]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	4911      	ldr	r1, [pc, #68]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80061b4:	4b0f      	ldr	r3, [pc, #60]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a0e      	ldr	r2, [pc, #56]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061c0:	f7fd fb2c 	bl	800381c <HAL_GetTick>
 80061c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061c6:	e008      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80061c8:	f7fd fb28 	bl	800381c <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	2b64      	cmp	r3, #100	; 0x64
 80061d4:	d901      	bls.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e007      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80061da:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80061e6:	d1ef      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3720      	adds	r7, #32
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40023800 	.word	0x40023800

080061f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e084      	b.n	8006314 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b00      	cmp	r3, #0
 800621a:	d106      	bne.n	800622a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7fc fcc1 	bl	8002bac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006240:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68db      	ldr	r3, [r3, #12]
 8006246:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800624a:	d902      	bls.n	8006252 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e002      	b.n	8006258 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006256:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006260:	d007      	beq.n	8006272 <HAL_SPI_Init+0x7a>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800626a:	d002      	beq.n	8006272 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10b      	bne.n	8006292 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006282:	d903      	bls.n	800628c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	631a      	str	r2, [r3, #48]	; 0x30
 800628a:	e002      	b.n	8006292 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	431a      	orrs	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	699b      	ldr	r3, [r3, #24]
 80062ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062b0:	431a      	orrs	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	431a      	orrs	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	ea42 0103 	orr.w	r1, r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	f003 0204 	and.w	r2, r3, #4
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	ea42 0103 	orr.w	r1, r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	69da      	ldr	r2, [r3, #28]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006302:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2200      	movs	r2, #0
 8006308:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006312:	2300      	movs	r3, #0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3710      	adds	r7, #16
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	4613      	mov	r3, r2
 8006328:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d110      	bne.n	8006358 <HAL_SPI_Receive_DMA+0x3c>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800633e:	d10b      	bne.n	8006358 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2204      	movs	r2, #4
 8006344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f900 	bl	8006554 <HAL_SPI_TransmitReceive_DMA>
 8006354:	4603      	mov	r3, r0
 8006356:	e0f3      	b.n	8006540 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_SPI_Receive_DMA+0x4a>
 8006362:	2302      	movs	r3, #2
 8006364:	e0ec      	b.n	8006540 <HAL_SPI_Receive_DMA+0x224>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b01      	cmp	r3, #1
 8006378:	d002      	beq.n	8006380 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800637a:	2302      	movs	r3, #2
 800637c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800637e:	e0da      	b.n	8006536 <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_SPI_Receive_DMA+0x70>
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d102      	bne.n	8006392 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006390:	e0d1      	b.n	8006536 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2204      	movs	r2, #4
 8006396:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	88fa      	ldrh	r2, [r7, #6]
 80063aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	88fa      	ldrh	r2, [r7, #6]
 80063b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d6:	d107      	bne.n	80063e8 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80063e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063f6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006400:	d908      	bls.n	8006414 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006410:	605a      	str	r2, [r3, #4]
 8006412:	e042      	b.n	800649a <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006422:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800642e:	d134      	bne.n	800649a <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800643e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006446:	b29b      	uxth	r3, r3
 8006448:	f003 0301 	and.w	r3, r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	d111      	bne.n	8006474 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800645e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006466:	b29b      	uxth	r3, r3
 8006468:	085b      	lsrs	r3, r3, #1
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006472:	e012      	b.n	800649a <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006482:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800648a:	b29b      	uxth	r3, r3
 800648c:	085b      	lsrs	r3, r3, #1
 800648e:	b29b      	uxth	r3, r3
 8006490:	3301      	adds	r3, #1
 8006492:	b29a      	uxth	r2, r3
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800649e:	4a2a      	ldr	r2, [pc, #168]	; (8006548 <HAL_SPI_Receive_DMA+0x22c>)
 80064a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064a6:	4a29      	ldr	r2, [pc, #164]	; (800654c <HAL_SPI_Receive_DMA+0x230>)
 80064a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064ae:	4a28      	ldr	r2, [pc, #160]	; (8006550 <HAL_SPI_Receive_DMA+0x234>)
 80064b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	2200      	movs	r2, #0
 80064b8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	330c      	adds	r3, #12
 80064c4:	4619      	mov	r1, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	461a      	mov	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f7fd ff9c 	bl	8004410 <HAL_DMA_Start_IT>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00c      	beq.n	80064f8 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e2:	f043 0210 	orr.w	r2, r3, #16
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80064f6:	e01e      	b.n	8006536 <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006502:	2b40      	cmp	r3, #64	; 0x40
 8006504:	d007      	beq.n	8006516 <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006514:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685a      	ldr	r2, [r3, #4]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0220 	orr.w	r2, r2, #32
 8006524:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685a      	ldr	r2, [r3, #4]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0201 	orr.w	r2, r2, #1
 8006534:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800653e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	080069d5 	.word	0x080069d5
 800654c:	080068bd 	.word	0x080068bd
 8006550:	08006a0d 	.word	0x08006a0d

08006554 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
 8006560:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006562:	2300      	movs	r3, #0
 8006564:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_SPI_TransmitReceive_DMA+0x20>
 8006570:	2302      	movs	r3, #2
 8006572:	e16c      	b.n	800684e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006582:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800658a:	7dbb      	ldrb	r3, [r7, #22]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d00d      	beq.n	80065ac <HAL_SPI_TransmitReceive_DMA+0x58>
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006596:	d106      	bne.n	80065a6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d102      	bne.n	80065a6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80065a0:	7dbb      	ldrb	r3, [r7, #22]
 80065a2:	2b04      	cmp	r3, #4
 80065a4:	d002      	beq.n	80065ac <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80065a6:	2302      	movs	r3, #2
 80065a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065aa:	e14b      	b.n	8006844 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d005      	beq.n	80065be <HAL_SPI_TransmitReceive_DMA+0x6a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_SPI_TransmitReceive_DMA+0x6a>
 80065b8:	887b      	ldrh	r3, [r7, #2]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d102      	bne.n	80065c4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80065c2:	e13f      	b.n	8006844 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d003      	beq.n	80065d8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2205      	movs	r2, #5
 80065d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	68ba      	ldr	r2, [r7, #8]
 80065e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	887a      	ldrh	r2, [r7, #2]
 80065e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	887a      	ldrh	r2, [r7, #2]
 80065ee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	887a      	ldrh	r2, [r7, #2]
 80065fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	887a      	ldrh	r2, [r7, #2]
 8006602:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685a      	ldr	r2, [r3, #4]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8006620:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800662a:	d908      	bls.n	800663e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685a      	ldr	r2, [r3, #4]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800663a:	605a      	str	r2, [r3, #4]
 800663c:	e06f      	b.n	800671e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800664c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006658:	d126      	bne.n	80066a8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10f      	bne.n	8006686 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685a      	ldr	r2, [r3, #4]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006674:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667a:	b29b      	uxth	r3, r3
 800667c:	085b      	lsrs	r3, r3, #1
 800667e:	b29a      	uxth	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006684:	e010      	b.n	80066a8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006694:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800669a:	b29b      	uxth	r3, r3
 800669c:	085b      	lsrs	r3, r3, #1
 800669e:	b29b      	uxth	r3, r3
 80066a0:	3301      	adds	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066b2:	d134      	bne.n	800671e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066c2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	f003 0301 	and.w	r3, r3, #1
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d111      	bne.n	80066f8 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066e2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066ea:	b29b      	uxth	r3, r3
 80066ec:	085b      	lsrs	r3, r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80066f6:	e012      	b.n	800671e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006706:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800670e:	b29b      	uxth	r3, r3
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	b29b      	uxth	r3, r3
 8006714:	3301      	adds	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b04      	cmp	r3, #4
 8006728:	d108      	bne.n	800673c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672e:	4a4a      	ldr	r2, [pc, #296]	; (8006858 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006730:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006736:	4a49      	ldr	r2, [pc, #292]	; (800685c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006738:	63da      	str	r2, [r3, #60]	; 0x3c
 800673a:	e007      	b.n	800674c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006740:	4a47      	ldr	r2, [pc, #284]	; (8006860 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8006742:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006748:	4a46      	ldr	r2, [pc, #280]	; (8006864 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800674a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006750:	4a45      	ldr	r2, [pc, #276]	; (8006868 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8006752:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006758:	2200      	movs	r2, #0
 800675a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	4619      	mov	r1, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	461a      	mov	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006774:	b29b      	uxth	r3, r3
 8006776:	f7fd fe4b 	bl	8004410 <HAL_DMA_Start_IT>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00c      	beq.n	800679a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006784:	f043 0210 	orr.w	r2, r3, #16
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006798:	e054      	b.n	8006844 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f042 0201 	orr.w	r2, r2, #1
 80067a8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ae:	2200      	movs	r2, #0
 80067b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	2200      	movs	r2, #0
 80067b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067be:	2200      	movs	r2, #0
 80067c0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067c6:	2200      	movs	r2, #0
 80067c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d2:	4619      	mov	r1, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330c      	adds	r3, #12
 80067da:	461a      	mov	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f7fd fe15 	bl	8004410 <HAL_DMA_Start_IT>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00c      	beq.n	8006806 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f0:	f043 0210 	orr.w	r2, r3, #16
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006804:	e01e      	b.n	8006844 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006810:	2b40      	cmp	r3, #64	; 0x40
 8006812:	d007      	beq.n	8006824 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006822:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f042 0220 	orr.w	r2, r2, #32
 8006832:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0202 	orr.w	r2, r2, #2
 8006842:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800684c:	7dfb      	ldrb	r3, [r7, #23]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	080069d5 	.word	0x080069d5
 800685c:	080068bd 	.word	0x080068bd
 8006860:	080069f1 	.word	0x080069f1
 8006864:	08006943 	.word	0x08006943
 8006868:	08006a0d 	.word	0x08006a0d

0800686c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800689c:	bf00      	nop
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068ca:	f7fc ffa7 	bl	800381c <HAL_GetTick>
 80068ce:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068de:	d02a      	beq.n	8006936 <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0220 	bic.w	r2, r2, #32
 80068ee:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0203 	bic.w	r2, r2, #3
 80068fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006900:	68ba      	ldr	r2, [r7, #8]
 8006902:	2164      	movs	r1, #100	; 0x64
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f000 f978 	bl	8006bfa <SPI_EndRxTransaction>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2220      	movs	r2, #32
 8006914:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800692e:	68f8      	ldr	r0, [r7, #12]
 8006930:	f7ff ffba 	bl	80068a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006934:	e002      	b.n	800693c <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006936:	68f8      	ldr	r0, [r7, #12]
 8006938:	f7fb fd1a 	bl	8002370 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800693c:	3710      	adds	r7, #16
 800693e:	46bd      	mov	sp, r7
 8006940:	bd80      	pop	{r7, pc}

08006942 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006942:	b580      	push	{r7, lr}
 8006944:	b084      	sub	sp, #16
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694e:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006950:	f7fc ff64 	bl	800381c <HAL_GetTick>
 8006954:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006964:	d030      	beq.n	80069c8 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685a      	ldr	r2, [r3, #4]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0220 	bic.w	r2, r2, #32
 8006974:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006976:	68ba      	ldr	r2, [r7, #8]
 8006978:	2164      	movs	r1, #100	; 0x64
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	f000 f995 	bl	8006caa <SPI_EndRxTxTransaction>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d005      	beq.n	8006992 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800698a:	f043 0220 	orr.w	r2, r3, #32
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f022 0203 	bic.w	r2, r2, #3
 80069a0:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2200      	movs	r2, #0
 80069a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d003      	beq.n	80069c8 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f7ff ff71 	bl	80068a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80069c6:	e002      	b.n	80069ce <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f7ff ff4f 	bl	800686c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f7ff ff4c 	bl	8006880 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069e8:	bf00      	nop
 80069ea:	3710      	adds	r7, #16
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f7ff ff48 	bl	8006894 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0203 	bic.w	r2, r2, #3
 8006a28:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a2e:	f043 0210 	orr.w	r2, r3, #16
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f7ff ff32 	bl	80068a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006a44:	bf00      	nop
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	60b9      	str	r1, [r7, #8]
 8006a56:	603b      	str	r3, [r7, #0]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a5c:	e04c      	b.n	8006af8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d048      	beq.n	8006af8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006a66:	f7fc fed9 	bl	800381c <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d902      	bls.n	8006a7c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d13d      	bne.n	8006af8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a8a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a94:	d111      	bne.n	8006aba <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a9e:	d004      	beq.n	8006aaa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa8:	d107      	bne.n	8006aba <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ab8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ac2:	d10f      	bne.n	8006ae4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ae2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e00f      	b.n	8006b18 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689a      	ldr	r2, [r3, #8]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	4013      	ands	r3, r2
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	bf0c      	ite	eq
 8006b08:	2301      	moveq	r3, #1
 8006b0a:	2300      	movne	r3, #0
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d1a3      	bne.n	8006a5e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3710      	adds	r7, #16
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b2e:	e057      	b.n	8006be0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b36:	d106      	bne.n	8006b46 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	330c      	adds	r3, #12
 8006b44:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b4c:	d048      	beq.n	8006be0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006b4e:	f7fc fe65 	bl	800381c <HAL_GetTick>
 8006b52:	4602      	mov	r2, r0
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	683a      	ldr	r2, [r7, #0]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d902      	bls.n	8006b64 <SPI_WaitFifoStateUntilTimeout+0x44>
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d13d      	bne.n	8006be0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685a      	ldr	r2, [r3, #4]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b7c:	d111      	bne.n	8006ba2 <SPI_WaitFifoStateUntilTimeout+0x82>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b86:	d004      	beq.n	8006b92 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b90:	d107      	bne.n	8006ba2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006baa:	d10f      	bne.n	8006bcc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e008      	b.n	8006bf2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	4013      	ands	r3, r2
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d19f      	bne.n	8006b30 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b086      	sub	sp, #24
 8006bfe:	af02      	add	r7, sp, #8
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c0e:	d111      	bne.n	8006c34 <SPI_EndRxTransaction+0x3a>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c18:	d004      	beq.n	8006c24 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c22:	d107      	bne.n	8006c34 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c32:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	2180      	movs	r1, #128	; 0x80
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f7ff ff04 	bl	8006a4c <SPI_WaitFlagStateUntilTimeout>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d007      	beq.n	8006c5a <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c4e:	f043 0220 	orr.w	r2, r3, #32
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e023      	b.n	8006ca2 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c62:	d11d      	bne.n	8006ca0 <SPI_EndRxTransaction+0xa6>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6c:	d004      	beq.n	8006c78 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c76:	d113      	bne.n	8006ca0 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c84:	68f8      	ldr	r0, [r7, #12]
 8006c86:	f7ff ff4b 	bl	8006b20 <SPI_WaitFifoStateUntilTimeout>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c94:	f043 0220 	orr.w	r2, r3, #32
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e000      	b.n	8006ca2 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b086      	sub	sp, #24
 8006cae:	af02      	add	r7, sp, #8
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f7ff ff2c 	bl	8006b20 <SPI_WaitFifoStateUntilTimeout>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d007      	beq.n	8006cde <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd2:	f043 0220 	orr.w	r2, r3, #32
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e027      	b.n	8006d2e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2180      	movs	r1, #128	; 0x80
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7ff feaf 	bl	8006a4c <SPI_WaitFlagStateUntilTimeout>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d007      	beq.n	8006d04 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf8:	f043 0220 	orr.w	r2, r3, #32
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e014      	b.n	8006d2e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d10:	68f8      	ldr	r0, [r7, #12]
 8006d12:	f7ff ff05 	bl	8006b20 <SPI_WaitFifoStateUntilTimeout>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d007      	beq.n	8006d2c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d20:	f043 0220 	orr.w	r2, r3, #32
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d28:	2303      	movs	r3, #3
 8006d2a:	e000      	b.n	8006d2e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e01d      	b.n	8006d84 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d106      	bne.n	8006d62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f7fb ffcf 	bl	8002d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2202      	movs	r2, #2
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	3304      	adds	r3, #4
 8006d72:	4619      	mov	r1, r3
 8006d74:	4610      	mov	r0, r2
 8006d76:	f001 f827 	bl	8007dc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d82:	2300      	movs	r3, #0
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b085      	sub	sp, #20
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68da      	ldr	r2, [r3, #12]
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0201 	orr.w	r2, r2, #1
 8006da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	4b0c      	ldr	r3, [pc, #48]	; (8006ddc <HAL_TIM_Base_Start_IT+0x50>)
 8006dac:	4013      	ands	r3, r2
 8006dae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2b06      	cmp	r3, #6
 8006db4:	d00b      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0x42>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dbc:	d007      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f042 0201 	orr.w	r2, r2, #1
 8006dcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	00010007 	.word	0x00010007

08006de0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68da      	ldr	r2, [r3, #12]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f022 0201 	bic.w	r2, r2, #1
 8006df6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	6a1a      	ldr	r2, [r3, #32]
 8006dfe:	f241 1311 	movw	r3, #4369	; 0x1111
 8006e02:	4013      	ands	r3, r2
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10f      	bne.n	8006e28 <HAL_TIM_Base_Stop_IT+0x48>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6a1a      	ldr	r2, [r3, #32]
 8006e0e:	f240 4344 	movw	r3, #1092	; 0x444
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d107      	bne.n	8006e28 <HAL_TIM_Base_Stop_IT+0x48>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr

08006e36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d101      	bne.n	8006e48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e01d      	b.n	8006e84 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d106      	bne.n	8006e62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7fc f86b 	bl	8002f38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	3304      	adds	r3, #4
 8006e72:	4619      	mov	r1, r3
 8006e74:	4610      	mov	r0, r2
 8006e76:	f000 ffa7 	bl	8007dc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b0c      	cmp	r3, #12
 8006e9a:	d841      	bhi.n	8006f20 <HAL_TIM_PWM_Start_IT+0x94>
 8006e9c:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <HAL_TIM_PWM_Start_IT+0x18>)
 8006e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea2:	bf00      	nop
 8006ea4:	08006ed9 	.word	0x08006ed9
 8006ea8:	08006f21 	.word	0x08006f21
 8006eac:	08006f21 	.word	0x08006f21
 8006eb0:	08006f21 	.word	0x08006f21
 8006eb4:	08006eeb 	.word	0x08006eeb
 8006eb8:	08006f21 	.word	0x08006f21
 8006ebc:	08006f21 	.word	0x08006f21
 8006ec0:	08006f21 	.word	0x08006f21
 8006ec4:	08006efd 	.word	0x08006efd
 8006ec8:	08006f21 	.word	0x08006f21
 8006ecc:	08006f21 	.word	0x08006f21
 8006ed0:	08006f21 	.word	0x08006f21
 8006ed4:	08006f0f 	.word	0x08006f0f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0202 	orr.w	r2, r2, #2
 8006ee6:	60da      	str	r2, [r3, #12]
      break;
 8006ee8:	e01b      	b.n	8006f22 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68da      	ldr	r2, [r3, #12]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f042 0204 	orr.w	r2, r2, #4
 8006ef8:	60da      	str	r2, [r3, #12]
      break;
 8006efa:	e012      	b.n	8006f22 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68da      	ldr	r2, [r3, #12]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0208 	orr.w	r2, r2, #8
 8006f0a:	60da      	str	r2, [r3, #12]
      break;
 8006f0c:	e009      	b.n	8006f22 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0210 	orr.w	r2, r2, #16
 8006f1c:	60da      	str	r2, [r3, #12]
      break;
 8006f1e:	e000      	b.n	8006f22 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8006f20:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2201      	movs	r2, #1
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 fc96 	bl	800885c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a17      	ldr	r2, [pc, #92]	; (8006f94 <HAL_TIM_PWM_Start_IT+0x108>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d004      	beq.n	8006f44 <HAL_TIM_PWM_Start_IT+0xb8>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a16      	ldr	r2, [pc, #88]	; (8006f98 <HAL_TIM_PWM_Start_IT+0x10c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d101      	bne.n	8006f48 <HAL_TIM_PWM_Start_IT+0xbc>
 8006f44:	2301      	movs	r3, #1
 8006f46:	e000      	b.n	8006f4a <HAL_TIM_PWM_Start_IT+0xbe>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d007      	beq.n	8006f5e <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689a      	ldr	r2, [r3, #8]
 8006f64:	4b0d      	ldr	r3, [pc, #52]	; (8006f9c <HAL_TIM_PWM_Start_IT+0x110>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b06      	cmp	r3, #6
 8006f6e:	d00b      	beq.n	8006f88 <HAL_TIM_PWM_Start_IT+0xfc>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f76:	d007      	beq.n	8006f88 <HAL_TIM_PWM_Start_IT+0xfc>
  {
    __HAL_TIM_ENABLE(htim);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	681a      	ldr	r2, [r3, #0]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f042 0201 	orr.w	r2, r2, #1
 8006f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	40010000 	.word	0x40010000
 8006f98:	40010400 	.word	0x40010400
 8006f9c:	00010007 	.word	0x00010007

08006fa0 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	2b0c      	cmp	r3, #12
 8006fae:	d841      	bhi.n	8007034 <HAL_TIM_PWM_Stop_IT+0x94>
 8006fb0:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <HAL_TIM_PWM_Stop_IT+0x18>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006fed 	.word	0x08006fed
 8006fbc:	08007035 	.word	0x08007035
 8006fc0:	08007035 	.word	0x08007035
 8006fc4:	08007035 	.word	0x08007035
 8006fc8:	08006fff 	.word	0x08006fff
 8006fcc:	08007035 	.word	0x08007035
 8006fd0:	08007035 	.word	0x08007035
 8006fd4:	08007035 	.word	0x08007035
 8006fd8:	08007011 	.word	0x08007011
 8006fdc:	08007035 	.word	0x08007035
 8006fe0:	08007035 	.word	0x08007035
 8006fe4:	08007035 	.word	0x08007035
 8006fe8:	08007023 	.word	0x08007023
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0202 	bic.w	r2, r2, #2
 8006ffa:	60da      	str	r2, [r3, #12]
      break;
 8006ffc:	e01b      	b.n	8007036 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0204 	bic.w	r2, r2, #4
 800700c:	60da      	str	r2, [r3, #12]
      break;
 800700e:	e012      	b.n	8007036 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f022 0208 	bic.w	r2, r2, #8
 800701e:	60da      	str	r2, [r3, #12]
      break;
 8007020:	e009      	b.n	8007036 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68da      	ldr	r2, [r3, #12]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0210 	bic.w	r2, r2, #16
 8007030:	60da      	str	r2, [r3, #12]
      break;
 8007032:	e000      	b.n	8007036 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8007034:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2200      	movs	r2, #0
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	4618      	mov	r0, r3
 8007040:	f001 fc0c 	bl	800885c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a20      	ldr	r2, [pc, #128]	; (80070cc <HAL_TIM_PWM_Stop_IT+0x12c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d004      	beq.n	8007058 <HAL_TIM_PWM_Stop_IT+0xb8>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1f      	ldr	r2, [pc, #124]	; (80070d0 <HAL_TIM_PWM_Stop_IT+0x130>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d101      	bne.n	800705c <HAL_TIM_PWM_Stop_IT+0xbc>
 8007058:	2301      	movs	r3, #1
 800705a:	e000      	b.n	800705e <HAL_TIM_PWM_Stop_IT+0xbe>
 800705c:	2300      	movs	r3, #0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d017      	beq.n	8007092 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6a1a      	ldr	r2, [r3, #32]
 8007068:	f241 1311 	movw	r3, #4369	; 0x1111
 800706c:	4013      	ands	r3, r2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10f      	bne.n	8007092 <HAL_TIM_PWM_Stop_IT+0xf2>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6a1a      	ldr	r2, [r3, #32]
 8007078:	f240 4344 	movw	r3, #1092	; 0x444
 800707c:	4013      	ands	r3, r2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d107      	bne.n	8007092 <HAL_TIM_PWM_Stop_IT+0xf2>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007090:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6a1a      	ldr	r2, [r3, #32]
 8007098:	f241 1311 	movw	r3, #4369	; 0x1111
 800709c:	4013      	ands	r3, r2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d10f      	bne.n	80070c2 <HAL_TIM_PWM_Stop_IT+0x122>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6a1a      	ldr	r2, [r3, #32]
 80070a8:	f240 4344 	movw	r3, #1092	; 0x444
 80070ac:	4013      	ands	r3, r2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d107      	bne.n	80070c2 <HAL_TIM_PWM_Stop_IT+0x122>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0201 	bic.w	r2, r2, #1
 80070c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40010400 	.word	0x40010400

080070d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e01d      	b.n	8007122 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7fb fe9e 	bl	8002e3c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3304      	adds	r3, #4
 8007110:	4619      	mov	r1, r3
 8007112:	4610      	mov	r0, r2
 8007114:	f000 fe58 	bl	8007dc8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007120:	2300      	movs	r3, #0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
	...

0800712c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007140:	b2db      	uxtb	r3, r3
 8007142:	2b02      	cmp	r3, #2
 8007144:	d101      	bne.n	800714a <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8007146:	2302      	movs	r3, #2
 8007148:	e0e0      	b.n	800730c <HAL_TIM_IC_Start_DMA+0x1e0>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b01      	cmp	r3, #1
 8007154:	d10b      	bne.n	800716e <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d104      	bne.n	8007166 <HAL_TIM_IC_Start_DMA+0x3a>
 800715c:	887b      	ldrh	r3, [r7, #2]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d001      	beq.n	8007166 <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e0d2      	b.n	800730c <HAL_TIM_IC_Start_DMA+0x1e0>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2202      	movs	r2, #2
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	2b0c      	cmp	r3, #12
 8007172:	f200 80ad 	bhi.w	80072d0 <HAL_TIM_IC_Start_DMA+0x1a4>
 8007176:	a201      	add	r2, pc, #4	; (adr r2, 800717c <HAL_TIM_IC_Start_DMA+0x50>)
 8007178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800717c:	080071b1 	.word	0x080071b1
 8007180:	080072d1 	.word	0x080072d1
 8007184:	080072d1 	.word	0x080072d1
 8007188:	080072d1 	.word	0x080072d1
 800718c:	080071f9 	.word	0x080071f9
 8007190:	080072d1 	.word	0x080072d1
 8007194:	080072d1 	.word	0x080072d1
 8007198:	080072d1 	.word	0x080072d1
 800719c:	08007241 	.word	0x08007241
 80071a0:	080072d1 	.word	0x080072d1
 80071a4:	080072d1 	.word	0x080072d1
 80071a8:	080072d1 	.word	0x080072d1
 80071ac:	08007289 	.word	0x08007289
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b4:	4a57      	ldr	r2, [pc, #348]	; (8007314 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80071b6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071bc:	4a56      	ldr	r2, [pc, #344]	; (8007318 <HAL_TIM_IC_Start_DMA+0x1ec>)
 80071be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c4:	4a55      	ldr	r2, [pc, #340]	; (800731c <HAL_TIM_IC_Start_DMA+0x1f0>)
 80071c6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3334      	adds	r3, #52	; 0x34
 80071d2:	4619      	mov	r1, r3
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	887b      	ldrh	r3, [r7, #2]
 80071d8:	f7fd f91a 	bl	8004410 <HAL_DMA_Start_IT>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e092      	b.n	800730c <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071f4:	60da      	str	r2, [r3, #12]
      break;
 80071f6:	e06c      	b.n	80072d2 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fc:	4a45      	ldr	r2, [pc, #276]	; (8007314 <HAL_TIM_IC_Start_DMA+0x1e8>)
 80071fe:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007204:	4a44      	ldr	r2, [pc, #272]	; (8007318 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8007206:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720c:	4a43      	ldr	r2, [pc, #268]	; (800731c <HAL_TIM_IC_Start_DMA+0x1f0>)
 800720e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3338      	adds	r3, #56	; 0x38
 800721a:	4619      	mov	r1, r3
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	887b      	ldrh	r3, [r7, #2]
 8007220:	f7fd f8f6 	bl	8004410 <HAL_DMA_Start_IT>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d001      	beq.n	800722e <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	e06e      	b.n	800730c <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800723c:	60da      	str	r2, [r3, #12]
      break;
 800723e:	e048      	b.n	80072d2 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	4a33      	ldr	r2, [pc, #204]	; (8007314 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8007246:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800724c:	4a32      	ldr	r2, [pc, #200]	; (8007318 <HAL_TIM_IC_Start_DMA+0x1ec>)
 800724e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	4a31      	ldr	r2, [pc, #196]	; (800731c <HAL_TIM_IC_Start_DMA+0x1f0>)
 8007256:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	333c      	adds	r3, #60	; 0x3c
 8007262:	4619      	mov	r1, r3
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	887b      	ldrh	r3, [r7, #2]
 8007268:	f7fd f8d2 	bl	8004410 <HAL_DMA_Start_IT>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e04a      	b.n	800730c <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007284:	60da      	str	r2, [r3, #12]
      break;
 8007286:	e024      	b.n	80072d2 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728c:	4a21      	ldr	r2, [pc, #132]	; (8007314 <HAL_TIM_IC_Start_DMA+0x1e8>)
 800728e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007294:	4a20      	ldr	r2, [pc, #128]	; (8007318 <HAL_TIM_IC_Start_DMA+0x1ec>)
 8007296:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729c:	4a1f      	ldr	r2, [pc, #124]	; (800731c <HAL_TIM_IC_Start_DMA+0x1f0>)
 800729e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	3340      	adds	r3, #64	; 0x40
 80072aa:	4619      	mov	r1, r3
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	887b      	ldrh	r3, [r7, #2]
 80072b0:	f7fd f8ae 	bl	8004410 <HAL_DMA_Start_IT>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e026      	b.n	800730c <HAL_TIM_IC_Start_DMA+0x1e0>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072cc:	60da      	str	r2, [r3, #12]
      break;
 80072ce:	e000      	b.n	80072d2 <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 80072d0:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2201      	movs	r2, #1
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	4618      	mov	r0, r3
 80072dc:	f001 fabe 	bl	800885c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689a      	ldr	r2, [r3, #8]
 80072e6:	4b0e      	ldr	r3, [pc, #56]	; (8007320 <HAL_TIM_IC_Start_DMA+0x1f4>)
 80072e8:	4013      	ands	r3, r2
 80072ea:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	2b06      	cmp	r3, #6
 80072f0:	d00b      	beq.n	800730a <HAL_TIM_IC_Start_DMA+0x1de>
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072f8:	d007      	beq.n	800730a <HAL_TIM_IC_Start_DMA+0x1de>
  {
    __HAL_TIM_ENABLE(htim);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f042 0201 	orr.w	r2, r2, #1
 8007308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3718      	adds	r7, #24
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	08007ce9 	.word	0x08007ce9
 8007318:	08007d59 	.word	0x08007d59
 800731c:	08007cc5 	.word	0x08007cc5
 8007320:	00010007 	.word	0x00010007

08007324 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	2b0c      	cmp	r3, #12
 8007332:	d855      	bhi.n	80073e0 <HAL_TIM_IC_Stop_DMA+0xbc>
 8007334:	a201      	add	r2, pc, #4	; (adr r2, 800733c <HAL_TIM_IC_Stop_DMA+0x18>)
 8007336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733a:	bf00      	nop
 800733c:	08007371 	.word	0x08007371
 8007340:	080073e1 	.word	0x080073e1
 8007344:	080073e1 	.word	0x080073e1
 8007348:	080073e1 	.word	0x080073e1
 800734c:	0800738d 	.word	0x0800738d
 8007350:	080073e1 	.word	0x080073e1
 8007354:	080073e1 	.word	0x080073e1
 8007358:	080073e1 	.word	0x080073e1
 800735c:	080073a9 	.word	0x080073a9
 8007360:	080073e1 	.word	0x080073e1
 8007364:	080073e1 	.word	0x080073e1
 8007368:	080073e1 	.word	0x080073e1
 800736c:	080073c5 	.word	0x080073c5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800737e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007384:	4618      	mov	r0, r3
 8007386:	f7fd f8a3 	bl	80044d0 <HAL_DMA_Abort_IT>
      break;
 800738a:	e02a      	b.n	80073e2 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800739a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fd f895 	bl	80044d0 <HAL_DMA_Abort_IT>
      break;
 80073a6:	e01c      	b.n	80073e2 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073bc:	4618      	mov	r0, r3
 80073be:	f7fd f887 	bl	80044d0 <HAL_DMA_Abort_IT>
      break;
 80073c2:	e00e      	b.n	80073e2 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68da      	ldr	r2, [r3, #12]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fd f879 	bl	80044d0 <HAL_DMA_Abort_IT>
      break;
 80073de:	e000      	b.n	80073e2 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 80073e0:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2200      	movs	r2, #0
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	4618      	mov	r0, r3
 80073ec:	f001 fa36 	bl	800885c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a1a      	ldr	r2, [r3, #32]
 80073f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80073fa:	4013      	ands	r3, r2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10f      	bne.n	8007420 <HAL_TIM_IC_Stop_DMA+0xfc>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6a1a      	ldr	r2, [r3, #32]
 8007406:	f240 4344 	movw	r3, #1092	; 0x444
 800740a:	4013      	ands	r3, r2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d107      	bne.n	8007420 <HAL_TIM_IC_Stop_DMA+0xfc>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f022 0201 	bic.w	r2, r2, #1
 800741e:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop

08007434 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e02d      	b.n	80074a4 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f825 	bl	80074ac <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2202      	movs	r2, #2
 8007466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	3304      	adds	r3, #4
 8007472:	4619      	mov	r1, r3
 8007474:	4610      	mov	r0, r2
 8007476:	f000 fca7 	bl	8007dc8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0208 	bic.w	r2, r2, #8
 8007488:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6819      	ldr	r1, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	430a      	orrs	r2, r1
 8007498:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d122      	bne.n	800751c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d11b      	bne.n	800751c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f06f 0202 	mvn.w	r2, #2
 80074ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	f003 0303 	and.w	r3, r3, #3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fa feda 	bl	80022bc <HAL_TIM_IC_CaptureCallback>
 8007508:	e005      	b.n	8007516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f000 fba8 	bl	8007c60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fbb9 	bl	8007c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	f003 0304 	and.w	r3, r3, #4
 8007526:	2b04      	cmp	r3, #4
 8007528:	d122      	bne.n	8007570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f003 0304 	and.w	r3, r3, #4
 8007534:	2b04      	cmp	r3, #4
 8007536:	d11b      	bne.n	8007570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0204 	mvn.w	r2, #4
 8007540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2202      	movs	r2, #2
 8007546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fa feb0 	bl	80022bc <HAL_TIM_IC_CaptureCallback>
 800755c:	e005      	b.n	800756a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 fb7e 	bl	8007c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fb8f 	bl	8007c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	f003 0308 	and.w	r3, r3, #8
 800757a:	2b08      	cmp	r3, #8
 800757c:	d122      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f003 0308 	and.w	r3, r3, #8
 8007588:	2b08      	cmp	r3, #8
 800758a:	d11b      	bne.n	80075c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f06f 0208 	mvn.w	r2, #8
 8007594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2204      	movs	r2, #4
 800759a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	f003 0303 	and.w	r3, r3, #3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d003      	beq.n	80075b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7fa fe86 	bl	80022bc <HAL_TIM_IC_CaptureCallback>
 80075b0:	e005      	b.n	80075be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 fb54 	bl	8007c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fb65 	bl	8007c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	f003 0310 	and.w	r3, r3, #16
 80075ce:	2b10      	cmp	r3, #16
 80075d0:	d122      	bne.n	8007618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d11b      	bne.n	8007618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f06f 0210 	mvn.w	r2, #16
 80075e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2208      	movs	r2, #8
 80075ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d003      	beq.n	8007606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7fa fe5c 	bl	80022bc <HAL_TIM_IC_CaptureCallback>
 8007604:	e005      	b.n	8007612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fb2a 	bl	8007c60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fb3b 	bl	8007c88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	691b      	ldr	r3, [r3, #16]
 800761e:	f003 0301 	and.w	r3, r3, #1
 8007622:	2b01      	cmp	r3, #1
 8007624:	d10e      	bne.n	8007644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	f003 0301 	and.w	r3, r3, #1
 8007630:	2b01      	cmp	r3, #1
 8007632:	d107      	bne.n	8007644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f06f 0201 	mvn.w	r2, #1
 800763c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f7f9 fc72 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800764e:	2b80      	cmp	r3, #128	; 0x80
 8007650:	d10e      	bne.n	8007670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800765c:	2b80      	cmp	r3, #128	; 0x80
 800765e:	d107      	bne.n	8007670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 fa32 	bl	8008ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800767a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800767e:	d10e      	bne.n	800769e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800768a:	2b80      	cmp	r3, #128	; 0x80
 800768c:	d107      	bne.n	800769e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f001 fa25 	bl	8008ae8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a8:	2b40      	cmp	r3, #64	; 0x40
 80076aa:	d10e      	bne.n	80076ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b6:	2b40      	cmp	r3, #64	; 0x40
 80076b8:	d107      	bne.n	80076ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80076c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fae9 	bl	8007c9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	f003 0320 	and.w	r3, r3, #32
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	d10e      	bne.n	80076f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f003 0320 	and.w	r3, r3, #32
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d107      	bne.n	80076f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f06f 0220 	mvn.w	r2, #32
 80076ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f001 f9e5 	bl	8008ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076f6:	bf00      	nop
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	60f8      	str	r0, [r7, #12]
 8007706:	60b9      	str	r1, [r7, #8]
 8007708:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007710:	2b01      	cmp	r3, #1
 8007712:	d101      	bne.n	8007718 <HAL_TIM_IC_ConfigChannel+0x1a>
 8007714:	2302      	movs	r3, #2
 8007716:	e08a      	b.n	800782e <HAL_TIM_IC_ConfigChannel+0x130>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d11b      	bne.n	8007766 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	6819      	ldr	r1, [r3, #0]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f000 fec9 	bl	80084d4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699a      	ldr	r2, [r3, #24]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 020c 	bic.w	r2, r2, #12
 8007750:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6999      	ldr	r1, [r3, #24]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	689a      	ldr	r2, [r3, #8]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	619a      	str	r2, [r3, #24]
 8007764:	e05a      	b.n	800781c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2b04      	cmp	r3, #4
 800776a:	d11c      	bne.n	80077a6 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6819      	ldr	r1, [r3, #0]
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	68db      	ldr	r3, [r3, #12]
 800777c:	f000 ff4d 	bl	800861a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800778e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	6999      	ldr	r1, [r3, #24]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	021a      	lsls	r2, r3, #8
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	619a      	str	r2, [r3, #24]
 80077a4:	e03a      	b.n	800781c <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	d11b      	bne.n	80077e4 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	6819      	ldr	r1, [r3, #0]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f000 ff9a 	bl	80086f4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	69da      	ldr	r2, [r3, #28]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f022 020c 	bic.w	r2, r2, #12
 80077ce:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	69d9      	ldr	r1, [r3, #28]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	689a      	ldr	r2, [r3, #8]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	61da      	str	r2, [r3, #28]
 80077e2:	e01b      	b.n	800781c <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6818      	ldr	r0, [r3, #0]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	6819      	ldr	r1, [r3, #0]
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	f000 ffba 	bl	800876c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69da      	ldr	r2, [r3, #28]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007806:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	69d9      	ldr	r1, [r3, #28]
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	021a      	lsls	r2, r3, #8
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	430a      	orrs	r2, r1
 800781a:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800784a:	2b01      	cmp	r3, #1
 800784c:	d101      	bne.n	8007852 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800784e:	2302      	movs	r3, #2
 8007850:	e105      	b.n	8007a5e <HAL_TIM_PWM_ConfigChannel+0x226>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2202      	movs	r2, #2
 800785e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b14      	cmp	r3, #20
 8007866:	f200 80f0 	bhi.w	8007a4a <HAL_TIM_PWM_ConfigChannel+0x212>
 800786a:	a201      	add	r2, pc, #4	; (adr r2, 8007870 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800786c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007870:	080078c5 	.word	0x080078c5
 8007874:	08007a4b 	.word	0x08007a4b
 8007878:	08007a4b 	.word	0x08007a4b
 800787c:	08007a4b 	.word	0x08007a4b
 8007880:	08007905 	.word	0x08007905
 8007884:	08007a4b 	.word	0x08007a4b
 8007888:	08007a4b 	.word	0x08007a4b
 800788c:	08007a4b 	.word	0x08007a4b
 8007890:	08007947 	.word	0x08007947
 8007894:	08007a4b 	.word	0x08007a4b
 8007898:	08007a4b 	.word	0x08007a4b
 800789c:	08007a4b 	.word	0x08007a4b
 80078a0:	08007987 	.word	0x08007987
 80078a4:	08007a4b 	.word	0x08007a4b
 80078a8:	08007a4b 	.word	0x08007a4b
 80078ac:	08007a4b 	.word	0x08007a4b
 80078b0:	080079c9 	.word	0x080079c9
 80078b4:	08007a4b 	.word	0x08007a4b
 80078b8:	08007a4b 	.word	0x08007a4b
 80078bc:	08007a4b 	.word	0x08007a4b
 80078c0:	08007a09 	.word	0x08007a09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68b9      	ldr	r1, [r7, #8]
 80078ca:	4618      	mov	r0, r3
 80078cc:	f000 fb1c 	bl	8007f08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f042 0208 	orr.w	r2, r2, #8
 80078de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	699a      	ldr	r2, [r3, #24]
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0204 	bic.w	r2, r2, #4
 80078ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6999      	ldr	r1, [r3, #24]
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	691a      	ldr	r2, [r3, #16]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	619a      	str	r2, [r3, #24]
      break;
 8007902:	e0a3      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68b9      	ldr	r1, [r7, #8]
 800790a:	4618      	mov	r0, r3
 800790c:	f000 fb6e 	bl	8007fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699a      	ldr	r2, [r3, #24]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800791e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800792e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	6999      	ldr	r1, [r3, #24]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	021a      	lsls	r2, r3, #8
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	430a      	orrs	r2, r1
 8007942:	619a      	str	r2, [r3, #24]
      break;
 8007944:	e082      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	68b9      	ldr	r1, [r7, #8]
 800794c:	4618      	mov	r0, r3
 800794e:	f000 fbc5 	bl	80080dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	69da      	ldr	r2, [r3, #28]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0208 	orr.w	r2, r2, #8
 8007960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	69da      	ldr	r2, [r3, #28]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0204 	bic.w	r2, r2, #4
 8007970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	69d9      	ldr	r1, [r3, #28]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	61da      	str	r2, [r3, #28]
      break;
 8007984:	e062      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	4618      	mov	r0, r3
 800798e:	f000 fc1b 	bl	80081c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	69da      	ldr	r2, [r3, #28]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	69da      	ldr	r2, [r3, #28]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	69d9      	ldr	r1, [r3, #28]
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	021a      	lsls	r2, r3, #8
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	61da      	str	r2, [r3, #28]
      break;
 80079c6:	e041      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68b9      	ldr	r1, [r7, #8]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 fc52 	bl	8008278 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f042 0208 	orr.w	r2, r2, #8
 80079e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f022 0204 	bic.w	r2, r2, #4
 80079f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	691a      	ldr	r2, [r3, #16]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a06:	e021      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68b9      	ldr	r1, [r7, #8]
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fc84 	bl	800831c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	021a      	lsls	r2, r3, #8
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a48:	e000      	b.n	8007a4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8007a4a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop

08007a68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d101      	bne.n	8007a80 <HAL_TIM_ConfigClockSource+0x18>
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e0a6      	b.n	8007bce <HAL_TIM_ConfigClockSource+0x166>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4b4f      	ldr	r3, [pc, #316]	; (8007bd8 <HAL_TIM_ConfigClockSource+0x170>)
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007aa6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68fa      	ldr	r2, [r7, #12]
 8007aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b40      	cmp	r3, #64	; 0x40
 8007ab6:	d067      	beq.n	8007b88 <HAL_TIM_ConfigClockSource+0x120>
 8007ab8:	2b40      	cmp	r3, #64	; 0x40
 8007aba:	d80b      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x6c>
 8007abc:	2b10      	cmp	r3, #16
 8007abe:	d073      	beq.n	8007ba8 <HAL_TIM_ConfigClockSource+0x140>
 8007ac0:	2b10      	cmp	r3, #16
 8007ac2:	d802      	bhi.n	8007aca <HAL_TIM_ConfigClockSource+0x62>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d06f      	beq.n	8007ba8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007ac8:	e078      	b.n	8007bbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d06c      	beq.n	8007ba8 <HAL_TIM_ConfigClockSource+0x140>
 8007ace:	2b30      	cmp	r3, #48	; 0x30
 8007ad0:	d06a      	beq.n	8007ba8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007ad2:	e073      	b.n	8007bbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007ad4:	2b70      	cmp	r3, #112	; 0x70
 8007ad6:	d00d      	beq.n	8007af4 <HAL_TIM_ConfigClockSource+0x8c>
 8007ad8:	2b70      	cmp	r3, #112	; 0x70
 8007ada:	d804      	bhi.n	8007ae6 <HAL_TIM_ConfigClockSource+0x7e>
 8007adc:	2b50      	cmp	r3, #80	; 0x50
 8007ade:	d033      	beq.n	8007b48 <HAL_TIM_ConfigClockSource+0xe0>
 8007ae0:	2b60      	cmp	r3, #96	; 0x60
 8007ae2:	d041      	beq.n	8007b68 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007ae4:	e06a      	b.n	8007bbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aea:	d066      	beq.n	8007bba <HAL_TIM_ConfigClockSource+0x152>
 8007aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007af0:	d017      	beq.n	8007b22 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007af2:	e063      	b.n	8007bbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6818      	ldr	r0, [r3, #0]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	6899      	ldr	r1, [r3, #8]
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f000 fe8a 	bl	800881c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	609a      	str	r2, [r3, #8]
      break;
 8007b20:	e04c      	b.n	8007bbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6818      	ldr	r0, [r3, #0]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	6899      	ldr	r1, [r3, #8]
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	685a      	ldr	r2, [r3, #4]
 8007b2e:	683b      	ldr	r3, [r7, #0]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	f000 fe73 	bl	800881c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689a      	ldr	r2, [r3, #8]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b44:	609a      	str	r2, [r3, #8]
      break;
 8007b46:	e039      	b.n	8007bbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	6859      	ldr	r1, [r3, #4]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	461a      	mov	r2, r3
 8007b56:	f000 fd31 	bl	80085bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2150      	movs	r1, #80	; 0x50
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fe40 	bl	80087e6 <TIM_ITRx_SetConfig>
      break;
 8007b66:	e029      	b.n	8007bbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6818      	ldr	r0, [r3, #0]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	6859      	ldr	r1, [r3, #4]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	461a      	mov	r2, r3
 8007b76:	f000 fd8d 	bl	8008694 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2160      	movs	r1, #96	; 0x60
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 fe30 	bl	80087e6 <TIM_ITRx_SetConfig>
      break;
 8007b86:	e019      	b.n	8007bbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6818      	ldr	r0, [r3, #0]
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	6859      	ldr	r1, [r3, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	461a      	mov	r2, r3
 8007b96:	f000 fd11 	bl	80085bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2140      	movs	r1, #64	; 0x40
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f000 fe20 	bl	80087e6 <TIM_ITRx_SetConfig>
      break;
 8007ba6:	e009      	b.n	8007bbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	f000 fe17 	bl	80087e6 <TIM_ITRx_SetConfig>
      break;
 8007bb8:	e000      	b.n	8007bbc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007bba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	fffeff88 	.word	0xfffeff88

08007bdc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d101      	bne.n	8007bf4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	e031      	b.n	8007c58 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fbdc 	bl	80083c4 <TIM_SlaveTimer_SetConfig>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d009      	beq.n	8007c26 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2201      	movs	r2, #1
 8007c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e018      	b.n	8007c58 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68da      	ldr	r2, [r3, #12]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c34:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007c44:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c90:	bf00      	nop
 8007c92:	370c      	adds	r7, #12
 8007c94:	46bd      	mov	sp, r7
 8007c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9a:	4770      	bx	lr

08007c9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd0:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	f7ff ffe8 	bl	8007cb0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8007ce0:	bf00      	nop
 8007ce2:	3710      	adds	r7, #16
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d02:	687a      	ldr	r2, [r7, #4]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d103      	bne.n	8007d10 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	771a      	strb	r2, [r3, #28]
 8007d0e:	e019      	b.n	8007d44 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d103      	bne.n	8007d22 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	771a      	strb	r2, [r3, #28]
 8007d20:	e010      	b.n	8007d44 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d103      	bne.n	8007d34 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2204      	movs	r2, #4
 8007d30:	771a      	strb	r2, [r3, #28]
 8007d32:	e007      	b.n	8007d44 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d38:	687a      	ldr	r2, [r7, #4]
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d102      	bne.n	8007d44 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2208      	movs	r2, #8
 8007d42:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7fa fab9 	bl	80022bc <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	771a      	strb	r2, [r3, #28]
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d103      	bne.n	8007d80 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	771a      	strb	r2, [r3, #28]
 8007d7e:	e019      	b.n	8007db4 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d103      	bne.n	8007d92 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	771a      	strb	r2, [r3, #28]
 8007d90:	e010      	b.n	8007db4 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d103      	bne.n	8007da4 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2204      	movs	r2, #4
 8007da0:	771a      	strb	r2, [r3, #28]
 8007da2:	e007      	b.n	8007db4 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d102      	bne.n	8007db4 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2208      	movs	r2, #8
 8007db2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff ff5d 	bl	8007c74 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	771a      	strb	r2, [r3, #28]
}
 8007dc0:	bf00      	nop
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a40      	ldr	r2, [pc, #256]	; (8007edc <TIM_Base_SetConfig+0x114>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d013      	beq.n	8007e08 <TIM_Base_SetConfig+0x40>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007de6:	d00f      	beq.n	8007e08 <TIM_Base_SetConfig+0x40>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a3d      	ldr	r2, [pc, #244]	; (8007ee0 <TIM_Base_SetConfig+0x118>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d00b      	beq.n	8007e08 <TIM_Base_SetConfig+0x40>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a3c      	ldr	r2, [pc, #240]	; (8007ee4 <TIM_Base_SetConfig+0x11c>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d007      	beq.n	8007e08 <TIM_Base_SetConfig+0x40>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a3b      	ldr	r2, [pc, #236]	; (8007ee8 <TIM_Base_SetConfig+0x120>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d003      	beq.n	8007e08 <TIM_Base_SetConfig+0x40>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a3a      	ldr	r2, [pc, #232]	; (8007eec <TIM_Base_SetConfig+0x124>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d108      	bne.n	8007e1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a2f      	ldr	r2, [pc, #188]	; (8007edc <TIM_Base_SetConfig+0x114>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d02b      	beq.n	8007e7a <TIM_Base_SetConfig+0xb2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e28:	d027      	beq.n	8007e7a <TIM_Base_SetConfig+0xb2>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4a2c      	ldr	r2, [pc, #176]	; (8007ee0 <TIM_Base_SetConfig+0x118>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d023      	beq.n	8007e7a <TIM_Base_SetConfig+0xb2>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4a2b      	ldr	r2, [pc, #172]	; (8007ee4 <TIM_Base_SetConfig+0x11c>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d01f      	beq.n	8007e7a <TIM_Base_SetConfig+0xb2>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4a2a      	ldr	r2, [pc, #168]	; (8007ee8 <TIM_Base_SetConfig+0x120>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d01b      	beq.n	8007e7a <TIM_Base_SetConfig+0xb2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	4a29      	ldr	r2, [pc, #164]	; (8007eec <TIM_Base_SetConfig+0x124>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d017      	beq.n	8007e7a <TIM_Base_SetConfig+0xb2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a28      	ldr	r2, [pc, #160]	; (8007ef0 <TIM_Base_SetConfig+0x128>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d013      	beq.n	8007e7a <TIM_Base_SetConfig+0xb2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a27      	ldr	r2, [pc, #156]	; (8007ef4 <TIM_Base_SetConfig+0x12c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d00f      	beq.n	8007e7a <TIM_Base_SetConfig+0xb2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a26      	ldr	r2, [pc, #152]	; (8007ef8 <TIM_Base_SetConfig+0x130>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d00b      	beq.n	8007e7a <TIM_Base_SetConfig+0xb2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a25      	ldr	r2, [pc, #148]	; (8007efc <TIM_Base_SetConfig+0x134>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d007      	beq.n	8007e7a <TIM_Base_SetConfig+0xb2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a24      	ldr	r2, [pc, #144]	; (8007f00 <TIM_Base_SetConfig+0x138>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d003      	beq.n	8007e7a <TIM_Base_SetConfig+0xb2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a23      	ldr	r2, [pc, #140]	; (8007f04 <TIM_Base_SetConfig+0x13c>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d108      	bne.n	8007e8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	689a      	ldr	r2, [r3, #8]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4a0a      	ldr	r2, [pc, #40]	; (8007edc <TIM_Base_SetConfig+0x114>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d003      	beq.n	8007ec0 <TIM_Base_SetConfig+0xf8>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	4a0c      	ldr	r2, [pc, #48]	; (8007eec <TIM_Base_SetConfig+0x124>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d103      	bne.n	8007ec8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	691a      	ldr	r2, [r3, #16]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2201      	movs	r2, #1
 8007ecc:	615a      	str	r2, [r3, #20]
}
 8007ece:	bf00      	nop
 8007ed0:	3714      	adds	r7, #20
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	40010000 	.word	0x40010000
 8007ee0:	40000400 	.word	0x40000400
 8007ee4:	40000800 	.word	0x40000800
 8007ee8:	40000c00 	.word	0x40000c00
 8007eec:	40010400 	.word	0x40010400
 8007ef0:	40014000 	.word	0x40014000
 8007ef4:	40014400 	.word	0x40014400
 8007ef8:	40014800 	.word	0x40014800
 8007efc:	40001800 	.word	0x40001800
 8007f00:	40001c00 	.word	0x40001c00
 8007f04:	40002000 	.word	0x40002000

08007f08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b087      	sub	sp, #28
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a1b      	ldr	r3, [r3, #32]
 8007f16:	f023 0201 	bic.w	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	699b      	ldr	r3, [r3, #24]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	4b2b      	ldr	r3, [pc, #172]	; (8007fe0 <TIM_OC1_SetConfig+0xd8>)
 8007f34:	4013      	ands	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0303 	bic.w	r3, r3, #3
 8007f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f023 0302 	bic.w	r3, r3, #2
 8007f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	4a21      	ldr	r2, [pc, #132]	; (8007fe4 <TIM_OC1_SetConfig+0xdc>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d003      	beq.n	8007f6c <TIM_OC1_SetConfig+0x64>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	4a20      	ldr	r2, [pc, #128]	; (8007fe8 <TIM_OC1_SetConfig+0xe0>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d10c      	bne.n	8007f86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f023 0308 	bic.w	r3, r3, #8
 8007f72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f023 0304 	bic.w	r3, r3, #4
 8007f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a16      	ldr	r2, [pc, #88]	; (8007fe4 <TIM_OC1_SetConfig+0xdc>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d003      	beq.n	8007f96 <TIM_OC1_SetConfig+0x8e>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a15      	ldr	r2, [pc, #84]	; (8007fe8 <TIM_OC1_SetConfig+0xe0>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d111      	bne.n	8007fba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	693a      	ldr	r2, [r7, #16]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	621a      	str	r2, [r3, #32]
}
 8007fd4:	bf00      	nop
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	fffeff8f 	.word	0xfffeff8f
 8007fe4:	40010000 	.word	0x40010000
 8007fe8:	40010400 	.word	0x40010400

08007fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f023 0210 	bic.w	r2, r3, #16
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	699b      	ldr	r3, [r3, #24]
 8008012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4b2e      	ldr	r3, [pc, #184]	; (80080d0 <TIM_OC2_SetConfig+0xe4>)
 8008018:	4013      	ands	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	021b      	lsls	r3, r3, #8
 800802a:	68fa      	ldr	r2, [r7, #12]
 800802c:	4313      	orrs	r3, r2
 800802e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f023 0320 	bic.w	r3, r3, #32
 8008036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a23      	ldr	r2, [pc, #140]	; (80080d4 <TIM_OC2_SetConfig+0xe8>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_OC2_SetConfig+0x68>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a22      	ldr	r2, [pc, #136]	; (80080d8 <TIM_OC2_SetConfig+0xec>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d10d      	bne.n	8008070 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800805a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	011b      	lsls	r3, r3, #4
 8008062:	697a      	ldr	r2, [r7, #20]
 8008064:	4313      	orrs	r3, r2
 8008066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800806e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a18      	ldr	r2, [pc, #96]	; (80080d4 <TIM_OC2_SetConfig+0xe8>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d003      	beq.n	8008080 <TIM_OC2_SetConfig+0x94>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a17      	ldr	r2, [pc, #92]	; (80080d8 <TIM_OC2_SetConfig+0xec>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d113      	bne.n	80080a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008086:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800808e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	699b      	ldr	r3, [r3, #24]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	693a      	ldr	r2, [r7, #16]
 80080a4:	4313      	orrs	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685a      	ldr	r2, [r3, #4]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	697a      	ldr	r2, [r7, #20]
 80080c0:	621a      	str	r2, [r3, #32]
}
 80080c2:	bf00      	nop
 80080c4:	371c      	adds	r7, #28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	feff8fff 	.word	0xfeff8fff
 80080d4:	40010000 	.word	0x40010000
 80080d8:	40010400 	.word	0x40010400

080080dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080dc:	b480      	push	{r7}
 80080de:	b087      	sub	sp, #28
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
 80080e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6a1b      	ldr	r3, [r3, #32]
 80080ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	69db      	ldr	r3, [r3, #28]
 8008102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008104:	68fa      	ldr	r2, [r7, #12]
 8008106:	4b2d      	ldr	r3, [pc, #180]	; (80081bc <TIM_OC3_SetConfig+0xe0>)
 8008108:	4013      	ands	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f023 0303 	bic.w	r3, r3, #3
 8008112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	4313      	orrs	r3, r2
 800811c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	021b      	lsls	r3, r3, #8
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4a22      	ldr	r2, [pc, #136]	; (80081c0 <TIM_OC3_SetConfig+0xe4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d003      	beq.n	8008142 <TIM_OC3_SetConfig+0x66>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a21      	ldr	r2, [pc, #132]	; (80081c4 <TIM_OC3_SetConfig+0xe8>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d10d      	bne.n	800815e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	697a      	ldr	r2, [r7, #20]
 8008152:	4313      	orrs	r3, r2
 8008154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800815c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a17      	ldr	r2, [pc, #92]	; (80081c0 <TIM_OC3_SetConfig+0xe4>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d003      	beq.n	800816e <TIM_OC3_SetConfig+0x92>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a16      	ldr	r2, [pc, #88]	; (80081c4 <TIM_OC3_SetConfig+0xe8>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d113      	bne.n	8008196 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008176:	693b      	ldr	r3, [r7, #16]
 8008178:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800817c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	011b      	lsls	r3, r3, #4
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	4313      	orrs	r3, r2
 8008194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685a      	ldr	r2, [r3, #4]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	697a      	ldr	r2, [r7, #20]
 80081ae:	621a      	str	r2, [r3, #32]
}
 80081b0:	bf00      	nop
 80081b2:	371c      	adds	r7, #28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr
 80081bc:	fffeff8f 	.word	0xfffeff8f
 80081c0:	40010000 	.word	0x40010000
 80081c4:	40010400 	.word	0x40010400

080081c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b087      	sub	sp, #28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6a1b      	ldr	r3, [r3, #32]
 80081d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6a1b      	ldr	r3, [r3, #32]
 80081e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	69db      	ldr	r3, [r3, #28]
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	4b1e      	ldr	r3, [pc, #120]	; (800826c <TIM_OC4_SetConfig+0xa4>)
 80081f4:	4013      	ands	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	021b      	lsls	r3, r3, #8
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	4313      	orrs	r3, r2
 800820a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	031b      	lsls	r3, r3, #12
 800821a:	693a      	ldr	r2, [r7, #16]
 800821c:	4313      	orrs	r3, r2
 800821e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a13      	ldr	r2, [pc, #76]	; (8008270 <TIM_OC4_SetConfig+0xa8>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <TIM_OC4_SetConfig+0x68>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a12      	ldr	r2, [pc, #72]	; (8008274 <TIM_OC4_SetConfig+0xac>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d109      	bne.n	8008244 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	019b      	lsls	r3, r3, #6
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	621a      	str	r2, [r3, #32]
}
 800825e:	bf00      	nop
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	feff8fff 	.word	0xfeff8fff
 8008270:	40010000 	.word	0x40010000
 8008274:	40010400 	.word	0x40010400

08008278 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4b1b      	ldr	r3, [pc, #108]	; (8008310 <TIM_OC5_SetConfig+0x98>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80082b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a12      	ldr	r2, [pc, #72]	; (8008314 <TIM_OC5_SetConfig+0x9c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d003      	beq.n	80082d6 <TIM_OC5_SetConfig+0x5e>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a11      	ldr	r2, [pc, #68]	; (8008318 <TIM_OC5_SetConfig+0xa0>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d109      	bne.n	80082ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	621a      	str	r2, [r3, #32]
}
 8008304:	bf00      	nop
 8008306:	371c      	adds	r7, #28
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	fffeff8f 	.word	0xfffeff8f
 8008314:	40010000 	.word	0x40010000
 8008318:	40010400 	.word	0x40010400

0800831c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800831c:	b480      	push	{r7}
 800831e:	b087      	sub	sp, #28
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	4b1c      	ldr	r3, [pc, #112]	; (80083b8 <TIM_OC6_SetConfig+0x9c>)
 8008348:	4013      	ands	r3, r2
 800834a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4313      	orrs	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800835e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	051b      	lsls	r3, r3, #20
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	4313      	orrs	r3, r2
 800836a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a13      	ldr	r2, [pc, #76]	; (80083bc <TIM_OC6_SetConfig+0xa0>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_OC6_SetConfig+0x60>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a12      	ldr	r2, [pc, #72]	; (80083c0 <TIM_OC6_SetConfig+0xa4>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d109      	bne.n	8008390 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008382:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	029b      	lsls	r3, r3, #10
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	621a      	str	r2, [r3, #32]
}
 80083aa:	bf00      	nop
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	feff8fff 	.word	0xfeff8fff
 80083bc:	40010000 	.word	0x40010000
 80083c0:	40010400 	.word	0x40010400

080083c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	689b      	ldr	r3, [r3, #8]
 80083d4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083dc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	697a      	ldr	r2, [r7, #20]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80083e8:	697a      	ldr	r2, [r7, #20]
 80083ea:	4b39      	ldr	r3, [pc, #228]	; (80084d0 <TIM_SlaveTimer_SetConfig+0x10c>)
 80083ec:	4013      	ands	r3, r2
 80083ee:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	2b30      	cmp	r3, #48	; 0x30
 8008408:	d05c      	beq.n	80084c4 <TIM_SlaveTimer_SetConfig+0x100>
 800840a:	2b30      	cmp	r3, #48	; 0x30
 800840c:	d806      	bhi.n	800841c <TIM_SlaveTimer_SetConfig+0x58>
 800840e:	2b10      	cmp	r3, #16
 8008410:	d058      	beq.n	80084c4 <TIM_SlaveTimer_SetConfig+0x100>
 8008412:	2b20      	cmp	r3, #32
 8008414:	d056      	beq.n	80084c4 <TIM_SlaveTimer_SetConfig+0x100>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d054      	beq.n	80084c4 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800841a:	e054      	b.n	80084c6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800841c:	2b50      	cmp	r3, #80	; 0x50
 800841e:	d03d      	beq.n	800849c <TIM_SlaveTimer_SetConfig+0xd8>
 8008420:	2b50      	cmp	r3, #80	; 0x50
 8008422:	d802      	bhi.n	800842a <TIM_SlaveTimer_SetConfig+0x66>
 8008424:	2b40      	cmp	r3, #64	; 0x40
 8008426:	d010      	beq.n	800844a <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8008428:	e04d      	b.n	80084c6 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800842a:	2b60      	cmp	r3, #96	; 0x60
 800842c:	d040      	beq.n	80084b0 <TIM_SlaveTimer_SetConfig+0xec>
 800842e:	2b70      	cmp	r3, #112	; 0x70
 8008430:	d000      	beq.n	8008434 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8008432:	e048      	b.n	80084c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	68d9      	ldr	r1, [r3, #12]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	f000 f9ea 	bl	800881c <TIM_ETR_SetConfig>
      break;
 8008448:	e03d      	b.n	80084c6 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b05      	cmp	r3, #5
 8008450:	d101      	bne.n	8008456 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e038      	b.n	80084c8 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	6a1b      	ldr	r3, [r3, #32]
 800845c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	6a1a      	ldr	r2, [r3, #32]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0201 	bic.w	r2, r2, #1
 800846c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800847c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	68fa      	ldr	r2, [r7, #12]
 8008486:	4313      	orrs	r3, r2
 8008488:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	68fa      	ldr	r2, [r7, #12]
 8008490:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	621a      	str	r2, [r3, #32]
      break;
 800849a:	e014      	b.n	80084c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6818      	ldr	r0, [r3, #0]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	6899      	ldr	r1, [r3, #8]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	461a      	mov	r2, r3
 80084aa:	f000 f887 	bl	80085bc <TIM_TI1_ConfigInputStage>
      break;
 80084ae:	e00a      	b.n	80084c6 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6818      	ldr	r0, [r3, #0]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	6899      	ldr	r1, [r3, #8]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	461a      	mov	r2, r3
 80084be:	f000 f8e9 	bl	8008694 <TIM_TI2_ConfigInputStage>
      break;
 80084c2:	e000      	b.n	80084c6 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80084c4:	bf00      	nop
  }
  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	fffefff8 	.word	0xfffefff8

080084d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	607a      	str	r2, [r7, #4]
 80084e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	f023 0201 	bic.w	r2, r3, #1
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	4a28      	ldr	r2, [pc, #160]	; (80085a0 <TIM_TI1_SetConfig+0xcc>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01b      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008508:	d017      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4a25      	ldr	r2, [pc, #148]	; (80085a4 <TIM_TI1_SetConfig+0xd0>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d013      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4a24      	ldr	r2, [pc, #144]	; (80085a8 <TIM_TI1_SetConfig+0xd4>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00f      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4a23      	ldr	r2, [pc, #140]	; (80085ac <TIM_TI1_SetConfig+0xd8>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d00b      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4a22      	ldr	r2, [pc, #136]	; (80085b0 <TIM_TI1_SetConfig+0xdc>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d007      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4a21      	ldr	r2, [pc, #132]	; (80085b4 <TIM_TI1_SetConfig+0xe0>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d003      	beq.n	800853a <TIM_TI1_SetConfig+0x66>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4a20      	ldr	r2, [pc, #128]	; (80085b8 <TIM_TI1_SetConfig+0xe4>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d101      	bne.n	800853e <TIM_TI1_SetConfig+0x6a>
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <TIM_TI1_SetConfig+0x6c>
 800853e:	2300      	movs	r3, #0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d008      	beq.n	8008556 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f023 0303 	bic.w	r3, r3, #3
 800854a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4313      	orrs	r3, r2
 8008552:	617b      	str	r3, [r7, #20]
 8008554:	e003      	b.n	800855e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f043 0301 	orr.w	r3, r3, #1
 800855c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008564:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	b2db      	uxtb	r3, r3
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	4313      	orrs	r3, r2
 8008570:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f023 030a 	bic.w	r3, r3, #10
 8008578:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f003 030a 	and.w	r3, r3, #10
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	621a      	str	r2, [r3, #32]
}
 8008592:	bf00      	nop
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	40010000 	.word	0x40010000
 80085a4:	40000400 	.word	0x40000400
 80085a8:	40000800 	.word	0x40000800
 80085ac:	40000c00 	.word	0x40000c00
 80085b0:	40010400 	.word	0x40010400
 80085b4:	40014000 	.word	0x40014000
 80085b8:	40001800 	.word	0x40001800

080085bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	f023 0201 	bic.w	r2, r3, #1
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	699b      	ldr	r3, [r3, #24]
 80085de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	011b      	lsls	r3, r3, #4
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f023 030a 	bic.w	r3, r3, #10
 80085f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800861a:	b480      	push	{r7}
 800861c:	b087      	sub	sp, #28
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	60b9      	str	r1, [r7, #8]
 8008624:	607a      	str	r2, [r7, #4]
 8008626:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6a1b      	ldr	r3, [r3, #32]
 800862c:	f023 0210 	bic.w	r2, r3, #16
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008646:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	021b      	lsls	r3, r3, #8
 800864c:	697a      	ldr	r2, [r7, #20]
 800864e:	4313      	orrs	r3, r2
 8008650:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008652:	697b      	ldr	r3, [r7, #20]
 8008654:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008658:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	031b      	lsls	r3, r3, #12
 800865e:	b29b      	uxth	r3, r3
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	4313      	orrs	r3, r2
 8008664:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800866c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	011b      	lsls	r3, r3, #4
 8008672:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	4313      	orrs	r3, r2
 800867a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	697a      	ldr	r2, [r7, #20]
 8008680:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	693a      	ldr	r2, [r7, #16]
 8008686:	621a      	str	r2, [r3, #32]
}
 8008688:	bf00      	nop
 800868a:	371c      	adds	r7, #28
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a1b      	ldr	r3, [r3, #32]
 80086a4:	f023 0210 	bic.w	r2, r3, #16
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	031b      	lsls	r3, r3, #12
 80086c4:	697a      	ldr	r2, [r7, #20]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	011b      	lsls	r3, r3, #4
 80086d6:	693a      	ldr	r2, [r7, #16]
 80086d8:	4313      	orrs	r3, r2
 80086da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	697a      	ldr	r2, [r7, #20]
 80086e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	621a      	str	r2, [r3, #32]
}
 80086e8:	bf00      	nop
 80086ea:	371c      	adds	r7, #28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b087      	sub	sp, #28
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
 8008700:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6a1b      	ldr	r3, [r3, #32]
 8008706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a1b      	ldr	r3, [r3, #32]
 8008718:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f023 0303 	bic.w	r3, r3, #3
 8008720:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008722:	697a      	ldr	r2, [r7, #20]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008730:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	011b      	lsls	r3, r3, #4
 8008736:	b2db      	uxtb	r3, r3
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	4313      	orrs	r3, r2
 800873c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008744:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	021b      	lsls	r3, r3, #8
 800874a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	4313      	orrs	r3, r2
 8008752:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	693a      	ldr	r2, [r7, #16]
 800875e:	621a      	str	r2, [r3, #32]
}
 8008760:	bf00      	nop
 8008762:	371c      	adds	r7, #28
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800876c:	b480      	push	{r7}
 800876e:	b087      	sub	sp, #28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	607a      	str	r2, [r7, #4]
 8008778:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6a1b      	ldr	r3, [r3, #32]
 8008790:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008798:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	021b      	lsls	r3, r3, #8
 800879e:	697a      	ldr	r2, [r7, #20]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087aa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	031b      	lsls	r3, r3, #12
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80087be:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	031b      	lsls	r3, r3, #12
 80087c4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	693a      	ldr	r2, [r7, #16]
 80087d8:	621a      	str	r2, [r3, #32]
}
 80087da:	bf00      	nop
 80087dc:	371c      	adds	r7, #28
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr

080087e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b085      	sub	sp, #20
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
 80087ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	f043 0307 	orr.w	r3, r3, #7
 8008808:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	609a      	str	r2, [r3, #8]
}
 8008810:	bf00      	nop
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	607a      	str	r2, [r7, #4]
 8008828:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008836:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	021a      	lsls	r2, r3, #8
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	431a      	orrs	r2, r3
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	4313      	orrs	r3, r2
 8008844:	697a      	ldr	r2, [r7, #20]
 8008846:	4313      	orrs	r3, r2
 8008848:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	609a      	str	r2, [r3, #8]
}
 8008850:	bf00      	nop
 8008852:	371c      	adds	r7, #28
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800885c:	b480      	push	{r7}
 800885e:	b087      	sub	sp, #28
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f003 031f 	and.w	r3, r3, #31
 800886e:	2201      	movs	r2, #1
 8008870:	fa02 f303 	lsl.w	r3, r2, r3
 8008874:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6a1a      	ldr	r2, [r3, #32]
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	43db      	mvns	r3, r3
 800887e:	401a      	ands	r2, r3
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6a1a      	ldr	r2, [r3, #32]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f003 031f 	and.w	r3, r3, #31
 800888e:	6879      	ldr	r1, [r7, #4]
 8008890:	fa01 f303 	lsl.w	r3, r1, r3
 8008894:	431a      	orrs	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	621a      	str	r2, [r3, #32]
}
 800889a:	bf00      	nop
 800889c:	371c      	adds	r7, #28
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
	...

080088a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d101      	bne.n	80088c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088bc:	2302      	movs	r3, #2
 80088be:	e06d      	b.n	800899c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a30      	ldr	r2, [pc, #192]	; (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d004      	beq.n	80088f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a2f      	ldr	r2, [pc, #188]	; (80089ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80088f0:	4293      	cmp	r3, r2
 80088f2:	d108      	bne.n	8008906 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80088fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	4313      	orrs	r3, r2
 8008904:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800890c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	4313      	orrs	r3, r2
 8008916:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68fa      	ldr	r2, [r7, #12]
 800891e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a20      	ldr	r2, [pc, #128]	; (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d022      	beq.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008932:	d01d      	beq.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a1d      	ldr	r2, [pc, #116]	; (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d018      	beq.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1c      	ldr	r2, [pc, #112]	; (80089b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d013      	beq.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a1a      	ldr	r2, [pc, #104]	; (80089b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d00e      	beq.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a15      	ldr	r2, [pc, #84]	; (80089ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d009      	beq.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a16      	ldr	r2, [pc, #88]	; (80089bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d004      	beq.n	8008970 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a15      	ldr	r2, [pc, #84]	; (80089c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d10c      	bne.n	800898a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008976:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	4313      	orrs	r3, r2
 8008980:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2200      	movs	r2, #0
 8008996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr
 80089a8:	40010000 	.word	0x40010000
 80089ac:	40010400 	.word	0x40010400
 80089b0:	40000400 	.word	0x40000400
 80089b4:	40000800 	.word	0x40000800
 80089b8:	40000c00 	.word	0x40000c00
 80089bc:	40014000 	.word	0x40014000
 80089c0:	40001800 	.word	0x40001800

080089c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d101      	bne.n	80089e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80089dc:	2302      	movs	r3, #2
 80089de:	e065      	b.n	8008aac <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	695b      	ldr	r3, [r3, #20]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a46:	4313      	orrs	r3, r2
 8008a48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	041b      	lsls	r3, r3, #16
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4a16      	ldr	r2, [pc, #88]	; (8008ab8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d004      	beq.n	8008a6e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a14      	ldr	r2, [pc, #80]	; (8008abc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d115      	bne.n	8008a9a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a78:	051b      	lsls	r3, r3, #20
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	40010000 	.word	0x40010000
 8008abc:	40010400 	.word	0x40010400

08008ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e040      	b.n	8008b90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d106      	bne.n	8008b24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7fa fadc 	bl	80030dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2224      	movs	r2, #36	; 0x24
 8008b28:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f022 0201 	bic.w	r2, r2, #1
 8008b38:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fac4 	bl	80090c8 <UART_SetConfig>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d101      	bne.n	8008b4a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e022      	b.n	8008b90 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d002      	beq.n	8008b58 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fd62 	bl	800961c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	689a      	ldr	r2, [r3, #8]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f042 0201 	orr.w	r2, r2, #1
 8008b86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 fde9 	bl	8009760 <UART_CheckIdleState>
 8008b8e:	4603      	mov	r3, r0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b08a      	sub	sp, #40	; 0x28
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	603b      	str	r3, [r7, #0]
 8008ba4:	4613      	mov	r3, r2
 8008ba6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bac:	2b20      	cmp	r3, #32
 8008bae:	d17f      	bne.n	8008cb0 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d002      	beq.n	8008bbc <HAL_UART_Transmit+0x24>
 8008bb6:	88fb      	ldrh	r3, [r7, #6]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	e078      	b.n	8008cb2 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	d101      	bne.n	8008bce <HAL_UART_Transmit+0x36>
 8008bca:	2302      	movs	r3, #2
 8008bcc:	e071      	b.n	8008cb2 <HAL_UART_Transmit+0x11a>
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2221      	movs	r2, #33	; 0x21
 8008be0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008be2:	f7fa fe1b 	bl	800381c <HAL_GetTick>
 8008be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	88fa      	ldrh	r2, [r7, #6]
 8008bec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	88fa      	ldrh	r2, [r7, #6]
 8008bf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c00:	d108      	bne.n	8008c14 <HAL_UART_Transmit+0x7c>
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d104      	bne.n	8008c14 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	61bb      	str	r3, [r7, #24]
 8008c12:	e003      	b.n	8008c1c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8008c24:	e02c      	b.n	8008c80 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	2180      	movs	r1, #128	; 0x80
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 fdda 	bl	80097ea <UART_WaitOnFlagUntilTimeout>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e038      	b.n	8008cb2 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d10b      	bne.n	8008c5e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c46:	69bb      	ldr	r3, [r7, #24]
 8008c48:	881b      	ldrh	r3, [r3, #0]
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	3302      	adds	r3, #2
 8008c5a:	61bb      	str	r3, [r7, #24]
 8008c5c:	e007      	b.n	8008c6e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	781a      	ldrb	r2, [r3, #0]
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	3b01      	subs	r3, #1
 8008c78:	b29a      	uxth	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1cc      	bne.n	8008c26 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2200      	movs	r2, #0
 8008c94:	2140      	movs	r1, #64	; 0x40
 8008c96:	68f8      	ldr	r0, [r7, #12]
 8008c98:	f000 fda7 	bl	80097ea <UART_WaitOnFlagUntilTimeout>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e005      	b.n	8008cb2 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2220      	movs	r2, #32
 8008caa:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	e000      	b.n	8008cb2 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8008cb0:	2302      	movs	r3, #2
  }
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3720      	adds	r7, #32
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
	...

08008cbc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	60f8      	str	r0, [r7, #12]
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cce:	2b20      	cmp	r3, #32
 8008cd0:	f040 808a 	bne.w	8008de8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d002      	beq.n	8008ce0 <HAL_UART_Receive_IT+0x24>
 8008cda:	88fb      	ldrh	r3, [r7, #6]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e082      	b.n	8008dea <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d101      	bne.n	8008cf2 <HAL_UART_Receive_IT+0x36>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e07b      	b.n	8008dea <HAL_UART_Receive_IT+0x12e>
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	88fa      	ldrh	r2, [r7, #6]
 8008d04:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	88fa      	ldrh	r2, [r7, #6]
 8008d0c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1e:	d10e      	bne.n	8008d3e <HAL_UART_Receive_IT+0x82>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d105      	bne.n	8008d34 <HAL_UART_Receive_IT+0x78>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008d2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d32:	e02d      	b.n	8008d90 <HAL_UART_Receive_IT+0xd4>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	22ff      	movs	r2, #255	; 0xff
 8008d38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d3c:	e028      	b.n	8008d90 <HAL_UART_Receive_IT+0xd4>
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10d      	bne.n	8008d62 <HAL_UART_Receive_IT+0xa6>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d104      	bne.n	8008d58 <HAL_UART_Receive_IT+0x9c>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	22ff      	movs	r2, #255	; 0xff
 8008d52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d56:	e01b      	b.n	8008d90 <HAL_UART_Receive_IT+0xd4>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	227f      	movs	r2, #127	; 0x7f
 8008d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d60:	e016      	b.n	8008d90 <HAL_UART_Receive_IT+0xd4>
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d6a:	d10d      	bne.n	8008d88 <HAL_UART_Receive_IT+0xcc>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d104      	bne.n	8008d7e <HAL_UART_Receive_IT+0xc2>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	227f      	movs	r2, #127	; 0x7f
 8008d78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d7c:	e008      	b.n	8008d90 <HAL_UART_Receive_IT+0xd4>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	223f      	movs	r2, #63	; 0x3f
 8008d82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008d86:	e003      	b.n	8008d90 <HAL_UART_Receive_IT+0xd4>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	2200      	movs	r2, #0
 8008d94:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2222      	movs	r2, #34	; 0x22
 8008d9a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689a      	ldr	r2, [r3, #8]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f042 0201 	orr.w	r2, r2, #1
 8008daa:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008db4:	d107      	bne.n	8008dc6 <HAL_UART_Receive_IT+0x10a>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d103      	bne.n	8008dc6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	4a0d      	ldr	r2, [pc, #52]	; (8008df8 <HAL_UART_Receive_IT+0x13c>)
 8008dc2:	661a      	str	r2, [r3, #96]	; 0x60
 8008dc4:	e002      	b.n	8008dcc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4a0c      	ldr	r2, [pc, #48]	; (8008dfc <HAL_UART_Receive_IT+0x140>)
 8008dca:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008de2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008de4:	2300      	movs	r3, #0
 8008de6:	e000      	b.n	8008dea <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8008de8:	2302      	movs	r3, #2
  }
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	08009a25 	.word	0x08009a25
 8008dfc:	0800997f 	.word	0x0800997f

08008e00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b088      	sub	sp, #32
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	69db      	ldr	r3, [r3, #28]
 8008e0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e20:	69fa      	ldr	r2, [r7, #28]
 8008e22:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e26:	4013      	ands	r3, r2
 8008e28:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d113      	bne.n	8008e58 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e30:	69fb      	ldr	r3, [r7, #28]
 8008e32:	f003 0320 	and.w	r3, r3, #32
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00e      	beq.n	8008e58 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	f003 0320 	and.w	r3, r3, #32
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d009      	beq.n	8008e58 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 8114 	beq.w	8009076 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	4798      	blx	r3
      }
      return;
 8008e56:	e10e      	b.n	8009076 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 80d6 	beq.w	800900c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d105      	bne.n	8008e76 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	f000 80cb 	beq.w	800900c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00e      	beq.n	8008e9e <HAL_UART_IRQHandler+0x9e>
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d009      	beq.n	8008e9e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e96:	f043 0201 	orr.w	r2, r3, #1
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00e      	beq.n	8008ec6 <HAL_UART_IRQHandler+0xc6>
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d009      	beq.n	8008ec6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ebe:	f043 0204 	orr.w	r2, r3, #4
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	f003 0304 	and.w	r3, r3, #4
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00e      	beq.n	8008eee <HAL_UART_IRQHandler+0xee>
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f003 0301 	and.w	r3, r3, #1
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d009      	beq.n	8008eee <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	2204      	movs	r2, #4
 8008ee0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ee6:	f043 0202 	orr.w	r2, r3, #2
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	f003 0308 	and.w	r3, r3, #8
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d013      	beq.n	8008f20 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	f003 0320 	and.w	r3, r3, #32
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d009      	beq.n	8008f20 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	2208      	movs	r2, #8
 8008f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f18:	f043 0208 	orr.w	r2, r3, #8
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00f      	beq.n	8008f4a <HAL_UART_IRQHandler+0x14a>
 8008f2a:	69bb      	ldr	r3, [r7, #24]
 8008f2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00a      	beq.n	8008f4a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f42:	f043 0220 	orr.w	r2, r3, #32
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 8093 	beq.w	800907a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00c      	beq.n	8008f78 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	f003 0320 	and.w	r3, r3, #32
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d007      	beq.n	8008f78 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d003      	beq.n	8008f78 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f7c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f88:	2b40      	cmp	r3, #64	; 0x40
 8008f8a:	d004      	beq.n	8008f96 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d031      	beq.n	8008ffa <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f000 fca2 	bl	80098e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fa6:	2b40      	cmp	r3, #64	; 0x40
 8008fa8:	d123      	bne.n	8008ff2 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	689a      	ldr	r2, [r3, #8]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fb8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d013      	beq.n	8008fea <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fc6:	4a30      	ldr	r2, [pc, #192]	; (8009088 <HAL_UART_IRQHandler+0x288>)
 8008fc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7fb fa7e 	bl	80044d0 <HAL_DMA_Abort_IT>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d016      	beq.n	8009008 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe8:	e00e      	b.n	8009008 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f000 f858 	bl	80090a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff0:	e00a      	b.n	8009008 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f854 	bl	80090a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ff8:	e006      	b.n	8009008 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f850 	bl	80090a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8009006:	e038      	b.n	800907a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009008:	bf00      	nop
    return;
 800900a:	e036      	b.n	800907a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009012:	2b00      	cmp	r3, #0
 8009014:	d00d      	beq.n	8009032 <HAL_UART_IRQHandler+0x232>
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d008      	beq.n	8009032 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009028:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f842 	bl	80090b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009030:	e026      	b.n	8009080 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00d      	beq.n	8009058 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009042:	2b00      	cmp	r3, #0
 8009044:	d008      	beq.n	8009058 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800904a:	2b00      	cmp	r3, #0
 800904c:	d017      	beq.n	800907e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	4798      	blx	r3
    }
    return;
 8009056:	e012      	b.n	800907e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009058:	69fb      	ldr	r3, [r7, #28]
 800905a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905e:	2b00      	cmp	r3, #0
 8009060:	d00e      	beq.n	8009080 <HAL_UART_IRQHandler+0x280>
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009068:	2b00      	cmp	r3, #0
 800906a:	d009      	beq.n	8009080 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 fc6d 	bl	800994c <UART_EndTransmit_IT>
    return;
 8009072:	bf00      	nop
 8009074:	e004      	b.n	8009080 <HAL_UART_IRQHandler+0x280>
      return;
 8009076:	bf00      	nop
 8009078:	e002      	b.n	8009080 <HAL_UART_IRQHandler+0x280>
    return;
 800907a:	bf00      	nop
 800907c:	e000      	b.n	8009080 <HAL_UART_IRQHandler+0x280>
    return;
 800907e:	bf00      	nop
  }

}
 8009080:	3720      	adds	r7, #32
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	08009921 	.word	0x08009921

0800908c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800908c:	b480      	push	{r7}
 800908e:	b083      	sub	sp, #12
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009094:	bf00      	nop
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b083      	sub	sp, #12
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80090a8:	bf00      	nop
 80090aa:	370c      	adds	r7, #12
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b083      	sub	sp, #12
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80090bc:	bf00      	nop
 80090be:	370c      	adds	r7, #12
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b088      	sub	sp, #32
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80090d0:	2300      	movs	r3, #0
 80090d2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689a      	ldr	r2, [r3, #8]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	691b      	ldr	r3, [r3, #16]
 80090e0:	431a      	orrs	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	695b      	ldr	r3, [r3, #20]
 80090e6:	431a      	orrs	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	4bb1      	ldr	r3, [pc, #708]	; (80093bc <UART_SetConfig+0x2f4>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	6812      	ldr	r2, [r2, #0]
 80090fe:	6939      	ldr	r1, [r7, #16]
 8009100:	430b      	orrs	r3, r1
 8009102:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	430a      	orrs	r2, r1
 8009118:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	4313      	orrs	r3, r2
 8009128:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	430a      	orrs	r2, r1
 800913c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a9f      	ldr	r2, [pc, #636]	; (80093c0 <UART_SetConfig+0x2f8>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d121      	bne.n	800918c <UART_SetConfig+0xc4>
 8009148:	4b9e      	ldr	r3, [pc, #632]	; (80093c4 <UART_SetConfig+0x2fc>)
 800914a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	2b03      	cmp	r3, #3
 8009154:	d816      	bhi.n	8009184 <UART_SetConfig+0xbc>
 8009156:	a201      	add	r2, pc, #4	; (adr r2, 800915c <UART_SetConfig+0x94>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	0800916d 	.word	0x0800916d
 8009160:	08009179 	.word	0x08009179
 8009164:	08009173 	.word	0x08009173
 8009168:	0800917f 	.word	0x0800917f
 800916c:	2301      	movs	r3, #1
 800916e:	77fb      	strb	r3, [r7, #31]
 8009170:	e151      	b.n	8009416 <UART_SetConfig+0x34e>
 8009172:	2302      	movs	r3, #2
 8009174:	77fb      	strb	r3, [r7, #31]
 8009176:	e14e      	b.n	8009416 <UART_SetConfig+0x34e>
 8009178:	2304      	movs	r3, #4
 800917a:	77fb      	strb	r3, [r7, #31]
 800917c:	e14b      	b.n	8009416 <UART_SetConfig+0x34e>
 800917e:	2308      	movs	r3, #8
 8009180:	77fb      	strb	r3, [r7, #31]
 8009182:	e148      	b.n	8009416 <UART_SetConfig+0x34e>
 8009184:	2310      	movs	r3, #16
 8009186:	77fb      	strb	r3, [r7, #31]
 8009188:	bf00      	nop
 800918a:	e144      	b.n	8009416 <UART_SetConfig+0x34e>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a8d      	ldr	r2, [pc, #564]	; (80093c8 <UART_SetConfig+0x300>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d134      	bne.n	8009200 <UART_SetConfig+0x138>
 8009196:	4b8b      	ldr	r3, [pc, #556]	; (80093c4 <UART_SetConfig+0x2fc>)
 8009198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800919c:	f003 030c 	and.w	r3, r3, #12
 80091a0:	2b0c      	cmp	r3, #12
 80091a2:	d829      	bhi.n	80091f8 <UART_SetConfig+0x130>
 80091a4:	a201      	add	r2, pc, #4	; (adr r2, 80091ac <UART_SetConfig+0xe4>)
 80091a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091aa:	bf00      	nop
 80091ac:	080091e1 	.word	0x080091e1
 80091b0:	080091f9 	.word	0x080091f9
 80091b4:	080091f9 	.word	0x080091f9
 80091b8:	080091f9 	.word	0x080091f9
 80091bc:	080091ed 	.word	0x080091ed
 80091c0:	080091f9 	.word	0x080091f9
 80091c4:	080091f9 	.word	0x080091f9
 80091c8:	080091f9 	.word	0x080091f9
 80091cc:	080091e7 	.word	0x080091e7
 80091d0:	080091f9 	.word	0x080091f9
 80091d4:	080091f9 	.word	0x080091f9
 80091d8:	080091f9 	.word	0x080091f9
 80091dc:	080091f3 	.word	0x080091f3
 80091e0:	2300      	movs	r3, #0
 80091e2:	77fb      	strb	r3, [r7, #31]
 80091e4:	e117      	b.n	8009416 <UART_SetConfig+0x34e>
 80091e6:	2302      	movs	r3, #2
 80091e8:	77fb      	strb	r3, [r7, #31]
 80091ea:	e114      	b.n	8009416 <UART_SetConfig+0x34e>
 80091ec:	2304      	movs	r3, #4
 80091ee:	77fb      	strb	r3, [r7, #31]
 80091f0:	e111      	b.n	8009416 <UART_SetConfig+0x34e>
 80091f2:	2308      	movs	r3, #8
 80091f4:	77fb      	strb	r3, [r7, #31]
 80091f6:	e10e      	b.n	8009416 <UART_SetConfig+0x34e>
 80091f8:	2310      	movs	r3, #16
 80091fa:	77fb      	strb	r3, [r7, #31]
 80091fc:	bf00      	nop
 80091fe:	e10a      	b.n	8009416 <UART_SetConfig+0x34e>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a71      	ldr	r2, [pc, #452]	; (80093cc <UART_SetConfig+0x304>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d120      	bne.n	800924c <UART_SetConfig+0x184>
 800920a:	4b6e      	ldr	r3, [pc, #440]	; (80093c4 <UART_SetConfig+0x2fc>)
 800920c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009210:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009214:	2b10      	cmp	r3, #16
 8009216:	d00f      	beq.n	8009238 <UART_SetConfig+0x170>
 8009218:	2b10      	cmp	r3, #16
 800921a:	d802      	bhi.n	8009222 <UART_SetConfig+0x15a>
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <UART_SetConfig+0x164>
 8009220:	e010      	b.n	8009244 <UART_SetConfig+0x17c>
 8009222:	2b20      	cmp	r3, #32
 8009224:	d005      	beq.n	8009232 <UART_SetConfig+0x16a>
 8009226:	2b30      	cmp	r3, #48	; 0x30
 8009228:	d009      	beq.n	800923e <UART_SetConfig+0x176>
 800922a:	e00b      	b.n	8009244 <UART_SetConfig+0x17c>
 800922c:	2300      	movs	r3, #0
 800922e:	77fb      	strb	r3, [r7, #31]
 8009230:	e0f1      	b.n	8009416 <UART_SetConfig+0x34e>
 8009232:	2302      	movs	r3, #2
 8009234:	77fb      	strb	r3, [r7, #31]
 8009236:	e0ee      	b.n	8009416 <UART_SetConfig+0x34e>
 8009238:	2304      	movs	r3, #4
 800923a:	77fb      	strb	r3, [r7, #31]
 800923c:	e0eb      	b.n	8009416 <UART_SetConfig+0x34e>
 800923e:	2308      	movs	r3, #8
 8009240:	77fb      	strb	r3, [r7, #31]
 8009242:	e0e8      	b.n	8009416 <UART_SetConfig+0x34e>
 8009244:	2310      	movs	r3, #16
 8009246:	77fb      	strb	r3, [r7, #31]
 8009248:	bf00      	nop
 800924a:	e0e4      	b.n	8009416 <UART_SetConfig+0x34e>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a5f      	ldr	r2, [pc, #380]	; (80093d0 <UART_SetConfig+0x308>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d120      	bne.n	8009298 <UART_SetConfig+0x1d0>
 8009256:	4b5b      	ldr	r3, [pc, #364]	; (80093c4 <UART_SetConfig+0x2fc>)
 8009258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800925c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009260:	2b40      	cmp	r3, #64	; 0x40
 8009262:	d00f      	beq.n	8009284 <UART_SetConfig+0x1bc>
 8009264:	2b40      	cmp	r3, #64	; 0x40
 8009266:	d802      	bhi.n	800926e <UART_SetConfig+0x1a6>
 8009268:	2b00      	cmp	r3, #0
 800926a:	d005      	beq.n	8009278 <UART_SetConfig+0x1b0>
 800926c:	e010      	b.n	8009290 <UART_SetConfig+0x1c8>
 800926e:	2b80      	cmp	r3, #128	; 0x80
 8009270:	d005      	beq.n	800927e <UART_SetConfig+0x1b6>
 8009272:	2bc0      	cmp	r3, #192	; 0xc0
 8009274:	d009      	beq.n	800928a <UART_SetConfig+0x1c2>
 8009276:	e00b      	b.n	8009290 <UART_SetConfig+0x1c8>
 8009278:	2300      	movs	r3, #0
 800927a:	77fb      	strb	r3, [r7, #31]
 800927c:	e0cb      	b.n	8009416 <UART_SetConfig+0x34e>
 800927e:	2302      	movs	r3, #2
 8009280:	77fb      	strb	r3, [r7, #31]
 8009282:	e0c8      	b.n	8009416 <UART_SetConfig+0x34e>
 8009284:	2304      	movs	r3, #4
 8009286:	77fb      	strb	r3, [r7, #31]
 8009288:	e0c5      	b.n	8009416 <UART_SetConfig+0x34e>
 800928a:	2308      	movs	r3, #8
 800928c:	77fb      	strb	r3, [r7, #31]
 800928e:	e0c2      	b.n	8009416 <UART_SetConfig+0x34e>
 8009290:	2310      	movs	r3, #16
 8009292:	77fb      	strb	r3, [r7, #31]
 8009294:	bf00      	nop
 8009296:	e0be      	b.n	8009416 <UART_SetConfig+0x34e>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a4d      	ldr	r2, [pc, #308]	; (80093d4 <UART_SetConfig+0x30c>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d124      	bne.n	80092ec <UART_SetConfig+0x224>
 80092a2:	4b48      	ldr	r3, [pc, #288]	; (80093c4 <UART_SetConfig+0x2fc>)
 80092a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b0:	d012      	beq.n	80092d8 <UART_SetConfig+0x210>
 80092b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092b6:	d802      	bhi.n	80092be <UART_SetConfig+0x1f6>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d007      	beq.n	80092cc <UART_SetConfig+0x204>
 80092bc:	e012      	b.n	80092e4 <UART_SetConfig+0x21c>
 80092be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80092c2:	d006      	beq.n	80092d2 <UART_SetConfig+0x20a>
 80092c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80092c8:	d009      	beq.n	80092de <UART_SetConfig+0x216>
 80092ca:	e00b      	b.n	80092e4 <UART_SetConfig+0x21c>
 80092cc:	2300      	movs	r3, #0
 80092ce:	77fb      	strb	r3, [r7, #31]
 80092d0:	e0a1      	b.n	8009416 <UART_SetConfig+0x34e>
 80092d2:	2302      	movs	r3, #2
 80092d4:	77fb      	strb	r3, [r7, #31]
 80092d6:	e09e      	b.n	8009416 <UART_SetConfig+0x34e>
 80092d8:	2304      	movs	r3, #4
 80092da:	77fb      	strb	r3, [r7, #31]
 80092dc:	e09b      	b.n	8009416 <UART_SetConfig+0x34e>
 80092de:	2308      	movs	r3, #8
 80092e0:	77fb      	strb	r3, [r7, #31]
 80092e2:	e098      	b.n	8009416 <UART_SetConfig+0x34e>
 80092e4:	2310      	movs	r3, #16
 80092e6:	77fb      	strb	r3, [r7, #31]
 80092e8:	bf00      	nop
 80092ea:	e094      	b.n	8009416 <UART_SetConfig+0x34e>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a39      	ldr	r2, [pc, #228]	; (80093d8 <UART_SetConfig+0x310>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d124      	bne.n	8009340 <UART_SetConfig+0x278>
 80092f6:	4b33      	ldr	r3, [pc, #204]	; (80093c4 <UART_SetConfig+0x2fc>)
 80092f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009304:	d012      	beq.n	800932c <UART_SetConfig+0x264>
 8009306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800930a:	d802      	bhi.n	8009312 <UART_SetConfig+0x24a>
 800930c:	2b00      	cmp	r3, #0
 800930e:	d007      	beq.n	8009320 <UART_SetConfig+0x258>
 8009310:	e012      	b.n	8009338 <UART_SetConfig+0x270>
 8009312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009316:	d006      	beq.n	8009326 <UART_SetConfig+0x25e>
 8009318:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800931c:	d009      	beq.n	8009332 <UART_SetConfig+0x26a>
 800931e:	e00b      	b.n	8009338 <UART_SetConfig+0x270>
 8009320:	2301      	movs	r3, #1
 8009322:	77fb      	strb	r3, [r7, #31]
 8009324:	e077      	b.n	8009416 <UART_SetConfig+0x34e>
 8009326:	2302      	movs	r3, #2
 8009328:	77fb      	strb	r3, [r7, #31]
 800932a:	e074      	b.n	8009416 <UART_SetConfig+0x34e>
 800932c:	2304      	movs	r3, #4
 800932e:	77fb      	strb	r3, [r7, #31]
 8009330:	e071      	b.n	8009416 <UART_SetConfig+0x34e>
 8009332:	2308      	movs	r3, #8
 8009334:	77fb      	strb	r3, [r7, #31]
 8009336:	e06e      	b.n	8009416 <UART_SetConfig+0x34e>
 8009338:	2310      	movs	r3, #16
 800933a:	77fb      	strb	r3, [r7, #31]
 800933c:	bf00      	nop
 800933e:	e06a      	b.n	8009416 <UART_SetConfig+0x34e>
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	4a25      	ldr	r2, [pc, #148]	; (80093dc <UART_SetConfig+0x314>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d124      	bne.n	8009394 <UART_SetConfig+0x2cc>
 800934a:	4b1e      	ldr	r3, [pc, #120]	; (80093c4 <UART_SetConfig+0x2fc>)
 800934c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009350:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009358:	d012      	beq.n	8009380 <UART_SetConfig+0x2b8>
 800935a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800935e:	d802      	bhi.n	8009366 <UART_SetConfig+0x29e>
 8009360:	2b00      	cmp	r3, #0
 8009362:	d007      	beq.n	8009374 <UART_SetConfig+0x2ac>
 8009364:	e012      	b.n	800938c <UART_SetConfig+0x2c4>
 8009366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800936a:	d006      	beq.n	800937a <UART_SetConfig+0x2b2>
 800936c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009370:	d009      	beq.n	8009386 <UART_SetConfig+0x2be>
 8009372:	e00b      	b.n	800938c <UART_SetConfig+0x2c4>
 8009374:	2300      	movs	r3, #0
 8009376:	77fb      	strb	r3, [r7, #31]
 8009378:	e04d      	b.n	8009416 <UART_SetConfig+0x34e>
 800937a:	2302      	movs	r3, #2
 800937c:	77fb      	strb	r3, [r7, #31]
 800937e:	e04a      	b.n	8009416 <UART_SetConfig+0x34e>
 8009380:	2304      	movs	r3, #4
 8009382:	77fb      	strb	r3, [r7, #31]
 8009384:	e047      	b.n	8009416 <UART_SetConfig+0x34e>
 8009386:	2308      	movs	r3, #8
 8009388:	77fb      	strb	r3, [r7, #31]
 800938a:	e044      	b.n	8009416 <UART_SetConfig+0x34e>
 800938c:	2310      	movs	r3, #16
 800938e:	77fb      	strb	r3, [r7, #31]
 8009390:	bf00      	nop
 8009392:	e040      	b.n	8009416 <UART_SetConfig+0x34e>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <UART_SetConfig+0x318>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d139      	bne.n	8009412 <UART_SetConfig+0x34a>
 800939e:	4b09      	ldr	r3, [pc, #36]	; (80093c4 <UART_SetConfig+0x2fc>)
 80093a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80093a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093ac:	d027      	beq.n	80093fe <UART_SetConfig+0x336>
 80093ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80093b2:	d817      	bhi.n	80093e4 <UART_SetConfig+0x31c>
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01c      	beq.n	80093f2 <UART_SetConfig+0x32a>
 80093b8:	e027      	b.n	800940a <UART_SetConfig+0x342>
 80093ba:	bf00      	nop
 80093bc:	efff69f3 	.word	0xefff69f3
 80093c0:	40011000 	.word	0x40011000
 80093c4:	40023800 	.word	0x40023800
 80093c8:	40004400 	.word	0x40004400
 80093cc:	40004800 	.word	0x40004800
 80093d0:	40004c00 	.word	0x40004c00
 80093d4:	40005000 	.word	0x40005000
 80093d8:	40011400 	.word	0x40011400
 80093dc:	40007800 	.word	0x40007800
 80093e0:	40007c00 	.word	0x40007c00
 80093e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093e8:	d006      	beq.n	80093f8 <UART_SetConfig+0x330>
 80093ea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80093ee:	d009      	beq.n	8009404 <UART_SetConfig+0x33c>
 80093f0:	e00b      	b.n	800940a <UART_SetConfig+0x342>
 80093f2:	2300      	movs	r3, #0
 80093f4:	77fb      	strb	r3, [r7, #31]
 80093f6:	e00e      	b.n	8009416 <UART_SetConfig+0x34e>
 80093f8:	2302      	movs	r3, #2
 80093fa:	77fb      	strb	r3, [r7, #31]
 80093fc:	e00b      	b.n	8009416 <UART_SetConfig+0x34e>
 80093fe:	2304      	movs	r3, #4
 8009400:	77fb      	strb	r3, [r7, #31]
 8009402:	e008      	b.n	8009416 <UART_SetConfig+0x34e>
 8009404:	2308      	movs	r3, #8
 8009406:	77fb      	strb	r3, [r7, #31]
 8009408:	e005      	b.n	8009416 <UART_SetConfig+0x34e>
 800940a:	2310      	movs	r3, #16
 800940c:	77fb      	strb	r3, [r7, #31]
 800940e:	bf00      	nop
 8009410:	e001      	b.n	8009416 <UART_SetConfig+0x34e>
 8009412:	2310      	movs	r3, #16
 8009414:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800941e:	d17f      	bne.n	8009520 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8009420:	7ffb      	ldrb	r3, [r7, #31]
 8009422:	2b08      	cmp	r3, #8
 8009424:	d85c      	bhi.n	80094e0 <UART_SetConfig+0x418>
 8009426:	a201      	add	r2, pc, #4	; (adr r2, 800942c <UART_SetConfig+0x364>)
 8009428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800942c:	08009451 	.word	0x08009451
 8009430:	08009471 	.word	0x08009471
 8009434:	08009491 	.word	0x08009491
 8009438:	080094e1 	.word	0x080094e1
 800943c:	080094a9 	.word	0x080094a9
 8009440:	080094e1 	.word	0x080094e1
 8009444:	080094e1 	.word	0x080094e1
 8009448:	080094e1 	.word	0x080094e1
 800944c:	080094c9 	.word	0x080094c9
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009450:	f7fc fa84 	bl	800595c <HAL_RCC_GetPCLK1Freq>
 8009454:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	005a      	lsls	r2, r3, #1
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	441a      	add	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	fbb2 f3f3 	udiv	r3, r2, r3
 800946a:	b29b      	uxth	r3, r3
 800946c:	61bb      	str	r3, [r7, #24]
        break;
 800946e:	e03a      	b.n	80094e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009470:	f7fc fa88 	bl	8005984 <HAL_RCC_GetPCLK2Freq>
 8009474:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	005a      	lsls	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	085b      	lsrs	r3, r3, #1
 8009480:	441a      	add	r2, r3
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	fbb2 f3f3 	udiv	r3, r2, r3
 800948a:	b29b      	uxth	r3, r3
 800948c:	61bb      	str	r3, [r7, #24]
        break;
 800948e:	e02a      	b.n	80094e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	685b      	ldr	r3, [r3, #4]
 8009494:	085a      	lsrs	r2, r3, #1
 8009496:	4b5f      	ldr	r3, [pc, #380]	; (8009614 <UART_SetConfig+0x54c>)
 8009498:	4413      	add	r3, r2
 800949a:	687a      	ldr	r2, [r7, #4]
 800949c:	6852      	ldr	r2, [r2, #4]
 800949e:	fbb3 f3f2 	udiv	r3, r3, r2
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	61bb      	str	r3, [r7, #24]
        break;
 80094a6:	e01e      	b.n	80094e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094a8:	f7fc f99a 	bl	80057e0 <HAL_RCC_GetSysClockFreq>
 80094ac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	005a      	lsls	r2, r3, #1
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	085b      	lsrs	r3, r3, #1
 80094b8:	441a      	add	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	61bb      	str	r3, [r7, #24]
        break;
 80094c6:	e00e      	b.n	80094e6 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	085b      	lsrs	r3, r3, #1
 80094ce:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094da:	b29b      	uxth	r3, r3
 80094dc:	61bb      	str	r3, [r7, #24]
        break;
 80094de:	e002      	b.n	80094e6 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	75fb      	strb	r3, [r7, #23]
        break;
 80094e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094e6:	69bb      	ldr	r3, [r7, #24]
 80094e8:	2b0f      	cmp	r3, #15
 80094ea:	d916      	bls.n	800951a <UART_SetConfig+0x452>
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094f2:	d212      	bcs.n	800951a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	f023 030f 	bic.w	r3, r3, #15
 80094fc:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	085b      	lsrs	r3, r3, #1
 8009502:	b29b      	uxth	r3, r3
 8009504:	f003 0307 	and.w	r3, r3, #7
 8009508:	b29a      	uxth	r2, r3
 800950a:	897b      	ldrh	r3, [r7, #10]
 800950c:	4313      	orrs	r3, r2
 800950e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	897a      	ldrh	r2, [r7, #10]
 8009516:	60da      	str	r2, [r3, #12]
 8009518:	e070      	b.n	80095fc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	75fb      	strb	r3, [r7, #23]
 800951e:	e06d      	b.n	80095fc <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8009520:	7ffb      	ldrb	r3, [r7, #31]
 8009522:	2b08      	cmp	r3, #8
 8009524:	d859      	bhi.n	80095da <UART_SetConfig+0x512>
 8009526:	a201      	add	r2, pc, #4	; (adr r2, 800952c <UART_SetConfig+0x464>)
 8009528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952c:	08009551 	.word	0x08009551
 8009530:	0800956f 	.word	0x0800956f
 8009534:	0800958d 	.word	0x0800958d
 8009538:	080095db 	.word	0x080095db
 800953c:	080095a5 	.word	0x080095a5
 8009540:	080095db 	.word	0x080095db
 8009544:	080095db 	.word	0x080095db
 8009548:	080095db 	.word	0x080095db
 800954c:	080095c3 	.word	0x080095c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009550:	f7fc fa04 	bl	800595c <HAL_RCC_GetPCLK1Freq>
 8009554:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	085a      	lsrs	r2, r3, #1
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	441a      	add	r2, r3
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	fbb2 f3f3 	udiv	r3, r2, r3
 8009568:	b29b      	uxth	r3, r3
 800956a:	61bb      	str	r3, [r7, #24]
        break;
 800956c:	e038      	b.n	80095e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800956e:	f7fc fa09 	bl	8005984 <HAL_RCC_GetPCLK2Freq>
 8009572:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	085a      	lsrs	r2, r3, #1
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	441a      	add	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	fbb2 f3f3 	udiv	r3, r2, r3
 8009586:	b29b      	uxth	r3, r3
 8009588:	61bb      	str	r3, [r7, #24]
        break;
 800958a:	e029      	b.n	80095e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	085a      	lsrs	r2, r3, #1
 8009592:	4b21      	ldr	r3, [pc, #132]	; (8009618 <UART_SetConfig+0x550>)
 8009594:	4413      	add	r3, r2
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	6852      	ldr	r2, [r2, #4]
 800959a:	fbb3 f3f2 	udiv	r3, r3, r2
 800959e:	b29b      	uxth	r3, r3
 80095a0:	61bb      	str	r3, [r7, #24]
        break;
 80095a2:	e01d      	b.n	80095e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095a4:	f7fc f91c 	bl	80057e0 <HAL_RCC_GetSysClockFreq>
 80095a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	085a      	lsrs	r2, r3, #1
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	441a      	add	r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80095bc:	b29b      	uxth	r3, r3
 80095be:	61bb      	str	r3, [r7, #24]
        break;
 80095c0:	e00e      	b.n	80095e0 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	085b      	lsrs	r3, r3, #1
 80095c8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	61bb      	str	r3, [r7, #24]
        break;
 80095d8:	e002      	b.n	80095e0 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	75fb      	strb	r3, [r7, #23]
        break;
 80095de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	2b0f      	cmp	r3, #15
 80095e4:	d908      	bls.n	80095f8 <UART_SetConfig+0x530>
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095ec:	d204      	bcs.n	80095f8 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	69ba      	ldr	r2, [r7, #24]
 80095f4:	60da      	str	r2, [r3, #12]
 80095f6:	e001      	b.n	80095fc <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009608:	7dfb      	ldrb	r3, [r7, #23]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3720      	adds	r7, #32
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	01e84800 	.word	0x01e84800
 8009618:	00f42400 	.word	0x00f42400

0800961c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	f003 0301 	and.w	r3, r3, #1
 800962c:	2b00      	cmp	r3, #0
 800962e:	d00a      	beq.n	8009646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	430a      	orrs	r2, r1
 8009644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964a:	f003 0302 	and.w	r3, r3, #2
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00a      	beq.n	8009668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00a      	beq.n	800968a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	430a      	orrs	r2, r1
 8009688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	f003 0308 	and.w	r3, r3, #8
 8009692:	2b00      	cmp	r3, #0
 8009694:	d00a      	beq.n	80096ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	430a      	orrs	r2, r1
 80096aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b0:	f003 0310 	and.w	r3, r3, #16
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d00a      	beq.n	80096ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	430a      	orrs	r2, r1
 80096cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d2:	f003 0320 	and.w	r3, r3, #32
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d00a      	beq.n	80096f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	430a      	orrs	r2, r1
 80096ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d01a      	beq.n	8009732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	430a      	orrs	r2, r1
 8009710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009716:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800971a:	d10a      	bne.n	8009732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	430a      	orrs	r2, r1
 8009730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00a      	beq.n	8009754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	430a      	orrs	r2, r1
 8009752:	605a      	str	r2, [r3, #4]
  }
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af02      	add	r7, sp, #8
 8009766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2200      	movs	r2, #0
 800976c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800976e:	f7fa f855 	bl	800381c <HAL_GetTick>
 8009772:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0308 	and.w	r3, r3, #8
 800977e:	2b08      	cmp	r3, #8
 8009780:	d10e      	bne.n	80097a0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009782:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f82a 	bl	80097ea <UART_WaitOnFlagUntilTimeout>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d001      	beq.n	80097a0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e020      	b.n	80097e2 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f003 0304 	and.w	r3, r3, #4
 80097aa:	2b04      	cmp	r3, #4
 80097ac:	d10e      	bne.n	80097cc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2200      	movs	r2, #0
 80097b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f814 	bl	80097ea <UART_WaitOnFlagUntilTimeout>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e00a      	b.n	80097e2 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2220      	movs	r2, #32
 80097d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2220      	movs	r2, #32
 80097d6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	60b9      	str	r1, [r7, #8]
 80097f4:	603b      	str	r3, [r7, #0]
 80097f6:	4613      	mov	r3, r2
 80097f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097fa:	e05d      	b.n	80098b8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097fc:	69bb      	ldr	r3, [r7, #24]
 80097fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009802:	d059      	beq.n	80098b8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009804:	f7fa f80a 	bl	800381c <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	429a      	cmp	r2, r3
 8009812:	d302      	bcc.n	800981a <UART_WaitOnFlagUntilTimeout+0x30>
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d11b      	bne.n	8009852 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009828:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	689a      	ldr	r2, [r3, #8]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0201 	bic.w	r2, r2, #1
 8009838:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2220      	movs	r2, #32
 800983e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2220      	movs	r2, #32
 8009844:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800984e:	2303      	movs	r3, #3
 8009850:	e042      	b.n	80098d8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 0304 	and.w	r3, r3, #4
 800985c:	2b00      	cmp	r3, #0
 800985e:	d02b      	beq.n	80098b8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800986a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800986e:	d123      	bne.n	80098b8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009878:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	681a      	ldr	r2, [r3, #0]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009888:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	689a      	ldr	r2, [r3, #8]
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	f022 0201 	bic.w	r2, r2, #1
 8009898:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2220      	movs	r2, #32
 800989e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2220      	movs	r2, #32
 80098a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2220      	movs	r2, #32
 80098aa:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80098b4:	2303      	movs	r3, #3
 80098b6:	e00f      	b.n	80098d8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	69da      	ldr	r2, [r3, #28]
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	4013      	ands	r3, r2
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	bf0c      	ite	eq
 80098c8:	2301      	moveq	r3, #1
 80098ca:	2300      	movne	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	461a      	mov	r2, r3
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d092      	beq.n	80097fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098d6:	2300      	movs	r3, #0
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80098f6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	689a      	ldr	r2, [r3, #8]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	f022 0201 	bic.w	r2, r2, #1
 8009906:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2220      	movs	r2, #32
 800990c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2200      	movs	r2, #0
 8009912:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009914:	bf00      	nop
 8009916:	370c      	adds	r7, #12
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr

08009920 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2200      	movs	r2, #0
 800993a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800993e:	68f8      	ldr	r0, [r7, #12]
 8009940:	f7ff fbae 	bl	80090a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009944:	bf00      	nop
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b082      	sub	sp, #8
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009962:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2220      	movs	r2, #32
 8009968:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff fb8b 	bl	800908c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009976:	bf00      	nop
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800998c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009992:	2b22      	cmp	r3, #34	; 0x22
 8009994:	d13a      	bne.n	8009a0c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999c:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800999e:	89bb      	ldrh	r3, [r7, #12]
 80099a0:	b2d9      	uxtb	r1, r3
 80099a2:	89fb      	ldrh	r3, [r7, #14]
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099aa:	400a      	ands	r2, r1
 80099ac:	b2d2      	uxtb	r2, r2
 80099ae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099c0:	b29b      	uxth	r3, r3
 80099c2:	3b01      	subs	r3, #1
 80099c4:	b29a      	uxth	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d121      	bne.n	8009a1c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80099e6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	689a      	ldr	r2, [r3, #8]
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f022 0201 	bic.w	r2, r2, #1
 80099f6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2220      	movs	r2, #32
 80099fc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7f8 fc7b 	bl	8002300 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009a0a:	e007      	b.n	8009a1c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	699a      	ldr	r2, [r3, #24]
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f042 0208 	orr.w	r2, r2, #8
 8009a1a:	619a      	str	r2, [r3, #24]
}
 8009a1c:	bf00      	nop
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a32:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a38:	2b22      	cmp	r3, #34	; 0x22
 8009a3a:	d13a      	bne.n	8009ab2 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a48:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8009a4a:	89ba      	ldrh	r2, [r7, #12]
 8009a4c:	89fb      	ldrh	r3, [r7, #14]
 8009a4e:	4013      	ands	r3, r2
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a5a:	1c9a      	adds	r2, r3, #2
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d121      	bne.n	8009ac2 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009a8c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	689a      	ldr	r2, [r3, #8]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f022 0201 	bic.w	r2, r2, #1
 8009a9c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f7f8 fc28 	bl	8002300 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ab0:	e007      	b.n	8009ac2 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	699a      	ldr	r2, [r3, #24]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f042 0208 	orr.w	r2, r2, #8
 8009ac0:	619a      	str	r2, [r3, #24]
}
 8009ac2:	bf00      	nop
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <atoi>:
 8009aca:	220a      	movs	r2, #10
 8009acc:	2100      	movs	r1, #0
 8009ace:	f000 b945 	b.w	8009d5c <strtol>
	...

08009ad4 <__errno>:
 8009ad4:	4b01      	ldr	r3, [pc, #4]	; (8009adc <__errno+0x8>)
 8009ad6:	6818      	ldr	r0, [r3, #0]
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	2000000c 	.word	0x2000000c

08009ae0 <__libc_init_array>:
 8009ae0:	b570      	push	{r4, r5, r6, lr}
 8009ae2:	4e0d      	ldr	r6, [pc, #52]	; (8009b18 <__libc_init_array+0x38>)
 8009ae4:	4c0d      	ldr	r4, [pc, #52]	; (8009b1c <__libc_init_array+0x3c>)
 8009ae6:	1ba4      	subs	r4, r4, r6
 8009ae8:	10a4      	asrs	r4, r4, #2
 8009aea:	2500      	movs	r5, #0
 8009aec:	42a5      	cmp	r5, r4
 8009aee:	d109      	bne.n	8009b04 <__libc_init_array+0x24>
 8009af0:	4e0b      	ldr	r6, [pc, #44]	; (8009b20 <__libc_init_array+0x40>)
 8009af2:	4c0c      	ldr	r4, [pc, #48]	; (8009b24 <__libc_init_array+0x44>)
 8009af4:	f000 fd4e 	bl	800a594 <_init>
 8009af8:	1ba4      	subs	r4, r4, r6
 8009afa:	10a4      	asrs	r4, r4, #2
 8009afc:	2500      	movs	r5, #0
 8009afe:	42a5      	cmp	r5, r4
 8009b00:	d105      	bne.n	8009b0e <__libc_init_array+0x2e>
 8009b02:	bd70      	pop	{r4, r5, r6, pc}
 8009b04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b08:	4798      	blx	r3
 8009b0a:	3501      	adds	r5, #1
 8009b0c:	e7ee      	b.n	8009aec <__libc_init_array+0xc>
 8009b0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b12:	4798      	blx	r3
 8009b14:	3501      	adds	r5, #1
 8009b16:	e7f2      	b.n	8009afe <__libc_init_array+0x1e>
 8009b18:	0800a87c 	.word	0x0800a87c
 8009b1c:	0800a87c 	.word	0x0800a87c
 8009b20:	0800a87c 	.word	0x0800a87c
 8009b24:	0800a880 	.word	0x0800a880

08009b28 <memcpy>:
 8009b28:	b510      	push	{r4, lr}
 8009b2a:	1e43      	subs	r3, r0, #1
 8009b2c:	440a      	add	r2, r1
 8009b2e:	4291      	cmp	r1, r2
 8009b30:	d100      	bne.n	8009b34 <memcpy+0xc>
 8009b32:	bd10      	pop	{r4, pc}
 8009b34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b3c:	e7f7      	b.n	8009b2e <memcpy+0x6>

08009b3e <memset>:
 8009b3e:	4402      	add	r2, r0
 8009b40:	4603      	mov	r3, r0
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d100      	bne.n	8009b48 <memset+0xa>
 8009b46:	4770      	bx	lr
 8009b48:	f803 1b01 	strb.w	r1, [r3], #1
 8009b4c:	e7f9      	b.n	8009b42 <memset+0x4>
	...

08009b50 <siprintf>:
 8009b50:	b40e      	push	{r1, r2, r3}
 8009b52:	b500      	push	{lr}
 8009b54:	b09c      	sub	sp, #112	; 0x70
 8009b56:	ab1d      	add	r3, sp, #116	; 0x74
 8009b58:	9002      	str	r0, [sp, #8]
 8009b5a:	9006      	str	r0, [sp, #24]
 8009b5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b60:	4809      	ldr	r0, [pc, #36]	; (8009b88 <siprintf+0x38>)
 8009b62:	9107      	str	r1, [sp, #28]
 8009b64:	9104      	str	r1, [sp, #16]
 8009b66:	4909      	ldr	r1, [pc, #36]	; (8009b8c <siprintf+0x3c>)
 8009b68:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b6c:	9105      	str	r1, [sp, #20]
 8009b6e:	6800      	ldr	r0, [r0, #0]
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	a902      	add	r1, sp, #8
 8009b74:	f000 fa28 	bl	8009fc8 <_svfiprintf_r>
 8009b78:	9b02      	ldr	r3, [sp, #8]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	701a      	strb	r2, [r3, #0]
 8009b7e:	b01c      	add	sp, #112	; 0x70
 8009b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b84:	b003      	add	sp, #12
 8009b86:	4770      	bx	lr
 8009b88:	2000000c 	.word	0x2000000c
 8009b8c:	ffff0208 	.word	0xffff0208

08009b90 <strncpy>:
 8009b90:	b570      	push	{r4, r5, r6, lr}
 8009b92:	3901      	subs	r1, #1
 8009b94:	4604      	mov	r4, r0
 8009b96:	b902      	cbnz	r2, 8009b9a <strncpy+0xa>
 8009b98:	bd70      	pop	{r4, r5, r6, pc}
 8009b9a:	4623      	mov	r3, r4
 8009b9c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8009ba0:	f803 5b01 	strb.w	r5, [r3], #1
 8009ba4:	1e56      	subs	r6, r2, #1
 8009ba6:	b92d      	cbnz	r5, 8009bb4 <strncpy+0x24>
 8009ba8:	4414      	add	r4, r2
 8009baa:	42a3      	cmp	r3, r4
 8009bac:	d0f4      	beq.n	8009b98 <strncpy+0x8>
 8009bae:	f803 5b01 	strb.w	r5, [r3], #1
 8009bb2:	e7fa      	b.n	8009baa <strncpy+0x1a>
 8009bb4:	461c      	mov	r4, r3
 8009bb6:	4632      	mov	r2, r6
 8009bb8:	e7ed      	b.n	8009b96 <strncpy+0x6>
	...

08009bbc <strtok>:
 8009bbc:	4b13      	ldr	r3, [pc, #76]	; (8009c0c <strtok+0x50>)
 8009bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc2:	681d      	ldr	r5, [r3, #0]
 8009bc4:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	460f      	mov	r7, r1
 8009bca:	b9b4      	cbnz	r4, 8009bfa <strtok+0x3e>
 8009bcc:	2050      	movs	r0, #80	; 0x50
 8009bce:	f000 f8df 	bl	8009d90 <malloc>
 8009bd2:	65a8      	str	r0, [r5, #88]	; 0x58
 8009bd4:	e9c0 4400 	strd	r4, r4, [r0]
 8009bd8:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009bdc:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009be0:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009be4:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009be8:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009bec:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009bf0:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009bf4:	6184      	str	r4, [r0, #24]
 8009bf6:	7704      	strb	r4, [r0, #28]
 8009bf8:	6244      	str	r4, [r0, #36]	; 0x24
 8009bfa:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	4630      	mov	r0, r6
 8009c00:	2301      	movs	r3, #1
 8009c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c06:	f000 b803 	b.w	8009c10 <__strtok_r>
 8009c0a:	bf00      	nop
 8009c0c:	2000000c 	.word	0x2000000c

08009c10 <__strtok_r>:
 8009c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c12:	b918      	cbnz	r0, 8009c1c <__strtok_r+0xc>
 8009c14:	6810      	ldr	r0, [r2, #0]
 8009c16:	b908      	cbnz	r0, 8009c1c <__strtok_r+0xc>
 8009c18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	4604      	mov	r4, r0
 8009c1e:	460f      	mov	r7, r1
 8009c20:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009c24:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c28:	b91e      	cbnz	r6, 8009c32 <__strtok_r+0x22>
 8009c2a:	b96d      	cbnz	r5, 8009c48 <__strtok_r+0x38>
 8009c2c:	6015      	str	r5, [r2, #0]
 8009c2e:	4628      	mov	r0, r5
 8009c30:	e7f2      	b.n	8009c18 <__strtok_r+0x8>
 8009c32:	42b5      	cmp	r5, r6
 8009c34:	d1f6      	bne.n	8009c24 <__strtok_r+0x14>
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1ef      	bne.n	8009c1a <__strtok_r+0xa>
 8009c3a:	6014      	str	r4, [r2, #0]
 8009c3c:	7003      	strb	r3, [r0, #0]
 8009c3e:	e7eb      	b.n	8009c18 <__strtok_r+0x8>
 8009c40:	462b      	mov	r3, r5
 8009c42:	e00d      	b.n	8009c60 <__strtok_r+0x50>
 8009c44:	b926      	cbnz	r6, 8009c50 <__strtok_r+0x40>
 8009c46:	461c      	mov	r4, r3
 8009c48:	4623      	mov	r3, r4
 8009c4a:	460f      	mov	r7, r1
 8009c4c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8009c50:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009c54:	42b5      	cmp	r5, r6
 8009c56:	d1f5      	bne.n	8009c44 <__strtok_r+0x34>
 8009c58:	2d00      	cmp	r5, #0
 8009c5a:	d0f1      	beq.n	8009c40 <__strtok_r+0x30>
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	7021      	strb	r1, [r4, #0]
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	e7d9      	b.n	8009c18 <__strtok_r+0x8>

08009c64 <_strtol_l.isra.0>:
 8009c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c68:	4680      	mov	r8, r0
 8009c6a:	4689      	mov	r9, r1
 8009c6c:	4692      	mov	sl, r2
 8009c6e:	461e      	mov	r6, r3
 8009c70:	460f      	mov	r7, r1
 8009c72:	463d      	mov	r5, r7
 8009c74:	9808      	ldr	r0, [sp, #32]
 8009c76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c7a:	f000 f885 	bl	8009d88 <__locale_ctype_ptr_l>
 8009c7e:	4420      	add	r0, r4
 8009c80:	7843      	ldrb	r3, [r0, #1]
 8009c82:	f013 0308 	ands.w	r3, r3, #8
 8009c86:	d132      	bne.n	8009cee <_strtol_l.isra.0+0x8a>
 8009c88:	2c2d      	cmp	r4, #45	; 0x2d
 8009c8a:	d132      	bne.n	8009cf2 <_strtol_l.isra.0+0x8e>
 8009c8c:	787c      	ldrb	r4, [r7, #1]
 8009c8e:	1cbd      	adds	r5, r7, #2
 8009c90:	2201      	movs	r2, #1
 8009c92:	2e00      	cmp	r6, #0
 8009c94:	d05d      	beq.n	8009d52 <_strtol_l.isra.0+0xee>
 8009c96:	2e10      	cmp	r6, #16
 8009c98:	d109      	bne.n	8009cae <_strtol_l.isra.0+0x4a>
 8009c9a:	2c30      	cmp	r4, #48	; 0x30
 8009c9c:	d107      	bne.n	8009cae <_strtol_l.isra.0+0x4a>
 8009c9e:	782b      	ldrb	r3, [r5, #0]
 8009ca0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ca4:	2b58      	cmp	r3, #88	; 0x58
 8009ca6:	d14f      	bne.n	8009d48 <_strtol_l.isra.0+0xe4>
 8009ca8:	786c      	ldrb	r4, [r5, #1]
 8009caa:	2610      	movs	r6, #16
 8009cac:	3502      	adds	r5, #2
 8009cae:	2a00      	cmp	r2, #0
 8009cb0:	bf14      	ite	ne
 8009cb2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009cb6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009cba:	2700      	movs	r7, #0
 8009cbc:	fbb1 fcf6 	udiv	ip, r1, r6
 8009cc0:	4638      	mov	r0, r7
 8009cc2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009cc6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009cca:	2b09      	cmp	r3, #9
 8009ccc:	d817      	bhi.n	8009cfe <_strtol_l.isra.0+0x9a>
 8009cce:	461c      	mov	r4, r3
 8009cd0:	42a6      	cmp	r6, r4
 8009cd2:	dd23      	ble.n	8009d1c <_strtol_l.isra.0+0xb8>
 8009cd4:	1c7b      	adds	r3, r7, #1
 8009cd6:	d007      	beq.n	8009ce8 <_strtol_l.isra.0+0x84>
 8009cd8:	4584      	cmp	ip, r0
 8009cda:	d31c      	bcc.n	8009d16 <_strtol_l.isra.0+0xb2>
 8009cdc:	d101      	bne.n	8009ce2 <_strtol_l.isra.0+0x7e>
 8009cde:	45a6      	cmp	lr, r4
 8009ce0:	db19      	blt.n	8009d16 <_strtol_l.isra.0+0xb2>
 8009ce2:	fb00 4006 	mla	r0, r0, r6, r4
 8009ce6:	2701      	movs	r7, #1
 8009ce8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009cec:	e7eb      	b.n	8009cc6 <_strtol_l.isra.0+0x62>
 8009cee:	462f      	mov	r7, r5
 8009cf0:	e7bf      	b.n	8009c72 <_strtol_l.isra.0+0xe>
 8009cf2:	2c2b      	cmp	r4, #43	; 0x2b
 8009cf4:	bf04      	itt	eq
 8009cf6:	1cbd      	addeq	r5, r7, #2
 8009cf8:	787c      	ldrbeq	r4, [r7, #1]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	e7c9      	b.n	8009c92 <_strtol_l.isra.0+0x2e>
 8009cfe:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009d02:	2b19      	cmp	r3, #25
 8009d04:	d801      	bhi.n	8009d0a <_strtol_l.isra.0+0xa6>
 8009d06:	3c37      	subs	r4, #55	; 0x37
 8009d08:	e7e2      	b.n	8009cd0 <_strtol_l.isra.0+0x6c>
 8009d0a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009d0e:	2b19      	cmp	r3, #25
 8009d10:	d804      	bhi.n	8009d1c <_strtol_l.isra.0+0xb8>
 8009d12:	3c57      	subs	r4, #87	; 0x57
 8009d14:	e7dc      	b.n	8009cd0 <_strtol_l.isra.0+0x6c>
 8009d16:	f04f 37ff 	mov.w	r7, #4294967295
 8009d1a:	e7e5      	b.n	8009ce8 <_strtol_l.isra.0+0x84>
 8009d1c:	1c7b      	adds	r3, r7, #1
 8009d1e:	d108      	bne.n	8009d32 <_strtol_l.isra.0+0xce>
 8009d20:	2322      	movs	r3, #34	; 0x22
 8009d22:	f8c8 3000 	str.w	r3, [r8]
 8009d26:	4608      	mov	r0, r1
 8009d28:	f1ba 0f00 	cmp.w	sl, #0
 8009d2c:	d107      	bne.n	8009d3e <_strtol_l.isra.0+0xda>
 8009d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d32:	b102      	cbz	r2, 8009d36 <_strtol_l.isra.0+0xd2>
 8009d34:	4240      	negs	r0, r0
 8009d36:	f1ba 0f00 	cmp.w	sl, #0
 8009d3a:	d0f8      	beq.n	8009d2e <_strtol_l.isra.0+0xca>
 8009d3c:	b10f      	cbz	r7, 8009d42 <_strtol_l.isra.0+0xde>
 8009d3e:	f105 39ff 	add.w	r9, r5, #4294967295
 8009d42:	f8ca 9000 	str.w	r9, [sl]
 8009d46:	e7f2      	b.n	8009d2e <_strtol_l.isra.0+0xca>
 8009d48:	2430      	movs	r4, #48	; 0x30
 8009d4a:	2e00      	cmp	r6, #0
 8009d4c:	d1af      	bne.n	8009cae <_strtol_l.isra.0+0x4a>
 8009d4e:	2608      	movs	r6, #8
 8009d50:	e7ad      	b.n	8009cae <_strtol_l.isra.0+0x4a>
 8009d52:	2c30      	cmp	r4, #48	; 0x30
 8009d54:	d0a3      	beq.n	8009c9e <_strtol_l.isra.0+0x3a>
 8009d56:	260a      	movs	r6, #10
 8009d58:	e7a9      	b.n	8009cae <_strtol_l.isra.0+0x4a>
	...

08009d5c <strtol>:
 8009d5c:	4b08      	ldr	r3, [pc, #32]	; (8009d80 <strtol+0x24>)
 8009d5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d60:	681c      	ldr	r4, [r3, #0]
 8009d62:	4d08      	ldr	r5, [pc, #32]	; (8009d84 <strtol+0x28>)
 8009d64:	6a23      	ldr	r3, [r4, #32]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	bf08      	it	eq
 8009d6a:	462b      	moveq	r3, r5
 8009d6c:	9300      	str	r3, [sp, #0]
 8009d6e:	4613      	mov	r3, r2
 8009d70:	460a      	mov	r2, r1
 8009d72:	4601      	mov	r1, r0
 8009d74:	4620      	mov	r0, r4
 8009d76:	f7ff ff75 	bl	8009c64 <_strtol_l.isra.0>
 8009d7a:	b003      	add	sp, #12
 8009d7c:	bd30      	pop	{r4, r5, pc}
 8009d7e:	bf00      	nop
 8009d80:	2000000c 	.word	0x2000000c
 8009d84:	20000070 	.word	0x20000070

08009d88 <__locale_ctype_ptr_l>:
 8009d88:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009d8c:	4770      	bx	lr
	...

08009d90 <malloc>:
 8009d90:	4b02      	ldr	r3, [pc, #8]	; (8009d9c <malloc+0xc>)
 8009d92:	4601      	mov	r1, r0
 8009d94:	6818      	ldr	r0, [r3, #0]
 8009d96:	f000 b863 	b.w	8009e60 <_malloc_r>
 8009d9a:	bf00      	nop
 8009d9c:	2000000c 	.word	0x2000000c

08009da0 <__ascii_mbtowc>:
 8009da0:	b082      	sub	sp, #8
 8009da2:	b901      	cbnz	r1, 8009da6 <__ascii_mbtowc+0x6>
 8009da4:	a901      	add	r1, sp, #4
 8009da6:	b142      	cbz	r2, 8009dba <__ascii_mbtowc+0x1a>
 8009da8:	b14b      	cbz	r3, 8009dbe <__ascii_mbtowc+0x1e>
 8009daa:	7813      	ldrb	r3, [r2, #0]
 8009dac:	600b      	str	r3, [r1, #0]
 8009dae:	7812      	ldrb	r2, [r2, #0]
 8009db0:	1c10      	adds	r0, r2, #0
 8009db2:	bf18      	it	ne
 8009db4:	2001      	movne	r0, #1
 8009db6:	b002      	add	sp, #8
 8009db8:	4770      	bx	lr
 8009dba:	4610      	mov	r0, r2
 8009dbc:	e7fb      	b.n	8009db6 <__ascii_mbtowc+0x16>
 8009dbe:	f06f 0001 	mvn.w	r0, #1
 8009dc2:	e7f8      	b.n	8009db6 <__ascii_mbtowc+0x16>

08009dc4 <_free_r>:
 8009dc4:	b538      	push	{r3, r4, r5, lr}
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	2900      	cmp	r1, #0
 8009dca:	d045      	beq.n	8009e58 <_free_r+0x94>
 8009dcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dd0:	1f0c      	subs	r4, r1, #4
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	bfb8      	it	lt
 8009dd6:	18e4      	addlt	r4, r4, r3
 8009dd8:	f000 fbac 	bl	800a534 <__malloc_lock>
 8009ddc:	4a1f      	ldr	r2, [pc, #124]	; (8009e5c <_free_r+0x98>)
 8009dde:	6813      	ldr	r3, [r2, #0]
 8009de0:	4610      	mov	r0, r2
 8009de2:	b933      	cbnz	r3, 8009df2 <_free_r+0x2e>
 8009de4:	6063      	str	r3, [r4, #4]
 8009de6:	6014      	str	r4, [r2, #0]
 8009de8:	4628      	mov	r0, r5
 8009dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dee:	f000 bba2 	b.w	800a536 <__malloc_unlock>
 8009df2:	42a3      	cmp	r3, r4
 8009df4:	d90c      	bls.n	8009e10 <_free_r+0x4c>
 8009df6:	6821      	ldr	r1, [r4, #0]
 8009df8:	1862      	adds	r2, r4, r1
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	bf04      	itt	eq
 8009dfe:	681a      	ldreq	r2, [r3, #0]
 8009e00:	685b      	ldreq	r3, [r3, #4]
 8009e02:	6063      	str	r3, [r4, #4]
 8009e04:	bf04      	itt	eq
 8009e06:	1852      	addeq	r2, r2, r1
 8009e08:	6022      	streq	r2, [r4, #0]
 8009e0a:	6004      	str	r4, [r0, #0]
 8009e0c:	e7ec      	b.n	8009de8 <_free_r+0x24>
 8009e0e:	4613      	mov	r3, r2
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	b10a      	cbz	r2, 8009e18 <_free_r+0x54>
 8009e14:	42a2      	cmp	r2, r4
 8009e16:	d9fa      	bls.n	8009e0e <_free_r+0x4a>
 8009e18:	6819      	ldr	r1, [r3, #0]
 8009e1a:	1858      	adds	r0, r3, r1
 8009e1c:	42a0      	cmp	r0, r4
 8009e1e:	d10b      	bne.n	8009e38 <_free_r+0x74>
 8009e20:	6820      	ldr	r0, [r4, #0]
 8009e22:	4401      	add	r1, r0
 8009e24:	1858      	adds	r0, r3, r1
 8009e26:	4282      	cmp	r2, r0
 8009e28:	6019      	str	r1, [r3, #0]
 8009e2a:	d1dd      	bne.n	8009de8 <_free_r+0x24>
 8009e2c:	6810      	ldr	r0, [r2, #0]
 8009e2e:	6852      	ldr	r2, [r2, #4]
 8009e30:	605a      	str	r2, [r3, #4]
 8009e32:	4401      	add	r1, r0
 8009e34:	6019      	str	r1, [r3, #0]
 8009e36:	e7d7      	b.n	8009de8 <_free_r+0x24>
 8009e38:	d902      	bls.n	8009e40 <_free_r+0x7c>
 8009e3a:	230c      	movs	r3, #12
 8009e3c:	602b      	str	r3, [r5, #0]
 8009e3e:	e7d3      	b.n	8009de8 <_free_r+0x24>
 8009e40:	6820      	ldr	r0, [r4, #0]
 8009e42:	1821      	adds	r1, r4, r0
 8009e44:	428a      	cmp	r2, r1
 8009e46:	bf04      	itt	eq
 8009e48:	6811      	ldreq	r1, [r2, #0]
 8009e4a:	6852      	ldreq	r2, [r2, #4]
 8009e4c:	6062      	str	r2, [r4, #4]
 8009e4e:	bf04      	itt	eq
 8009e50:	1809      	addeq	r1, r1, r0
 8009e52:	6021      	streq	r1, [r4, #0]
 8009e54:	605c      	str	r4, [r3, #4]
 8009e56:	e7c7      	b.n	8009de8 <_free_r+0x24>
 8009e58:	bd38      	pop	{r3, r4, r5, pc}
 8009e5a:	bf00      	nop
 8009e5c:	20000200 	.word	0x20000200

08009e60 <_malloc_r>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	1ccd      	adds	r5, r1, #3
 8009e64:	f025 0503 	bic.w	r5, r5, #3
 8009e68:	3508      	adds	r5, #8
 8009e6a:	2d0c      	cmp	r5, #12
 8009e6c:	bf38      	it	cc
 8009e6e:	250c      	movcc	r5, #12
 8009e70:	2d00      	cmp	r5, #0
 8009e72:	4606      	mov	r6, r0
 8009e74:	db01      	blt.n	8009e7a <_malloc_r+0x1a>
 8009e76:	42a9      	cmp	r1, r5
 8009e78:	d903      	bls.n	8009e82 <_malloc_r+0x22>
 8009e7a:	230c      	movs	r3, #12
 8009e7c:	6033      	str	r3, [r6, #0]
 8009e7e:	2000      	movs	r0, #0
 8009e80:	bd70      	pop	{r4, r5, r6, pc}
 8009e82:	f000 fb57 	bl	800a534 <__malloc_lock>
 8009e86:	4a21      	ldr	r2, [pc, #132]	; (8009f0c <_malloc_r+0xac>)
 8009e88:	6814      	ldr	r4, [r2, #0]
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	b991      	cbnz	r1, 8009eb4 <_malloc_r+0x54>
 8009e8e:	4c20      	ldr	r4, [pc, #128]	; (8009f10 <_malloc_r+0xb0>)
 8009e90:	6823      	ldr	r3, [r4, #0]
 8009e92:	b91b      	cbnz	r3, 8009e9c <_malloc_r+0x3c>
 8009e94:	4630      	mov	r0, r6
 8009e96:	f000 fb17 	bl	800a4c8 <_sbrk_r>
 8009e9a:	6020      	str	r0, [r4, #0]
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	4630      	mov	r0, r6
 8009ea0:	f000 fb12 	bl	800a4c8 <_sbrk_r>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	d124      	bne.n	8009ef2 <_malloc_r+0x92>
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	6033      	str	r3, [r6, #0]
 8009eac:	4630      	mov	r0, r6
 8009eae:	f000 fb42 	bl	800a536 <__malloc_unlock>
 8009eb2:	e7e4      	b.n	8009e7e <_malloc_r+0x1e>
 8009eb4:	680b      	ldr	r3, [r1, #0]
 8009eb6:	1b5b      	subs	r3, r3, r5
 8009eb8:	d418      	bmi.n	8009eec <_malloc_r+0x8c>
 8009eba:	2b0b      	cmp	r3, #11
 8009ebc:	d90f      	bls.n	8009ede <_malloc_r+0x7e>
 8009ebe:	600b      	str	r3, [r1, #0]
 8009ec0:	50cd      	str	r5, [r1, r3]
 8009ec2:	18cc      	adds	r4, r1, r3
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f000 fb36 	bl	800a536 <__malloc_unlock>
 8009eca:	f104 000b 	add.w	r0, r4, #11
 8009ece:	1d23      	adds	r3, r4, #4
 8009ed0:	f020 0007 	bic.w	r0, r0, #7
 8009ed4:	1ac3      	subs	r3, r0, r3
 8009ed6:	d0d3      	beq.n	8009e80 <_malloc_r+0x20>
 8009ed8:	425a      	negs	r2, r3
 8009eda:	50e2      	str	r2, [r4, r3]
 8009edc:	e7d0      	b.n	8009e80 <_malloc_r+0x20>
 8009ede:	428c      	cmp	r4, r1
 8009ee0:	684b      	ldr	r3, [r1, #4]
 8009ee2:	bf16      	itet	ne
 8009ee4:	6063      	strne	r3, [r4, #4]
 8009ee6:	6013      	streq	r3, [r2, #0]
 8009ee8:	460c      	movne	r4, r1
 8009eea:	e7eb      	b.n	8009ec4 <_malloc_r+0x64>
 8009eec:	460c      	mov	r4, r1
 8009eee:	6849      	ldr	r1, [r1, #4]
 8009ef0:	e7cc      	b.n	8009e8c <_malloc_r+0x2c>
 8009ef2:	1cc4      	adds	r4, r0, #3
 8009ef4:	f024 0403 	bic.w	r4, r4, #3
 8009ef8:	42a0      	cmp	r0, r4
 8009efa:	d005      	beq.n	8009f08 <_malloc_r+0xa8>
 8009efc:	1a21      	subs	r1, r4, r0
 8009efe:	4630      	mov	r0, r6
 8009f00:	f000 fae2 	bl	800a4c8 <_sbrk_r>
 8009f04:	3001      	adds	r0, #1
 8009f06:	d0cf      	beq.n	8009ea8 <_malloc_r+0x48>
 8009f08:	6025      	str	r5, [r4, #0]
 8009f0a:	e7db      	b.n	8009ec4 <_malloc_r+0x64>
 8009f0c:	20000200 	.word	0x20000200
 8009f10:	20000204 	.word	0x20000204

08009f14 <__ssputs_r>:
 8009f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f18:	688e      	ldr	r6, [r1, #8]
 8009f1a:	429e      	cmp	r6, r3
 8009f1c:	4682      	mov	sl, r0
 8009f1e:	460c      	mov	r4, r1
 8009f20:	4690      	mov	r8, r2
 8009f22:	4699      	mov	r9, r3
 8009f24:	d837      	bhi.n	8009f96 <__ssputs_r+0x82>
 8009f26:	898a      	ldrh	r2, [r1, #12]
 8009f28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009f2c:	d031      	beq.n	8009f92 <__ssputs_r+0x7e>
 8009f2e:	6825      	ldr	r5, [r4, #0]
 8009f30:	6909      	ldr	r1, [r1, #16]
 8009f32:	1a6f      	subs	r7, r5, r1
 8009f34:	6965      	ldr	r5, [r4, #20]
 8009f36:	2302      	movs	r3, #2
 8009f38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f3c:	fb95 f5f3 	sdiv	r5, r5, r3
 8009f40:	f109 0301 	add.w	r3, r9, #1
 8009f44:	443b      	add	r3, r7
 8009f46:	429d      	cmp	r5, r3
 8009f48:	bf38      	it	cc
 8009f4a:	461d      	movcc	r5, r3
 8009f4c:	0553      	lsls	r3, r2, #21
 8009f4e:	d530      	bpl.n	8009fb2 <__ssputs_r+0x9e>
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7ff ff85 	bl	8009e60 <_malloc_r>
 8009f56:	4606      	mov	r6, r0
 8009f58:	b950      	cbnz	r0, 8009f70 <__ssputs_r+0x5c>
 8009f5a:	230c      	movs	r3, #12
 8009f5c:	f8ca 3000 	str.w	r3, [sl]
 8009f60:	89a3      	ldrh	r3, [r4, #12]
 8009f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f66:	81a3      	strh	r3, [r4, #12]
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f70:	463a      	mov	r2, r7
 8009f72:	6921      	ldr	r1, [r4, #16]
 8009f74:	f7ff fdd8 	bl	8009b28 <memcpy>
 8009f78:	89a3      	ldrh	r3, [r4, #12]
 8009f7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f82:	81a3      	strh	r3, [r4, #12]
 8009f84:	6126      	str	r6, [r4, #16]
 8009f86:	6165      	str	r5, [r4, #20]
 8009f88:	443e      	add	r6, r7
 8009f8a:	1bed      	subs	r5, r5, r7
 8009f8c:	6026      	str	r6, [r4, #0]
 8009f8e:	60a5      	str	r5, [r4, #8]
 8009f90:	464e      	mov	r6, r9
 8009f92:	454e      	cmp	r6, r9
 8009f94:	d900      	bls.n	8009f98 <__ssputs_r+0x84>
 8009f96:	464e      	mov	r6, r9
 8009f98:	4632      	mov	r2, r6
 8009f9a:	4641      	mov	r1, r8
 8009f9c:	6820      	ldr	r0, [r4, #0]
 8009f9e:	f000 fab0 	bl	800a502 <memmove>
 8009fa2:	68a3      	ldr	r3, [r4, #8]
 8009fa4:	1b9b      	subs	r3, r3, r6
 8009fa6:	60a3      	str	r3, [r4, #8]
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	441e      	add	r6, r3
 8009fac:	6026      	str	r6, [r4, #0]
 8009fae:	2000      	movs	r0, #0
 8009fb0:	e7dc      	b.n	8009f6c <__ssputs_r+0x58>
 8009fb2:	462a      	mov	r2, r5
 8009fb4:	f000 fac0 	bl	800a538 <_realloc_r>
 8009fb8:	4606      	mov	r6, r0
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d1e2      	bne.n	8009f84 <__ssputs_r+0x70>
 8009fbe:	6921      	ldr	r1, [r4, #16]
 8009fc0:	4650      	mov	r0, sl
 8009fc2:	f7ff feff 	bl	8009dc4 <_free_r>
 8009fc6:	e7c8      	b.n	8009f5a <__ssputs_r+0x46>

08009fc8 <_svfiprintf_r>:
 8009fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fcc:	461d      	mov	r5, r3
 8009fce:	898b      	ldrh	r3, [r1, #12]
 8009fd0:	061f      	lsls	r7, r3, #24
 8009fd2:	b09d      	sub	sp, #116	; 0x74
 8009fd4:	4680      	mov	r8, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	4616      	mov	r6, r2
 8009fda:	d50f      	bpl.n	8009ffc <_svfiprintf_r+0x34>
 8009fdc:	690b      	ldr	r3, [r1, #16]
 8009fde:	b96b      	cbnz	r3, 8009ffc <_svfiprintf_r+0x34>
 8009fe0:	2140      	movs	r1, #64	; 0x40
 8009fe2:	f7ff ff3d 	bl	8009e60 <_malloc_r>
 8009fe6:	6020      	str	r0, [r4, #0]
 8009fe8:	6120      	str	r0, [r4, #16]
 8009fea:	b928      	cbnz	r0, 8009ff8 <_svfiprintf_r+0x30>
 8009fec:	230c      	movs	r3, #12
 8009fee:	f8c8 3000 	str.w	r3, [r8]
 8009ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ff6:	e0c8      	b.n	800a18a <_svfiprintf_r+0x1c2>
 8009ff8:	2340      	movs	r3, #64	; 0x40
 8009ffa:	6163      	str	r3, [r4, #20]
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	9309      	str	r3, [sp, #36]	; 0x24
 800a000:	2320      	movs	r3, #32
 800a002:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a006:	2330      	movs	r3, #48	; 0x30
 800a008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a00c:	9503      	str	r5, [sp, #12]
 800a00e:	f04f 0b01 	mov.w	fp, #1
 800a012:	4637      	mov	r7, r6
 800a014:	463d      	mov	r5, r7
 800a016:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a01a:	b10b      	cbz	r3, 800a020 <_svfiprintf_r+0x58>
 800a01c:	2b25      	cmp	r3, #37	; 0x25
 800a01e:	d13e      	bne.n	800a09e <_svfiprintf_r+0xd6>
 800a020:	ebb7 0a06 	subs.w	sl, r7, r6
 800a024:	d00b      	beq.n	800a03e <_svfiprintf_r+0x76>
 800a026:	4653      	mov	r3, sl
 800a028:	4632      	mov	r2, r6
 800a02a:	4621      	mov	r1, r4
 800a02c:	4640      	mov	r0, r8
 800a02e:	f7ff ff71 	bl	8009f14 <__ssputs_r>
 800a032:	3001      	adds	r0, #1
 800a034:	f000 80a4 	beq.w	800a180 <_svfiprintf_r+0x1b8>
 800a038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a03a:	4453      	add	r3, sl
 800a03c:	9309      	str	r3, [sp, #36]	; 0x24
 800a03e:	783b      	ldrb	r3, [r7, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	f000 809d 	beq.w	800a180 <_svfiprintf_r+0x1b8>
 800a046:	2300      	movs	r3, #0
 800a048:	f04f 32ff 	mov.w	r2, #4294967295
 800a04c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a050:	9304      	str	r3, [sp, #16]
 800a052:	9307      	str	r3, [sp, #28]
 800a054:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a058:	931a      	str	r3, [sp, #104]	; 0x68
 800a05a:	462f      	mov	r7, r5
 800a05c:	2205      	movs	r2, #5
 800a05e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a062:	4850      	ldr	r0, [pc, #320]	; (800a1a4 <_svfiprintf_r+0x1dc>)
 800a064:	f7f6 f904 	bl	8000270 <memchr>
 800a068:	9b04      	ldr	r3, [sp, #16]
 800a06a:	b9d0      	cbnz	r0, 800a0a2 <_svfiprintf_r+0xda>
 800a06c:	06d9      	lsls	r1, r3, #27
 800a06e:	bf44      	itt	mi
 800a070:	2220      	movmi	r2, #32
 800a072:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a076:	071a      	lsls	r2, r3, #28
 800a078:	bf44      	itt	mi
 800a07a:	222b      	movmi	r2, #43	; 0x2b
 800a07c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a080:	782a      	ldrb	r2, [r5, #0]
 800a082:	2a2a      	cmp	r2, #42	; 0x2a
 800a084:	d015      	beq.n	800a0b2 <_svfiprintf_r+0xea>
 800a086:	9a07      	ldr	r2, [sp, #28]
 800a088:	462f      	mov	r7, r5
 800a08a:	2000      	movs	r0, #0
 800a08c:	250a      	movs	r5, #10
 800a08e:	4639      	mov	r1, r7
 800a090:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a094:	3b30      	subs	r3, #48	; 0x30
 800a096:	2b09      	cmp	r3, #9
 800a098:	d94d      	bls.n	800a136 <_svfiprintf_r+0x16e>
 800a09a:	b1b8      	cbz	r0, 800a0cc <_svfiprintf_r+0x104>
 800a09c:	e00f      	b.n	800a0be <_svfiprintf_r+0xf6>
 800a09e:	462f      	mov	r7, r5
 800a0a0:	e7b8      	b.n	800a014 <_svfiprintf_r+0x4c>
 800a0a2:	4a40      	ldr	r2, [pc, #256]	; (800a1a4 <_svfiprintf_r+0x1dc>)
 800a0a4:	1a80      	subs	r0, r0, r2
 800a0a6:	fa0b f000 	lsl.w	r0, fp, r0
 800a0aa:	4318      	orrs	r0, r3
 800a0ac:	9004      	str	r0, [sp, #16]
 800a0ae:	463d      	mov	r5, r7
 800a0b0:	e7d3      	b.n	800a05a <_svfiprintf_r+0x92>
 800a0b2:	9a03      	ldr	r2, [sp, #12]
 800a0b4:	1d11      	adds	r1, r2, #4
 800a0b6:	6812      	ldr	r2, [r2, #0]
 800a0b8:	9103      	str	r1, [sp, #12]
 800a0ba:	2a00      	cmp	r2, #0
 800a0bc:	db01      	blt.n	800a0c2 <_svfiprintf_r+0xfa>
 800a0be:	9207      	str	r2, [sp, #28]
 800a0c0:	e004      	b.n	800a0cc <_svfiprintf_r+0x104>
 800a0c2:	4252      	negs	r2, r2
 800a0c4:	f043 0302 	orr.w	r3, r3, #2
 800a0c8:	9207      	str	r2, [sp, #28]
 800a0ca:	9304      	str	r3, [sp, #16]
 800a0cc:	783b      	ldrb	r3, [r7, #0]
 800a0ce:	2b2e      	cmp	r3, #46	; 0x2e
 800a0d0:	d10c      	bne.n	800a0ec <_svfiprintf_r+0x124>
 800a0d2:	787b      	ldrb	r3, [r7, #1]
 800a0d4:	2b2a      	cmp	r3, #42	; 0x2a
 800a0d6:	d133      	bne.n	800a140 <_svfiprintf_r+0x178>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	1d1a      	adds	r2, r3, #4
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	9203      	str	r2, [sp, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	bfb8      	it	lt
 800a0e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a0e8:	3702      	adds	r7, #2
 800a0ea:	9305      	str	r3, [sp, #20]
 800a0ec:	4d2e      	ldr	r5, [pc, #184]	; (800a1a8 <_svfiprintf_r+0x1e0>)
 800a0ee:	7839      	ldrb	r1, [r7, #0]
 800a0f0:	2203      	movs	r2, #3
 800a0f2:	4628      	mov	r0, r5
 800a0f4:	f7f6 f8bc 	bl	8000270 <memchr>
 800a0f8:	b138      	cbz	r0, 800a10a <_svfiprintf_r+0x142>
 800a0fa:	2340      	movs	r3, #64	; 0x40
 800a0fc:	1b40      	subs	r0, r0, r5
 800a0fe:	fa03 f000 	lsl.w	r0, r3, r0
 800a102:	9b04      	ldr	r3, [sp, #16]
 800a104:	4303      	orrs	r3, r0
 800a106:	3701      	adds	r7, #1
 800a108:	9304      	str	r3, [sp, #16]
 800a10a:	7839      	ldrb	r1, [r7, #0]
 800a10c:	4827      	ldr	r0, [pc, #156]	; (800a1ac <_svfiprintf_r+0x1e4>)
 800a10e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a112:	2206      	movs	r2, #6
 800a114:	1c7e      	adds	r6, r7, #1
 800a116:	f7f6 f8ab 	bl	8000270 <memchr>
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d038      	beq.n	800a190 <_svfiprintf_r+0x1c8>
 800a11e:	4b24      	ldr	r3, [pc, #144]	; (800a1b0 <_svfiprintf_r+0x1e8>)
 800a120:	bb13      	cbnz	r3, 800a168 <_svfiprintf_r+0x1a0>
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	3307      	adds	r3, #7
 800a126:	f023 0307 	bic.w	r3, r3, #7
 800a12a:	3308      	adds	r3, #8
 800a12c:	9303      	str	r3, [sp, #12]
 800a12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a130:	444b      	add	r3, r9
 800a132:	9309      	str	r3, [sp, #36]	; 0x24
 800a134:	e76d      	b.n	800a012 <_svfiprintf_r+0x4a>
 800a136:	fb05 3202 	mla	r2, r5, r2, r3
 800a13a:	2001      	movs	r0, #1
 800a13c:	460f      	mov	r7, r1
 800a13e:	e7a6      	b.n	800a08e <_svfiprintf_r+0xc6>
 800a140:	2300      	movs	r3, #0
 800a142:	3701      	adds	r7, #1
 800a144:	9305      	str	r3, [sp, #20]
 800a146:	4619      	mov	r1, r3
 800a148:	250a      	movs	r5, #10
 800a14a:	4638      	mov	r0, r7
 800a14c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a150:	3a30      	subs	r2, #48	; 0x30
 800a152:	2a09      	cmp	r2, #9
 800a154:	d903      	bls.n	800a15e <_svfiprintf_r+0x196>
 800a156:	2b00      	cmp	r3, #0
 800a158:	d0c8      	beq.n	800a0ec <_svfiprintf_r+0x124>
 800a15a:	9105      	str	r1, [sp, #20]
 800a15c:	e7c6      	b.n	800a0ec <_svfiprintf_r+0x124>
 800a15e:	fb05 2101 	mla	r1, r5, r1, r2
 800a162:	2301      	movs	r3, #1
 800a164:	4607      	mov	r7, r0
 800a166:	e7f0      	b.n	800a14a <_svfiprintf_r+0x182>
 800a168:	ab03      	add	r3, sp, #12
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	4622      	mov	r2, r4
 800a16e:	4b11      	ldr	r3, [pc, #68]	; (800a1b4 <_svfiprintf_r+0x1ec>)
 800a170:	a904      	add	r1, sp, #16
 800a172:	4640      	mov	r0, r8
 800a174:	f3af 8000 	nop.w
 800a178:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a17c:	4681      	mov	r9, r0
 800a17e:	d1d6      	bne.n	800a12e <_svfiprintf_r+0x166>
 800a180:	89a3      	ldrh	r3, [r4, #12]
 800a182:	065b      	lsls	r3, r3, #25
 800a184:	f53f af35 	bmi.w	8009ff2 <_svfiprintf_r+0x2a>
 800a188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a18a:	b01d      	add	sp, #116	; 0x74
 800a18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a190:	ab03      	add	r3, sp, #12
 800a192:	9300      	str	r3, [sp, #0]
 800a194:	4622      	mov	r2, r4
 800a196:	4b07      	ldr	r3, [pc, #28]	; (800a1b4 <_svfiprintf_r+0x1ec>)
 800a198:	a904      	add	r1, sp, #16
 800a19a:	4640      	mov	r0, r8
 800a19c:	f000 f882 	bl	800a2a4 <_printf_i>
 800a1a0:	e7ea      	b.n	800a178 <_svfiprintf_r+0x1b0>
 800a1a2:	bf00      	nop
 800a1a4:	0800a73e 	.word	0x0800a73e
 800a1a8:	0800a744 	.word	0x0800a744
 800a1ac:	0800a748 	.word	0x0800a748
 800a1b0:	00000000 	.word	0x00000000
 800a1b4:	08009f15 	.word	0x08009f15

0800a1b8 <_printf_common>:
 800a1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1bc:	4691      	mov	r9, r2
 800a1be:	461f      	mov	r7, r3
 800a1c0:	688a      	ldr	r2, [r1, #8]
 800a1c2:	690b      	ldr	r3, [r1, #16]
 800a1c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	bfb8      	it	lt
 800a1cc:	4613      	movlt	r3, r2
 800a1ce:	f8c9 3000 	str.w	r3, [r9]
 800a1d2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1d6:	4606      	mov	r6, r0
 800a1d8:	460c      	mov	r4, r1
 800a1da:	b112      	cbz	r2, 800a1e2 <_printf_common+0x2a>
 800a1dc:	3301      	adds	r3, #1
 800a1de:	f8c9 3000 	str.w	r3, [r9]
 800a1e2:	6823      	ldr	r3, [r4, #0]
 800a1e4:	0699      	lsls	r1, r3, #26
 800a1e6:	bf42      	ittt	mi
 800a1e8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a1ec:	3302      	addmi	r3, #2
 800a1ee:	f8c9 3000 	strmi.w	r3, [r9]
 800a1f2:	6825      	ldr	r5, [r4, #0]
 800a1f4:	f015 0506 	ands.w	r5, r5, #6
 800a1f8:	d107      	bne.n	800a20a <_printf_common+0x52>
 800a1fa:	f104 0a19 	add.w	sl, r4, #25
 800a1fe:	68e3      	ldr	r3, [r4, #12]
 800a200:	f8d9 2000 	ldr.w	r2, [r9]
 800a204:	1a9b      	subs	r3, r3, r2
 800a206:	42ab      	cmp	r3, r5
 800a208:	dc28      	bgt.n	800a25c <_printf_common+0xa4>
 800a20a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a20e:	6822      	ldr	r2, [r4, #0]
 800a210:	3300      	adds	r3, #0
 800a212:	bf18      	it	ne
 800a214:	2301      	movne	r3, #1
 800a216:	0692      	lsls	r2, r2, #26
 800a218:	d42d      	bmi.n	800a276 <_printf_common+0xbe>
 800a21a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a21e:	4639      	mov	r1, r7
 800a220:	4630      	mov	r0, r6
 800a222:	47c0      	blx	r8
 800a224:	3001      	adds	r0, #1
 800a226:	d020      	beq.n	800a26a <_printf_common+0xb2>
 800a228:	6823      	ldr	r3, [r4, #0]
 800a22a:	68e5      	ldr	r5, [r4, #12]
 800a22c:	f8d9 2000 	ldr.w	r2, [r9]
 800a230:	f003 0306 	and.w	r3, r3, #6
 800a234:	2b04      	cmp	r3, #4
 800a236:	bf08      	it	eq
 800a238:	1aad      	subeq	r5, r5, r2
 800a23a:	68a3      	ldr	r3, [r4, #8]
 800a23c:	6922      	ldr	r2, [r4, #16]
 800a23e:	bf0c      	ite	eq
 800a240:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a244:	2500      	movne	r5, #0
 800a246:	4293      	cmp	r3, r2
 800a248:	bfc4      	itt	gt
 800a24a:	1a9b      	subgt	r3, r3, r2
 800a24c:	18ed      	addgt	r5, r5, r3
 800a24e:	f04f 0900 	mov.w	r9, #0
 800a252:	341a      	adds	r4, #26
 800a254:	454d      	cmp	r5, r9
 800a256:	d11a      	bne.n	800a28e <_printf_common+0xd6>
 800a258:	2000      	movs	r0, #0
 800a25a:	e008      	b.n	800a26e <_printf_common+0xb6>
 800a25c:	2301      	movs	r3, #1
 800a25e:	4652      	mov	r2, sl
 800a260:	4639      	mov	r1, r7
 800a262:	4630      	mov	r0, r6
 800a264:	47c0      	blx	r8
 800a266:	3001      	adds	r0, #1
 800a268:	d103      	bne.n	800a272 <_printf_common+0xba>
 800a26a:	f04f 30ff 	mov.w	r0, #4294967295
 800a26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a272:	3501      	adds	r5, #1
 800a274:	e7c3      	b.n	800a1fe <_printf_common+0x46>
 800a276:	18e1      	adds	r1, r4, r3
 800a278:	1c5a      	adds	r2, r3, #1
 800a27a:	2030      	movs	r0, #48	; 0x30
 800a27c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a280:	4422      	add	r2, r4
 800a282:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a286:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a28a:	3302      	adds	r3, #2
 800a28c:	e7c5      	b.n	800a21a <_printf_common+0x62>
 800a28e:	2301      	movs	r3, #1
 800a290:	4622      	mov	r2, r4
 800a292:	4639      	mov	r1, r7
 800a294:	4630      	mov	r0, r6
 800a296:	47c0      	blx	r8
 800a298:	3001      	adds	r0, #1
 800a29a:	d0e6      	beq.n	800a26a <_printf_common+0xb2>
 800a29c:	f109 0901 	add.w	r9, r9, #1
 800a2a0:	e7d8      	b.n	800a254 <_printf_common+0x9c>
	...

0800a2a4 <_printf_i>:
 800a2a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	7e09      	ldrb	r1, [r1, #24]
 800a2b0:	b085      	sub	sp, #20
 800a2b2:	296e      	cmp	r1, #110	; 0x6e
 800a2b4:	4617      	mov	r7, r2
 800a2b6:	4606      	mov	r6, r0
 800a2b8:	4698      	mov	r8, r3
 800a2ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2bc:	f000 80b3 	beq.w	800a426 <_printf_i+0x182>
 800a2c0:	d822      	bhi.n	800a308 <_printf_i+0x64>
 800a2c2:	2963      	cmp	r1, #99	; 0x63
 800a2c4:	d036      	beq.n	800a334 <_printf_i+0x90>
 800a2c6:	d80a      	bhi.n	800a2de <_printf_i+0x3a>
 800a2c8:	2900      	cmp	r1, #0
 800a2ca:	f000 80b9 	beq.w	800a440 <_printf_i+0x19c>
 800a2ce:	2958      	cmp	r1, #88	; 0x58
 800a2d0:	f000 8083 	beq.w	800a3da <_printf_i+0x136>
 800a2d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a2dc:	e032      	b.n	800a344 <_printf_i+0xa0>
 800a2de:	2964      	cmp	r1, #100	; 0x64
 800a2e0:	d001      	beq.n	800a2e6 <_printf_i+0x42>
 800a2e2:	2969      	cmp	r1, #105	; 0x69
 800a2e4:	d1f6      	bne.n	800a2d4 <_printf_i+0x30>
 800a2e6:	6820      	ldr	r0, [r4, #0]
 800a2e8:	6813      	ldr	r3, [r2, #0]
 800a2ea:	0605      	lsls	r5, r0, #24
 800a2ec:	f103 0104 	add.w	r1, r3, #4
 800a2f0:	d52a      	bpl.n	800a348 <_printf_i+0xa4>
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6011      	str	r1, [r2, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	da03      	bge.n	800a302 <_printf_i+0x5e>
 800a2fa:	222d      	movs	r2, #45	; 0x2d
 800a2fc:	425b      	negs	r3, r3
 800a2fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a302:	486f      	ldr	r0, [pc, #444]	; (800a4c0 <_printf_i+0x21c>)
 800a304:	220a      	movs	r2, #10
 800a306:	e039      	b.n	800a37c <_printf_i+0xd8>
 800a308:	2973      	cmp	r1, #115	; 0x73
 800a30a:	f000 809d 	beq.w	800a448 <_printf_i+0x1a4>
 800a30e:	d808      	bhi.n	800a322 <_printf_i+0x7e>
 800a310:	296f      	cmp	r1, #111	; 0x6f
 800a312:	d020      	beq.n	800a356 <_printf_i+0xb2>
 800a314:	2970      	cmp	r1, #112	; 0x70
 800a316:	d1dd      	bne.n	800a2d4 <_printf_i+0x30>
 800a318:	6823      	ldr	r3, [r4, #0]
 800a31a:	f043 0320 	orr.w	r3, r3, #32
 800a31e:	6023      	str	r3, [r4, #0]
 800a320:	e003      	b.n	800a32a <_printf_i+0x86>
 800a322:	2975      	cmp	r1, #117	; 0x75
 800a324:	d017      	beq.n	800a356 <_printf_i+0xb2>
 800a326:	2978      	cmp	r1, #120	; 0x78
 800a328:	d1d4      	bne.n	800a2d4 <_printf_i+0x30>
 800a32a:	2378      	movs	r3, #120	; 0x78
 800a32c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a330:	4864      	ldr	r0, [pc, #400]	; (800a4c4 <_printf_i+0x220>)
 800a332:	e055      	b.n	800a3e0 <_printf_i+0x13c>
 800a334:	6813      	ldr	r3, [r2, #0]
 800a336:	1d19      	adds	r1, r3, #4
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	6011      	str	r1, [r2, #0]
 800a33c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a344:	2301      	movs	r3, #1
 800a346:	e08c      	b.n	800a462 <_printf_i+0x1be>
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	6011      	str	r1, [r2, #0]
 800a34c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a350:	bf18      	it	ne
 800a352:	b21b      	sxthne	r3, r3
 800a354:	e7cf      	b.n	800a2f6 <_printf_i+0x52>
 800a356:	6813      	ldr	r3, [r2, #0]
 800a358:	6825      	ldr	r5, [r4, #0]
 800a35a:	1d18      	adds	r0, r3, #4
 800a35c:	6010      	str	r0, [r2, #0]
 800a35e:	0628      	lsls	r0, r5, #24
 800a360:	d501      	bpl.n	800a366 <_printf_i+0xc2>
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	e002      	b.n	800a36c <_printf_i+0xc8>
 800a366:	0668      	lsls	r0, r5, #25
 800a368:	d5fb      	bpl.n	800a362 <_printf_i+0xbe>
 800a36a:	881b      	ldrh	r3, [r3, #0]
 800a36c:	4854      	ldr	r0, [pc, #336]	; (800a4c0 <_printf_i+0x21c>)
 800a36e:	296f      	cmp	r1, #111	; 0x6f
 800a370:	bf14      	ite	ne
 800a372:	220a      	movne	r2, #10
 800a374:	2208      	moveq	r2, #8
 800a376:	2100      	movs	r1, #0
 800a378:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a37c:	6865      	ldr	r5, [r4, #4]
 800a37e:	60a5      	str	r5, [r4, #8]
 800a380:	2d00      	cmp	r5, #0
 800a382:	f2c0 8095 	blt.w	800a4b0 <_printf_i+0x20c>
 800a386:	6821      	ldr	r1, [r4, #0]
 800a388:	f021 0104 	bic.w	r1, r1, #4
 800a38c:	6021      	str	r1, [r4, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d13d      	bne.n	800a40e <_printf_i+0x16a>
 800a392:	2d00      	cmp	r5, #0
 800a394:	f040 808e 	bne.w	800a4b4 <_printf_i+0x210>
 800a398:	4665      	mov	r5, ip
 800a39a:	2a08      	cmp	r2, #8
 800a39c:	d10b      	bne.n	800a3b6 <_printf_i+0x112>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	07db      	lsls	r3, r3, #31
 800a3a2:	d508      	bpl.n	800a3b6 <_printf_i+0x112>
 800a3a4:	6923      	ldr	r3, [r4, #16]
 800a3a6:	6862      	ldr	r2, [r4, #4]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	bfde      	ittt	le
 800a3ac:	2330      	movle	r3, #48	; 0x30
 800a3ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3b6:	ebac 0305 	sub.w	r3, ip, r5
 800a3ba:	6123      	str	r3, [r4, #16]
 800a3bc:	f8cd 8000 	str.w	r8, [sp]
 800a3c0:	463b      	mov	r3, r7
 800a3c2:	aa03      	add	r2, sp, #12
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	f7ff fef6 	bl	800a1b8 <_printf_common>
 800a3cc:	3001      	adds	r0, #1
 800a3ce:	d14d      	bne.n	800a46c <_printf_i+0x1c8>
 800a3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d4:	b005      	add	sp, #20
 800a3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a3da:	4839      	ldr	r0, [pc, #228]	; (800a4c0 <_printf_i+0x21c>)
 800a3dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a3e0:	6813      	ldr	r3, [r2, #0]
 800a3e2:	6821      	ldr	r1, [r4, #0]
 800a3e4:	1d1d      	adds	r5, r3, #4
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	6015      	str	r5, [r2, #0]
 800a3ea:	060a      	lsls	r2, r1, #24
 800a3ec:	d50b      	bpl.n	800a406 <_printf_i+0x162>
 800a3ee:	07ca      	lsls	r2, r1, #31
 800a3f0:	bf44      	itt	mi
 800a3f2:	f041 0120 	orrmi.w	r1, r1, #32
 800a3f6:	6021      	strmi	r1, [r4, #0]
 800a3f8:	b91b      	cbnz	r3, 800a402 <_printf_i+0x15e>
 800a3fa:	6822      	ldr	r2, [r4, #0]
 800a3fc:	f022 0220 	bic.w	r2, r2, #32
 800a400:	6022      	str	r2, [r4, #0]
 800a402:	2210      	movs	r2, #16
 800a404:	e7b7      	b.n	800a376 <_printf_i+0xd2>
 800a406:	064d      	lsls	r5, r1, #25
 800a408:	bf48      	it	mi
 800a40a:	b29b      	uxthmi	r3, r3
 800a40c:	e7ef      	b.n	800a3ee <_printf_i+0x14a>
 800a40e:	4665      	mov	r5, ip
 800a410:	fbb3 f1f2 	udiv	r1, r3, r2
 800a414:	fb02 3311 	mls	r3, r2, r1, r3
 800a418:	5cc3      	ldrb	r3, [r0, r3]
 800a41a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a41e:	460b      	mov	r3, r1
 800a420:	2900      	cmp	r1, #0
 800a422:	d1f5      	bne.n	800a410 <_printf_i+0x16c>
 800a424:	e7b9      	b.n	800a39a <_printf_i+0xf6>
 800a426:	6813      	ldr	r3, [r2, #0]
 800a428:	6825      	ldr	r5, [r4, #0]
 800a42a:	6961      	ldr	r1, [r4, #20]
 800a42c:	1d18      	adds	r0, r3, #4
 800a42e:	6010      	str	r0, [r2, #0]
 800a430:	0628      	lsls	r0, r5, #24
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	d501      	bpl.n	800a43a <_printf_i+0x196>
 800a436:	6019      	str	r1, [r3, #0]
 800a438:	e002      	b.n	800a440 <_printf_i+0x19c>
 800a43a:	066a      	lsls	r2, r5, #25
 800a43c:	d5fb      	bpl.n	800a436 <_printf_i+0x192>
 800a43e:	8019      	strh	r1, [r3, #0]
 800a440:	2300      	movs	r3, #0
 800a442:	6123      	str	r3, [r4, #16]
 800a444:	4665      	mov	r5, ip
 800a446:	e7b9      	b.n	800a3bc <_printf_i+0x118>
 800a448:	6813      	ldr	r3, [r2, #0]
 800a44a:	1d19      	adds	r1, r3, #4
 800a44c:	6011      	str	r1, [r2, #0]
 800a44e:	681d      	ldr	r5, [r3, #0]
 800a450:	6862      	ldr	r2, [r4, #4]
 800a452:	2100      	movs	r1, #0
 800a454:	4628      	mov	r0, r5
 800a456:	f7f5 ff0b 	bl	8000270 <memchr>
 800a45a:	b108      	cbz	r0, 800a460 <_printf_i+0x1bc>
 800a45c:	1b40      	subs	r0, r0, r5
 800a45e:	6060      	str	r0, [r4, #4]
 800a460:	6863      	ldr	r3, [r4, #4]
 800a462:	6123      	str	r3, [r4, #16]
 800a464:	2300      	movs	r3, #0
 800a466:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a46a:	e7a7      	b.n	800a3bc <_printf_i+0x118>
 800a46c:	6923      	ldr	r3, [r4, #16]
 800a46e:	462a      	mov	r2, r5
 800a470:	4639      	mov	r1, r7
 800a472:	4630      	mov	r0, r6
 800a474:	47c0      	blx	r8
 800a476:	3001      	adds	r0, #1
 800a478:	d0aa      	beq.n	800a3d0 <_printf_i+0x12c>
 800a47a:	6823      	ldr	r3, [r4, #0]
 800a47c:	079b      	lsls	r3, r3, #30
 800a47e:	d413      	bmi.n	800a4a8 <_printf_i+0x204>
 800a480:	68e0      	ldr	r0, [r4, #12]
 800a482:	9b03      	ldr	r3, [sp, #12]
 800a484:	4298      	cmp	r0, r3
 800a486:	bfb8      	it	lt
 800a488:	4618      	movlt	r0, r3
 800a48a:	e7a3      	b.n	800a3d4 <_printf_i+0x130>
 800a48c:	2301      	movs	r3, #1
 800a48e:	464a      	mov	r2, r9
 800a490:	4639      	mov	r1, r7
 800a492:	4630      	mov	r0, r6
 800a494:	47c0      	blx	r8
 800a496:	3001      	adds	r0, #1
 800a498:	d09a      	beq.n	800a3d0 <_printf_i+0x12c>
 800a49a:	3501      	adds	r5, #1
 800a49c:	68e3      	ldr	r3, [r4, #12]
 800a49e:	9a03      	ldr	r2, [sp, #12]
 800a4a0:	1a9b      	subs	r3, r3, r2
 800a4a2:	42ab      	cmp	r3, r5
 800a4a4:	dcf2      	bgt.n	800a48c <_printf_i+0x1e8>
 800a4a6:	e7eb      	b.n	800a480 <_printf_i+0x1dc>
 800a4a8:	2500      	movs	r5, #0
 800a4aa:	f104 0919 	add.w	r9, r4, #25
 800a4ae:	e7f5      	b.n	800a49c <_printf_i+0x1f8>
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d1ac      	bne.n	800a40e <_printf_i+0x16a>
 800a4b4:	7803      	ldrb	r3, [r0, #0]
 800a4b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a4ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a4be:	e76c      	b.n	800a39a <_printf_i+0xf6>
 800a4c0:	0800a74f 	.word	0x0800a74f
 800a4c4:	0800a760 	.word	0x0800a760

0800a4c8 <_sbrk_r>:
 800a4c8:	b538      	push	{r3, r4, r5, lr}
 800a4ca:	4c06      	ldr	r4, [pc, #24]	; (800a4e4 <_sbrk_r+0x1c>)
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	6023      	str	r3, [r4, #0]
 800a4d4:	f7f9 f8e6 	bl	80036a4 <_sbrk>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d102      	bne.n	800a4e2 <_sbrk_r+0x1a>
 800a4dc:	6823      	ldr	r3, [r4, #0]
 800a4de:	b103      	cbz	r3, 800a4e2 <_sbrk_r+0x1a>
 800a4e0:	602b      	str	r3, [r5, #0]
 800a4e2:	bd38      	pop	{r3, r4, r5, pc}
 800a4e4:	2005a9d0 	.word	0x2005a9d0

0800a4e8 <__ascii_wctomb>:
 800a4e8:	b149      	cbz	r1, 800a4fe <__ascii_wctomb+0x16>
 800a4ea:	2aff      	cmp	r2, #255	; 0xff
 800a4ec:	bf85      	ittet	hi
 800a4ee:	238a      	movhi	r3, #138	; 0x8a
 800a4f0:	6003      	strhi	r3, [r0, #0]
 800a4f2:	700a      	strbls	r2, [r1, #0]
 800a4f4:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4f8:	bf98      	it	ls
 800a4fa:	2001      	movls	r0, #1
 800a4fc:	4770      	bx	lr
 800a4fe:	4608      	mov	r0, r1
 800a500:	4770      	bx	lr

0800a502 <memmove>:
 800a502:	4288      	cmp	r0, r1
 800a504:	b510      	push	{r4, lr}
 800a506:	eb01 0302 	add.w	r3, r1, r2
 800a50a:	d807      	bhi.n	800a51c <memmove+0x1a>
 800a50c:	1e42      	subs	r2, r0, #1
 800a50e:	4299      	cmp	r1, r3
 800a510:	d00a      	beq.n	800a528 <memmove+0x26>
 800a512:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a516:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a51a:	e7f8      	b.n	800a50e <memmove+0xc>
 800a51c:	4283      	cmp	r3, r0
 800a51e:	d9f5      	bls.n	800a50c <memmove+0xa>
 800a520:	1881      	adds	r1, r0, r2
 800a522:	1ad2      	subs	r2, r2, r3
 800a524:	42d3      	cmn	r3, r2
 800a526:	d100      	bne.n	800a52a <memmove+0x28>
 800a528:	bd10      	pop	{r4, pc}
 800a52a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a52e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a532:	e7f7      	b.n	800a524 <memmove+0x22>

0800a534 <__malloc_lock>:
 800a534:	4770      	bx	lr

0800a536 <__malloc_unlock>:
 800a536:	4770      	bx	lr

0800a538 <_realloc_r>:
 800a538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53a:	4607      	mov	r7, r0
 800a53c:	4614      	mov	r4, r2
 800a53e:	460e      	mov	r6, r1
 800a540:	b921      	cbnz	r1, 800a54c <_realloc_r+0x14>
 800a542:	4611      	mov	r1, r2
 800a544:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a548:	f7ff bc8a 	b.w	8009e60 <_malloc_r>
 800a54c:	b922      	cbnz	r2, 800a558 <_realloc_r+0x20>
 800a54e:	f7ff fc39 	bl	8009dc4 <_free_r>
 800a552:	4625      	mov	r5, r4
 800a554:	4628      	mov	r0, r5
 800a556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a558:	f000 f814 	bl	800a584 <_malloc_usable_size_r>
 800a55c:	42a0      	cmp	r0, r4
 800a55e:	d20f      	bcs.n	800a580 <_realloc_r+0x48>
 800a560:	4621      	mov	r1, r4
 800a562:	4638      	mov	r0, r7
 800a564:	f7ff fc7c 	bl	8009e60 <_malloc_r>
 800a568:	4605      	mov	r5, r0
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d0f2      	beq.n	800a554 <_realloc_r+0x1c>
 800a56e:	4631      	mov	r1, r6
 800a570:	4622      	mov	r2, r4
 800a572:	f7ff fad9 	bl	8009b28 <memcpy>
 800a576:	4631      	mov	r1, r6
 800a578:	4638      	mov	r0, r7
 800a57a:	f7ff fc23 	bl	8009dc4 <_free_r>
 800a57e:	e7e9      	b.n	800a554 <_realloc_r+0x1c>
 800a580:	4635      	mov	r5, r6
 800a582:	e7e7      	b.n	800a554 <_realloc_r+0x1c>

0800a584 <_malloc_usable_size_r>:
 800a584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a588:	1f18      	subs	r0, r3, #4
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	bfbc      	itt	lt
 800a58e:	580b      	ldrlt	r3, [r1, r0]
 800a590:	18c0      	addlt	r0, r0, r3
 800a592:	4770      	bx	lr

0800a594 <_init>:
 800a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a596:	bf00      	nop
 800a598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a59a:	bc08      	pop	{r3}
 800a59c:	469e      	mov	lr, r3
 800a59e:	4770      	bx	lr

0800a5a0 <_fini>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	bf00      	nop
 800a5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a6:	bc08      	pop	{r3}
 800a5a8:	469e      	mov	lr, r3
 800a5aa:	4770      	bx	lr
